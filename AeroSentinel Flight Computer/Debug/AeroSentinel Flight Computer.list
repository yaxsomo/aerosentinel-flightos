
AeroSentinel Flight Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000175dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c0  08017770  08017770  00027770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018a30  08018a30  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08018a30  08018a30  00028a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018a38  08018a38  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018a38  08018a38  00028a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018a3c  08018a3c  00028a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08018a40  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          00002e48  20000200  20000200  00030200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003048  20003048  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .comment      00000093  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026678  00000000  00000000  000302c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000047fd  00000000  00000000  0005693b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002228  00000000  00000000  0005b138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a8f  00000000  00000000  0005d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000278fc  00000000  00000000  0005edef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027f7b  00000000  00000000  000866eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e314a  00000000  00000000  000ae666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ab78  00000000  00000000  001917b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  0019c328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017754 	.word	0x08017754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08017754 	.word	0x08017754

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <UART_Transmit_Messages_BlackBox>:

extern UART_HandleTypeDef huart1;


void UART_Transmit_Messages_BlackBox(const char* str)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff f939 	bl	8000270 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <UART_Transmit_Messages_BlackBox+0x28>)
 800100a:	f008 f8c8 	bl	800919e <HAL_UART_Transmit>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20002ba4 	.word	0x20002ba4

0800101c <buf_clear>:
	while(*buf++ != '\0') i++;
	return i;

}

void buf_clear(void){
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++ ){
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	e007      	b.n	8001038 <buf_clear+0x1c>
		data_buffer[i] = '\0';
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <buf_clear+0x34>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++ ){
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3301      	adds	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103e:	dbf3      	blt.n	8001028 <buf_clear+0xc>
	}
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20001ab4 	.word	0x20001ab4

08001054 <mount_sd_card>:


void mount_sd_card(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "",0);
 8001058:	2200      	movs	r2, #0
 800105a:	490a      	ldr	r1, [pc, #40]	; (8001084 <mount_sd_card+0x30>)
 800105c:	480a      	ldr	r0, [pc, #40]	; (8001088 <mount_sd_card+0x34>)
 800105e:	f009 fa81 	bl	800a564 <f_mount>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <mount_sd_card+0x38>)
 8001068:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <mount_sd_card+0x38>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <mount_sd_card+0x26>
	{
		UART_Transmit_Messages_BlackBox("Error mounting the SD Card \r\n");
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <mount_sd_card+0x3c>)
 8001074:	f7ff ffbc 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
	} else {
		UART_Transmit_Messages_BlackBox("SD Card mounted successfully! \r\n");
	}
}
 8001078:	e002      	b.n	8001080 <mount_sd_card+0x2c>
		UART_Transmit_Messages_BlackBox("SD Card mounted successfully! \r\n");
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <mount_sd_card+0x40>)
 800107c:	f7ff ffb8 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	08017770 	.word	0x08017770
 8001088:	20000a78 	.word	0x20000a78
 800108c:	20001ab0 	.word	0x20001ab0
 8001090:	08017774 	.word	0x08017774
 8001094:	08017794 	.word	0x08017794

08001098 <check_free_space>:

void check_free_space() {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
    f_getfree("", &fre_clust, &pfs);
 800109e:	4a37      	ldr	r2, [pc, #220]	; (800117c <check_free_space+0xe4>)
 80010a0:	4937      	ldr	r1, [pc, #220]	; (8001180 <check_free_space+0xe8>)
 80010a2:	4838      	ldr	r0, [pc, #224]	; (8001184 <check_free_space+0xec>)
 80010a4:	f009 faa4 	bl	800a5f0 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80010a8:	4b34      	ldr	r3, [pc, #208]	; (800117c <check_free_space+0xe4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	3b02      	subs	r3, #2
 80010b0:	4a32      	ldr	r2, [pc, #200]	; (800117c <check_free_space+0xe4>)
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	8952      	ldrh	r2, [r2, #10]
 80010b6:	fb02 f303 	mul.w	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa22 	bl	8000504 <__aeabi_ui2d>
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b30      	ldr	r3, [pc, #192]	; (8001188 <check_free_space+0xf0>)
 80010c6:	f7ff fa97 	bl	80005f8 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fd69 	bl	8000ba8 <__aeabi_d2uiz>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a2c      	ldr	r2, [pc, #176]	; (800118c <check_free_space+0xf4>)
 80010da:	6013      	str	r3, [r2, #0]
    float total_GB = (float)total / (1024.0 * 1024.0);
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <check_free_space+0xf4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001190 <check_free_space+0xf8>
 80010ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f0:	edc7 7a01 	vstr	s15, [r7, #4]
    sprintf(data_buffer, "SD CARD Total Size: \t%.2f GB\r\n", total_GB);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fa27 	bl	8000548 <__aeabi_f2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4925      	ldr	r1, [pc, #148]	; (8001194 <check_free_space+0xfc>)
 8001100:	4825      	ldr	r0, [pc, #148]	; (8001198 <check_free_space+0x100>)
 8001102:	f011 f83f 	bl	8012184 <siprintf>
    UART_Transmit_Messages_BlackBox(data_buffer);
 8001106:	4824      	ldr	r0, [pc, #144]	; (8001198 <check_free_space+0x100>)
 8001108:	f7ff ff72 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
    buf_clear();
 800110c:	f7ff ff86 	bl	800101c <buf_clear>

    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <check_free_space+0xe4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	895b      	ldrh	r3, [r3, #10]
 8001116:	461a      	mov	r2, r3
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <check_free_space+0xe8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f9ef 	bl	8000504 <__aeabi_ui2d>
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <check_free_space+0xf0>)
 800112c:	f7ff fa64 	bl	80005f8 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fd36 	bl	8000ba8 <__aeabi_d2uiz>
 800113c:	4603      	mov	r3, r0
 800113e:	4a17      	ldr	r2, [pc, #92]	; (800119c <check_free_space+0x104>)
 8001140:	6013      	str	r3, [r2, #0]
    float free_space_GB = (float)free_space / (1024.0 * 1024.0);
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <check_free_space+0x104>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800114e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001190 <check_free_space+0xf8>
 8001152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001156:	edc7 7a00 	vstr	s15, [r7]
    sprintf(data_buffer, "SD CARD Free Space: \t%.2f GB\r\n", free_space_GB);
 800115a:	6838      	ldr	r0, [r7, #0]
 800115c:	f7ff f9f4 	bl	8000548 <__aeabi_f2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	490e      	ldr	r1, [pc, #56]	; (80011a0 <check_free_space+0x108>)
 8001166:	480c      	ldr	r0, [pc, #48]	; (8001198 <check_free_space+0x100>)
 8001168:	f011 f80c 	bl	8012184 <siprintf>
    UART_Transmit_Messages_BlackBox(data_buffer);
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <check_free_space+0x100>)
 800116e:	f7ff ff3f 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20001eb4 	.word	0x20001eb4
 8001180:	20001eb8 	.word	0x20001eb8
 8001184:	08017770 	.word	0x08017770
 8001188:	3fe00000 	.word	0x3fe00000
 800118c:	20001ebc 	.word	0x20001ebc
 8001190:	49800000 	.word	0x49800000
 8001194:	080177b8 	.word	0x080177b8
 8001198:	20001ab4 	.word	0x20001ab4
 800119c:	20001ec0 	.word	0x20001ec0
 80011a0:	080177d8 	.word	0x080177d8

080011a4 <QMC_init>:



//###############################################################################################################
uint32_t QMC_init(I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af04      	add	r7, sp, #16
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
	uint8_t array[2];
	magneto_sensor.i2c=i2c;
 80011b0:	4a33      	ldr	r2, [pc, #204]	; (8001280 <QMC_init+0xdc>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
	magneto_sensor.Control_Register=0x11;
 80011b6:	4b32      	ldr	r3, [pc, #200]	; (8001280 <QMC_init+0xdc>)
 80011b8:	2211      	movs	r2, #17
 80011ba:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 80011bc:	2301      	movs	r3, #1
 80011be:	733b      	strb	r3, [r7, #12]
	array[1]=magneto_sensor.Control_Register;
 80011c0:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <QMC_init+0xdc>)
 80011c2:	791b      	ldrb	r3, [r3, #4]
 80011c4:	737b      	strb	r3, [r7, #13]

	if(Output_Data_Rate==200)magneto_sensor.Control_Register|=0b00001100;
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	2bc8      	cmp	r3, #200	; 0xc8
 80011ca:	d107      	bne.n	80011dc <QMC_init+0x38>
 80011cc:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <QMC_init+0xdc>)
 80011ce:	791b      	ldrb	r3, [r3, #4]
 80011d0:	f043 030c 	orr.w	r3, r3, #12
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <QMC_init+0xdc>)
 80011d8:	711a      	strb	r2, [r3, #4]
 80011da:	e024      	b.n	8001226 <QMC_init+0x82>
	else if(Output_Data_Rate==100)magneto_sensor.Control_Register|=0b00001000;
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	2b64      	cmp	r3, #100	; 0x64
 80011e0:	d107      	bne.n	80011f2 <QMC_init+0x4e>
 80011e2:	4b27      	ldr	r3, [pc, #156]	; (8001280 <QMC_init+0xdc>)
 80011e4:	791b      	ldrb	r3, [r3, #4]
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <QMC_init+0xdc>)
 80011ee:	711a      	strb	r2, [r3, #4]
 80011f0:	e019      	b.n	8001226 <QMC_init+0x82>
	else if(Output_Data_Rate==50)magneto_sensor.Control_Register|=0b00000100;
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	2b32      	cmp	r3, #50	; 0x32
 80011f6:	d107      	bne.n	8001208 <QMC_init+0x64>
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <QMC_init+0xdc>)
 80011fa:	791b      	ldrb	r3, [r3, #4]
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <QMC_init+0xdc>)
 8001204:	711a      	strb	r2, [r3, #4]
 8001206:	e00e      	b.n	8001226 <QMC_init+0x82>
	else if(Output_Data_Rate==10)magneto_sensor.Control_Register|=0b00000000;
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b0a      	cmp	r3, #10
 800120c:	d104      	bne.n	8001218 <QMC_init+0x74>
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <QMC_init+0xdc>)
 8001210:	791a      	ldrb	r2, [r3, #4]
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <QMC_init+0xdc>)
 8001214:	711a      	strb	r2, [r3, #4]
 8001216:	e006      	b.n	8001226 <QMC_init+0x82>
	else magneto_sensor.Control_Register|=0b00001100;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <QMC_init+0xdc>)
 800121a:	791b      	ldrb	r3, [r3, #4]
 800121c:	f043 030c 	orr.w	r3, r3, #12
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <QMC_init+0xdc>)
 8001224:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <QMC_init+0xdc>)
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	2364      	movs	r3, #100	; 0x64
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2301      	movs	r3, #1
 800123a:	220b      	movs	r2, #11
 800123c:	211a      	movs	r1, #26
 800123e:	f004 ff97 	bl	8006170 <HAL_I2C_Mem_Write>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <QMC_init+0xa8>
 8001248:	2301      	movs	r3, #1
 800124a:	e014      	b.n	8001276 <QMC_init+0xd2>
	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <QMC_init+0xdc>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	2364      	movs	r3, #100	; 0x64
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	2301      	movs	r3, #1
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	3301      	adds	r3, #1
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	2209      	movs	r2, #9
 8001264:	211a      	movs	r1, #26
 8001266:	f004 ff83 	bl	8006170 <HAL_I2C_Mem_Write>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <QMC_init+0xd0>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <QMC_init+0xd2>

	return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20001ec4 	.word	0x20001ec4
 8001284:	00000000 	.word	0x00000000

08001288 <QMC_read>:

uint8_t QMC_read()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af04      	add	r7, sp, #16
	  magneto_sensor.datas[0]=0;
 800128e:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <QMC_read+0x138>)
 8001290:	2200      	movs	r2, #0
 8001292:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x06, 1, magneto_sensor.datas, 1, 100);
 8001294:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <QMC_read+0x138>)
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	2364      	movs	r3, #100	; 0x64
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	2301      	movs	r3, #1
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <QMC_read+0x13c>)
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2301      	movs	r3, #1
 80012a6:	2206      	movs	r2, #6
 80012a8:	211a      	movs	r1, #26
 80012aa:	f005 f85b 	bl	8006364 <HAL_I2C_Mem_Read>

	  if((magneto_sensor.datas[0]&0x01)==1)
 80012ae:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <QMC_read+0x138>)
 80012b0:	795b      	ldrb	r3, [r3, #5]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d075      	beq.n	80013a6 <QMC_read+0x11e>
	  {
		  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x00, 1, magneto_sensor.datas, 6, 100);
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <QMC_read+0x138>)
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	2364      	movs	r3, #100	; 0x64
 80012c0:	9302      	str	r3, [sp, #8]
 80012c2:	2306      	movs	r3, #6
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <QMC_read+0x13c>)
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	2200      	movs	r2, #0
 80012ce:	211a      	movs	r1, #26
 80012d0:	f005 f848 	bl	8006364 <HAL_I2C_Mem_Read>
		  magneto_sensor.Xaxis= (magneto_sensor.datas[1]<<8) | magneto_sensor.datas[0];
 80012d4:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <QMC_read+0x138>)
 80012d6:	799b      	ldrb	r3, [r3, #6]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <QMC_read+0x138>)
 80012de:	795b      	ldrb	r3, [r3, #5]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <QMC_read+0x138>)
 80012e8:	819a      	strh	r2, [r3, #12]
		  magneto_sensor.Yaxis= (magneto_sensor.datas[3]<<8) | magneto_sensor.datas[2];
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <QMC_read+0x138>)
 80012ec:	7a1b      	ldrb	r3, [r3, #8]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <QMC_read+0x138>)
 80012f4:	79db      	ldrb	r3, [r3, #7]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <QMC_read+0x138>)
 80012fe:	81da      	strh	r2, [r3, #14]
		  magneto_sensor.Zaxis= (magneto_sensor.datas[5]<<8) | magneto_sensor.datas[4];
 8001300:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <QMC_read+0x138>)
 8001302:	7a9b      	ldrb	r3, [r3, #10]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <QMC_read+0x138>)
 800130a:	7a5b      	ldrb	r3, [r3, #9]
 800130c:	b21b      	sxth	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b21a      	sxth	r2, r3
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <QMC_read+0x138>)
 8001314:	821a      	strh	r2, [r3, #16]

		  magneto_sensor.compas=atan2f(magneto_sensor.Yaxis,magneto_sensor.Xaxis)*180.00/M_PI;
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <QMC_read+0x138>)
 8001318:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <QMC_read+0x138>)
 8001326:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800132a:	ee07 3a10 	vmov	s14, r3
 800132e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001332:	eef0 0a47 	vmov.f32	s1, s14
 8001336:	eeb0 0a67 	vmov.f32	s0, s15
 800133a:	f014 fca5 	bl	8015c88 <atan2f>
 800133e:	ee10 3a10 	vmov	r3, s0
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f900 	bl	8000548 <__aeabi_f2d>
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <QMC_read+0x140>)
 800134e:	f7ff f953 	bl	80005f8 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	a317      	add	r3, pc, #92	; (adr r3, 80013b8 <QMC_read+0x130>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f7ff fa74 	bl	800084c <__aeabi_ddiv>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f7ff fc3c 	bl	8000be8 <__aeabi_d2f>
 8001370:	4603      	mov	r3, r0
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <QMC_read+0x138>)
 8001374:	6193      	str	r3, [r2, #24]

		  if(magneto_sensor.compas>0)
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <QMC_read+0x138>)
 8001378:	edd3 7a06 	vldr	s15, [r3, #24]
 800137c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	dd04      	ble.n	8001390 <QMC_read+0x108>
		  {
			  magneto_sensor.heading= magneto_sensor.compas;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <QMC_read+0x138>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <QMC_read+0x138>)
 800138c:	6153      	str	r3, [r2, #20]
 800138e:	e00c      	b.n	80013aa <QMC_read+0x122>
		  }
		  else
		  {
			  magneto_sensor.heading=360+magneto_sensor.compas;
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <QMC_read+0x138>)
 8001392:	edd3 7a06 	vldr	s15, [r3, #24]
 8001396:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013cc <QMC_read+0x144>
 800139a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <QMC_read+0x138>)
 80013a0:	edc3 7a05 	vstr	s15, [r3, #20]
 80013a4:	e001      	b.n	80013aa <QMC_read+0x122>
		  }
	  }
	  else
	  {
		  return 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <QMC_read+0x124>
	  }
return 0;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	f3af 8000 	nop.w
 80013b8:	54442d18 	.word	0x54442d18
 80013bc:	400921fb 	.word	0x400921fb
 80013c0:	20001ec4 	.word	0x20001ec4
 80013c4:	20001ec9 	.word	0x20001ec9
 80013c8:	40668000 	.word	0x40668000
 80013cc:	43b40000 	.word	0x43b40000

080013d0 <Transmit_Compass_Data>:
}




CompassData Transmit_Compass_Data(){
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]


		if(QMC_read() == 0)
 80013d8:	f7ff ff56 	bl	8001288 <QMC_read>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 8082 	bne.w	80014e8 <Transmit_Compass_Data+0x118>
		{
			float heading = magneto_sensor.heading;
 80013e4:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <Transmit_Compass_Data+0x150>)
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	61fb      	str	r3, [r7, #28]


	        // Calculate magDecRad based on your requirements
			double calculatedMagDecRad = heading * (M_PI / 180.0);
 80013ea:	69f8      	ldr	r0, [r7, #28]
 80013ec:	f7ff f8ac 	bl	8000548 <__aeabi_f2d>
 80013f0:	a349      	add	r3, pc, #292	; (adr r3, 8001518 <Transmit_Compass_Data+0x148>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f8ff 	bl	80005f8 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9c7 2304 	strd	r2, r3, [r7, #16]


			//Compas_Value=magneto_sensor.heading;
			//char mag_buffer[100];
			compass_data.mag_unit_x = (double)magneto_sensor.Xaxis;
 8001402:	4b47      	ldr	r3, [pc, #284]	; (8001520 <Transmit_Compass_Data+0x150>)
 8001404:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f88b 	bl	8000524 <__aeabi_i2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4944      	ldr	r1, [pc, #272]	; (8001524 <Transmit_Compass_Data+0x154>)
 8001414:	e9c1 2304 	strd	r2, r3, [r1, #16]
			compass_data.mag_unit_y = (double)magneto_sensor.Yaxis;
 8001418:	4b41      	ldr	r3, [pc, #260]	; (8001520 <Transmit_Compass_Data+0x150>)
 800141a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f880 	bl	8000524 <__aeabi_i2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	493e      	ldr	r1, [pc, #248]	; (8001524 <Transmit_Compass_Data+0x154>)
 800142a:	e9c1 2306 	strd	r2, r3, [r1, #24]
			compass_data.mag_unit_z = (double)magneto_sensor.Zaxis;
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <Transmit_Compass_Data+0x150>)
 8001430:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f875 	bl	8000524 <__aeabi_i2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4939      	ldr	r1, [pc, #228]	; (8001524 <Transmit_Compass_Data+0x154>)
 8001440:	e9c1 2308 	strd	r2, r3, [r1, #32]
			//sprintf(mag_buffer, "X=%d, Y=%d, Z=%d \r\n", magneto_sensor.Xaxis, magneto_sensor.Yaxis, magneto_sensor.Zaxis);
			//sprintf(mag_heading_buffer, "HEADING : %.1f\r\n",magneto_sensor.heading);
			//UART_Transmit_Messages_Magnetometer(mag_buffer);
			//UART_Transmit_Messages_Magnetometer(mag_heading_buffer);

	        const int numDirections = sizeof(directions) / sizeof(directions[0]);
 8001444:	2309      	movs	r3, #9
 8001446:	60fb      	str	r3, [r7, #12]
	        const char* direction = "Unknown";
 8001448:	4b37      	ldr	r3, [pc, #220]	; (8001528 <Transmit_Compass_Data+0x158>)
 800144a:	627b      	str	r3, [r7, #36]	; 0x24

	        for (int i = 0; i < numDirections; ++i) {
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
 8001450:	e02e      	b.n	80014b0 <Transmit_Compass_Data+0xe0>
	            if (heading >= directions[i].min && heading <= directions[i].max) {
 8001452:	4936      	ldr	r1, [pc, #216]	; (800152c <Transmit_Compass_Data+0x15c>)
 8001454:	6a3a      	ldr	r2, [r7, #32]
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	ed97 7a07 	vldr	s14, [r7, #28]
 8001468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	db1b      	blt.n	80014aa <Transmit_Compass_Data+0xda>
 8001472:	492e      	ldr	r1, [pc, #184]	; (800152c <Transmit_Compass_Data+0x15c>)
 8001474:	6a3a      	ldr	r2, [r7, #32]
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	3304      	adds	r3, #4
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ed97 7a07 	vldr	s14, [r7, #28]
 800148a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	d80a      	bhi.n	80014aa <Transmit_Compass_Data+0xda>
	                direction = directions[i].direction;
 8001494:	4925      	ldr	r1, [pc, #148]	; (800152c <Transmit_Compass_Data+0x15c>)
 8001496:	6a3a      	ldr	r2, [r7, #32]
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	3308      	adds	r3, #8
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
	                break;
 80014a8:	e006      	b.n	80014b8 <Transmit_Compass_Data+0xe8>
	        for (int i = 0; i < numDirections; ++i) {
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	3301      	adds	r3, #1
 80014ae:	623b      	str	r3, [r7, #32]
 80014b0:	6a3a      	ldr	r2, [r7, #32]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbcc      	blt.n	8001452 <Transmit_Compass_Data+0x82>
	            }
	        }

	        compass_data.heading = heading;
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	6013      	str	r3, [r2, #0]
	        compass_data.direction = direction;
 80014be:	4a19      	ldr	r2, [pc, #100]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	6293      	str	r3, [r2, #40]	; 0x28
	        compass_data.magDecRad = calculatedMagDecRad;
 80014c4:	4917      	ldr	r1, [pc, #92]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014ca:	e9c1 2302 	strd	r2, r3, [r1, #8]



	        return compass_data;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014d2:	461c      	mov	r4, r3
 80014d4:	4615      	mov	r5, r2
 80014d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014e6:	e012      	b.n	800150e <Transmit_Compass_Data+0x13e>

		}
		else
		{
	        compass_data.heading = 0;
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
	        compass_data.direction = "ERR";
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014f2:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <Transmit_Compass_Data+0x160>)
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28

	        return compass_data;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014fa:	461c      	mov	r4, r3
 80014fc:	4615      	mov	r5, r2
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001506:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800150a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}

}
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bdb0      	pop	{r4, r5, r7, pc}
 8001516:	bf00      	nop
 8001518:	a2529d39 	.word	0xa2529d39
 800151c:	3f91df46 	.word	0x3f91df46
 8001520:	20001ec4 	.word	0x20001ec4
 8001524:	20001ee0 	.word	0x20001ee0
 8001528:	08017960 	.word	0x08017960
 800152c:	08018110 	.word	0x08018110
 8001530:	08017968 	.word	0x08017968

08001534 <UART_Transmit_String>:
	uint8_t all_reg_rx[8];
	struct LoRa_Handler LoraRX={0};


void UART_Transmit_String(const char* str)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7fe fe97 	bl	8000270 <strlen>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <UART_Transmit_String+0x28>)
 800154e:	f007 fe26 	bl	800919e <HAL_UART_Transmit>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20002ba4 	.word	0x20002ba4

08001560 <printIntroTitle>:




void printIntroTitle()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    UART_Transmit_String("\r\n");
 8001564:	480e      	ldr	r0, [pc, #56]	; (80015a0 <printIntroTitle+0x40>)
 8001566:	f7ff ffe5 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 800156a:	480e      	ldr	r0, [pc, #56]	; (80015a4 <printIntroTitle+0x44>)
 800156c:	f7ff ffe2 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("*               AEROSENTINEL Flight Computer           *\r\n");
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <printIntroTitle+0x48>)
 8001572:	f7ff ffdf 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("*    A versatile flight control system for your rocket  *\r\n");
 8001576:	480d      	ldr	r0, [pc, #52]	; (80015ac <printIntroTitle+0x4c>)
 8001578:	f7ff ffdc 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <printIntroTitle+0x44>)
 800157e:	f7ff ffd9 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("               Welcome to AEROSENTINEL CLI              \r\n");
 8001582:	480b      	ldr	r0, [pc, #44]	; (80015b0 <printIntroTitle+0x50>)
 8001584:	f7ff ffd6 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <printIntroTitle+0x44>)
 800158a:	f7ff ffd3 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("\r\n");
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <printIntroTitle+0x40>)
 8001590:	f7ff ffd0 	bl	8001534 <UART_Transmit_String>
    mount_sd_card();
 8001594:	f7ff fd5e 	bl	8001054 <mount_sd_card>
    check_free_space();
 8001598:	f7ff fd7e 	bl	8001098 <check_free_space>


    //scanSingleUARTDevice(&huart1); // Checks for UART devices connected


}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	0801796c 	.word	0x0801796c
 80015a4:	08017970 	.word	0x08017970
 80015a8:	080179ac 	.word	0x080179ac
 80015ac:	080179e8 	.word	0x080179e8
 80015b0:	08017a24 	.word	0x08017a24

080015b4 <printOptions>:

void printOptions(){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
    UART_Transmit_String("\r\nChoose an option:\r\n");
 80015b8:	480b      	ldr	r0, [pc, #44]	; (80015e8 <printOptions+0x34>)
 80015ba:	f7ff ffbb 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("0 - Initialize Flight Computer\r\n");
 80015be:	480b      	ldr	r0, [pc, #44]	; (80015ec <printOptions+0x38>)
 80015c0:	f7ff ffb8 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("1 - Read All Sensors\r\n");
 80015c4:	480a      	ldr	r0, [pc, #40]	; (80015f0 <printOptions+0x3c>)
 80015c6:	f7ff ffb5 	bl	8001534 <UART_Transmit_String>
    //UART_Transmit_String("2 - LoRa Test (Sender/Receiver)\r\n");
    UART_Transmit_String("3 - Execute Pyro Test (Ignition)\r\n");
 80015ca:	480a      	ldr	r0, [pc, #40]	; (80015f4 <printOptions+0x40>)
 80015cc:	f7ff ffb2 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("4 - Execute Pyro Test (Parachute)\r\n");
 80015d0:	4809      	ldr	r0, [pc, #36]	; (80015f8 <printOptions+0x44>)
 80015d2:	f7ff ffaf 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("5 - Launch Procedure\r\n");
 80015d6:	4809      	ldr	r0, [pc, #36]	; (80015fc <printOptions+0x48>)
 80015d8:	f7ff ffac 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("\r\n");
 80015dc:	4808      	ldr	r0, [pc, #32]	; (8001600 <printOptions+0x4c>)
 80015de:	f7ff ffa9 	bl	8001534 <UART_Transmit_String>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	08017a60 	.word	0x08017a60
 80015ec:	08017a78 	.word	0x08017a78
 80015f0:	08017a9c 	.word	0x08017a9c
 80015f4:	08017ab4 	.word	0x08017ab4
 80015f8:	08017ad8 	.word	0x08017ad8
 80015fc:	08017afc 	.word	0x08017afc
 8001600:	0801796c 	.word	0x0801796c

08001604 <initialization_procedure>:


int32_t initialization_procedure(){
 8001604:	b580      	push	{r7, lr}
 8001606:	b0d0      	sub	sp, #320	; 0x140
 8001608:	af00      	add	r7, sp, #0


	  int32_t fc_initialization_state;


	  UART_Transmit_String("Starting initialization process.. \r\n");
 800160a:	482a      	ldr	r0, [pc, #168]	; (80016b4 <initialization_procedure+0xb0>)
 800160c:	f7ff ff92 	bl	8001534 <UART_Transmit_String>
	  int32_t imu_init_state = IMU_Initialization();
 8001610:	f000 fb1c 	bl	8001c4c <IMU_Initialization>
 8001614:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	  char imu_buffer[100];

	  HAL_Delay(100);
 8001618:	2064      	movs	r0, #100	; 0x64
 800161a:	f003 fbb3 	bl	8004d84 <HAL_Delay>

	  sprintf(imu_buffer, "IMU Initialization. Code : %ld  \r\n", imu_init_state);
 800161e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001622:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001626:	4924      	ldr	r1, [pc, #144]	; (80016b8 <initialization_procedure+0xb4>)
 8001628:	4618      	mov	r0, r3
 800162a:	f010 fdab 	bl	8012184 <siprintf>
	  UART_Transmit_String(imu_buffer);
 800162e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff7e 	bl	8001534 <UART_Transmit_String>

	  HAL_Delay(100);
 8001638:	2064      	movs	r0, #100	; 0x64
 800163a:	f003 fba3 	bl	8004d84 <HAL_Delay>

	  int32_t pressure_init_state = Pressure_Init();
 800163e:	f000 fd3f 	bl	80020c0 <Pressure_Init>
 8001642:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	  char pressure_buffer[100];
	  sprintf(pressure_buffer, "Pressure Initialization. Code : %ld  \r\n", pressure_init_state);
 8001646:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800164a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800164e:	491b      	ldr	r1, [pc, #108]	; (80016bc <initialization_procedure+0xb8>)
 8001650:	4618      	mov	r0, r3
 8001652:	f010 fd97 	bl	8012184 <siprintf>
	  UART_Transmit_String(pressure_buffer);
 8001656:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff6a 	bl	8001534 <UART_Transmit_String>

	  HAL_Delay(100);
 8001660:	2064      	movs	r0, #100	; 0x64
 8001662:	f003 fb8f 	bl	8004d84 <HAL_Delay>

	  int32_t magnetometer_init_state = QMC_init(&hi2c1, 200);
 8001666:	21c8      	movs	r1, #200	; 0xc8
 8001668:	4815      	ldr	r0, [pc, #84]	; (80016c0 <initialization_procedure+0xbc>)
 800166a:	f7ff fd9b 	bl	80011a4 <QMC_init>
 800166e:	4603      	mov	r3, r0
 8001670:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  char magneto_buffer[100];
	  sprintf(magneto_buffer, "Magnetometer Initialization. Code : %ld  \r\n", magnetometer_init_state);
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800167a:	4912      	ldr	r1, [pc, #72]	; (80016c4 <initialization_procedure+0xc0>)
 800167c:	4618      	mov	r0, r3
 800167e:	f010 fd81 	bl	8012184 <siprintf>
	  UART_Transmit_String(magneto_buffer);
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff55 	bl	8001534 <UART_Transmit_String>

	  HAL_Delay(100);
 800168a:	2064      	movs	r0, #100	; 0x64
 800168c:	f003 fb7a 	bl	8004d84 <HAL_Delay>




	  fc_initialization_state = imu_init_state + pressure_init_state + magnetometer_init_state;
 8001690:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001694:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001698:	4413      	add	r3, r2
 800169a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800169e:	4413      	add	r3, r2
 80016a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	  return fc_initialization_state;
 80016a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	08017b14 	.word	0x08017b14
 80016b8:	08017b3c 	.word	0x08017b3c
 80016bc:	08017b60 	.word	0x08017b60
 80016c0:	200029ac 	.word	0x200029ac
 80016c4:	08017b88 	.word	0x08017b88

080016c8 <sensors_readings>:


void sensors_readings() {
 80016c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016cc:	b0cc      	sub	sp, #304	; 0x130
 80016ce:	af04      	add	r7, sp, #16
    // Call each sensor function and receive the data structures


    IMUData imu_data = IMU_Data_Read();
 80016d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fbbb 	bl	8001e50 <IMU_Data_Read>
    //TemperatureData temperature_data = Transmit_Temperature();
    //PressureTempData pressure_temp_data = Transmit_Pressure_Temp_Data();
    CompassData compass_data = Transmit_Compass_Data();
 80016da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fe76 	bl	80013d0 <Transmit_Compass_Data>

    // Format IMU data into the buffer
    sprintf(buffer,"----------------------"
    		"Roll=%.3f°, \r\n"
    		"Pitch=%.3f° , \r\n"
    		"Yaw=%.3f \r\n",imu_data.roll, imu_data.pitch, compass_data.heading);
 80016e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    sprintf(buffer,"----------------------"
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff2d 	bl	8000548 <__aeabi_f2d>
 80016ee:	4680      	mov	r8, r0
 80016f0:	4689      	mov	r9, r1
    		"Yaw=%.3f \r\n",imu_data.roll, imu_data.pitch, compass_data.heading);
 80016f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
    sprintf(buffer,"----------------------"
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff26 	bl	8000548 <__aeabi_f2d>
 80016fc:	4604      	mov	r4, r0
 80016fe:	460d      	mov	r5, r1
    		"Yaw=%.3f \r\n",imu_data.roll, imu_data.pitch, compass_data.heading);
 8001700:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    sprintf(buffer,"----------------------"
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe ff1f 	bl	8000548 <__aeabi_f2d>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4638      	mov	r0, r7
 8001710:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001714:	e9cd 4500 	strd	r4, r5, [sp]
 8001718:	4642      	mov	r2, r8
 800171a:	464b      	mov	r3, r9
 800171c:	4906      	ldr	r1, [pc, #24]	; (8001738 <sensors_readings+0x70>)
 800171e:	f010 fd31 	bl	8012184 <siprintf>
    UART_Transmit_String(buffer);
 8001722:	463b      	mov	r3, r7
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff05 	bl	8001534 <UART_Transmit_String>

    UART_Transmit_String("------------------------------------------------------ \r\n");
    // Append the separator to the file
    append_data_to_file("sensor_data.txt", "------------------------------------------------------ \r\n");
*/
}
 800172a:	bf00      	nop
 800172c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8001730:	46bd      	mov	sp, r7
 8001732:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001736:	bf00      	nop
 8001738:	08017bb4 	.word	0x08017bb4

0800173c <send_data_to_gcs>:




// Custom function to print data in the required model format
void send_data_to_gcs(int datatype, float value) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b0b6      	sub	sp, #216	; 0xd8
 8001740:	af02      	add	r7, sp, #8
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	ed87 0a00 	vstr	s0, [r7]
	// Print the data for each sensor and append to the file
	char gcs_buffer[200];


    // Print data in the specified format
    sprintf(gcs_buffer, "%d, %.2f;\r\n",
 8001748:	6838      	ldr	r0, [r7, #0]
 800174a:	f7fe fefd 	bl	8000548 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	f107 0008 	add.w	r0, r7, #8
 8001756:	e9cd 2300 	strd	r2, r3, [sp]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4907      	ldr	r1, [pc, #28]	; (800177c <send_data_to_gcs+0x40>)
 800175e:	f010 fd11 	bl	8012184 <siprintf>
            datatype, value);

    UART_Transmit_String(gcs_buffer);
 8001762:	f107 0308 	add.w	r3, r7, #8
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fee4 	bl	8001534 <UART_Transmit_String>

    HAL_Delay(15);
 800176c:	200f      	movs	r0, #15
 800176e:	f003 fb09 	bl	8004d84 <HAL_Delay>


}
 8001772:	bf00      	nop
 8001774:	37d0      	adds	r7, #208	; 0xd0
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	08017bf8 	.word	0x08017bf8

08001780 <sensors_readings_graphs>:

void sensors_readings_graphs() {
 8001780:	b580      	push	{r7, lr}
 8001782:	b098      	sub	sp, #96	; 0x60
 8001784:	af00      	add	r7, sp, #0
    // Call each sensor function and receive the data structures
    IMUData imu_data = IMU_Data_Read();
 8001786:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fb60 	bl	8001e50 <IMU_Data_Read>
    TemperatureData temperature_data = Transmit_Temperature();
 8001790:	f001 f8ce 	bl	8002930 <Transmit_Temperature>
 8001794:	eef0 7a40 	vmov.f32	s15, s0
 8001798:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    PressureTempData pressure_temp_data = Transmit_Pressure_Temp_Data();
 800179c:	f001 f802 	bl	80027a4 <Transmit_Pressure_Temp_Data>
 80017a0:	eeb0 7a40 	vmov.f32	s14, s0
 80017a4:	eef0 7a60 	vmov.f32	s15, s1
 80017a8:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80017ac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    CompassData compass_data = Transmit_Compass_Data();
 80017b0:	463b      	mov	r3, r7
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fe0c 	bl	80013d0 <Transmit_Compass_Data>


    // Print IMU data
    send_data_to_gcs(1, imu_data.acceleration_x);
 80017b8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff ffbb 	bl	800173c <send_data_to_gcs>
    send_data_to_gcs(2, imu_data.acceleration_y);
 80017c6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	2002      	movs	r0, #2
 80017d0:	f7ff ffb4 	bl	800173c <send_data_to_gcs>
    send_data_to_gcs(3, imu_data.acceleration_z);
 80017d4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017d8:	eeb0 0a67 	vmov.f32	s0, s15
 80017dc:	2003      	movs	r0, #3
 80017de:	f7ff ffad 	bl	800173c <send_data_to_gcs>
    send_data_to_gcs(4, imu_data.angular_rate_x);
 80017e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017e6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ea:	2004      	movs	r0, #4
 80017ec:	f7ff ffa6 	bl	800173c <send_data_to_gcs>
    send_data_to_gcs(5, imu_data.angular_rate_y);
 80017f0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	2005      	movs	r0, #5
 80017fa:	f7ff ff9f 	bl	800173c <send_data_to_gcs>
    send_data_to_gcs(6, imu_data.angular_rate_z);
 80017fe:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	2006      	movs	r0, #6
 8001808:	f7ff ff98 	bl	800173c <send_data_to_gcs>

    //Print Roll and Pitch data
    send_data_to_gcs(7, imu_data.roll);
 800180c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	2007      	movs	r0, #7
 8001816:	f7ff ff91 	bl	800173c <send_data_to_gcs>
    send_data_to_gcs(8, imu_data.pitch);
 800181a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800181e:	eeb0 0a67 	vmov.f32	s0, s15
 8001822:	2008      	movs	r0, #8
 8001824:	f7ff ff8a 	bl	800173c <send_data_to_gcs>

    // Print temperature data
    send_data_to_gcs(9, temperature_data.temperature_celsius / 100);
 8001828:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800182c:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001870 <sensors_readings_graphs+0xf0>
 8001830:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001834:	eeb0 0a47 	vmov.f32	s0, s14
 8001838:	2009      	movs	r0, #9
 800183a:	f7ff ff7f 	bl	800173c <send_data_to_gcs>

    // Print pressure and temperature data
    send_data_to_gcs(10, pressure_temp_data.pressure_hpa);
 800183e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001842:	eeb0 0a67 	vmov.f32	s0, s15
 8001846:	200a      	movs	r0, #10
 8001848:	f7ff ff78 	bl	800173c <send_data_to_gcs>
    send_data_to_gcs(11, pressure_temp_data.temperature_celsius);
 800184c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001850:	eeb0 0a67 	vmov.f32	s0, s15
 8001854:	200b      	movs	r0, #11
 8001856:	f7ff ff71 	bl	800173c <send_data_to_gcs>

    // Print compass data
    send_data_to_gcs(12, compass_data.heading);
 800185a:	edd7 7a00 	vldr	s15, [r7]
 800185e:	eeb0 0a67 	vmov.f32	s0, s15
 8001862:	200c      	movs	r0, #12
 8001864:	f7ff ff6a 	bl	800173c <send_data_to_gcs>
}
 8001868:	bf00      	nop
 800186a:	3760      	adds	r7, #96	; 0x60
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	42c80000 	.word	0x42c80000

08001874 <menu>:




void menu(char command)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
	int transmission_delay = 50; // In Milliseconds
 800187e:	2332      	movs	r3, #50	; 0x32
 8001880:	613b      	str	r3, [r7, #16]

	uint32_t numIterations = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
    switch (command)
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	3b30      	subs	r3, #48	; 0x30
 800188a:	2b05      	cmp	r3, #5
 800188c:	d87a      	bhi.n	8001984 <menu+0x110>
 800188e:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <menu+0x20>)
 8001890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001894:	080018ad 	.word	0x080018ad
 8001898:	080018d1 	.word	0x080018d1
 800189c:	0800198d 	.word	0x0800198d
 80018a0:	080018ff 	.word	0x080018ff
 80018a4:	0800193b 	.word	0x0800193b
 80018a8:	08001977 	.word	0x08001977
    {
    case '0':
    	  uint32_t initialization_state = initialization_procedure();
 80018ac:	f7ff feaa 	bl	8001604 <initialization_procedure>
 80018b0:	4603      	mov	r3, r0
 80018b2:	60bb      	str	r3, [r7, #8]
    	  if(initialization_state != 0){
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <menu+0x4e>
    		  UART_Transmit_String("Error initializing the Flight Controller.");
 80018ba:	4838      	ldr	r0, [pc, #224]	; (800199c <menu+0x128>)
 80018bc:	f7ff fe3a 	bl	8001534 <UART_Transmit_String>
 80018c0:	e002      	b.n	80018c8 <menu+0x54>
    	  } else{
    		  UART_Transmit_String("Flight Controller Initialized successfully!\r\n");
 80018c2:	4837      	ldr	r0, [pc, #220]	; (80019a0 <menu+0x12c>)
 80018c4:	f7ff fe36 	bl	8001534 <UART_Transmit_String>

    	  }
    	  UART_Transmit_String("\r\n");
 80018c8:	4836      	ldr	r0, [pc, #216]	; (80019a4 <menu+0x130>)
 80018ca:	f7ff fe33 	bl	8001534 <UART_Transmit_String>
        break;
 80018ce:	e05e      	b.n	800198e <menu+0x11a>
    case '1':
    	UART_Transmit_String("\r\n");
 80018d0:	4834      	ldr	r0, [pc, #208]	; (80019a4 <menu+0x130>)
 80018d2:	f7ff fe2f 	bl	8001534 <UART_Transmit_String>
    	    	numIterations = getNumberOfIterations();
 80018d6:	f000 f873 	bl	80019c0 <getNumberOfIterations>
 80018da:	60f8      	str	r0, [r7, #12]
    			for (uint32_t i = 0; i < numIterations; i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e008      	b.n	80018f4 <menu+0x80>
    			        {
    				sensors_readings();
 80018e2:	f7ff fef1 	bl	80016c8 <sensors_readings>
    				HAL_Delay(transmission_delay);
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 fa4b 	bl	8004d84 <HAL_Delay>
    			for (uint32_t i = 0; i < numIterations; i++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d3f2      	bcc.n	80018e2 <menu+0x6e>
    			        }
        break;
 80018fc:	e047      	b.n	800198e <menu+0x11a>
    case '2':
    	//TODO : IMPLEMENTATION OF LORA TEST
    	break;
    case '3':
    	UART_Transmit_String("\r\n");
 80018fe:	4829      	ldr	r0, [pc, #164]	; (80019a4 <menu+0x130>)
 8001900:	f7ff fe18 	bl	8001534 <UART_Transmit_String>
    	UART_Transmit_String("Starting Firing test (Ignition)\r\n");
 8001904:	4828      	ldr	r0, [pc, #160]	; (80019a8 <menu+0x134>)
 8001906:	f7ff fe15 	bl	8001534 <UART_Transmit_String>
    	UART_Transmit_String("Arming the igniter..");
 800190a:	4828      	ldr	r0, [pc, #160]	; (80019ac <menu+0x138>)
 800190c:	f7ff fe12 	bl	8001534 <UART_Transmit_String>
    	pyro_arm(1);
 8001910:	2001      	movs	r0, #1
 8001912:	f000 ffaf 	bl	8002874 <pyro_arm>
    	UART_Transmit_String("Armed\r\n");
 8001916:	4826      	ldr	r0, [pc, #152]	; (80019b0 <menu+0x13c>)
 8001918:	f7ff fe0c 	bl	8001534 <UART_Transmit_String>
    	count_down_sequence_fire_test(5000);
 800191c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001920:	f000 f8e4 	bl	8001aec <count_down_sequence_fire_test>
    	pyro_fire(1);
 8001924:	2001      	movs	r0, #1
 8001926:	f000 ffc3 	bl	80028b0 <pyro_fire>
    	UART_Transmit_String("Test Completed Successfully!\r\n");
 800192a:	4822      	ldr	r0, [pc, #136]	; (80019b4 <menu+0x140>)
 800192c:	f7ff fe02 	bl	8001534 <UART_Transmit_String>
    	HAL_Delay(1000);
 8001930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001934:	f003 fa26 	bl	8004d84 <HAL_Delay>
        break;
 8001938:	e029      	b.n	800198e <menu+0x11a>
    case '4':
    	UART_Transmit_String("\r\n");
 800193a:	481a      	ldr	r0, [pc, #104]	; (80019a4 <menu+0x130>)
 800193c:	f7ff fdfa 	bl	8001534 <UART_Transmit_String>
    	UART_Transmit_String("Starting Firing test (Parachute)\r\n");
 8001940:	481d      	ldr	r0, [pc, #116]	; (80019b8 <menu+0x144>)
 8001942:	f7ff fdf7 	bl	8001534 <UART_Transmit_String>
    	UART_Transmit_String("Arming the igniter..");
 8001946:	4819      	ldr	r0, [pc, #100]	; (80019ac <menu+0x138>)
 8001948:	f7ff fdf4 	bl	8001534 <UART_Transmit_String>
    	pyro_arm(2);
 800194c:	2002      	movs	r0, #2
 800194e:	f000 ff91 	bl	8002874 <pyro_arm>
    	UART_Transmit_String("Armed\r\n");
 8001952:	4817      	ldr	r0, [pc, #92]	; (80019b0 <menu+0x13c>)
 8001954:	f7ff fdee 	bl	8001534 <UART_Transmit_String>
    	count_down_sequence_fire_test(5000);
 8001958:	f241 3088 	movw	r0, #5000	; 0x1388
 800195c:	f000 f8c6 	bl	8001aec <count_down_sequence_fire_test>
    	pyro_fire(2);
 8001960:	2002      	movs	r0, #2
 8001962:	f000 ffa5 	bl	80028b0 <pyro_fire>
    	UART_Transmit_String("Test Completed Successfully!\r\n");
 8001966:	4813      	ldr	r0, [pc, #76]	; (80019b4 <menu+0x140>)
 8001968:	f7ff fde4 	bl	8001534 <UART_Transmit_String>
    	HAL_Delay(1000);
 800196c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001970:	f003 fa08 	bl	8004d84 <HAL_Delay>
        break;
 8001974:	e00b      	b.n	800198e <menu+0x11a>
    case '5':
    	launch_procedure(10000);
 8001976:	f242 7010 	movw	r0, #10000	; 0x2710
 800197a:	f000 f84f 	bl	8001a1c <launch_procedure>
    	while(1){
    		sensors_readings_graphs();
 800197e:	f7ff feff 	bl	8001780 <sensors_readings_graphs>
 8001982:	e7fc      	b.n	800197e <menu+0x10a>
    	}
        break;
    default:
        UART_Transmit_String("Invalid command! Try again.\r\n");
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <menu+0x148>)
 8001986:	f7ff fdd5 	bl	8001534 <UART_Transmit_String>
        break;
 800198a:	e000      	b.n	800198e <menu+0x11a>
    	break;
 800198c:	bf00      	nop
    }

    printOptions();
 800198e:	f7ff fe11 	bl	80015b4 <printOptions>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	08017c04 	.word	0x08017c04
 80019a0:	08017c30 	.word	0x08017c30
 80019a4:	0801796c 	.word	0x0801796c
 80019a8:	08017c60 	.word	0x08017c60
 80019ac:	08017c84 	.word	0x08017c84
 80019b0:	08017c9c 	.word	0x08017c9c
 80019b4:	08017ca4 	.word	0x08017ca4
 80019b8:	08017cc4 	.word	0x08017cc4
 80019bc:	08017ce8 	.word	0x08017ce8

080019c0 <getNumberOfIterations>:



// Function to get the number of iterations from the user
uint32_t getNumberOfIterations()
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
    char inputBuffer[10];
    char inputChar;
    int bufferIndex = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]

    // Ask for the number of iterations
    UART_Transmit_String("\r\nEnter the number of iterations[Finish the integer with '$']: ");
 80019ca:	4812      	ldr	r0, [pc, #72]	; (8001a14 <getNumberOfIterations+0x54>)
 80019cc:	f7ff fdb2 	bl	8001534 <UART_Transmit_String>

    // Read user input character by character until we encounter '\n'
    do
    {
        HAL_UART_Receive(&huart1, (uint8_t *)&inputChar, sizeof(inputChar), HAL_MAX_DELAY);
 80019d0:	1cf9      	adds	r1, r7, #3
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d6:	2201      	movs	r2, #1
 80019d8:	480f      	ldr	r0, [pc, #60]	; (8001a18 <getNumberOfIterations+0x58>)
 80019da:	f007 fc72 	bl	80092c2 <HAL_UART_Receive>
        inputBuffer[bufferIndex++] = inputChar;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	617a      	str	r2, [r7, #20]
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	3318      	adds	r3, #24
 80019e8:	443b      	add	r3, r7
 80019ea:	f803 2c14 	strb.w	r2, [r3, #-20]
    } while (inputChar != '$');
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	2b24      	cmp	r3, #36	; 0x24
 80019f2:	d1ed      	bne.n	80019d0 <getNumberOfIterations+0x10>

    // Null-terminate the input buffer
    inputBuffer[bufferIndex] = '\0';
 80019f4:	1d3a      	adds	r2, r7, #4
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	4413      	add	r3, r2
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]

    // Convert the input string to an integer using atoi
    int userInput = atoi(inputBuffer);
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00f fd45 	bl	8011490 <atoi>
 8001a06:	6138      	str	r0, [r7, #16]

    return userInput;
 8001a08:	693b      	ldr	r3, [r7, #16]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	08017d08 	.word	0x08017d08
 8001a18:	20002ba4 	.word	0x20002ba4

08001a1c <launch_procedure>:


void launch_procedure(int countdown_duration_ms) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

	UART_Transmit_String("Launch procedure starting.... \r\n");
 8001a24:	482d      	ldr	r0, [pc, #180]	; (8001adc <launch_procedure+0xc0>)
 8001a26:	f7ff fd85 	bl	8001534 <UART_Transmit_String>

    int count_down_print = countdown_duration_ms / 1000;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a2c      	ldr	r2, [pc, #176]	; (8001ae0 <launch_procedure+0xc4>)
 8001a2e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a32:	1192      	asrs	r2, r2, #6
 8001a34:	17db      	asrs	r3, r3, #31
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	61fb      	str	r3, [r7, #28]

    // Calculate the number of SysTick ticks required for the countdown
    uint32_t ticks_start = HAL_GetTick();
 8001a3a:	f003 f997 	bl	8004d6c <HAL_GetTick>
 8001a3e:	61b8      	str	r0, [r7, #24]
    uint32_t ticks_end = ticks_start + countdown_duration_ms;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4413      	add	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]

    char count_down_str[5]; // Buffer to store the countdown value as a string

    // Loop until the countdown duration is over
    while (HAL_GetTick() < ticks_end) {
 8001a48:	e029      	b.n	8001a9e <launch_procedure+0x82>
    	if(count_down_print <= (countdown_duration_ms / 1000)) {
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <launch_procedure+0xc4>)
 8001a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a52:	1192      	asrs	r2, r2, #6
 8001a54:	17db      	asrs	r3, r3, #31
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	dc1c      	bgt.n	8001a98 <launch_procedure+0x7c>
        // Toggle the buzzer (set the GPIO pin high and then low with a delay to produce sound)
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2120      	movs	r1, #32
 8001a62:	4820      	ldr	r0, [pc, #128]	; (8001ae4 <launch_procedure+0xc8>)
 8001a64:	f003 fede 	bl	8005824 <HAL_GPIO_WritePin>

        // Convert the countdown value to a string
        sprintf(count_down_str, "%d...", count_down_print);
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	491e      	ldr	r1, [pc, #120]	; (8001ae8 <launch_procedure+0xcc>)
 8001a70:	4618      	mov	r0, r3
 8001a72:	f010 fb87 	bl	8012184 <siprintf>

        // Transmit the countdown value via UART
        UART_Transmit_String(count_down_str);
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fd5a 	bl	8001534 <UART_Transmit_String>

        HAL_Delay(200); // Delay for 200 milliseconds (adjust the value as needed)
 8001a80:	20c8      	movs	r0, #200	; 0xc8
 8001a82:	f003 f97f 	bl	8004d84 <HAL_Delay>

        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2120      	movs	r1, #32
 8001a8a:	4816      	ldr	r0, [pc, #88]	; (8001ae4 <launch_procedure+0xc8>)
 8001a8c:	f003 feca 	bl	8005824 <HAL_GPIO_WritePin>
        HAL_Delay(800); // Delay for 800 milliseconds (adjust the value as needed)
 8001a90:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a94:	f003 f976 	bl	8004d84 <HAL_Delay>
    	}
        count_down_print--;
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	61fb      	str	r3, [r7, #28]
    while (HAL_GetTick() < ticks_end) {
 8001a9e:	f003 f965 	bl	8004d6c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d8cf      	bhi.n	8001a4a <launch_procedure+0x2e>
    }

    pyro_arm(1);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f000 fee2 	bl	8002874 <pyro_arm>
    // Enable the buzzer at the end of the countdown (Launching the test!!!)
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2120      	movs	r1, #32
 8001ab4:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <launch_procedure+0xc8>)
 8001ab6:	f003 feb5 	bl	8005824 <HAL_GPIO_WritePin>
    pyro_fire(1);
 8001aba:	2001      	movs	r0, #1
 8001abc:	f000 fef8 	bl	80028b0 <pyro_fire>
    HAL_Delay(800);
 8001ac0:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001ac4:	f003 f95e 	bl	8004d84 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2120      	movs	r1, #32
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <launch_procedure+0xc8>)
 8001ace:	f003 fea9 	bl	8005824 <HAL_GPIO_WritePin>

}
 8001ad2:	bf00      	nop
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	08017d48 	.word	0x08017d48
 8001ae0:	10624dd3 	.word	0x10624dd3
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	08017d6c 	.word	0x08017d6c

08001aec <count_down_sequence_fire_test>:


void count_down_sequence_fire_test(int countdown_duration_ms) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

    int count_down_print = countdown_duration_ms / 1000;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a23      	ldr	r2, [pc, #140]	; (8001b84 <count_down_sequence_fire_test+0x98>)
 8001af8:	fb82 1203 	smull	r1, r2, r2, r3
 8001afc:	1192      	asrs	r2, r2, #6
 8001afe:	17db      	asrs	r3, r3, #31
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	61fb      	str	r3, [r7, #28]

    // Calculate the number of SysTick ticks required for the countdown
    uint32_t ticks_start = HAL_GetTick();
 8001b04:	f003 f932 	bl	8004d6c <HAL_GetTick>
 8001b08:	61b8      	str	r0, [r7, #24]
    uint32_t ticks_end = ticks_start + countdown_duration_ms;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4413      	add	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]

    char count_down_str[5]; // Buffer to store the countdown value as a string

    // Loop until the countdown duration is over
    while (HAL_GetTick() < ticks_end) {
 8001b12:	e01f      	b.n	8001b54 <count_down_sequence_fire_test+0x68>
        // Toggle the buzzer (set the GPIO pin high and then low with a delay to produce sound)
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	2120      	movs	r1, #32
 8001b18:	481b      	ldr	r0, [pc, #108]	; (8001b88 <count_down_sequence_fire_test+0x9c>)
 8001b1a:	f003 fe83 	bl	8005824 <HAL_GPIO_WritePin>

        // Convert the countdown value to a string
        sprintf(count_down_str, "%d...", count_down_print);
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	4919      	ldr	r1, [pc, #100]	; (8001b8c <count_down_sequence_fire_test+0xa0>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	f010 fb2c 	bl	8012184 <siprintf>

        // Transmit the countdown value via UART
        UART_Transmit_String(count_down_str);
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fcff 	bl	8001534 <UART_Transmit_String>

        HAL_Delay(200); // Delay for 200 milliseconds (adjust the value as needed)
 8001b36:	20c8      	movs	r0, #200	; 0xc8
 8001b38:	f003 f924 	bl	8004d84 <HAL_Delay>

        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2120      	movs	r1, #32
 8001b40:	4811      	ldr	r0, [pc, #68]	; (8001b88 <count_down_sequence_fire_test+0x9c>)
 8001b42:	f003 fe6f 	bl	8005824 <HAL_GPIO_WritePin>
        HAL_Delay(800); // Delay for 800 milliseconds (adjust the value as needed)
 8001b46:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b4a:	f003 f91b 	bl	8004d84 <HAL_Delay>
        count_down_print--;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
    while (HAL_GetTick() < ticks_end) {
 8001b54:	f003 f90a 	bl	8004d6c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d8d9      	bhi.n	8001b14 <count_down_sequence_fire_test+0x28>
    }

    // Enable the buzzer at the end of the countdown (Launching the test!!!)
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2120      	movs	r1, #32
 8001b64:	4808      	ldr	r0, [pc, #32]	; (8001b88 <count_down_sequence_fire_test+0x9c>)
 8001b66:	f003 fe5d 	bl	8005824 <HAL_GPIO_WritePin>
    HAL_Delay(800);
 8001b6a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b6e:	f003 f909 	bl	8004d84 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2120      	movs	r1, #32
 8001b76:	4804      	ldr	r0, [pc, #16]	; (8001b88 <count_down_sequence_fire_test+0x9c>)
 8001b78:	f003 fe54 	bl	8005824 <HAL_GPIO_WritePin>

}
 8001b7c:	bf00      	nop
 8001b7e:	3720      	adds	r7, #32
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	10624dd3 	.word	0x10624dd3
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	08017d6c 	.word	0x08017d6c

08001b90 <UART_Transmit_Messages_IMU>:
static uint8_t mfxstate[STATE_SIZE];


// TRASMIT MESSAGES VIA UART FUNCTION
void UART_Transmit_Messages_IMU(const char* str)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7fe fb69 	bl	8000270 <strlen>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <UART_Transmit_Messages_IMU+0x28>)
 8001baa:	f007 faf8 	bl	800919e <HAL_UART_Transmit>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20002ba4 	.word	0x20002ba4

08001bbc <platform_read>:

// SENSOR READING FUNCTION DEFINITION
int32_t platform_read(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af04      	add	r7, sp, #16
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	460b      	mov	r3, r1
 8001bca:	72fb      	strb	r3, [r7, #11]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	813b      	strh	r3, [r7, #8]
  // Perform the I2C read operation using HAL_I2C_Mem_Read
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	2364      	movs	r3, #100	; 0x64
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	893b      	ldrh	r3, [r7, #8]
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2301      	movs	r3, #1
 8001be2:	21d6      	movs	r1, #214	; 0xd6
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f004 fbbd 	bl	8006364 <HAL_I2C_Mem_Read>
 8001bea:	4603      	mov	r3, r0
 8001bec:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <platform_read+0x3c>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e001      	b.n	8001bfc <platform_read+0x40>
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <platform_write>:

// SENSOR WRITING FUNCTION DEFINITION
int32_t platform_write(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af04      	add	r7, sp, #16
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	460b      	mov	r3, r1
 8001c12:	72fb      	strb	r3, [r7, #11]
 8001c14:	4613      	mov	r3, r2
 8001c16:	813b      	strh	r3, [r7, #8]
  // Perform the I2C write operation using HAL_I2C_Mem_Write
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8001c18:	7afb      	ldrb	r3, [r7, #11]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	2364      	movs	r3, #100	; 0x64
 8001c1e:	9302      	str	r3, [sp, #8]
 8001c20:	893b      	ldrh	r3, [r7, #8]
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	21d6      	movs	r1, #214	; 0xd6
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f004 fa9f 	bl	8006170 <HAL_I2C_Mem_Write>
 8001c32:	4603      	mov	r3, r0
 8001c34:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <platform_write+0x3c>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e001      	b.n	8001c44 <platform_write+0x40>
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <IMU_Initialization>:


// IMU INITIALIZATION FUNCTION
int32_t IMU_Initialization(){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b0c4      	sub	sp, #272	; 0x110
 8001c50:	af08      	add	r7, sp, #32


	/* Initialize MEMS driver interface */
	device.write_reg = platform_write;
 8001c52:	4b73      	ldr	r3, [pc, #460]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001c54:	4a73      	ldr	r2, [pc, #460]	; (8001e24 <IMU_Initialization+0x1d8>)
 8001c56:	601a      	str	r2, [r3, #0]
	device.read_reg = platform_read;
 8001c58:	4b71      	ldr	r3, [pc, #452]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001c5a:	4a73      	ldr	r2, [pc, #460]	; (8001e28 <IMU_Initialization+0x1dc>)
 8001c5c:	605a      	str	r2, [r3, #4]
	device.handle = &hi2c1;
 8001c5e:	4b70      	ldr	r3, [pc, #448]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001c60:	4a72      	ldr	r2, [pc, #456]	; (8001e2c <IMU_Initialization+0x1e0>)
 8001c62:	60da      	str	r2, [r3, #12]

	char init_state_buffer[200];

	/* Check device ID */
	whoamI = 0;
 8001c64:	4b72      	ldr	r3, [pc, #456]	; (8001e30 <IMU_Initialization+0x1e4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
	lsm6ds3tr_c_device_id_get(&device, &whoamI);
 8001c6a:	4971      	ldr	r1, [pc, #452]	; (8001e30 <IMU_Initialization+0x1e4>)
 8001c6c:	486c      	ldr	r0, [pc, #432]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001c6e:	f001 fd79 	bl	8003764 <lsm6ds3tr_c_device_id_get>

	if ( whoamI != LSM6DS3TR_C_ID ) {
 8001c72:	4b6f      	ldr	r3, [pc, #444]	; (8001e30 <IMU_Initialization+0x1e4>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b6a      	cmp	r3, #106	; 0x6a
 8001c78:	d005      	beq.n	8001c86 <IMU_Initialization+0x3a>
		UART_Transmit_Messages_IMU("ERROR: IMU MALFUNCTION");
 8001c7a:	486e      	ldr	r0, [pc, #440]	; (8001e34 <IMU_Initialization+0x1e8>)
 8001c7c:	f7ff ff88 	bl	8001b90 <UART_Transmit_Messages_IMU>
		return -1;
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c84:	e0c7      	b.n	8001e16 <IMU_Initialization+0x1ca>
	}



	/* Restore default configuration */
	lsm6ds3tr_c_reset_set(&device, PROPERTY_ENABLE);
 8001c86:	2101      	movs	r1, #1
 8001c88:	4865      	ldr	r0, [pc, #404]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001c8a:	f001 fd7c 	bl	8003786 <lsm6ds3tr_c_reset_set>

	do {
    lsm6ds3tr_c_reset_get(&device, &rst);
 8001c8e:	496a      	ldr	r1, [pc, #424]	; (8001e38 <IMU_Initialization+0x1ec>)
 8001c90:	4863      	ldr	r0, [pc, #396]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001c92:	f001 fd9e 	bl	80037d2 <lsm6ds3tr_c_reset_get>
	} while (rst);
 8001c96:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <IMU_Initialization+0x1ec>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f7      	bne.n	8001c8e <IMU_Initialization+0x42>

	int32_t int_set,xl_fs,xl_dr,gy_fs,gy_dr,bdu,xl_fas,xl_lp,gy_bps,state;
	//int32_t dev_round_status,dev_round_mode;

	//Enabling I2C Communication
	int_set = lsm6ds3tr_c_i2c_interface_set(&device,LSM6DS3TR_C_I2C_ENABLE);
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	485f      	ldr	r0, [pc, #380]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001ca2:	f001 fe7a 	bl	800399a <lsm6ds3tr_c_i2c_interface_set>
 8001ca6:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

	  /* Enable Block Data Update */
	  bdu = lsm6ds3tr_c_block_data_update_set(&device, PROPERTY_ENABLE);
 8001caa:	2101      	movs	r1, #1
 8001cac:	485c      	ldr	r0, [pc, #368]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001cae:	f001 fc9d 	bl	80035ec <lsm6ds3tr_c_block_data_update_set>
 8001cb2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	  /* Set Output Data Rate */
	  xl_dr= lsm6ds3tr_c_xl_data_rate_set(&device, LSM6DS3TR_C_XL_ODR_833Hz);
 8001cb6:	2107      	movs	r1, #7
 8001cb8:	4859      	ldr	r0, [pc, #356]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001cba:	f001 fc25 	bl	8003508 <lsm6ds3tr_c_xl_data_rate_set>
 8001cbe:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	  gy_dr= lsm6ds3tr_c_gy_data_rate_set(&device, LSM6DS3TR_C_GY_ODR_833Hz);
 8001cc2:	2107      	movs	r1, #7
 8001cc4:	4856      	ldr	r0, [pc, #344]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001cc6:	f001 fc6b 	bl	80035a0 <lsm6ds3tr_c_gy_data_rate_set>
 8001cca:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
	  /* Set full scale */
	  xl_fs= lsm6ds3tr_c_xl_full_scale_set(&device, LSM6DS3TR_C_2g);
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4853      	ldr	r0, [pc, #332]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001cd2:	f001 fbf3 	bl	80034bc <lsm6ds3tr_c_xl_full_scale_set>
 8001cd6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	  gy_fs= lsm6ds3tr_c_gy_full_scale_set(&device, LSM6DS3TR_C_500dps);
 8001cda:	2102      	movs	r1, #2
 8001cdc:	4850      	ldr	r0, [pc, #320]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001cde:	f001 fc39 	bl	8003554 <lsm6ds3tr_c_gy_full_scale_set>
 8001ce2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8


	  /* Configure filtering chain(No aux interface) */
	  /* Accelerometer - analog filter */
	  xl_fas= lsm6ds3tr_c_xl_filter_analog_set(&device,
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	484d      	ldr	r0, [pc, #308]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001cea:	f001 fd8b 	bl	8003804 <lsm6ds3tr_c_xl_filter_analog_set>
 8001cee:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	                                   LSM6DS3TR_C_XL_ANA_BW_400Hz);
	  /* Accelerometer - LPF1 path ( LPF2 not used )*/
	  //xl_lp = lsm6ds3tr_c_xl_lp1_bandwidth_set(&device, LSM6DS3TR_C_XL_LP1_ODR_DIV_4);
	  /* Accelerometer - LPF1 + LPF2 path */
	  xl_lp= lsm6ds3tr_c_xl_lp2_bandwidth_set(&device,LSM6DS3TR_C_XL_LOW_NOISE_LP_ODR_DIV_100);
 8001cf2:	2111      	movs	r1, #17
 8001cf4:	484a      	ldr	r0, [pc, #296]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001cf6:	f001 fdab 	bl	8003850 <lsm6ds3tr_c_xl_lp2_bandwidth_set>
 8001cfa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	  /* Accelerometer - High Pass / Slope path */
	  //lsm6ds3tr_c_xl_reference_mode_set(&device, PROPERTY_DISABLE);
	  //lsm6ds3tr_c_xl_hp_bandwidth_set(&device, LSM6DS3TR_C_XL_HP_ODR_DIV_100);
	  /* Gyroscope - filtering chain */
	  gy_bps= lsm6ds3tr_c_gy_band_pass_set(&device,
 8001cfe:	21a8      	movs	r1, #168	; 0xa8
 8001d00:	4847      	ldr	r0, [pc, #284]	; (8001e20 <IMU_Initialization+0x1d4>)
 8001d02:	f001 fddc 	bl	80038be <lsm6ds3tr_c_gy_band_pass_set>
 8001d06:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

	  //dev_round_status = lsm6ds3tr_c_rounding_on_status_set(&device,PROPERTY_ENABLE);
	  //dev_round_mode= lsm6ds3tr_c_rounding_mode_set(&device,LSM6DS3TR_C_ROUND_GY_XL);


		state = int_set + xl_fs + xl_dr + gy_fs + gy_dr + bdu + xl_fas + xl_lp + gy_bps;
 8001d0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d12:	441a      	add	r2, r3
 8001d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d18:	441a      	add	r2, r3
 8001d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d1e:	441a      	add	r2, r3
 8001d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d24:	441a      	add	r2, r3
 8001d26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d2a:	441a      	add	r2, r3
 8001d2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d30:	441a      	add	r2, r3
 8001d32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d36:	4413      	add	r3, r2
 8001d38:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

		sprintf(init_state_buffer,"int_set: %ld | xl_fs: %ld | xl_dr: %ld | gy_fs: %ld | gy_dr: %ld | bdu: %ld | xl_fas: %ld | xl_lp: %ld | gy_bps: %ld \r\n",int_set,xl_fs, xl_dr, gy_fs, gy_dr, bdu, xl_fas, xl_lp, gy_bps);
 8001d42:	4638      	mov	r0, r7
 8001d44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d48:	9306      	str	r3, [sp, #24]
 8001d4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d4e:	9305      	str	r3, [sp, #20]
 8001d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d54:	9304      	str	r3, [sp, #16]
 8001d56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d5a:	9303      	str	r3, [sp, #12]
 8001d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d60:	9302      	str	r3, [sp, #8]
 8001d62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d72:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d76:	4931      	ldr	r1, [pc, #196]	; (8001e3c <IMU_Initialization+0x1f0>)
 8001d78:	f010 fa04 	bl	8012184 <siprintf>
		UART_Transmit_Messages_IMU(init_state_buffer);
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff06 	bl	8001b90 <UART_Transmit_Messages_IMU>


		  MotionFX_initialize((MFXState_t *)mfxstate);
 8001d84:	482e      	ldr	r0, [pc, #184]	; (8001e40 <IMU_Initialization+0x1f4>)
 8001d86:	f00f f89f 	bl	8010ec8 <MotionFX_initialize>

		  MotionFX_getKnobs(mfxstate, ipKnobs);
 8001d8a:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <IMU_Initialization+0x1f8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	482b      	ldr	r0, [pc, #172]	; (8001e40 <IMU_Initialization+0x1f4>)
 8001d92:	f00f f99f 	bl	80110d4 <MotionFX_getKnobs>

		  ipKnobs->acc_orientation[0] = 'u';
 8001d96:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <IMU_Initialization+0x1f8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2275      	movs	r2, #117	; 0x75
 8001d9c:	775a      	strb	r2, [r3, #29]
		  ipKnobs->acc_orientation[1] = 'w';
 8001d9e:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <IMU_Initialization+0x1f8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2277      	movs	r2, #119	; 0x77
 8001da4:	779a      	strb	r2, [r3, #30]
		  ipKnobs->acc_orientation[2] = 'n';
 8001da6:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <IMU_Initialization+0x1f8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	226e      	movs	r2, #110	; 0x6e
 8001dac:	77da      	strb	r2, [r3, #31]
		  ipKnobs->gyro_orientation[0] = 'u';
 8001dae:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <IMU_Initialization+0x1f8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2275      	movs	r2, #117	; 0x75
 8001db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		  ipKnobs->gyro_orientation[1] = 'w';
 8001db8:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <IMU_Initialization+0x1f8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2277      	movs	r2, #119	; 0x77
 8001dbe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		  ipKnobs->gyro_orientation[2] = 'n';
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <IMU_Initialization+0x1f8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	226e      	movs	r2, #110	; 0x6e
 8001dc8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <IMU_Initialization+0x1f8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <IMU_Initialization+0x1fc>)
 8001dd2:	615a      	str	r2, [r3, #20]
		  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <IMU_Initialization+0x1f8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <IMU_Initialization+0x200>)
 8001dda:	619a      	str	r2, [r3, #24]

		  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <IMU_Initialization+0x1f8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		  ipKnobs->LMode = 1;
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <IMU_Initialization+0x1f8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	731a      	strb	r2, [r3, #12]
		  ipKnobs->modx = DECIMATION;
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <IMU_Initialization+0x1f8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2201      	movs	r2, #1
 8001df4:	771a      	strb	r2, [r3, #28]

		  MotionFX_setKnobs(mfxstate, ipKnobs);
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <IMU_Initialization+0x1f8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4810      	ldr	r0, [pc, #64]	; (8001e40 <IMU_Initialization+0x1f4>)
 8001dfe:	f00f f91d 	bl	801103c <MotionFX_setKnobs>
		  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 8001e02:	2101      	movs	r1, #1
 8001e04:	480e      	ldr	r0, [pc, #56]	; (8001e40 <IMU_Initialization+0x1f4>)
 8001e06:	f00f f9a3 	bl	8011150 <MotionFX_enable_6X>
		  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <IMU_Initialization+0x1f4>)
 8001e0e:	f00f f9bf 	bl	8011190 <MotionFX_enable_9X>


		return state;
 8001e12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8


}
 8001e16:	4618      	mov	r0, r3
 8001e18:	37f0      	adds	r7, #240	; 0xf0
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20001f20 	.word	0x20001f20
 8001e24:	08001c05 	.word	0x08001c05
 8001e28:	08001bbd 	.word	0x08001bbd
 8001e2c:	200029ac 	.word	0x200029ac
 8001e30:	20001f1e 	.word	0x20001f1e
 8001e34:	08017f90 	.word	0x08017f90
 8001e38:	20001f1f 	.word	0x20001f1f
 8001e3c:	08017fa8 	.word	0x08017fa8
 8001e40:	20001f84 	.word	0x20001f84
 8001e44:	20000000 	.word	0x20000000
 8001e48:	3ac88a48 	.word	0x3ac88a48
 8001e4c:	3b83126f 	.word	0x3b83126f

08001e50 <IMU_Data_Read>:


//IMU DATA READING FUNCTION
IMUData IMU_Data_Read(){
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b0a0      	sub	sp, #128	; 0x80
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	6078      	str	r0, [r7, #4]

	int32_t reading_state, gyro_reading, acc_reading;
    MFX_input_t data_in;
    MFX_output_t data_out;
    float delta_time = TIME_ODR_104Hz;
 8001e58:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <IMU_Data_Read+0x1b4>)
 8001e5a:	60bb      	str	r3, [r7, #8]
	//char test[100];


	//ACCELEROMETER RAW DATA READING
	acc_reading = lsm6ds3tr_c_acceleration_raw_get(&device,data_raw_acceleration);
 8001e5c:	496a      	ldr	r1, [pc, #424]	; (8002008 <IMU_Data_Read+0x1b8>)
 8001e5e:	486b      	ldr	r0, [pc, #428]	; (800200c <IMU_Data_Read+0x1bc>)
 8001e60:	f001 fc35 	bl	80036ce <lsm6ds3tr_c_acceleration_raw_get>
 8001e64:	6778      	str	r0, [r7, #116]	; 0x74
	//GYROSCOPE
	gyro_reading = lsm6ds3tr_c_angular_rate_raw_get(&device,data_raw_angular_rate);
 8001e66:	496a      	ldr	r1, [pc, #424]	; (8002010 <IMU_Data_Read+0x1c0>)
 8001e68:	4868      	ldr	r0, [pc, #416]	; (800200c <IMU_Data_Read+0x1bc>)
 8001e6a:	f001 fbe5 	bl	8003638 <lsm6ds3tr_c_angular_rate_raw_get>
 8001e6e:	6738      	str	r0, [r7, #112]	; 0x70
	// COMPASS
    //CompassData compass_data = Transmit_Compass_Data();


	reading_state = gyro_reading + acc_reading; // If 0 -> Success | Otherwise error code
 8001e70:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e74:	4413      	add	r3, r2
 8001e76:	66fb      	str	r3, [r7, #108]	; 0x6c



	  if (reading_state == 0){
 8001e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f040 8094 	bne.w	8001fa8 <IMU_Data_Read+0x158>

			data_in.acc[0] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[0]) * FROM_MG_TO_G);
 8001e80:	4b61      	ldr	r3, [pc, #388]	; (8002008 <IMU_Data_Read+0x1b8>)
 8001e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f001 fae8 	bl	800345c <lsm6ds3tr_c_from_fs2g_to_mg>
 8001e8c:	eef0 7a40 	vmov.f32	s15, s0
 8001e90:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002014 <IMU_Data_Read+0x1c4>
 8001e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e98:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			data_in.acc[1] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[1]) * FROM_MG_TO_G);
 8001e9c:	4b5a      	ldr	r3, [pc, #360]	; (8002008 <IMU_Data_Read+0x1b8>)
 8001e9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f001 fada 	bl	800345c <lsm6ds3tr_c_from_fs2g_to_mg>
 8001ea8:	eef0 7a40 	vmov.f32	s15, s0
 8001eac:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002014 <IMU_Data_Read+0x1c4>
 8001eb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			data_in.acc[2] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[2]) * FROM_MG_TO_G);
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <IMU_Data_Read+0x1b8>)
 8001eba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 facc 	bl	800345c <lsm6ds3tr_c_from_fs2g_to_mg>
 8001ec4:	eef0 7a40 	vmov.f32	s15, s0
 8001ec8:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002014 <IMU_Data_Read+0x1c4>
 8001ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c


			data_in.gyro[0] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[0]) * FROM_MDPS_TO_DPS) ;
 8001ed4:	4b4e      	ldr	r3, [pc, #312]	; (8002010 <IMU_Data_Read+0x1c0>)
 8001ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f001 fad6 	bl	800348c <lsm6ds3tr_c_from_fs500dps_to_mdps>
 8001ee0:	eef0 7a40 	vmov.f32	s15, s0
 8001ee4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002014 <IMU_Data_Read+0x1c4>
 8001ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eec:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			data_in.gyro[1] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[1]) * FROM_MDPS_TO_DPS) ;
 8001ef0:	4b47      	ldr	r3, [pc, #284]	; (8002010 <IMU_Data_Read+0x1c0>)
 8001ef2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 fac8 	bl	800348c <lsm6ds3tr_c_from_fs500dps_to_mdps>
 8001efc:	eef0 7a40 	vmov.f32	s15, s0
 8001f00:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002014 <IMU_Data_Read+0x1c4>
 8001f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f08:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			data_in.gyro[2] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[2]) * FROM_MDPS_TO_DPS) ;
 8001f0c:	4b40      	ldr	r3, [pc, #256]	; (8002010 <IMU_Data_Read+0x1c0>)
 8001f0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f001 faba 	bl	800348c <lsm6ds3tr_c_from_fs500dps_to_mdps>
 8001f18:	eef0 7a40 	vmov.f32	s15, s0
 8001f1c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002014 <IMU_Data_Read+0x1c4>
 8001f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f24:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


		    /* Don't set mag values because we use only acc and gyro */
		    data_in.mag[0] = 0.0;
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	64bb      	str	r3, [r7, #72]	; 0x48
		    data_in.mag[1] = 0.0;
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
		    data_in.mag[2] = 0.0;
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	653b      	str	r3, [r7, #80]	; 0x50



	      MotionFX_propagate(mfxstate, &data_out, &data_in, &delta_time);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f42:	f107 010c 	add.w	r1, r7, #12
 8001f46:	4834      	ldr	r0, [pc, #208]	; (8002018 <IMU_Data_Read+0x1c8>)
 8001f48:	f00f f952 	bl	80111f0 <MotionFX_propagate>
	      MotionFX_update(mfxstate, &data_out, &data_in, &delta_time, NULL);
 8001f4c:	f107 0308 	add.w	r3, r7, #8
 8001f50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f54:	f107 010c 	add.w	r1, r7, #12
 8001f58:	2000      	movs	r0, #0
 8001f5a:	9000      	str	r0, [sp, #0]
 8001f5c:	482e      	ldr	r0, [pc, #184]	; (8002018 <IMU_Data_Read+0x1c8>)
 8001f5e:	f00f f937 	bl	80111d0 <MotionFX_update>

	        // Update imu_data
	        imu_data.acceleration_x = data_out.gravity[0];
 8001f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f64:	4a2d      	ldr	r2, [pc, #180]	; (800201c <IMU_Data_Read+0x1cc>)
 8001f66:	6013      	str	r3, [r2, #0]
	        imu_data.acceleration_y = data_out.gravity[1];
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	4a2c      	ldr	r2, [pc, #176]	; (800201c <IMU_Data_Read+0x1cc>)
 8001f6c:	6053      	str	r3, [r2, #4]
	        imu_data.acceleration_z = data_out.gravity[2];
 8001f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f70:	4a2a      	ldr	r2, [pc, #168]	; (800201c <IMU_Data_Read+0x1cc>)
 8001f72:	6093      	str	r3, [r2, #8]
	        imu_data.angular_rate_x = data_out.linear_acceleration[0];
 8001f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f76:	4a29      	ldr	r2, [pc, #164]	; (800201c <IMU_Data_Read+0x1cc>)
 8001f78:	60d3      	str	r3, [r2, #12]
	        imu_data.angular_rate_y = data_out.linear_acceleration[1];
 8001f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7c:	4a27      	ldr	r2, [pc, #156]	; (800201c <IMU_Data_Read+0x1cc>)
 8001f7e:	6113      	str	r3, [r2, #16]
	        imu_data.angular_rate_z = data_out.linear_acceleration[2];
 8001f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f82:	4a26      	ldr	r2, [pc, #152]	; (800201c <IMU_Data_Read+0x1cc>)
 8001f84:	6153      	str	r3, [r2, #20]
	        //imu_data.yaw = (float)compass_data.heading;
	        imu_data.pitch = data_out.rotation[1];
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4a24      	ldr	r2, [pc, #144]	; (800201c <IMU_Data_Read+0x1cc>)
 8001f8a:	6213      	str	r3, [r2, #32]
	        imu_data.roll = data_out.rotation[2];
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	4a23      	ldr	r2, [pc, #140]	; (800201c <IMU_Data_Read+0x1cc>)
 8001f90:	61d3      	str	r3, [r2, #28]


	        return imu_data;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a21      	ldr	r2, [pc, #132]	; (800201c <IMU_Data_Read+0x1cc>)
 8001f96:	461c      	mov	r4, r3
 8001f98:	4615      	mov	r5, r2
 8001f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa2:	682b      	ldr	r3, [r5, #0]
 8001fa4:	6023      	str	r3, [r4, #0]
 8001fa6:	e029      	b.n	8001ffc <IMU_Data_Read+0x1ac>
	  }	else	{

		  //Error State
		  imu_data.acceleration_x = 0.0;
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	; (800201c <IMU_Data_Read+0x1cc>)
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
		  imu_data.acceleration_y = 0.0;
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <IMU_Data_Read+0x1cc>)
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	605a      	str	r2, [r3, #4]
		  imu_data.acceleration_z = 0.0;
 8001fb8:	4b18      	ldr	r3, [pc, #96]	; (800201c <IMU_Data_Read+0x1cc>)
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
		  imu_data.angular_rate_x = 0.0;
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <IMU_Data_Read+0x1cc>)
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]
		  imu_data.angular_rate_y = 0.0;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <IMU_Data_Read+0x1cc>)
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
		  imu_data.angular_rate_z = 0.0;
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <IMU_Data_Read+0x1cc>)
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	615a      	str	r2, [r3, #20]
		  imu_data.pitch = 0.0;
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <IMU_Data_Read+0x1cc>)
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
		  imu_data.roll = 0.0;
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <IMU_Data_Read+0x1cc>)
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	61da      	str	r2, [r3, #28]

	        return imu_data;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <IMU_Data_Read+0x1cc>)
 8001fec:	461c      	mov	r4, r3
 8001fee:	4615      	mov	r5, r2
 8001ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff8:	682b      	ldr	r3, [r5, #0]
 8001ffa:	6023      	str	r3, [r4, #0]
		}

}
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	3778      	adds	r7, #120	; 0x78
 8002000:	46bd      	mov	sp, r7
 8002002:	bdb0      	pop	{r4, r5, r7, pc}
 8002004:	3c1d4952 	.word	0x3c1d4952
 8002008:	20001f10 	.word	0x20001f10
 800200c:	20001f20 	.word	0x20001f20
 8002010:	20001f18 	.word	0x20001f18
 8002014:	3a83126f 	.word	0x3a83126f
 8002018:	20001f84 	.word	0x20001f84
 800201c:	20001f30 	.word	0x20001f30

08002020 <dps310_i2c_read>:
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}



int8_t dps310_i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af04      	add	r7, sp, #16
 8002026:	603a      	str	r2, [r7, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
 800202e:	460b      	mov	r3, r1
 8002030:	71bb      	strb	r3, [r7, #6]
 8002032:	4613      	mov	r3, r2
 8002034:	80bb      	strh	r3, [r7, #4]


	  // Perform the I2C read operation using HAL_I2C_Mem_Read
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	b299      	uxth	r1, r3
 800203a:	79bb      	ldrb	r3, [r7, #6]
 800203c:	b29a      	uxth	r2, r3
 800203e:	2364      	movs	r3, #100	; 0x64
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	88bb      	ldrh	r3, [r7, #4]
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2301      	movs	r3, #1
 800204c:	4807      	ldr	r0, [pc, #28]	; (800206c <dps310_i2c_read+0x4c>)
 800204e:	f004 f989 	bl	8006364 <HAL_I2C_Mem_Read>
 8002052:	4603      	mov	r3, r0
 8002054:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <dps310_i2c_read+0x40>
 800205c:	2300      	movs	r3, #0
 800205e:	e001      	b.n	8002064 <dps310_i2c_read+0x44>
 8002060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff


}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200029ac 	.word	0x200029ac

08002070 <dps310_i2c_write>:

int8_t dps310_i2c_write(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af04      	add	r7, sp, #16
 8002076:	603a      	str	r2, [r7, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
 800207e:	460b      	mov	r3, r1
 8002080:	71bb      	strb	r3, [r7, #6]
 8002082:	4613      	mov	r3, r2
 8002084:	80bb      	strh	r3, [r7, #4]

	  // Perform the I2C write operation using HAL_I2C_Mem_Write
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	b299      	uxth	r1, r3
 800208a:	79bb      	ldrb	r3, [r7, #6]
 800208c:	b29a      	uxth	r2, r3
 800208e:	2364      	movs	r3, #100	; 0x64
 8002090:	9302      	str	r3, [sp, #8]
 8002092:	88bb      	ldrh	r3, [r7, #4]
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2301      	movs	r3, #1
 800209c:	4807      	ldr	r0, [pc, #28]	; (80020bc <dps310_i2c_write+0x4c>)
 800209e:	f004 f867 	bl	8006170 <HAL_I2C_Mem_Write>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <dps310_i2c_write+0x40>
 80020ac:	2300      	movs	r3, #0
 80020ae:	e001      	b.n	80020b4 <dps310_i2c_write+0x44>
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	200029ac 	.word	0x200029ac

080020c0 <Pressure_Init>:



int32_t Pressure_Init(){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0

    int16_t ret;

    ret = product_id_check();
 80020c6:	f000 fb21 	bl	800270c <product_id_check>
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 80020ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <Pressure_Init+0x1c>
 80020d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020da:	e011      	b.n	8002100 <Pressure_Init+0x40>

    dps310_configure_temperature(
 80020dc:	2000      	movs	r0, #0
 80020de:	f000 f8b1 	bl	8002244 <dps310_configure_temperature>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_TMP_CFG_TMP_PRC_SINGLE);

    dps310_configure_pressure(
 80020e2:	2001      	movs	r0, #1
 80020e4:	f000 f8da 	bl	800229c <dps310_configure_pressure>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_PRS_CFG_PM_PRC_2_TIMES);

    ret = read_coefs();
 80020e8:	f000 f80e 	bl	8002108 <read_coefs>
 80020ec:	4603      	mov	r3, r0
 80020ee:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 80020f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <Pressure_Init+0x3e>
 80020f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020fc:	e000      	b.n	8002100 <Pressure_Init+0x40>

    return 0;
 80020fe:	2300      	movs	r3, #0

}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <read_coefs>:

int16_t dps310_reset() {
    return write_byte_to_reg(DPS310_RESET_REG, DPS310_RESET_SOFT_RST_VALUE);
}

int16_t read_coefs() {
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[18];

    ret = wait_for_reg_value(
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	2008      	movs	r0, #8
 8002114:	f000 fa3e 	bl	8002594 <wait_for_reg_value>
 8002118:	4603      	mov	r3, r0
 800211a:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE);

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_COEF_REG, buff, 18);
 800211c:	1d3a      	adds	r2, r7, #4
 800211e:	2312      	movs	r3, #18
 8002120:	2110      	movs	r1, #16
 8002122:	20ee      	movs	r0, #238	; 0xee
 8002124:	f7ff ff7c 	bl	8002020 <dps310_i2c_read>
 8002128:	4603      	mov	r3, r0
 800212a:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 800212c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <read_coefs+0x32>
 8002134:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002138:	e07d      	b.n	8002236 <read_coefs+0x12e>

    g_coefs.c0 = get_two_complement_of(
            ((uint16_t) buff[0] << 4u) | (((uint16_t) buff[1] >> 4u) & 0x0Fu),
 800213a:	793b      	ldrb	r3, [r7, #4]
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	461a      	mov	r2, r3
 8002140:	797b      	ldrb	r3, [r7, #5]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	b2db      	uxtb	r3, r3
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	4313      	orrs	r3, r2
    g_coefs.c0 = get_two_complement_of(
 800214c:	210c      	movs	r1, #12
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fab8 	bl	80026c4 <get_two_complement_of>
 8002154:	4603      	mov	r3, r0
 8002156:	b21a      	sxth	r2, r3
 8002158:	4b39      	ldr	r3, [pc, #228]	; (8002240 <read_coefs+0x138>)
 800215a:	801a      	strh	r2, [r3, #0]
            12);

    g_coefs.c1 = get_two_complement_of(
            ((((uint16_t) buff[1] & 0x0Fu) << 8u) | (uint16_t) buff[2]),
 800215c:	797b      	ldrb	r3, [r7, #5]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002164:	79ba      	ldrb	r2, [r7, #6]
 8002166:	4313      	orrs	r3, r2
    g_coefs.c1 = get_two_complement_of(
 8002168:	210c      	movs	r1, #12
 800216a:	4618      	mov	r0, r3
 800216c:	f000 faaa 	bl	80026c4 <get_two_complement_of>
 8002170:	4603      	mov	r3, r0
 8002172:	b21a      	sxth	r2, r3
 8002174:	4b32      	ldr	r3, [pc, #200]	; (8002240 <read_coefs+0x138>)
 8002176:	805a      	strh	r2, [r3, #2]
            12);

    g_coefs.c00 = get_two_complement_of(
            ((uint32_t) buff[3] << 12u) | ((uint32_t) buff[4] << 4u) | (((uint32_t) buff[5] >> 4u) & 0x0Fu),
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	031a      	lsls	r2, r3, #12
 800217c:	7a3b      	ldrb	r3, [r7, #8]
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	431a      	orrs	r2, r3
 8002182:	7a7b      	ldrb	r3, [r7, #9]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	b2db      	uxtb	r3, r3
 8002188:	f003 030f 	and.w	r3, r3, #15
    g_coefs.c00 = get_two_complement_of(
 800218c:	4313      	orrs	r3, r2
 800218e:	2114      	movs	r1, #20
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fa97 	bl	80026c4 <get_two_complement_of>
 8002196:	4603      	mov	r3, r0
 8002198:	4a29      	ldr	r2, [pc, #164]	; (8002240 <read_coefs+0x138>)
 800219a:	6053      	str	r3, [r2, #4]
            20);

    g_coefs.c10 = get_two_complement_of(
            (((uint32_t) buff[5] & 0x0Fu) << 16u) | ((uint32_t) buff[6] << 8u) | (uint32_t) buff[7],
 800219c:	7a7b      	ldrb	r3, [r7, #9]
 800219e:	041b      	lsls	r3, r3, #16
 80021a0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80021a4:	7abb      	ldrb	r3, [r7, #10]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	4313      	orrs	r3, r2
 80021aa:	7afa      	ldrb	r2, [r7, #11]
    g_coefs.c10 = get_two_complement_of(
 80021ac:	4313      	orrs	r3, r2
 80021ae:	2114      	movs	r1, #20
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fa87 	bl	80026c4 <get_two_complement_of>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4a21      	ldr	r2, [pc, #132]	; (8002240 <read_coefs+0x138>)
 80021ba:	6093      	str	r3, [r2, #8]
            20);

    g_coefs.c01 = get_two_complement_of(
            ((uint16_t) buff[8] << 8u) | (uint16_t) buff[9],
 80021bc:	7b3b      	ldrb	r3, [r7, #12]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	7b7a      	ldrb	r2, [r7, #13]
 80021c2:	4313      	orrs	r3, r2
    g_coefs.c01 = get_two_complement_of(
 80021c4:	2110      	movs	r1, #16
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fa7c 	bl	80026c4 <get_two_complement_of>
 80021cc:	4603      	mov	r3, r0
 80021ce:	b21a      	sxth	r2, r3
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <read_coefs+0x138>)
 80021d2:	819a      	strh	r2, [r3, #12]
            16);

    g_coefs.c11 = get_two_complement_of(
            ((uint16_t) buff[10] << 8u) | (uint16_t) buff[11],
 80021d4:	7bbb      	ldrb	r3, [r7, #14]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	4313      	orrs	r3, r2
    g_coefs.c11 = get_two_complement_of(
 80021dc:	2110      	movs	r1, #16
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fa70 	bl	80026c4 <get_two_complement_of>
 80021e4:	4603      	mov	r3, r0
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <read_coefs+0x138>)
 80021ea:	81da      	strh	r2, [r3, #14]
            16);

    g_coefs.c20 = get_two_complement_of(
            ((uint16_t) buff[12] << 8u) | (uint16_t) buff[13],
 80021ec:	7c3b      	ldrb	r3, [r7, #16]
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	7c7a      	ldrb	r2, [r7, #17]
 80021f2:	4313      	orrs	r3, r2
    g_coefs.c20 = get_two_complement_of(
 80021f4:	2110      	movs	r1, #16
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fa64 	bl	80026c4 <get_two_complement_of>
 80021fc:	4603      	mov	r3, r0
 80021fe:	b21a      	sxth	r2, r3
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <read_coefs+0x138>)
 8002202:	821a      	strh	r2, [r3, #16]
            16);

    g_coefs.c21 = get_two_complement_of(
            ((uint16_t) buff[14] << 8u) | (uint16_t) buff[15],
 8002204:	7cbb      	ldrb	r3, [r7, #18]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	7cfa      	ldrb	r2, [r7, #19]
 800220a:	4313      	orrs	r3, r2
    g_coefs.c21 = get_two_complement_of(
 800220c:	2110      	movs	r1, #16
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fa58 	bl	80026c4 <get_two_complement_of>
 8002214:	4603      	mov	r3, r0
 8002216:	b21a      	sxth	r2, r3
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <read_coefs+0x138>)
 800221a:	825a      	strh	r2, [r3, #18]
            16);

    g_coefs.c30 = get_two_complement_of(
            ((uint16_t) buff[16] << 8u) | (uint16_t) buff[17],
 800221c:	7d3b      	ldrb	r3, [r7, #20]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	7d7a      	ldrb	r2, [r7, #21]
 8002222:	4313      	orrs	r3, r2
    g_coefs.c30 = get_two_complement_of(
 8002224:	2110      	movs	r1, #16
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fa4c 	bl	80026c4 <get_two_complement_of>
 800222c:	4603      	mov	r3, r0
 800222e:	b21a      	sxth	r2, r3
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <read_coefs+0x138>)
 8002232:	829a      	strh	r2, [r3, #20]
            16);

    return DPS310_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20002904 	.word	0x20002904

08002244 <dps310_configure_temperature>:

int16_t dps310_configure_temperature(uint8_t data) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
    int16_t ret;
    uint8_t temperature_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	737b      	strb	r3, [r7, #13]

    ret = get_temperature_sensor(&temperature_sensor);
 8002252:	f107 030d 	add.w	r3, r7, #13
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fa7e 	bl	8002758 <get_temperature_sensor>
 800225c:	4603      	mov	r3, r0
 800225e:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 8002260:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <dps310_configure_temperature+0x2a>
 8002268:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800226c:	e00f      	b.n	800228e <dps310_configure_temperature+0x4a>

    g_temperature_rate = DPS310_TMP_CFG_TMP_RATE_MASK & data;
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <dps310_configure_temperature+0x54>)
 8002278:	701a      	strb	r2, [r3, #0]
    data |= temperature_sensor;
 800227a:	7b7a      	ldrb	r2, [r7, #13]
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	4313      	orrs	r3, r2
 8002280:	71fb      	strb	r3, [r7, #7]

    return write_byte_to_reg(DPS310_TMP_CFG_REG, data);
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	4619      	mov	r1, r3
 8002286:	2007      	movs	r0, #7
 8002288:	f000 f820 	bl	80022cc <write_byte_to_reg>
 800228c:	4603      	mov	r3, r0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2000291d 	.word	0x2000291d

0800229c <dps310_configure_pressure>:

int16_t dps310_configure_pressure(uint8_t data) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
    g_pressure_rate = DPS310_PRS_CFG_PM_RATE_MASK & data;
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <dps310_configure_pressure+0x2c>)
 80022b0:	701a      	strb	r2, [r3, #0]
    return write_byte_to_reg(DPS310_PRS_CFG_REG, data);
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	4619      	mov	r1, r3
 80022b6:	2006      	movs	r0, #6
 80022b8:	f000 f808 	bl	80022cc <write_byte_to_reg>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000291c 	.word	0x2000291c

080022cc <write_byte_to_reg>:

int16_t write_byte_to_reg(uint8_t reg_addr, uint8_t data) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	460a      	mov	r2, r1
 80022d6:	71fb      	strb	r3, [r7, #7]
 80022d8:	4613      	mov	r3, r2
 80022da:	71bb      	strb	r3, [r7, #6]
    int16_t ret;
    uint8_t buff[1];

    buff[0] = data;
 80022dc:	79bb      	ldrb	r3, [r7, #6]
 80022de:	733b      	strb	r3, [r7, #12]
    ret = dps310_i2c_write(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 80022e0:	f107 020c 	add.w	r2, r7, #12
 80022e4:	79f9      	ldrb	r1, [r7, #7]
 80022e6:	2301      	movs	r3, #1
 80022e8:	20ee      	movs	r0, #238	; 0xee
 80022ea:	f7ff fec1 	bl	8002070 <dps310_i2c_write>
 80022ee:	4603      	mov	r3, r0
 80022f0:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 80022f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <write_byte_to_reg+0x34>
 80022fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022fe:	e000      	b.n	8002302 <write_byte_to_reg+0x36>

    return DPS310_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <read_temperature>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t read_temperature(float *p_temperature) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_TMP);
 8002314:	2102      	movs	r1, #2
 8002316:	2008      	movs	r0, #8
 8002318:	f7ff ffd8 	bl	80022cc <write_byte_to_reg>
 800231c:	4603      	mov	r3, r0
 800231e:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8002320:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <read_temperature+0x22>
 8002328:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800232c:	e066      	b.n	80023fc <read_temperature+0xf0>

    ret = wait_for_reg_value(
 800232e:	2267      	movs	r2, #103	; 0x67
 8002330:	2160      	movs	r1, #96	; 0x60
 8002332:	2008      	movs	r0, #8
 8002334:	f000 f92e 	bl	8002594 <wait_for_reg_value>
 8002338:	4603      	mov	r3, r0
 800233a:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 800233c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <read_temperature+0x3e>
 8002344:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002348:	e058      	b.n	80023fc <read_temperature+0xf0>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_B2_REG, buff, 3);
 800234a:	f107 020c 	add.w	r2, r7, #12
 800234e:	2303      	movs	r3, #3
 8002350:	2103      	movs	r1, #3
 8002352:	20ee      	movs	r0, #238	; 0xee
 8002354:	f7ff fe64 	bl	8002020 <dps310_i2c_read>
 8002358:	4603      	mov	r3, r0
 800235a:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 800235c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <read_temperature+0x5e>
 8002364:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002368:	e048      	b.n	80023fc <read_temperature+0xf0>

    int32_t temp_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 800236a:	7b3b      	ldrb	r3, [r7, #12]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	7b7b      	ldrb	r3, [r7, #13]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	4313      	orrs	r3, r2
 8002374:	7bba      	ldrb	r2, [r7, #14]
    int32_t temp_raw = get_two_complement_of(
 8002376:	4313      	orrs	r3, r2
 8002378:	2118      	movs	r1, #24
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f9a2 	bl	80026c4 <get_two_complement_of>
 8002380:	6138      	str	r0, [r7, #16]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_temperature_rate, &factor);
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <read_temperature+0xf8>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	f107 0208 	add.w	r2, r7, #8
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f940 	bl	8002612 <get_scale_factor_for>
 8002392:	4603      	mov	r3, r0
 8002394:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8002396:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <read_temperature+0x98>
 800239e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023a2:	e02b      	b.n	80023fc <read_temperature+0xf0>

    g_last_temp_raw_sc = (float) temp_raw / factor;
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <read_temperature+0xfc>)
 80023be:	edc3 7a00 	vstr	s15, [r3]
    *p_temperature = (float) g_coefs.c0 * 0.5f + (float) g_coefs.c1 * g_last_temp_raw_sc;
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <read_temperature+0x100>)
 80023c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <read_temperature+0x100>)
 80023da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <read_temperature+0xfc>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2000291d 	.word	0x2000291d
 8002408:	20002920 	.word	0x20002920
 800240c:	20002904 	.word	0x20002904

08002410 <read_pressure>:

int16_t read_pressure(float *p_pressure) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_PRS);
 8002418:	2101      	movs	r1, #1
 800241a:	2008      	movs	r0, #8
 800241c:	f7ff ff56 	bl	80022cc <write_byte_to_reg>
 8002420:	4603      	mov	r3, r0
 8002422:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 8002424:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <read_pressure+0x22>
 800242c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002430:	e0a4      	b.n	800257c <read_pressure+0x16c>

    ret = wait_for_reg_value(
 8002432:	2257      	movs	r2, #87	; 0x57
 8002434:	2150      	movs	r1, #80	; 0x50
 8002436:	2008      	movs	r0, #8
 8002438:	f000 f8ac 	bl	8002594 <wait_for_reg_value>
 800243c:	4603      	mov	r3, r0
 800243e:	83fb      	strh	r3, [r7, #30]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 8002440:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <read_pressure+0x3e>
 8002448:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800244c:	e096      	b.n	800257c <read_pressure+0x16c>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PSR_B2_REG, buff, 3);
 800244e:	f107 0210 	add.w	r2, r7, #16
 8002452:	2303      	movs	r3, #3
 8002454:	2100      	movs	r1, #0
 8002456:	20ee      	movs	r0, #238	; 0xee
 8002458:	f7ff fde2 	bl	8002020 <dps310_i2c_read>
 800245c:	4603      	mov	r3, r0
 800245e:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 8002460:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <read_pressure+0x5e>
 8002468:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800246c:	e086      	b.n	800257c <read_pressure+0x16c>

    int32_t pressure_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 800246e:	7c3b      	ldrb	r3, [r7, #16]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	7c7b      	ldrb	r3, [r7, #17]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	4313      	orrs	r3, r2
 8002478:	7cba      	ldrb	r2, [r7, #18]
    int32_t pressure_raw = get_two_complement_of(
 800247a:	4313      	orrs	r3, r2
 800247c:	2118      	movs	r1, #24
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f920 	bl	80026c4 <get_two_complement_of>
 8002484:	61b8      	str	r0, [r7, #24]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_pressure_rate, &factor);
 8002486:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <read_pressure+0x174>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	f107 020c 	add.w	r2, r7, #12
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f8be 	bl	8002612 <get_scale_factor_for>
 8002496:	4603      	mov	r3, r0
 8002498:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 800249a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <read_pressure+0x98>
 80024a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80024a6:	e069      	b.n	800257c <read_pressure+0x16c>

    float pressure_raw_sc = (float) pressure_raw / factor;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c0:	edc7 7a05 	vstr	s15, [r7, #20]

    // *0.01f -> Convert compensated pressure measurement from Pa to hPa
    *p_pressure = (g_coefs.c00 +
 80024c4:	4b30      	ldr	r3, [pc, #192]	; (8002588 <read_pressure+0x178>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 80024d0:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <read_pressure+0x178>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024dc:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <read_pressure+0x178>)
 80024de:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80024ea:	4b27      	ldr	r3, [pc, #156]	; (8002588 <read_pressure+0x178>)
 80024ec:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80024f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80024fc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002500:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002504:	edd7 7a05 	vldr	s15, [r7, #20]
 8002508:	ee66 7a27 	vmul.f32	s15, s12, s15
 800250c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002510:	edd7 7a05 	vldr	s15, [r7, #20]
 8002514:	ee66 7aa7 	vmul.f32	s15, s13, s15
    *p_pressure = (g_coefs.c00 +
 8002518:	ee37 7a27 	vadd.f32	s14, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <read_pressure+0x178>)
 800251e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800252a:	4b17      	ldr	r3, [pc, #92]	; (8002588 <read_pressure+0x178>)
 800252c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <read_pressure+0x178>)
 800253a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002546:	edd7 7a05 	vldr	s15, [r7, #20]
 800254a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800254e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002552:	edd7 7a05 	vldr	s15, [r7, #20]
 8002556:	ee66 7a27 	vmul.f32	s15, s12, s15
 800255a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800255e:	4b0b      	ldr	r3, [pc, #44]	; (800258c <read_pressure+0x17c>)
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	ee66 7aa7 	vmul.f32	s15, s13, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 8002568:	ee77 7a27 	vadd.f32	s15, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 800256c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002590 <read_pressure+0x180>
 8002570:	ee67 7a87 	vmul.f32	s15, s15, s14
    *p_pressure = (g_coefs.c00 +
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3720      	adds	r7, #32
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000291c 	.word	0x2000291c
 8002588:	20002904 	.word	0x20002904
 800258c:	20002920 	.word	0x20002920
 8002590:	3c23d70a 	.word	0x3c23d70a

08002594 <wait_for_reg_value>:

int16_t wait_for_reg_value(uint8_t reg_addr, uint8_t reg_value, uint8_t mask) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
 800259e:	460b      	mov	r3, r1
 80025a0:	71bb      	strb	r3, [r7, #6]
 80025a2:	4613      	mov	r3, r2
 80025a4:	717b      	strb	r3, [r7, #5]
    int16_t ret;
    uint8_t buff[1];
    uint16_t attempts = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	81fb      	strh	r3, [r7, #14]

    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 80025aa:	e024      	b.n	80025f6 <wait_for_reg_value+0x62>
        attempts++;
 80025ac:	89fb      	ldrh	r3, [r7, #14]
 80025ae:	3301      	adds	r3, #1
 80025b0:	81fb      	strh	r3, [r7, #14]

        ret = dps310_i2c_read(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 80025b2:	f107 0208 	add.w	r2, r7, #8
 80025b6:	79f9      	ldrb	r1, [r7, #7]
 80025b8:	2301      	movs	r3, #1
 80025ba:	20ee      	movs	r0, #238	; 0xee
 80025bc:	f7ff fd30 	bl	8002020 <dps310_i2c_read>
 80025c0:	4603      	mov	r3, r0
 80025c2:	81bb      	strh	r3, [r7, #12]
        if (ret != DPS310_OK) return ret;
 80025c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <wait_for_reg_value+0x3e>
 80025cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025d0:	e01b      	b.n	800260a <wait_for_reg_value+0x76>

        bool b_is_expected_value = ((buff[0] & mask) == reg_value);
 80025d2:	7a3a      	ldrb	r2, [r7, #8]
 80025d4:	797b      	ldrb	r3, [r7, #5]
 80025d6:	4013      	ands	r3, r2
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	79ba      	ldrb	r2, [r7, #6]
 80025dc:	429a      	cmp	r2, r3
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	72fb      	strb	r3, [r7, #11]
        if (b_is_expected_value) return DPS310_OK;
 80025e6:	7afb      	ldrb	r3, [r7, #11]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <wait_for_reg_value+0x5c>
 80025ec:	2300      	movs	r3, #0
 80025ee:	e00c      	b.n	800260a <wait_for_reg_value+0x76>

        HAL_Delay(10);
 80025f0:	200a      	movs	r0, #10
 80025f2:	f002 fbc7 	bl	8004d84 <HAL_Delay>
    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d9d7      	bls.n	80025ac <wait_for_reg_value+0x18>
    }

    if (attempts == DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 80025fc:	89fb      	ldrh	r3, [r7, #14]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d102      	bne.n	8002608 <wait_for_reg_value+0x74>
        return DPS310_WAIT_TIMEOUT_ERROR;
 8002602:	f06f 0303 	mvn.w	r3, #3
 8002606:	e000      	b.n	800260a <wait_for_reg_value+0x76>
    }

    return DPS310_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <get_scale_factor_for>:

int16_t get_scale_factor_for(uint8_t rate, uint32_t *p_factor) {
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	6039      	str	r1, [r7, #0]
 800261c:	71fb      	strb	r3, [r7, #7]
    uint32_t ret = DPS310_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]

    switch (rate) {
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	2b70      	cmp	r3, #112	; 0x70
 8002626:	d03d      	beq.n	80026a4 <get_scale_factor_for+0x92>
 8002628:	2b70      	cmp	r3, #112	; 0x70
 800262a:	dc40      	bgt.n	80026ae <get_scale_factor_for+0x9c>
 800262c:	2b60      	cmp	r3, #96	; 0x60
 800262e:	d034      	beq.n	800269a <get_scale_factor_for+0x88>
 8002630:	2b60      	cmp	r3, #96	; 0x60
 8002632:	dc3c      	bgt.n	80026ae <get_scale_factor_for+0x9c>
 8002634:	2b50      	cmp	r3, #80	; 0x50
 8002636:	d02b      	beq.n	8002690 <get_scale_factor_for+0x7e>
 8002638:	2b50      	cmp	r3, #80	; 0x50
 800263a:	dc38      	bgt.n	80026ae <get_scale_factor_for+0x9c>
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d022      	beq.n	8002686 <get_scale_factor_for+0x74>
 8002640:	2b40      	cmp	r3, #64	; 0x40
 8002642:	dc34      	bgt.n	80026ae <get_scale_factor_for+0x9c>
 8002644:	2b30      	cmp	r3, #48	; 0x30
 8002646:	d019      	beq.n	800267c <get_scale_factor_for+0x6a>
 8002648:	2b30      	cmp	r3, #48	; 0x30
 800264a:	dc30      	bgt.n	80026ae <get_scale_factor_for+0x9c>
 800264c:	2b20      	cmp	r3, #32
 800264e:	d010      	beq.n	8002672 <get_scale_factor_for+0x60>
 8002650:	2b20      	cmp	r3, #32
 8002652:	dc2c      	bgt.n	80026ae <get_scale_factor_for+0x9c>
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <get_scale_factor_for+0x4c>
 8002658:	2b10      	cmp	r3, #16
 800265a:	d005      	beq.n	8002668 <get_scale_factor_for+0x56>
 800265c:	e027      	b.n	80026ae <get_scale_factor_for+0x9c>
        case DPS310_CFG_RATE_1_MEAS:
            *p_factor = 524288;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002664:	601a      	str	r2, [r3, #0]
            break;
 8002666:	e025      	b.n	80026b4 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_2_MEAS:
            *p_factor = 1572864;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800266e:	601a      	str	r2, [r3, #0]
            break;
 8002670:	e020      	b.n	80026b4 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_4_MEAS:
            *p_factor = 3670016;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8002678:	601a      	str	r2, [r3, #0]
            break;
 800267a:	e01b      	b.n	80026b4 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_8_MEAS:
            *p_factor = 7864320;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002682:	601a      	str	r2, [r3, #0]
            break;
 8002684:	e016      	b.n	80026b4 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_16_MEAS:
            *p_factor = 253952;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 800268c:	601a      	str	r2, [r3, #0]
            break;
 800268e:	e011      	b.n	80026b4 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_32_MEAS:
            *p_factor = 516096;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 8002696:	601a      	str	r2, [r3, #0]
            break;
 8002698:	e00c      	b.n	80026b4 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_64_MEAS:
            *p_factor = 1040384;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 80026a0:	601a      	str	r2, [r3, #0]
            break;
 80026a2:	e007      	b.n	80026b4 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_128_MEAS:
            *p_factor = 2088960;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 80026aa:	601a      	str	r2, [r3, #0]
            break;
 80026ac:	e002      	b.n	80026b4 <get_scale_factor_for+0xa2>
        default:
            ret = DPS310_UNKNOWN_RATE_ERROR;
 80026ae:	f06f 0304 	mvn.w	r3, #4
 80026b2:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	b21b      	sxth	r3, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <get_two_complement_of>:

int32_t get_two_complement_of(uint32_t value, uint8_t length) {
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	70fb      	strb	r3, [r7, #3]
    int32_t ret = value;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	60fb      	str	r3, [r7, #12]
    bool b_is_negative = value & (1u << (length - 1u));
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	2201      	movs	r2, #1
 80026da:	409a      	lsls	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf14      	ite	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	2300      	moveq	r3, #0
 80026e8:	72fb      	strb	r3, [r7, #11]

    if (b_is_negative) {
 80026ea:	7afb      	ldrb	r3, [r7, #11]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <get_two_complement_of+0x3a>
        ret -= ((uint32_t) 1 << length);
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	2101      	movs	r1, #1
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <product_id_check>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t product_id_check() {
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PRODUCT_ID_REG, buff, 1);
 8002712:	1d3a      	adds	r2, r7, #4
 8002714:	2301      	movs	r3, #1
 8002716:	210d      	movs	r1, #13
 8002718:	20ee      	movs	r0, #238	; 0xee
 800271a:	f7ff fc81 	bl	8002020 <dps310_i2c_read>
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 8002722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <product_id_check+0x24>
 800272a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272e:	e00f      	b.n	8002750 <product_id_check+0x44>

    bool b_is_product_id_valid = buff[0] == DPS310_PRODUCT_ID_VALUE;
 8002730:	793b      	ldrb	r3, [r7, #4]
 8002732:	2b10      	cmp	r3, #16
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	717b      	strb	r3, [r7, #5]
    if (!b_is_product_id_valid) return DPS310_PRODUCT_ID_ERROR;
 800273c:	797b      	ldrb	r3, [r7, #5]
 800273e:	f083 0301 	eor.w	r3, r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <product_id_check+0x42>
 8002748:	f06f 0301 	mvn.w	r3, #1
 800274c:	e000      	b.n	8002750 <product_id_check+0x44>

    return DPS310_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <get_temperature_sensor>:

int16_t get_temperature_sensor(uint8_t *p_sensor) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    uint16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_COEF_SRCE, buff, 1);
 8002760:	f107 020c 	add.w	r2, r7, #12
 8002764:	2301      	movs	r3, #1
 8002766:	2128      	movs	r1, #40	; 0x28
 8002768:	20ee      	movs	r0, #238	; 0xee
 800276a:	f7ff fc59 	bl	8002020 <dps310_i2c_read>
 800276e:	4603      	mov	r3, r0
 8002770:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 8002772:	89fb      	ldrh	r3, [r7, #14]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <get_temperature_sensor+0x26>
 8002778:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800277c:	e00e      	b.n	800279c <get_temperature_sensor+0x44>

    uint8_t value = buff[0] & DPS310_TMP_COEF_SRCE_MASK;
 800277e:	7b3b      	ldrb	r3, [r7, #12]
 8002780:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002784:	737b      	strb	r3, [r7, #13]

    if (value) {
 8002786:	7b7b      	ldrb	r3, [r7, #13]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <get_temperature_sensor+0x3c>
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2280      	movs	r2, #128	; 0x80
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	e002      	b.n	800279a <get_temperature_sensor+0x42>
    } else {
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_INTERNAL;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
    }

    return DPS310_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <Transmit_Pressure_Temp_Data>:


PressureTempData Transmit_Pressure_Temp_Data(){
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0


	  pressure_read_state = read_pressure(&pressure_value);
 80027aa:	4822      	ldr	r0, [pc, #136]	; (8002834 <Transmit_Pressure_Temp_Data+0x90>)
 80027ac:	f7ff fe30 	bl	8002410 <read_pressure>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b20      	ldr	r3, [pc, #128]	; (8002838 <Transmit_Pressure_Temp_Data+0x94>)
 80027b6:	801a      	strh	r2, [r3, #0]
	  temperature_p_state = read_temperature(&temperature_p_value);
 80027b8:	4820      	ldr	r0, [pc, #128]	; (800283c <Transmit_Pressure_Temp_Data+0x98>)
 80027ba:	f7ff fda7 	bl	800230c <read_temperature>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <Transmit_Pressure_Temp_Data+0x9c>)
 80027c4:	801a      	strh	r2, [r3, #0]

	  if(pressure_read_state == 0 && temperature_p_state == 0){
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <Transmit_Pressure_Temp_Data+0x94>)
 80027c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d114      	bne.n	80027fa <Transmit_Pressure_Temp_Data+0x56>
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <Transmit_Pressure_Temp_Data+0x9c>)
 80027d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10f      	bne.n	80027fa <Transmit_Pressure_Temp_Data+0x56>
		    pressure_temp_data.pressure_hpa = pressure_value;
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <Transmit_Pressure_Temp_Data+0x90>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a19      	ldr	r2, [pc, #100]	; (8002844 <Transmit_Pressure_Temp_Data+0xa0>)
 80027e0:	6013      	str	r3, [r2, #0]
		    pressure_temp_data.temperature_celsius = temperature_p_value;
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <Transmit_Pressure_Temp_Data+0x98>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a17      	ldr	r2, [pc, #92]	; (8002844 <Transmit_Pressure_Temp_Data+0xa0>)
 80027e8:	6053      	str	r3, [r2, #4]

		    return pressure_temp_data;
 80027ea:	4a16      	ldr	r2, [pc, #88]	; (8002844 <Transmit_Pressure_Temp_Data+0xa0>)
 80027ec:	f107 0308 	add.w	r3, r7, #8
 80027f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80027f8:	e00e      	b.n	8002818 <Transmit_Pressure_Temp_Data+0x74>
	  } else {
		    pressure_temp_data.pressure_hpa = 0;
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <Transmit_Pressure_Temp_Data+0xa0>)
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
		    pressure_temp_data.temperature_celsius = 0;
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <Transmit_Pressure_Temp_Data+0xa0>)
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	605a      	str	r2, [r3, #4]

		    return pressure_temp_data;
 800280a:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <Transmit_Pressure_Temp_Data+0xa0>)
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002814:	e883 0003 	stmia.w	r3, {r0, r1}
	  }


}
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	ee07 2a10 	vmov	s14, r2
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eeb0 0a47 	vmov.f32	s0, s14
 8002828:	eef0 0a67 	vmov.f32	s1, s15
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20002924 	.word	0x20002924
 8002838:	2000292c 	.word	0x2000292c
 800283c:	20002928 	.word	0x20002928
 8002840:	2000292e 	.word	0x2000292e
 8002844:	20002930 	.word	0x20002930

08002848 <UART_Transmit_Pyro>:
 */

#include "pyro.h"

void UART_Transmit_Pyro(const char* str)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7fd fd0d 	bl	8000270 <strlen>
 8002856:	4603      	mov	r3, r0
 8002858:	b29a      	uxth	r2, r3
 800285a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4803      	ldr	r0, [pc, #12]	; (8002870 <UART_Transmit_Pyro+0x28>)
 8002862:	f006 fc9c 	bl	800919e <HAL_UART_Transmit>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20002ba4 	.word	0x20002ba4

08002874 <pyro_arm>:

// Function to arm the pyro charge
void pyro_arm(int pyroSlot) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
    if (pyroSlot == 1) {
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d105      	bne.n	800288e <pyro_arm+0x1a>
        // Arm Pyro 1 (set the GPIO pin low)
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_RESET);
 8002882:	2200      	movs	r2, #0
 8002884:	2140      	movs	r1, #64	; 0x40
 8002886:	4808      	ldr	r0, [pc, #32]	; (80028a8 <pyro_arm+0x34>)
 8002888:	f002 ffcc 	bl	8005824 <HAL_GPIO_WritePin>
    } else if (pyroSlot == 2) {
        // Arm Pyro 2 (set the GPIO pin low)
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
    }
}
 800288c:	e007      	b.n	800289e <pyro_arm+0x2a>
    } else if (pyroSlot == 2) {
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d104      	bne.n	800289e <pyro_arm+0x2a>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
 8002894:	2200      	movs	r2, #0
 8002896:	2101      	movs	r1, #1
 8002898:	4804      	ldr	r0, [pc, #16]	; (80028ac <pyro_arm+0x38>)
 800289a:	f002 ffc3 	bl	8005824 <HAL_GPIO_WritePin>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40020400 	.word	0x40020400
 80028ac:	40020000 	.word	0x40020000

080028b0 <pyro_fire>:

// Function to fire the pyro charge
void pyro_fire(int pyroSlot) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
    if (pyroSlot == 1) {
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d114      	bne.n	80028e8 <pyro_fire+0x38>
        // Fire Pyro 1 (set the GPIO pin high)
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_SET);
 80028be:	2201      	movs	r2, #1
 80028c0:	2140      	movs	r1, #64	; 0x40
 80028c2:	4817      	ldr	r0, [pc, #92]	; (8002920 <pyro_fire+0x70>)
 80028c4:	f002 ffae 	bl	8005824 <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Ignition..");
 80028c8:	4816      	ldr	r0, [pc, #88]	; (8002924 <pyro_fire+0x74>)
 80028ca:	f7ff ffbd 	bl	8002848 <UART_Transmit_Pyro>
        HAL_Delay(PYRO_IGNITION_TIME);
 80028ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028d2:	f002 fa57 	bl	8004d84 <HAL_Delay>
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_RESET);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2140      	movs	r1, #64	; 0x40
 80028da:	4811      	ldr	r0, [pc, #68]	; (8002920 <pyro_fire+0x70>)
 80028dc:	f002 ffa2 	bl	8005824 <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Finished.\r\n");
 80028e0:	4811      	ldr	r0, [pc, #68]	; (8002928 <pyro_fire+0x78>)
 80028e2:	f7ff ffb1 	bl	8002848 <UART_Transmit_Pyro>
        UART_Transmit_Pyro("Ignition..");
        HAL_Delay(PYRO_IGNITION_TIME);
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
        UART_Transmit_Pyro("Finished.\r\n");
    }
}
 80028e6:	e016      	b.n	8002916 <pyro_fire+0x66>
    } else if (pyroSlot == 2) {
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d113      	bne.n	8002916 <pyro_fire+0x66>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_SET);
 80028ee:	2201      	movs	r2, #1
 80028f0:	2101      	movs	r1, #1
 80028f2:	480e      	ldr	r0, [pc, #56]	; (800292c <pyro_fire+0x7c>)
 80028f4:	f002 ff96 	bl	8005824 <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Ignition..");
 80028f8:	480a      	ldr	r0, [pc, #40]	; (8002924 <pyro_fire+0x74>)
 80028fa:	f7ff ffa5 	bl	8002848 <UART_Transmit_Pyro>
        HAL_Delay(PYRO_IGNITION_TIME);
 80028fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002902:	f002 fa3f 	bl	8004d84 <HAL_Delay>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
 8002906:	2200      	movs	r2, #0
 8002908:	2101      	movs	r1, #1
 800290a:	4808      	ldr	r0, [pc, #32]	; (800292c <pyro_fire+0x7c>)
 800290c:	f002 ff8a 	bl	8005824 <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Finished.\r\n");
 8002910:	4805      	ldr	r0, [pc, #20]	; (8002928 <pyro_fire+0x78>)
 8002912:	f7ff ff99 	bl	8002848 <UART_Transmit_Pyro>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40020400 	.word	0x40020400
 8002924:	08018020 	.word	0x08018020
 8002928:	0801802c 	.word	0x0801802c
 800292c:	40020000 	.word	0x40020000

08002930 <Transmit_Temperature>:
{
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}


TemperatureData Transmit_Temperature(){
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af02      	add	r7, sp, #8


	buffer[0] = TEMP_READ_ADDRESS;
 8002936:	4b40      	ldr	r3, [pc, #256]	; (8002a38 <Transmit_Temperature+0x108>)
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
	//UART_Transmit_String("Reading temperature..\r\n");
	ret = HAL_I2C_Master_Transmit(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,1,HAL_MAX_DELAY);
 800293c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	2301      	movs	r3, #1
 8002944:	4a3c      	ldr	r2, [pc, #240]	; (8002a38 <Transmit_Temperature+0x108>)
 8002946:	2190      	movs	r1, #144	; 0x90
 8002948:	483c      	ldr	r0, [pc, #240]	; (8002a3c <Transmit_Temperature+0x10c>)
 800294a:	f003 f8ed 	bl	8005b28 <HAL_I2C_Master_Transmit>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <Transmit_Temperature+0x110>)
 8002954:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK){
 8002956:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <Transmit_Temperature+0x110>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <Transmit_Temperature+0x3c>
		UART_Transmit_String("Error communicating with Temperature sensor");
 800295e:	4839      	ldr	r0, [pc, #228]	; (8002a44 <Transmit_Temperature+0x114>)
 8002960:	f7fe fde8 	bl	8001534 <UART_Transmit_String>
		UART_Transmit_String("\r\n");
 8002964:	4838      	ldr	r0, [pc, #224]	; (8002a48 <Transmit_Temperature+0x118>)
 8002966:	f7fe fde5 	bl	8001534 <UART_Transmit_String>
 800296a:	e059      	b.n	8002a20 <Transmit_Temperature+0xf0>
	} else{
		ret = HAL_I2C_Master_Receive(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,2,HAL_MAX_DELAY);
 800296c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2302      	movs	r3, #2
 8002974:	4a30      	ldr	r2, [pc, #192]	; (8002a38 <Transmit_Temperature+0x108>)
 8002976:	2190      	movs	r1, #144	; 0x90
 8002978:	4830      	ldr	r0, [pc, #192]	; (8002a3c <Transmit_Temperature+0x10c>)
 800297a:	f003 f9d3 	bl	8005d24 <HAL_I2C_Master_Receive>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <Transmit_Temperature+0x110>)
 8002984:	701a      	strb	r2, [r3, #0]
		if (ret != HAL_OK){
 8002986:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <Transmit_Temperature+0x110>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <Transmit_Temperature+0x6c>
			UART_Transmit_String("Error receiving data from Temperature sensor");
 800298e:	482f      	ldr	r0, [pc, #188]	; (8002a4c <Transmit_Temperature+0x11c>)
 8002990:	f7fe fdd0 	bl	8001534 <UART_Transmit_String>
			UART_Transmit_String("\r\n");
 8002994:	482c      	ldr	r0, [pc, #176]	; (8002a48 <Transmit_Temperature+0x118>)
 8002996:	f7fe fdcd 	bl	8001534 <UART_Transmit_String>
 800299a:	e041      	b.n	8002a20 <Transmit_Temperature+0xf0>
		} else {
			//Combine the bytes
			val = ((int16_t)buffer[0] << 4) | (buffer[1] >> 4);
 800299c:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <Transmit_Temperature+0x108>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	b21a      	sxth	r2, r3
 80029a4:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <Transmit_Temperature+0x108>)
 80029a6:	785b      	ldrb	r3, [r3, #1]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	b21b      	sxth	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	b21a      	sxth	r2, r3
 80029b2:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <Transmit_Temperature+0x120>)
 80029b4:	801a      	strh	r2, [r3, #0]

			//Convert to 2's complement (temperature can be negative)
			if(val > 0x7FF){
 80029b6:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <Transmit_Temperature+0x120>)
 80029b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c0:	db09      	blt.n	80029d6 <Transmit_Temperature+0xa6>
				val |= 0xF000;
 80029c2:	4b23      	ldr	r3, [pc, #140]	; (8002a50 <Transmit_Temperature+0x120>)
 80029c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80029cc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80029d0:	b21a      	sxth	r2, r3
 80029d2:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <Transmit_Temperature+0x120>)
 80029d4:	801a      	strh	r2, [r3, #0]
			}

			//Convert to float temperature value (Celsius)
			temp_c = val * 0.0625; // 0.0625 can be retreived into the datasheet
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <Transmit_Temperature+0x120>)
 80029d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fda1 	bl	8000524 <__aeabi_i2d>
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <Transmit_Temperature+0x124>)
 80029e8:	f7fd fe06 	bl	80005f8 <__aeabi_dmul>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	f7fe f8f8 	bl	8000be8 <__aeabi_d2f>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <Transmit_Temperature+0x128>)
 80029fc:	6013      	str	r3, [r2, #0]

			//Convert to temperature to decimal format
			temp_c *= 100;
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <Transmit_Temperature+0x128>)
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002a5c <Transmit_Temperature+0x12c>
 8002a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <Transmit_Temperature+0x128>)
 8002a0e:	edc3 7a00 	vstr	s15, [r3]

			temperature_data.temperature_celsius = temp_c;
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <Transmit_Temperature+0x128>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <Transmit_Temperature+0x130>)
 8002a18:	6013      	str	r3, [r2, #0]

			return temperature_data;
 8002a1a:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <Transmit_Temperature+0x130>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	e004      	b.n	8002a2a <Transmit_Temperature+0xfa>

		}
	}

	//Error State
	temperature_data.temperature_celsius = -100.00;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <Transmit_Temperature+0x130>)
 8002a22:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <Transmit_Temperature+0x134>)
 8002a24:	601a      	str	r2, [r3, #0]
	return temperature_data;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <Transmit_Temperature+0x130>)
 8002a28:	681b      	ldr	r3, [r3, #0]

}
 8002a2a:	ee07 3a90 	vmov	s15, r3
 8002a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	2000293c 	.word	0x2000293c
 8002a3c:	200029ac 	.word	0x200029ac
 8002a40:	20002938 	.word	0x20002938
 8002a44:	08018038 	.word	0x08018038
 8002a48:	08018064 	.word	0x08018064
 8002a4c:	08018068 	.word	0x08018068
 8002a50:	20002948 	.word	0x20002948
 8002a54:	3fb00000 	.word	0x3fb00000
 8002a58:	2000294c 	.word	0x2000294c
 8002a5c:	42c80000 	.word	0x42c80000
 8002a60:	20002950 	.word	0x20002950
 8002a64:	c2c80000 	.word	0xc2c80000

08002a68 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2110      	movs	r1, #16
 8002a70:	4803      	ldr	r0, [pc, #12]	; (8002a80 <SELECT+0x18>)
 8002a72:	f002 fed7 	bl	8005824 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f002 f984 	bl	8004d84 <HAL_Delay>
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40020000 	.word	0x40020000

08002a84 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002a88:	2201      	movs	r2, #1
 8002a8a:	2110      	movs	r1, #16
 8002a8c:	4803      	ldr	r0, [pc, #12]	; (8002a9c <DESELECT+0x18>)
 8002a8e:	f002 fec9 	bl	8005824 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002a92:	2001      	movs	r0, #1
 8002a94:	f002 f976 	bl	8004d84 <HAL_Delay>
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40020000 	.word	0x40020000

08002aa0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002aaa:	bf00      	nop
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <SPI_TxByte+0x30>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d1f8      	bne.n	8002aac <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002aba:	1df9      	adds	r1, r7, #7
 8002abc:	2364      	movs	r3, #100	; 0x64
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <SPI_TxByte+0x30>)
 8002ac2:	f005 f9de 	bl	8007e82 <HAL_SPI_Transmit>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20002a74 	.word	0x20002a74

08002ad4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002ae0:	bf00      	nop
 8002ae2:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <SPI_TxBuffer+0x30>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d1f8      	bne.n	8002ae2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002af0:	887a      	ldrh	r2, [r7, #2]
 8002af2:	2364      	movs	r3, #100	; 0x64
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4803      	ldr	r0, [pc, #12]	; (8002b04 <SPI_TxBuffer+0x30>)
 8002af8:	f005 f9c3 	bl	8007e82 <HAL_SPI_Transmit>
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20002a74 	.word	0x20002a74

08002b08 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8002b0e:	23ff      	movs	r3, #255	; 0xff
 8002b10:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002b12:	bf00      	nop
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <SPI_RxByte+0x34>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d1f8      	bne.n	8002b14 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002b22:	1dba      	adds	r2, r7, #6
 8002b24:	1df9      	adds	r1, r7, #7
 8002b26:	2364      	movs	r3, #100	; 0x64
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	4803      	ldr	r0, [pc, #12]	; (8002b3c <SPI_RxByte+0x34>)
 8002b2e:	f005 fae4 	bl	80080fa <HAL_SPI_TransmitReceive>

	return data;
 8002b32:	79bb      	ldrb	r3, [r7, #6]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20002a74 	.word	0x20002a74

08002b40 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002b48:	f7ff ffde 	bl	8002b08 <SPI_RxByte>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	701a      	strb	r2, [r3, #0]
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <SD_ReadyWait+0x30>)
 8002b64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b68:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8002b6a:	f7ff ffcd 	bl	8002b08 <SPI_RxByte>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	2bff      	cmp	r3, #255	; 0xff
 8002b76:	d003      	beq.n	8002b80 <SD_ReadyWait+0x24>
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <SD_ReadyWait+0x30>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f4      	bne.n	8002b6a <SD_ReadyWait+0xe>

	return res;
 8002b80:	79fb      	ldrb	r3, [r7, #7]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20002956 	.word	0x20002956

08002b90 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8002b96:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002b9a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002b9c:	f7ff ff72 	bl	8002a84 <DESELECT>
	for(int i = 0; i < 10; i++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	e005      	b.n	8002bb2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8002ba6:	20ff      	movs	r0, #255	; 0xff
 8002ba8:	f7ff ff7a 	bl	8002aa0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	ddf6      	ble.n	8002ba6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8002bb8:	f7ff ff56 	bl	8002a68 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002bbc:	2340      	movs	r3, #64	; 0x40
 8002bbe:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8002bd0:	2395      	movs	r3, #149	; 0x95
 8002bd2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	2106      	movs	r1, #6
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff7b 	bl	8002ad4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8002bde:	e002      	b.n	8002be6 <SD_PowerOn+0x56>
	{
		cnt--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8002be6:	f7ff ff8f 	bl	8002b08 <SPI_RxByte>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d002      	beq.n	8002bf6 <SD_PowerOn+0x66>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f4      	bne.n	8002be0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8002bf6:	f7ff ff45 	bl	8002a84 <DESELECT>
	SPI_TxByte(0XFF);
 8002bfa:	20ff      	movs	r0, #255	; 0xff
 8002bfc:	f7ff ff50 	bl	8002aa0 <SPI_TxByte>

	PowerFlag = 1;
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <SD_PowerOn+0x80>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
}
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20002959 	.word	0x20002959

08002c14 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <SD_PowerOff+0x14>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	20002959 	.word	0x20002959

08002c2c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <SD_CheckPower+0x14>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20002959 	.word	0x20002959

08002c44 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <SD_RxDataBlock+0x58>)
 8002c50:	22c8      	movs	r2, #200	; 0xc8
 8002c52:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002c54:	f7ff ff58 	bl	8002b08 <SPI_RxByte>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2bff      	cmp	r3, #255	; 0xff
 8002c60:	d103      	bne.n	8002c6a <SD_RxDataBlock+0x26>
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <SD_RxDataBlock+0x58>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f4      	bne.n	8002c54 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2bfe      	cmp	r3, #254	; 0xfe
 8002c6e:	d001      	beq.n	8002c74 <SD_RxDataBlock+0x30>
 8002c70:	2300      	movs	r3, #0
 8002c72:	e00f      	b.n	8002c94 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff ff60 	bl	8002b40 <SPI_RxBytePtr>
	} while(len--);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	1e5a      	subs	r2, r3, #1
 8002c84:	603a      	str	r2, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f4      	bne.n	8002c74 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8002c8a:	f7ff ff3d 	bl	8002b08 <SPI_RxByte>
	SPI_RxByte();
 8002c8e:	f7ff ff3b 	bl	8002b08 <SPI_RxByte>

	return TRUE;
 8002c92:	2301      	movs	r3, #1
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20002954 	.word	0x20002954

08002ca0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002cb0:	f7ff ff54 	bl	8002b5c <SD_ReadyWait>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2bff      	cmp	r3, #255	; 0xff
 8002cb8:	d001      	beq.n	8002cbe <SD_TxDataBlock+0x1e>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e02f      	b.n	8002d1e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff feed 	bl	8002aa0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	2bfd      	cmp	r3, #253	; 0xfd
 8002cca:	d020      	beq.n	8002d0e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8002ccc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff feff 	bl	8002ad4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8002cd6:	f7ff ff17 	bl	8002b08 <SPI_RxByte>
		SPI_RxByte();
 8002cda:	f7ff ff15 	bl	8002b08 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8002cde:	e00b      	b.n	8002cf8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8002ce0:	f7ff ff12 	bl	8002b08 <SPI_RxByte>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	2b05      	cmp	r3, #5
 8002cf0:	d006      	beq.n	8002d00 <SD_TxDataBlock+0x60>
			i++;
 8002cf2:	7bbb      	ldrb	r3, [r7, #14]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8002cf8:	7bbb      	ldrb	r3, [r7, #14]
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d9f0      	bls.n	8002ce0 <SD_TxDataBlock+0x40>
 8002cfe:	e000      	b.n	8002d02 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8002d00:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8002d02:	bf00      	nop
 8002d04:	f7ff ff00 	bl	8002b08 <SPI_RxByte>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0fa      	beq.n	8002d04 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	2b05      	cmp	r3, #5
 8002d16:	d101      	bne.n	8002d1c <SD_TxDataBlock+0x7c>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <SD_TxDataBlock+0x7e>

	return FALSE;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	6039      	str	r1, [r7, #0]
 8002d30:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002d32:	f7ff ff13 	bl	8002b5c <SD_ReadyWait>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2bff      	cmp	r3, #255	; 0xff
 8002d3a:	d001      	beq.n	8002d40 <SD_SendCmd+0x1a>
 8002d3c:	23ff      	movs	r3, #255	; 0xff
 8002d3e:	e042      	b.n	8002dc6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff feac 	bl	8002aa0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	0e1b      	lsrs	r3, r3, #24
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fea6 	bl	8002aa0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	0c1b      	lsrs	r3, r3, #16
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fea0 	bl	8002aa0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fe9a 	bl	8002aa0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fe95 	bl	8002aa0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d102      	bne.n	8002d82 <SD_SendCmd+0x5c>
 8002d7c:	2395      	movs	r3, #149	; 0x95
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e007      	b.n	8002d92 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	2b48      	cmp	r3, #72	; 0x48
 8002d86:	d102      	bne.n	8002d8e <SD_SendCmd+0x68>
 8002d88:	2387      	movs	r3, #135	; 0x87
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	e001      	b.n	8002d92 <SD_SendCmd+0x6c>
	else crc = 1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fe83 	bl	8002aa0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	2b4c      	cmp	r3, #76	; 0x4c
 8002d9e:	d101      	bne.n	8002da4 <SD_SendCmd+0x7e>
 8002da0:	f7ff feb2 	bl	8002b08 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002da4:	230a      	movs	r3, #10
 8002da6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002da8:	f7ff feae 	bl	8002b08 <SPI_RxByte>
 8002dac:	4603      	mov	r3, r0
 8002dae:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002db0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da05      	bge.n	8002dc4 <SD_SendCmd+0x9e>
 8002db8:	7bbb      	ldrb	r3, [r7, #14]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	73bb      	strb	r3, [r7, #14]
 8002dbe:	7bbb      	ldrb	r3, [r7, #14]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f1      	bne.n	8002da8 <SD_SendCmd+0x82>

	return res;
 8002dc4:	7b7b      	ldrb	r3, [r7, #13]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <SD_disk_initialize+0x14>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0d1      	b.n	8002f88 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8002de4:	4b6a      	ldr	r3, [pc, #424]	; (8002f90 <SD_disk_initialize+0x1c0>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <SD_disk_initialize+0x2a>
 8002df2:	4b67      	ldr	r3, [pc, #412]	; (8002f90 <SD_disk_initialize+0x1c0>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	e0c6      	b.n	8002f88 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8002dfa:	f7ff fec9 	bl	8002b90 <SD_PowerOn>

	/* slave select */
	SELECT();
 8002dfe:	f7ff fe33 	bl	8002a68 <SELECT>

	/* check disk type */
	type = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8002e06:	2100      	movs	r1, #0
 8002e08:	2040      	movs	r0, #64	; 0x40
 8002e0a:	f7ff ff8c 	bl	8002d26 <SD_SendCmd>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	f040 80a1 	bne.w	8002f58 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8002e16:	4b5f      	ldr	r3, [pc, #380]	; (8002f94 <SD_disk_initialize+0x1c4>)
 8002e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e1c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002e1e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002e22:	2048      	movs	r0, #72	; 0x48
 8002e24:	f7ff ff7f 	bl	8002d26 <SD_SendCmd>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d155      	bne.n	8002eda <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e00c      	b.n	8002e4e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002e34:	7bfc      	ldrb	r4, [r7, #15]
 8002e36:	f7ff fe67 	bl	8002b08 <SPI_RxByte>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f104 0310 	add.w	r3, r4, #16
 8002e42:	443b      	add	r3, r7
 8002e44:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d9ef      	bls.n	8002e34 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002e54:	7abb      	ldrb	r3, [r7, #10]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d17e      	bne.n	8002f58 <SD_disk_initialize+0x188>
 8002e5a:	7afb      	ldrb	r3, [r7, #11]
 8002e5c:	2baa      	cmp	r3, #170	; 0xaa
 8002e5e:	d17b      	bne.n	8002f58 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002e60:	2100      	movs	r1, #0
 8002e62:	2077      	movs	r0, #119	; 0x77
 8002e64:	f7ff ff5f 	bl	8002d26 <SD_SendCmd>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d807      	bhi.n	8002e7e <SD_disk_initialize+0xae>
 8002e6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e72:	2069      	movs	r0, #105	; 0x69
 8002e74:	f7ff ff57 	bl	8002d26 <SD_SendCmd>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8002e7e:	4b45      	ldr	r3, [pc, #276]	; (8002f94 <SD_disk_initialize+0x1c4>)
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1ec      	bne.n	8002e60 <SD_disk_initialize+0x90>
 8002e86:	e000      	b.n	8002e8a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002e88:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002e8a:	4b42      	ldr	r3, [pc, #264]	; (8002f94 <SD_disk_initialize+0x1c4>)
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d062      	beq.n	8002f58 <SD_disk_initialize+0x188>
 8002e92:	2100      	movs	r1, #0
 8002e94:	207a      	movs	r0, #122	; 0x7a
 8002e96:	f7ff ff46 	bl	8002d26 <SD_SendCmd>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d15b      	bne.n	8002f58 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	e00c      	b.n	8002ec0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8002ea6:	7bfc      	ldrb	r4, [r7, #15]
 8002ea8:	f7ff fe2e 	bl	8002b08 <SPI_RxByte>
 8002eac:	4603      	mov	r3, r0
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f104 0310 	add.w	r3, r4, #16
 8002eb4:	443b      	add	r3, r7
 8002eb6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d9ef      	bls.n	8002ea6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002ec6:	7a3b      	ldrb	r3, [r7, #8]
 8002ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <SD_disk_initialize+0x104>
 8002ed0:	230c      	movs	r3, #12
 8002ed2:	e000      	b.n	8002ed6 <SD_disk_initialize+0x106>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	73bb      	strb	r3, [r7, #14]
 8002ed8:	e03e      	b.n	8002f58 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002eda:	2100      	movs	r1, #0
 8002edc:	2077      	movs	r0, #119	; 0x77
 8002ede:	f7ff ff22 	bl	8002d26 <SD_SendCmd>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d808      	bhi.n	8002efa <SD_disk_initialize+0x12a>
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2069      	movs	r0, #105	; 0x69
 8002eec:	f7ff ff1b 	bl	8002d26 <SD_SendCmd>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d801      	bhi.n	8002efa <SD_disk_initialize+0x12a>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e000      	b.n	8002efc <SD_disk_initialize+0x12c>
 8002efa:	2301      	movs	r3, #1
 8002efc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8002efe:	7bbb      	ldrb	r3, [r7, #14]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d10e      	bne.n	8002f22 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8002f04:	2100      	movs	r1, #0
 8002f06:	2077      	movs	r0, #119	; 0x77
 8002f08:	f7ff ff0d 	bl	8002d26 <SD_SendCmd>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d80e      	bhi.n	8002f30 <SD_disk_initialize+0x160>
 8002f12:	2100      	movs	r1, #0
 8002f14:	2069      	movs	r0, #105	; 0x69
 8002f16:	f7ff ff06 	bl	8002d26 <SD_SendCmd>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d107      	bne.n	8002f30 <SD_disk_initialize+0x160>
 8002f20:	e00c      	b.n	8002f3c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002f22:	2100      	movs	r1, #0
 8002f24:	2041      	movs	r0, #65	; 0x41
 8002f26:	f7ff fefe 	bl	8002d26 <SD_SendCmd>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8002f30:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <SD_disk_initialize+0x1c4>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e2      	bne.n	8002efe <SD_disk_initialize+0x12e>
 8002f38:	e000      	b.n	8002f3c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002f3a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002f3c:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <SD_disk_initialize+0x1c4>)
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <SD_disk_initialize+0x184>
 8002f44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f48:	2050      	movs	r0, #80	; 0x50
 8002f4a:	f7ff feec 	bl	8002d26 <SD_SendCmd>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <SD_disk_initialize+0x188>
 8002f54:	2300      	movs	r3, #0
 8002f56:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002f58:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <SD_disk_initialize+0x1c8>)
 8002f5a:	7bbb      	ldrb	r3, [r7, #14]
 8002f5c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002f5e:	f7ff fd91 	bl	8002a84 <DESELECT>
	SPI_RxByte();
 8002f62:	f7ff fdd1 	bl	8002b08 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002f66:	7bbb      	ldrb	r3, [r7, #14]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <SD_disk_initialize+0x1c0>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <SD_disk_initialize+0x1c0>)
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	e001      	b.n	8002f82 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002f7e:	f7ff fe49 	bl	8002c14 <SD_PowerOff>
	}

	return Stat;
 8002f82:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <SD_disk_initialize+0x1c0>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b2db      	uxtb	r3, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd90      	pop	{r4, r7, pc}
 8002f90:	20000004 	.word	0x20000004
 8002f94:	20002954 	.word	0x20002954
 8002f98:	20002958 	.word	0x20002958

08002f9c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <SD_disk_status+0x14>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e002      	b.n	8002fb6 <SD_disk_status+0x1a>
	return Stat;
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <SD_disk_status+0x28>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000004 	.word	0x20000004

08002fc8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <SD_disk_read+0x1c>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <SD_disk_read+0x20>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	e051      	b.n	800308c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <SD_disk_read+0xcc>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <SD_disk_read+0x32>
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e048      	b.n	800308c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002ffa:	4b27      	ldr	r3, [pc, #156]	; (8003098 <SD_disk_read+0xd0>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <SD_disk_read+0x44>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	025b      	lsls	r3, r3, #9
 800300a:	607b      	str	r3, [r7, #4]

	SELECT();
 800300c:	f7ff fd2c 	bl	8002a68 <SELECT>

	if (count == 1)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d111      	bne.n	800303a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	2051      	movs	r0, #81	; 0x51
 800301a:	f7ff fe84 	bl	8002d26 <SD_SendCmd>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d129      	bne.n	8003078 <SD_disk_read+0xb0>
 8003024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003028:	68b8      	ldr	r0, [r7, #8]
 800302a:	f7ff fe0b 	bl	8002c44 <SD_RxDataBlock>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d021      	beq.n	8003078 <SD_disk_read+0xb0>
 8003034:	2300      	movs	r3, #0
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	e01e      	b.n	8003078 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	2052      	movs	r0, #82	; 0x52
 800303e:	f7ff fe72 	bl	8002d26 <SD_SendCmd>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d117      	bne.n	8003078 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800304c:	68b8      	ldr	r0, [r7, #8]
 800304e:	f7ff fdf9 	bl	8002c44 <SD_RxDataBlock>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <SD_disk_read+0xa6>
				buff += 512;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800305e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	3b01      	subs	r3, #1
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1ed      	bne.n	8003048 <SD_disk_read+0x80>
 800306c:	e000      	b.n	8003070 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800306e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003070:	2100      	movs	r1, #0
 8003072:	204c      	movs	r0, #76	; 0x4c
 8003074:	f7ff fe57 	bl	8002d26 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8003078:	f7ff fd04 	bl	8002a84 <DESELECT>
	SPI_RxByte();
 800307c:	f7ff fd44 	bl	8002b08 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	bf14      	ite	ne
 8003086:	2301      	movne	r3, #1
 8003088:	2300      	moveq	r3, #0
 800308a:	b2db      	uxtb	r3, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000004 	.word	0x20000004
 8003098:	20002958 	.word	0x20002958

0800309c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	4603      	mov	r3, r0
 80030aa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d102      	bne.n	80030b8 <SD_disk_write+0x1c>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <SD_disk_write+0x20>
 80030b8:	2304      	movs	r3, #4
 80030ba:	e06b      	b.n	8003194 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80030bc:	4b37      	ldr	r3, [pc, #220]	; (800319c <SD_disk_write+0x100>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <SD_disk_write+0x32>
 80030ca:	2303      	movs	r3, #3
 80030cc:	e062      	b.n	8003194 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80030ce:	4b33      	ldr	r3, [pc, #204]	; (800319c <SD_disk_write+0x100>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <SD_disk_write+0x44>
 80030dc:	2302      	movs	r3, #2
 80030de:	e059      	b.n	8003194 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80030e0:	4b2f      	ldr	r3, [pc, #188]	; (80031a0 <SD_disk_write+0x104>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <SD_disk_write+0x56>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	025b      	lsls	r3, r3, #9
 80030f0:	607b      	str	r3, [r7, #4]

	SELECT();
 80030f2:	f7ff fcb9 	bl	8002a68 <SELECT>

	if (count == 1)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d110      	bne.n	800311e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	2058      	movs	r0, #88	; 0x58
 8003100:	f7ff fe11 	bl	8002d26 <SD_SendCmd>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d13a      	bne.n	8003180 <SD_disk_write+0xe4>
 800310a:	21fe      	movs	r1, #254	; 0xfe
 800310c:	68b8      	ldr	r0, [r7, #8]
 800310e:	f7ff fdc7 	bl	8002ca0 <SD_TxDataBlock>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d033      	beq.n	8003180 <SD_disk_write+0xe4>
			count = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	e030      	b.n	8003180 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <SD_disk_write+0x104>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800312a:	2100      	movs	r1, #0
 800312c:	2077      	movs	r0, #119	; 0x77
 800312e:	f7ff fdfa 	bl	8002d26 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8003132:	6839      	ldr	r1, [r7, #0]
 8003134:	2057      	movs	r0, #87	; 0x57
 8003136:	f7ff fdf6 	bl	8002d26 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	2059      	movs	r0, #89	; 0x59
 800313e:	f7ff fdf2 	bl	8002d26 <SD_SendCmd>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d11b      	bne.n	8003180 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003148:	21fc      	movs	r1, #252	; 0xfc
 800314a:	68b8      	ldr	r0, [r7, #8]
 800314c:	f7ff fda8 	bl	8002ca0 <SD_TxDataBlock>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <SD_disk_write+0xd0>
				buff += 512;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800315c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	3b01      	subs	r3, #1
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1ee      	bne.n	8003148 <SD_disk_write+0xac>
 800316a:	e000      	b.n	800316e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800316c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800316e:	21fd      	movs	r1, #253	; 0xfd
 8003170:	2000      	movs	r0, #0
 8003172:	f7ff fd95 	bl	8002ca0 <SD_TxDataBlock>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <SD_disk_write+0xe4>
			{
				count = 1;
 800317c:	2301      	movs	r3, #1
 800317e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8003180:	f7ff fc80 	bl	8002a84 <DESELECT>
	SPI_RxByte();
 8003184:	f7ff fcc0 	bl	8002b08 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	b2db      	uxtb	r3, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000004 	.word	0x20000004
 80031a0:	20002958 	.word	0x20002958

080031a4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b08b      	sub	sp, #44	; 0x2c
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	603a      	str	r2, [r7, #0]
 80031ae:	71fb      	strb	r3, [r7, #7]
 80031b0:	460b      	mov	r3, r1
 80031b2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <SD_disk_ioctl+0x1e>
 80031be:	2304      	movs	r3, #4
 80031c0:	e115      	b.n	80033ee <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80031c8:	79bb      	ldrb	r3, [r7, #6]
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d124      	bne.n	8003218 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d012      	beq.n	80031fc <SD_disk_ioctl+0x58>
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	dc1a      	bgt.n	8003210 <SD_disk_ioctl+0x6c>
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <SD_disk_ioctl+0x40>
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d006      	beq.n	80031f0 <SD_disk_ioctl+0x4c>
 80031e2:	e015      	b.n	8003210 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80031e4:	f7ff fd16 	bl	8002c14 <SD_PowerOff>
			res = RES_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80031ee:	e0fc      	b.n	80033ea <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80031f0:	f7ff fcce 	bl	8002b90 <SD_PowerOn>
			res = RES_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80031fa:	e0f6      	b.n	80033ea <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	1c5c      	adds	r4, r3, #1
 8003200:	f7ff fd14 	bl	8002c2c <SD_CheckPower>
 8003204:	4603      	mov	r3, r0
 8003206:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003208:	2300      	movs	r3, #0
 800320a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800320e:	e0ec      	b.n	80033ea <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8003210:	2304      	movs	r3, #4
 8003212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003216:	e0e8      	b.n	80033ea <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003218:	4b77      	ldr	r3, [pc, #476]	; (80033f8 <SD_disk_ioctl+0x254>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <SD_disk_ioctl+0x86>
 8003226:	2303      	movs	r3, #3
 8003228:	e0e1      	b.n	80033ee <SD_disk_ioctl+0x24a>

		SELECT();
 800322a:	f7ff fc1d 	bl	8002a68 <SELECT>

		switch (ctrl)
 800322e:	79bb      	ldrb	r3, [r7, #6]
 8003230:	2b0d      	cmp	r3, #13
 8003232:	f200 80cb 	bhi.w	80033cc <SD_disk_ioctl+0x228>
 8003236:	a201      	add	r2, pc, #4	; (adr r2, 800323c <SD_disk_ioctl+0x98>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	08003337 	.word	0x08003337
 8003240:	08003275 	.word	0x08003275
 8003244:	08003327 	.word	0x08003327
 8003248:	080033cd 	.word	0x080033cd
 800324c:	080033cd 	.word	0x080033cd
 8003250:	080033cd 	.word	0x080033cd
 8003254:	080033cd 	.word	0x080033cd
 8003258:	080033cd 	.word	0x080033cd
 800325c:	080033cd 	.word	0x080033cd
 8003260:	080033cd 	.word	0x080033cd
 8003264:	080033cd 	.word	0x080033cd
 8003268:	08003349 	.word	0x08003349
 800326c:	0800336d 	.word	0x0800336d
 8003270:	08003391 	.word	0x08003391
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003274:	2100      	movs	r1, #0
 8003276:	2049      	movs	r0, #73	; 0x49
 8003278:	f7ff fd55 	bl	8002d26 <SD_SendCmd>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	f040 80a8 	bne.w	80033d4 <SD_disk_ioctl+0x230>
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	2110      	movs	r1, #16
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fcda 	bl	8002c44 <SD_RxDataBlock>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 809e 	beq.w	80033d4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8003298:	7b3b      	ldrb	r3, [r7, #12]
 800329a:	099b      	lsrs	r3, r3, #6
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d10e      	bne.n	80032c0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80032a2:	7d7b      	ldrb	r3, [r7, #21]
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	7d3b      	ldrb	r3, [r7, #20]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3301      	adds	r3, #1
 80032b4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80032b6:	8bfb      	ldrh	r3, [r7, #30]
 80032b8:	029a      	lsls	r2, r3, #10
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e02e      	b.n	800331e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80032c0:	7c7b      	ldrb	r3, [r7, #17]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	7dbb      	ldrb	r3, [r7, #22]
 80032ca:	09db      	lsrs	r3, r3, #7
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	7d7b      	ldrb	r3, [r7, #21]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f003 0306 	and.w	r3, r3, #6
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	4413      	add	r3, r2
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	3302      	adds	r3, #2
 80032e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80032e8:	7d3b      	ldrb	r3, [r7, #20]
 80032ea:	099b      	lsrs	r3, r3, #6
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	7cbb      	ldrb	r3, [r7, #18]
 80032fe:	029b      	lsls	r3, r3, #10
 8003300:	b29b      	uxth	r3, r3
 8003302:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003306:	b29b      	uxth	r3, r3
 8003308:	4413      	add	r3, r2
 800330a:	b29b      	uxth	r3, r3
 800330c:	3301      	adds	r3, #1
 800330e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003310:	8bfa      	ldrh	r2, [r7, #30]
 8003312:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003316:	3b09      	subs	r3, #9
 8003318:	409a      	lsls	r2, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8003324:	e056      	b.n	80033d4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800332c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003334:	e055      	b.n	80033e2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003336:	f7ff fc11 	bl	8002b5c <SD_ReadyWait>
 800333a:	4603      	mov	r3, r0
 800333c:	2bff      	cmp	r3, #255	; 0xff
 800333e:	d14b      	bne.n	80033d8 <SD_disk_ioctl+0x234>
 8003340:	2300      	movs	r3, #0
 8003342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003346:	e047      	b.n	80033d8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003348:	2100      	movs	r1, #0
 800334a:	2049      	movs	r0, #73	; 0x49
 800334c:	f7ff fceb 	bl	8002d26 <SD_SendCmd>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d142      	bne.n	80033dc <SD_disk_ioctl+0x238>
 8003356:	2110      	movs	r1, #16
 8003358:	6a38      	ldr	r0, [r7, #32]
 800335a:	f7ff fc73 	bl	8002c44 <SD_RxDataBlock>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d03b      	beq.n	80033dc <SD_disk_ioctl+0x238>
 8003364:	2300      	movs	r3, #0
 8003366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800336a:	e037      	b.n	80033dc <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800336c:	2100      	movs	r1, #0
 800336e:	204a      	movs	r0, #74	; 0x4a
 8003370:	f7ff fcd9 	bl	8002d26 <SD_SendCmd>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d132      	bne.n	80033e0 <SD_disk_ioctl+0x23c>
 800337a:	2110      	movs	r1, #16
 800337c:	6a38      	ldr	r0, [r7, #32]
 800337e:	f7ff fc61 	bl	8002c44 <SD_RxDataBlock>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02b      	beq.n	80033e0 <SD_disk_ioctl+0x23c>
 8003388:	2300      	movs	r3, #0
 800338a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800338e:	e027      	b.n	80033e0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8003390:	2100      	movs	r1, #0
 8003392:	207a      	movs	r0, #122	; 0x7a
 8003394:	f7ff fcc7 	bl	8002d26 <SD_SendCmd>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d116      	bne.n	80033cc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800339e:	2300      	movs	r3, #0
 80033a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80033a4:	e00b      	b.n	80033be <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80033a6:	6a3c      	ldr	r4, [r7, #32]
 80033a8:	1c63      	adds	r3, r4, #1
 80033aa:	623b      	str	r3, [r7, #32]
 80033ac:	f7ff fbac 	bl	8002b08 <SPI_RxByte>
 80033b0:	4603      	mov	r3, r0
 80033b2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80033b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80033b8:	3301      	adds	r3, #1
 80033ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80033be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d9ef      	bls.n	80033a6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80033cc:	2304      	movs	r3, #4
 80033ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033d2:	e006      	b.n	80033e2 <SD_disk_ioctl+0x23e>
			break;
 80033d4:	bf00      	nop
 80033d6:	e004      	b.n	80033e2 <SD_disk_ioctl+0x23e>
			break;
 80033d8:	bf00      	nop
 80033da:	e002      	b.n	80033e2 <SD_disk_ioctl+0x23e>
			break;
 80033dc:	bf00      	nop
 80033de:	e000      	b.n	80033e2 <SD_disk_ioctl+0x23e>
			break;
 80033e0:	bf00      	nop
		}

		DESELECT();
 80033e2:	f7ff fb4f 	bl	8002a84 <DESELECT>
		SPI_RxByte();
 80033e6:	f7ff fb8f 	bl	8002b08 <SPI_RxByte>
	}

	return res;
 80033ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	372c      	adds	r7, #44	; 0x2c
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000004 	.word	0x20000004

080033fc <lsm6ds3tr_c_read_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	461a      	mov	r2, r3
 8003408:	460b      	mov	r3, r1
 800340a:	72fb      	strb	r3, [r7, #11]
 800340c:	4613      	mov	r3, r2
 800340e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685c      	ldr	r4, [r3, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	68d8      	ldr	r0, [r3, #12]
 8003418:	893b      	ldrh	r3, [r7, #8]
 800341a:	7af9      	ldrb	r1, [r7, #11]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	47a0      	blx	r4
 8003420:	6178      	str	r0, [r7, #20]

  return ret;
 8003422:	697b      	ldr	r3, [r7, #20]
}
 8003424:	4618      	mov	r0, r3
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	bd90      	pop	{r4, r7, pc}

0800342c <lsm6ds3tr_c_write_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	461a      	mov	r2, r3
 8003438:	460b      	mov	r3, r1
 800343a:	72fb      	strb	r3, [r7, #11]
 800343c:	4613      	mov	r3, r2
 800343e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681c      	ldr	r4, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68d8      	ldr	r0, [r3, #12]
 8003448:	893b      	ldrh	r3, [r7, #8]
 800344a:	7af9      	ldrb	r1, [r7, #11]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	47a0      	blx	r4
 8003450:	6178      	str	r0, [r7, #20]

  return ret;
 8003452:	697b      	ldr	r3, [r7, #20]
}
 8003454:	4618      	mov	r0, r3
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd90      	pop	{r4, r7, pc}

0800345c <lsm6ds3tr_c_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6ds3tr_c_from_fs2g_to_mg(int16_t lsb)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8003466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003472:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003488 <lsm6ds3tr_c_from_fs2g_to_mg+0x2c>
 8003476:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800347a:	eeb0 0a67 	vmov.f32	s0, s15
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	3d79db23 	.word	0x3d79db23

0800348c <lsm6ds3tr_c_from_fs500dps_to_mdps>:
{
  return ((float_t)lsb * 8.750f);
}

float_t lsm6ds3tr_c_from_fs500dps_to_mdps(int16_t lsb)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 17.50f);
 8003496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80034b8 <lsm6ds3tr_c_from_fs500dps_to_mdps+0x2c>
 80034a6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80034aa:	eeb0 0a67 	vmov.f32	s0, s15
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	418c0000 	.word	0x418c0000

080034bc <lsm6ds3tr_c_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_xl_t val)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 80034c8:	f107 0208 	add.w	r2, r7, #8
 80034cc:	2301      	movs	r3, #1
 80034ce:	2110      	movs	r1, #16
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff93 	bl	80033fc <lsm6ds3tr_c_read_reg>
 80034d6:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10f      	bne.n	80034fe <lsm6ds3tr_c_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	7a3b      	ldrb	r3, [r7, #8]
 80034e8:	f362 0383 	bfi	r3, r2, #2, #2
 80034ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 80034ee:	f107 0208 	add.w	r2, r7, #8
 80034f2:	2301      	movs	r3, #1
 80034f4:	2110      	movs	r1, #16
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ff98 	bl	800342c <lsm6ds3tr_c_write_reg>
 80034fc:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80034fe:	68fb      	ldr	r3, [r7, #12]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <lsm6ds3tr_c_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_xl_t val)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003514:	f107 0208 	add.w	r2, r7, #8
 8003518:	2301      	movs	r3, #1
 800351a:	2110      	movs	r1, #16
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff ff6d 	bl	80033fc <lsm6ds3tr_c_read_reg>
 8003522:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <lsm6ds3tr_c_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	b2da      	uxtb	r2, r3
 8003532:	7a3b      	ldrb	r3, [r7, #8]
 8003534:	f362 1307 	bfi	r3, r2, #4, #4
 8003538:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 800353a:	f107 0208 	add.w	r2, r7, #8
 800353e:	2301      	movs	r3, #1
 8003540:	2110      	movs	r1, #16
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff ff72 	bl	800342c <lsm6ds3tr_c_write_reg>
 8003548:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800354a:	68fb      	ldr	r3, [r7, #12]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <lsm6ds3tr_c_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_g_t val)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003560:	f107 0208 	add.w	r2, r7, #8
 8003564:	2301      	movs	r3, #1
 8003566:	2111      	movs	r1, #17
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff47 	bl	80033fc <lsm6ds3tr_c_read_reg>
 800356e:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10f      	bne.n	8003596 <lsm6ds3tr_c_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	b2da      	uxtb	r2, r3
 800357e:	7a3b      	ldrb	r3, [r7, #8]
 8003580:	f362 0343 	bfi	r3, r2, #1, #3
 8003584:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003586:	f107 0208 	add.w	r2, r7, #8
 800358a:	2301      	movs	r3, #1
 800358c:	2111      	movs	r1, #17
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ff4c 	bl	800342c <lsm6ds3tr_c_write_reg>
 8003594:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003596:	68fb      	ldr	r3, [r7, #12]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <lsm6ds3tr_c_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_g_t val)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 80035ac:	f107 0208 	add.w	r2, r7, #8
 80035b0:	2301      	movs	r3, #1
 80035b2:	2111      	movs	r1, #17
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff ff21 	bl	80033fc <lsm6ds3tr_c_read_reg>
 80035ba:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10f      	bne.n	80035e2 <lsm6ds3tr_c_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	7a3b      	ldrb	r3, [r7, #8]
 80035cc:	f362 1307 	bfi	r3, r2, #4, #4
 80035d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 80035d2:	f107 0208 	add.w	r2, r7, #8
 80035d6:	2301      	movs	r3, #1
 80035d8:	2111      	movs	r1, #17
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff ff26 	bl	800342c <lsm6ds3tr_c_write_reg>
 80035e0:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 80035e2:	68fb      	ldr	r3, [r7, #12]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <lsm6ds3tr_c_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_block_data_update_set(stmdev_ctx_t *ctx,
                                          uint8_t val)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 80035f8:	f107 0208 	add.w	r2, r7, #8
 80035fc:	2301      	movs	r3, #1
 80035fe:	2112      	movs	r1, #18
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff fefb 	bl	80033fc <lsm6ds3tr_c_read_reg>
 8003606:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10f      	bne.n	800362e <lsm6ds3tr_c_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800360e:	78fb      	ldrb	r3, [r7, #3]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	b2da      	uxtb	r2, r3
 8003616:	7a3b      	ldrb	r3, [r7, #8]
 8003618:	f362 1386 	bfi	r3, r2, #6, #1
 800361c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 800361e:	f107 0208 	add.w	r2, r7, #8
 8003622:	2301      	movs	r3, #1
 8003624:	2112      	movs	r1, #18
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff00 	bl	800342c <lsm6ds3tr_c_write_reg>
 800362c:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <lsm6ds3tr_c_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_G, buff, 6);
 8003642:	f107 020c 	add.w	r2, r7, #12
 8003646:	2306      	movs	r3, #6
 8003648:	2122      	movs	r1, #34	; 0x22
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fed6 	bl	80033fc <lsm6ds3tr_c_read_reg>
 8003650:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003652:	7b7b      	ldrb	r3, [r7, #13]
 8003654:	b21a      	sxth	r2, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003660:	b29b      	uxth	r3, r3
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	b29a      	uxth	r2, r3
 8003666:	7b3b      	ldrb	r3, [r7, #12]
 8003668:	b29b      	uxth	r3, r3
 800366a:	4413      	add	r3, r2
 800366c:	b29b      	uxth	r3, r3
 800366e:	b21a      	sxth	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	3302      	adds	r3, #2
 800367a:	b212      	sxth	r2, r2
 800367c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	3302      	adds	r3, #2
 8003682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003686:	b29b      	uxth	r3, r3
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	b29a      	uxth	r2, r3
 800368c:	7bbb      	ldrb	r3, [r7, #14]
 800368e:	b29b      	uxth	r3, r3
 8003690:	4413      	add	r3, r2
 8003692:	b29a      	uxth	r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	3302      	adds	r3, #2
 8003698:	b212      	sxth	r2, r2
 800369a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800369c:	7c7a      	ldrb	r2, [r7, #17]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	3304      	adds	r3, #4
 80036a2:	b212      	sxth	r2, r2
 80036a4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	3304      	adds	r3, #4
 80036aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	7c3b      	ldrb	r3, [r7, #16]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	3304      	adds	r3, #4
 80036c0:	b212      	sxth	r2, r2
 80036c2:	801a      	strh	r2, [r3, #0]

  return ret;
 80036c4:	697b      	ldr	r3, [r7, #20]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <lsm6ds3tr_c_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_acceleration_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b086      	sub	sp, #24
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_XL, buff, 6);
 80036d8:	f107 020c 	add.w	r2, r7, #12
 80036dc:	2306      	movs	r3, #6
 80036de:	2128      	movs	r1, #40	; 0x28
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff fe8b 	bl	80033fc <lsm6ds3tr_c_read_reg>
 80036e6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80036e8:	7b7b      	ldrb	r3, [r7, #13]
 80036ea:	b21a      	sxth	r2, r3
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	7b3b      	ldrb	r3, [r7, #12]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	4413      	add	r3, r2
 8003702:	b29b      	uxth	r3, r3
 8003704:	b21a      	sxth	r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	3302      	adds	r3, #2
 8003710:	b212      	sxth	r2, r2
 8003712:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	3302      	adds	r3, #2
 8003718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800371c:	b29b      	uxth	r3, r3
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	b29a      	uxth	r2, r3
 8003722:	7bbb      	ldrb	r3, [r7, #14]
 8003724:	b29b      	uxth	r3, r3
 8003726:	4413      	add	r3, r2
 8003728:	b29a      	uxth	r2, r3
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	3302      	adds	r3, #2
 800372e:	b212      	sxth	r2, r2
 8003730:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003732:	7c7a      	ldrb	r2, [r7, #17]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	3304      	adds	r3, #4
 8003738:	b212      	sxth	r2, r2
 800373a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	3304      	adds	r3, #4
 8003740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003744:	b29b      	uxth	r3, r3
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	b29a      	uxth	r2, r3
 800374a:	7c3b      	ldrb	r3, [r7, #16]
 800374c:	b29b      	uxth	r3, r3
 800374e:	4413      	add	r3, r2
 8003750:	b29a      	uxth	r2, r3
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	3304      	adds	r3, #4
 8003756:	b212      	sxth	r2, r2
 8003758:	801a      	strh	r2, [r3, #0]

  return ret;
 800375a:	697b      	ldr	r3, [r7, #20]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <lsm6ds3tr_c_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_WHO_AM_I, buff, 1);
 800376e:	2301      	movs	r3, #1
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	210f      	movs	r1, #15
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff fe41 	bl	80033fc <lsm6ds3tr_c_read_reg>
 800377a:	60f8      	str	r0, [r7, #12]

  return ret;
 800377c:	68fb      	ldr	r3, [r7, #12]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <lsm6ds3tr_c_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8003792:	f107 0208 	add.w	r2, r7, #8
 8003796:	2301      	movs	r3, #1
 8003798:	2112      	movs	r1, #18
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff fe2e 	bl	80033fc <lsm6ds3tr_c_read_reg>
 80037a0:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10f      	bne.n	80037c8 <lsm6ds3tr_c_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	7a3b      	ldrb	r3, [r7, #8]
 80037b2:	f362 0300 	bfi	r3, r2, #0, #1
 80037b6:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 80037b8:	f107 0208 	add.w	r2, r7, #8
 80037bc:	2301      	movs	r3, #1
 80037be:	2112      	movs	r1, #18
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fe33 	bl	800342c <lsm6ds3tr_c_write_reg>
 80037c6:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80037c8:	68fb      	ldr	r3, [r7, #12]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <lsm6ds3tr_c_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 80037dc:	f107 0208 	add.w	r2, r7, #8
 80037e0:	2301      	movs	r3, #1
 80037e2:	2112      	movs	r1, #18
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fe09 	bl	80033fc <lsm6ds3tr_c_read_reg>
 80037ea:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 80037ec:	7a3b      	ldrb	r3, [r7, #8]
 80037ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	701a      	strb	r2, [r3, #0]

  return ret;
 80037fa:	68fb      	ldr	r3, [r7, #12]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <lsm6ds3tr_c_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_filter_analog_set(stmdev_ctx_t *ctx,
                                         lsm6ds3tr_c_bw0_xl_t val)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003810:	f107 0208 	add.w	r2, r7, #8
 8003814:	2301      	movs	r3, #1
 8003816:	2110      	movs	r1, #16
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fdef 	bl	80033fc <lsm6ds3tr_c_read_reg>
 800381e:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10f      	bne.n	8003846 <lsm6ds3tr_c_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	b2da      	uxtb	r2, r3
 800382e:	7a3b      	ldrb	r3, [r7, #8]
 8003830:	f362 0300 	bfi	r3, r2, #0, #1
 8003834:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003836:	f107 0208 	add.w	r2, r7, #8
 800383a:	2301      	movs	r3, #1
 800383c:	2110      	movs	r1, #16
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff fdf4 	bl	800342c <lsm6ds3tr_c_write_reg>
 8003844:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003846:	68fb      	ldr	r3, [r7, #12]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <lsm6ds3tr_c_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                         lsm6ds3tr_c_input_composite_t val)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 800385c:	f107 0208 	add.w	r2, r7, #8
 8003860:	2301      	movs	r3, #1
 8003862:	2117      	movs	r1, #23
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff fdc9 	bl	80033fc <lsm6ds3tr_c_read_reg>
 800386a:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d120      	bne.n	80038b4 <lsm6ds3tr_c_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	b2da      	uxtb	r2, r3
 800387c:	7a3b      	ldrb	r3, [r7, #8]
 800387e:	f362 03c3 	bfi	r3, r2, #3, #1
 8003882:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	b2da      	uxtb	r2, r3
 800388c:	7a3b      	ldrb	r3, [r7, #8]
 800388e:	f362 1346 	bfi	r3, r2, #5, #2
 8003892:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8003894:	7a3b      	ldrb	r3, [r7, #8]
 8003896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800389a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 800389c:	7a3b      	ldrb	r3, [r7, #8]
 800389e:	f36f 0382 	bfc	r3, #2, #1
 80038a2:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 80038a4:	f107 0208 	add.w	r2, r7, #8
 80038a8:	2301      	movs	r3, #1
 80038aa:	2117      	movs	r1, #23
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff fdbd 	bl	800342c <lsm6ds3tr_c_write_reg>
 80038b2:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 80038b4:	68fb      	ldr	r3, [r7, #12]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <lsm6ds3tr_c_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_band_pass_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_lpf1_sel_g_t val)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b086      	sub	sp, #24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl4_c_t ctrl4_c;
  lsm6ds3tr_c_ctrl6_c_t ctrl6_c;
  lsm6ds3tr_c_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 80038ca:	f107 0208 	add.w	r2, r7, #8
 80038ce:	2301      	movs	r3, #1
 80038d0:	2116      	movs	r1, #22
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff fd92 	bl	80033fc <lsm6ds3tr_c_read_reg>
 80038d8:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl7_g, 1);

  if (ret == 0)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d157      	bne.n	8003990 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	7a3b      	ldrb	r3, [r7, #8]
 80038ec:	f362 1305 	bfi	r3, r2, #4, #2
 80038f0:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	09db      	lsrs	r3, r3, #7
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	7a3b      	ldrb	r3, [r7, #8]
 8003900:	f362 1386 	bfi	r3, r2, #6, #1
 8003904:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 8003906:	f107 0208 	add.w	r2, r7, #8
 800390a:	2301      	movs	r3, #1
 800390c:	2116      	movs	r1, #22
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fd8c 	bl	800342c <lsm6ds3tr_c_write_reg>
 8003914:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl7_g, 1);

    if (ret == 0)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d139      	bne.n	8003990 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
    {
      ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 800391c:	f107 020c 	add.w	r2, r7, #12
 8003920:	2301      	movs	r3, #1
 8003922:	2115      	movs	r1, #21
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff fd69 	bl	80033fc <lsm6ds3tr_c_read_reg>
 800392a:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl6_c, 1);

      if (ret == 0)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d12e      	bne.n	8003990 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	b2da      	uxtb	r2, r3
 800393a:	7b3b      	ldrb	r3, [r7, #12]
 800393c:	f362 0301 	bfi	r3, r2, #0, #2
 8003940:	733b      	strb	r3, [r7, #12]
        ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 8003942:	f107 020c 	add.w	r2, r7, #12
 8003946:	2301      	movs	r3, #1
 8003948:	2115      	movs	r1, #21
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff fd6e 	bl	800342c <lsm6ds3tr_c_write_reg>
 8003950:	6178      	str	r0, [r7, #20]
                                    (uint8_t *)&ctrl6_c, 1);

        if (ret == 0)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11b      	bne.n	8003990 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
        {
          ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8003958:	f107 0210 	add.w	r2, r7, #16
 800395c:	2301      	movs	r3, #1
 800395e:	2113      	movs	r1, #19
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fd4b 	bl	80033fc <lsm6ds3tr_c_read_reg>
 8003966:	6178      	str	r0, [r7, #20]
                                     (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d110      	bne.n	8003990 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	b2da      	uxtb	r2, r3
 8003978:	7c3b      	ldrb	r3, [r7, #16]
 800397a:	f362 0341 	bfi	r3, r2, #1, #1
 800397e:	743b      	strb	r3, [r7, #16]
            ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8003980:	f107 0210 	add.w	r2, r7, #16
 8003984:	2301      	movs	r3, #1
 8003986:	2113      	movs	r1, #19
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fd4f 	bl	800342c <lsm6ds3tr_c_write_reg>
 800398e:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8003990:	697b      	ldr	r3, [r7, #20]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <lsm6ds3tr_c_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_i2c_interface_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_i2c_disable_t val)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 80039a6:	f107 0208 	add.w	r2, r7, #8
 80039aa:	2301      	movs	r3, #1
 80039ac:	2113      	movs	r1, #19
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff fd24 	bl	80033fc <lsm6ds3tr_c_read_reg>
 80039b4:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl4_c, 1);

  if (ret == 0)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10f      	bne.n	80039dc <lsm6ds3tr_c_i2c_interface_set+0x42>
  {
    ctrl4_c.i2c_disable = (uint8_t)val;
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	7a3b      	ldrb	r3, [r7, #8]
 80039c6:	f362 0382 	bfi	r3, r2, #2, #1
 80039ca:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 80039cc:	f107 0208 	add.w	r2, r7, #8
 80039d0:	2301      	movs	r3, #1
 80039d2:	2113      	movs	r1, #19
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff fd29 	bl	800342c <lsm6ds3tr_c_write_reg>
 80039da:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl4_c, 1);
  }

  return ret;
 80039dc:	68fb      	ldr	r3, [r7, #12]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039ee:	f001 f957 	bl	8004ca0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039f2:	f000 f84f 	bl	8003a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039f6:	f000 fbaf 	bl	8004158 <MX_GPIO_Init>
  MX_ADC3_Init();
 80039fa:	f000 f8b9 	bl	8003b70 <MX_ADC3_Init>
  MX_I2C1_Init();
 80039fe:	f000 f91d 	bl	8003c3c <MX_I2C1_Init>
  MX_I2C2_Init();
 8003a02:	f000 f949 	bl	8003c98 <MX_I2C2_Init>
  MX_SPI1_Init();
 8003a06:	f000 f99b 	bl	8003d40 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003a0a:	f000 faf5 	bl	8003ff8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003a0e:	f000 fb1d 	bl	800404c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003a12:	f000 fb45 	bl	80040a0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8003a16:	f000 fb6d 	bl	80040f4 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8003a1a:	f000 fb95 	bl	8004148 <MX_USB_OTG_FS_USB_Init>
  MX_TIM2_Init();
 8003a1e:	f000 f9c5 	bl	8003dac <MX_TIM2_Init>
  MX_TIM3_Init();
 8003a22:	f000 fa0f 	bl	8003e44 <MX_TIM3_Init>
  MX_TIM5_Init();
 8003a26:	f000 fa99 	bl	8003f5c <MX_TIM5_Init>
  MX_FATFS_Init();
 8003a2a:	f005 ffcf 	bl	80099cc <MX_FATFS_Init>
  MX_RTC_Init();
 8003a2e:	f000 f961 	bl	8003cf4 <MX_RTC_Init>
  MX_CRC_Init();
 8003a32:	f000 f8ef 	bl	8003c14 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin, GPIO_PIN_SET); // LED_ON Pin enabled
 8003a36:	2201      	movs	r2, #1
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4812      	ldr	r0, [pc, #72]	; (8003a84 <main+0x9c>)
 8003a3c:	f001 fef2 	bl	8005824 <HAL_GPIO_WritePin>



  //INITIALIZATION SECTOR

  printIntroTitle();
 8003a40:	f7fd fd8e 	bl	8001560 <printIntroTitle>
  printOptions();
 8003a44:	f7fd fdb6 	bl	80015b4 <printOptions>
	  // Usage : screen /dev/tty.usbserial-1120 (OR tty.usbserial-1130)  115200
	  //MENU SECTOR ------------------------------------------------------------------------


	  char userInput;
	  UART_Transmit_String("\r\nChoice: ");
 8003a48:	480f      	ldr	r0, [pc, #60]	; (8003a88 <main+0xa0>)
 8003a4a:	f7fd fd73 	bl	8001534 <UART_Transmit_String>
	         HAL_UART_Receive(&huart1, (uint8_t *)&userInput, sizeof(userInput), HAL_MAX_DELAY);
 8003a4e:	1df9      	adds	r1, r7, #7
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a54:	2201      	movs	r2, #1
 8003a56:	480d      	ldr	r0, [pc, #52]	; (8003a8c <main+0xa4>)
 8003a58:	f005 fc33 	bl	80092c2 <HAL_UART_Receive>

	         switch (userInput)
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	2b0a      	cmp	r3, #10
 8003a60:	d002      	beq.n	8003a68 <main+0x80>
 8003a62:	2b0d      	cmp	r3, #13
 8003a64:	d104      	bne.n	8003a70 <main+0x88>
	         {
	         case '\r': // Ignore carriage return characters
	             break;
 8003a66:	e008      	b.n	8003a7a <main+0x92>
	         case '\n': // Process command on new line (Enter pressed)
	             UART_Transmit_String("\r\n"); // Move to a new line after the command
 8003a68:	4809      	ldr	r0, [pc, #36]	; (8003a90 <main+0xa8>)
 8003a6a:	f7fd fd63 	bl	8001534 <UART_Transmit_String>
	             break;
 8003a6e:	e004      	b.n	8003a7a <main+0x92>
	         default:
	             menu(userInput);
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd fefe 	bl	8001874 <menu>
	             break;
 8003a78:	bf00      	nop
	         }

	         HAL_Delay(100);
 8003a7a:	2064      	movs	r0, #100	; 0x64
 8003a7c:	f001 f982 	bl	8004d84 <HAL_Delay>
  {
 8003a80:	e7e2      	b.n	8003a48 <main+0x60>
 8003a82:	bf00      	nop
 8003a84:	40020400 	.word	0x40020400
 8003a88:	080180a0 	.word	0x080180a0
 8003a8c:	20002ba4 	.word	0x20002ba4
 8003a90:	080180ac 	.word	0x080180ac

08003a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b094      	sub	sp, #80	; 0x50
 8003a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a9a:	f107 0320 	add.w	r3, r7, #32
 8003a9e:	2230      	movs	r2, #48	; 0x30
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f00f faf0 	bl	8013088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aa8:	f107 030c 	add.w	r3, r7, #12
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <SystemClock_Config+0xd4>)
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	4a29      	ldr	r2, [pc, #164]	; (8003b68 <SystemClock_Config+0xd4>)
 8003ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac8:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <SystemClock_Config+0xd4>)
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <SystemClock_Config+0xd8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a23      	ldr	r2, [pc, #140]	; (8003b6c <SystemClock_Config+0xd8>)
 8003ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <SystemClock_Config+0xd8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003af0:	230b      	movs	r3, #11
 8003af2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003afa:	2301      	movs	r3, #1
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003afe:	2310      	movs	r3, #16
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003b02:	2301      	movs	r3, #1
 8003b04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b06:	2302      	movs	r3, #2
 8003b08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8003b10:	230f      	movs	r3, #15
 8003b12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8003b14:	2390      	movs	r3, #144	; 0x90
 8003b16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8003b1c:	2305      	movs	r3, #5
 8003b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b20:	f107 0320 	add.w	r3, r7, #32
 8003b24:	4618      	mov	r0, r3
 8003b26:	f003 faef 	bl	8007108 <HAL_RCC_OscConfig>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003b30:	f000 fc04 	bl	800433c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b34:	230f      	movs	r3, #15
 8003b36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b48:	f107 030c 	add.w	r3, r7, #12
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f003 fd52 	bl	80075f8 <HAL_RCC_ClockConfig>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003b5a:	f000 fbef 	bl	800433c <Error_Handler>
  }
}
 8003b5e:	bf00      	nop
 8003b60:	3750      	adds	r7, #80	; 0x50
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40007000 	.word	0x40007000

08003b70 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b76:	463b      	mov	r3, r7
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8003b82:	4b21      	ldr	r3, [pc, #132]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003b84:	4a21      	ldr	r2, [pc, #132]	; (8003c0c <MX_ADC3_Init+0x9c>)
 8003b86:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003b88:	4b1f      	ldr	r3, [pc, #124]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003b8e:	4b1e      	ldr	r3, [pc, #120]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8003b94:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003ba0:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ba8:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bae:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003bb0:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <MX_ADC3_Init+0xa0>)
 8003bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bb4:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003bc0:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003bce:	480e      	ldr	r0, [pc, #56]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003bd0:	f001 f8fc 	bl	8004dcc <HAL_ADC_Init>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8003bda:	f000 fbaf 	bl	800433c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003bde:	230c      	movs	r3, #12
 8003be0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003be2:	2301      	movs	r3, #1
 8003be4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003bea:	463b      	mov	r3, r7
 8003bec:	4619      	mov	r1, r3
 8003bee:	4806      	ldr	r0, [pc, #24]	; (8003c08 <MX_ADC3_Init+0x98>)
 8003bf0:	f001 f930 	bl	8004e54 <HAL_ADC_ConfigChannel>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8003bfa:	f000 fb9f 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	2000295c 	.word	0x2000295c
 8003c0c:	40012200 	.word	0x40012200
 8003c10:	0f000001 	.word	0x0f000001

08003c14 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <MX_CRC_Init+0x20>)
 8003c1a:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <MX_CRC_Init+0x24>)
 8003c1c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003c1e:	4805      	ldr	r0, [pc, #20]	; (8003c34 <MX_CRC_Init+0x20>)
 8003c20:	f001 fc47 	bl	80054b2 <HAL_CRC_Init>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003c2a:	f000 fb87 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	200029a4 	.word	0x200029a4
 8003c38:	40023000 	.word	0x40023000

08003c3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c40:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c42:	4a13      	ldr	r2, [pc, #76]	; (8003c90 <MX_I2C1_Init+0x54>)
 8003c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c48:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <MX_I2C1_Init+0x58>)
 8003c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c52:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c60:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c78:	4804      	ldr	r0, [pc, #16]	; (8003c8c <MX_I2C1_Init+0x50>)
 8003c7a:	f001 fe11 	bl	80058a0 <HAL_I2C_Init>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c84:	f000 fb5a 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c88:	bf00      	nop
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	200029ac 	.word	0x200029ac
 8003c90:	40005400 	.word	0x40005400
 8003c94:	000186a0 	.word	0x000186a0

08003c98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003c9c:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <MX_I2C2_Init+0x50>)
 8003c9e:	4a13      	ldr	r2, [pc, #76]	; (8003cec <MX_I2C2_Init+0x54>)
 8003ca0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003ca2:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <MX_I2C2_Init+0x50>)
 8003ca4:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <MX_I2C2_Init+0x58>)
 8003ca6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <MX_I2C2_Init+0x50>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003cae:	4b0e      	ldr	r3, [pc, #56]	; (8003ce8 <MX_I2C2_Init+0x50>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <MX_I2C2_Init+0x50>)
 8003cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <MX_I2C2_Init+0x50>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <MX_I2C2_Init+0x50>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <MX_I2C2_Init+0x50>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <MX_I2C2_Init+0x50>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003cd4:	4804      	ldr	r0, [pc, #16]	; (8003ce8 <MX_I2C2_Init+0x50>)
 8003cd6:	f001 fde3 	bl	80058a0 <HAL_I2C_Init>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003ce0:	f000 fb2c 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003ce4:	bf00      	nop
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20002a00 	.word	0x20002a00
 8003cec:	40005800 	.word	0x40005800
 8003cf0:	000186a0 	.word	0x000186a0

08003cf4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <MX_RTC_Init+0x44>)
 8003cfa:	4a10      	ldr	r2, [pc, #64]	; (8003d3c <MX_RTC_Init+0x48>)
 8003cfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <MX_RTC_Init+0x44>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <MX_RTC_Init+0x44>)
 8003d06:	227f      	movs	r2, #127	; 0x7f
 8003d08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <MX_RTC_Init+0x44>)
 8003d0c:	22ff      	movs	r2, #255	; 0xff
 8003d0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <MX_RTC_Init+0x44>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <MX_RTC_Init+0x44>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <MX_RTC_Init+0x44>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d22:	4805      	ldr	r0, [pc, #20]	; (8003d38 <MX_RTC_Init+0x44>)
 8003d24:	f003 ff2a 	bl	8007b7c <HAL_RTC_Init>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003d2e:	f000 fb05 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20002a54 	.word	0x20002a54
 8003d3c:	40002800 	.word	0x40002800

08003d40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003d44:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <MX_SPI1_Init+0x64>)
 8003d46:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <MX_SPI1_Init+0x68>)
 8003d48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d4a:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <MX_SPI1_Init+0x64>)
 8003d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d52:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <MX_SPI1_Init+0x64>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <MX_SPI1_Init+0x64>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d5e:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <MX_SPI1_Init+0x64>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <MX_SPI1_Init+0x64>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <MX_SPI1_Init+0x64>)
 8003d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003d72:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <MX_SPI1_Init+0x64>)
 8003d74:	2230      	movs	r2, #48	; 0x30
 8003d76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <MX_SPI1_Init+0x64>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d7e:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <MX_SPI1_Init+0x64>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <MX_SPI1_Init+0x64>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <MX_SPI1_Init+0x64>)
 8003d8c:	220a      	movs	r2, #10
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d90:	4804      	ldr	r0, [pc, #16]	; (8003da4 <MX_SPI1_Init+0x64>)
 8003d92:	f003 ffed 	bl	8007d70 <HAL_SPI_Init>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d9c:	f000 face 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003da0:	bf00      	nop
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20002a74 	.word	0x20002a74
 8003da8:	40013000 	.word	0x40013000

08003dac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003db2:	f107 0308 	add.w	r3, r7, #8
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	609a      	str	r2, [r3, #8]
 8003dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <MX_TIM2_Init+0x94>)
 8003dca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003dce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <MX_TIM2_Init+0x94>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <MX_TIM2_Init+0x94>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003ddc:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <MX_TIM2_Init+0x94>)
 8003dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003de2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003de4:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <MX_TIM2_Init+0x94>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <MX_TIM2_Init+0x94>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003df0:	4813      	ldr	r0, [pc, #76]	; (8003e40 <MX_TIM2_Init+0x94>)
 8003df2:	f004 fbef 	bl	80085d4 <HAL_TIM_Base_Init>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003dfc:	f000 fa9e 	bl	800433c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e06:	f107 0308 	add.w	r3, r7, #8
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	480c      	ldr	r0, [pc, #48]	; (8003e40 <MX_TIM2_Init+0x94>)
 8003e0e:	f004 fd4b 	bl	80088a8 <HAL_TIM_ConfigClockSource>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003e18:	f000 fa90 	bl	800433c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e24:	463b      	mov	r3, r7
 8003e26:	4619      	mov	r1, r3
 8003e28:	4805      	ldr	r0, [pc, #20]	; (8003e40 <MX_TIM2_Init+0x94>)
 8003e2a:	f005 f8ef 	bl	800900c <HAL_TIMEx_MasterConfigSynchronization>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003e34:	f000 fa82 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e38:	bf00      	nop
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20002acc 	.word	0x20002acc

08003e44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08e      	sub	sp, #56	; 0x38
 8003e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e58:	f107 0320 	add.w	r3, r7, #32
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e62:	1d3b      	adds	r3, r7, #4
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	611a      	str	r2, [r3, #16]
 8003e70:	615a      	str	r2, [r3, #20]
 8003e72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e74:	4b37      	ldr	r3, [pc, #220]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003e76:	4a38      	ldr	r2, [pc, #224]	; (8003f58 <MX_TIM3_Init+0x114>)
 8003e78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e7a:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e80:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e86:	4b33      	ldr	r3, [pc, #204]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e8e:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e94:	4b2f      	ldr	r3, [pc, #188]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e9a:	482e      	ldr	r0, [pc, #184]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003e9c:	f004 fb9a 	bl	80085d4 <HAL_TIM_Base_Init>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003ea6:	f000 fa49 	bl	800433c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003eb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4827      	ldr	r0, [pc, #156]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003eb8:	f004 fcf6 	bl	80088a8 <HAL_TIM_ConfigClockSource>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003ec2:	f000 fa3b 	bl	800433c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ec6:	4823      	ldr	r0, [pc, #140]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003ec8:	f004 fbd3 	bl	8008672 <HAL_TIM_PWM_Init>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003ed2:	f000 fa33 	bl	800433c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ede:	f107 0320 	add.w	r3, r7, #32
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	481b      	ldr	r0, [pc, #108]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003ee6:	f005 f891 	bl	800900c <HAL_TIMEx_MasterConfigSynchronization>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003ef0:	f000 fa24 	bl	800433c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ef4:	2360      	movs	r3, #96	; 0x60
 8003ef6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f04:	1d3b      	adds	r3, r7, #4
 8003f06:	2204      	movs	r2, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4812      	ldr	r0, [pc, #72]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003f0c:	f004 fc0a 	bl	8008724 <HAL_TIM_PWM_ConfigChannel>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003f16:	f000 fa11 	bl	800433c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f1a:	1d3b      	adds	r3, r7, #4
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	4619      	mov	r1, r3
 8003f20:	480c      	ldr	r0, [pc, #48]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003f22:	f004 fbff 	bl	8008724 <HAL_TIM_PWM_ConfigChannel>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003f2c:	f000 fa06 	bl	800433c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003f30:	1d3b      	adds	r3, r7, #4
 8003f32:	220c      	movs	r2, #12
 8003f34:	4619      	mov	r1, r3
 8003f36:	4807      	ldr	r0, [pc, #28]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003f38:	f004 fbf4 	bl	8008724 <HAL_TIM_PWM_ConfigChannel>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8003f42:	f000 f9fb 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003f46:	4803      	ldr	r0, [pc, #12]	; (8003f54 <MX_TIM3_Init+0x110>)
 8003f48:	f000 fbc8 	bl	80046dc <HAL_TIM_MspPostInit>

}
 8003f4c:	bf00      	nop
 8003f4e:	3738      	adds	r7, #56	; 0x38
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20002b14 	.word	0x20002b14
 8003f58:	40000400 	.word	0x40000400

08003f5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f62:	f107 0308 	add.w	r3, r7, #8
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	605a      	str	r2, [r3, #4]
 8003f6c:	609a      	str	r2, [r3, #8]
 8003f6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f70:	463b      	mov	r3, r7
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003f78:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <MX_TIM5_Init+0x94>)
 8003f7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ff4 <MX_TIM5_Init+0x98>)
 8003f7c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003f7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <MX_TIM5_Init+0x94>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <MX_TIM5_Init+0x94>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003f8a:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <MX_TIM5_Init+0x94>)
 8003f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f90:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f92:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <MX_TIM5_Init+0x94>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f98:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <MX_TIM5_Init+0x94>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003f9e:	4814      	ldr	r0, [pc, #80]	; (8003ff0 <MX_TIM5_Init+0x94>)
 8003fa0:	f004 fb18 	bl	80085d4 <HAL_TIM_Base_Init>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003faa:	f000 f9c7 	bl	800433c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003fb4:	f107 0308 	add.w	r3, r7, #8
 8003fb8:	4619      	mov	r1, r3
 8003fba:	480d      	ldr	r0, [pc, #52]	; (8003ff0 <MX_TIM5_Init+0x94>)
 8003fbc:	f004 fc74 	bl	80088a8 <HAL_TIM_ConfigClockSource>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003fc6:	f000 f9b9 	bl	800433c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003fd2:	463b      	mov	r3, r7
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4806      	ldr	r0, [pc, #24]	; (8003ff0 <MX_TIM5_Init+0x94>)
 8003fd8:	f005 f818 	bl	800900c <HAL_TIMEx_MasterConfigSynchronization>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003fe2:	f000 f9ab 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003fe6:	bf00      	nop
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20002b5c 	.word	0x20002b5c
 8003ff4:	40000c00 	.word	0x40000c00

08003ff8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <MX_USART1_UART_Init+0x4c>)
 8003ffe:	4a12      	ldr	r2, [pc, #72]	; (8004048 <MX_USART1_UART_Init+0x50>)
 8004000:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004002:	4b10      	ldr	r3, [pc, #64]	; (8004044 <MX_USART1_UART_Init+0x4c>)
 8004004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004008:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800400a:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <MX_USART1_UART_Init+0x4c>)
 800400c:	2200      	movs	r2, #0
 800400e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <MX_USART1_UART_Init+0x4c>)
 8004012:	2200      	movs	r2, #0
 8004014:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004016:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <MX_USART1_UART_Init+0x4c>)
 8004018:	2200      	movs	r2, #0
 800401a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800401c:	4b09      	ldr	r3, [pc, #36]	; (8004044 <MX_USART1_UART_Init+0x4c>)
 800401e:	220c      	movs	r2, #12
 8004020:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004022:	4b08      	ldr	r3, [pc, #32]	; (8004044 <MX_USART1_UART_Init+0x4c>)
 8004024:	2200      	movs	r2, #0
 8004026:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <MX_USART1_UART_Init+0x4c>)
 800402a:	2200      	movs	r2, #0
 800402c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800402e:	4805      	ldr	r0, [pc, #20]	; (8004044 <MX_USART1_UART_Init+0x4c>)
 8004030:	f005 f868 	bl	8009104 <HAL_UART_Init>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800403a:	f000 f97f 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20002ba4 	.word	0x20002ba4
 8004048:	40011000 	.word	0x40011000

0800404c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004050:	4b11      	ldr	r3, [pc, #68]	; (8004098 <MX_USART2_UART_Init+0x4c>)
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <MX_USART2_UART_Init+0x50>)
 8004054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <MX_USART2_UART_Init+0x4c>)
 8004058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800405c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800405e:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <MX_USART2_UART_Init+0x4c>)
 8004060:	2200      	movs	r2, #0
 8004062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <MX_USART2_UART_Init+0x4c>)
 8004066:	2200      	movs	r2, #0
 8004068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <MX_USART2_UART_Init+0x4c>)
 800406c:	2200      	movs	r2, #0
 800406e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004070:	4b09      	ldr	r3, [pc, #36]	; (8004098 <MX_USART2_UART_Init+0x4c>)
 8004072:	220c      	movs	r2, #12
 8004074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <MX_USART2_UART_Init+0x4c>)
 8004078:	2200      	movs	r2, #0
 800407a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <MX_USART2_UART_Init+0x4c>)
 800407e:	2200      	movs	r2, #0
 8004080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004082:	4805      	ldr	r0, [pc, #20]	; (8004098 <MX_USART2_UART_Init+0x4c>)
 8004084:	f005 f83e 	bl	8009104 <HAL_UART_Init>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800408e:	f000 f955 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20002be8 	.word	0x20002be8
 800409c:	40004400 	.word	0x40004400

080040a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <MX_USART3_UART_Init+0x4c>)
 80040a6:	4a12      	ldr	r2, [pc, #72]	; (80040f0 <MX_USART3_UART_Init+0x50>)
 80040a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <MX_USART3_UART_Init+0x4c>)
 80040ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80040b2:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <MX_USART3_UART_Init+0x4c>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <MX_USART3_UART_Init+0x4c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80040be:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <MX_USART3_UART_Init+0x4c>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <MX_USART3_UART_Init+0x4c>)
 80040c6:	220c      	movs	r2, #12
 80040c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <MX_USART3_UART_Init+0x4c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <MX_USART3_UART_Init+0x4c>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80040d6:	4805      	ldr	r0, [pc, #20]	; (80040ec <MX_USART3_UART_Init+0x4c>)
 80040d8:	f005 f814 	bl	8009104 <HAL_UART_Init>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80040e2:	f000 f92b 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20002c2c 	.word	0x20002c2c
 80040f0:	40004800 	.word	0x40004800

080040f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <MX_USART6_UART_Init+0x4c>)
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <MX_USART6_UART_Init+0x50>)
 80040fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <MX_USART6_UART_Init+0x4c>)
 8004100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004104:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004106:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <MX_USART6_UART_Init+0x4c>)
 8004108:	2200      	movs	r2, #0
 800410a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800410c:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <MX_USART6_UART_Init+0x4c>)
 800410e:	2200      	movs	r2, #0
 8004110:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004112:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <MX_USART6_UART_Init+0x4c>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004118:	4b09      	ldr	r3, [pc, #36]	; (8004140 <MX_USART6_UART_Init+0x4c>)
 800411a:	220c      	movs	r2, #12
 800411c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <MX_USART6_UART_Init+0x4c>)
 8004120:	2200      	movs	r2, #0
 8004122:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <MX_USART6_UART_Init+0x4c>)
 8004126:	2200      	movs	r2, #0
 8004128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800412a:	4805      	ldr	r0, [pc, #20]	; (8004140 <MX_USART6_UART_Init+0x4c>)
 800412c:	f004 ffea 	bl	8009104 <HAL_UART_Init>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004136:	f000 f901 	bl	800433c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20002c70 	.word	0x20002c70
 8004144:	40011400 	.word	0x40011400

08004148 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	609a      	str	r2, [r3, #8]
 800416a:	60da      	str	r2, [r3, #12]
 800416c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	4b6e      	ldr	r3, [pc, #440]	; (800432c <MX_GPIO_Init+0x1d4>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	4a6d      	ldr	r2, [pc, #436]	; (800432c <MX_GPIO_Init+0x1d4>)
 8004178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800417c:	6313      	str	r3, [r2, #48]	; 0x30
 800417e:	4b6b      	ldr	r3, [pc, #428]	; (800432c <MX_GPIO_Init+0x1d4>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	4b67      	ldr	r3, [pc, #412]	; (800432c <MX_GPIO_Init+0x1d4>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	4a66      	ldr	r2, [pc, #408]	; (800432c <MX_GPIO_Init+0x1d4>)
 8004194:	f043 0304 	orr.w	r3, r3, #4
 8004198:	6313      	str	r3, [r2, #48]	; 0x30
 800419a:	4b64      	ldr	r3, [pc, #400]	; (800432c <MX_GPIO_Init+0x1d4>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	4b60      	ldr	r3, [pc, #384]	; (800432c <MX_GPIO_Init+0x1d4>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	4a5f      	ldr	r2, [pc, #380]	; (800432c <MX_GPIO_Init+0x1d4>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	6313      	str	r3, [r2, #48]	; 0x30
 80041b6:	4b5d      	ldr	r3, [pc, #372]	; (800432c <MX_GPIO_Init+0x1d4>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	4b59      	ldr	r3, [pc, #356]	; (800432c <MX_GPIO_Init+0x1d4>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	4a58      	ldr	r2, [pc, #352]	; (800432c <MX_GPIO_Init+0x1d4>)
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	6313      	str	r3, [r2, #48]	; 0x30
 80041d2:	4b56      	ldr	r3, [pc, #344]	; (800432c <MX_GPIO_Init+0x1d4>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	607b      	str	r3, [r7, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 80041de:	2200      	movs	r2, #0
 80041e0:	f248 0103 	movw	r1, #32771	; 0x8003
 80041e4:	4852      	ldr	r0, [pc, #328]	; (8004330 <MX_GPIO_Init+0x1d8>)
 80041e6:	f001 fb1d 	bl	8005824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80041ea:	2201      	movs	r2, #1
 80041ec:	2110      	movs	r1, #16
 80041ee:	4850      	ldr	r0, [pc, #320]	; (8004330 <MX_GPIO_Init+0x1d8>)
 80041f0:	f001 fb18 	bl	8005824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80041f4:	2200      	movs	r2, #0
 80041f6:	2120      	movs	r1, #32
 80041f8:	484e      	ldr	r0, [pc, #312]	; (8004334 <MX_GPIO_Init+0x1dc>)
 80041fa:	f001 fb13 	bl	8005824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 80041fe:	2200      	movs	r2, #0
 8004200:	2147      	movs	r1, #71	; 0x47
 8004202:	484d      	ldr	r0, [pc, #308]	; (8004338 <MX_GPIO_Init+0x1e0>)
 8004204:	f001 fb0e 	bl	8005824 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8004208:	2313      	movs	r3, #19
 800420a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800420c:	2303      	movs	r3, #3
 800420e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004210:	2300      	movs	r3, #0
 8004212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004214:	f107 0314 	add.w	r3, r7, #20
 8004218:	4619      	mov	r1, r3
 800421a:	4846      	ldr	r0, [pc, #280]	; (8004334 <MX_GPIO_Init+0x1dc>)
 800421c:	f001 f966 	bl	80054ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 8004220:	f248 0303 	movw	r3, #32771	; 0x8003
 8004224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004226:	2301      	movs	r3, #1
 8004228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422e:	2300      	movs	r3, #0
 8004230:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004232:	f107 0314 	add.w	r3, r7, #20
 8004236:	4619      	mov	r1, r3
 8004238:	483d      	ldr	r0, [pc, #244]	; (8004330 <MX_GPIO_Init+0x1d8>)
 800423a:	f001 f957 	bl	80054ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800423e:	2310      	movs	r3, #16
 8004240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004242:	2301      	movs	r3, #1
 8004244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800424a:	2301      	movs	r3, #1
 800424c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800424e:	f107 0314 	add.w	r3, r7, #20
 8004252:	4619      	mov	r1, r3
 8004254:	4836      	ldr	r0, [pc, #216]	; (8004330 <MX_GPIO_Init+0x1d8>)
 8004256:	f001 f949 	bl	80054ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800425a:	2320      	movs	r3, #32
 800425c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800425e:	2301      	movs	r3, #1
 8004260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004266:	2300      	movs	r3, #0
 8004268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800426a:	f107 0314 	add.w	r3, r7, #20
 800426e:	4619      	mov	r1, r3
 8004270:	4830      	ldr	r0, [pc, #192]	; (8004334 <MX_GPIO_Init+0x1dc>)
 8004272:	f001 f93b 	bl	80054ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ON_Pin PB1 PB2 PB6 */
  GPIO_InitStruct.Pin = LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8004276:	2347      	movs	r3, #71	; 0x47
 8004278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800427a:	2301      	movs	r3, #1
 800427c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004282:	2300      	movs	r3, #0
 8004284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004286:	f107 0314 	add.w	r3, r7, #20
 800428a:	4619      	mov	r1, r3
 800428c:	482a      	ldr	r0, [pc, #168]	; (8004338 <MX_GPIO_Init+0x1e0>)
 800428e:	f001 f92d 	bl	80054ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004292:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004298:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800429c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042a2:	f107 0314 	add.w	r3, r7, #20
 80042a6:	4619      	mov	r1, r3
 80042a8:	4823      	ldr	r0, [pc, #140]	; (8004338 <MX_GPIO_Init+0x1e0>)
 80042aa:	f001 f91f 	bl	80054ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80042ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80042b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80042b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042be:	f107 0314 	add.w	r3, r7, #20
 80042c2:	4619      	mov	r1, r3
 80042c4:	481a      	ldr	r0, [pc, #104]	; (8004330 <MX_GPIO_Init+0x1d8>)
 80042c6:	f001 f911 	bl	80054ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80042ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80042ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d0:	2302      	movs	r3, #2
 80042d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d8:	2303      	movs	r3, #3
 80042da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80042dc:	230a      	movs	r3, #10
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042e0:	f107 0314 	add.w	r3, r7, #20
 80042e4:	4619      	mov	r1, r3
 80042e6:	4812      	ldr	r0, [pc, #72]	; (8004330 <MX_GPIO_Init+0x1d8>)
 80042e8:	f001 f900 	bl	80054ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80042ec:	2310      	movs	r3, #16
 80042ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042f8:	f107 0314 	add.w	r3, r7, #20
 80042fc:	4619      	mov	r1, r3
 80042fe:	480e      	ldr	r0, [pc, #56]	; (8004338 <MX_GPIO_Init+0x1e0>)
 8004300:	f001 f8f4 	bl	80054ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004304:	2200      	movs	r2, #0
 8004306:	2100      	movs	r1, #0
 8004308:	2017      	movs	r0, #23
 800430a:	f001 f89c 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800430e:	2017      	movs	r0, #23
 8004310:	f001 f8b5 	bl	800547e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004314:	2200      	movs	r2, #0
 8004316:	2100      	movs	r1, #0
 8004318:	2028      	movs	r0, #40	; 0x28
 800431a:	f001 f894 	bl	8005446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800431e:	2028      	movs	r0, #40	; 0x28
 8004320:	f001 f8ad 	bl	800547e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004324:	bf00      	nop
 8004326:	3728      	adds	r7, #40	; 0x28
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	40020000 	.word	0x40020000
 8004334:	40020800 	.word	0x40020800
 8004338:	40020400 	.word	0x40020400

0800433c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004340:	b672      	cpsid	i
}
 8004342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004344:	e7fe      	b.n	8004344 <Error_Handler+0x8>
	...

08004348 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <HAL_MspInit+0x4c>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	4a0f      	ldr	r2, [pc, #60]	; (8004394 <HAL_MspInit+0x4c>)
 8004358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800435c:	6453      	str	r3, [r2, #68]	; 0x44
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <HAL_MspInit+0x4c>)
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_MspInit+0x4c>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	4a08      	ldr	r2, [pc, #32]	; (8004394 <HAL_MspInit+0x4c>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_MspInit+0x4c>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800

08004398 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a0:	f107 0314 	add.w	r3, r7, #20
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a17      	ldr	r2, [pc, #92]	; (8004414 <HAL_ADC_MspInit+0x7c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d127      	bne.n	800440a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	4b16      	ldr	r3, [pc, #88]	; (8004418 <HAL_ADC_MspInit+0x80>)
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	4a15      	ldr	r2, [pc, #84]	; (8004418 <HAL_ADC_MspInit+0x80>)
 80043c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043c8:	6453      	str	r3, [r2, #68]	; 0x44
 80043ca:	4b13      	ldr	r3, [pc, #76]	; (8004418 <HAL_ADC_MspInit+0x80>)
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <HAL_ADC_MspInit+0x80>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <HAL_ADC_MspInit+0x80>)
 80043e0:	f043 0304 	orr.w	r3, r3, #4
 80043e4:	6313      	str	r3, [r2, #48]	; 0x30
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <HAL_ADC_MspInit+0x80>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80043f2:	230c      	movs	r3, #12
 80043f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043f6:	2303      	movs	r3, #3
 80043f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043fe:	f107 0314 	add.w	r3, r7, #20
 8004402:	4619      	mov	r1, r3
 8004404:	4805      	ldr	r0, [pc, #20]	; (800441c <HAL_ADC_MspInit+0x84>)
 8004406:	f001 f871 	bl	80054ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800440a:	bf00      	nop
 800440c:	3728      	adds	r7, #40	; 0x28
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40012200 	.word	0x40012200
 8004418:	40023800 	.word	0x40023800
 800441c:	40020800 	.word	0x40020800

08004420 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a0b      	ldr	r2, [pc, #44]	; (800445c <HAL_CRC_MspInit+0x3c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d10d      	bne.n	800444e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <HAL_CRC_MspInit+0x40>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	4a09      	ldr	r2, [pc, #36]	; (8004460 <HAL_CRC_MspInit+0x40>)
 800443c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004440:	6313      	str	r3, [r2, #48]	; 0x30
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <HAL_CRC_MspInit+0x40>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40023000 	.word	0x40023000
 8004460:	40023800 	.word	0x40023800

08004464 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446c:	f107 031c 	add.w	r3, r7, #28
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	60da      	str	r2, [r3, #12]
 800447a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a33      	ldr	r2, [pc, #204]	; (8004550 <HAL_I2C_MspInit+0xec>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d12d      	bne.n	80044e2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	4b32      	ldr	r3, [pc, #200]	; (8004554 <HAL_I2C_MspInit+0xf0>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	4a31      	ldr	r2, [pc, #196]	; (8004554 <HAL_I2C_MspInit+0xf0>)
 8004490:	f043 0302 	orr.w	r3, r3, #2
 8004494:	6313      	str	r3, [r2, #48]	; 0x30
 8004496:	4b2f      	ldr	r3, [pc, #188]	; (8004554 <HAL_I2C_MspInit+0xf0>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044a8:	2312      	movs	r3, #18
 80044aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b0:	2303      	movs	r3, #3
 80044b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044b4:	2304      	movs	r3, #4
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b8:	f107 031c 	add.w	r3, r7, #28
 80044bc:	4619      	mov	r1, r3
 80044be:	4826      	ldr	r0, [pc, #152]	; (8004558 <HAL_I2C_MspInit+0xf4>)
 80044c0:	f001 f814 	bl	80054ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	4b22      	ldr	r3, [pc, #136]	; (8004554 <HAL_I2C_MspInit+0xf0>)
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	4a21      	ldr	r2, [pc, #132]	; (8004554 <HAL_I2C_MspInit+0xf0>)
 80044ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044d2:	6413      	str	r3, [r2, #64]	; 0x40
 80044d4:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <HAL_I2C_MspInit+0xf0>)
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80044e0:	e031      	b.n	8004546 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1d      	ldr	r2, [pc, #116]	; (800455c <HAL_I2C_MspInit+0xf8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d12c      	bne.n	8004546 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	4b18      	ldr	r3, [pc, #96]	; (8004554 <HAL_I2C_MspInit+0xf0>)
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	4a17      	ldr	r2, [pc, #92]	; (8004554 <HAL_I2C_MspInit+0xf0>)
 80044f6:	f043 0302 	orr.w	r3, r3, #2
 80044fa:	6313      	str	r3, [r2, #48]	; 0x30
 80044fc:	4b15      	ldr	r3, [pc, #84]	; (8004554 <HAL_I2C_MspInit+0xf0>)
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004508:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800450c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800450e:	2312      	movs	r3, #18
 8004510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004512:	2300      	movs	r3, #0
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004516:	2303      	movs	r3, #3
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800451a:	2304      	movs	r3, #4
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451e:	f107 031c 	add.w	r3, r7, #28
 8004522:	4619      	mov	r1, r3
 8004524:	480c      	ldr	r0, [pc, #48]	; (8004558 <HAL_I2C_MspInit+0xf4>)
 8004526:	f000 ffe1 	bl	80054ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_I2C_MspInit+0xf0>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	4a08      	ldr	r2, [pc, #32]	; (8004554 <HAL_I2C_MspInit+0xf0>)
 8004534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004538:	6413      	str	r3, [r2, #64]	; 0x40
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_I2C_MspInit+0xf0>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
}
 8004546:	bf00      	nop
 8004548:	3730      	adds	r7, #48	; 0x30
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40005400 	.word	0x40005400
 8004554:	40023800 	.word	0x40023800
 8004558:	40020400 	.word	0x40020400
 800455c:	40005800 	.word	0x40005800

08004560 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004568:	f107 0308 	add.w	r3, r7, #8
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <HAL_RTC_MspInit+0x4c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d111      	bne.n	80045a4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004580:	2302      	movs	r3, #2
 8004582:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004588:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800458a:	f107 0308 	add.w	r3, r7, #8
 800458e:	4618      	mov	r0, r3
 8004590:	f003 fa12 	bl	80079b8 <HAL_RCCEx_PeriphCLKConfig>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800459a:	f7ff fecf 	bl	800433c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <HAL_RTC_MspInit+0x50>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80045a4:	bf00      	nop
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40002800 	.word	0x40002800
 80045b0:	42470e3c 	.word	0x42470e3c

080045b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045bc:	f107 0314 	add.w	r3, r7, #20
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	60da      	str	r2, [r3, #12]
 80045ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a19      	ldr	r2, [pc, #100]	; (8004638 <HAL_SPI_MspInit+0x84>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d12b      	bne.n	800462e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	4b18      	ldr	r3, [pc, #96]	; (800463c <HAL_SPI_MspInit+0x88>)
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	4a17      	ldr	r2, [pc, #92]	; (800463c <HAL_SPI_MspInit+0x88>)
 80045e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045e4:	6453      	str	r3, [r2, #68]	; 0x44
 80045e6:	4b15      	ldr	r3, [pc, #84]	; (800463c <HAL_SPI_MspInit+0x88>)
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	4b11      	ldr	r3, [pc, #68]	; (800463c <HAL_SPI_MspInit+0x88>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	4a10      	ldr	r2, [pc, #64]	; (800463c <HAL_SPI_MspInit+0x88>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	6313      	str	r3, [r2, #48]	; 0x30
 8004602:	4b0e      	ldr	r3, [pc, #56]	; (800463c <HAL_SPI_MspInit+0x88>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800460e:	23e0      	movs	r3, #224	; 0xe0
 8004610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004612:	2302      	movs	r3, #2
 8004614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461a:	2303      	movs	r3, #3
 800461c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800461e:	2305      	movs	r3, #5
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004622:	f107 0314 	add.w	r3, r7, #20
 8004626:	4619      	mov	r1, r3
 8004628:	4805      	ldr	r0, [pc, #20]	; (8004640 <HAL_SPI_MspInit+0x8c>)
 800462a:	f000 ff5f 	bl	80054ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800462e:	bf00      	nop
 8004630:	3728      	adds	r7, #40	; 0x28
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40013000 	.word	0x40013000
 800463c:	40023800 	.word	0x40023800
 8004640:	40020000 	.word	0x40020000

08004644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004654:	d10e      	bne.n	8004674 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <HAL_TIM_Base_MspInit+0x8c>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	4a1c      	ldr	r2, [pc, #112]	; (80046d0 <HAL_TIM_Base_MspInit+0x8c>)
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	6413      	str	r3, [r2, #64]	; 0x40
 8004666:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <HAL_TIM_Base_MspInit+0x8c>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004672:	e026      	b.n	80046c2 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a16      	ldr	r2, [pc, #88]	; (80046d4 <HAL_TIM_Base_MspInit+0x90>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d10e      	bne.n	800469c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	4b13      	ldr	r3, [pc, #76]	; (80046d0 <HAL_TIM_Base_MspInit+0x8c>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	4a12      	ldr	r2, [pc, #72]	; (80046d0 <HAL_TIM_Base_MspInit+0x8c>)
 8004688:	f043 0302 	orr.w	r3, r3, #2
 800468c:	6413      	str	r3, [r2, #64]	; 0x40
 800468e:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <HAL_TIM_Base_MspInit+0x8c>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	693b      	ldr	r3, [r7, #16]
}
 800469a:	e012      	b.n	80046c2 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0d      	ldr	r2, [pc, #52]	; (80046d8 <HAL_TIM_Base_MspInit+0x94>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d10d      	bne.n	80046c2 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <HAL_TIM_Base_MspInit+0x8c>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	4a08      	ldr	r2, [pc, #32]	; (80046d0 <HAL_TIM_Base_MspInit+0x8c>)
 80046b0:	f043 0308 	orr.w	r3, r3, #8
 80046b4:	6413      	str	r3, [r2, #64]	; 0x40
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_TIM_Base_MspInit+0x8c>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40000c00 	.word	0x40000c00

080046dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	; 0x28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e4:	f107 0314 	add.w	r3, r7, #20
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	609a      	str	r2, [r3, #8]
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a21      	ldr	r2, [pc, #132]	; (8004780 <HAL_TIM_MspPostInit+0xa4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d13c      	bne.n	8004778 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <HAL_TIM_MspPostInit+0xa8>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <HAL_TIM_MspPostInit+0xa8>)
 8004708:	f043 0304 	orr.w	r3, r3, #4
 800470c:	6313      	str	r3, [r2, #48]	; 0x30
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <HAL_TIM_MspPostInit+0xa8>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	4b19      	ldr	r3, [pc, #100]	; (8004784 <HAL_TIM_MspPostInit+0xa8>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	4a18      	ldr	r2, [pc, #96]	; (8004784 <HAL_TIM_MspPostInit+0xa8>)
 8004724:	f043 0302 	orr.w	r3, r3, #2
 8004728:	6313      	str	r3, [r2, #48]	; 0x30
 800472a:	4b16      	ldr	r3, [pc, #88]	; (8004784 <HAL_TIM_MspPostInit+0xa8>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004736:	f44f 7340 	mov.w	r3, #768	; 0x300
 800473a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473c:	2302      	movs	r3, #2
 800473e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004744:	2300      	movs	r3, #0
 8004746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004748:	2302      	movs	r3, #2
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	4619      	mov	r1, r3
 8004752:	480d      	ldr	r0, [pc, #52]	; (8004788 <HAL_TIM_MspPostInit+0xac>)
 8004754:	f000 feca 	bl	80054ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004758:	2320      	movs	r3, #32
 800475a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475c:	2302      	movs	r3, #2
 800475e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004760:	2300      	movs	r3, #0
 8004762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004764:	2300      	movs	r3, #0
 8004766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004768:	2302      	movs	r3, #2
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	4619      	mov	r1, r3
 8004772:	4806      	ldr	r0, [pc, #24]	; (800478c <HAL_TIM_MspPostInit+0xb0>)
 8004774:	f000 feba 	bl	80054ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004778:	bf00      	nop
 800477a:	3728      	adds	r7, #40	; 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40000400 	.word	0x40000400
 8004784:	40023800 	.word	0x40023800
 8004788:	40020800 	.word	0x40020800
 800478c:	40020400 	.word	0x40020400

08004790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b090      	sub	sp, #64	; 0x40
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a74      	ldr	r2, [pc, #464]	; (8004980 <HAL_UART_MspInit+0x1f0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d14b      	bne.n	800484a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b6:	4b73      	ldr	r3, [pc, #460]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	4a72      	ldr	r2, [pc, #456]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80047bc:	f043 0310 	orr.w	r3, r3, #16
 80047c0:	6453      	str	r3, [r2, #68]	; 0x44
 80047c2:	4b70      	ldr	r3, [pc, #448]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	4b6c      	ldr	r3, [pc, #432]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	4a6b      	ldr	r2, [pc, #428]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	6313      	str	r3, [r2, #48]	; 0x30
 80047de:	4b69      	ldr	r3, [pc, #420]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	623b      	str	r3, [r7, #32]
 80047ee:	4b65      	ldr	r3, [pc, #404]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	4a64      	ldr	r2, [pc, #400]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80047f4:	f043 0302 	orr.w	r3, r3, #2
 80047f8:	6313      	str	r3, [r2, #48]	; 0x30
 80047fa:	4b62      	ldr	r3, [pc, #392]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480c:	2302      	movs	r3, #2
 800480e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	2300      	movs	r3, #0
 8004812:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004814:	2303      	movs	r3, #3
 8004816:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004818:	2307      	movs	r3, #7
 800481a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004820:	4619      	mov	r1, r3
 8004822:	4859      	ldr	r0, [pc, #356]	; (8004988 <HAL_UART_MspInit+0x1f8>)
 8004824:	f000 fe62 	bl	80054ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800482c:	2302      	movs	r3, #2
 800482e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004830:	2300      	movs	r3, #0
 8004832:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004834:	2303      	movs	r3, #3
 8004836:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004838:	2307      	movs	r3, #7
 800483a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800483c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004840:	4619      	mov	r1, r3
 8004842:	4852      	ldr	r0, [pc, #328]	; (800498c <HAL_UART_MspInit+0x1fc>)
 8004844:	f000 fe52 	bl	80054ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004848:	e095      	b.n	8004976 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a50      	ldr	r2, [pc, #320]	; (8004990 <HAL_UART_MspInit+0x200>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d12c      	bne.n	80048ae <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	4b4a      	ldr	r3, [pc, #296]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	4a49      	ldr	r2, [pc, #292]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 800485e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004862:	6413      	str	r3, [r2, #64]	; 0x40
 8004864:	4b47      	ldr	r3, [pc, #284]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486c:	61fb      	str	r3, [r7, #28]
 800486e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]
 8004874:	4b43      	ldr	r3, [pc, #268]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	4a42      	ldr	r2, [pc, #264]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	6313      	str	r3, [r2, #48]	; 0x30
 8004880:	4b40      	ldr	r3, [pc, #256]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800488c:	230c      	movs	r3, #12
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004890:	2302      	movs	r3, #2
 8004892:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004894:	2300      	movs	r3, #0
 8004896:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004898:	2303      	movs	r3, #3
 800489a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800489c:	2307      	movs	r3, #7
 800489e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048a4:	4619      	mov	r1, r3
 80048a6:	4838      	ldr	r0, [pc, #224]	; (8004988 <HAL_UART_MspInit+0x1f8>)
 80048a8:	f000 fe20 	bl	80054ec <HAL_GPIO_Init>
}
 80048ac:	e063      	b.n	8004976 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART3)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a38      	ldr	r2, [pc, #224]	; (8004994 <HAL_UART_MspInit+0x204>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d12d      	bne.n	8004914 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	4b31      	ldr	r3, [pc, #196]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	4a30      	ldr	r2, [pc, #192]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80048c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c6:	6413      	str	r3, [r2, #64]	; 0x40
 80048c8:	4b2e      	ldr	r3, [pc, #184]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	4b2a      	ldr	r3, [pc, #168]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	4a29      	ldr	r2, [pc, #164]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80048de:	f043 0304 	orr.w	r3, r3, #4
 80048e2:	6313      	str	r3, [r2, #48]	; 0x30
 80048e4:	4b27      	ldr	r3, [pc, #156]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80048f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f6:	2302      	movs	r3, #2
 80048f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048fe:	2303      	movs	r3, #3
 8004900:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004902:	2307      	movs	r3, #7
 8004904:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800490a:	4619      	mov	r1, r3
 800490c:	4822      	ldr	r0, [pc, #136]	; (8004998 <HAL_UART_MspInit+0x208>)
 800490e:	f000 fded 	bl	80054ec <HAL_GPIO_Init>
}
 8004912:	e030      	b.n	8004976 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART6)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a20      	ldr	r2, [pc, #128]	; (800499c <HAL_UART_MspInit+0x20c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d12b      	bne.n	8004976 <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART6_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	4b18      	ldr	r3, [pc, #96]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 8004924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004926:	4a17      	ldr	r2, [pc, #92]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 8004928:	f043 0320 	orr.w	r3, r3, #32
 800492c:	6453      	str	r3, [r2, #68]	; 0x44
 800492e:	4b15      	ldr	r3, [pc, #84]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	4a10      	ldr	r2, [pc, #64]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 8004944:	f043 0304 	orr.w	r3, r3, #4
 8004948:	6313      	str	r3, [r2, #48]	; 0x30
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <HAL_UART_MspInit+0x1f4>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004956:	23c0      	movs	r3, #192	; 0xc0
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800495a:	2302      	movs	r3, #2
 800495c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495e:	2300      	movs	r3, #0
 8004960:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004962:	2303      	movs	r3, #3
 8004964:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004966:	2308      	movs	r3, #8
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800496a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800496e:	4619      	mov	r1, r3
 8004970:	4809      	ldr	r0, [pc, #36]	; (8004998 <HAL_UART_MspInit+0x208>)
 8004972:	f000 fdbb 	bl	80054ec <HAL_GPIO_Init>
}
 8004976:	bf00      	nop
 8004978:	3740      	adds	r7, #64	; 0x40
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40011000 	.word	0x40011000
 8004984:	40023800 	.word	0x40023800
 8004988:	40020000 	.word	0x40020000
 800498c:	40020400 	.word	0x40020400
 8004990:	40004400 	.word	0x40004400
 8004994:	40004800 	.word	0x40004800
 8004998:	40020800 	.word	0x40020800
 800499c:	40011400 	.word	0x40011400

080049a0 <SDTimer_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80049a4:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <SDTimer_Handler+0x40>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d006      	beq.n	80049bc <SDTimer_Handler+0x1c>
    Timer1--;
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <SDTimer_Handler+0x40>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <SDTimer_Handler+0x40>)
 80049ba:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <SDTimer_Handler+0x44>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d006      	beq.n	80049d4 <SDTimer_Handler+0x34>
    Timer2--;
 80049c6:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <SDTimer_Handler+0x44>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <SDTimer_Handler+0x44>)
 80049d2:	701a      	strb	r2, [r3, #0]
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20002954 	.word	0x20002954
 80049e4:	20002956 	.word	0x20002956

080049e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049ec:	e7fe      	b.n	80049ec <NMI_Handler+0x4>

080049ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049ee:	b480      	push	{r7}
 80049f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049f2:	e7fe      	b.n	80049f2 <HardFault_Handler+0x4>

080049f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049f8:	e7fe      	b.n	80049f8 <MemManage_Handler+0x4>

080049fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049fa:	b480      	push	{r7}
 80049fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049fe:	e7fe      	b.n	80049fe <BusFault_Handler+0x4>

08004a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a04:	e7fe      	b.n	8004a04 <UsageFault_Handler+0x4>

08004a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a06:	b480      	push	{r7}
 8004a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a18:	bf00      	nop
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a22:	b480      	push	{r7}
 8004a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8004a34:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <SysTick_Handler+0x30>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	4b08      	ldr	r3, [pc, #32]	; (8004a60 <SysTick_Handler+0x30>)
 8004a40:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8004a42:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <SysTick_Handler+0x30>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b09      	cmp	r3, #9
 8004a4a:	d904      	bls.n	8004a56 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <SysTick_Handler+0x30>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8004a52:	f7ff ffa5 	bl	80049a0 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a56:	f000 f975 	bl	8004d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20002cb4 	.word	0x20002cb4

08004a64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004a68:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004a6c:	f000 fef4 	bl	8005858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a70:	bf00      	nop
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004a78:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004a7c:	f000 feec 	bl	8005858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004a80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004a84:	f000 fee8 	bl	8005858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004a88:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004a8c:	f000 fee4 	bl	8005858 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004a90:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a94:	f000 fee0 	bl	8005858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a98:	bf00      	nop
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  return 1;
 8004aa0:	2301      	movs	r3, #1
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <_kill>:

int _kill(int pid, int sig)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004ab6:	f00e faf3 	bl	80130a0 <__errno>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2216      	movs	r2, #22
 8004abe:	601a      	str	r2, [r3, #0]
  return -1;
 8004ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <_exit>:

void _exit (int status)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ad4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff ffe7 	bl	8004aac <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ade:	e7fe      	b.n	8004ade <_exit+0x12>

08004ae0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	e00a      	b.n	8004b08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004af2:	f3af 8000 	nop.w
 8004af6:	4601      	mov	r1, r0
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	60ba      	str	r2, [r7, #8]
 8004afe:	b2ca      	uxtb	r2, r1
 8004b00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	3301      	adds	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	dbf0      	blt.n	8004af2 <_read+0x12>
  }

  return len;
 8004b10:	687b      	ldr	r3, [r7, #4]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b086      	sub	sp, #24
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e009      	b.n	8004b40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	60ba      	str	r2, [r7, #8]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	dbf1      	blt.n	8004b2c <_write+0x12>
  }
  return len;
 8004b48:	687b      	ldr	r3, [r7, #4]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <_close>:

int _close(int file)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b7a:	605a      	str	r2, [r3, #4]
  return 0;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <_isatty>:

int _isatty(int file)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b92:	2301      	movs	r3, #1
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bc4:	4a14      	ldr	r2, [pc, #80]	; (8004c18 <_sbrk+0x5c>)
 8004bc6:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <_sbrk+0x60>)
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bd0:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <_sbrk+0x64>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bd8:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <_sbrk+0x64>)
 8004bda:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <_sbrk+0x68>)
 8004bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bde:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <_sbrk+0x64>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4413      	add	r3, r2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d207      	bcs.n	8004bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bec:	f00e fa58 	bl	80130a0 <__errno>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	220c      	movs	r2, #12
 8004bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bfa:	e009      	b.n	8004c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bfc:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <_sbrk+0x64>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c02:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <_sbrk+0x64>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4413      	add	r3, r2
 8004c0a:	4a05      	ldr	r2, [pc, #20]	; (8004c20 <_sbrk+0x64>)
 8004c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20020000 	.word	0x20020000
 8004c1c:	00000400 	.word	0x00000400
 8004c20:	20002cb8 	.word	0x20002cb8
 8004c24:	20003048 	.word	0x20003048

08004c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c2c:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <SystemInit+0x20>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c32:	4a05      	ldr	r2, [pc, #20]	; (8004c48 <SystemInit+0x20>)
 8004c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c3c:	bf00      	nop
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	e000ed00 	.word	0xe000ed00

08004c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c50:	480d      	ldr	r0, [pc, #52]	; (8004c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c52:	490e      	ldr	r1, [pc, #56]	; (8004c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c54:	4a0e      	ldr	r2, [pc, #56]	; (8004c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c58:	e002      	b.n	8004c60 <LoopCopyDataInit>

08004c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c5e:	3304      	adds	r3, #4

08004c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c64:	d3f9      	bcc.n	8004c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c66:	4a0b      	ldr	r2, [pc, #44]	; (8004c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c68:	4c0b      	ldr	r4, [pc, #44]	; (8004c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c6c:	e001      	b.n	8004c72 <LoopFillZerobss>

08004c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c70:	3204      	adds	r2, #4

08004c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c74:	d3fb      	bcc.n	8004c6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c76:	f7ff ffd7 	bl	8004c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c7a:	f00e fa17 	bl	80130ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c7e:	f7fe feb3 	bl	80039e8 <main>
  bx  lr    
 8004c82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c8c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8004c90:	08018a40 	.word	0x08018a40
  ldr r2, =_sbss
 8004c94:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004c98:	20003048 	.word	0x20003048

08004c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c9c:	e7fe      	b.n	8004c9c <ADC_IRQHandler>
	...

08004ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ca4:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <HAL_Init+0x40>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a0d      	ldr	r2, [pc, #52]	; (8004ce0 <HAL_Init+0x40>)
 8004caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_Init+0x40>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a0a      	ldr	r2, [pc, #40]	; (8004ce0 <HAL_Init+0x40>)
 8004cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cbc:	4b08      	ldr	r3, [pc, #32]	; (8004ce0 <HAL_Init+0x40>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a07      	ldr	r2, [pc, #28]	; (8004ce0 <HAL_Init+0x40>)
 8004cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cc8:	2003      	movs	r0, #3
 8004cca:	f000 fbb1 	bl	8005430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cce:	200f      	movs	r0, #15
 8004cd0:	f000 f808 	bl	8004ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004cd4:	f7ff fb38 	bl	8004348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40023c00 	.word	0x40023c00

08004ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cec:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <HAL_InitTick+0x54>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <HAL_InitTick+0x58>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fbc9 	bl	800549a <HAL_SYSTICK_Config>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e00e      	b.n	8004d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b0f      	cmp	r3, #15
 8004d16:	d80a      	bhi.n	8004d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d18:	2200      	movs	r2, #0
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d20:	f000 fb91 	bl	8005446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d24:	4a06      	ldr	r2, [pc, #24]	; (8004d40 <HAL_InitTick+0x5c>)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e000      	b.n	8004d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20000008 	.word	0x20000008
 8004d3c:	20000010 	.word	0x20000010
 8004d40:	2000000c 	.word	0x2000000c

08004d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d48:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <HAL_IncTick+0x20>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <HAL_IncTick+0x24>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4413      	add	r3, r2
 8004d54:	4a04      	ldr	r2, [pc, #16]	; (8004d68 <HAL_IncTick+0x24>)
 8004d56:	6013      	str	r3, [r2, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000010 	.word	0x20000010
 8004d68:	20002cbc 	.word	0x20002cbc

08004d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d70:	4b03      	ldr	r3, [pc, #12]	; (8004d80 <HAL_GetTick+0x14>)
 8004d72:	681b      	ldr	r3, [r3, #0]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20002cbc 	.word	0x20002cbc

08004d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d8c:	f7ff ffee 	bl	8004d6c <HAL_GetTick>
 8004d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d9c:	d005      	beq.n	8004daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <HAL_Delay+0x44>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004daa:	bf00      	nop
 8004dac:	f7ff ffde 	bl	8004d6c <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d8f7      	bhi.n	8004dac <HAL_Delay+0x28>
  {
  }
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000010 	.word	0x20000010

08004dcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e033      	b.n	8004e4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff fad4 	bl	8004398 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f003 0310 	and.w	r3, r3, #16
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d118      	bne.n	8004e3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e12:	f023 0302 	bic.w	r3, r3, #2
 8004e16:	f043 0202 	orr.w	r2, r3, #2
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f93a 	bl	8005098 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f023 0303 	bic.w	r3, r3, #3
 8004e32:	f043 0201 	orr.w	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40
 8004e3a:	e001      	b.n	8004e40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x1c>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e105      	b.n	800507c <HAL_ADC_ConfigChannel+0x228>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b09      	cmp	r3, #9
 8004e7e:	d925      	bls.n	8004ecc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68d9      	ldr	r1, [r3, #12]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4613      	mov	r3, r2
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4413      	add	r3, r2
 8004e94:	3b1e      	subs	r3, #30
 8004e96:	2207      	movs	r2, #7
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43da      	mvns	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	400a      	ands	r2, r1
 8004ea4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68d9      	ldr	r1, [r3, #12]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	4603      	mov	r3, r0
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	4403      	add	r3, r0
 8004ebe:	3b1e      	subs	r3, #30
 8004ec0:	409a      	lsls	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	60da      	str	r2, [r3, #12]
 8004eca:	e022      	b.n	8004f12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6919      	ldr	r1, [r3, #16]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4613      	mov	r3, r2
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	4413      	add	r3, r2
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43da      	mvns	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	400a      	ands	r2, r1
 8004eee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6919      	ldr	r1, [r3, #16]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	4618      	mov	r0, r3
 8004f02:	4603      	mov	r3, r0
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	4403      	add	r3, r0
 8004f08:	409a      	lsls	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b06      	cmp	r3, #6
 8004f18:	d824      	bhi.n	8004f64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	3b05      	subs	r3, #5
 8004f2c:	221f      	movs	r2, #31
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43da      	mvns	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	400a      	ands	r2, r1
 8004f3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	4618      	mov	r0, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	3b05      	subs	r3, #5
 8004f56:	fa00 f203 	lsl.w	r2, r0, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	635a      	str	r2, [r3, #52]	; 0x34
 8004f62:	e04c      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b0c      	cmp	r3, #12
 8004f6a:	d824      	bhi.n	8004fb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3b23      	subs	r3, #35	; 0x23
 8004f7e:	221f      	movs	r2, #31
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	43da      	mvns	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	400a      	ands	r2, r1
 8004f8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	3b23      	subs	r3, #35	; 0x23
 8004fa8:	fa00 f203 	lsl.w	r2, r0, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8004fb4:	e023      	b.n	8004ffe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3b41      	subs	r3, #65	; 0x41
 8004fc8:	221f      	movs	r2, #31
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43da      	mvns	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	400a      	ands	r2, r1
 8004fd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	3b41      	subs	r3, #65	; 0x41
 8004ff2:	fa00 f203 	lsl.w	r2, r0, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ffe:	4b22      	ldr	r3, [pc, #136]	; (8005088 <HAL_ADC_ConfigChannel+0x234>)
 8005000:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a21      	ldr	r2, [pc, #132]	; (800508c <HAL_ADC_ConfigChannel+0x238>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d109      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x1cc>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b12      	cmp	r3, #18
 8005012:	d105      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a19      	ldr	r2, [pc, #100]	; (800508c <HAL_ADC_ConfigChannel+0x238>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d123      	bne.n	8005072 <HAL_ADC_ConfigChannel+0x21e>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b10      	cmp	r3, #16
 8005030:	d003      	beq.n	800503a <HAL_ADC_ConfigChannel+0x1e6>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b11      	cmp	r3, #17
 8005038:	d11b      	bne.n	8005072 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b10      	cmp	r3, #16
 800504c:	d111      	bne.n	8005072 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <HAL_ADC_ConfigChannel+0x23c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a10      	ldr	r2, [pc, #64]	; (8005094 <HAL_ADC_ConfigChannel+0x240>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	0c9a      	lsrs	r2, r3, #18
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005064:	e002      	b.n	800506c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	3b01      	subs	r3, #1
 800506a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f9      	bne.n	8005066 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	40012300 	.word	0x40012300
 800508c:	40012000 	.word	0x40012000
 8005090:	20000008 	.word	0x20000008
 8005094:	431bde83 	.word	0x431bde83

08005098 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050a0:	4b79      	ldr	r3, [pc, #484]	; (8005288 <ADC_Init+0x1f0>)
 80050a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	431a      	orrs	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6859      	ldr	r1, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	021a      	lsls	r2, r3, #8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80050f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6859      	ldr	r1, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6899      	ldr	r1, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	4a58      	ldr	r2, [pc, #352]	; (800528c <ADC_Init+0x1f4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d022      	beq.n	8005176 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800513e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6899      	ldr	r1, [r3, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005160:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6899      	ldr	r1, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	609a      	str	r2, [r3, #8]
 8005174:	e00f      	b.n	8005196 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005184:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005194:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0202 	bic.w	r2, r2, #2
 80051a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6899      	ldr	r1, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	7e1b      	ldrb	r3, [r3, #24]
 80051b0:	005a      	lsls	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01b      	beq.n	80051fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80051e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6859      	ldr	r1, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	3b01      	subs	r3, #1
 80051f0:	035a      	lsls	r2, r3, #13
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
 80051fa:	e007      	b.n	800520c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800520a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800521a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	3b01      	subs	r3, #1
 8005228:	051a      	lsls	r2, r3, #20
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6899      	ldr	r1, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800524e:	025a      	lsls	r2, r3, #9
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005266:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6899      	ldr	r1, [r3, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	029a      	lsls	r2, r3, #10
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	609a      	str	r2, [r3, #8]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40012300 	.word	0x40012300
 800528c:	0f000001 	.word	0x0f000001

08005290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052a0:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <__NVIC_SetPriorityGrouping+0x44>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052ac:	4013      	ands	r3, r2
 80052ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052c2:	4a04      	ldr	r2, [pc, #16]	; (80052d4 <__NVIC_SetPriorityGrouping+0x44>)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	60d3      	str	r3, [r2, #12]
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	e000ed00 	.word	0xe000ed00

080052d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052dc:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <__NVIC_GetPriorityGrouping+0x18>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	0a1b      	lsrs	r3, r3, #8
 80052e2:	f003 0307 	and.w	r3, r3, #7
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	e000ed00 	.word	0xe000ed00

080052f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005302:	2b00      	cmp	r3, #0
 8005304:	db0b      	blt.n	800531e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	f003 021f 	and.w	r2, r3, #31
 800530c:	4907      	ldr	r1, [pc, #28]	; (800532c <__NVIC_EnableIRQ+0x38>)
 800530e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	2001      	movs	r0, #1
 8005316:	fa00 f202 	lsl.w	r2, r0, r2
 800531a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	e000e100 	.word	0xe000e100

08005330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	6039      	str	r1, [r7, #0]
 800533a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800533c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005340:	2b00      	cmp	r3, #0
 8005342:	db0a      	blt.n	800535a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	490c      	ldr	r1, [pc, #48]	; (800537c <__NVIC_SetPriority+0x4c>)
 800534a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534e:	0112      	lsls	r2, r2, #4
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	440b      	add	r3, r1
 8005354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005358:	e00a      	b.n	8005370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	4908      	ldr	r1, [pc, #32]	; (8005380 <__NVIC_SetPriority+0x50>)
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	3b04      	subs	r3, #4
 8005368:	0112      	lsls	r2, r2, #4
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	440b      	add	r3, r1
 800536e:	761a      	strb	r2, [r3, #24]
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	e000e100 	.word	0xe000e100
 8005380:	e000ed00 	.word	0xe000ed00

08005384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005384:	b480      	push	{r7}
 8005386:	b089      	sub	sp, #36	; 0x24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f1c3 0307 	rsb	r3, r3, #7
 800539e:	2b04      	cmp	r3, #4
 80053a0:	bf28      	it	cs
 80053a2:	2304      	movcs	r3, #4
 80053a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3304      	adds	r3, #4
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	d902      	bls.n	80053b4 <NVIC_EncodePriority+0x30>
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	3b03      	subs	r3, #3
 80053b2:	e000      	b.n	80053b6 <NVIC_EncodePriority+0x32>
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	43da      	mvns	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	401a      	ands	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	fa01 f303 	lsl.w	r3, r1, r3
 80053d6:	43d9      	mvns	r1, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053dc:	4313      	orrs	r3, r2
         );
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3724      	adds	r7, #36	; 0x24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053fc:	d301      	bcc.n	8005402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053fe:	2301      	movs	r3, #1
 8005400:	e00f      	b.n	8005422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005402:	4a0a      	ldr	r2, [pc, #40]	; (800542c <SysTick_Config+0x40>)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3b01      	subs	r3, #1
 8005408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800540a:	210f      	movs	r1, #15
 800540c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005410:	f7ff ff8e 	bl	8005330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <SysTick_Config+0x40>)
 8005416:	2200      	movs	r2, #0
 8005418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800541a:	4b04      	ldr	r3, [pc, #16]	; (800542c <SysTick_Config+0x40>)
 800541c:	2207      	movs	r2, #7
 800541e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	e000e010 	.word	0xe000e010

08005430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff ff29 	bl	8005290 <__NVIC_SetPriorityGrouping>
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005446:	b580      	push	{r7, lr}
 8005448:	b086      	sub	sp, #24
 800544a:	af00      	add	r7, sp, #0
 800544c:	4603      	mov	r3, r0
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005458:	f7ff ff3e 	bl	80052d8 <__NVIC_GetPriorityGrouping>
 800545c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	6978      	ldr	r0, [r7, #20]
 8005464:	f7ff ff8e 	bl	8005384 <NVIC_EncodePriority>
 8005468:	4602      	mov	r2, r0
 800546a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800546e:	4611      	mov	r1, r2
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff ff5d 	bl	8005330 <__NVIC_SetPriority>
}
 8005476:	bf00      	nop
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	4603      	mov	r3, r0
 8005486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff ff31 	bl	80052f4 <__NVIC_EnableIRQ>
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff ffa2 	bl	80053ec <SysTick_Config>
 80054a8:	4603      	mov	r3, r0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e00e      	b.n	80054e2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	795b      	ldrb	r3, [r3, #5]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d105      	bne.n	80054da <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7fe ffa3 	bl	8004420 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054fe:	2300      	movs	r3, #0
 8005500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
 8005506:	e16b      	b.n	80057e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005508:	2201      	movs	r2, #1
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4013      	ands	r3, r2
 800551a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	429a      	cmp	r2, r3
 8005522:	f040 815a 	bne.w	80057da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b01      	cmp	r3, #1
 8005530:	d005      	beq.n	800553e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800553a:	2b02      	cmp	r3, #2
 800553c:	d130      	bne.n	80055a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	2203      	movs	r2, #3
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4313      	orrs	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005574:	2201      	movs	r2, #1
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4013      	ands	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	f003 0201 	and.w	r2, r3, #1
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4313      	orrs	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d017      	beq.n	80055dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	2203      	movs	r2, #3
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	43db      	mvns	r3, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4013      	ands	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d123      	bne.n	8005630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	08da      	lsrs	r2, r3, #3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3208      	adds	r2, #8
 80055f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	220f      	movs	r2, #15
 8005600:	fa02 f303 	lsl.w	r3, r2, r3
 8005604:	43db      	mvns	r3, r3
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	4013      	ands	r3, r2
 800560a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	4313      	orrs	r3, r2
 8005620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	08da      	lsrs	r2, r3, #3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3208      	adds	r2, #8
 800562a:	69b9      	ldr	r1, [r7, #24]
 800562c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	2203      	movs	r2, #3
 800563c:	fa02 f303 	lsl.w	r3, r2, r3
 8005640:	43db      	mvns	r3, r3
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	4013      	ands	r3, r2
 8005646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 0203 	and.w	r2, r3, #3
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4313      	orrs	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80b4 	beq.w	80057da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	4b60      	ldr	r3, [pc, #384]	; (80057f8 <HAL_GPIO_Init+0x30c>)
 8005678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567a:	4a5f      	ldr	r2, [pc, #380]	; (80057f8 <HAL_GPIO_Init+0x30c>)
 800567c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005680:	6453      	str	r3, [r2, #68]	; 0x44
 8005682:	4b5d      	ldr	r3, [pc, #372]	; (80057f8 <HAL_GPIO_Init+0x30c>)
 8005684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800568e:	4a5b      	ldr	r2, [pc, #364]	; (80057fc <HAL_GPIO_Init+0x310>)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	089b      	lsrs	r3, r3, #2
 8005694:	3302      	adds	r3, #2
 8005696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800569a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	220f      	movs	r2, #15
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	43db      	mvns	r3, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4013      	ands	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a52      	ldr	r2, [pc, #328]	; (8005800 <HAL_GPIO_Init+0x314>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d02b      	beq.n	8005712 <HAL_GPIO_Init+0x226>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a51      	ldr	r2, [pc, #324]	; (8005804 <HAL_GPIO_Init+0x318>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d025      	beq.n	800570e <HAL_GPIO_Init+0x222>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a50      	ldr	r2, [pc, #320]	; (8005808 <HAL_GPIO_Init+0x31c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d01f      	beq.n	800570a <HAL_GPIO_Init+0x21e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a4f      	ldr	r2, [pc, #316]	; (800580c <HAL_GPIO_Init+0x320>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d019      	beq.n	8005706 <HAL_GPIO_Init+0x21a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a4e      	ldr	r2, [pc, #312]	; (8005810 <HAL_GPIO_Init+0x324>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <HAL_GPIO_Init+0x216>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a4d      	ldr	r2, [pc, #308]	; (8005814 <HAL_GPIO_Init+0x328>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00d      	beq.n	80056fe <HAL_GPIO_Init+0x212>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a4c      	ldr	r2, [pc, #304]	; (8005818 <HAL_GPIO_Init+0x32c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d007      	beq.n	80056fa <HAL_GPIO_Init+0x20e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a4b      	ldr	r2, [pc, #300]	; (800581c <HAL_GPIO_Init+0x330>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d101      	bne.n	80056f6 <HAL_GPIO_Init+0x20a>
 80056f2:	2307      	movs	r3, #7
 80056f4:	e00e      	b.n	8005714 <HAL_GPIO_Init+0x228>
 80056f6:	2308      	movs	r3, #8
 80056f8:	e00c      	b.n	8005714 <HAL_GPIO_Init+0x228>
 80056fa:	2306      	movs	r3, #6
 80056fc:	e00a      	b.n	8005714 <HAL_GPIO_Init+0x228>
 80056fe:	2305      	movs	r3, #5
 8005700:	e008      	b.n	8005714 <HAL_GPIO_Init+0x228>
 8005702:	2304      	movs	r3, #4
 8005704:	e006      	b.n	8005714 <HAL_GPIO_Init+0x228>
 8005706:	2303      	movs	r3, #3
 8005708:	e004      	b.n	8005714 <HAL_GPIO_Init+0x228>
 800570a:	2302      	movs	r3, #2
 800570c:	e002      	b.n	8005714 <HAL_GPIO_Init+0x228>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <HAL_GPIO_Init+0x228>
 8005712:	2300      	movs	r3, #0
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	f002 0203 	and.w	r2, r2, #3
 800571a:	0092      	lsls	r2, r2, #2
 800571c:	4093      	lsls	r3, r2
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	4313      	orrs	r3, r2
 8005722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005724:	4935      	ldr	r1, [pc, #212]	; (80057fc <HAL_GPIO_Init+0x310>)
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	089b      	lsrs	r3, r3, #2
 800572a:	3302      	adds	r3, #2
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005732:	4b3b      	ldr	r3, [pc, #236]	; (8005820 <HAL_GPIO_Init+0x334>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	43db      	mvns	r3, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4013      	ands	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005756:	4a32      	ldr	r2, [pc, #200]	; (8005820 <HAL_GPIO_Init+0x334>)
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800575c:	4b30      	ldr	r3, [pc, #192]	; (8005820 <HAL_GPIO_Init+0x334>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	43db      	mvns	r3, r3
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	4013      	ands	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005780:	4a27      	ldr	r2, [pc, #156]	; (8005820 <HAL_GPIO_Init+0x334>)
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005786:	4b26      	ldr	r3, [pc, #152]	; (8005820 <HAL_GPIO_Init+0x334>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	43db      	mvns	r3, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057aa:	4a1d      	ldr	r2, [pc, #116]	; (8005820 <HAL_GPIO_Init+0x334>)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057b0:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <HAL_GPIO_Init+0x334>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057d4:	4a12      	ldr	r2, [pc, #72]	; (8005820 <HAL_GPIO_Init+0x334>)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	3301      	adds	r3, #1
 80057de:	61fb      	str	r3, [r7, #28]
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	2b0f      	cmp	r3, #15
 80057e4:	f67f ae90 	bls.w	8005508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	3724      	adds	r7, #36	; 0x24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40023800 	.word	0x40023800
 80057fc:	40013800 	.word	0x40013800
 8005800:	40020000 	.word	0x40020000
 8005804:	40020400 	.word	0x40020400
 8005808:	40020800 	.word	0x40020800
 800580c:	40020c00 	.word	0x40020c00
 8005810:	40021000 	.word	0x40021000
 8005814:	40021400 	.word	0x40021400
 8005818:	40021800 	.word	0x40021800
 800581c:	40021c00 	.word	0x40021c00
 8005820:	40013c00 	.word	0x40013c00

08005824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	807b      	strh	r3, [r7, #2]
 8005830:	4613      	mov	r3, r2
 8005832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005834:	787b      	ldrb	r3, [r7, #1]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800583a:	887a      	ldrh	r2, [r7, #2]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005840:	e003      	b.n	800584a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005842:	887b      	ldrh	r3, [r7, #2]
 8005844:	041a      	lsls	r2, r3, #16
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	619a      	str	r2, [r3, #24]
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005862:	4b08      	ldr	r3, [pc, #32]	; (8005884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	88fb      	ldrh	r3, [r7, #6]
 8005868:	4013      	ands	r3, r2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d006      	beq.n	800587c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800586e:	4a05      	ldr	r2, [pc, #20]	; (8005884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f806 	bl	8005888 <HAL_GPIO_EXTI_Callback>
  }
}
 800587c:	bf00      	nop
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40013c00 	.word	0x40013c00

08005888 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	4603      	mov	r3, r0
 8005890:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e12b      	b.n	8005b0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fe fdcc 	bl	8004464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2224      	movs	r2, #36	; 0x24
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005904:	f002 f830 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 8005908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	4a81      	ldr	r2, [pc, #516]	; (8005b14 <HAL_I2C_Init+0x274>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d807      	bhi.n	8005924 <HAL_I2C_Init+0x84>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4a80      	ldr	r2, [pc, #512]	; (8005b18 <HAL_I2C_Init+0x278>)
 8005918:	4293      	cmp	r3, r2
 800591a:	bf94      	ite	ls
 800591c:	2301      	movls	r3, #1
 800591e:	2300      	movhi	r3, #0
 8005920:	b2db      	uxtb	r3, r3
 8005922:	e006      	b.n	8005932 <HAL_I2C_Init+0x92>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4a7d      	ldr	r2, [pc, #500]	; (8005b1c <HAL_I2C_Init+0x27c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	bf94      	ite	ls
 800592c:	2301      	movls	r3, #1
 800592e:	2300      	movhi	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e0e7      	b.n	8005b0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4a78      	ldr	r2, [pc, #480]	; (8005b20 <HAL_I2C_Init+0x280>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	0c9b      	lsrs	r3, r3, #18
 8005944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4a6a      	ldr	r2, [pc, #424]	; (8005b14 <HAL_I2C_Init+0x274>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d802      	bhi.n	8005974 <HAL_I2C_Init+0xd4>
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	3301      	adds	r3, #1
 8005972:	e009      	b.n	8005988 <HAL_I2C_Init+0xe8>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800597a:	fb02 f303 	mul.w	r3, r2, r3
 800597e:	4a69      	ldr	r2, [pc, #420]	; (8005b24 <HAL_I2C_Init+0x284>)
 8005980:	fba2 2303 	umull	r2, r3, r2, r3
 8005984:	099b      	lsrs	r3, r3, #6
 8005986:	3301      	adds	r3, #1
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6812      	ldr	r2, [r2, #0]
 800598c:	430b      	orrs	r3, r1
 800598e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800599a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	495c      	ldr	r1, [pc, #368]	; (8005b14 <HAL_I2C_Init+0x274>)
 80059a4:	428b      	cmp	r3, r1
 80059a6:	d819      	bhi.n	80059dc <HAL_I2C_Init+0x13c>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	1e59      	subs	r1, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80059b6:	1c59      	adds	r1, r3, #1
 80059b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059bc:	400b      	ands	r3, r1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <HAL_I2C_Init+0x138>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1e59      	subs	r1, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80059d0:	3301      	adds	r3, #1
 80059d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d6:	e051      	b.n	8005a7c <HAL_I2C_Init+0x1dc>
 80059d8:	2304      	movs	r3, #4
 80059da:	e04f      	b.n	8005a7c <HAL_I2C_Init+0x1dc>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d111      	bne.n	8005a08 <HAL_I2C_Init+0x168>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	1e58      	subs	r0, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6859      	ldr	r1, [r3, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	440b      	add	r3, r1
 80059f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059f6:	3301      	adds	r3, #1
 80059f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bf0c      	ite	eq
 8005a00:	2301      	moveq	r3, #1
 8005a02:	2300      	movne	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	e012      	b.n	8005a2e <HAL_I2C_Init+0x18e>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1e58      	subs	r0, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6859      	ldr	r1, [r3, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	0099      	lsls	r1, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bf0c      	ite	eq
 8005a28:	2301      	moveq	r3, #1
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_I2C_Init+0x196>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e022      	b.n	8005a7c <HAL_I2C_Init+0x1dc>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10e      	bne.n	8005a5c <HAL_I2C_Init+0x1bc>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1e58      	subs	r0, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6859      	ldr	r1, [r3, #4]
 8005a46:	460b      	mov	r3, r1
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	440b      	add	r3, r1
 8005a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a50:	3301      	adds	r3, #1
 8005a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5a:	e00f      	b.n	8005a7c <HAL_I2C_Init+0x1dc>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	1e58      	subs	r0, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6859      	ldr	r1, [r3, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	440b      	add	r3, r1
 8005a6a:	0099      	lsls	r1, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a72:	3301      	adds	r3, #1
 8005a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	6809      	ldr	r1, [r1, #0]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69da      	ldr	r2, [r3, #28]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6911      	ldr	r1, [r2, #16]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	68d2      	ldr	r2, [r2, #12]
 8005ab6:	4311      	orrs	r1, r2
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6812      	ldr	r2, [r2, #0]
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695a      	ldr	r2, [r3, #20]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	000186a0 	.word	0x000186a0
 8005b18:	001e847f 	.word	0x001e847f
 8005b1c:	003d08ff 	.word	0x003d08ff
 8005b20:	431bde83 	.word	0x431bde83
 8005b24:	10624dd3 	.word	0x10624dd3

08005b28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	607a      	str	r2, [r7, #4]
 8005b32:	461a      	mov	r2, r3
 8005b34:	460b      	mov	r3, r1
 8005b36:	817b      	strh	r3, [r7, #10]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b3c:	f7ff f916 	bl	8004d6c <HAL_GetTick>
 8005b40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	f040 80e0 	bne.w	8005d10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	2319      	movs	r3, #25
 8005b56:	2201      	movs	r2, #1
 8005b58:	4970      	ldr	r1, [pc, #448]	; (8005d1c <HAL_I2C_Master_Transmit+0x1f4>)
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f001 f8f6 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b66:	2302      	movs	r3, #2
 8005b68:	e0d3      	b.n	8005d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_I2C_Master_Transmit+0x50>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e0cc      	b.n	8005d12 <HAL_I2C_Master_Transmit+0x1ea>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d007      	beq.n	8005b9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2221      	movs	r2, #33	; 0x21
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2210      	movs	r2, #16
 8005bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	893a      	ldrh	r2, [r7, #8]
 8005bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4a50      	ldr	r2, [pc, #320]	; (8005d20 <HAL_I2C_Master_Transmit+0x1f8>)
 8005bde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005be0:	8979      	ldrh	r1, [r7, #10]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	6a3a      	ldr	r2, [r7, #32]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fde2 	bl	80067b0 <I2C_MasterRequestWrite>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e08d      	b.n	8005d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c0c:	e066      	b.n	8005cdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	6a39      	ldr	r1, [r7, #32]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f001 f970 	bl	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00d      	beq.n	8005c3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d107      	bne.n	8005c36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e06b      	b.n	8005d12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	781a      	ldrb	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d11b      	bne.n	8005cb0 <HAL_I2C_Master_Transmit+0x188>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d017      	beq.n	8005cb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	781a      	ldrb	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	6a39      	ldr	r1, [r7, #32]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f001 f960 	bl	8006f7a <I2C_WaitOnBTFFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00d      	beq.n	8005cdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d107      	bne.n	8005cd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e01a      	b.n	8005d12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d194      	bne.n	8005c0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e000      	b.n	8005d12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d10:	2302      	movs	r3, #2
  }
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	00100002 	.word	0x00100002
 8005d20:	ffff0000 	.word	0xffff0000

08005d24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08c      	sub	sp, #48	; 0x30
 8005d28:	af02      	add	r7, sp, #8
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	607a      	str	r2, [r7, #4]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	460b      	mov	r3, r1
 8005d32:	817b      	strh	r3, [r7, #10]
 8005d34:	4613      	mov	r3, r2
 8005d36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d38:	f7ff f818 	bl	8004d6c <HAL_GetTick>
 8005d3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	f040 820b 	bne.w	8006162 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	2319      	movs	r3, #25
 8005d52:	2201      	movs	r2, #1
 8005d54:	497c      	ldr	r1, [pc, #496]	; (8005f48 <HAL_I2C_Master_Receive+0x224>)
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 fff8 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005d62:	2302      	movs	r3, #2
 8005d64:	e1fe      	b.n	8006164 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_I2C_Master_Receive+0x50>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e1f7      	b.n	8006164 <HAL_I2C_Master_Receive+0x440>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d007      	beq.n	8005d9a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0201 	orr.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2222      	movs	r2, #34	; 0x22
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2210      	movs	r2, #16
 8005db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	893a      	ldrh	r2, [r7, #8]
 8005dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4a5c      	ldr	r2, [pc, #368]	; (8005f4c <HAL_I2C_Master_Receive+0x228>)
 8005dda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ddc:	8979      	ldrh	r1, [r7, #10]
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fd66 	bl	80068b4 <I2C_MasterRequestRead>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e1b8      	b.n	8006164 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d113      	bne.n	8005e22 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	623b      	str	r3, [r7, #32]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	623b      	str	r3, [r7, #32]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	623b      	str	r3, [r7, #32]
 8005e0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	e18c      	b.n	800613c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d11b      	bne.n	8005e62 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e16c      	b.n	800613c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d11b      	bne.n	8005ea2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	e14c      	b.n	800613c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005eb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ec8:	e138      	b.n	800613c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	f200 80f1 	bhi.w	80060b6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d123      	bne.n	8005f24 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f001 f88b 	bl	8006ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e139      	b.n	8006164 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f22:	e10b      	b.n	800613c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d14e      	bne.n	8005fca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	2200      	movs	r2, #0
 8005f34:	4906      	ldr	r1, [pc, #24]	; (8005f50 <HAL_I2C_Master_Receive+0x22c>)
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 ff08 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e10e      	b.n	8006164 <HAL_I2C_Master_Receive+0x440>
 8005f46:	bf00      	nop
 8005f48:	00100002 	.word	0x00100002
 8005f4c:	ffff0000 	.word	0xffff0000
 8005f50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691a      	ldr	r2, [r3, #16]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fc8:	e0b8      	b.n	800613c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4966      	ldr	r1, [pc, #408]	; (800616c <HAL_I2C_Master_Receive+0x448>)
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 feb9 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e0bf      	b.n	8006164 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	2200      	movs	r2, #0
 800602e:	494f      	ldr	r1, [pc, #316]	; (800616c <HAL_I2C_Master_Receive+0x448>)
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fe8b 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e091      	b.n	8006164 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800604e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060b4:	e042      	b.n	800613c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 ff9e 	bl	8006ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e04c      	b.n	8006164 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b04      	cmp	r3, #4
 8006108:	d118      	bne.n	800613c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006132:	b29b      	uxth	r3, r3
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006140:	2b00      	cmp	r3, #0
 8006142:	f47f aec2 	bne.w	8005eca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	e000      	b.n	8006164 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006162:	2302      	movs	r3, #2
  }
}
 8006164:	4618      	mov	r0, r3
 8006166:	3728      	adds	r7, #40	; 0x28
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	00010004 	.word	0x00010004

08006170 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af02      	add	r7, sp, #8
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	4608      	mov	r0, r1
 800617a:	4611      	mov	r1, r2
 800617c:	461a      	mov	r2, r3
 800617e:	4603      	mov	r3, r0
 8006180:	817b      	strh	r3, [r7, #10]
 8006182:	460b      	mov	r3, r1
 8006184:	813b      	strh	r3, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800618a:	f7fe fdef 	bl	8004d6c <HAL_GetTick>
 800618e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b20      	cmp	r3, #32
 800619a:	f040 80d9 	bne.w	8006350 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	2319      	movs	r3, #25
 80061a4:	2201      	movs	r2, #1
 80061a6:	496d      	ldr	r1, [pc, #436]	; (800635c <HAL_I2C_Mem_Write+0x1ec>)
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 fdcf 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
 80061b6:	e0cc      	b.n	8006352 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_I2C_Mem_Write+0x56>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e0c5      	b.n	8006352 <HAL_I2C_Mem_Write+0x1e2>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d007      	beq.n	80061ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0201 	orr.w	r2, r2, #1
 80061ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2221      	movs	r2, #33	; 0x21
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2240      	movs	r2, #64	; 0x40
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a3a      	ldr	r2, [r7, #32]
 8006216:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800621c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4a4d      	ldr	r2, [pc, #308]	; (8006360 <HAL_I2C_Mem_Write+0x1f0>)
 800622c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800622e:	88f8      	ldrh	r0, [r7, #6]
 8006230:	893a      	ldrh	r2, [r7, #8]
 8006232:	8979      	ldrh	r1, [r7, #10]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	4603      	mov	r3, r0
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fc06 	bl	8006a50 <I2C_RequestMemoryWrite>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d052      	beq.n	80062f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e081      	b.n	8006352 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fe50 	bl	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00d      	beq.n	800627a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	2b04      	cmp	r3, #4
 8006264:	d107      	bne.n	8006276 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006274:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e06b      	b.n	8006352 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	781a      	ldrb	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006294:	3b01      	subs	r3, #1
 8006296:	b29a      	uxth	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d11b      	bne.n	80062f0 <HAL_I2C_Mem_Write+0x180>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d017      	beq.n	80062f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	781a      	ldrb	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062da:	3b01      	subs	r3, #1
 80062dc:	b29a      	uxth	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1aa      	bne.n	800624e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 fe3c 	bl	8006f7a <I2C_WaitOnBTFFlagUntilTimeout>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00d      	beq.n	8006324 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	2b04      	cmp	r3, #4
 800630e:	d107      	bne.n	8006320 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800631e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e016      	b.n	8006352 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	e000      	b.n	8006352 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006350:	2302      	movs	r3, #2
  }
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	00100002 	.word	0x00100002
 8006360:	ffff0000 	.word	0xffff0000

08006364 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08c      	sub	sp, #48	; 0x30
 8006368:	af02      	add	r7, sp, #8
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	4608      	mov	r0, r1
 800636e:	4611      	mov	r1, r2
 8006370:	461a      	mov	r2, r3
 8006372:	4603      	mov	r3, r0
 8006374:	817b      	strh	r3, [r7, #10]
 8006376:	460b      	mov	r3, r1
 8006378:	813b      	strh	r3, [r7, #8]
 800637a:	4613      	mov	r3, r2
 800637c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800637e:	f7fe fcf5 	bl	8004d6c <HAL_GetTick>
 8006382:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b20      	cmp	r3, #32
 800638e:	f040 8208 	bne.w	80067a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	2319      	movs	r3, #25
 8006398:	2201      	movs	r2, #1
 800639a:	497b      	ldr	r1, [pc, #492]	; (8006588 <HAL_I2C_Mem_Read+0x224>)
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 fcd5 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80063a8:	2302      	movs	r3, #2
 80063aa:	e1fb      	b.n	80067a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d101      	bne.n	80063ba <HAL_I2C_Mem_Read+0x56>
 80063b6:	2302      	movs	r3, #2
 80063b8:	e1f4      	b.n	80067a4 <HAL_I2C_Mem_Read+0x440>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d007      	beq.n	80063e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0201 	orr.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2222      	movs	r2, #34	; 0x22
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2240      	movs	r2, #64	; 0x40
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800640a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006410:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4a5b      	ldr	r2, [pc, #364]	; (800658c <HAL_I2C_Mem_Read+0x228>)
 8006420:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006422:	88f8      	ldrh	r0, [r7, #6]
 8006424:	893a      	ldrh	r2, [r7, #8]
 8006426:	8979      	ldrh	r1, [r7, #10]
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	4603      	mov	r3, r0
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 fba2 	bl	8006b7c <I2C_RequestMemoryRead>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e1b0      	b.n	80067a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006446:	2b00      	cmp	r3, #0
 8006448:	d113      	bne.n	8006472 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800644a:	2300      	movs	r3, #0
 800644c:	623b      	str	r3, [r7, #32]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	623b      	str	r3, [r7, #32]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	623b      	str	r3, [r7, #32]
 800645e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	e184      	b.n	800677c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006476:	2b01      	cmp	r3, #1
 8006478:	d11b      	bne.n	80064b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006488:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800648a:	2300      	movs	r3, #0
 800648c:	61fb      	str	r3, [r7, #28]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	61fb      	str	r3, [r7, #28]
 800649e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	e164      	b.n	800677c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d11b      	bne.n	80064f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064da:	2300      	movs	r3, #0
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	e144      	b.n	800677c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006508:	e138      	b.n	800677c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650e:	2b03      	cmp	r3, #3
 8006510:	f200 80f1 	bhi.w	80066f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006518:	2b01      	cmp	r3, #1
 800651a:	d123      	bne.n	8006564 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800651c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fd6b 	bl	8006ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e139      	b.n	80067a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006562:	e10b      	b.n	800677c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006568:	2b02      	cmp	r3, #2
 800656a:	d14e      	bne.n	800660a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	2200      	movs	r2, #0
 8006574:	4906      	ldr	r1, [pc, #24]	; (8006590 <HAL_I2C_Mem_Read+0x22c>)
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 fbe8 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d008      	beq.n	8006594 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e10e      	b.n	80067a4 <HAL_I2C_Mem_Read+0x440>
 8006586:	bf00      	nop
 8006588:	00100002 	.word	0x00100002
 800658c:	ffff0000 	.word	0xffff0000
 8006590:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006608:	e0b8      	b.n	800677c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	2200      	movs	r2, #0
 8006612:	4966      	ldr	r1, [pc, #408]	; (80067ac <HAL_I2C_Mem_Read+0x448>)
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fb99 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e0bf      	b.n	80067a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	2200      	movs	r2, #0
 800666e:	494f      	ldr	r1, [pc, #316]	; (80067ac <HAL_I2C_Mem_Read+0x448>)
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fb6b 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e091      	b.n	80067a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800668e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066f4:	e042      	b.n	800677c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 fc7e 	bl	8006ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e04c      	b.n	80067a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b01      	subs	r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b04      	cmp	r3, #4
 8006748:	d118      	bne.n	800677c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	691a      	ldr	r2, [r3, #16]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006766:	3b01      	subs	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006780:	2b00      	cmp	r3, #0
 8006782:	f47f aec2 	bne.w	800650a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e000      	b.n	80067a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80067a2:	2302      	movs	r3, #2
  }
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3728      	adds	r7, #40	; 0x28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	00010004 	.word	0x00010004

080067b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	607a      	str	r2, [r7, #4]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	460b      	mov	r3, r1
 80067be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d006      	beq.n	80067da <I2C_MasterRequestWrite+0x2a>
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d003      	beq.n	80067da <I2C_MasterRequestWrite+0x2a>
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067d8:	d108      	bne.n	80067ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	e00b      	b.n	8006804 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f0:	2b12      	cmp	r3, #18
 80067f2:	d107      	bne.n	8006804 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006802:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 fa9b 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00d      	beq.n	8006838 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800682a:	d103      	bne.n	8006834 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006832:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e035      	b.n	80068a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006840:	d108      	bne.n	8006854 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006842:	897b      	ldrh	r3, [r7, #10]
 8006844:	b2db      	uxtb	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006850:	611a      	str	r2, [r3, #16]
 8006852:	e01b      	b.n	800688c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006854:	897b      	ldrh	r3, [r7, #10]
 8006856:	11db      	asrs	r3, r3, #7
 8006858:	b2db      	uxtb	r3, r3
 800685a:	f003 0306 	and.w	r3, r3, #6
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f063 030f 	orn	r3, r3, #15
 8006864:	b2da      	uxtb	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	490e      	ldr	r1, [pc, #56]	; (80068ac <I2C_MasterRequestWrite+0xfc>)
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 fac1 	bl	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e010      	b.n	80068a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006882:	897b      	ldrh	r3, [r7, #10]
 8006884:	b2da      	uxtb	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	4907      	ldr	r1, [pc, #28]	; (80068b0 <I2C_MasterRequestWrite+0x100>)
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 fab1 	bl	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	00010008 	.word	0x00010008
 80068b0:	00010002 	.word	0x00010002

080068b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	460b      	mov	r3, r1
 80068c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d006      	beq.n	80068ee <I2C_MasterRequestRead+0x3a>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d003      	beq.n	80068ee <I2C_MasterRequestRead+0x3a>
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068ec:	d108      	bne.n	8006900 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e00b      	b.n	8006918 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	2b11      	cmp	r3, #17
 8006906:	d107      	bne.n	8006918 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006916:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fa11 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00d      	beq.n	800694c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800693e:	d103      	bne.n	8006948 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006946:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e079      	b.n	8006a40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006954:	d108      	bne.n	8006968 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006956:	897b      	ldrh	r3, [r7, #10]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f043 0301 	orr.w	r3, r3, #1
 800695e:	b2da      	uxtb	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	611a      	str	r2, [r3, #16]
 8006966:	e05f      	b.n	8006a28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006968:	897b      	ldrh	r3, [r7, #10]
 800696a:	11db      	asrs	r3, r3, #7
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f003 0306 	and.w	r3, r3, #6
 8006972:	b2db      	uxtb	r3, r3
 8006974:	f063 030f 	orn	r3, r3, #15
 8006978:	b2da      	uxtb	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	4930      	ldr	r1, [pc, #192]	; (8006a48 <I2C_MasterRequestRead+0x194>)
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fa37 	bl	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e054      	b.n	8006a40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006996:	897b      	ldrh	r3, [r7, #10]
 8006998:	b2da      	uxtb	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	4929      	ldr	r1, [pc, #164]	; (8006a4c <I2C_MasterRequestRead+0x198>)
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 fa27 	bl	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e044      	b.n	8006a40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069b6:	2300      	movs	r3, #0
 80069b8:	613b      	str	r3, [r7, #16]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f9af 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00d      	beq.n	8006a10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a02:	d103      	bne.n	8006a0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e017      	b.n	8006a40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006a10:	897b      	ldrh	r3, [r7, #10]
 8006a12:	11db      	asrs	r3, r3, #7
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f003 0306 	and.w	r3, r3, #6
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f063 030e 	orn	r3, r3, #14
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	4907      	ldr	r1, [pc, #28]	; (8006a4c <I2C_MasterRequestRead+0x198>)
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 f9e3 	bl	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	00010008 	.word	0x00010008
 8006a4c:	00010002 	.word	0x00010002

08006a50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	4608      	mov	r0, r1
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	817b      	strh	r3, [r7, #10]
 8006a62:	460b      	mov	r3, r1
 8006a64:	813b      	strh	r3, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 f960 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00d      	beq.n	8006aae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa0:	d103      	bne.n	8006aaa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e05f      	b.n	8006b6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006aae:	897b      	ldrh	r3, [r7, #10]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006abc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	6a3a      	ldr	r2, [r7, #32]
 8006ac2:	492d      	ldr	r1, [pc, #180]	; (8006b78 <I2C_RequestMemoryWrite+0x128>)
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f998 	bl	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e04c      	b.n	8006b6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aec:	6a39      	ldr	r1, [r7, #32]
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fa02 	bl	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00d      	beq.n	8006b16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d107      	bne.n	8006b12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e02b      	b.n	8006b6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b16:	88fb      	ldrh	r3, [r7, #6]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d105      	bne.n	8006b28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b1c:	893b      	ldrh	r3, [r7, #8]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	611a      	str	r2, [r3, #16]
 8006b26:	e021      	b.n	8006b6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b28:	893b      	ldrh	r3, [r7, #8]
 8006b2a:	0a1b      	lsrs	r3, r3, #8
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b38:	6a39      	ldr	r1, [r7, #32]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f9dc 	bl	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00d      	beq.n	8006b62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d107      	bne.n	8006b5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e005      	b.n	8006b6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b62:	893b      	ldrh	r3, [r7, #8]
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	00010002 	.word	0x00010002

08006b7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	4608      	mov	r0, r1
 8006b86:	4611      	mov	r1, r2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	817b      	strh	r3, [r7, #10]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	813b      	strh	r3, [r7, #8]
 8006b92:	4613      	mov	r3, r2
 8006b94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ba4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 f8c2 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00d      	beq.n	8006bea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bdc:	d103      	bne.n	8006be6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006be4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e0aa      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bea:	897b      	ldrh	r3, [r7, #10]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	4952      	ldr	r1, [pc, #328]	; (8006d48 <I2C_RequestMemoryRead+0x1cc>)
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f8fa 	bl	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e097      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c28:	6a39      	ldr	r1, [r7, #32]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f964 	bl	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00d      	beq.n	8006c52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d107      	bne.n	8006c4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e076      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d105      	bne.n	8006c64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c58:	893b      	ldrh	r3, [r7, #8]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	611a      	str	r2, [r3, #16]
 8006c62:	e021      	b.n	8006ca8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c64:	893b      	ldrh	r3, [r7, #8]
 8006c66:	0a1b      	lsrs	r3, r3, #8
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c74:	6a39      	ldr	r1, [r7, #32]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f93e 	bl	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00d      	beq.n	8006c9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d107      	bne.n	8006c9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e050      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c9e:	893b      	ldrh	r3, [r7, #8]
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	6a39      	ldr	r1, [r7, #32]
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f923 	bl	8006ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00d      	beq.n	8006cd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d107      	bne.n	8006cd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e035      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 f82b 	bl	8006d4c <I2C_WaitOnFlagUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00d      	beq.n	8006d18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0a:	d103      	bne.n	8006d14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e013      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d18:	897b      	ldrh	r3, [r7, #10]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f043 0301 	orr.w	r3, r3, #1
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	4906      	ldr	r1, [pc, #24]	; (8006d48 <I2C_RequestMemoryRead+0x1cc>)
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 f863 	bl	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	00010002 	.word	0x00010002

08006d4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d5c:	e025      	b.n	8006daa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d64:	d021      	beq.n	8006daa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d66:	f7fe f801 	bl	8004d6c <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d302      	bcc.n	8006d7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d116      	bne.n	8006daa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f043 0220 	orr.w	r2, r3, #32
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e023      	b.n	8006df2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	0c1b      	lsrs	r3, r3, #16
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d10d      	bne.n	8006dd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	43da      	mvns	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bf0c      	ite	eq
 8006dc6:	2301      	moveq	r3, #1
 8006dc8:	2300      	movne	r3, #0
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	e00c      	b.n	8006dea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	43da      	mvns	r2, r3
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	bf0c      	ite	eq
 8006de2:	2301      	moveq	r3, #1
 8006de4:	2300      	movne	r3, #0
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d0b6      	beq.n	8006d5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607a      	str	r2, [r7, #4]
 8006e06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e08:	e051      	b.n	8006eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e18:	d123      	bne.n	8006e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	f043 0204 	orr.w	r2, r3, #4
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e046      	b.n	8006ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e68:	d021      	beq.n	8006eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e6a:	f7fd ff7f 	bl	8004d6c <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d302      	bcc.n	8006e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d116      	bne.n	8006eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	f043 0220 	orr.w	r2, r3, #32
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e020      	b.n	8006ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	0c1b      	lsrs	r3, r3, #16
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d10c      	bne.n	8006ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	43da      	mvns	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bf14      	ite	ne
 8006eca:	2301      	movne	r3, #1
 8006ecc:	2300      	moveq	r3, #0
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	e00b      	b.n	8006eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	43da      	mvns	r2, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	4013      	ands	r3, r2
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	bf14      	ite	ne
 8006ee4:	2301      	movne	r3, #1
 8006ee6:	2300      	moveq	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d18d      	bne.n	8006e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f04:	e02d      	b.n	8006f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 f8ce 	bl	80070a8 <I2C_IsAcknowledgeFailed>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e02d      	b.n	8006f72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f1c:	d021      	beq.n	8006f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1e:	f7fd ff25 	bl	8004d6c <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d302      	bcc.n	8006f34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d116      	bne.n	8006f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e007      	b.n	8006f72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6c:	2b80      	cmp	r3, #128	; 0x80
 8006f6e:	d1ca      	bne.n	8006f06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f86:	e02d      	b.n	8006fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f88d 	bl	80070a8 <I2C_IsAcknowledgeFailed>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e02d      	b.n	8006ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f9e:	d021      	beq.n	8006fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa0:	f7fd fee4 	bl	8004d6c <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d302      	bcc.n	8006fb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d116      	bne.n	8006fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	f043 0220 	orr.w	r2, r3, #32
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e007      	b.n	8006ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d1ca      	bne.n	8006f88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007008:	e042      	b.n	8007090 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	f003 0310 	and.w	r3, r3, #16
 8007014:	2b10      	cmp	r3, #16
 8007016:	d119      	bne.n	800704c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f06f 0210 	mvn.w	r2, #16
 8007020:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e029      	b.n	80070a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704c:	f7fd fe8e 	bl	8004d6c <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	429a      	cmp	r2, r3
 800705a:	d302      	bcc.n	8007062 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d116      	bne.n	8007090 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	f043 0220 	orr.w	r2, r3, #32
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e007      	b.n	80070a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709a:	2b40      	cmp	r3, #64	; 0x40
 800709c:	d1b5      	bne.n	800700a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070be:	d11b      	bne.n	80070f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	f043 0204 	orr.w	r2, r3, #4
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e000      	b.n	80070fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
	...

08007108 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e267      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d075      	beq.n	8007212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007126:	4b88      	ldr	r3, [pc, #544]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 030c 	and.w	r3, r3, #12
 800712e:	2b04      	cmp	r3, #4
 8007130:	d00c      	beq.n	800714c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007132:	4b85      	ldr	r3, [pc, #532]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800713a:	2b08      	cmp	r3, #8
 800713c:	d112      	bne.n	8007164 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800713e:	4b82      	ldr	r3, [pc, #520]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800714a:	d10b      	bne.n	8007164 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800714c:	4b7e      	ldr	r3, [pc, #504]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d05b      	beq.n	8007210 <HAL_RCC_OscConfig+0x108>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d157      	bne.n	8007210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e242      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800716c:	d106      	bne.n	800717c <HAL_RCC_OscConfig+0x74>
 800716e:	4b76      	ldr	r3, [pc, #472]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a75      	ldr	r2, [pc, #468]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 8007174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	e01d      	b.n	80071b8 <HAL_RCC_OscConfig+0xb0>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007184:	d10c      	bne.n	80071a0 <HAL_RCC_OscConfig+0x98>
 8007186:	4b70      	ldr	r3, [pc, #448]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a6f      	ldr	r2, [pc, #444]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 800718c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	4b6d      	ldr	r3, [pc, #436]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a6c      	ldr	r2, [pc, #432]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 8007198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	e00b      	b.n	80071b8 <HAL_RCC_OscConfig+0xb0>
 80071a0:	4b69      	ldr	r3, [pc, #420]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a68      	ldr	r2, [pc, #416]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 80071a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	4b66      	ldr	r3, [pc, #408]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a65      	ldr	r2, [pc, #404]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 80071b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d013      	beq.n	80071e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c0:	f7fd fdd4 	bl	8004d6c <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071c8:	f7fd fdd0 	bl	8004d6c <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b64      	cmp	r3, #100	; 0x64
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e207      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071da:	4b5b      	ldr	r3, [pc, #364]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0f0      	beq.n	80071c8 <HAL_RCC_OscConfig+0xc0>
 80071e6:	e014      	b.n	8007212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e8:	f7fd fdc0 	bl	8004d6c <HAL_GetTick>
 80071ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ee:	e008      	b.n	8007202 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071f0:	f7fd fdbc 	bl	8004d6c <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b64      	cmp	r3, #100	; 0x64
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e1f3      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007202:	4b51      	ldr	r3, [pc, #324]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1f0      	bne.n	80071f0 <HAL_RCC_OscConfig+0xe8>
 800720e:	e000      	b.n	8007212 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d063      	beq.n	80072e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800721e:	4b4a      	ldr	r3, [pc, #296]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 030c 	and.w	r3, r3, #12
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00b      	beq.n	8007242 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800722a:	4b47      	ldr	r3, [pc, #284]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007232:	2b08      	cmp	r3, #8
 8007234:	d11c      	bne.n	8007270 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007236:	4b44      	ldr	r3, [pc, #272]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d116      	bne.n	8007270 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007242:	4b41      	ldr	r3, [pc, #260]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <HAL_RCC_OscConfig+0x152>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d001      	beq.n	800725a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e1c7      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800725a:	4b3b      	ldr	r3, [pc, #236]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	4937      	ldr	r1, [pc, #220]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 800726a:	4313      	orrs	r3, r2
 800726c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800726e:	e03a      	b.n	80072e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d020      	beq.n	80072ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007278:	4b34      	ldr	r3, [pc, #208]	; (800734c <HAL_RCC_OscConfig+0x244>)
 800727a:	2201      	movs	r2, #1
 800727c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800727e:	f7fd fd75 	bl	8004d6c <HAL_GetTick>
 8007282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007284:	e008      	b.n	8007298 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007286:	f7fd fd71 	bl	8004d6c <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	2b02      	cmp	r3, #2
 8007292:	d901      	bls.n	8007298 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e1a8      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007298:	4b2b      	ldr	r3, [pc, #172]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0f0      	beq.n	8007286 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072a4:	4b28      	ldr	r3, [pc, #160]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	4925      	ldr	r1, [pc, #148]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	600b      	str	r3, [r1, #0]
 80072b8:	e015      	b.n	80072e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072ba:	4b24      	ldr	r3, [pc, #144]	; (800734c <HAL_RCC_OscConfig+0x244>)
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c0:	f7fd fd54 	bl	8004d6c <HAL_GetTick>
 80072c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072c6:	e008      	b.n	80072da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072c8:	f7fd fd50 	bl	8004d6c <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d901      	bls.n	80072da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e187      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072da:	4b1b      	ldr	r3, [pc, #108]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1f0      	bne.n	80072c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d036      	beq.n	8007360 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d016      	beq.n	8007328 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072fa:	4b15      	ldr	r3, [pc, #84]	; (8007350 <HAL_RCC_OscConfig+0x248>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007300:	f7fd fd34 	bl	8004d6c <HAL_GetTick>
 8007304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007306:	e008      	b.n	800731a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007308:	f7fd fd30 	bl	8004d6c <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d901      	bls.n	800731a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e167      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <HAL_RCC_OscConfig+0x240>)
 800731c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0f0      	beq.n	8007308 <HAL_RCC_OscConfig+0x200>
 8007326:	e01b      	b.n	8007360 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007328:	4b09      	ldr	r3, [pc, #36]	; (8007350 <HAL_RCC_OscConfig+0x248>)
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800732e:	f7fd fd1d 	bl	8004d6c <HAL_GetTick>
 8007332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007334:	e00e      	b.n	8007354 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007336:	f7fd fd19 	bl	8004d6c <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d907      	bls.n	8007354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e150      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
 8007348:	40023800 	.word	0x40023800
 800734c:	42470000 	.word	0x42470000
 8007350:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007354:	4b88      	ldr	r3, [pc, #544]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1ea      	bne.n	8007336 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8097 	beq.w	800749c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800736e:	2300      	movs	r3, #0
 8007370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007372:	4b81      	ldr	r3, [pc, #516]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10f      	bne.n	800739e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800737e:	2300      	movs	r3, #0
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	4b7d      	ldr	r3, [pc, #500]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	4a7c      	ldr	r2, [pc, #496]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800738c:	6413      	str	r3, [r2, #64]	; 0x40
 800738e:	4b7a      	ldr	r3, [pc, #488]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007396:	60bb      	str	r3, [r7, #8]
 8007398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800739a:	2301      	movs	r3, #1
 800739c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800739e:	4b77      	ldr	r3, [pc, #476]	; (800757c <HAL_RCC_OscConfig+0x474>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d118      	bne.n	80073dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073aa:	4b74      	ldr	r3, [pc, #464]	; (800757c <HAL_RCC_OscConfig+0x474>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a73      	ldr	r2, [pc, #460]	; (800757c <HAL_RCC_OscConfig+0x474>)
 80073b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073b6:	f7fd fcd9 	bl	8004d6c <HAL_GetTick>
 80073ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073bc:	e008      	b.n	80073d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073be:	f7fd fcd5 	bl	8004d6c <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e10c      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073d0:	4b6a      	ldr	r3, [pc, #424]	; (800757c <HAL_RCC_OscConfig+0x474>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0f0      	beq.n	80073be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d106      	bne.n	80073f2 <HAL_RCC_OscConfig+0x2ea>
 80073e4:	4b64      	ldr	r3, [pc, #400]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 80073e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e8:	4a63      	ldr	r2, [pc, #396]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 80073ea:	f043 0301 	orr.w	r3, r3, #1
 80073ee:	6713      	str	r3, [r2, #112]	; 0x70
 80073f0:	e01c      	b.n	800742c <HAL_RCC_OscConfig+0x324>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	2b05      	cmp	r3, #5
 80073f8:	d10c      	bne.n	8007414 <HAL_RCC_OscConfig+0x30c>
 80073fa:	4b5f      	ldr	r3, [pc, #380]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 80073fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fe:	4a5e      	ldr	r2, [pc, #376]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007400:	f043 0304 	orr.w	r3, r3, #4
 8007404:	6713      	str	r3, [r2, #112]	; 0x70
 8007406:	4b5c      	ldr	r3, [pc, #368]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740a:	4a5b      	ldr	r2, [pc, #364]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 800740c:	f043 0301 	orr.w	r3, r3, #1
 8007410:	6713      	str	r3, [r2, #112]	; 0x70
 8007412:	e00b      	b.n	800742c <HAL_RCC_OscConfig+0x324>
 8007414:	4b58      	ldr	r3, [pc, #352]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007418:	4a57      	ldr	r2, [pc, #348]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 800741a:	f023 0301 	bic.w	r3, r3, #1
 800741e:	6713      	str	r3, [r2, #112]	; 0x70
 8007420:	4b55      	ldr	r3, [pc, #340]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007424:	4a54      	ldr	r2, [pc, #336]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007426:	f023 0304 	bic.w	r3, r3, #4
 800742a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d015      	beq.n	8007460 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007434:	f7fd fc9a 	bl	8004d6c <HAL_GetTick>
 8007438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800743a:	e00a      	b.n	8007452 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800743c:	f7fd fc96 	bl	8004d6c <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	f241 3288 	movw	r2, #5000	; 0x1388
 800744a:	4293      	cmp	r3, r2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e0cb      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007452:	4b49      	ldr	r3, [pc, #292]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0ee      	beq.n	800743c <HAL_RCC_OscConfig+0x334>
 800745e:	e014      	b.n	800748a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007460:	f7fd fc84 	bl	8004d6c <HAL_GetTick>
 8007464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007466:	e00a      	b.n	800747e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007468:	f7fd fc80 	bl	8004d6c <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	f241 3288 	movw	r2, #5000	; 0x1388
 8007476:	4293      	cmp	r3, r2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e0b5      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800747e:	4b3e      	ldr	r3, [pc, #248]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1ee      	bne.n	8007468 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d105      	bne.n	800749c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007490:	4b39      	ldr	r3, [pc, #228]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007494:	4a38      	ldr	r2, [pc, #224]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800749a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 80a1 	beq.w	80075e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074a6:	4b34      	ldr	r3, [pc, #208]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f003 030c 	and.w	r3, r3, #12
 80074ae:	2b08      	cmp	r3, #8
 80074b0:	d05c      	beq.n	800756c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d141      	bne.n	800753e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ba:	4b31      	ldr	r3, [pc, #196]	; (8007580 <HAL_RCC_OscConfig+0x478>)
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074c0:	f7fd fc54 	bl	8004d6c <HAL_GetTick>
 80074c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074c6:	e008      	b.n	80074da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074c8:	f7fd fc50 	bl	8004d6c <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d901      	bls.n	80074da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e087      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074da:	4b27      	ldr	r3, [pc, #156]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1f0      	bne.n	80074c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	69da      	ldr	r2, [r3, #28]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	019b      	lsls	r3, r3, #6
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	085b      	lsrs	r3, r3, #1
 80074fe:	3b01      	subs	r3, #1
 8007500:	041b      	lsls	r3, r3, #16
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	061b      	lsls	r3, r3, #24
 800750a:	491b      	ldr	r1, [pc, #108]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 800750c:	4313      	orrs	r3, r2
 800750e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007510:	4b1b      	ldr	r3, [pc, #108]	; (8007580 <HAL_RCC_OscConfig+0x478>)
 8007512:	2201      	movs	r2, #1
 8007514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007516:	f7fd fc29 	bl	8004d6c <HAL_GetTick>
 800751a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800751c:	e008      	b.n	8007530 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800751e:	f7fd fc25 	bl	8004d6c <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b02      	cmp	r3, #2
 800752a:	d901      	bls.n	8007530 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e05c      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007530:	4b11      	ldr	r3, [pc, #68]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0f0      	beq.n	800751e <HAL_RCC_OscConfig+0x416>
 800753c:	e054      	b.n	80075e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800753e:	4b10      	ldr	r3, [pc, #64]	; (8007580 <HAL_RCC_OscConfig+0x478>)
 8007540:	2200      	movs	r2, #0
 8007542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007544:	f7fd fc12 	bl	8004d6c <HAL_GetTick>
 8007548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800754a:	e008      	b.n	800755e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800754c:	f7fd fc0e 	bl	8004d6c <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d901      	bls.n	800755e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e045      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800755e:	4b06      	ldr	r3, [pc, #24]	; (8007578 <HAL_RCC_OscConfig+0x470>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1f0      	bne.n	800754c <HAL_RCC_OscConfig+0x444>
 800756a:	e03d      	b.n	80075e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d107      	bne.n	8007584 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e038      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
 8007578:	40023800 	.word	0x40023800
 800757c:	40007000 	.word	0x40007000
 8007580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007584:	4b1b      	ldr	r3, [pc, #108]	; (80075f4 <HAL_RCC_OscConfig+0x4ec>)
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d028      	beq.n	80075e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800759c:	429a      	cmp	r2, r3
 800759e:	d121      	bne.n	80075e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d11a      	bne.n	80075e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075b4:	4013      	ands	r3, r2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075bc:	4293      	cmp	r3, r2
 80075be:	d111      	bne.n	80075e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	3b01      	subs	r3, #1
 80075ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d107      	bne.n	80075e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d001      	beq.n	80075e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e000      	b.n	80075ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	40023800 	.word	0x40023800

080075f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e0cc      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800760c:	4b68      	ldr	r3, [pc, #416]	; (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d90c      	bls.n	8007634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761a:	4b65      	ldr	r3, [pc, #404]	; (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007622:	4b63      	ldr	r3, [pc, #396]	; (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	d001      	beq.n	8007634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e0b8      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d020      	beq.n	8007682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800764c:	4b59      	ldr	r3, [pc, #356]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	4a58      	ldr	r2, [pc, #352]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007664:	4b53      	ldr	r3, [pc, #332]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	4a52      	ldr	r2, [pc, #328]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800766a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800766e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007670:	4b50      	ldr	r3, [pc, #320]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	494d      	ldr	r1, [pc, #308]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800767e:	4313      	orrs	r3, r2
 8007680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d044      	beq.n	8007718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d107      	bne.n	80076a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007696:	4b47      	ldr	r3, [pc, #284]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d119      	bne.n	80076d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e07f      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d003      	beq.n	80076b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d107      	bne.n	80076c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076b6:	4b3f      	ldr	r3, [pc, #252]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d109      	bne.n	80076d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e06f      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076c6:	4b3b      	ldr	r3, [pc, #236]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e067      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076d6:	4b37      	ldr	r3, [pc, #220]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f023 0203 	bic.w	r2, r3, #3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	4934      	ldr	r1, [pc, #208]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076e8:	f7fd fb40 	bl	8004d6c <HAL_GetTick>
 80076ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ee:	e00a      	b.n	8007706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076f0:	f7fd fb3c 	bl	8004d6c <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80076fe:	4293      	cmp	r3, r2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e04f      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007706:	4b2b      	ldr	r3, [pc, #172]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 020c 	and.w	r2, r3, #12
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	429a      	cmp	r2, r3
 8007716:	d1eb      	bne.n	80076f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007718:	4b25      	ldr	r3, [pc, #148]	; (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0307 	and.w	r3, r3, #7
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d20c      	bcs.n	8007740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007726:	4b22      	ldr	r3, [pc, #136]	; (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800772e:	4b20      	ldr	r3, [pc, #128]	; (80077b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d001      	beq.n	8007740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e032      	b.n	80077a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d008      	beq.n	800775e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800774c:	4b19      	ldr	r3, [pc, #100]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	4916      	ldr	r1, [pc, #88]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800775a:	4313      	orrs	r3, r2
 800775c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	2b00      	cmp	r3, #0
 8007768:	d009      	beq.n	800777e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800776a:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	490e      	ldr	r1, [pc, #56]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 800777a:	4313      	orrs	r3, r2
 800777c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800777e:	f000 f821 	bl	80077c4 <HAL_RCC_GetSysClockFreq>
 8007782:	4602      	mov	r2, r0
 8007784:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	091b      	lsrs	r3, r3, #4
 800778a:	f003 030f 	and.w	r3, r3, #15
 800778e:	490a      	ldr	r1, [pc, #40]	; (80077b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007790:	5ccb      	ldrb	r3, [r1, r3]
 8007792:	fa22 f303 	lsr.w	r3, r2, r3
 8007796:	4a09      	ldr	r2, [pc, #36]	; (80077bc <HAL_RCC_ClockConfig+0x1c4>)
 8007798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800779a:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <HAL_RCC_ClockConfig+0x1c8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fd faa0 	bl	8004ce4 <HAL_InitTick>

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	40023c00 	.word	0x40023c00
 80077b4:	40023800 	.word	0x40023800
 80077b8:	0801817c 	.word	0x0801817c
 80077bc:	20000008 	.word	0x20000008
 80077c0:	2000000c 	.word	0x2000000c

080077c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077c8:	b090      	sub	sp, #64	; 0x40
 80077ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	637b      	str	r3, [r7, #52]	; 0x34
 80077d0:	2300      	movs	r3, #0
 80077d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d4:	2300      	movs	r3, #0
 80077d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077dc:	4b59      	ldr	r3, [pc, #356]	; (8007944 <HAL_RCC_GetSysClockFreq+0x180>)
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f003 030c 	and.w	r3, r3, #12
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d00d      	beq.n	8007804 <HAL_RCC_GetSysClockFreq+0x40>
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	f200 80a1 	bhi.w	8007930 <HAL_RCC_GetSysClockFreq+0x16c>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <HAL_RCC_GetSysClockFreq+0x34>
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d003      	beq.n	80077fe <HAL_RCC_GetSysClockFreq+0x3a>
 80077f6:	e09b      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077f8:	4b53      	ldr	r3, [pc, #332]	; (8007948 <HAL_RCC_GetSysClockFreq+0x184>)
 80077fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80077fc:	e09b      	b.n	8007936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077fe:	4b53      	ldr	r3, [pc, #332]	; (800794c <HAL_RCC_GetSysClockFreq+0x188>)
 8007800:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007802:	e098      	b.n	8007936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007804:	4b4f      	ldr	r3, [pc, #316]	; (8007944 <HAL_RCC_GetSysClockFreq+0x180>)
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800780c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800780e:	4b4d      	ldr	r3, [pc, #308]	; (8007944 <HAL_RCC_GetSysClockFreq+0x180>)
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d028      	beq.n	800786c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800781a:	4b4a      	ldr	r3, [pc, #296]	; (8007944 <HAL_RCC_GetSysClockFreq+0x180>)
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	099b      	lsrs	r3, r3, #6
 8007820:	2200      	movs	r2, #0
 8007822:	623b      	str	r3, [r7, #32]
 8007824:	627a      	str	r2, [r7, #36]	; 0x24
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800782c:	2100      	movs	r1, #0
 800782e:	4b47      	ldr	r3, [pc, #284]	; (800794c <HAL_RCC_GetSysClockFreq+0x188>)
 8007830:	fb03 f201 	mul.w	r2, r3, r1
 8007834:	2300      	movs	r3, #0
 8007836:	fb00 f303 	mul.w	r3, r0, r3
 800783a:	4413      	add	r3, r2
 800783c:	4a43      	ldr	r2, [pc, #268]	; (800794c <HAL_RCC_GetSysClockFreq+0x188>)
 800783e:	fba0 1202 	umull	r1, r2, r0, r2
 8007842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007844:	460a      	mov	r2, r1
 8007846:	62ba      	str	r2, [r7, #40]	; 0x28
 8007848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800784a:	4413      	add	r3, r2
 800784c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800784e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007850:	2200      	movs	r2, #0
 8007852:	61bb      	str	r3, [r7, #24]
 8007854:	61fa      	str	r2, [r7, #28]
 8007856:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800785a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800785e:	f7f9 fa13 	bl	8000c88 <__aeabi_uldivmod>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4613      	mov	r3, r2
 8007868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800786a:	e053      	b.n	8007914 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800786c:	4b35      	ldr	r3, [pc, #212]	; (8007944 <HAL_RCC_GetSysClockFreq+0x180>)
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	099b      	lsrs	r3, r3, #6
 8007872:	2200      	movs	r2, #0
 8007874:	613b      	str	r3, [r7, #16]
 8007876:	617a      	str	r2, [r7, #20]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800787e:	f04f 0b00 	mov.w	fp, #0
 8007882:	4652      	mov	r2, sl
 8007884:	465b      	mov	r3, fp
 8007886:	f04f 0000 	mov.w	r0, #0
 800788a:	f04f 0100 	mov.w	r1, #0
 800788e:	0159      	lsls	r1, r3, #5
 8007890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007894:	0150      	lsls	r0, r2, #5
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	ebb2 080a 	subs.w	r8, r2, sl
 800789e:	eb63 090b 	sbc.w	r9, r3, fp
 80078a2:	f04f 0200 	mov.w	r2, #0
 80078a6:	f04f 0300 	mov.w	r3, #0
 80078aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80078ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80078b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80078b6:	ebb2 0408 	subs.w	r4, r2, r8
 80078ba:	eb63 0509 	sbc.w	r5, r3, r9
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	f04f 0300 	mov.w	r3, #0
 80078c6:	00eb      	lsls	r3, r5, #3
 80078c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078cc:	00e2      	lsls	r2, r4, #3
 80078ce:	4614      	mov	r4, r2
 80078d0:	461d      	mov	r5, r3
 80078d2:	eb14 030a 	adds.w	r3, r4, sl
 80078d6:	603b      	str	r3, [r7, #0]
 80078d8:	eb45 030b 	adc.w	r3, r5, fp
 80078dc:	607b      	str	r3, [r7, #4]
 80078de:	f04f 0200 	mov.w	r2, #0
 80078e2:	f04f 0300 	mov.w	r3, #0
 80078e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078ea:	4629      	mov	r1, r5
 80078ec:	028b      	lsls	r3, r1, #10
 80078ee:	4621      	mov	r1, r4
 80078f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078f4:	4621      	mov	r1, r4
 80078f6:	028a      	lsls	r2, r1, #10
 80078f8:	4610      	mov	r0, r2
 80078fa:	4619      	mov	r1, r3
 80078fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fe:	2200      	movs	r2, #0
 8007900:	60bb      	str	r3, [r7, #8]
 8007902:	60fa      	str	r2, [r7, #12]
 8007904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007908:	f7f9 f9be 	bl	8000c88 <__aeabi_uldivmod>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	4613      	mov	r3, r2
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007914:	4b0b      	ldr	r3, [pc, #44]	; (8007944 <HAL_RCC_GetSysClockFreq+0x180>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	0c1b      	lsrs	r3, r3, #16
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	3301      	adds	r3, #1
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800792e:	e002      	b.n	8007936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007930:	4b05      	ldr	r3, [pc, #20]	; (8007948 <HAL_RCC_GetSysClockFreq+0x184>)
 8007932:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007938:	4618      	mov	r0, r3
 800793a:	3740      	adds	r7, #64	; 0x40
 800793c:	46bd      	mov	sp, r7
 800793e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007942:	bf00      	nop
 8007944:	40023800 	.word	0x40023800
 8007948:	00f42400 	.word	0x00f42400
 800794c:	017d7840 	.word	0x017d7840

08007950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007950:	b480      	push	{r7}
 8007952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007954:	4b03      	ldr	r3, [pc, #12]	; (8007964 <HAL_RCC_GetHCLKFreq+0x14>)
 8007956:	681b      	ldr	r3, [r3, #0]
}
 8007958:	4618      	mov	r0, r3
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20000008 	.word	0x20000008

08007968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800796c:	f7ff fff0 	bl	8007950 <HAL_RCC_GetHCLKFreq>
 8007970:	4602      	mov	r2, r0
 8007972:	4b05      	ldr	r3, [pc, #20]	; (8007988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	0a9b      	lsrs	r3, r3, #10
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	4903      	ldr	r1, [pc, #12]	; (800798c <HAL_RCC_GetPCLK1Freq+0x24>)
 800797e:	5ccb      	ldrb	r3, [r1, r3]
 8007980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007984:	4618      	mov	r0, r3
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40023800 	.word	0x40023800
 800798c:	0801818c 	.word	0x0801818c

08007990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007994:	f7ff ffdc 	bl	8007950 <HAL_RCC_GetHCLKFreq>
 8007998:	4602      	mov	r2, r0
 800799a:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	0b5b      	lsrs	r3, r3, #13
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	4903      	ldr	r1, [pc, #12]	; (80079b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079a6:	5ccb      	ldrb	r3, [r1, r3]
 80079a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40023800 	.word	0x40023800
 80079b4:	0801818c 	.word	0x0801818c

080079b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d105      	bne.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d035      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80079e0:	4b62      	ldr	r3, [pc, #392]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079e6:	f7fd f9c1 	bl	8004d6c <HAL_GetTick>
 80079ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079ec:	e008      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80079ee:	f7fd f9bd 	bl	8004d6c <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d901      	bls.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e0b0      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a00:	4b5b      	ldr	r3, [pc, #364]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1f0      	bne.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	019a      	lsls	r2, r3, #6
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	071b      	lsls	r3, r3, #28
 8007a18:	4955      	ldr	r1, [pc, #340]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a20:	4b52      	ldr	r3, [pc, #328]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007a22:	2201      	movs	r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a26:	f7fd f9a1 	bl	8004d6c <HAL_GetTick>
 8007a2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a2c:	e008      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a2e:	f7fd f99d 	bl	8004d6c <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d901      	bls.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e090      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a40:	4b4b      	ldr	r3, [pc, #300]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0f0      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8083 	beq.w	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	4b44      	ldr	r3, [pc, #272]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	4a43      	ldr	r2, [pc, #268]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a68:	6413      	str	r3, [r2, #64]	; 0x40
 8007a6a:	4b41      	ldr	r3, [pc, #260]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007a76:	4b3f      	ldr	r3, [pc, #252]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a3e      	ldr	r2, [pc, #248]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a82:	f7fd f973 	bl	8004d6c <HAL_GetTick>
 8007a86:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007a88:	e008      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007a8a:	f7fd f96f 	bl	8004d6c <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d901      	bls.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e062      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007a9c:	4b35      	ldr	r3, [pc, #212]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d0f0      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007aa8:	4b31      	ldr	r3, [pc, #196]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ab0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d02f      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d028      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ac6:	4b2a      	ldr	r3, [pc, #168]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ace:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ad0:	4b29      	ldr	r3, [pc, #164]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ad6:	4b28      	ldr	r3, [pc, #160]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007adc:	4a24      	ldr	r2, [pc, #144]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ae2:	4b23      	ldr	r3, [pc, #140]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d114      	bne.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007aee:	f7fd f93d 	bl	8004d6c <HAL_GetTick>
 8007af2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007af4:	e00a      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007af6:	f7fd f939 	bl	8004d6c <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e02a      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b0c:	4b18      	ldr	r3, [pc, #96]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0ee      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b24:	d10d      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007b26:	4b12      	ldr	r3, [pc, #72]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b3a:	490d      	ldr	r1, [pc, #52]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	608b      	str	r3, [r1, #8]
 8007b40:	e005      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007b42:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	4a0a      	ldr	r2, [pc, #40]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b48:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007b4c:	6093      	str	r3, [r2, #8]
 8007b4e:	4b08      	ldr	r3, [pc, #32]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b5a:	4905      	ldr	r1, [pc, #20]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	42470068 	.word	0x42470068
 8007b70:	40023800 	.word	0x40023800
 8007b74:	40007000 	.word	0x40007000
 8007b78:	42470e40 	.word	0x42470e40

08007b7c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e066      	b.n	8007c60 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	7f5b      	ldrb	r3, [r3, #29]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d105      	bne.n	8007ba8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7fc fcdc 	bl	8004560 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	22ca      	movs	r2, #202	; 0xca
 8007bb4:	625a      	str	r2, [r3, #36]	; 0x24
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2253      	movs	r2, #83	; 0x53
 8007bbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f87a 	bl	8007cb8 <RTC_EnterInitMode>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d12c      	bne.n	8007c28 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	6812      	ldr	r2, [r2, #0]
 8007bd8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6899      	ldr	r1, [r3, #8]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	68d2      	ldr	r2, [r2, #12]
 8007c08:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6919      	ldr	r1, [r3, #16]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	041a      	lsls	r2, r3, #16
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f881 	bl	8007d26 <RTC_ExitInitMode>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d113      	bne.n	8007c56 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c3c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	699a      	ldr	r2, [r3, #24]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	22ff      	movs	r2, #255	; 0xff
 8007c5c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c82:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c84:	f7fd f872 	bl	8004d6c <HAL_GetTick>
 8007c88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c8a:	e009      	b.n	8007ca0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c8c:	f7fd f86e 	bl	8004d6c <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c9a:	d901      	bls.n	8007ca0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e007      	b.n	8007cb0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f003 0320 	and.w	r3, r3, #32
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0ee      	beq.n	8007c8c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d122      	bne.n	8007d1c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ce4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ce6:	f7fd f841 	bl	8004d6c <HAL_GetTick>
 8007cea:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007cec:	e00c      	b.n	8007d08 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007cee:	f7fd f83d 	bl	8004d6c <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cfc:	d904      	bls.n	8007d08 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2204      	movs	r2, #4
 8007d02:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d102      	bne.n	8007d1c <RTC_EnterInitMode+0x64>
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d1e8      	bne.n	8007cee <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d40:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f003 0320 	and.w	r3, r3, #32
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10a      	bne.n	8007d66 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff ff89 	bl	8007c68 <HAL_RTC_WaitForSynchro>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d004      	beq.n	8007d66 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2204      	movs	r2, #4
 8007d60:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e07b      	b.n	8007e7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d108      	bne.n	8007d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d92:	d009      	beq.n	8007da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	61da      	str	r2, [r3, #28]
 8007d9a:	e005      	b.n	8007da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d106      	bne.n	8007dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7fc fbf6 	bl	80045b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007df0:	431a      	orrs	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	431a      	orrs	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2c:	ea42 0103 	orr.w	r1, r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	0c1b      	lsrs	r3, r3, #16
 8007e46:	f003 0104 	and.w	r1, r3, #4
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	f003 0210 	and.w	r2, r3, #16
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69da      	ldr	r2, [r3, #28]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b088      	sub	sp, #32
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	603b      	str	r3, [r7, #0]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d101      	bne.n	8007ea4 <HAL_SPI_Transmit+0x22>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e126      	b.n	80080f2 <HAL_SPI_Transmit+0x270>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007eac:	f7fc ff5e 	bl	8004d6c <HAL_GetTick>
 8007eb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d002      	beq.n	8007ec8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ec6:	e10b      	b.n	80080e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <HAL_SPI_Transmit+0x52>
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d102      	bne.n	8007eda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ed8:	e102      	b.n	80080e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2203      	movs	r2, #3
 8007ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	88fa      	ldrh	r2, [r7, #6]
 8007ef2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	88fa      	ldrh	r2, [r7, #6]
 8007ef8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f20:	d10f      	bne.n	8007f42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4c:	2b40      	cmp	r3, #64	; 0x40
 8007f4e:	d007      	beq.n	8007f60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f68:	d14b      	bne.n	8008002 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <HAL_SPI_Transmit+0xf6>
 8007f72:	8afb      	ldrh	r3, [r7, #22]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d13e      	bne.n	8007ff6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7c:	881a      	ldrh	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f88:	1c9a      	adds	r2, r3, #2
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007f9c:	e02b      	b.n	8007ff6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d112      	bne.n	8007fd2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb0:	881a      	ldrh	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbc:	1c9a      	adds	r2, r3, #2
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	86da      	strh	r2, [r3, #54]	; 0x36
 8007fd0:	e011      	b.n	8007ff6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fd2:	f7fc fecb 	bl	8004d6c <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d803      	bhi.n	8007fea <HAL_SPI_Transmit+0x168>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fe8:	d102      	bne.n	8007ff0 <HAL_SPI_Transmit+0x16e>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d102      	bne.n	8007ff6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ff4:	e074      	b.n	80080e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1ce      	bne.n	8007f9e <HAL_SPI_Transmit+0x11c>
 8008000:	e04c      	b.n	800809c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <HAL_SPI_Transmit+0x18e>
 800800a:	8afb      	ldrh	r3, [r7, #22]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d140      	bne.n	8008092 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	330c      	adds	r3, #12
 800801a:	7812      	ldrb	r2, [r2, #0]
 800801c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800802c:	b29b      	uxth	r3, r3
 800802e:	3b01      	subs	r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008036:	e02c      	b.n	8008092 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b02      	cmp	r3, #2
 8008044:	d113      	bne.n	800806e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	330c      	adds	r3, #12
 8008050:	7812      	ldrb	r2, [r2, #0]
 8008052:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008062:	b29b      	uxth	r3, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	b29a      	uxth	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	86da      	strh	r2, [r3, #54]	; 0x36
 800806c:	e011      	b.n	8008092 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800806e:	f7fc fe7d 	bl	8004d6c <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	429a      	cmp	r2, r3
 800807c:	d803      	bhi.n	8008086 <HAL_SPI_Transmit+0x204>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008084:	d102      	bne.n	800808c <HAL_SPI_Transmit+0x20a>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d102      	bne.n	8008092 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008090:	e026      	b.n	80080e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008096:	b29b      	uxth	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1cd      	bne.n	8008038 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 fa55 	bl	8008550 <SPI_EndRxTxTransaction>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2220      	movs	r2, #32
 80080b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10a      	bne.n	80080d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080ba:	2300      	movs	r3, #0
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	613b      	str	r3, [r7, #16]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	77fb      	strb	r3, [r7, #31]
 80080dc:	e000      	b.n	80080e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80080de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80080f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3720      	adds	r7, #32
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b08c      	sub	sp, #48	; 0x30
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	607a      	str	r2, [r7, #4]
 8008106:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008108:	2301      	movs	r3, #1
 800810a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008118:	2b01      	cmp	r3, #1
 800811a:	d101      	bne.n	8008120 <HAL_SPI_TransmitReceive+0x26>
 800811c:	2302      	movs	r3, #2
 800811e:	e18a      	b.n	8008436 <HAL_SPI_TransmitReceive+0x33c>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008128:	f7fc fe20 	bl	8004d6c <HAL_GetTick>
 800812c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800813e:	887b      	ldrh	r3, [r7, #2]
 8008140:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008146:	2b01      	cmp	r3, #1
 8008148:	d00f      	beq.n	800816a <HAL_SPI_TransmitReceive+0x70>
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008150:	d107      	bne.n	8008162 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d103      	bne.n	8008162 <HAL_SPI_TransmitReceive+0x68>
 800815a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800815e:	2b04      	cmp	r3, #4
 8008160:	d003      	beq.n	800816a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008162:	2302      	movs	r3, #2
 8008164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008168:	e15b      	b.n	8008422 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d005      	beq.n	800817c <HAL_SPI_TransmitReceive+0x82>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <HAL_SPI_TransmitReceive+0x82>
 8008176:	887b      	ldrh	r3, [r7, #2]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d103      	bne.n	8008184 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008182:	e14e      	b.n	8008422 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b04      	cmp	r3, #4
 800818e:	d003      	beq.n	8008198 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2205      	movs	r2, #5
 8008194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	887a      	ldrh	r2, [r7, #2]
 80081a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	887a      	ldrh	r2, [r7, #2]
 80081ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	887a      	ldrh	r2, [r7, #2]
 80081ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	887a      	ldrh	r2, [r7, #2]
 80081c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b40      	cmp	r3, #64	; 0x40
 80081da:	d007      	beq.n	80081ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f4:	d178      	bne.n	80082e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <HAL_SPI_TransmitReceive+0x10a>
 80081fe:	8b7b      	ldrh	r3, [r7, #26]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d166      	bne.n	80082d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008208:	881a      	ldrh	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008214:	1c9a      	adds	r2, r3, #2
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800821e:	b29b      	uxth	r3, r3
 8008220:	3b01      	subs	r3, #1
 8008222:	b29a      	uxth	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008228:	e053      	b.n	80082d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b02      	cmp	r3, #2
 8008236:	d11b      	bne.n	8008270 <HAL_SPI_TransmitReceive+0x176>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800823c:	b29b      	uxth	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d016      	beq.n	8008270 <HAL_SPI_TransmitReceive+0x176>
 8008242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008244:	2b01      	cmp	r3, #1
 8008246:	d113      	bne.n	8008270 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824c:	881a      	ldrh	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008258:	1c9a      	adds	r2, r3, #2
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008262:	b29b      	uxth	r3, r3
 8008264:	3b01      	subs	r3, #1
 8008266:	b29a      	uxth	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b01      	cmp	r3, #1
 800827c:	d119      	bne.n	80082b2 <HAL_SPI_TransmitReceive+0x1b8>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008282:	b29b      	uxth	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	d014      	beq.n	80082b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008292:	b292      	uxth	r2, r2
 8008294:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	1c9a      	adds	r2, r3, #2
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	3b01      	subs	r3, #1
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082ae:	2301      	movs	r3, #1
 80082b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80082b2:	f7fc fd5b 	bl	8004d6c <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082be:	429a      	cmp	r2, r3
 80082c0:	d807      	bhi.n	80082d2 <HAL_SPI_TransmitReceive+0x1d8>
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082c8:	d003      	beq.n	80082d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80082d0:	e0a7      	b.n	8008422 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1a6      	bne.n	800822a <HAL_SPI_TransmitReceive+0x130>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1a1      	bne.n	800822a <HAL_SPI_TransmitReceive+0x130>
 80082e6:	e07c      	b.n	80083e2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <HAL_SPI_TransmitReceive+0x1fc>
 80082f0:	8b7b      	ldrh	r3, [r7, #26]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d16b      	bne.n	80083ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	330c      	adds	r3, #12
 8008300:	7812      	ldrb	r2, [r2, #0]
 8008302:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008312:	b29b      	uxth	r3, r3
 8008314:	3b01      	subs	r3, #1
 8008316:	b29a      	uxth	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800831c:	e057      	b.n	80083ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b02      	cmp	r3, #2
 800832a:	d11c      	bne.n	8008366 <HAL_SPI_TransmitReceive+0x26c>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008330:	b29b      	uxth	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d017      	beq.n	8008366 <HAL_SPI_TransmitReceive+0x26c>
 8008336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008338:	2b01      	cmp	r3, #1
 800833a:	d114      	bne.n	8008366 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	330c      	adds	r3, #12
 8008346:	7812      	ldrb	r2, [r2, #0]
 8008348:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834e:	1c5a      	adds	r2, r3, #1
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008358:	b29b      	uxth	r3, r3
 800835a:	3b01      	subs	r3, #1
 800835c:	b29a      	uxth	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b01      	cmp	r3, #1
 8008372:	d119      	bne.n	80083a8 <HAL_SPI_TransmitReceive+0x2ae>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008378:	b29b      	uxth	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d014      	beq.n	80083a8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	b2d2      	uxtb	r2, r2
 800838a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800839a:	b29b      	uxth	r3, r3
 800839c:	3b01      	subs	r3, #1
 800839e:	b29a      	uxth	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083a4:	2301      	movs	r3, #1
 80083a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80083a8:	f7fc fce0 	bl	8004d6c <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d803      	bhi.n	80083c0 <HAL_SPI_TransmitReceive+0x2c6>
 80083b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083be:	d102      	bne.n	80083c6 <HAL_SPI_TransmitReceive+0x2cc>
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d103      	bne.n	80083ce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80083cc:	e029      	b.n	8008422 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1a2      	bne.n	800831e <HAL_SPI_TransmitReceive+0x224>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083dc:	b29b      	uxth	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d19d      	bne.n	800831e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 f8b2 	bl	8008550 <SPI_EndRxTxTransaction>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d006      	beq.n	8008400 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2220      	movs	r2, #32
 80083fc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80083fe:	e010      	b.n	8008422 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10b      	bne.n	8008420 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008408:	2300      	movs	r3, #0
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	617b      	str	r3, [r7, #20]
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	e000      	b.n	8008422 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008420:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008432:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008436:	4618      	mov	r0, r3
 8008438:	3730      	adds	r7, #48	; 0x30
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b088      	sub	sp, #32
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	4613      	mov	r3, r2
 800844e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008450:	f7fc fc8c 	bl	8004d6c <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	1a9b      	subs	r3, r3, r2
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	4413      	add	r3, r2
 800845e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008460:	f7fc fc84 	bl	8004d6c <HAL_GetTick>
 8008464:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008466:	4b39      	ldr	r3, [pc, #228]	; (800854c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	015b      	lsls	r3, r3, #5
 800846c:	0d1b      	lsrs	r3, r3, #20
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	fb02 f303 	mul.w	r3, r2, r3
 8008474:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008476:	e054      	b.n	8008522 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800847e:	d050      	beq.n	8008522 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008480:	f7fc fc74 	bl	8004d6c <HAL_GetTick>
 8008484:	4602      	mov	r2, r0
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	69fa      	ldr	r2, [r7, #28]
 800848c:	429a      	cmp	r2, r3
 800848e:	d902      	bls.n	8008496 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d13d      	bne.n	8008512 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084ae:	d111      	bne.n	80084d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084b8:	d004      	beq.n	80084c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084c2:	d107      	bne.n	80084d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084dc:	d10f      	bne.n	80084fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e017      	b.n	8008542 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	3b01      	subs	r3, #1
 8008520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4013      	ands	r3, r2
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	429a      	cmp	r2, r3
 8008530:	bf0c      	ite	eq
 8008532:	2301      	moveq	r3, #1
 8008534:	2300      	movne	r3, #0
 8008536:	b2db      	uxtb	r3, r3
 8008538:	461a      	mov	r2, r3
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	429a      	cmp	r2, r3
 800853e:	d19b      	bne.n	8008478 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3720      	adds	r7, #32
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20000008 	.word	0x20000008

08008550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af02      	add	r7, sp, #8
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800855c:	4b1b      	ldr	r3, [pc, #108]	; (80085cc <SPI_EndRxTxTransaction+0x7c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a1b      	ldr	r2, [pc, #108]	; (80085d0 <SPI_EndRxTxTransaction+0x80>)
 8008562:	fba2 2303 	umull	r2, r3, r2, r3
 8008566:	0d5b      	lsrs	r3, r3, #21
 8008568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800856c:	fb02 f303 	mul.w	r3, r2, r3
 8008570:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800857a:	d112      	bne.n	80085a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2200      	movs	r2, #0
 8008584:	2180      	movs	r1, #128	; 0x80
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f7ff ff5a 	bl	8008440 <SPI_WaitFlagStateUntilTimeout>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d016      	beq.n	80085c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008596:	f043 0220 	orr.w	r2, r3, #32
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e00f      	b.n	80085c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00a      	beq.n	80085be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	3b01      	subs	r3, #1
 80085ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b8:	2b80      	cmp	r3, #128	; 0x80
 80085ba:	d0f2      	beq.n	80085a2 <SPI_EndRxTxTransaction+0x52>
 80085bc:	e000      	b.n	80085c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80085be:	bf00      	nop
  }

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3718      	adds	r7, #24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000008 	.word	0x20000008
 80085d0:	165e9f81 	.word	0x165e9f81

080085d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e041      	b.n	800866a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d106      	bne.n	8008600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7fc f822 	bl	8004644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2202      	movs	r2, #2
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	3304      	adds	r3, #4
 8008610:	4619      	mov	r1, r3
 8008612:	4610      	mov	r0, r2
 8008614:	f000 fa10 	bl	8008a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e041      	b.n	8008708 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f839 	bl	8008710 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2202      	movs	r2, #2
 80086a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3304      	adds	r3, #4
 80086ae:	4619      	mov	r1, r3
 80086b0:	4610      	mov	r0, r2
 80086b2:	f000 f9c1 	bl	8008a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800873a:	2b01      	cmp	r3, #1
 800873c:	d101      	bne.n	8008742 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800873e:	2302      	movs	r3, #2
 8008740:	e0ae      	b.n	80088a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b0c      	cmp	r3, #12
 800874e:	f200 809f 	bhi.w	8008890 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008752:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008758:	0800878d 	.word	0x0800878d
 800875c:	08008891 	.word	0x08008891
 8008760:	08008891 	.word	0x08008891
 8008764:	08008891 	.word	0x08008891
 8008768:	080087cd 	.word	0x080087cd
 800876c:	08008891 	.word	0x08008891
 8008770:	08008891 	.word	0x08008891
 8008774:	08008891 	.word	0x08008891
 8008778:	0800880f 	.word	0x0800880f
 800877c:	08008891 	.word	0x08008891
 8008780:	08008891 	.word	0x08008891
 8008784:	08008891 	.word	0x08008891
 8008788:	0800884f 	.word	0x0800884f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	4618      	mov	r0, r3
 8008794:	f000 f9f0 	bl	8008b78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0208 	orr.w	r2, r2, #8
 80087a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	699a      	ldr	r2, [r3, #24]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0204 	bic.w	r2, r2, #4
 80087b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6999      	ldr	r1, [r3, #24]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	691a      	ldr	r2, [r3, #16]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	619a      	str	r2, [r3, #24]
      break;
 80087ca:	e064      	b.n	8008896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fa40 	bl	8008c58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699a      	ldr	r2, [r3, #24]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699a      	ldr	r2, [r3, #24]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6999      	ldr	r1, [r3, #24]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	021a      	lsls	r2, r3, #8
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	619a      	str	r2, [r3, #24]
      break;
 800880c:	e043      	b.n	8008896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fa95 	bl	8008d44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	69da      	ldr	r2, [r3, #28]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f042 0208 	orr.w	r2, r2, #8
 8008828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	69da      	ldr	r2, [r3, #28]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f022 0204 	bic.w	r2, r2, #4
 8008838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	69d9      	ldr	r1, [r3, #28]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	61da      	str	r2, [r3, #28]
      break;
 800884c:	e023      	b.n	8008896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68b9      	ldr	r1, [r7, #8]
 8008854:	4618      	mov	r0, r3
 8008856:	f000 fae9 	bl	8008e2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69da      	ldr	r2, [r3, #28]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69d9      	ldr	r1, [r3, #28]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	021a      	lsls	r2, r3, #8
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	61da      	str	r2, [r3, #28]
      break;
 800888e:	e002      	b.n	8008896 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	75fb      	strb	r3, [r7, #23]
      break;
 8008894:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800889e:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3718      	adds	r7, #24
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <HAL_TIM_ConfigClockSource+0x1c>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e0b4      	b.n	8008a2e <HAL_TIM_ConfigClockSource+0x186>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80088e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088fc:	d03e      	beq.n	800897c <HAL_TIM_ConfigClockSource+0xd4>
 80088fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008902:	f200 8087 	bhi.w	8008a14 <HAL_TIM_ConfigClockSource+0x16c>
 8008906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800890a:	f000 8086 	beq.w	8008a1a <HAL_TIM_ConfigClockSource+0x172>
 800890e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008912:	d87f      	bhi.n	8008a14 <HAL_TIM_ConfigClockSource+0x16c>
 8008914:	2b70      	cmp	r3, #112	; 0x70
 8008916:	d01a      	beq.n	800894e <HAL_TIM_ConfigClockSource+0xa6>
 8008918:	2b70      	cmp	r3, #112	; 0x70
 800891a:	d87b      	bhi.n	8008a14 <HAL_TIM_ConfigClockSource+0x16c>
 800891c:	2b60      	cmp	r3, #96	; 0x60
 800891e:	d050      	beq.n	80089c2 <HAL_TIM_ConfigClockSource+0x11a>
 8008920:	2b60      	cmp	r3, #96	; 0x60
 8008922:	d877      	bhi.n	8008a14 <HAL_TIM_ConfigClockSource+0x16c>
 8008924:	2b50      	cmp	r3, #80	; 0x50
 8008926:	d03c      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0xfa>
 8008928:	2b50      	cmp	r3, #80	; 0x50
 800892a:	d873      	bhi.n	8008a14 <HAL_TIM_ConfigClockSource+0x16c>
 800892c:	2b40      	cmp	r3, #64	; 0x40
 800892e:	d058      	beq.n	80089e2 <HAL_TIM_ConfigClockSource+0x13a>
 8008930:	2b40      	cmp	r3, #64	; 0x40
 8008932:	d86f      	bhi.n	8008a14 <HAL_TIM_ConfigClockSource+0x16c>
 8008934:	2b30      	cmp	r3, #48	; 0x30
 8008936:	d064      	beq.n	8008a02 <HAL_TIM_ConfigClockSource+0x15a>
 8008938:	2b30      	cmp	r3, #48	; 0x30
 800893a:	d86b      	bhi.n	8008a14 <HAL_TIM_ConfigClockSource+0x16c>
 800893c:	2b20      	cmp	r3, #32
 800893e:	d060      	beq.n	8008a02 <HAL_TIM_ConfigClockSource+0x15a>
 8008940:	2b20      	cmp	r3, #32
 8008942:	d867      	bhi.n	8008a14 <HAL_TIM_ConfigClockSource+0x16c>
 8008944:	2b00      	cmp	r3, #0
 8008946:	d05c      	beq.n	8008a02 <HAL_TIM_ConfigClockSource+0x15a>
 8008948:	2b10      	cmp	r3, #16
 800894a:	d05a      	beq.n	8008a02 <HAL_TIM_ConfigClockSource+0x15a>
 800894c:	e062      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6818      	ldr	r0, [r3, #0]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	6899      	ldr	r1, [r3, #8]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	f000 fb35 	bl	8008fcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	609a      	str	r2, [r3, #8]
      break;
 800897a:	e04f      	b.n	8008a1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6818      	ldr	r0, [r3, #0]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	6899      	ldr	r1, [r3, #8]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f000 fb1e 	bl	8008fcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689a      	ldr	r2, [r3, #8]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800899e:	609a      	str	r2, [r3, #8]
      break;
 80089a0:	e03c      	b.n	8008a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6818      	ldr	r0, [r3, #0]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	6859      	ldr	r1, [r3, #4]
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	461a      	mov	r2, r3
 80089b0:	f000 fa92 	bl	8008ed8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2150      	movs	r1, #80	; 0x50
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 faeb 	bl	8008f96 <TIM_ITRx_SetConfig>
      break;
 80089c0:	e02c      	b.n	8008a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	6859      	ldr	r1, [r3, #4]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	461a      	mov	r2, r3
 80089d0:	f000 fab1 	bl	8008f36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2160      	movs	r1, #96	; 0x60
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 fadb 	bl	8008f96 <TIM_ITRx_SetConfig>
      break;
 80089e0:	e01c      	b.n	8008a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	6859      	ldr	r1, [r3, #4]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f000 fa72 	bl	8008ed8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2140      	movs	r1, #64	; 0x40
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 facb 	bl	8008f96 <TIM_ITRx_SetConfig>
      break;
 8008a00:	e00c      	b.n	8008a1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	f000 fac2 	bl	8008f96 <TIM_ITRx_SetConfig>
      break;
 8008a12:	e003      	b.n	8008a1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	73fb      	strb	r3, [r7, #15]
      break;
 8008a18:	e000      	b.n	8008a1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
	...

08008a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a40      	ldr	r2, [pc, #256]	; (8008b4c <TIM_Base_SetConfig+0x114>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d013      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a56:	d00f      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a3d      	ldr	r2, [pc, #244]	; (8008b50 <TIM_Base_SetConfig+0x118>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d00b      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a3c      	ldr	r2, [pc, #240]	; (8008b54 <TIM_Base_SetConfig+0x11c>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d007      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a3b      	ldr	r2, [pc, #236]	; (8008b58 <TIM_Base_SetConfig+0x120>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d003      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a3a      	ldr	r2, [pc, #232]	; (8008b5c <TIM_Base_SetConfig+0x124>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d108      	bne.n	8008a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a2f      	ldr	r2, [pc, #188]	; (8008b4c <TIM_Base_SetConfig+0x114>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d02b      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a98:	d027      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a2c      	ldr	r2, [pc, #176]	; (8008b50 <TIM_Base_SetConfig+0x118>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d023      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a2b      	ldr	r2, [pc, #172]	; (8008b54 <TIM_Base_SetConfig+0x11c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d01f      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a2a      	ldr	r2, [pc, #168]	; (8008b58 <TIM_Base_SetConfig+0x120>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d01b      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a29      	ldr	r2, [pc, #164]	; (8008b5c <TIM_Base_SetConfig+0x124>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d017      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a28      	ldr	r2, [pc, #160]	; (8008b60 <TIM_Base_SetConfig+0x128>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d013      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a27      	ldr	r2, [pc, #156]	; (8008b64 <TIM_Base_SetConfig+0x12c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d00f      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a26      	ldr	r2, [pc, #152]	; (8008b68 <TIM_Base_SetConfig+0x130>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00b      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a25      	ldr	r2, [pc, #148]	; (8008b6c <TIM_Base_SetConfig+0x134>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d007      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a24      	ldr	r2, [pc, #144]	; (8008b70 <TIM_Base_SetConfig+0x138>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d003      	beq.n	8008aea <TIM_Base_SetConfig+0xb2>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a23      	ldr	r2, [pc, #140]	; (8008b74 <TIM_Base_SetConfig+0x13c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d108      	bne.n	8008afc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a0a      	ldr	r2, [pc, #40]	; (8008b4c <TIM_Base_SetConfig+0x114>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d003      	beq.n	8008b30 <TIM_Base_SetConfig+0xf8>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a0c      	ldr	r2, [pc, #48]	; (8008b5c <TIM_Base_SetConfig+0x124>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d103      	bne.n	8008b38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	691a      	ldr	r2, [r3, #16]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	615a      	str	r2, [r3, #20]
}
 8008b3e:	bf00      	nop
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	40010000 	.word	0x40010000
 8008b50:	40000400 	.word	0x40000400
 8008b54:	40000800 	.word	0x40000800
 8008b58:	40000c00 	.word	0x40000c00
 8008b5c:	40010400 	.word	0x40010400
 8008b60:	40014000 	.word	0x40014000
 8008b64:	40014400 	.word	0x40014400
 8008b68:	40014800 	.word	0x40014800
 8008b6c:	40001800 	.word	0x40001800
 8008b70:	40001c00 	.word	0x40001c00
 8008b74:	40002000 	.word	0x40002000

08008b78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	f023 0201 	bic.w	r2, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0303 	bic.w	r3, r3, #3
 8008bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f023 0302 	bic.w	r3, r3, #2
 8008bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a20      	ldr	r2, [pc, #128]	; (8008c50 <TIM_OC1_SetConfig+0xd8>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d003      	beq.n	8008bdc <TIM_OC1_SetConfig+0x64>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a1f      	ldr	r2, [pc, #124]	; (8008c54 <TIM_OC1_SetConfig+0xdc>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d10c      	bne.n	8008bf6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f023 0308 	bic.w	r3, r3, #8
 8008be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f023 0304 	bic.w	r3, r3, #4
 8008bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a15      	ldr	r2, [pc, #84]	; (8008c50 <TIM_OC1_SetConfig+0xd8>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d003      	beq.n	8008c06 <TIM_OC1_SetConfig+0x8e>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a14      	ldr	r2, [pc, #80]	; (8008c54 <TIM_OC1_SetConfig+0xdc>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d111      	bne.n	8008c2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	621a      	str	r2, [r3, #32]
}
 8008c44:	bf00      	nop
 8008c46:	371c      	adds	r7, #28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	40010000 	.word	0x40010000
 8008c54:	40010400 	.word	0x40010400

08008c58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	f023 0210 	bic.w	r2, r3, #16
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f023 0320 	bic.w	r3, r3, #32
 8008ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	011b      	lsls	r3, r3, #4
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a22      	ldr	r2, [pc, #136]	; (8008d3c <TIM_OC2_SetConfig+0xe4>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d003      	beq.n	8008cc0 <TIM_OC2_SetConfig+0x68>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a21      	ldr	r2, [pc, #132]	; (8008d40 <TIM_OC2_SetConfig+0xe8>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d10d      	bne.n	8008cdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a17      	ldr	r2, [pc, #92]	; (8008d3c <TIM_OC2_SetConfig+0xe4>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d003      	beq.n	8008cec <TIM_OC2_SetConfig+0x94>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a16      	ldr	r2, [pc, #88]	; (8008d40 <TIM_OC2_SetConfig+0xe8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d113      	bne.n	8008d14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	621a      	str	r2, [r3, #32]
}
 8008d2e:	bf00      	nop
 8008d30:	371c      	adds	r7, #28
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	40010000 	.word	0x40010000
 8008d40:	40010400 	.word	0x40010400

08008d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f023 0303 	bic.w	r3, r3, #3
 8008d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	021b      	lsls	r3, r3, #8
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a21      	ldr	r2, [pc, #132]	; (8008e24 <TIM_OC3_SetConfig+0xe0>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d003      	beq.n	8008daa <TIM_OC3_SetConfig+0x66>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a20      	ldr	r2, [pc, #128]	; (8008e28 <TIM_OC3_SetConfig+0xe4>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d10d      	bne.n	8008dc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	021b      	lsls	r3, r3, #8
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a16      	ldr	r2, [pc, #88]	; (8008e24 <TIM_OC3_SetConfig+0xe0>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d003      	beq.n	8008dd6 <TIM_OC3_SetConfig+0x92>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a15      	ldr	r2, [pc, #84]	; (8008e28 <TIM_OC3_SetConfig+0xe4>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d113      	bne.n	8008dfe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	621a      	str	r2, [r3, #32]
}
 8008e18:	bf00      	nop
 8008e1a:	371c      	adds	r7, #28
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	40010000 	.word	0x40010000
 8008e28:	40010400 	.word	0x40010400

08008e2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	021b      	lsls	r3, r3, #8
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	031b      	lsls	r3, r3, #12
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a12      	ldr	r2, [pc, #72]	; (8008ed0 <TIM_OC4_SetConfig+0xa4>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d003      	beq.n	8008e94 <TIM_OC4_SetConfig+0x68>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a11      	ldr	r2, [pc, #68]	; (8008ed4 <TIM_OC4_SetConfig+0xa8>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d109      	bne.n	8008ea8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	019b      	lsls	r3, r3, #6
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	621a      	str	r2, [r3, #32]
}
 8008ec2:	bf00      	nop
 8008ec4:	371c      	adds	r7, #28
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	40010000 	.word	0x40010000
 8008ed4:	40010400 	.word	0x40010400

08008ed8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	f023 0201 	bic.w	r2, r3, #1
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	011b      	lsls	r3, r3, #4
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f023 030a 	bic.w	r3, r3, #10
 8008f14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	621a      	str	r2, [r3, #32]
}
 8008f2a:	bf00      	nop
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b087      	sub	sp, #28
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	f023 0210 	bic.w	r2, r3, #16
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6a1b      	ldr	r3, [r3, #32]
 8008f58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	031b      	lsls	r3, r3, #12
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	011b      	lsls	r3, r3, #4
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	621a      	str	r2, [r3, #32]
}
 8008f8a:	bf00      	nop
 8008f8c:	371c      	adds	r7, #28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b085      	sub	sp, #20
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	f043 0307 	orr.w	r3, r3, #7
 8008fb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	609a      	str	r2, [r3, #8]
}
 8008fc0:	bf00      	nop
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	021a      	lsls	r2, r3, #8
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	609a      	str	r2, [r3, #8]
}
 8009000:	bf00      	nop
 8009002:	371c      	adds	r7, #28
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009020:	2302      	movs	r3, #2
 8009022:	e05a      	b.n	80090da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2202      	movs	r2, #2
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800904a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4313      	orrs	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a21      	ldr	r2, [pc, #132]	; (80090e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d022      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009070:	d01d      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a1d      	ldr	r2, [pc, #116]	; (80090ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d018      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a1b      	ldr	r2, [pc, #108]	; (80090f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d013      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a1a      	ldr	r2, [pc, #104]	; (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d00e      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a18      	ldr	r2, [pc, #96]	; (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d009      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a17      	ldr	r2, [pc, #92]	; (80090fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d004      	beq.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a15      	ldr	r2, [pc, #84]	; (8009100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d10c      	bne.n	80090c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	40010000 	.word	0x40010000
 80090ec:	40000400 	.word	0x40000400
 80090f0:	40000800 	.word	0x40000800
 80090f4:	40000c00 	.word	0x40000c00
 80090f8:	40010400 	.word	0x40010400
 80090fc:	40014000 	.word	0x40014000
 8009100:	40001800 	.word	0x40001800

08009104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e03f      	b.n	8009196 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d106      	bne.n	8009130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7fb fb30 	bl	8004790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2224      	movs	r2, #36	; 0x24
 8009134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f9cb 	bl	80094e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	691a      	ldr	r2, [r3, #16]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800915c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	695a      	ldr	r2, [r3, #20]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800916c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68da      	ldr	r2, [r3, #12]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800917c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2220      	movs	r2, #32
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2220      	movs	r2, #32
 8009190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b08a      	sub	sp, #40	; 0x28
 80091a2:	af02      	add	r7, sp, #8
 80091a4:	60f8      	str	r0, [r7, #12]
 80091a6:	60b9      	str	r1, [r7, #8]
 80091a8:	603b      	str	r3, [r7, #0]
 80091aa:	4613      	mov	r3, r2
 80091ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b20      	cmp	r3, #32
 80091bc:	d17c      	bne.n	80092b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <HAL_UART_Transmit+0x2c>
 80091c4:	88fb      	ldrh	r3, [r7, #6]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e075      	b.n	80092ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d101      	bne.n	80091dc <HAL_UART_Transmit+0x3e>
 80091d8:	2302      	movs	r3, #2
 80091da:	e06e      	b.n	80092ba <HAL_UART_Transmit+0x11c>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2221      	movs	r2, #33	; 0x21
 80091ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091f2:	f7fb fdbb 	bl	8004d6c <HAL_GetTick>
 80091f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	88fa      	ldrh	r2, [r7, #6]
 80091fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	88fa      	ldrh	r2, [r7, #6]
 8009202:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800920c:	d108      	bne.n	8009220 <HAL_UART_Transmit+0x82>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d104      	bne.n	8009220 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009216:	2300      	movs	r3, #0
 8009218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	61bb      	str	r3, [r7, #24]
 800921e:	e003      	b.n	8009228 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009224:	2300      	movs	r3, #0
 8009226:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009230:	e02a      	b.n	8009288 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	2200      	movs	r2, #0
 800923a:	2180      	movs	r1, #128	; 0x80
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 f8e2 	bl	8009406 <UART_WaitOnFlagUntilTimeout>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e036      	b.n	80092ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10b      	bne.n	800926a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	3302      	adds	r3, #2
 8009266:	61bb      	str	r3, [r7, #24]
 8009268:	e007      	b.n	800927a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	781a      	ldrb	r2, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	3301      	adds	r3, #1
 8009278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800927e:	b29b      	uxth	r3, r3
 8009280:	3b01      	subs	r3, #1
 8009282:	b29a      	uxth	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800928c:	b29b      	uxth	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1cf      	bne.n	8009232 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	2200      	movs	r2, #0
 800929a:	2140      	movs	r1, #64	; 0x40
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 f8b2 	bl	8009406 <UART_WaitOnFlagUntilTimeout>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e006      	b.n	80092ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2220      	movs	r2, #32
 80092b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	e000      	b.n	80092ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80092b8:	2302      	movs	r3, #2
  }
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3720      	adds	r7, #32
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b08a      	sub	sp, #40	; 0x28
 80092c6:	af02      	add	r7, sp, #8
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	603b      	str	r3, [r7, #0]
 80092ce:	4613      	mov	r3, r2
 80092d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b20      	cmp	r3, #32
 80092e0:	f040 808c 	bne.w	80093fc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d002      	beq.n	80092f0 <HAL_UART_Receive+0x2e>
 80092ea:	88fb      	ldrh	r3, [r7, #6]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e084      	b.n	80093fe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d101      	bne.n	8009302 <HAL_UART_Receive+0x40>
 80092fe:	2302      	movs	r3, #2
 8009300:	e07d      	b.n	80093fe <HAL_UART_Receive+0x13c>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2222      	movs	r2, #34	; 0x22
 8009314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800931e:	f7fb fd25 	bl	8004d6c <HAL_GetTick>
 8009322:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	88fa      	ldrh	r2, [r7, #6]
 800932e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009338:	d108      	bne.n	800934c <HAL_UART_Receive+0x8a>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d104      	bne.n	800934c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009342:	2300      	movs	r3, #0
 8009344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	61bb      	str	r3, [r7, #24]
 800934a:	e003      	b.n	8009354 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009350:	2300      	movs	r3, #0
 8009352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800935c:	e043      	b.n	80093e6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2200      	movs	r2, #0
 8009366:	2120      	movs	r1, #32
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 f84c 	bl	8009406 <UART_WaitOnFlagUntilTimeout>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e042      	b.n	80093fe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10c      	bne.n	8009398 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	b29b      	uxth	r3, r3
 8009386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938a:	b29a      	uxth	r2, r3
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	3302      	adds	r3, #2
 8009394:	61bb      	str	r3, [r7, #24]
 8009396:	e01f      	b.n	80093d8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a0:	d007      	beq.n	80093b2 <HAL_UART_Receive+0xf0>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10a      	bne.n	80093c0 <HAL_UART_Receive+0xfe>
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d106      	bne.n	80093c0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	701a      	strb	r2, [r3, #0]
 80093be:	e008      	b.n	80093d2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	3301      	adds	r3, #1
 80093d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093dc:	b29b      	uxth	r3, r3
 80093de:	3b01      	subs	r3, #1
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1b6      	bne.n	800935e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2220      	movs	r2, #32
 80093f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	e000      	b.n	80093fe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80093fc:	2302      	movs	r3, #2
  }
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3720      	adds	r7, #32
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b090      	sub	sp, #64	; 0x40
 800940a:	af00      	add	r7, sp, #0
 800940c:	60f8      	str	r0, [r7, #12]
 800940e:	60b9      	str	r1, [r7, #8]
 8009410:	603b      	str	r3, [r7, #0]
 8009412:	4613      	mov	r3, r2
 8009414:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009416:	e050      	b.n	80094ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800941a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800941e:	d04c      	beq.n	80094ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009422:	2b00      	cmp	r3, #0
 8009424:	d007      	beq.n	8009436 <UART_WaitOnFlagUntilTimeout+0x30>
 8009426:	f7fb fca1 	bl	8004d6c <HAL_GetTick>
 800942a:	4602      	mov	r2, r0
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009432:	429a      	cmp	r2, r3
 8009434:	d241      	bcs.n	80094ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	330c      	adds	r3, #12
 800943c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	e853 3f00 	ldrex	r3, [r3]
 8009444:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	330c      	adds	r3, #12
 8009454:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009456:	637a      	str	r2, [r7, #52]	; 0x34
 8009458:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800945c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800945e:	e841 2300 	strex	r3, r2, [r1]
 8009462:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1e5      	bne.n	8009436 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3314      	adds	r3, #20
 8009470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	613b      	str	r3, [r7, #16]
   return(result);
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	f023 0301 	bic.w	r3, r3, #1
 8009480:	63bb      	str	r3, [r7, #56]	; 0x38
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3314      	adds	r3, #20
 8009488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800948a:	623a      	str	r2, [r7, #32]
 800948c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948e:	69f9      	ldr	r1, [r7, #28]
 8009490:	6a3a      	ldr	r2, [r7, #32]
 8009492:	e841 2300 	strex	r3, r2, [r1]
 8009496:	61bb      	str	r3, [r7, #24]
   return(result);
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1e5      	bne.n	800946a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2220      	movs	r2, #32
 80094aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e00f      	b.n	80094da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	4013      	ands	r3, r2
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	bf0c      	ite	eq
 80094ca:	2301      	moveq	r3, #1
 80094cc:	2300      	movne	r3, #0
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	461a      	mov	r2, r3
 80094d2:	79fb      	ldrb	r3, [r7, #7]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d09f      	beq.n	8009418 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3740      	adds	r7, #64	; 0x40
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
	...

080094e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094e8:	b0c0      	sub	sp, #256	; 0x100
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80094fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009500:	68d9      	ldr	r1, [r3, #12]
 8009502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	ea40 0301 	orr.w	r3, r0, r1
 800950c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800950e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	431a      	orrs	r2, r3
 800951c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	431a      	orrs	r2, r3
 8009524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	4313      	orrs	r3, r2
 800952c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800953c:	f021 010c 	bic.w	r1, r1, #12
 8009540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800954a:	430b      	orrs	r3, r1
 800954c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800954e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800955a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800955e:	6999      	ldr	r1, [r3, #24]
 8009560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	ea40 0301 	orr.w	r3, r0, r1
 800956a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800956c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	4b8f      	ldr	r3, [pc, #572]	; (80097b0 <UART_SetConfig+0x2cc>)
 8009574:	429a      	cmp	r2, r3
 8009576:	d005      	beq.n	8009584 <UART_SetConfig+0xa0>
 8009578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	4b8d      	ldr	r3, [pc, #564]	; (80097b4 <UART_SetConfig+0x2d0>)
 8009580:	429a      	cmp	r2, r3
 8009582:	d104      	bne.n	800958e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009584:	f7fe fa04 	bl	8007990 <HAL_RCC_GetPCLK2Freq>
 8009588:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800958c:	e003      	b.n	8009596 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800958e:	f7fe f9eb 	bl	8007968 <HAL_RCC_GetPCLK1Freq>
 8009592:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095a0:	f040 810c 	bne.w	80097bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095a8:	2200      	movs	r2, #0
 80095aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095b6:	4622      	mov	r2, r4
 80095b8:	462b      	mov	r3, r5
 80095ba:	1891      	adds	r1, r2, r2
 80095bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80095be:	415b      	adcs	r3, r3
 80095c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095c6:	4621      	mov	r1, r4
 80095c8:	eb12 0801 	adds.w	r8, r2, r1
 80095cc:	4629      	mov	r1, r5
 80095ce:	eb43 0901 	adc.w	r9, r3, r1
 80095d2:	f04f 0200 	mov.w	r2, #0
 80095d6:	f04f 0300 	mov.w	r3, #0
 80095da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095e6:	4690      	mov	r8, r2
 80095e8:	4699      	mov	r9, r3
 80095ea:	4623      	mov	r3, r4
 80095ec:	eb18 0303 	adds.w	r3, r8, r3
 80095f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80095f4:	462b      	mov	r3, r5
 80095f6:	eb49 0303 	adc.w	r3, r9, r3
 80095fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80095fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800960a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800960e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009612:	460b      	mov	r3, r1
 8009614:	18db      	adds	r3, r3, r3
 8009616:	653b      	str	r3, [r7, #80]	; 0x50
 8009618:	4613      	mov	r3, r2
 800961a:	eb42 0303 	adc.w	r3, r2, r3
 800961e:	657b      	str	r3, [r7, #84]	; 0x54
 8009620:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009624:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009628:	f7f7 fb2e 	bl	8000c88 <__aeabi_uldivmod>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	4b61      	ldr	r3, [pc, #388]	; (80097b8 <UART_SetConfig+0x2d4>)
 8009632:	fba3 2302 	umull	r2, r3, r3, r2
 8009636:	095b      	lsrs	r3, r3, #5
 8009638:	011c      	lsls	r4, r3, #4
 800963a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800963e:	2200      	movs	r2, #0
 8009640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009644:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009648:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800964c:	4642      	mov	r2, r8
 800964e:	464b      	mov	r3, r9
 8009650:	1891      	adds	r1, r2, r2
 8009652:	64b9      	str	r1, [r7, #72]	; 0x48
 8009654:	415b      	adcs	r3, r3
 8009656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009658:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800965c:	4641      	mov	r1, r8
 800965e:	eb12 0a01 	adds.w	sl, r2, r1
 8009662:	4649      	mov	r1, r9
 8009664:	eb43 0b01 	adc.w	fp, r3, r1
 8009668:	f04f 0200 	mov.w	r2, #0
 800966c:	f04f 0300 	mov.w	r3, #0
 8009670:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009674:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009678:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800967c:	4692      	mov	sl, r2
 800967e:	469b      	mov	fp, r3
 8009680:	4643      	mov	r3, r8
 8009682:	eb1a 0303 	adds.w	r3, sl, r3
 8009686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800968a:	464b      	mov	r3, r9
 800968c:	eb4b 0303 	adc.w	r3, fp, r3
 8009690:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096a8:	460b      	mov	r3, r1
 80096aa:	18db      	adds	r3, r3, r3
 80096ac:	643b      	str	r3, [r7, #64]	; 0x40
 80096ae:	4613      	mov	r3, r2
 80096b0:	eb42 0303 	adc.w	r3, r2, r3
 80096b4:	647b      	str	r3, [r7, #68]	; 0x44
 80096b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096be:	f7f7 fae3 	bl	8000c88 <__aeabi_uldivmod>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4611      	mov	r1, r2
 80096c8:	4b3b      	ldr	r3, [pc, #236]	; (80097b8 <UART_SetConfig+0x2d4>)
 80096ca:	fba3 2301 	umull	r2, r3, r3, r1
 80096ce:	095b      	lsrs	r3, r3, #5
 80096d0:	2264      	movs	r2, #100	; 0x64
 80096d2:	fb02 f303 	mul.w	r3, r2, r3
 80096d6:	1acb      	subs	r3, r1, r3
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80096de:	4b36      	ldr	r3, [pc, #216]	; (80097b8 <UART_SetConfig+0x2d4>)
 80096e0:	fba3 2302 	umull	r2, r3, r3, r2
 80096e4:	095b      	lsrs	r3, r3, #5
 80096e6:	005b      	lsls	r3, r3, #1
 80096e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80096ec:	441c      	add	r4, r3
 80096ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096f2:	2200      	movs	r2, #0
 80096f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80096fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009700:	4642      	mov	r2, r8
 8009702:	464b      	mov	r3, r9
 8009704:	1891      	adds	r1, r2, r2
 8009706:	63b9      	str	r1, [r7, #56]	; 0x38
 8009708:	415b      	adcs	r3, r3
 800970a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800970c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009710:	4641      	mov	r1, r8
 8009712:	1851      	adds	r1, r2, r1
 8009714:	6339      	str	r1, [r7, #48]	; 0x30
 8009716:	4649      	mov	r1, r9
 8009718:	414b      	adcs	r3, r1
 800971a:	637b      	str	r3, [r7, #52]	; 0x34
 800971c:	f04f 0200 	mov.w	r2, #0
 8009720:	f04f 0300 	mov.w	r3, #0
 8009724:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009728:	4659      	mov	r1, fp
 800972a:	00cb      	lsls	r3, r1, #3
 800972c:	4651      	mov	r1, sl
 800972e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009732:	4651      	mov	r1, sl
 8009734:	00ca      	lsls	r2, r1, #3
 8009736:	4610      	mov	r0, r2
 8009738:	4619      	mov	r1, r3
 800973a:	4603      	mov	r3, r0
 800973c:	4642      	mov	r2, r8
 800973e:	189b      	adds	r3, r3, r2
 8009740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009744:	464b      	mov	r3, r9
 8009746:	460a      	mov	r2, r1
 8009748:	eb42 0303 	adc.w	r3, r2, r3
 800974c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800975c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009760:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009764:	460b      	mov	r3, r1
 8009766:	18db      	adds	r3, r3, r3
 8009768:	62bb      	str	r3, [r7, #40]	; 0x28
 800976a:	4613      	mov	r3, r2
 800976c:	eb42 0303 	adc.w	r3, r2, r3
 8009770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009772:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009776:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800977a:	f7f7 fa85 	bl	8000c88 <__aeabi_uldivmod>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4b0d      	ldr	r3, [pc, #52]	; (80097b8 <UART_SetConfig+0x2d4>)
 8009784:	fba3 1302 	umull	r1, r3, r3, r2
 8009788:	095b      	lsrs	r3, r3, #5
 800978a:	2164      	movs	r1, #100	; 0x64
 800978c:	fb01 f303 	mul.w	r3, r1, r3
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	00db      	lsls	r3, r3, #3
 8009794:	3332      	adds	r3, #50	; 0x32
 8009796:	4a08      	ldr	r2, [pc, #32]	; (80097b8 <UART_SetConfig+0x2d4>)
 8009798:	fba2 2303 	umull	r2, r3, r2, r3
 800979c:	095b      	lsrs	r3, r3, #5
 800979e:	f003 0207 	and.w	r2, r3, #7
 80097a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4422      	add	r2, r4
 80097aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097ac:	e106      	b.n	80099bc <UART_SetConfig+0x4d8>
 80097ae:	bf00      	nop
 80097b0:	40011000 	.word	0x40011000
 80097b4:	40011400 	.word	0x40011400
 80097b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097c0:	2200      	movs	r2, #0
 80097c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80097ce:	4642      	mov	r2, r8
 80097d0:	464b      	mov	r3, r9
 80097d2:	1891      	adds	r1, r2, r2
 80097d4:	6239      	str	r1, [r7, #32]
 80097d6:	415b      	adcs	r3, r3
 80097d8:	627b      	str	r3, [r7, #36]	; 0x24
 80097da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097de:	4641      	mov	r1, r8
 80097e0:	1854      	adds	r4, r2, r1
 80097e2:	4649      	mov	r1, r9
 80097e4:	eb43 0501 	adc.w	r5, r3, r1
 80097e8:	f04f 0200 	mov.w	r2, #0
 80097ec:	f04f 0300 	mov.w	r3, #0
 80097f0:	00eb      	lsls	r3, r5, #3
 80097f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097f6:	00e2      	lsls	r2, r4, #3
 80097f8:	4614      	mov	r4, r2
 80097fa:	461d      	mov	r5, r3
 80097fc:	4643      	mov	r3, r8
 80097fe:	18e3      	adds	r3, r4, r3
 8009800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009804:	464b      	mov	r3, r9
 8009806:	eb45 0303 	adc.w	r3, r5, r3
 800980a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800980e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800981a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800981e:	f04f 0200 	mov.w	r2, #0
 8009822:	f04f 0300 	mov.w	r3, #0
 8009826:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800982a:	4629      	mov	r1, r5
 800982c:	008b      	lsls	r3, r1, #2
 800982e:	4621      	mov	r1, r4
 8009830:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009834:	4621      	mov	r1, r4
 8009836:	008a      	lsls	r2, r1, #2
 8009838:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800983c:	f7f7 fa24 	bl	8000c88 <__aeabi_uldivmod>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4b60      	ldr	r3, [pc, #384]	; (80099c8 <UART_SetConfig+0x4e4>)
 8009846:	fba3 2302 	umull	r2, r3, r3, r2
 800984a:	095b      	lsrs	r3, r3, #5
 800984c:	011c      	lsls	r4, r3, #4
 800984e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009852:	2200      	movs	r2, #0
 8009854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009858:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800985c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009860:	4642      	mov	r2, r8
 8009862:	464b      	mov	r3, r9
 8009864:	1891      	adds	r1, r2, r2
 8009866:	61b9      	str	r1, [r7, #24]
 8009868:	415b      	adcs	r3, r3
 800986a:	61fb      	str	r3, [r7, #28]
 800986c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009870:	4641      	mov	r1, r8
 8009872:	1851      	adds	r1, r2, r1
 8009874:	6139      	str	r1, [r7, #16]
 8009876:	4649      	mov	r1, r9
 8009878:	414b      	adcs	r3, r1
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	f04f 0200 	mov.w	r2, #0
 8009880:	f04f 0300 	mov.w	r3, #0
 8009884:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009888:	4659      	mov	r1, fp
 800988a:	00cb      	lsls	r3, r1, #3
 800988c:	4651      	mov	r1, sl
 800988e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009892:	4651      	mov	r1, sl
 8009894:	00ca      	lsls	r2, r1, #3
 8009896:	4610      	mov	r0, r2
 8009898:	4619      	mov	r1, r3
 800989a:	4603      	mov	r3, r0
 800989c:	4642      	mov	r2, r8
 800989e:	189b      	adds	r3, r3, r2
 80098a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098a4:	464b      	mov	r3, r9
 80098a6:	460a      	mov	r2, r1
 80098a8:	eb42 0303 	adc.w	r3, r2, r3
 80098ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80098ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098bc:	f04f 0200 	mov.w	r2, #0
 80098c0:	f04f 0300 	mov.w	r3, #0
 80098c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098c8:	4649      	mov	r1, r9
 80098ca:	008b      	lsls	r3, r1, #2
 80098cc:	4641      	mov	r1, r8
 80098ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098d2:	4641      	mov	r1, r8
 80098d4:	008a      	lsls	r2, r1, #2
 80098d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80098da:	f7f7 f9d5 	bl	8000c88 <__aeabi_uldivmod>
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4611      	mov	r1, r2
 80098e4:	4b38      	ldr	r3, [pc, #224]	; (80099c8 <UART_SetConfig+0x4e4>)
 80098e6:	fba3 2301 	umull	r2, r3, r3, r1
 80098ea:	095b      	lsrs	r3, r3, #5
 80098ec:	2264      	movs	r2, #100	; 0x64
 80098ee:	fb02 f303 	mul.w	r3, r2, r3
 80098f2:	1acb      	subs	r3, r1, r3
 80098f4:	011b      	lsls	r3, r3, #4
 80098f6:	3332      	adds	r3, #50	; 0x32
 80098f8:	4a33      	ldr	r2, [pc, #204]	; (80099c8 <UART_SetConfig+0x4e4>)
 80098fa:	fba2 2303 	umull	r2, r3, r2, r3
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009904:	441c      	add	r4, r3
 8009906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800990a:	2200      	movs	r2, #0
 800990c:	673b      	str	r3, [r7, #112]	; 0x70
 800990e:	677a      	str	r2, [r7, #116]	; 0x74
 8009910:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009914:	4642      	mov	r2, r8
 8009916:	464b      	mov	r3, r9
 8009918:	1891      	adds	r1, r2, r2
 800991a:	60b9      	str	r1, [r7, #8]
 800991c:	415b      	adcs	r3, r3
 800991e:	60fb      	str	r3, [r7, #12]
 8009920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009924:	4641      	mov	r1, r8
 8009926:	1851      	adds	r1, r2, r1
 8009928:	6039      	str	r1, [r7, #0]
 800992a:	4649      	mov	r1, r9
 800992c:	414b      	adcs	r3, r1
 800992e:	607b      	str	r3, [r7, #4]
 8009930:	f04f 0200 	mov.w	r2, #0
 8009934:	f04f 0300 	mov.w	r3, #0
 8009938:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800993c:	4659      	mov	r1, fp
 800993e:	00cb      	lsls	r3, r1, #3
 8009940:	4651      	mov	r1, sl
 8009942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009946:	4651      	mov	r1, sl
 8009948:	00ca      	lsls	r2, r1, #3
 800994a:	4610      	mov	r0, r2
 800994c:	4619      	mov	r1, r3
 800994e:	4603      	mov	r3, r0
 8009950:	4642      	mov	r2, r8
 8009952:	189b      	adds	r3, r3, r2
 8009954:	66bb      	str	r3, [r7, #104]	; 0x68
 8009956:	464b      	mov	r3, r9
 8009958:	460a      	mov	r2, r1
 800995a:	eb42 0303 	adc.w	r3, r2, r3
 800995e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	663b      	str	r3, [r7, #96]	; 0x60
 800996a:	667a      	str	r2, [r7, #100]	; 0x64
 800996c:	f04f 0200 	mov.w	r2, #0
 8009970:	f04f 0300 	mov.w	r3, #0
 8009974:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009978:	4649      	mov	r1, r9
 800997a:	008b      	lsls	r3, r1, #2
 800997c:	4641      	mov	r1, r8
 800997e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009982:	4641      	mov	r1, r8
 8009984:	008a      	lsls	r2, r1, #2
 8009986:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800998a:	f7f7 f97d 	bl	8000c88 <__aeabi_uldivmod>
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	4b0d      	ldr	r3, [pc, #52]	; (80099c8 <UART_SetConfig+0x4e4>)
 8009994:	fba3 1302 	umull	r1, r3, r3, r2
 8009998:	095b      	lsrs	r3, r3, #5
 800999a:	2164      	movs	r1, #100	; 0x64
 800999c:	fb01 f303 	mul.w	r3, r1, r3
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	011b      	lsls	r3, r3, #4
 80099a4:	3332      	adds	r3, #50	; 0x32
 80099a6:	4a08      	ldr	r2, [pc, #32]	; (80099c8 <UART_SetConfig+0x4e4>)
 80099a8:	fba2 2303 	umull	r2, r3, r2, r3
 80099ac:	095b      	lsrs	r3, r3, #5
 80099ae:	f003 020f 	and.w	r2, r3, #15
 80099b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4422      	add	r2, r4
 80099ba:	609a      	str	r2, [r3, #8]
}
 80099bc:	bf00      	nop
 80099be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099c2:	46bd      	mov	sp, r7
 80099c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099c8:	51eb851f 	.word	0x51eb851f

080099cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80099d0:	4904      	ldr	r1, [pc, #16]	; (80099e4 <MX_FATFS_Init+0x18>)
 80099d2:	4805      	ldr	r0, [pc, #20]	; (80099e8 <MX_FATFS_Init+0x1c>)
 80099d4:	f000 ff0e 	bl	800a7f4 <FATFS_LinkDriver>
 80099d8:	4603      	mov	r3, r0
 80099da:	461a      	mov	r2, r3
 80099dc:	4b03      	ldr	r3, [pc, #12]	; (80099ec <MX_FATFS_Init+0x20>)
 80099de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80099e0:	bf00      	nop
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	20002cc4 	.word	0x20002cc4
 80099e8:	20000014 	.word	0x20000014
 80099ec:	20002cc0 	.word	0x20002cc0

080099f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7f9 f9e7 	bl	8002dd0 <SD_disk_initialize>
 8009a02:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	4603      	mov	r3, r0
 8009a14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8009a16:	79fb      	ldrb	r3, [r7, #7]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7f9 fabf 	bl	8002f9c <SD_disk_status>
 8009a1e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60b9      	str	r1, [r7, #8]
 8009a30:	607a      	str	r2, [r7, #4]
 8009a32:	603b      	str	r3, [r7, #0]
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8009a38:	7bf8      	ldrb	r0, [r7, #15]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	68b9      	ldr	r1, [r7, #8]
 8009a40:	f7f9 fac2 	bl	8002fc8 <SD_disk_read>
 8009a44:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
 8009a58:	603b      	str	r3, [r7, #0]
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8009a5e:	7bf8      	ldrb	r0, [r7, #15]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	f7f9 fb19 	bl	800309c <SD_disk_write>
 8009a6a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	603a      	str	r2, [r7, #0]
 8009a7e:	71fb      	strb	r3, [r7, #7]
 8009a80:	460b      	mov	r3, r1
 8009a82:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8009a84:	79b9      	ldrb	r1, [r7, #6]
 8009a86:	79fb      	ldrb	r3, [r7, #7]
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7f9 fb8a 	bl	80031a4 <SD_disk_ioctl>
 8009a90:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
	...

08009a9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009aa6:	79fb      	ldrb	r3, [r7, #7]
 8009aa8:	4a08      	ldr	r2, [pc, #32]	; (8009acc <disk_status+0x30>)
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	79fa      	ldrb	r2, [r7, #7]
 8009ab4:	4905      	ldr	r1, [pc, #20]	; (8009acc <disk_status+0x30>)
 8009ab6:	440a      	add	r2, r1
 8009ab8:	7a12      	ldrb	r2, [r2, #8]
 8009aba:	4610      	mov	r0, r2
 8009abc:	4798      	blx	r3
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	20002ef0 	.word	0x20002ef0

08009ad0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009ade:	79fb      	ldrb	r3, [r7, #7]
 8009ae0:	4a0d      	ldr	r2, [pc, #52]	; (8009b18 <disk_initialize+0x48>)
 8009ae2:	5cd3      	ldrb	r3, [r2, r3]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d111      	bne.n	8009b0c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009ae8:	79fb      	ldrb	r3, [r7, #7]
 8009aea:	4a0b      	ldr	r2, [pc, #44]	; (8009b18 <disk_initialize+0x48>)
 8009aec:	2101      	movs	r1, #1
 8009aee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009af0:	79fb      	ldrb	r3, [r7, #7]
 8009af2:	4a09      	ldr	r2, [pc, #36]	; (8009b18 <disk_initialize+0x48>)
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	79fa      	ldrb	r2, [r7, #7]
 8009afe:	4906      	ldr	r1, [pc, #24]	; (8009b18 <disk_initialize+0x48>)
 8009b00:	440a      	add	r2, r1
 8009b02:	7a12      	ldrb	r2, [r2, #8]
 8009b04:	4610      	mov	r0, r2
 8009b06:	4798      	blx	r3
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	20002ef0 	.word	0x20002ef0

08009b1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009b1c:	b590      	push	{r4, r7, lr}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60b9      	str	r1, [r7, #8]
 8009b24:	607a      	str	r2, [r7, #4]
 8009b26:	603b      	str	r3, [r7, #0]
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	4a0a      	ldr	r2, [pc, #40]	; (8009b58 <disk_read+0x3c>)
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	689c      	ldr	r4, [r3, #8]
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
 8009b3a:	4a07      	ldr	r2, [pc, #28]	; (8009b58 <disk_read+0x3c>)
 8009b3c:	4413      	add	r3, r2
 8009b3e:	7a18      	ldrb	r0, [r3, #8]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	68b9      	ldr	r1, [r7, #8]
 8009b46:	47a0      	blx	r4
 8009b48:	4603      	mov	r3, r0
 8009b4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	371c      	adds	r7, #28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd90      	pop	{r4, r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20002ef0 	.word	0x20002ef0

08009b5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009b5c:	b590      	push	{r4, r7, lr}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
 8009b66:	603b      	str	r3, [r7, #0]
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	4a0a      	ldr	r2, [pc, #40]	; (8009b98 <disk_write+0x3c>)
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4413      	add	r3, r2
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	68dc      	ldr	r4, [r3, #12]
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	4a07      	ldr	r2, [pc, #28]	; (8009b98 <disk_write+0x3c>)
 8009b7c:	4413      	add	r3, r2
 8009b7e:	7a18      	ldrb	r0, [r3, #8]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	68b9      	ldr	r1, [r7, #8]
 8009b86:	47a0      	blx	r4
 8009b88:	4603      	mov	r3, r0
 8009b8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	371c      	adds	r7, #28
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd90      	pop	{r4, r7, pc}
 8009b96:	bf00      	nop
 8009b98:	20002ef0 	.word	0x20002ef0

08009b9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	603a      	str	r2, [r7, #0]
 8009ba6:	71fb      	strb	r3, [r7, #7]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009bac:	79fb      	ldrb	r3, [r7, #7]
 8009bae:	4a09      	ldr	r2, [pc, #36]	; (8009bd4 <disk_ioctl+0x38>)
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	79fa      	ldrb	r2, [r7, #7]
 8009bba:	4906      	ldr	r1, [pc, #24]	; (8009bd4 <disk_ioctl+0x38>)
 8009bbc:	440a      	add	r2, r1
 8009bbe:	7a10      	ldrb	r0, [r2, #8]
 8009bc0:	79b9      	ldrb	r1, [r7, #6]
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	4798      	blx	r3
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	73fb      	strb	r3, [r7, #15]
  return res;
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20002ef0 	.word	0x20002ef0

08009bd8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3301      	adds	r3, #1
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009be8:	89fb      	ldrh	r3, [r7, #14]
 8009bea:	021b      	lsls	r3, r3, #8
 8009bec:	b21a      	sxth	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	b21b      	sxth	r3, r3
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	b21b      	sxth	r3, r3
 8009bf8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009bfa:	89fb      	ldrh	r3, [r7, #14]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3303      	adds	r3, #3
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	021b      	lsls	r3, r3, #8
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	3202      	adds	r2, #2
 8009c20:	7812      	ldrb	r2, [r2, #0]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	021b      	lsls	r3, r3, #8
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	3201      	adds	r2, #1
 8009c2e:	7812      	ldrb	r2, [r2, #0]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	7812      	ldrb	r2, [r2, #0]
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009c40:	68fb      	ldr	r3, [r7, #12]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
	...

08009c50 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c58:	2300      	movs	r3, #0
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	e010      	b.n	8009c80 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c5e:	4a0d      	ldr	r2, [pc, #52]	; (8009c94 <clear_lock+0x44>)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	011b      	lsls	r3, r3, #4
 8009c64:	4413      	add	r3, r2
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d105      	bne.n	8009c7a <clear_lock+0x2a>
 8009c6e:	4a09      	ldr	r2, [pc, #36]	; (8009c94 <clear_lock+0x44>)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	4413      	add	r3, r2
 8009c76:	2200      	movs	r2, #0
 8009c78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d9eb      	bls.n	8009c5e <clear_lock+0xe>
	}
}
 8009c86:	bf00      	nop
 8009c88:	bf00      	nop
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	20002cd0 	.word	0x20002cd0

08009c98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	78db      	ldrb	r3, [r3, #3]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d034      	beq.n	8009d16 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	7858      	ldrb	r0, [r3, #1]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	f7ff ff4c 	bl	8009b5c <disk_write>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	73fb      	strb	r3, [r7, #15]
 8009cce:	e022      	b.n	8009d16 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	1ad2      	subs	r2, r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d217      	bcs.n	8009d16 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	789b      	ldrb	r3, [r3, #2]
 8009cea:	613b      	str	r3, [r7, #16]
 8009cec:	e010      	b.n	8009d10 <sync_window+0x78>
					wsect += fs->fsize;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	7858      	ldrb	r0, [r3, #1]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d02:	2301      	movs	r3, #1
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	f7ff ff29 	bl	8009b5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	613b      	str	r3, [r7, #16]
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d8eb      	bhi.n	8009cee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d01b      	beq.n	8009d70 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff ffad 	bl	8009c98 <sync_window>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d113      	bne.n	8009d70 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	7858      	ldrb	r0, [r3, #1]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d52:	2301      	movs	r3, #1
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	f7ff fee1 	bl	8009b1c <disk_read>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d004      	beq.n	8009d6a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d64:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	683a      	ldr	r2, [r7, #0]
 8009d6e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b086      	sub	sp, #24
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d904      	bls.n	8009d9a <get_fat+0x20>
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d302      	bcc.n	8009da0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	617b      	str	r3, [r7, #20]
 8009d9e:	e0bb      	b.n	8009f18 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009da4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2b03      	cmp	r3, #3
 8009dac:	f000 8083 	beq.w	8009eb6 <get_fat+0x13c>
 8009db0:	2b03      	cmp	r3, #3
 8009db2:	f300 80a7 	bgt.w	8009f04 <get_fat+0x18a>
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d002      	beq.n	8009dc0 <get_fat+0x46>
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d056      	beq.n	8009e6c <get_fat+0xf2>
 8009dbe:	e0a1      	b.n	8009f04 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	085b      	lsrs	r3, r3, #1
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4413      	add	r3, r2
 8009dcc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	899b      	ldrh	r3, [r3, #12]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8009dde:	4413      	add	r3, r2
 8009de0:	4619      	mov	r1, r3
 8009de2:	6938      	ldr	r0, [r7, #16]
 8009de4:	f7ff ff9c 	bl	8009d20 <move_window>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f040 808d 	bne.w	8009f0a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	60fa      	str	r2, [r7, #12]
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	8992      	ldrh	r2, [r2, #12]
 8009dfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dfe:	fb01 f202 	mul.w	r2, r1, r2
 8009e02:	1a9b      	subs	r3, r3, r2
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	4413      	add	r3, r2
 8009e08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	899b      	ldrh	r3, [r3, #12]
 8009e16:	4619      	mov	r1, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e1e:	4413      	add	r3, r2
 8009e20:	4619      	mov	r1, r3
 8009e22:	6938      	ldr	r0, [r7, #16]
 8009e24:	f7ff ff7c 	bl	8009d20 <move_window>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d16f      	bne.n	8009f0e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	899b      	ldrh	r3, [r3, #12]
 8009e32:	461a      	mov	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e3a:	fb01 f202 	mul.w	r2, r1, r2
 8009e3e:	1a9b      	subs	r3, r3, r2
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	4413      	add	r3, r2
 8009e44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e48:	021b      	lsls	r3, r3, #8
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	f003 0301 	and.w	r3, r3, #1
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <get_fat+0xe8>
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	091b      	lsrs	r3, r3, #4
 8009e60:	e002      	b.n	8009e68 <get_fat+0xee>
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e68:	617b      	str	r3, [r7, #20]
			break;
 8009e6a:	e055      	b.n	8009f18 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	899b      	ldrh	r3, [r3, #12]
 8009e74:	085b      	lsrs	r3, r3, #1
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	4619      	mov	r1, r3
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e80:	4413      	add	r3, r2
 8009e82:	4619      	mov	r1, r3
 8009e84:	6938      	ldr	r0, [r7, #16]
 8009e86:	f7ff ff4b 	bl	8009d20 <move_window>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d140      	bne.n	8009f12 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	005b      	lsls	r3, r3, #1
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	8992      	ldrh	r2, [r2, #12]
 8009e9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ea2:	fb00 f202 	mul.w	r2, r0, r2
 8009ea6:	1a9b      	subs	r3, r3, r2
 8009ea8:	440b      	add	r3, r1
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7ff fe94 	bl	8009bd8 <ld_word>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	617b      	str	r3, [r7, #20]
			break;
 8009eb4:	e030      	b.n	8009f18 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	899b      	ldrh	r3, [r3, #12]
 8009ebe:	089b      	lsrs	r3, r3, #2
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009eca:	4413      	add	r3, r2
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6938      	ldr	r0, [r7, #16]
 8009ed0:	f7ff ff26 	bl	8009d20 <move_window>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d11d      	bne.n	8009f16 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	8992      	ldrh	r2, [r2, #12]
 8009ee8:	fbb3 f0f2 	udiv	r0, r3, r2
 8009eec:	fb00 f202 	mul.w	r2, r0, r2
 8009ef0:	1a9b      	subs	r3, r3, r2
 8009ef2:	440b      	add	r3, r1
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7ff fe87 	bl	8009c08 <ld_dword>
 8009efa:	4603      	mov	r3, r0
 8009efc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009f00:	617b      	str	r3, [r7, #20]
			break;
 8009f02:	e009      	b.n	8009f18 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009f04:	2301      	movs	r3, #1
 8009f06:	617b      	str	r3, [r7, #20]
 8009f08:	e006      	b.n	8009f18 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f0a:	bf00      	nop
 8009f0c:	e004      	b.n	8009f18 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f0e:	bf00      	nop
 8009f10:	e002      	b.n	8009f18 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009f12:	bf00      	nop
 8009f14:	e000      	b.n	8009f18 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009f16:	bf00      	nop
		}
	}

	return val;
 8009f18:	697b      	ldr	r3, [r7, #20]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3718      	adds	r7, #24
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009f22:	b480      	push	{r7}
 8009f24:	b087      	sub	sp, #28
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f2e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d031      	beq.n	8009f9c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	617b      	str	r3, [r7, #20]
 8009f3e:	e002      	b.n	8009f46 <get_ldnumber+0x24>
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	3301      	adds	r3, #1
 8009f44:	617b      	str	r3, [r7, #20]
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	2b1f      	cmp	r3, #31
 8009f4c:	d903      	bls.n	8009f56 <get_ldnumber+0x34>
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	2b3a      	cmp	r3, #58	; 0x3a
 8009f54:	d1f4      	bne.n	8009f40 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	2b3a      	cmp	r3, #58	; 0x3a
 8009f5c:	d11c      	bne.n	8009f98 <get_ldnumber+0x76>
			tp = *path;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	60fa      	str	r2, [r7, #12]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	3b30      	subs	r3, #48	; 0x30
 8009f6e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	2b09      	cmp	r3, #9
 8009f74:	d80e      	bhi.n	8009f94 <get_ldnumber+0x72>
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d10a      	bne.n	8009f94 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d107      	bne.n	8009f94 <get_ldnumber+0x72>
					vol = (int)i;
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	617b      	str	r3, [r7, #20]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	e002      	b.n	8009f9e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009f98:	2300      	movs	r3, #0
 8009f9a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009f9c:	693b      	ldr	r3, [r7, #16]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
	...

08009fac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	70da      	strb	r2, [r3, #3]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fc2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff feaa 	bl	8009d20 <move_window>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <check_fs+0x2a>
 8009fd2:	2304      	movs	r3, #4
 8009fd4:	e038      	b.n	800a048 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	3338      	adds	r3, #56	; 0x38
 8009fda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7ff fdfa 	bl	8009bd8 <ld_word>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d001      	beq.n	8009ff4 <check_fs+0x48>
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e029      	b.n	800a048 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ffa:	2be9      	cmp	r3, #233	; 0xe9
 8009ffc:	d009      	beq.n	800a012 <check_fs+0x66>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a004:	2beb      	cmp	r3, #235	; 0xeb
 800a006:	d11e      	bne.n	800a046 <check_fs+0x9a>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a00e:	2b90      	cmp	r3, #144	; 0x90
 800a010:	d119      	bne.n	800a046 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	3338      	adds	r3, #56	; 0x38
 800a016:	3336      	adds	r3, #54	; 0x36
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff fdf5 	bl	8009c08 <ld_dword>
 800a01e:	4603      	mov	r3, r0
 800a020:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a024:	4a0a      	ldr	r2, [pc, #40]	; (800a050 <check_fs+0xa4>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d101      	bne.n	800a02e <check_fs+0x82>
 800a02a:	2300      	movs	r3, #0
 800a02c:	e00c      	b.n	800a048 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3338      	adds	r3, #56	; 0x38
 800a032:	3352      	adds	r3, #82	; 0x52
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff fde7 	bl	8009c08 <ld_dword>
 800a03a:	4603      	mov	r3, r0
 800a03c:	4a05      	ldr	r2, [pc, #20]	; (800a054 <check_fs+0xa8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d101      	bne.n	800a046 <check_fs+0x9a>
 800a042:	2300      	movs	r3, #0
 800a044:	e000      	b.n	800a048 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a046:	2302      	movs	r3, #2
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	00544146 	.word	0x00544146
 800a054:	33544146 	.word	0x33544146

0800a058 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b096      	sub	sp, #88	; 0x58
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	4613      	mov	r3, r2
 800a064:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f7ff ff58 	bl	8009f22 <get_ldnumber>
 800a072:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a076:	2b00      	cmp	r3, #0
 800a078:	da01      	bge.n	800a07e <find_volume+0x26>
 800a07a:	230b      	movs	r3, #11
 800a07c:	e265      	b.n	800a54a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a07e:	4a9f      	ldr	r2, [pc, #636]	; (800a2fc <find_volume+0x2a4>)
 800a080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a086:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <find_volume+0x3a>
 800a08e:	230c      	movs	r3, #12
 800a090:	e25b      	b.n	800a54a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a096:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a098:	79fb      	ldrb	r3, [r7, #7]
 800a09a:	f023 0301 	bic.w	r3, r3, #1
 800a09e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d01a      	beq.n	800a0de <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0aa:	785b      	ldrb	r3, [r3, #1]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7ff fcf5 	bl	8009a9c <disk_status>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a0b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0bc:	f003 0301 	and.w	r3, r3, #1
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10c      	bne.n	800a0de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a0c4:	79fb      	ldrb	r3, [r7, #7]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d007      	beq.n	800a0da <find_volume+0x82>
 800a0ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0ce:	f003 0304 	and.w	r3, r3, #4
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a0d6:	230a      	movs	r3, #10
 800a0d8:	e237      	b.n	800a54a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e235      	b.n	800a54a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ee:	785b      	ldrb	r3, [r3, #1]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff fced 	bl	8009ad0 <disk_initialize>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a0fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a108:	2303      	movs	r3, #3
 800a10a:	e21e      	b.n	800a54a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a10c:	79fb      	ldrb	r3, [r7, #7]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d007      	beq.n	800a122 <find_volume+0xca>
 800a112:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a11e:	230a      	movs	r3, #10
 800a120:	e213      	b.n	800a54a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a124:	7858      	ldrb	r0, [r3, #1]
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	330c      	adds	r3, #12
 800a12a:	461a      	mov	r2, r3
 800a12c:	2102      	movs	r1, #2
 800a12e:	f7ff fd35 	bl	8009b9c <disk_ioctl>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <find_volume+0xe4>
 800a138:	2301      	movs	r3, #1
 800a13a:	e206      	b.n	800a54a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	899b      	ldrh	r3, [r3, #12]
 800a140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a144:	d80d      	bhi.n	800a162 <find_volume+0x10a>
 800a146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a148:	899b      	ldrh	r3, [r3, #12]
 800a14a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a14e:	d308      	bcc.n	800a162 <find_volume+0x10a>
 800a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a152:	899b      	ldrh	r3, [r3, #12]
 800a154:	461a      	mov	r2, r3
 800a156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a158:	899b      	ldrh	r3, [r3, #12]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	4013      	ands	r3, r2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <find_volume+0x10e>
 800a162:	2301      	movs	r3, #1
 800a164:	e1f1      	b.n	800a54a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a16a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a16c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a16e:	f7ff ff1d 	bl	8009fac <check_fs>
 800a172:	4603      	mov	r3, r0
 800a174:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d149      	bne.n	800a214 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a180:	2300      	movs	r3, #0
 800a182:	643b      	str	r3, [r7, #64]	; 0x40
 800a184:	e01e      	b.n	800a1c4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a188:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a18c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a18e:	011b      	lsls	r3, r3, #4
 800a190:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a194:	4413      	add	r3, r2
 800a196:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	3304      	adds	r3, #4
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d006      	beq.n	800a1b0 <find_volume+0x158>
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7ff fd2e 	bl	8009c08 <ld_dword>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	e000      	b.n	800a1b2 <find_volume+0x15a>
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	3358      	adds	r3, #88	; 0x58
 800a1b8:	443b      	add	r3, r7
 800a1ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	643b      	str	r3, [r7, #64]	; 0x40
 800a1c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d9dd      	bls.n	800a186 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <find_volume+0x182>
 800a1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	3358      	adds	r3, #88	; 0x58
 800a1e0:	443b      	add	r3, r7
 800a1e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a1e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d005      	beq.n	800a1fa <find_volume+0x1a2>
 800a1ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1f2:	f7ff fedb 	bl	8009fac <check_fs>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	e000      	b.n	800a1fc <find_volume+0x1a4>
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a204:	2b01      	cmp	r3, #1
 800a206:	d905      	bls.n	800a214 <find_volume+0x1bc>
 800a208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a20a:	3301      	adds	r3, #1
 800a20c:	643b      	str	r3, [r7, #64]	; 0x40
 800a20e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a210:	2b03      	cmp	r3, #3
 800a212:	d9e2      	bls.n	800a1da <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a218:	2b04      	cmp	r3, #4
 800a21a:	d101      	bne.n	800a220 <find_volume+0x1c8>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e194      	b.n	800a54a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a220:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a224:	2b01      	cmp	r3, #1
 800a226:	d901      	bls.n	800a22c <find_volume+0x1d4>
 800a228:	230d      	movs	r3, #13
 800a22a:	e18e      	b.n	800a54a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22e:	3338      	adds	r3, #56	; 0x38
 800a230:	330b      	adds	r3, #11
 800a232:	4618      	mov	r0, r3
 800a234:	f7ff fcd0 	bl	8009bd8 <ld_word>
 800a238:	4603      	mov	r3, r0
 800a23a:	461a      	mov	r2, r3
 800a23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23e:	899b      	ldrh	r3, [r3, #12]
 800a240:	429a      	cmp	r2, r3
 800a242:	d001      	beq.n	800a248 <find_volume+0x1f0>
 800a244:	230d      	movs	r3, #13
 800a246:	e180      	b.n	800a54a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24a:	3338      	adds	r3, #56	; 0x38
 800a24c:	3316      	adds	r3, #22
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff fcc2 	bl	8009bd8 <ld_word>
 800a254:	4603      	mov	r3, r0
 800a256:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d106      	bne.n	800a26c <find_volume+0x214>
 800a25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a260:	3338      	adds	r3, #56	; 0x38
 800a262:	3324      	adds	r3, #36	; 0x24
 800a264:	4618      	mov	r0, r3
 800a266:	f7ff fccf 	bl	8009c08 <ld_dword>
 800a26a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a270:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a274:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27e:	789b      	ldrb	r3, [r3, #2]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d005      	beq.n	800a290 <find_volume+0x238>
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	789b      	ldrb	r3, [r3, #2]
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d001      	beq.n	800a290 <find_volume+0x238>
 800a28c:	230d      	movs	r3, #13
 800a28e:	e15c      	b.n	800a54a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a292:	789b      	ldrb	r3, [r3, #2]
 800a294:	461a      	mov	r2, r3
 800a296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a298:	fb02 f303 	mul.w	r3, r2, r3
 800a29c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ac:	895b      	ldrh	r3, [r3, #10]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d008      	beq.n	800a2c4 <find_volume+0x26c>
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	895b      	ldrh	r3, [r3, #10]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ba:	895b      	ldrh	r3, [r3, #10]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	4013      	ands	r3, r2
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d001      	beq.n	800a2c8 <find_volume+0x270>
 800a2c4:	230d      	movs	r3, #13
 800a2c6:	e140      	b.n	800a54a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ca:	3338      	adds	r3, #56	; 0x38
 800a2cc:	3311      	adds	r3, #17
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7ff fc82 	bl	8009bd8 <ld_word>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2de:	891b      	ldrh	r3, [r3, #8]
 800a2e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2e2:	8992      	ldrh	r2, [r2, #12]
 800a2e4:	0952      	lsrs	r2, r2, #5
 800a2e6:	b292      	uxth	r2, r2
 800a2e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2ec:	fb01 f202 	mul.w	r2, r1, r2
 800a2f0:	1a9b      	subs	r3, r3, r2
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d003      	beq.n	800a300 <find_volume+0x2a8>
 800a2f8:	230d      	movs	r3, #13
 800a2fa:	e126      	b.n	800a54a <find_volume+0x4f2>
 800a2fc:	20002cc8 	.word	0x20002cc8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a302:	3338      	adds	r3, #56	; 0x38
 800a304:	3313      	adds	r3, #19
 800a306:	4618      	mov	r0, r3
 800a308:	f7ff fc66 	bl	8009bd8 <ld_word>
 800a30c:	4603      	mov	r3, r0
 800a30e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a312:	2b00      	cmp	r3, #0
 800a314:	d106      	bne.n	800a324 <find_volume+0x2cc>
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	3338      	adds	r3, #56	; 0x38
 800a31a:	3320      	adds	r3, #32
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7ff fc73 	bl	8009c08 <ld_dword>
 800a322:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a326:	3338      	adds	r3, #56	; 0x38
 800a328:	330e      	adds	r3, #14
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7ff fc54 	bl	8009bd8 <ld_word>
 800a330:	4603      	mov	r3, r0
 800a332:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a334:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <find_volume+0x2e6>
 800a33a:	230d      	movs	r3, #13
 800a33c:	e105      	b.n	800a54a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a33e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a342:	4413      	add	r3, r2
 800a344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a346:	8911      	ldrh	r1, [r2, #8]
 800a348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a34a:	8992      	ldrh	r2, [r2, #12]
 800a34c:	0952      	lsrs	r2, r2, #5
 800a34e:	b292      	uxth	r2, r2
 800a350:	fbb1 f2f2 	udiv	r2, r1, r2
 800a354:	b292      	uxth	r2, r2
 800a356:	4413      	add	r3, r2
 800a358:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a35a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35e:	429a      	cmp	r2, r3
 800a360:	d201      	bcs.n	800a366 <find_volume+0x30e>
 800a362:	230d      	movs	r3, #13
 800a364:	e0f1      	b.n	800a54a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a36e:	8952      	ldrh	r2, [r2, #10]
 800a370:	fbb3 f3f2 	udiv	r3, r3, r2
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <find_volume+0x328>
 800a37c:	230d      	movs	r3, #13
 800a37e:	e0e4      	b.n	800a54a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a380:	2303      	movs	r3, #3
 800a382:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d802      	bhi.n	800a396 <find_volume+0x33e>
 800a390:	2302      	movs	r3, #2
 800a392:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d802      	bhi.n	800a3a6 <find_volume+0x34e>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a8:	1c9a      	adds	r2, r3, #2
 800a3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ac:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a3b2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a3b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3b8:	441a      	add	r2, r3
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3bc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a3be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	441a      	add	r2, r3
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a3c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d11e      	bne.n	800a40e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	3338      	adds	r3, #56	; 0x38
 800a3d4:	332a      	adds	r3, #42	; 0x2a
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7ff fbfe 	bl	8009bd8 <ld_word>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <find_volume+0x38e>
 800a3e2:	230d      	movs	r3, #13
 800a3e4:	e0b1      	b.n	800a54a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	891b      	ldrh	r3, [r3, #8]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <find_volume+0x39a>
 800a3ee:	230d      	movs	r3, #13
 800a3f0:	e0ab      	b.n	800a54a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f4:	3338      	adds	r3, #56	; 0x38
 800a3f6:	332c      	adds	r3, #44	; 0x2c
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7ff fc05 	bl	8009c08 <ld_dword>
 800a3fe:	4602      	mov	r2, r0
 800a400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a402:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a406:	69db      	ldr	r3, [r3, #28]
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	647b      	str	r3, [r7, #68]	; 0x44
 800a40c:	e01f      	b.n	800a44e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a410:	891b      	ldrh	r3, [r3, #8]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d101      	bne.n	800a41a <find_volume+0x3c2>
 800a416:	230d      	movs	r3, #13
 800a418:	e097      	b.n	800a54a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a420:	441a      	add	r2, r3
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a426:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d103      	bne.n	800a436 <find_volume+0x3de>
 800a42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	e00a      	b.n	800a44c <find_volume+0x3f4>
 800a436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a438:	69da      	ldr	r2, [r3, #28]
 800a43a:	4613      	mov	r3, r2
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	4413      	add	r3, r2
 800a440:	085a      	lsrs	r2, r3, #1
 800a442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a44c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	6a1a      	ldr	r2, [r3, #32]
 800a452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a454:	899b      	ldrh	r3, [r3, #12]
 800a456:	4619      	mov	r1, r3
 800a458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a45a:	440b      	add	r3, r1
 800a45c:	3b01      	subs	r3, #1
 800a45e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a460:	8989      	ldrh	r1, [r1, #12]
 800a462:	fbb3 f3f1 	udiv	r3, r3, r1
 800a466:	429a      	cmp	r2, r3
 800a468:	d201      	bcs.n	800a46e <find_volume+0x416>
 800a46a:	230d      	movs	r3, #13
 800a46c:	e06d      	b.n	800a54a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a474:	619a      	str	r2, [r3, #24]
 800a476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a478:	699a      	ldr	r2, [r3, #24]
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	2280      	movs	r2, #128	; 0x80
 800a482:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a484:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d149      	bne.n	800a520 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48e:	3338      	adds	r3, #56	; 0x38
 800a490:	3330      	adds	r3, #48	; 0x30
 800a492:	4618      	mov	r0, r3
 800a494:	f7ff fba0 	bl	8009bd8 <ld_word>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d140      	bne.n	800a520 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a49e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4a6:	f7ff fc3b 	bl	8009d20 <move_window>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d137      	bne.n	800a520 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	3338      	adds	r3, #56	; 0x38
 800a4ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff fb8a 	bl	8009bd8 <ld_word>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d127      	bne.n	800a520 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	3338      	adds	r3, #56	; 0x38
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7ff fb97 	bl	8009c08 <ld_dword>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	4a1d      	ldr	r2, [pc, #116]	; (800a554 <find_volume+0x4fc>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d11e      	bne.n	800a520 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e4:	3338      	adds	r3, #56	; 0x38
 800a4e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7ff fb8c 	bl	8009c08 <ld_dword>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	4a19      	ldr	r2, [pc, #100]	; (800a558 <find_volume+0x500>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d113      	bne.n	800a520 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fa:	3338      	adds	r3, #56	; 0x38
 800a4fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a500:	4618      	mov	r0, r3
 800a502:	f7ff fb81 	bl	8009c08 <ld_dword>
 800a506:	4602      	mov	r2, r0
 800a508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	3338      	adds	r3, #56	; 0x38
 800a510:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a514:	4618      	mov	r0, r3
 800a516:	f7ff fb77 	bl	8009c08 <ld_dword>
 800a51a:	4602      	mov	r2, r0
 800a51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a522:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a526:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a528:	4b0c      	ldr	r3, [pc, #48]	; (800a55c <find_volume+0x504>)
 800a52a:	881b      	ldrh	r3, [r3, #0]
 800a52c:	3301      	adds	r3, #1
 800a52e:	b29a      	uxth	r2, r3
 800a530:	4b0a      	ldr	r3, [pc, #40]	; (800a55c <find_volume+0x504>)
 800a532:	801a      	strh	r2, [r3, #0]
 800a534:	4b09      	ldr	r3, [pc, #36]	; (800a55c <find_volume+0x504>)
 800a536:	881a      	ldrh	r2, [r3, #0]
 800a538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53e:	4a08      	ldr	r2, [pc, #32]	; (800a560 <find_volume+0x508>)
 800a540:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a542:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a544:	f7ff fb84 	bl	8009c50 <clear_lock>
#endif
	return FR_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3758      	adds	r7, #88	; 0x58
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	41615252 	.word	0x41615252
 800a558:	61417272 	.word	0x61417272
 800a55c:	20002ccc 	.word	0x20002ccc
 800a560:	20002cf0 	.word	0x20002cf0

0800a564 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b088      	sub	sp, #32
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	4613      	mov	r3, r2
 800a570:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a576:	f107 0310 	add.w	r3, r7, #16
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7ff fcd1 	bl	8009f22 <get_ldnumber>
 800a580:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	2b00      	cmp	r3, #0
 800a586:	da01      	bge.n	800a58c <f_mount+0x28>
 800a588:	230b      	movs	r3, #11
 800a58a:	e02b      	b.n	800a5e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a58c:	4a17      	ldr	r2, [pc, #92]	; (800a5ec <f_mount+0x88>)
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a594:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a59c:	69b8      	ldr	r0, [r7, #24]
 800a59e:	f7ff fb57 	bl	8009c50 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d002      	beq.n	800a5b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	490d      	ldr	r1, [pc, #52]	; (800a5ec <f_mount+0x88>)
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <f_mount+0x66>
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d001      	beq.n	800a5ce <f_mount+0x6a>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e00a      	b.n	800a5e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a5ce:	f107 010c 	add.w	r1, r7, #12
 800a5d2:	f107 0308 	add.w	r3, r7, #8
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7ff fd3d 	bl	800a058 <find_volume>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3720      	adds	r7, #32
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	20002cc8 	.word	0x20002cc8

0800a5f0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b092      	sub	sp, #72	; 0x48
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a5fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a600:	f107 030c 	add.w	r3, r7, #12
 800a604:	2200      	movs	r2, #0
 800a606:	4618      	mov	r0, r3
 800a608:	f7ff fd26 	bl	800a058 <find_volume>
 800a60c:	4603      	mov	r3, r0
 800a60e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a612:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a616:	2b00      	cmp	r3, #0
 800a618:	f040 8099 	bne.w	800a74e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a61c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a624:	699a      	ldr	r2, [r3, #24]
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	69db      	ldr	r3, [r3, #28]
 800a62a:	3b02      	subs	r3, #2
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d804      	bhi.n	800a63a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	699a      	ldr	r2, [r3, #24]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	601a      	str	r2, [r3, #0]
 800a638:	e089      	b.n	800a74e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d128      	bne.n	800a698 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a646:	2302      	movs	r3, #2
 800a648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a64e:	f107 0314 	add.w	r3, r7, #20
 800a652:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a654:	4618      	mov	r0, r3
 800a656:	f7ff fb90 	bl	8009d7a <get_fat>
 800a65a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a662:	d103      	bne.n	800a66c <f_getfree+0x7c>
 800a664:	2301      	movs	r3, #1
 800a666:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a66a:	e063      	b.n	800a734 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d103      	bne.n	800a67a <f_getfree+0x8a>
 800a672:	2302      	movs	r3, #2
 800a674:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a678:	e05c      	b.n	800a734 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d102      	bne.n	800a686 <f_getfree+0x96>
 800a680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a682:	3301      	adds	r3, #1
 800a684:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800a686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a688:	3301      	adds	r3, #1
 800a68a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68e:	69db      	ldr	r3, [r3, #28]
 800a690:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a692:	429a      	cmp	r2, r3
 800a694:	d3db      	bcc.n	800a64e <f_getfree+0x5e>
 800a696:	e04d      	b.n	800a734 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69a:	69db      	ldr	r3, [r3, #28]
 800a69c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800a6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d113      	bne.n	800a6da <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a6b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b6:	1c5a      	adds	r2, r3, #1
 800a6b8:	63ba      	str	r2, [r7, #56]	; 0x38
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	f7ff fb30 	bl	8009d20 <move_window>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800a6c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d131      	bne.n	800a732 <f_getfree+0x142>
							p = fs->win;
 800a6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d0:	3338      	adds	r3, #56	; 0x38
 800a6d2:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	899b      	ldrh	r3, [r3, #12]
 800a6d8:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d10f      	bne.n	800a702 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a6e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6e4:	f7ff fa78 	bl	8009bd8 <ld_word>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d102      	bne.n	800a6f4 <f_getfree+0x104>
 800a6ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f6:	3302      	adds	r3, #2
 800a6f8:	633b      	str	r3, [r7, #48]	; 0x30
 800a6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6fc:	3b02      	subs	r3, #2
 800a6fe:	637b      	str	r3, [r7, #52]	; 0x34
 800a700:	e010      	b.n	800a724 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a704:	f7ff fa80 	bl	8009c08 <ld_dword>
 800a708:	4603      	mov	r3, r0
 800a70a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d102      	bne.n	800a718 <f_getfree+0x128>
 800a712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a714:	3301      	adds	r3, #1
 800a716:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800a718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71a:	3304      	adds	r3, #4
 800a71c:	633b      	str	r3, [r7, #48]	; 0x30
 800a71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a720:	3b04      	subs	r3, #4
 800a722:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800a724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a726:	3b01      	subs	r3, #1
 800a728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d1bd      	bne.n	800a6ac <f_getfree+0xbc>
 800a730:	e000      	b.n	800a734 <f_getfree+0x144>
							if (res != FR_OK) break;
 800a732:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a738:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a73e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a742:	791a      	ldrb	r2, [r3, #4]
 800a744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a746:	f042 0201 	orr.w	r2, r2, #1
 800a74a:	b2d2      	uxtb	r2, r2
 800a74c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a74e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a752:	4618      	mov	r0, r3
 800a754:	3748      	adds	r7, #72	; 0x48
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
	...

0800a75c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b087      	sub	sp, #28
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	4613      	mov	r3, r2
 800a768:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a76a:	2301      	movs	r3, #1
 800a76c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a772:	4b1f      	ldr	r3, [pc, #124]	; (800a7f0 <FATFS_LinkDriverEx+0x94>)
 800a774:	7a5b      	ldrb	r3, [r3, #9]
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d131      	bne.n	800a7e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a77c:	4b1c      	ldr	r3, [pc, #112]	; (800a7f0 <FATFS_LinkDriverEx+0x94>)
 800a77e:	7a5b      	ldrb	r3, [r3, #9]
 800a780:	b2db      	uxtb	r3, r3
 800a782:	461a      	mov	r2, r3
 800a784:	4b1a      	ldr	r3, [pc, #104]	; (800a7f0 <FATFS_LinkDriverEx+0x94>)
 800a786:	2100      	movs	r1, #0
 800a788:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a78a:	4b19      	ldr	r3, [pc, #100]	; (800a7f0 <FATFS_LinkDriverEx+0x94>)
 800a78c:	7a5b      	ldrb	r3, [r3, #9]
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	4a17      	ldr	r2, [pc, #92]	; (800a7f0 <FATFS_LinkDriverEx+0x94>)
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a79a:	4b15      	ldr	r3, [pc, #84]	; (800a7f0 <FATFS_LinkDriverEx+0x94>)
 800a79c:	7a5b      	ldrb	r3, [r3, #9]
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4b13      	ldr	r3, [pc, #76]	; (800a7f0 <FATFS_LinkDriverEx+0x94>)
 800a7a4:	4413      	add	r3, r2
 800a7a6:	79fa      	ldrb	r2, [r7, #7]
 800a7a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a7aa:	4b11      	ldr	r3, [pc, #68]	; (800a7f0 <FATFS_LinkDriverEx+0x94>)
 800a7ac:	7a5b      	ldrb	r3, [r3, #9]
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	1c5a      	adds	r2, r3, #1
 800a7b2:	b2d1      	uxtb	r1, r2
 800a7b4:	4a0e      	ldr	r2, [pc, #56]	; (800a7f0 <FATFS_LinkDriverEx+0x94>)
 800a7b6:	7251      	strb	r1, [r2, #9]
 800a7b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a7ba:	7dbb      	ldrb	r3, [r7, #22]
 800a7bc:	3330      	adds	r3, #48	; 0x30
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	223a      	movs	r2, #58	; 0x3a
 800a7ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	3302      	adds	r3, #2
 800a7d0:	222f      	movs	r2, #47	; 0x2f
 800a7d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	3303      	adds	r3, #3
 800a7d8:	2200      	movs	r2, #0
 800a7da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	371c      	adds	r7, #28
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	20002ef0 	.word	0x20002ef0

0800a7f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a7fe:	2200      	movs	r2, #0
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7ff ffaa 	bl	800a75c <FATFS_LinkDriverEx>
 800a808:	4603      	mov	r3, r0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
	...

0800a814 <DataHist_parameters>:
 800a814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a818:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a81a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a81e:	7020      	strb	r0, [r4, #0]
 800a820:	6808      	ldr	r0, [r1, #0]
 800a822:	6060      	str	r0, [r4, #4]
 800a824:	6848      	ldr	r0, [r1, #4]
 800a826:	60a0      	str	r0, [r4, #8]
 800a828:	6888      	ldr	r0, [r1, #8]
 800a82a:	60e0      	str	r0, [r4, #12]
 800a82c:	68c8      	ldr	r0, [r1, #12]
 800a82e:	6120      	str	r0, [r4, #16]
 800a830:	6908      	ldr	r0, [r1, #16]
 800a832:	6160      	str	r0, [r4, #20]
 800a834:	6948      	ldr	r0, [r1, #20]
 800a836:	61a0      	str	r0, [r4, #24]
 800a838:	6988      	ldr	r0, [r1, #24]
 800a83a:	61e0      	str	r0, [r4, #28]
 800a83c:	69c8      	ldr	r0, [r1, #28]
 800a83e:	6220      	str	r0, [r4, #32]
 800a840:	6a09      	ldr	r1, [r1, #32]
 800a842:	6261      	str	r1, [r4, #36]	; 0x24
 800a844:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 800a848:	8811      	ldrh	r1, [r2, #0]
 800a84a:	edd2 7a01 	vldr	s15, [r2, #4]
 800a84e:	8521      	strh	r1, [r4, #40]	; 0x28
 800a850:	f102 0e80 	add.w	lr, r2, #128	; 0x80
 800a854:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800a858:	2700      	movs	r7, #0
 800a85a:	f1ae 0278 	sub.w	r2, lr, #120	; 0x78
 800a85e:	4641      	mov	r1, r8
 800a860:	f852 0b04 	ldr.w	r0, [r2], #4
 800a864:	f841 0b04 	str.w	r0, [r1], #4
 800a868:	4572      	cmp	r2, lr
 800a86a:	d1f9      	bne.n	800a860 <DataHist_parameters+0x4c>
 800a86c:	371e      	adds	r7, #30
 800a86e:	2f5a      	cmp	r7, #90	; 0x5a
 800a870:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800a874:	f102 0e78 	add.w	lr, r2, #120	; 0x78
 800a878:	d1ef      	bne.n	800a85a <DataHist_parameters+0x46>
 800a87a:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
 800a87e:	881a      	ldrh	r2, [r3, #0]
 800a880:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800a884:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800a888:	f103 0e80 	add.w	lr, r3, #128	; 0x80
 800a88c:	f504 77d0 	add.w	r7, r4, #416	; 0x1a0
 800a890:	2000      	movs	r0, #0
 800a892:	f1ae 0378 	sub.w	r3, lr, #120	; 0x78
 800a896:	463a      	mov	r2, r7
 800a898:	f853 1b04 	ldr.w	r1, [r3], #4
 800a89c:	f842 1b04 	str.w	r1, [r2], #4
 800a8a0:	4573      	cmp	r3, lr
 800a8a2:	d1f9      	bne.n	800a898 <DataHist_parameters+0x84>
 800a8a4:	301e      	adds	r0, #30
 800a8a6:	285a      	cmp	r0, #90	; 0x5a
 800a8a8:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800a8ac:	f103 0e78 	add.w	lr, r3, #120	; 0x78
 800a8b0:	d1ef      	bne.n	800a892 <DataHist_parameters+0x7e>
 800a8b2:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800a8b6:	f8bc 3000 	ldrh.w	r3, [ip]
 800a8ba:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800a8be:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800a8c2:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 800a8c6:	f504 7e44 	add.w	lr, r4, #784	; 0x310
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	f1ac 0378 	sub.w	r3, ip, #120	; 0x78
 800a8d0:	4672      	mov	r2, lr
 800a8d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a8d6:	f842 1b04 	str.w	r1, [r2], #4
 800a8da:	4563      	cmp	r3, ip
 800a8dc:	d1f9      	bne.n	800a8d2 <DataHist_parameters+0xbe>
 800a8de:	301e      	adds	r0, #30
 800a8e0:	285a      	cmp	r0, #90	; 0x5a
 800a8e2:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800a8e6:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 800a8ea:	d1ef      	bne.n	800a8cc <DataHist_parameters+0xb8>
 800a8ec:	f8c4 730c 	str.w	r7, [r4, #780]	; 0x30c
 800a8f0:	8833      	ldrh	r3, [r6, #0]
 800a8f2:	6877      	ldr	r7, [r6, #4]
 800a8f4:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800a8f8:	f106 0080 	add.w	r0, r6, #128	; 0x80
 800a8fc:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
 800a900:	2600      	movs	r6, #0
 800a902:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800a906:	4662      	mov	r2, ip
 800a908:	f853 1b04 	ldr.w	r1, [r3], #4
 800a90c:	f842 1b04 	str.w	r1, [r2], #4
 800a910:	4283      	cmp	r3, r0
 800a912:	d1f9      	bne.n	800a908 <DataHist_parameters+0xf4>
 800a914:	361e      	adds	r6, #30
 800a916:	2e5a      	cmp	r6, #90	; 0x5a
 800a918:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800a91c:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800a920:	d1ef      	bne.n	800a902 <DataHist_parameters+0xee>
 800a922:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800a926:	69aa      	ldr	r2, [r5, #24]
 800a928:	605f      	str	r7, [r3, #4]
 800a92a:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800a92e:	7829      	ldrb	r1, [r5, #0]
 800a930:	f884 15e8 	strb.w	r1, [r4, #1512]	; 0x5e8
 800a934:	619a      	str	r2, [r3, #24]
 800a936:	6869      	ldr	r1, [r5, #4]
 800a938:	6059      	str	r1, [r3, #4]
 800a93a:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800a93e:	68a9      	ldr	r1, [r5, #8]
 800a940:	6011      	str	r1, [r2, #0]
 800a942:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800a946:	68e9      	ldr	r1, [r5, #12]
 800a948:	6011      	str	r1, [r2, #0]
 800a94a:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800a94e:	6929      	ldr	r1, [r5, #16]
 800a950:	6011      	str	r1, [r2, #0]
 800a952:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800a956:	6969      	ldr	r1, [r5, #20]
 800a958:	6011      	str	r1, [r2, #0]
 800a95a:	69e9      	ldr	r1, [r5, #28]
 800a95c:	61d9      	str	r1, [r3, #28]
 800a95e:	f504 62c1 	add.w	r2, r4, #1544	; 0x608
 800a962:	6a2b      	ldr	r3, [r5, #32]
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800a96a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800a972:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a974:	601a      	str	r2, [r3, #0]
 800a976:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800a97a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a982:	bf00      	nop

0800a984 <rotVect>:
 800a984:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800a988:	ed92 7a01 	vldr	s14, [r2, #4]
 800a98c:	ed92 6a00 	vldr	s12, [r2]
 800a990:	ee07 3a90 	vmov	s15, r3
 800a994:	f991 3000 	ldrsb.w	r3, [r1]
 800a998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a99c:	ee06 3a90 	vmov	s13, r3
 800a9a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9a4:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800a9a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a9ac:	ee07 3a10 	vmov	s14, r3
 800a9b0:	eee6 7a86 	vfma.f32	s15, s13, s12
 800a9b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a9b8:	edd2 6a02 	vldr	s13, [r2, #8]
 800a9bc:	eee7 7a26 	vfma.f32	s15, s14, s13
 800a9c0:	edc0 7a00 	vstr	s15, [r0]
 800a9c4:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800a9c8:	ed92 7a01 	vldr	s14, [r2, #4]
 800a9cc:	ed92 6a00 	vldr	s12, [r2]
 800a9d0:	ee07 3a90 	vmov	s15, r3
 800a9d4:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800a9d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9dc:	ee06 3a90 	vmov	s13, r3
 800a9e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9e4:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800a9e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a9ec:	ee07 3a10 	vmov	s14, r3
 800a9f0:	eee6 7a86 	vfma.f32	s15, s13, s12
 800a9f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a9f8:	edd2 6a02 	vldr	s13, [r2, #8]
 800a9fc:	eee7 7a26 	vfma.f32	s15, s14, s13
 800aa00:	edc0 7a01 	vstr	s15, [r0, #4]
 800aa04:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800aa08:	ed92 7a01 	vldr	s14, [r2, #4]
 800aa0c:	ed92 6a00 	vldr	s12, [r2]
 800aa10:	ee07 3a90 	vmov	s15, r3
 800aa14:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800aa18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa1c:	ee06 3a90 	vmov	s13, r3
 800aa20:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800aa28:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800aa2c:	eee6 7a86 	vfma.f32	s15, s13, s12
 800aa30:	ee07 3a10 	vmov	s14, r3
 800aa34:	edd2 6a02 	vldr	s13, [r2, #8]
 800aa38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aa3c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800aa40:	edc0 7a02 	vstr	s15, [r0, #8]
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop

0800aa48 <findAxis>:
 800aa48:	f990 3000 	ldrsb.w	r3, [r0]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d027      	beq.n	800aaa0 <findAxis+0x58>
 800aa50:	3301      	adds	r3, #1
 800aa52:	d00e      	beq.n	800aa72 <findAxis+0x2a>
 800aa54:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d053      	beq.n	800ab04 <findAxis+0xbc>
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	d048      	beq.n	800aaf2 <findAxis+0xaa>
 800aa60:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d053      	beq.n	800ab10 <findAxis+0xc8>
 800aa68:	3301      	adds	r3, #1
 800aa6a:	d104      	bne.n	800aa76 <findAxis+0x2e>
 800aa6c:	2364      	movs	r3, #100	; 0x64
 800aa6e:	700b      	strb	r3, [r1, #0]
 800aa70:	e001      	b.n	800aa76 <findAxis+0x2e>
 800aa72:	2377      	movs	r3, #119	; 0x77
 800aa74:	700b      	strb	r3, [r1, #0]
 800aa76:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d016      	beq.n	800aaac <findAxis+0x64>
 800aa7e:	3301      	adds	r3, #1
 800aa80:	d02e      	beq.n	800aae0 <findAxis+0x98>
 800aa82:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d039      	beq.n	800aafe <findAxis+0xb6>
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	d034      	beq.n	800aaf8 <findAxis+0xb0>
 800aa8e:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d03f      	beq.n	800ab16 <findAxis+0xce>
 800aa96:	3301      	adds	r3, #1
 800aa98:	d10a      	bne.n	800aab0 <findAxis+0x68>
 800aa9a:	2364      	movs	r3, #100	; 0x64
 800aa9c:	704b      	strb	r3, [r1, #1]
 800aa9e:	e007      	b.n	800aab0 <findAxis+0x68>
 800aaa0:	2365      	movs	r3, #101	; 0x65
 800aaa2:	700b      	strb	r3, [r1, #0]
 800aaa4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d1e8      	bne.n	800aa7e <findAxis+0x36>
 800aaac:	2365      	movs	r3, #101	; 0x65
 800aaae:	704b      	strb	r3, [r1, #1]
 800aab0:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d010      	beq.n	800aada <findAxis+0x92>
 800aab8:	3301      	adds	r3, #1
 800aaba:	d014      	beq.n	800aae6 <findAxis+0x9e>
 800aabc:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d022      	beq.n	800ab0a <findAxis+0xc2>
 800aac4:	3301      	adds	r3, #1
 800aac6:	d011      	beq.n	800aaec <findAxis+0xa4>
 800aac8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d025      	beq.n	800ab1c <findAxis+0xd4>
 800aad0:	3301      	adds	r3, #1
 800aad2:	bf04      	itt	eq
 800aad4:	2364      	moveq	r3, #100	; 0x64
 800aad6:	708b      	strbeq	r3, [r1, #2]
 800aad8:	4770      	bx	lr
 800aada:	2365      	movs	r3, #101	; 0x65
 800aadc:	708b      	strb	r3, [r1, #2]
 800aade:	4770      	bx	lr
 800aae0:	2377      	movs	r3, #119	; 0x77
 800aae2:	704b      	strb	r3, [r1, #1]
 800aae4:	e7e4      	b.n	800aab0 <findAxis+0x68>
 800aae6:	2377      	movs	r3, #119	; 0x77
 800aae8:	708b      	strb	r3, [r1, #2]
 800aaea:	4770      	bx	lr
 800aaec:	2373      	movs	r3, #115	; 0x73
 800aaee:	708b      	strb	r3, [r1, #2]
 800aaf0:	4770      	bx	lr
 800aaf2:	2373      	movs	r3, #115	; 0x73
 800aaf4:	700b      	strb	r3, [r1, #0]
 800aaf6:	e7be      	b.n	800aa76 <findAxis+0x2e>
 800aaf8:	2373      	movs	r3, #115	; 0x73
 800aafa:	704b      	strb	r3, [r1, #1]
 800aafc:	e7d8      	b.n	800aab0 <findAxis+0x68>
 800aafe:	236e      	movs	r3, #110	; 0x6e
 800ab00:	704b      	strb	r3, [r1, #1]
 800ab02:	e7d5      	b.n	800aab0 <findAxis+0x68>
 800ab04:	236e      	movs	r3, #110	; 0x6e
 800ab06:	700b      	strb	r3, [r1, #0]
 800ab08:	e7b5      	b.n	800aa76 <findAxis+0x2e>
 800ab0a:	236e      	movs	r3, #110	; 0x6e
 800ab0c:	708b      	strb	r3, [r1, #2]
 800ab0e:	4770      	bx	lr
 800ab10:	2375      	movs	r3, #117	; 0x75
 800ab12:	700b      	strb	r3, [r1, #0]
 800ab14:	e7af      	b.n	800aa76 <findAxis+0x2e>
 800ab16:	2375      	movs	r3, #117	; 0x75
 800ab18:	704b      	strb	r3, [r1, #1]
 800ab1a:	e7c9      	b.n	800aab0 <findAxis+0x68>
 800ab1c:	2375      	movs	r3, #117	; 0x75
 800ab1e:	708b      	strb	r3, [r1, #2]
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	0000      	movs	r0, r0
	...

0800ab28 <findDirection>:
 800ab28:	b5d0      	push	{r4, r6, r7, lr}
 800ab2a:	ed2d 8b04 	vpush	{d8-d9}
 800ab2e:	eef0 8ac0 	vabs.f32	s17, s0
 800ab32:	eeb0 8ae0 	vabs.f32	s16, s1
 800ab36:	eef4 8ac8 	vcmpe.f32	s17, s16
 800ab3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3e:	4604      	mov	r4, r0
 800ab40:	eeb0 9ac1 	vabs.f32	s18, s2
 800ab44:	dd36      	ble.n	800abb4 <findDirection+0x8c>
 800ab46:	eef4 8ac9 	vcmpe.f32	s17, s18
 800ab4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab4e:	dd31      	ble.n	800abb4 <findDirection+0x8c>
 800ab50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ab54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab58:	ee18 0a90 	vmov	r0, s17
 800ab5c:	f340 8094 	ble.w	800ac88 <findDirection+0x160>
 800ab60:	f7f5 fcf2 	bl	8000548 <__aeabi_f2d>
 800ab64:	4606      	mov	r6, r0
 800ab66:	ee18 0a10 	vmov	r0, s16
 800ab6a:	460f      	mov	r7, r1
 800ab6c:	f7f5 fcec 	bl	8000548 <__aeabi_f2d>
 800ab70:	a387      	add	r3, pc, #540	; (adr r3, 800ad90 <findDirection+0x268>)
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	f7f5 fd3f 	bl	80005f8 <__aeabi_dmul>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	4630      	mov	r0, r6
 800ab80:	4639      	mov	r1, r7
 800ab82:	f7f5 ffc9 	bl	8000b18 <__aeabi_dcmpgt>
 800ab86:	b188      	cbz	r0, 800abac <findDirection+0x84>
 800ab88:	ee19 0a10 	vmov	r0, s18
 800ab8c:	f7f5 fcdc 	bl	8000548 <__aeabi_f2d>
 800ab90:	a37f      	add	r3, pc, #508	; (adr r3, 800ad90 <findDirection+0x268>)
 800ab92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab96:	f7f5 fd2f 	bl	80005f8 <__aeabi_dmul>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	4630      	mov	r0, r6
 800aba0:	4639      	mov	r1, r7
 800aba2:	f7f5 ffb9 	bl	8000b18 <__aeabi_dcmpgt>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	bf18      	it	ne
 800abaa:	2404      	movne	r4, #4
 800abac:	ecbd 8b04 	vpop	{d8-d9}
 800abb0:	4620      	mov	r0, r4
 800abb2:	bdd0      	pop	{r4, r6, r7, pc}
 800abb4:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800abb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abbc:	dd32      	ble.n	800ac24 <findDirection+0xfc>
 800abbe:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800abc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc6:	ee18 0a10 	vmov	r0, s16
 800abca:	f340 8086 	ble.w	800acda <findDirection+0x1b2>
 800abce:	f7f5 fcbb 	bl	8000548 <__aeabi_f2d>
 800abd2:	4606      	mov	r6, r0
 800abd4:	ee18 0a90 	vmov	r0, s17
 800abd8:	460f      	mov	r7, r1
 800abda:	f7f5 fcb5 	bl	8000548 <__aeabi_f2d>
 800abde:	a36c      	add	r3, pc, #432	; (adr r3, 800ad90 <findDirection+0x268>)
 800abe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe4:	f7f5 fd08 	bl	80005f8 <__aeabi_dmul>
 800abe8:	4602      	mov	r2, r0
 800abea:	460b      	mov	r3, r1
 800abec:	4630      	mov	r0, r6
 800abee:	4639      	mov	r1, r7
 800abf0:	f7f5 ff92 	bl	8000b18 <__aeabi_dcmpgt>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d0d9      	beq.n	800abac <findDirection+0x84>
 800abf8:	ee19 0a10 	vmov	r0, s18
 800abfc:	f7f5 fca4 	bl	8000548 <__aeabi_f2d>
 800ac00:	a363      	add	r3, pc, #396	; (adr r3, 800ad90 <findDirection+0x268>)
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	f7f5 fcf7 	bl	80005f8 <__aeabi_dmul>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	4630      	mov	r0, r6
 800ac10:	4639      	mov	r1, r7
 800ac12:	f7f5 ff81 	bl	8000b18 <__aeabi_dcmpgt>
 800ac16:	ecbd 8b04 	vpop	{d8-d9}
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	bf18      	it	ne
 800ac1e:	2401      	movne	r4, #1
 800ac20:	4620      	mov	r0, r4
 800ac22:	bdd0      	pop	{r4, r6, r7, pc}
 800ac24:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800ac28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac2c:	ee19 0a10 	vmov	r0, s18
 800ac30:	dd7f      	ble.n	800ad32 <findDirection+0x20a>
 800ac32:	f7f5 fc89 	bl	8000548 <__aeabi_f2d>
 800ac36:	4606      	mov	r6, r0
 800ac38:	ee18 0a10 	vmov	r0, s16
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	f7f5 fc83 	bl	8000548 <__aeabi_f2d>
 800ac42:	a353      	add	r3, pc, #332	; (adr r3, 800ad90 <findDirection+0x268>)
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	f7f5 fcd6 	bl	80005f8 <__aeabi_dmul>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4630      	mov	r0, r6
 800ac52:	4639      	mov	r1, r7
 800ac54:	f7f5 ff60 	bl	8000b18 <__aeabi_dcmpgt>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d0a7      	beq.n	800abac <findDirection+0x84>
 800ac5c:	ee18 0a90 	vmov	r0, s17
 800ac60:	f7f5 fc72 	bl	8000548 <__aeabi_f2d>
 800ac64:	a34a      	add	r3, pc, #296	; (adr r3, 800ad90 <findDirection+0x268>)
 800ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6a:	f7f5 fcc5 	bl	80005f8 <__aeabi_dmul>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	4630      	mov	r0, r6
 800ac74:	4639      	mov	r1, r7
 800ac76:	f7f5 ff4f 	bl	8000b18 <__aeabi_dcmpgt>
 800ac7a:	ecbd 8b04 	vpop	{d8-d9}
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	bf18      	it	ne
 800ac82:	2400      	movne	r4, #0
 800ac84:	4620      	mov	r0, r4
 800ac86:	bdd0      	pop	{r4, r6, r7, pc}
 800ac88:	f7f5 fc5e 	bl	8000548 <__aeabi_f2d>
 800ac8c:	4606      	mov	r6, r0
 800ac8e:	ee18 0a10 	vmov	r0, s16
 800ac92:	460f      	mov	r7, r1
 800ac94:	f7f5 fc58 	bl	8000548 <__aeabi_f2d>
 800ac98:	a33d      	add	r3, pc, #244	; (adr r3, 800ad90 <findDirection+0x268>)
 800ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9e:	f7f5 fcab 	bl	80005f8 <__aeabi_dmul>
 800aca2:	4602      	mov	r2, r0
 800aca4:	460b      	mov	r3, r1
 800aca6:	4630      	mov	r0, r6
 800aca8:	4639      	mov	r1, r7
 800acaa:	f7f5 ff35 	bl	8000b18 <__aeabi_dcmpgt>
 800acae:	2800      	cmp	r0, #0
 800acb0:	f43f af7c 	beq.w	800abac <findDirection+0x84>
 800acb4:	ee19 0a10 	vmov	r0, s18
 800acb8:	f7f5 fc46 	bl	8000548 <__aeabi_f2d>
 800acbc:	a334      	add	r3, pc, #208	; (adr r3, 800ad90 <findDirection+0x268>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f7f5 fc99 	bl	80005f8 <__aeabi_dmul>
 800acc6:	4602      	mov	r2, r0
 800acc8:	460b      	mov	r3, r1
 800acca:	4630      	mov	r0, r6
 800accc:	4639      	mov	r1, r7
 800acce:	f7f5 ff23 	bl	8000b18 <__aeabi_dcmpgt>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	bf18      	it	ne
 800acd6:	2405      	movne	r4, #5
 800acd8:	e768      	b.n	800abac <findDirection+0x84>
 800acda:	f7f5 fc35 	bl	8000548 <__aeabi_f2d>
 800acde:	4606      	mov	r6, r0
 800ace0:	ee18 0a90 	vmov	r0, s17
 800ace4:	460f      	mov	r7, r1
 800ace6:	f7f5 fc2f 	bl	8000548 <__aeabi_f2d>
 800acea:	a329      	add	r3, pc, #164	; (adr r3, 800ad90 <findDirection+0x268>)
 800acec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf0:	f7f5 fc82 	bl	80005f8 <__aeabi_dmul>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4630      	mov	r0, r6
 800acfa:	4639      	mov	r1, r7
 800acfc:	f7f5 ff0c 	bl	8000b18 <__aeabi_dcmpgt>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	f43f af53 	beq.w	800abac <findDirection+0x84>
 800ad06:	ee19 0a10 	vmov	r0, s18
 800ad0a:	f7f5 fc1d 	bl	8000548 <__aeabi_f2d>
 800ad0e:	a320      	add	r3, pc, #128	; (adr r3, 800ad90 <findDirection+0x268>)
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	f7f5 fc70 	bl	80005f8 <__aeabi_dmul>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	4639      	mov	r1, r7
 800ad20:	f7f5 fefa 	bl	8000b18 <__aeabi_dcmpgt>
 800ad24:	ecbd 8b04 	vpop	{d8-d9}
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	bf18      	it	ne
 800ad2c:	2403      	movne	r4, #3
 800ad2e:	4620      	mov	r0, r4
 800ad30:	bdd0      	pop	{r4, r6, r7, pc}
 800ad32:	f7f5 fc09 	bl	8000548 <__aeabi_f2d>
 800ad36:	4606      	mov	r6, r0
 800ad38:	ee18 0a10 	vmov	r0, s16
 800ad3c:	460f      	mov	r7, r1
 800ad3e:	f7f5 fc03 	bl	8000548 <__aeabi_f2d>
 800ad42:	a313      	add	r3, pc, #76	; (adr r3, 800ad90 <findDirection+0x268>)
 800ad44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad48:	f7f5 fc56 	bl	80005f8 <__aeabi_dmul>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4630      	mov	r0, r6
 800ad52:	4639      	mov	r1, r7
 800ad54:	f7f5 fee0 	bl	8000b18 <__aeabi_dcmpgt>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	f43f af27 	beq.w	800abac <findDirection+0x84>
 800ad5e:	ee18 0a90 	vmov	r0, s17
 800ad62:	f7f5 fbf1 	bl	8000548 <__aeabi_f2d>
 800ad66:	a30a      	add	r3, pc, #40	; (adr r3, 800ad90 <findDirection+0x268>)
 800ad68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6c:	f7f5 fc44 	bl	80005f8 <__aeabi_dmul>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	4630      	mov	r0, r6
 800ad76:	4639      	mov	r1, r7
 800ad78:	f7f5 fece 	bl	8000b18 <__aeabi_dcmpgt>
 800ad7c:	ecbd 8b04 	vpop	{d8-d9}
 800ad80:	2800      	cmp	r0, #0
 800ad82:	bf18      	it	ne
 800ad84:	2402      	movne	r4, #2
 800ad86:	4620      	mov	r0, r4
 800ad88:	bdd0      	pop	{r4, r6, r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	f3af 8000 	nop.w
 800ad90:	e0000000 	.word	0xe0000000
 800ad94:	3ff6b851 	.word	0x3ff6b851

0800ad98 <updateOrientation>:
 800ad98:	2300      	movs	r3, #0
 800ad9a:	6003      	str	r3, [r0, #0]
 800ad9c:	6043      	str	r3, [r0, #4]
 800ad9e:	7203      	strb	r3, [r0, #8]
 800ada0:	f891 c000 	ldrb.w	ip, [r1]
 800ada4:	784a      	ldrb	r2, [r1, #1]
 800ada6:	f1ac 0342 	sub.w	r3, ip, #66	; 0x42
 800adaa:	2b17      	cmp	r3, #23
 800adac:	bf98      	it	ls
 800adae:	f10c 0c20 	addls.w	ip, ip, #32
 800adb2:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800adb6:	bf98      	it	ls
 800adb8:	fa5f fc8c 	uxtbls.w	ip, ip
 800adbc:	2b17      	cmp	r3, #23
 800adbe:	788b      	ldrb	r3, [r1, #2]
 800adc0:	bf98      	it	ls
 800adc2:	3220      	addls	r2, #32
 800adc4:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800adc8:	bf98      	it	ls
 800adca:	b2d2      	uxtbls	r2, r2
 800adcc:	2917      	cmp	r1, #23
 800adce:	bf98      	it	ls
 800add0:	3320      	addls	r3, #32
 800add2:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 800add6:	bf98      	it	ls
 800add8:	b2db      	uxtbls	r3, r3
 800adda:	f1bc 0f13 	cmp.w	ip, #19
 800adde:	d80d      	bhi.n	800adfc <updateOrientation+0x64>
 800ade0:	e8df f00c 	tbb	[pc, ip]
 800ade4:	0c0c0a32 	.word	0x0c0c0a32
 800ade8:	0c0c0c0c 	.word	0x0c0c0c0c
 800adec:	0c350c0c 	.word	0x0c350c0c
 800adf0:	380c0c0c 	.word	0x380c0c0c
 800adf4:	3e0c3b0c 	.word	0x3e0c3b0c
 800adf8:	2101      	movs	r1, #1
 800adfa:	7001      	strb	r1, [r0, #0]
 800adfc:	3a64      	subs	r2, #100	; 0x64
 800adfe:	2a13      	cmp	r2, #19
 800ae00:	d80d      	bhi.n	800ae1e <updateOrientation+0x86>
 800ae02:	e8df f002 	tbb	[pc, r2]
 800ae06:	0a30      	.short	0x0a30
 800ae08:	0c0c0c0c 	.word	0x0c0c0c0c
 800ae0c:	0c0c0c0c 	.word	0x0c0c0c0c
 800ae10:	0c0c0c33 	.word	0x0c0c0c33
 800ae14:	390c360c 	.word	0x390c360c
 800ae18:	3c0c      	.short	0x3c0c
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	7042      	strb	r2, [r0, #1]
 800ae1e:	3b64      	subs	r3, #100	; 0x64
 800ae20:	2b13      	cmp	r3, #19
 800ae22:	d80d      	bhi.n	800ae40 <updateOrientation+0xa8>
 800ae24:	e8df f003 	tbb	[pc, r3]
 800ae28:	0c0c2e0a 	.word	0x0c0c2e0a
 800ae2c:	0c0c0c0c 	.word	0x0c0c0c0c
 800ae30:	0c310c0c 	.word	0x0c310c0c
 800ae34:	340c0c0c 	.word	0x340c0c0c
 800ae38:	0d0c370c 	.word	0x0d0c370c
 800ae3c:	23ff      	movs	r3, #255	; 0xff
 800ae3e:	7203      	strb	r3, [r0, #8]
 800ae40:	4770      	bx	lr
 800ae42:	23ff      	movs	r3, #255	; 0xff
 800ae44:	7083      	strb	r3, [r0, #2]
 800ae46:	4770      	bx	lr
 800ae48:	21ff      	movs	r1, #255	; 0xff
 800ae4a:	7181      	strb	r1, [r0, #6]
 800ae4c:	e7d6      	b.n	800adfc <updateOrientation+0x64>
 800ae4e:	2101      	movs	r1, #1
 800ae50:	70c1      	strb	r1, [r0, #3]
 800ae52:	e7d3      	b.n	800adfc <updateOrientation+0x64>
 800ae54:	21ff      	movs	r1, #255	; 0xff
 800ae56:	70c1      	strb	r1, [r0, #3]
 800ae58:	e7d0      	b.n	800adfc <updateOrientation+0x64>
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	7181      	strb	r1, [r0, #6]
 800ae5e:	e7cd      	b.n	800adfc <updateOrientation+0x64>
 800ae60:	21ff      	movs	r1, #255	; 0xff
 800ae62:	7001      	strb	r1, [r0, #0]
 800ae64:	e7ca      	b.n	800adfc <updateOrientation+0x64>
 800ae66:	22ff      	movs	r2, #255	; 0xff
 800ae68:	71c2      	strb	r2, [r0, #7]
 800ae6a:	e7d8      	b.n	800ae1e <updateOrientation+0x86>
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	7102      	strb	r2, [r0, #4]
 800ae70:	e7d5      	b.n	800ae1e <updateOrientation+0x86>
 800ae72:	22ff      	movs	r2, #255	; 0xff
 800ae74:	7102      	strb	r2, [r0, #4]
 800ae76:	e7d2      	b.n	800ae1e <updateOrientation+0x86>
 800ae78:	2201      	movs	r2, #1
 800ae7a:	71c2      	strb	r2, [r0, #7]
 800ae7c:	e7cf      	b.n	800ae1e <updateOrientation+0x86>
 800ae7e:	22ff      	movs	r2, #255	; 0xff
 800ae80:	7042      	strb	r2, [r0, #1]
 800ae82:	e7cc      	b.n	800ae1e <updateOrientation+0x86>
 800ae84:	2301      	movs	r3, #1
 800ae86:	7083      	strb	r3, [r0, #2]
 800ae88:	4770      	bx	lr
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	7143      	strb	r3, [r0, #5]
 800ae8e:	4770      	bx	lr
 800ae90:	23ff      	movs	r3, #255	; 0xff
 800ae92:	7143      	strb	r3, [r0, #5]
 800ae94:	4770      	bx	lr
 800ae96:	2301      	movs	r3, #1
 800ae98:	7203      	strb	r3, [r0, #8]
 800ae9a:	4770      	bx	lr

0800ae9c <qmult>:
 800ae9c:	ed91 2a03 	vldr	s4, [r1, #12]
 800aea0:	ed90 3a01 	vldr	s6, [r0, #4]
 800aea4:	edd0 5a02 	vldr	s11, [r0, #8]
 800aea8:	edd1 4a01 	vldr	s9, [r1, #4]
 800aeac:	ed90 4a00 	vldr	s8, [r0]
 800aeb0:	ed91 5a02 	vldr	s10, [r1, #8]
 800aeb4:	edd1 3a00 	vldr	s7, [r1]
 800aeb8:	edd0 2a03 	vldr	s5, [r0, #12]
 800aebc:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800aec0:	ee62 6a03 	vmul.f32	s13, s4, s6
 800aec4:	ee22 7a25 	vmul.f32	s14, s4, s11
 800aec8:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800aecc:	eea4 6a02 	vfma.f32	s12, s8, s4
 800aed0:	eee4 6a05 	vfma.f32	s13, s8, s10
 800aed4:	eea3 7a23 	vfma.f32	s14, s6, s7
 800aed8:	eee4 7a63 	vfms.f32	s15, s8, s7
 800aedc:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800aee0:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800aee4:	eea5 7a22 	vfma.f32	s14, s10, s5
 800aee8:	eee2 7a22 	vfma.f32	s15, s4, s5
 800aeec:	eea3 6a45 	vfms.f32	s12, s6, s10
 800aef0:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800aef4:	eea4 7a64 	vfms.f32	s14, s8, s9
 800aef8:	eee5 7a65 	vfms.f32	s15, s10, s11
 800aefc:	ed82 6a00 	vstr	s12, [r2]
 800af00:	edc2 6a01 	vstr	s13, [r2, #4]
 800af04:	ed82 7a02 	vstr	s14, [r2, #8]
 800af08:	edc2 7a03 	vstr	s15, [r2, #12]
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop

0800af10 <dataDerivative5>:
 800af10:	ed90 7a01 	vldr	s14, [r0, #4]
 800af14:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 800af18:	edd0 6a04 	vldr	s13, [r0, #16]
 800af1c:	ed90 6a00 	vldr	s12, [r0]
 800af20:	ed90 4a02 	vldr	s8, [r0, #8]
 800af24:	edd0 4a09 	vldr	s9, [r0, #36]	; 0x24
 800af28:	eeb8 5a00 	vmov.f32	s10, #128	; 0xc0000000 -2.0
 800af2c:	eee7 7a05 	vfma.f32	s15, s14, s10
 800af30:	ed90 7a03 	vldr	s14, [r0, #12]
 800af34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800af38:	edd0 6a0b 	vldr	s13, [r0, #44]	; 0x2c
 800af3c:	ee96 7a05 	vfnms.f32	s14, s12, s10
 800af40:	eee4 6a05 	vfma.f32	s13, s8, s10
 800af44:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 800af48:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
 800af4c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800af50:	eee6 7a25 	vfma.f32	s15, s12, s11
 800af54:	ee37 7a24 	vadd.f32	s14, s14, s9
 800af58:	eeb0 6a66 	vmov.f32	s12, s13
 800af5c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800af98 <dataDerivative5+0x88>
 800af60:	eea5 7a25 	vfma.f32	s14, s10, s11
 800af64:	ee60 6a26 	vmul.f32	s13, s0, s13
 800af68:	ed90 5a05 	vldr	s10, [r0, #20]
 800af6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800af70:	ee36 6a45 	vsub.f32	s12, s12, s10
 800af74:	ed90 5a0e 	vldr	s10, [r0, #56]	; 0x38
 800af78:	ee27 7a26 	vmul.f32	s14, s14, s13
 800af7c:	eea5 6a25 	vfma.f32	s12, s10, s11
 800af80:	ee27 0aa7 	vmul.f32	s0, s15, s15
 800af84:	ee66 6a86 	vmul.f32	s13, s13, s12
 800af88:	eea7 0a07 	vfma.f32	s0, s14, s14
 800af8c:	eea6 0aa6 	vfma.f32	s0, s13, s13
 800af90:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	3dcccccd 	.word	0x3dcccccd

0800af9c <b_dcm2q>:
 800af9c:	ed90 5a08 	vldr	s10, [r0, #32]
 800afa0:	edd0 7a00 	vldr	s15, [r0]
 800afa4:	edd0 6a04 	vldr	s13, [r0, #16]
 800afa8:	ee37 7a85 	vadd.f32	s14, s15, s10
 800afac:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800afb0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800afb4:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800afb8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800afbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc0:	bfc5      	ittet	gt
 800afc2:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800afc6:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800afca:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800b0d8 <b_dcm2q+0x13c>
 800afce:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800afd2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800afd6:	ee35 6a47 	vsub.f32	s12, s10, s14
 800afda:	ee35 7a07 	vadd.f32	s14, s10, s14
 800afde:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800afe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afe6:	bfc5      	ittet	gt
 800afe8:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800afec:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800aff0:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800b0d8 <b_dcm2q+0x13c>
 800aff4:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800aff8:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800affc:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800b000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b004:	dd5b      	ble.n	800b0be <b_dcm2q+0x122>
 800b006:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800b00a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b00e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800b012:	eef1 4ac7 	vsqrt.f32	s9, s14
 800b016:	ee64 4a84 	vmul.f32	s9, s9, s8
 800b01a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b01e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b022:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b026:	edd0 6a07 	vldr	s13, [r0, #28]
 800b02a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b032:	bf85      	ittet	hi
 800b034:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800b038:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800b03c:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800b0d8 <b_dcm2q+0x13c>
 800b040:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800b044:	edd0 7a05 	vldr	s15, [r0, #20]
 800b048:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b04c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b054:	d43c      	bmi.n	800b0d0 <b_dcm2q+0x134>
 800b056:	bfd8      	it	le
 800b058:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800b05c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b060:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b064:	ed81 7a00 	vstr	s14, [r1]
 800b068:	edd0 7a06 	vldr	s15, [r0, #24]
 800b06c:	ed90 7a02 	vldr	s14, [r0, #8]
 800b070:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b074:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b07c:	d425      	bmi.n	800b0ca <b_dcm2q+0x12e>
 800b07e:	bfd8      	it	le
 800b080:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800b084:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b088:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800b08c:	edc1 5a01 	vstr	s11, [r1, #4]
 800b090:	edd0 7a01 	vldr	s15, [r0, #4]
 800b094:	ed90 7a03 	vldr	s14, [r0, #12]
 800b098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b09c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a4:	d40e      	bmi.n	800b0c4 <b_dcm2q+0x128>
 800b0a6:	bfd8      	it	le
 800b0a8:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800b0ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b0b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 800b0b4:	edc1 4a03 	vstr	s9, [r1, #12]
 800b0b8:	ed81 6a02 	vstr	s12, [r1, #8]
 800b0bc:	4770      	bx	lr
 800b0be:	eddf 4a06 	vldr	s9, [pc, #24]	; 800b0d8 <b_dcm2q+0x13c>
 800b0c2:	e7aa      	b.n	800b01a <b_dcm2q+0x7e>
 800b0c4:	eeb1 6a46 	vneg.f32	s12, s12
 800b0c8:	e7f0      	b.n	800b0ac <b_dcm2q+0x110>
 800b0ca:	eef1 5a65 	vneg.f32	s11, s11
 800b0ce:	e7d9      	b.n	800b084 <b_dcm2q+0xe8>
 800b0d0:	eeb1 7a47 	vneg.f32	s14, s14
 800b0d4:	e7c2      	b.n	800b05c <b_dcm2q+0xc0>
 800b0d6:	bf00      	nop
 800b0d8:	00000000 	.word	0x00000000

0800b0dc <getRotationMatrix>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4613      	mov	r3, r2
 800b0e0:	4605      	mov	r5, r0
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	2224      	movs	r2, #36	; 0x24
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	f007 ffcd 	bl	8013088 <memset>
 800b0ee:	edd5 5a00 	vldr	s11, [r5]
 800b0f2:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800b218 <getRotationMatrix+0x13c>
 800b0f6:	edc0 5a02 	vstr	s11, [r0, #8]
 800b0fa:	edd5 4a01 	vldr	s9, [r5, #4]
 800b0fe:	edc0 4a05 	vstr	s9, [r0, #20]
 800b102:	ed95 5a02 	vldr	s10, [r5, #8]
 800b106:	ed80 5a08 	vstr	s10, [r0, #32]
 800b10a:	ed94 4a02 	vldr	s8, [r4, #8]
 800b10e:	edd4 3a01 	vldr	s7, [r4, #4]
 800b112:	ed94 6a00 	vldr	s12, [r4]
 800b116:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 800b11a:	ee65 7ae3 	vnmul.f32	s15, s11, s7
 800b11e:	eee3 6a85 	vfma.f32	s13, s7, s10
 800b122:	4603      	mov	r3, r0
 800b124:	eee6 7a24 	vfma.f32	s15, s12, s9
 800b128:	ee25 7a46 	vnmul.f32	s14, s10, s12
 800b12c:	eeb0 6ae6 	vabs.f32	s12, s13
 800b130:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800b134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b138:	eea4 7a25 	vfma.f32	s14, s8, s11
 800b13c:	bfdc      	itt	le
 800b13e:	ee86 4a83 	vdivle.f32	s8, s13, s6
 800b142:	eeb0 6a43 	vmovle.f32	s12, s6
 800b146:	eef0 3ac7 	vabs.f32	s7, s14
 800b14a:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800b14e:	bfd4      	ite	le
 800b150:	ee24 4a04 	vmulle.f32	s8, s8, s8
 800b154:	eeb7 4a00 	vmovgt.f32	s8, #112	; 0x3f800000  1.0
 800b158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b15c:	ed80 7a03 	vstr	s14, [r0, #12]
 800b160:	edc0 7a06 	vstr	s15, [r0, #24]
 800b164:	d43f      	bmi.n	800b1e6 <getRotationMatrix+0x10a>
 800b166:	eec7 3a06 	vdiv.f32	s7, s14, s12
 800b16a:	eea3 4aa3 	vfma.f32	s8, s7, s7
 800b16e:	eeb0 3a44 	vmov.f32	s6, s8
 800b172:	eeb0 4ae7 	vabs.f32	s8, s15
 800b176:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800b17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b17e:	d543      	bpl.n	800b208 <getRotationMatrix+0x12c>
 800b180:	eec6 2a04 	vdiv.f32	s5, s12, s8
 800b184:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800b188:	ee62 2aa2 	vmul.f32	s5, s5, s5
 800b18c:	eeb0 6a44 	vmov.f32	s12, s8
 800b190:	eee3 3a22 	vfma.f32	s7, s6, s5
 800b194:	eeb1 4ae3 	vsqrt.f32	s8, s7
 800b198:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800b19c:	ee24 6a06 	vmul.f32	s12, s8, s12
 800b1a0:	ee83 4a86 	vdiv.f32	s8, s7, s12
 800b1a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b1a8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b1ac:	ee66 6a84 	vmul.f32	s13, s13, s8
 800b1b0:	ee65 3a47 	vnmul.f32	s7, s10, s14
 800b1b4:	ee25 4ae7 	vnmul.f32	s8, s11, s15
 800b1b8:	ee24 6ae6 	vnmul.f32	s12, s9, s13
 800b1bc:	eee7 3aa4 	vfma.f32	s7, s15, s9
 800b1c0:	eef0 4a44 	vmov.f32	s9, s8
 800b1c4:	eee6 4a85 	vfma.f32	s9, s13, s10
 800b1c8:	eea7 6a25 	vfma.f32	s12, s14, s11
 800b1cc:	edc3 6a00 	vstr	s13, [r3]
 800b1d0:	ed83 7a03 	vstr	s14, [r3, #12]
 800b1d4:	edc3 7a06 	vstr	s15, [r3, #24]
 800b1d8:	edc3 3a01 	vstr	s7, [r3, #4]
 800b1dc:	edc3 4a04 	vstr	s9, [r3, #16]
 800b1e0:	ed83 6a07 	vstr	s12, [r3, #28]
 800b1e4:	bd38      	pop	{r3, r4, r5, pc}
 800b1e6:	eec6 2a23 	vdiv.f32	s5, s12, s7
 800b1ea:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800b1ee:	ee62 2aa2 	vmul.f32	s5, s5, s5
 800b1f2:	eeb0 6a63 	vmov.f32	s12, s7
 800b1f6:	eea4 3a22 	vfma.f32	s6, s8, s5
 800b1fa:	eeb0 4ae7 	vabs.f32	s8, s15
 800b1fe:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800b202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b206:	d4bb      	bmi.n	800b180 <getRotationMatrix+0xa4>
 800b208:	ee87 4a86 	vdiv.f32	s8, s15, s12
 800b20c:	eef0 3a43 	vmov.f32	s7, s6
 800b210:	eee4 3a04 	vfma.f32	s7, s8, s8
 800b214:	e7be      	b.n	800b194 <getRotationMatrix+0xb8>
 800b216:	bf00      	nop
 800b218:	00000000 	.word	0x00000000

0800b21c <kf_update>:
 800b21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b220:	ed2d 8b10 	vpush	{d8-d15}
 800b224:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 800b228:	3901      	subs	r1, #1
 800b22a:	f8dd 4490 	ldr.w	r4, [sp, #1168]	; 0x490
 800b22e:	9303      	str	r3, [sp, #12]
 800b230:	ed94 2a00 	vldr	s4, [r4]
 800b234:	edd4 2a01 	vldr	s5, [r4, #4]
 800b238:	ed94 3a02 	vldr	s6, [r4, #8]
 800b23c:	edd4 3a03 	vldr	s7, [r4, #12]
 800b240:	ed94 4a04 	vldr	s8, [r4, #16]
 800b244:	edd4 4a05 	vldr	s9, [r4, #20]
 800b248:	ed94 5a06 	vldr	s10, [r4, #24]
 800b24c:	edd4 5a07 	vldr	s11, [r4, #28]
 800b250:	ed94 6a08 	vldr	s12, [r4, #32]
 800b254:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 800b258:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800b25c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800b260:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 800b2d4 <kf_update+0xb8>
 800b264:	9104      	str	r1, [sp, #16]
 800b266:	ab0b      	add	r3, sp, #44	; 0x2c
 800b268:	ee22 2a02 	vmul.f32	s4, s4, s4
 800b26c:	ee62 2aa2 	vmul.f32	s5, s5, s5
 800b270:	ee23 3a03 	vmul.f32	s6, s6, s6
 800b274:	ee63 3aa3 	vmul.f32	s7, s7, s7
 800b278:	ee24 4a04 	vmul.f32	s8, s8, s8
 800b27c:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800b280:	ee25 5a05 	vmul.f32	s10, s10, s10
 800b284:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800b288:	ee26 6a06 	vmul.f32	s12, s12, s12
 800b28c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800b290:	ee27 7a07 	vmul.f32	s14, s14, s14
 800b294:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b298:	9302      	str	r3, [sp, #8]
 800b29a:	2300      	movs	r3, #0
 800b29c:	4606      	mov	r6, r0
 800b29e:	9200      	str	r2, [sp, #0]
 800b2a0:	ed8d 2a0b 	vstr	s4, [sp, #44]	; 0x2c
 800b2a4:	edcd 2a0c 	vstr	s5, [sp, #48]	; 0x30
 800b2a8:	ed8d 3a0d 	vstr	s6, [sp, #52]	; 0x34
 800b2ac:	edcd 3a0e 	vstr	s7, [sp, #56]	; 0x38
 800b2b0:	ed8d 4a0f 	vstr	s8, [sp, #60]	; 0x3c
 800b2b4:	edcd 4a10 	vstr	s9, [sp, #64]	; 0x40
 800b2b8:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44
 800b2bc:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 800b2c0:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 800b2c4:	edcd 6a14 	vstr	s13, [sp, #80]	; 0x50
 800b2c8:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800b2cc:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	e010      	b.n	800b2f6 <kf_update+0xda>
 800b2d4:	00000000 	.word	0x00000000
 800b2d8:	9a00      	ldr	r2, [sp, #0]
 800b2da:	9b01      	ldr	r3, [sp, #4]
 800b2dc:	3204      	adds	r2, #4
 800b2de:	9200      	str	r2, [sp, #0]
 800b2e0:	9a02      	ldr	r2, [sp, #8]
 800b2e2:	3204      	adds	r2, #4
 800b2e4:	9202      	str	r2, [sp, #8]
 800b2e6:	9a03      	ldr	r2, [sp, #12]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	3204      	adds	r2, #4
 800b2ec:	2b0c      	cmp	r3, #12
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	9203      	str	r2, [sp, #12]
 800b2f2:	f000 857b 	beq.w	800bdec <kf_update+0xbd0>
 800b2f6:	9a04      	ldr	r2, [sp, #16]
 800b2f8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b2fc:	9204      	str	r2, [sp, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d0ea      	beq.n	800b2d8 <kf_update+0xbc>
 800b302:	9a03      	ldr	r2, [sp, #12]
 800b304:	ed8d 8a17 	vstr	s16, [sp, #92]	; 0x5c
 800b308:	f106 0328 	add.w	r3, r6, #40	; 0x28
 800b30c:	ac17      	add	r4, sp, #92	; 0x5c
 800b30e:	edd2 da00 	vldr	s27, [r2]
 800b312:	ed92 ea0c 	vldr	s28, [r2, #48]	; 0x30
 800b316:	edd2 ea18 	vldr	s29, [r2, #96]	; 0x60
 800b31a:	ed92 fa24 	vldr	s30, [r2, #144]	; 0x90
 800b31e:	edd2 fa30 	vldr	s31, [r2, #192]	; 0xc0
 800b322:	edd2 6a3c 	vldr	s13, [r2, #240]	; 0xf0
 800b326:	ed92 6a48 	vldr	s12, [r2, #288]	; 0x120
 800b32a:	edd2 5a54 	vldr	s11, [r2, #336]	; 0x150
 800b32e:	ed92 5a60 	vldr	s10, [r2, #384]	; 0x180
 800b332:	9305      	str	r3, [sp, #20]
 800b334:	ed8d 8a18 	vstr	s16, [sp, #96]	; 0x60
 800b338:	ed8d 8a19 	vstr	s16, [sp, #100]	; 0x64
 800b33c:	ed8d 8a1a 	vstr	s16, [sp, #104]	; 0x68
 800b340:	ed8d 8a1b 	vstr	s16, [sp, #108]	; 0x6c
 800b344:	ed8d 8a1c 	vstr	s16, [sp, #112]	; 0x70
 800b348:	ed8d 8a1d 	vstr	s16, [sp, #116]	; 0x74
 800b34c:	ed8d 8a1e 	vstr	s16, [sp, #120]	; 0x78
 800b350:	ed8d 8a1f 	vstr	s16, [sp, #124]	; 0x7c
 800b354:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 800b358:	4622      	mov	r2, r4
 800b35a:	ecb3 7a01 	vldmia	r3!, {s14}
 800b35e:	ecf2 7a01 	vldmia	r2!, {s15}
 800b362:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b36a:	d006      	beq.n	800b37a <kf_update+0x15e>
 800b36c:	eef5 da40 	vcmp.f32	s27, #0.0
 800b370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b374:	bf18      	it	ne
 800b376:	eee7 7a2d 	vfmane.f32	s15, s14, s27
 800b37a:	ed93 7a08 	vldr	s14, [r3, #32]
 800b37e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b386:	d006      	beq.n	800b396 <kf_update+0x17a>
 800b388:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800b38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b390:	bf18      	it	ne
 800b392:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800b396:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800b39a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a2:	d006      	beq.n	800b3b2 <kf_update+0x196>
 800b3a4:	eef5 ea40 	vcmp.f32	s29, #0.0
 800b3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ac:	bf18      	it	ne
 800b3ae:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800b3b2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800b3b6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3be:	d006      	beq.n	800b3ce <kf_update+0x1b2>
 800b3c0:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800b3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c8:	bf18      	it	ne
 800b3ca:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800b3ce:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800b3d2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3da:	d006      	beq.n	800b3ea <kf_update+0x1ce>
 800b3dc:	eef5 fa40 	vcmp.f32	s31, #0.0
 800b3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3e4:	bf18      	it	ne
 800b3e6:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800b3ea:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800b3ee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f6:	d006      	beq.n	800b406 <kf_update+0x1ea>
 800b3f8:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b400:	bf18      	it	ne
 800b402:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800b406:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800b40a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b412:	d006      	beq.n	800b422 <kf_update+0x206>
 800b414:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800b418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b41c:	bf18      	it	ne
 800b41e:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800b422:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800b426:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42e:	d006      	beq.n	800b43e <kf_update+0x222>
 800b430:	eef5 5a40 	vcmp.f32	s11, #0.0
 800b434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b438:	bf18      	it	ne
 800b43a:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800b43e:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800b442:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b44a:	d006      	beq.n	800b45a <kf_update+0x23e>
 800b44c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800b450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b454:	bf18      	it	ne
 800b456:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800b45a:	4299      	cmp	r1, r3
 800b45c:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b460:	f47f af7b 	bne.w	800b35a <kf_update+0x13e>
 800b464:	eef5 da40 	vcmp.f32	s27, #0.0
 800b468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b46c:	eddd ba17 	vldr	s23, [sp, #92]	; 0x5c
 800b470:	f040 8492 	bne.w	800bd98 <kf_update+0xb7c>
 800b474:	eef0 7a6d 	vmov.f32	s15, s27
 800b478:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800b47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b480:	ed9d ca18 	vldr	s24, [sp, #96]	; 0x60
 800b484:	d006      	beq.n	800b494 <kf_update+0x278>
 800b486:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800b48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b48e:	bf18      	it	ne
 800b490:	eeec 7a0e 	vfmane.f32	s15, s24, s28
 800b494:	eef5 ea40 	vcmp.f32	s29, #0.0
 800b498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b49c:	ed9d aa19 	vldr	s20, [sp, #100]	; 0x64
 800b4a0:	d006      	beq.n	800b4b0 <kf_update+0x294>
 800b4a2:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800b4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4aa:	bf18      	it	ne
 800b4ac:	eeea 7a2e 	vfmane.f32	s15, s20, s29
 800b4b0:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800b4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b8:	ed9d da1a 	vldr	s26, [sp, #104]	; 0x68
 800b4bc:	d006      	beq.n	800b4cc <kf_update+0x2b0>
 800b4be:	eeb5 da40 	vcmp.f32	s26, #0.0
 800b4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c6:	bf18      	it	ne
 800b4c8:	eeed 7a0f 	vfmane.f32	s15, s26, s30
 800b4cc:	eef5 fa40 	vcmp.f32	s31, #0.0
 800b4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d4:	eddd ca1b 	vldr	s25, [sp, #108]	; 0x6c
 800b4d8:	d006      	beq.n	800b4e8 <kf_update+0x2cc>
 800b4da:	eef5 ca40 	vcmp.f32	s25, #0.0
 800b4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4e2:	bf18      	it	ne
 800b4e4:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800b4e8:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f0:	ed9d ba1c 	vldr	s22, [sp, #112]	; 0x70
 800b4f4:	d006      	beq.n	800b504 <kf_update+0x2e8>
 800b4f6:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800b4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4fe:	bf18      	it	ne
 800b500:	eeeb 7a26 	vfmane.f32	s15, s22, s13
 800b504:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800b508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b50c:	eddd aa1d 	vldr	s21, [sp, #116]	; 0x74
 800b510:	d006      	beq.n	800b520 <kf_update+0x304>
 800b512:	eef5 aa40 	vcmp.f32	s21, #0.0
 800b516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b51a:	bf18      	it	ne
 800b51c:	eeea 7a86 	vfmane.f32	s15, s21, s12
 800b520:	eef5 5a40 	vcmp.f32	s11, #0.0
 800b524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b528:	eddd 9a1e 	vldr	s19, [sp, #120]	; 0x78
 800b52c:	d006      	beq.n	800b53c <kf_update+0x320>
 800b52e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800b532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b536:	bf18      	it	ne
 800b538:	eee9 7aa5 	vfmane.f32	s15, s19, s11
 800b53c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800b540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b544:	ed9d 9a1f 	vldr	s18, [sp, #124]	; 0x7c
 800b548:	d006      	beq.n	800b558 <kf_update+0x33c>
 800b54a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b552:	bf18      	it	ne
 800b554:	eee9 7a05 	vfmane.f32	s15, s18, s10
 800b558:	9b02      	ldr	r3, [sp, #8]
 800b55a:	ed93 7a00 	vldr	s14, [r3]
 800b55e:	9b01      	ldr	r3, [sp, #4]
 800b560:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b564:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800b568:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 800b56c:	2b05      	cmp	r3, #5
 800b56e:	ee6b ba87 	vmul.f32	s23, s23, s14
 800b572:	ee2c ca07 	vmul.f32	s24, s24, s14
 800b576:	ee2a aa07 	vmul.f32	s20, s20, s14
 800b57a:	ee2d da07 	vmul.f32	s26, s26, s14
 800b57e:	ee67 ca2c 	vmul.f32	s25, s14, s25
 800b582:	ee27 ba0b 	vmul.f32	s22, s14, s22
 800b586:	ee67 aa2a 	vmul.f32	s21, s14, s21
 800b58a:	ee69 9a87 	vmul.f32	s19, s19, s14
 800b58e:	ee29 9a07 	vmul.f32	s18, s18, s14
 800b592:	edcd ba17 	vstr	s23, [sp, #92]	; 0x5c
 800b596:	ed8d ca18 	vstr	s24, [sp, #96]	; 0x60
 800b59a:	ed8d aa19 	vstr	s20, [sp, #100]	; 0x64
 800b59e:	ed8d da1a 	vstr	s26, [sp, #104]	; 0x68
 800b5a2:	edcd ca1b 	vstr	s25, [sp, #108]	; 0x6c
 800b5a6:	ed8d ba1c 	vstr	s22, [sp, #112]	; 0x70
 800b5aa:	edcd aa1d 	vstr	s21, [sp, #116]	; 0x74
 800b5ae:	edcd 9a1e 	vstr	s19, [sp, #120]	; 0x78
 800b5b2:	ed8d 9a1f 	vstr	s18, [sp, #124]	; 0x7c
 800b5b6:	f340 83eb 	ble.w	800bd90 <kf_update+0xb74>
 800b5ba:	eef5 da40 	vcmp.f32	s27, #0.0
 800b5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c2:	f000 8456 	beq.w	800be72 <kf_update+0xc56>
 800b5c6:	edd6 7a01 	vldr	s15, [r6, #4]
 800b5ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5d2:	f040 8477 	bne.w	800bec4 <kf_update+0xca8>
 800b5d6:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800b5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5de:	d008      	beq.n	800b5f2 <kf_update+0x3d6>
 800b5e0:	ed96 7a02 	vldr	s14, [r6, #8]
 800b5e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ec:	bf18      	it	ne
 800b5ee:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800b5f2:	eef5 ea40 	vcmp.f32	s29, #0.0
 800b5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5fa:	d008      	beq.n	800b60e <kf_update+0x3f2>
 800b5fc:	ed96 7a03 	vldr	s14, [r6, #12]
 800b600:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b608:	bf18      	it	ne
 800b60a:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800b60e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800b612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b616:	d008      	beq.n	800b62a <kf_update+0x40e>
 800b618:	ed96 7a04 	vldr	s14, [r6, #16]
 800b61c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b624:	bf18      	it	ne
 800b626:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800b62a:	eef5 fa40 	vcmp.f32	s31, #0.0
 800b62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b632:	d008      	beq.n	800b646 <kf_update+0x42a>
 800b634:	ed96 7a05 	vldr	s14, [r6, #20]
 800b638:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b640:	bf18      	it	ne
 800b642:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800b646:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b64e:	d008      	beq.n	800b662 <kf_update+0x446>
 800b650:	ed96 7a06 	vldr	s14, [r6, #24]
 800b654:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b65c:	bf18      	it	ne
 800b65e:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800b662:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800b666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b66a:	d008      	beq.n	800b67e <kf_update+0x462>
 800b66c:	ed96 7a07 	vldr	s14, [r6, #28]
 800b670:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b678:	bf18      	it	ne
 800b67a:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800b67e:	eef5 5a40 	vcmp.f32	s11, #0.0
 800b682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b686:	d008      	beq.n	800b69a <kf_update+0x47e>
 800b688:	ed96 7a08 	vldr	s14, [r6, #32]
 800b68c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b694:	bf18      	it	ne
 800b696:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800b69a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800b69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6a2:	d008      	beq.n	800b6b6 <kf_update+0x49a>
 800b6a4:	ed96 7a09 	vldr	s14, [r6, #36]	; 0x24
 800b6a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b0:	bf18      	it	ne
 800b6b2:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800b6b6:	9b00      	ldr	r3, [sp, #0]
 800b6b8:	edd3 8a00 	vldr	s17, [r3]
 800b6bc:	ee78 8ae7 	vsub.f32	s17, s17, s15
 800b6c0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	a868      	add	r0, sp, #416	; 0x1a0
 800b6c8:	ed8d 5a09 	vstr	s10, [sp, #36]	; 0x24
 800b6cc:	edcd 5a08 	vstr	s11, [sp, #32]
 800b6d0:	ed8d 6a07 	vstr	s12, [sp, #28]
 800b6d4:	edcd 6a06 	vstr	s13, [sp, #24]
 800b6d8:	f007 fcd6 	bl	8013088 <memset>
 800b6dc:	ab68      	add	r3, sp, #416	; 0x1a0
 800b6de:	ed9d 5a09 	vldr	s10, [sp, #36]	; 0x24
 800b6e2:	eddd 5a08 	vldr	s11, [sp, #32]
 800b6e6:	ed9d 6a07 	vldr	s12, [sp, #28]
 800b6ea:	eddd 6a06 	vldr	s13, [sp, #24]
 800b6ee:	a971      	add	r1, sp, #452	; 0x1c4
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	ecf4 7a01 	vldmia	r4!, {s15}
 800b6f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fe:	d062      	beq.n	800b7c6 <kf_update+0x5aa>
 800b700:	eef5 da40 	vcmp.f32	s27, #0.0
 800b704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b708:	d005      	beq.n	800b716 <kf_update+0x4fa>
 800b70a:	ed92 7a00 	vldr	s14, [r2]
 800b70e:	eea7 7aad 	vfma.f32	s14, s15, s27
 800b712:	ed82 7a00 	vstr	s14, [r2]
 800b716:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800b71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b71e:	d005      	beq.n	800b72c <kf_update+0x510>
 800b720:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 800b724:	eea7 7a8e 	vfma.f32	s14, s15, s28
 800b728:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 800b72c:	eef5 ea40 	vcmp.f32	s29, #0.0
 800b730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b734:	d005      	beq.n	800b742 <kf_update+0x526>
 800b736:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 800b73a:	eea7 7aae 	vfma.f32	s14, s15, s29
 800b73e:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 800b742:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800b746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b74a:	d005      	beq.n	800b758 <kf_update+0x53c>
 800b74c:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 800b750:	eea7 7a8f 	vfma.f32	s14, s15, s30
 800b754:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 800b758:	eef5 fa40 	vcmp.f32	s31, #0.0
 800b75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b760:	d005      	beq.n	800b76e <kf_update+0x552>
 800b762:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 800b766:	eea7 7aaf 	vfma.f32	s14, s15, s31
 800b76a:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 800b76e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b776:	d005      	beq.n	800b784 <kf_update+0x568>
 800b778:	ed92 7a2d 	vldr	s14, [r2, #180]	; 0xb4
 800b77c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b780:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 800b784:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800b788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b78c:	d005      	beq.n	800b79a <kf_update+0x57e>
 800b78e:	ed92 7a36 	vldr	s14, [r2, #216]	; 0xd8
 800b792:	eea7 7a86 	vfma.f32	s14, s15, s12
 800b796:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 800b79a:	eef5 5a40 	vcmp.f32	s11, #0.0
 800b79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a2:	d005      	beq.n	800b7b0 <kf_update+0x594>
 800b7a4:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 800b7a8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b7ac:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 800b7b0:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800b7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b8:	d005      	beq.n	800b7c6 <kf_update+0x5aa>
 800b7ba:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 800b7be:	eea7 7a85 	vfma.f32	s14, s15, s10
 800b7c2:	ed82 7a48 	vstr	s14, [r2, #288]	; 0x120
 800b7c6:	3204      	adds	r2, #4
 800b7c8:	4291      	cmp	r1, r2
 800b7ca:	d192      	bne.n	800b6f2 <kf_update+0x4d6>
 800b7cc:	afb9      	add	r7, sp, #740	; 0x2e4
 800b7ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7d2:	a868      	add	r0, sp, #416	; 0x1a0
 800b7d4:	463a      	mov	r2, r7
 800b7d6:	f04f 0b02 	mov.w	fp, #2
 800b7da:	f04f 0e03 	mov.w	lr, #3
 800b7de:	f04f 0c04 	mov.w	ip, #4
 800b7e2:	f04f 0a05 	mov.w	sl, #5
 800b7e6:	f04f 0906 	mov.w	r9, #6
 800b7ea:	f04f 0807 	mov.w	r8, #7
 800b7ee:	2408      	movs	r4, #8
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	9306      	str	r3, [sp, #24]
 800b7f4:	e07b      	b.n	800b8ee <kf_update+0x6d2>
 800b7f6:	edd0 7a00 	vldr	s15, [r0]
 800b7fa:	ed82 8a01 	vstr	s16, [r2, #4]
 800b7fe:	eef1 7a67 	vneg.f32	s15, s15
 800b802:	2901      	cmp	r1, #1
 800b804:	edc0 7a00 	vstr	s15, [r0]
 800b808:	f1a4 0507 	sub.w	r5, r4, #7
 800b80c:	f000 8110 	beq.w	800ba30 <kf_update+0x814>
 800b810:	ab68      	add	r3, sp, #416	; 0x1a0
 800b812:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b816:	edd5 7a00 	vldr	s15, [r5]
 800b81a:	ed82 8a02 	vstr	s16, [r2, #8]
 800b81e:	eef1 7a67 	vneg.f32	s15, s15
 800b822:	2902      	cmp	r1, #2
 800b824:	edc5 7a00 	vstr	s15, [r5]
 800b828:	f000 80ef 	beq.w	800ba0a <kf_update+0x7ee>
 800b82c:	ab68      	add	r3, sp, #416	; 0x1a0
 800b82e:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 800b832:	edd5 7a00 	vldr	s15, [r5]
 800b836:	ed82 8a03 	vstr	s16, [r2, #12]
 800b83a:	eef1 7a67 	vneg.f32	s15, s15
 800b83e:	2903      	cmp	r1, #3
 800b840:	edc5 7a00 	vstr	s15, [r5]
 800b844:	d176      	bne.n	800b934 <kf_update+0x718>
 800b846:	edd0 7a03 	vldr	s15, [r0, #12]
 800b84a:	ed82 8a04 	vstr	s16, [r2, #16]
 800b84e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b852:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 800b856:	edc0 7a03 	vstr	s15, [r0, #12]
 800b85a:	edd5 7a00 	vldr	s15, [r5]
 800b85e:	ed82 8a05 	vstr	s16, [r2, #20]
 800b862:	eef1 7a67 	vneg.f32	s15, s15
 800b866:	edc5 7a00 	vstr	s15, [r5]
 800b86a:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 800b86e:	edd5 7a00 	vldr	s15, [r5]
 800b872:	ed82 8a06 	vstr	s16, [r2, #24]
 800b876:	eef1 7a67 	vneg.f32	s15, s15
 800b87a:	edc5 7a00 	vstr	s15, [r5]
 800b87e:	ab68      	add	r3, sp, #416	; 0x1a0
 800b880:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 800b884:	edd5 7a00 	vldr	s15, [r5]
 800b888:	ed82 8a07 	vstr	s16, [r2, #28]
 800b88c:	eef1 7a67 	vneg.f32	s15, s15
 800b890:	2907      	cmp	r1, #7
 800b892:	edc5 7a00 	vstr	s15, [r5]
 800b896:	f040 80a4 	bne.w	800b9e2 <kf_update+0x7c6>
 800b89a:	edd0 7a07 	vldr	s15, [r0, #28]
 800b89e:	ed82 8a08 	vstr	s16, [r2, #32]
 800b8a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8a6:	edc0 7a07 	vstr	s15, [r0, #28]
 800b8aa:	ab68      	add	r3, sp, #416	; 0x1a0
 800b8ac:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 800b8b0:	edd5 7a00 	vldr	s15, [r5]
 800b8b4:	00a5      	lsls	r5, r4, #2
 800b8b6:	eef1 7a67 	vneg.f32	s15, s15
 800b8ba:	ab68      	add	r3, sp, #416	; 0x1a0
 800b8bc:	3101      	adds	r1, #1
 800b8be:	441d      	add	r5, r3
 800b8c0:	2909      	cmp	r1, #9
 800b8c2:	edc5 7a00 	vstr	s15, [r5]
 800b8c6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800b8ca:	f104 0409 	add.w	r4, r4, #9
 800b8ce:	f100 0024 	add.w	r0, r0, #36	; 0x24
 800b8d2:	f108 0809 	add.w	r8, r8, #9
 800b8d6:	f109 0909 	add.w	r9, r9, #9
 800b8da:	f10a 0a09 	add.w	sl, sl, #9
 800b8de:	f10c 0c09 	add.w	ip, ip, #9
 800b8e2:	f10e 0e09 	add.w	lr, lr, #9
 800b8e6:	f10b 0b09 	add.w	fp, fp, #9
 800b8ea:	f000 80d2 	beq.w	800ba92 <kf_update+0x876>
 800b8ee:	ed82 8a00 	vstr	s16, [r2]
 800b8f2:	2900      	cmp	r1, #0
 800b8f4:	f47f af7f 	bne.w	800b7f6 <kf_update+0x5da>
 800b8f8:	eddd 7a68 	vldr	s15, [sp, #416]	; 0x1a0
 800b8fc:	ed82 8a01 	vstr	s16, [r2, #4]
 800b900:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b904:	ab68      	add	r3, sp, #416	; 0x1a0
 800b906:	1fe5      	subs	r5, r4, #7
 800b908:	edc0 7a00 	vstr	s15, [r0]
 800b90c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b910:	edd5 7a00 	vldr	s15, [r5]
 800b914:	ed82 8a02 	vstr	s16, [r2, #8]
 800b918:	eef1 7a67 	vneg.f32	s15, s15
 800b91c:	edc5 7a00 	vstr	s15, [r5]
 800b920:	ed82 8a03 	vstr	s16, [r2, #12]
 800b924:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 800b928:	edd5 7a00 	vldr	s15, [r5]
 800b92c:	eef1 7a67 	vneg.f32	s15, s15
 800b930:	edc5 7a00 	vstr	s15, [r5]
 800b934:	ab68      	add	r3, sp, #416	; 0x1a0
 800b936:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 800b93a:	edd5 7a00 	vldr	s15, [r5]
 800b93e:	ed82 8a04 	vstr	s16, [r2, #16]
 800b942:	eef1 7a67 	vneg.f32	s15, s15
 800b946:	2904      	cmp	r1, #4
 800b948:	edc5 7a00 	vstr	s15, [r5]
 800b94c:	d02d      	beq.n	800b9aa <kf_update+0x78e>
 800b94e:	ab68      	add	r3, sp, #416	; 0x1a0
 800b950:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 800b954:	edd5 7a00 	vldr	s15, [r5]
 800b958:	ed82 8a05 	vstr	s16, [r2, #20]
 800b95c:	eef1 7a67 	vneg.f32	s15, s15
 800b960:	2905      	cmp	r1, #5
 800b962:	edc5 7a00 	vstr	s15, [r5]
 800b966:	d077      	beq.n	800ba58 <kf_update+0x83c>
 800b968:	ab68      	add	r3, sp, #416	; 0x1a0
 800b96a:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 800b96e:	edd5 7a00 	vldr	s15, [r5]
 800b972:	ed82 8a06 	vstr	s16, [r2, #24]
 800b976:	eef1 7a67 	vneg.f32	s15, s15
 800b97a:	2906      	cmp	r1, #6
 800b97c:	edc5 7a00 	vstr	s15, [r5]
 800b980:	f47f af7d 	bne.w	800b87e <kf_update+0x662>
 800b984:	edd0 7a06 	vldr	s15, [r0, #24]
 800b988:	ed82 8a07 	vstr	s16, [r2, #28]
 800b98c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b990:	ed82 8a08 	vstr	s16, [r2, #32]
 800b994:	edc0 7a06 	vstr	s15, [r0, #24]
 800b998:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 800b99c:	edd5 7a00 	vldr	s15, [r5]
 800b9a0:	eef1 7a67 	vneg.f32	s15, s15
 800b9a4:	edc5 7a00 	vstr	s15, [r5]
 800b9a8:	e77f      	b.n	800b8aa <kf_update+0x68e>
 800b9aa:	edd0 7a04 	vldr	s15, [r0, #16]
 800b9ae:	ed82 8a05 	vstr	s16, [r2, #20]
 800b9b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9b6:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 800b9ba:	edc0 7a04 	vstr	s15, [r0, #16]
 800b9be:	edd5 7a00 	vldr	s15, [r5]
 800b9c2:	ed82 8a06 	vstr	s16, [r2, #24]
 800b9c6:	eef1 7a67 	vneg.f32	s15, s15
 800b9ca:	edc5 7a00 	vstr	s15, [r5]
 800b9ce:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 800b9d2:	edd5 7a00 	vldr	s15, [r5]
 800b9d6:	ed82 8a07 	vstr	s16, [r2, #28]
 800b9da:	eef1 7a67 	vneg.f32	s15, s15
 800b9de:	edc5 7a00 	vstr	s15, [r5]
 800b9e2:	ab68      	add	r3, sp, #416	; 0x1a0
 800b9e4:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 800b9e8:	edd5 7a00 	vldr	s15, [r5]
 800b9ec:	ed82 8a08 	vstr	s16, [r2, #32]
 800b9f0:	eef1 7a67 	vneg.f32	s15, s15
 800b9f4:	2908      	cmp	r1, #8
 800b9f6:	edc5 7a00 	vstr	s15, [r5]
 800b9fa:	f47f af56 	bne.w	800b8aa <kf_update+0x68e>
 800b9fe:	edd0 7a08 	vldr	s15, [r0, #32]
 800ba02:	00a5      	lsls	r5, r4, #2
 800ba04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba08:	e757      	b.n	800b8ba <kf_update+0x69e>
 800ba0a:	edd0 7a02 	vldr	s15, [r0, #8]
 800ba0e:	ed82 8a03 	vstr	s16, [r2, #12]
 800ba12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba16:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 800ba1a:	edc0 7a02 	vstr	s15, [r0, #8]
 800ba1e:	edd5 7a00 	vldr	s15, [r5]
 800ba22:	ed82 8a04 	vstr	s16, [r2, #16]
 800ba26:	eef1 7a67 	vneg.f32	s15, s15
 800ba2a:	edc5 7a00 	vstr	s15, [r5]
 800ba2e:	e78e      	b.n	800b94e <kf_update+0x732>
 800ba30:	edd0 7a01 	vldr	s15, [r0, #4]
 800ba34:	ed82 8a02 	vstr	s16, [r2, #8]
 800ba38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba3c:	ab68      	add	r3, sp, #416	; 0x1a0
 800ba3e:	ed82 8a03 	vstr	s16, [r2, #12]
 800ba42:	edc0 7a01 	vstr	s15, [r0, #4]
 800ba46:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 800ba4a:	edd5 7a00 	vldr	s15, [r5]
 800ba4e:	eef1 7a67 	vneg.f32	s15, s15
 800ba52:	edc5 7a00 	vstr	s15, [r5]
 800ba56:	e76d      	b.n	800b934 <kf_update+0x718>
 800ba58:	edd0 7a05 	vldr	s15, [r0, #20]
 800ba5c:	ed82 8a06 	vstr	s16, [r2, #24]
 800ba60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba64:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 800ba68:	edc0 7a05 	vstr	s15, [r0, #20]
 800ba6c:	edd5 7a00 	vldr	s15, [r5]
 800ba70:	ed82 8a07 	vstr	s16, [r2, #28]
 800ba74:	eef1 7a67 	vneg.f32	s15, s15
 800ba78:	edc5 7a00 	vstr	s15, [r5]
 800ba7c:	ed82 8a08 	vstr	s16, [r2, #32]
 800ba80:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 800ba84:	edd5 7a00 	vldr	s15, [r5]
 800ba88:	eef1 7a67 	vneg.f32	s15, s15
 800ba8c:	edc5 7a00 	vstr	s15, [r5]
 800ba90:	e70b      	b.n	800b8aa <kf_update+0x68e>
 800ba92:	9b06      	ldr	r3, [sp, #24]
 800ba94:	2400      	movs	r4, #0
 800ba96:	f506 70a2 	add.w	r0, r6, #324	; 0x144
 800ba9a:	ecf3 3a01 	vldmia	r3!, {s7}
 800ba9e:	ed93 4a08 	vldr	s8, [r3, #32]
 800baa2:	edd3 4a11 	vldr	s9, [r3, #68]	; 0x44
 800baa6:	ed93 5a1a 	vldr	s10, [r3, #104]	; 0x68
 800baaa:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 800baae:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 800bab2:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 800bab6:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800baba:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 800babe:	4632      	mov	r2, r6
 800bac0:	4639      	mov	r1, r7
 800bac2:	eef5 3a40 	vcmp.f32	s7, #0.0
 800bac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baca:	d00c      	beq.n	800bae6 <kf_update+0x8ca>
 800bacc:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
 800bad0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800bad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad8:	d005      	beq.n	800bae6 <kf_update+0x8ca>
 800bada:	edd1 2a00 	vldr	s5, [r1]
 800bade:	eee3 2a83 	vfma.f32	s5, s7, s6
 800bae2:	edc1 2a00 	vstr	s5, [r1]
 800bae6:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800baea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baee:	d00c      	beq.n	800bb0a <kf_update+0x8ee>
 800baf0:	ed92 3a0b 	vldr	s6, [r2, #44]	; 0x2c
 800baf4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800baf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bafc:	d005      	beq.n	800bb0a <kf_update+0x8ee>
 800bafe:	edd1 2a00 	vldr	s5, [r1]
 800bb02:	eee4 2a03 	vfma.f32	s5, s8, s6
 800bb06:	edc1 2a00 	vstr	s5, [r1]
 800bb0a:	eef5 4a40 	vcmp.f32	s9, #0.0
 800bb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb12:	d00c      	beq.n	800bb2e <kf_update+0x912>
 800bb14:	ed92 3a0c 	vldr	s6, [r2, #48]	; 0x30
 800bb18:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800bb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb20:	d005      	beq.n	800bb2e <kf_update+0x912>
 800bb22:	edd1 2a00 	vldr	s5, [r1]
 800bb26:	eee4 2a83 	vfma.f32	s5, s9, s6
 800bb2a:	edc1 2a00 	vstr	s5, [r1]
 800bb2e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800bb32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb36:	d00c      	beq.n	800bb52 <kf_update+0x936>
 800bb38:	ed92 3a0d 	vldr	s6, [r2, #52]	; 0x34
 800bb3c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800bb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb44:	d005      	beq.n	800bb52 <kf_update+0x936>
 800bb46:	edd1 2a00 	vldr	s5, [r1]
 800bb4a:	eee5 2a03 	vfma.f32	s5, s10, s6
 800bb4e:	edc1 2a00 	vstr	s5, [r1]
 800bb52:	eef5 5a40 	vcmp.f32	s11, #0.0
 800bb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb5a:	d00c      	beq.n	800bb76 <kf_update+0x95a>
 800bb5c:	ed92 3a0e 	vldr	s6, [r2, #56]	; 0x38
 800bb60:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800bb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb68:	d005      	beq.n	800bb76 <kf_update+0x95a>
 800bb6a:	edd1 2a00 	vldr	s5, [r1]
 800bb6e:	eee5 2a83 	vfma.f32	s5, s11, s6
 800bb72:	edc1 2a00 	vstr	s5, [r1]
 800bb76:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800bb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb7e:	d00c      	beq.n	800bb9a <kf_update+0x97e>
 800bb80:	ed92 3a0f 	vldr	s6, [r2, #60]	; 0x3c
 800bb84:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800bb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb8c:	d005      	beq.n	800bb9a <kf_update+0x97e>
 800bb8e:	edd1 2a00 	vldr	s5, [r1]
 800bb92:	eee6 2a03 	vfma.f32	s5, s12, s6
 800bb96:	edc1 2a00 	vstr	s5, [r1]
 800bb9a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800bb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bba2:	d00c      	beq.n	800bbbe <kf_update+0x9a2>
 800bba4:	ed92 3a10 	vldr	s6, [r2, #64]	; 0x40
 800bba8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800bbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbb0:	d005      	beq.n	800bbbe <kf_update+0x9a2>
 800bbb2:	edd1 2a00 	vldr	s5, [r1]
 800bbb6:	eee6 2a83 	vfma.f32	s5, s13, s6
 800bbba:	edc1 2a00 	vstr	s5, [r1]
 800bbbe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbc6:	d00c      	beq.n	800bbe2 <kf_update+0x9c6>
 800bbc8:	ed92 3a11 	vldr	s6, [r2, #68]	; 0x44
 800bbcc:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800bbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd4:	d005      	beq.n	800bbe2 <kf_update+0x9c6>
 800bbd6:	edd1 2a00 	vldr	s5, [r1]
 800bbda:	eee7 2a03 	vfma.f32	s5, s14, s6
 800bbde:	edc1 2a00 	vstr	s5, [r1]
 800bbe2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbea:	d00c      	beq.n	800bc06 <kf_update+0x9ea>
 800bbec:	ed92 3a12 	vldr	s6, [r2, #72]	; 0x48
 800bbf0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800bbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf8:	d005      	beq.n	800bc06 <kf_update+0x9ea>
 800bbfa:	edd1 2a00 	vldr	s5, [r1]
 800bbfe:	eee7 2a83 	vfma.f32	s5, s15, s6
 800bc02:	edc1 2a00 	vstr	s5, [r1]
 800bc06:	3224      	adds	r2, #36	; 0x24
 800bc08:	4282      	cmp	r2, r0
 800bc0a:	f101 0124 	add.w	r1, r1, #36	; 0x24
 800bc0e:	f47f af58 	bne.w	800bac2 <kf_update+0x8a6>
 800bc12:	3401      	adds	r4, #1
 800bc14:	2c09      	cmp	r4, #9
 800bc16:	f107 0704 	add.w	r7, r7, #4
 800bc1a:	f47f af3e 	bne.w	800ba9a <kf_update+0x87e>
 800bc1e:	9805      	ldr	r0, [sp, #20]
 800bc20:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800bc24:	a9b9      	add	r1, sp, #740	; 0x2e4
 800bc26:	f007 fa67 	bl	80130f8 <memcpy>
 800bc2a:	eef5 ba40 	vcmp.f32	s23, #0.0
 800bc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc32:	d05f      	beq.n	800bcf4 <kf_update+0xad8>
 800bc34:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3c:	d05a      	beq.n	800bcf4 <kf_update+0xad8>
 800bc3e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800bc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc46:	ee68 baab 	vmul.f32	s23, s17, s23
 800bc4a:	f000 812c 	beq.w	800bea6 <kf_update+0xc8a>
 800bc4e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800bc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc56:	ee2c ca28 	vmul.f32	s24, s24, s17
 800bc5a:	f000 8121 	beq.w	800bea0 <kf_update+0xc84>
 800bc5e:	eeb5 da40 	vcmp.f32	s26, #0.0
 800bc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc66:	ee68 7a8a 	vmul.f32	s15, s17, s20
 800bc6a:	f000 8114 	beq.w	800be96 <kf_update+0xc7a>
 800bc6e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800bc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc76:	ee28 7a8d 	vmul.f32	s14, s17, s26
 800bc7a:	eeb0 aa4c 	vmov.f32	s20, s24
 800bc7e:	f040 812f 	bne.w	800bee0 <kf_update+0xcc4>
 800bc82:	eef0 ca47 	vmov.f32	s25, s14
 800bc86:	eeb0 da67 	vmov.f32	s26, s15
 800bc8a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800bc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc92:	d065      	beq.n	800bd60 <kf_update+0xb44>
 800bc94:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc9c:	f000 80f0 	beq.w	800be80 <kf_update+0xc64>
 800bca0:	eef0 7a48 	vmov.f32	s15, s16
 800bca4:	eef5 aa40 	vcmp.f32	s21, #0.0
 800bca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcac:	ee28 7a8b 	vmul.f32	s14, s17, s22
 800bcb0:	d17d      	bne.n	800bdae <kf_update+0xb92>
 800bcb2:	eef0 aa47 	vmov.f32	s21, s14
 800bcb6:	eeb0 ba67 	vmov.f32	s22, s15
 800bcba:	eef5 9a40 	vcmp.f32	s19, #0.0
 800bcbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc2:	f000 8082 	beq.w	800bdca <kf_update+0xbae>
 800bcc6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bcca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcce:	f000 80da 	beq.w	800be86 <kf_update+0xc6a>
 800bcd2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800bcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcda:	ee28 7aa9 	vmul.f32	s14, s17, s19
 800bcde:	eef0 7a48 	vmov.f32	s15, s16
 800bce2:	f040 812a 	bne.w	800bf3a <kf_update+0xd1e>
 800bce6:	eef0 8a49 	vmov.f32	s17, s18
 800bcea:	eef0 9a67 	vmov.f32	s19, s15
 800bcee:	eeb0 9a47 	vmov.f32	s18, s14
 800bcf2:	e086      	b.n	800be02 <kf_update+0xbe6>
 800bcf4:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800bcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcfc:	d005      	beq.n	800bd0a <kf_update+0xaee>
 800bcfe:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd06:	f040 80f9 	bne.w	800befc <kf_update+0xce0>
 800bd0a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800bd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd12:	d071      	beq.n	800bdf8 <kf_update+0xbdc>
 800bd14:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bd18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd1c:	f040 8116 	bne.w	800bf4c <kf_update+0xd30>
 800bd20:	eeb0 aa68 	vmov.f32	s20, s17
 800bd24:	eef0 ba68 	vmov.f32	s23, s17
 800bd28:	eeb5 da40 	vcmp.f32	s26, #0.0
 800bd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd30:	d007      	beq.n	800bd42 <kf_update+0xb26>
 800bd32:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd3a:	f040 80c7 	bne.w	800becc <kf_update+0xcb0>
 800bd3e:	eeb0 da68 	vmov.f32	s26, s17
 800bd42:	eef5 ca40 	vcmp.f32	s25, #0.0
 800bd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd4a:	d09e      	beq.n	800bc8a <kf_update+0xa6e>
 800bd4c:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bd50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd54:	f040 80f7 	bne.w	800bf46 <kf_update+0xd2a>
 800bd58:	eeb0 ba68 	vmov.f32	s22, s17
 800bd5c:	eef0 ca68 	vmov.f32	s25, s17
 800bd60:	eef5 aa40 	vcmp.f32	s21, #0.0
 800bd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd68:	d0a7      	beq.n	800bcba <kf_update+0xa9e>
 800bd6a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd72:	f040 80ce 	bne.w	800bf12 <kf_update+0xcf6>
 800bd76:	eef5 9a40 	vcmp.f32	s19, #0.0
 800bd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7e:	f000 8087 	beq.w	800be90 <kf_update+0xc74>
 800bd82:	eeb0 9a68 	vmov.f32	s18, s17
 800bd86:	eef0 9a68 	vmov.f32	s19, s17
 800bd8a:	eef0 aa68 	vmov.f32	s21, s17
 800bd8e:	e038      	b.n	800be02 <kf_update+0xbe6>
 800bd90:	9b00      	ldr	r3, [sp, #0]
 800bd92:	edd3 8a00 	vldr	s17, [r3]
 800bd96:	e493      	b.n	800b6c0 <kf_update+0x4a4>
 800bd98:	eef5 ba40 	vcmp.f32	s23, #0.0
 800bd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda0:	bf14      	ite	ne
 800bda2:	ee6b 7aad 	vmulne.f32	s15, s23, s27
 800bda6:	eef0 7a6b 	vmoveq.f32	s15, s23
 800bdaa:	f7ff bb65 	b.w	800b478 <kf_update+0x25c>
 800bdae:	eef5 9a40 	vcmp.f32	s19, #0.0
 800bdb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb6:	eeb0 ba67 	vmov.f32	s22, s15
 800bdba:	ee68 7aaa 	vmul.f32	s15, s17, s21
 800bdbe:	f040 80b2 	bne.w	800bf26 <kf_update+0xd0a>
 800bdc2:	eef0 9a67 	vmov.f32	s19, s15
 800bdc6:	eef0 aa47 	vmov.f32	s21, s14
 800bdca:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800bdce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd2:	d014      	beq.n	800bdfe <kf_update+0xbe2>
 800bdd4:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bdd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bddc:	d04d      	beq.n	800be7a <kf_update+0xc5e>
 800bdde:	eeb0 7a48 	vmov.f32	s14, s16
 800bde2:	ee68 8a89 	vmul.f32	s17, s17, s18
 800bde6:	eeb0 9a47 	vmov.f32	s18, s14
 800bdea:	e00a      	b.n	800be02 <kf_update+0xbe6>
 800bdec:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
 800bdf0:	ecbd 8b10 	vpop	{d8-d15}
 800bdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf8:	eef0 ba4a 	vmov.f32	s23, s20
 800bdfc:	e794      	b.n	800bd28 <kf_update+0xb0c>
 800bdfe:	eef0 8a49 	vmov.f32	s17, s18
 800be02:	edd6 3a01 	vldr	s7, [r6, #4]
 800be06:	ed96 4a02 	vldr	s8, [r6, #8]
 800be0a:	edd6 4a03 	vldr	s9, [r6, #12]
 800be0e:	ed96 5a04 	vldr	s10, [r6, #16]
 800be12:	edd6 5a05 	vldr	s11, [r6, #20]
 800be16:	ed96 6a06 	vldr	s12, [r6, #24]
 800be1a:	edd6 6a07 	vldr	s13, [r6, #28]
 800be1e:	ed96 7a08 	vldr	s14, [r6, #32]
 800be22:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
 800be26:	ee73 baab 	vadd.f32	s23, s7, s23
 800be2a:	ee34 aa0a 	vadd.f32	s20, s8, s20
 800be2e:	ee34 da8d 	vadd.f32	s26, s9, s26
 800be32:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800be36:	ee35 ba8b 	vadd.f32	s22, s11, s22
 800be3a:	ee76 aa2a 	vadd.f32	s21, s12, s21
 800be3e:	ee76 9aa9 	vadd.f32	s19, s13, s19
 800be42:	ee37 9a09 	vadd.f32	s18, s14, s18
 800be46:	ee77 8aa8 	vadd.f32	s17, s15, s17
 800be4a:	edc6 ba01 	vstr	s23, [r6, #4]
 800be4e:	ed86 aa02 	vstr	s20, [r6, #8]
 800be52:	ed86 da03 	vstr	s26, [r6, #12]
 800be56:	edc6 ca04 	vstr	s25, [r6, #16]
 800be5a:	ed86 ba05 	vstr	s22, [r6, #20]
 800be5e:	edc6 aa06 	vstr	s21, [r6, #24]
 800be62:	edc6 9a07 	vstr	s19, [r6, #28]
 800be66:	ed86 9a08 	vstr	s18, [r6, #32]
 800be6a:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
 800be6e:	f7ff ba33 	b.w	800b2d8 <kf_update+0xbc>
 800be72:	eef0 7a6d 	vmov.f32	s15, s27
 800be76:	f7ff bbae 	b.w	800b5d6 <kf_update+0x3ba>
 800be7a:	eeb0 9a68 	vmov.f32	s18, s17
 800be7e:	e7c0      	b.n	800be02 <kf_update+0xbe6>
 800be80:	eeb0 ba68 	vmov.f32	s22, s17
 800be84:	e76c      	b.n	800bd60 <kf_update+0xb44>
 800be86:	eeb0 9a68 	vmov.f32	s18, s17
 800be8a:	eef0 9a68 	vmov.f32	s19, s17
 800be8e:	e7b8      	b.n	800be02 <kf_update+0xbe6>
 800be90:	eef0 aa69 	vmov.f32	s21, s19
 800be94:	e799      	b.n	800bdca <kf_update+0xbae>
 800be96:	eeb0 da67 	vmov.f32	s26, s15
 800be9a:	eeb0 aa4c 	vmov.f32	s20, s24
 800be9e:	e750      	b.n	800bd42 <kf_update+0xb26>
 800bea0:	eeb0 aa4c 	vmov.f32	s20, s24
 800bea4:	e740      	b.n	800bd28 <kf_update+0xb0c>
 800bea6:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800beaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beae:	f43f af3b 	beq.w	800bd28 <kf_update+0xb0c>
 800beb2:	eeb5 da40 	vcmp.f32	s26, #0.0
 800beb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beba:	ee68 7a8a 	vmul.f32	s15, s17, s20
 800bebe:	f47f aed6 	bne.w	800bc6e <kf_update+0xa52>
 800bec2:	e7e8      	b.n	800be96 <kf_update+0xc7a>
 800bec4:	ee67 7aad 	vmul.f32	s15, s15, s27
 800bec8:	f7ff bb85 	b.w	800b5d6 <kf_update+0x3ba>
 800becc:	eef5 ca40 	vcmp.f32	s25, #0.0
 800bed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed4:	ee28 7a8d 	vmul.f32	s14, s17, s26
 800bed8:	eef0 7a48 	vmov.f32	s15, s16
 800bedc:	f43f aed1 	beq.w	800bc82 <kf_update+0xa66>
 800bee0:	eeb0 da67 	vmov.f32	s26, s15
 800bee4:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800bee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beec:	ee68 7aac 	vmul.f32	s15, s17, s25
 800bef0:	d126      	bne.n	800bf40 <kf_update+0xd24>
 800bef2:	eeb0 ba67 	vmov.f32	s22, s15
 800bef6:	eef0 ca47 	vmov.f32	s25, s14
 800befa:	e731      	b.n	800bd60 <kf_update+0xb44>
 800befc:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800bf00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf04:	ee2c ca28 	vmul.f32	s24, s24, s17
 800bf08:	eef0 ba48 	vmov.f32	s23, s16
 800bf0c:	f47f aea7 	bne.w	800bc5e <kf_update+0xa42>
 800bf10:	e7c6      	b.n	800bea0 <kf_update+0xc84>
 800bf12:	eef5 9a40 	vcmp.f32	s19, #0.0
 800bf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1a:	ee68 7aaa 	vmul.f32	s15, s17, s21
 800bf1e:	eeb0 7a48 	vmov.f32	s14, s16
 800bf22:	f43f af4e 	beq.w	800bdc2 <kf_update+0xba6>
 800bf26:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800bf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2e:	eef0 aa47 	vmov.f32	s21, s14
 800bf32:	ee28 7aa9 	vmul.f32	s14, s17, s19
 800bf36:	f43f aed6 	beq.w	800bce6 <kf_update+0xaca>
 800bf3a:	eef0 9a67 	vmov.f32	s19, s15
 800bf3e:	e750      	b.n	800bde2 <kf_update+0xbc6>
 800bf40:	eef0 ca47 	vmov.f32	s25, s14
 800bf44:	e6ae      	b.n	800bca4 <kf_update+0xa88>
 800bf46:	eeb0 7a48 	vmov.f32	s14, s16
 800bf4a:	e7cb      	b.n	800bee4 <kf_update+0xcc8>
 800bf4c:	ed9f ca06 	vldr	s24, [pc, #24]	; 800bf68 <kf_update+0xd4c>
 800bf50:	eeb5 da40 	vcmp.f32	s26, #0.0
 800bf54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf58:	ee68 7a8a 	vmul.f32	s15, s17, s20
 800bf5c:	eef0 ba4c 	vmov.f32	s23, s24
 800bf60:	f47f ae85 	bne.w	800bc6e <kf_update+0xa52>
 800bf64:	e797      	b.n	800be96 <kf_update+0xc7a>
 800bf66:	bf00      	nop
 800bf68:	00000000 	.word	0x00000000

0800bf6c <q2hpr>:
 800bf6c:	b510      	push	{r4, lr}
 800bf6e:	ed90 7a00 	vldr	s14, [r0]
 800bf72:	edd0 6a01 	vldr	s13, [r0, #4]
 800bf76:	edd0 7a02 	vldr	s15, [r0, #8]
 800bf7a:	edd0 4a03 	vldr	s9, [r0, #12]
 800bf7e:	ed2d 8b0a 	vpush	{d8-d12}
 800bf82:	ee27 0a26 	vmul.f32	s0, s14, s13
 800bf86:	ee27 5a27 	vmul.f32	s10, s14, s15
 800bf8a:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800bf8e:	ee67 0a07 	vmul.f32	s1, s14, s14
 800bf92:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800bf96:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800bf9a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800bf9e:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800bfa2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800bfa6:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800bfaa:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800bfae:	ee36 ba06 	vadd.f32	s22, s12, s12
 800bfb2:	ee70 aa00 	vadd.f32	s21, s0, s0
 800bfb6:	ee35 ca05 	vadd.f32	s24, s10, s10
 800bfba:	ee77 8a07 	vadd.f32	s17, s14, s14
 800bfbe:	ee75 baa5 	vadd.f32	s23, s11, s11
 800bfc2:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800bfc6:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800bfca:	460c      	mov	r4, r1
 800bfcc:	bb8a      	cbnz	r2, 800c032 <q2hpr+0xc6>
 800bfce:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800bfd2:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800bfd6:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800bfda:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800bfde:	f009 fe53 	bl	8015c88 <atan2f>
 800bfe2:	eeb0 8a40 	vmov.f32	s16, s0
 800bfe6:	ed84 8a00 	vstr	s16, [r4]
 800bfea:	ee38 0aab 	vadd.f32	s0, s17, s23
 800bfee:	f009 fe1f 	bl	8015c30 <asinf>
 800bff2:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800bff6:	eef0 8a40 	vmov.f32	s17, s0
 800bffa:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800bffe:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800c002:	f009 fe41 	bl	8015c88 <atan2f>
 800c006:	eef1 8a68 	vneg.f32	s17, s17
 800c00a:	eeb0 9a40 	vmov.f32	s18, s0
 800c00e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c016:	ed84 9a02 	vstr	s18, [r4, #8]
 800c01a:	edc4 8a01 	vstr	s17, [r4, #4]
 800c01e:	d505      	bpl.n	800c02c <q2hpr+0xc0>
 800c020:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800c078 <q2hpr+0x10c>
 800c024:	ee38 8a00 	vadd.f32	s16, s16, s0
 800c028:	ed84 8a00 	vstr	s16, [r4]
 800c02c:	ecbd 8b0a 	vpop	{d8-d12}
 800c030:	bd10      	pop	{r4, pc}
 800c032:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800c036:	f009 fdfb 	bl	8015c30 <asinf>
 800c03a:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800c03e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800c042:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800c046:	eeb0 9a40 	vmov.f32	s18, s0
 800c04a:	ee38 0aab 	vadd.f32	s0, s17, s23
 800c04e:	f009 fe1b 	bl	8015c88 <atan2f>
 800c052:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800c056:	eef0 8a40 	vmov.f32	s17, s0
 800c05a:	ee3a 0a88 	vadd.f32	s0, s21, s16
 800c05e:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800c062:	eeb1 0a40 	vneg.f32	s0, s0
 800c066:	f009 fe0f 	bl	8015c88 <atan2f>
 800c06a:	eef1 8a68 	vneg.f32	s17, s17
 800c06e:	eeb0 8a40 	vmov.f32	s16, s0
 800c072:	ed84 0a00 	vstr	s0, [r4]
 800c076:	e7ca      	b.n	800c00e <q2hpr+0xa2>
 800c078:	40c90fdb 	.word	0x40c90fdb

0800c07c <output_update>:
 800c07c:	edd0 7a01 	vldr	s15, [r0, #4]
 800c080:	edd0 5a00 	vldr	s11, [r0]
 800c084:	edd0 6a02 	vldr	s13, [r0, #8]
 800c088:	ed90 5a03 	vldr	s10, [r0, #12]
 800c08c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	ee27 7aa6 	vmul.f32	s14, s15, s13
 800c098:	eea5 6aa5 	vfma.f32	s12, s11, s11
 800c09c:	4615      	mov	r5, r2
 800c09e:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800c0a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c0a6:	eea5 7a85 	vfma.f32	s14, s11, s10
 800c0aa:	460f      	mov	r7, r1
 800c0ac:	461e      	mov	r6, r3
 800c0ae:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800c0b2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c0b6:	ee36 6a06 	vadd.f32	s12, s12, s12
 800c0ba:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c0be:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800c0c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c0c6:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c0ca:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800c0ce:	2a00      	cmp	r2, #0
 800c0d0:	d145      	bne.n	800c15e <output_update+0xe2>
 800c0d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c0d6:	eeb1 7a47 	vneg.f32	s14, s14
 800c0da:	ed83 7a00 	vstr	s14, [r3]
 800c0de:	edc3 7a01 	vstr	s15, [r3, #4]
 800c0e2:	ed83 5a02 	vstr	s10, [r3, #8]
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	f7ff ff3f 	bl	800bf6c <q2hpr>
 800c0ee:	ed95 7a01 	vldr	s14, [r5, #4]
 800c0f2:	edd5 7a02 	vldr	s15, [r5, #8]
 800c0f6:	edd5 6a00 	vldr	s13, [r5]
 800c0fa:	ed9f 6a43 	vldr	s12, [pc, #268]	; 800c208 <output_update+0x18c>
 800c0fe:	ee27 7a46 	vnmul.f32	s14, s14, s12
 800c102:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800c106:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c10a:	ed85 7a01 	vstr	s14, [r5, #4]
 800c10e:	edc5 6a00 	vstr	s13, [r5]
 800c112:	edc5 7a02 	vstr	s15, [r5, #8]
 800c116:	ed97 7a01 	vldr	s14, [r7, #4]
 800c11a:	edd6 7a00 	vldr	s15, [r6]
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c124:	edc8 7a00 	vstr	s15, [r8]
 800c128:	ed97 7a00 	vldr	s14, [r7]
 800c12c:	edd6 7a01 	vldr	s15, [r6, #4]
 800c130:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c134:	edc8 7a01 	vstr	s15, [r8, #4]
 800c138:	edd6 7a02 	vldr	s15, [r6, #8]
 800c13c:	ed97 7a02 	vldr	s14, [r7, #8]
 800c140:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c144:	edc8 7a02 	vstr	s15, [r8, #8]
 800c148:	edd4 7a02 	vldr	s15, [r4, #8]
 800c14c:	6862      	ldr	r2, [r4, #4]
 800c14e:	6022      	str	r2, [r4, #0]
 800c150:	eef1 7a67 	vneg.f32	s15, s15
 800c154:	6063      	str	r3, [r4, #4]
 800c156:	edc4 7a02 	vstr	s15, [r4, #8]
 800c15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c15e:	2a01      	cmp	r2, #1
 800c160:	d015      	beq.n	800c18e <output_update+0x112>
 800c162:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800c208 <output_update+0x18c>
 800c166:	edd5 6a00 	vldr	s13, [r5]
 800c16a:	ed95 7a01 	vldr	s14, [r5, #4]
 800c16e:	edd5 7a02 	vldr	s15, [r5, #8]
 800c172:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c176:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c17a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c17e:	edc5 6a00 	vstr	s13, [r5]
 800c182:	ed85 7a01 	vstr	s14, [r5, #4]
 800c186:	edc5 7a02 	vstr	s15, [r5, #8]
 800c18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c18e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c192:	ee36 6a65 	vsub.f32	s12, s12, s11
 800c196:	eeb1 7a47 	vneg.f32	s14, s14
 800c19a:	edc3 7a00 	vstr	s15, [r3]
 800c19e:	ed83 7a01 	vstr	s14, [r3, #4]
 800c1a2:	ed83 6a02 	vstr	s12, [r3, #8]
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	f7ff fee0 	bl	800bf6c <q2hpr>
 800c1ac:	edd5 6a00 	vldr	s13, [r5]
 800c1b0:	ed95 7a01 	vldr	s14, [r5, #4]
 800c1b4:	edd5 7a02 	vldr	s15, [r5, #8]
 800c1b8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c208 <output_update+0x18c>
 800c1bc:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c1c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c1c4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c1c8:	ed85 7a01 	vstr	s14, [r5, #4]
 800c1cc:	edc5 6a00 	vstr	s13, [r5]
 800c1d0:	edc5 7a02 	vstr	s15, [r5, #8]
 800c1d4:	ed97 7a00 	vldr	s14, [r7]
 800c1d8:	edd6 7a00 	vldr	s15, [r6]
 800c1dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1e0:	edc8 7a00 	vstr	s15, [r8]
 800c1e4:	ed97 7a01 	vldr	s14, [r7, #4]
 800c1e8:	edd6 7a01 	vldr	s15, [r6, #4]
 800c1ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1f0:	edc8 7a01 	vstr	s15, [r8, #4]
 800c1f4:	edd6 7a02 	vldr	s15, [r6, #8]
 800c1f8:	ed97 7a02 	vldr	s14, [r7, #8]
 800c1fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c200:	edc8 7a02 	vstr	s15, [r8, #8]
 800c204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c208:	42652ee1 	.word	0x42652ee1
 800c20c:	00000000 	.word	0x00000000

0800c210 <MFX_emptyAttitude>:
 800c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c214:	ed2d 8b02 	vpush	{d8}
 800c218:	4fe9      	ldr	r7, [pc, #932]	; (800c5c0 <MFX_emptyAttitude+0x3b0>)
 800c21a:	eddf 8aea 	vldr	s17, [pc, #936]	; 800c5c4 <MFX_emptyAttitude+0x3b4>
 800c21e:	f6ad 4dd4 	subw	sp, sp, #3284	; 0xcd4
 800c222:	f50d 64d7 	add.w	r4, sp, #1720	; 0x6b8
 800c226:	f04f 0800 	mov.w	r8, #0
 800c22a:	46bc      	mov	ip, r7
 800c22c:	e9c4 8800 	strd	r8, r8, [r4]
 800c230:	f83c 3b04 	ldrh.w	r3, [ip], #4
 800c234:	f8c4 8008 	str.w	r8, [r4, #8]
 800c238:	f88d 854a 	strb.w	r8, [sp, #1354]	; 0x54a
 800c23c:	f8ad 3548 	strh.w	r3, [sp, #1352]	; 0x548
 800c240:	4681      	mov	r9, r0
 800c242:	f8dd 3548 	ldr.w	r3, [sp, #1352]	; 0x548
 800c246:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800c24a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c24e:	0c1b      	lsrs	r3, r3, #16
 800c250:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800c254:	ab2b      	add	r3, sp, #172	; 0xac
 800c256:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c25a:	ab2e      	add	r3, sp, #184	; 0xb8
 800c25c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c260:	ab31      	add	r3, sp, #196	; 0xc4
 800c262:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c266:	ab34      	add	r3, sp, #208	; 0xd0
 800c268:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c26c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c270:	ab37      	add	r3, sp, #220	; 0xdc
 800c272:	edcd 8a08 	vstr	s17, [sp, #32]
 800c276:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 800c27a:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 800c27e:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 800c282:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c286:	ab3a      	add	r3, sp, #232	; 0xe8
 800c288:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c28c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c290:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 800c294:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c298:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c29c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c2a0:	f44f 75b4 	mov.w	r5, #360	; 0x168
 800c2a4:	f8dc 3000 	ldr.w	r3, [ip]
 800c2a8:	f8ce 3000 	str.w	r3, [lr]
 800c2ac:	462a      	mov	r2, r5
 800c2ae:	4641      	mov	r1, r8
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	f006 fee9 	bl	8013088 <memset>
 800c2b6:	f44f 56f0 	mov.w	r6, #7680	; 0x1e00
 800c2ba:	462a      	mov	r2, r5
 800c2bc:	4621      	mov	r1, r4
 800c2be:	a840      	add	r0, sp, #256	; 0x100
 800c2c0:	f8ad 60f8 	strh.w	r6, [sp, #248]	; 0xf8
 800c2c4:	f006 ff18 	bl	80130f8 <memcpy>
 800c2c8:	462a      	mov	r2, r5
 800c2ca:	4641      	mov	r1, r8
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	ed8d 8a3f 	vstr	s16, [sp, #252]	; 0xfc
 800c2d2:	f006 fed9 	bl	8013088 <memset>
 800c2d6:	462a      	mov	r2, r5
 800c2d8:	4621      	mov	r1, r4
 800c2da:	a89c      	add	r0, sp, #624	; 0x270
 800c2dc:	f8ad 6268 	strh.w	r6, [sp, #616]	; 0x268
 800c2e0:	f006 ff0a 	bl	80130f8 <memcpy>
 800c2e4:	462a      	mov	r2, r5
 800c2e6:	4641      	mov	r1, r8
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	ed8d 8a9b 	vstr	s16, [sp, #620]	; 0x26c
 800c2ee:	f006 fecb 	bl	8013088 <memset>
 800c2f2:	462a      	mov	r2, r5
 800c2f4:	4621      	mov	r1, r4
 800c2f6:	a8f8      	add	r0, sp, #992	; 0x3e0
 800c2f8:	f8ad 63d8 	strh.w	r6, [sp, #984]	; 0x3d8
 800c2fc:	f006 fefc 	bl	80130f8 <memcpy>
 800c300:	462a      	mov	r2, r5
 800c302:	4641      	mov	r1, r8
 800c304:	4620      	mov	r0, r4
 800c306:	ed8d 8af7 	vstr	s16, [sp, #988]	; 0x3dc
 800c30a:	f006 febd 	bl	8013088 <memset>
 800c30e:	462a      	mov	r2, r5
 800c310:	4621      	mov	r1, r4
 800c312:	f50d 60aa 	add.w	r0, sp, #1360	; 0x550
 800c316:	f8ad 6548 	strh.w	r6, [sp, #1352]	; 0x548
 800c31a:	f006 feed 	bl	80130f8 <memcpy>
 800c31e:	f04f 0301 	mov.w	r3, #1
 800c322:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800c326:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800c32a:	4ba7      	ldr	r3, [pc, #668]	; (800c5c8 <MFX_emptyAttitude+0x3b8>)
 800c32c:	9320      	str	r3, [sp, #128]	; 0x80
 800c32e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c330:	ae0c      	add	r6, sp, #48	; 0x30
 800c332:	46b3      	mov	fp, r6
 800c334:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c336:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800c33a:	e9c4 8800 	strd	r8, r8, [r4]
 800c33e:	e9c4 8802 	strd	r8, r8, [r4, #8]
 800c342:	f8c4 8010 	str.w	r8, [r4, #16]
 800c346:	f10d 0c6c 	add.w	ip, sp, #108	; 0x6c
 800c34a:	46a6      	mov	lr, r4
 800c34c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c350:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c354:	f50d 6aa9 	add.w	sl, sp, #1352	; 0x548
 800c358:	682d      	ldr	r5, [r5, #0]
 800c35a:	f8cc 5000 	str.w	r5, [ip]
 800c35e:	af21      	add	r7, sp, #132	; 0x84
 800c360:	ed8a 8a01 	vstr	s16, [sl, #4]
 800c364:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c366:	ab1a      	add	r3, sp, #104	; 0x68
 800c368:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c36c:	abf6      	add	r3, sp, #984	; 0x3d8
 800c36e:	9300      	str	r3, [sp, #0]
 800c370:	aa3e      	add	r2, sp, #248	; 0xf8
 800c372:	f8c7 8000 	str.w	r8, [r7]
 800c376:	ab9a      	add	r3, sp, #616	; 0x268
 800c378:	a911      	add	r1, sp, #68	; 0x44
 800c37a:	9403      	str	r4, [sp, #12]
 800c37c:	2001      	movs	r0, #1
 800c37e:	f7fe fa49 	bl	800a814 <DataHist_parameters>
 800c382:	4b92      	ldr	r3, [pc, #584]	; (800c5cc <MFX_emptyAttitude+0x3bc>)
 800c384:	f8c9 3018 	str.w	r3, [r9, #24]
 800c388:	4b91      	ldr	r3, [pc, #580]	; (800c5d0 <MFX_emptyAttitude+0x3c0>)
 800c38a:	f8c9 301c 	str.w	r3, [r9, #28]
 800c38e:	4b91      	ldr	r3, [pc, #580]	; (800c5d4 <MFX_emptyAttitude+0x3c4>)
 800c390:	f8c9 3020 	str.w	r3, [r9, #32]
 800c394:	4b90      	ldr	r3, [pc, #576]	; (800c5d8 <MFX_emptyAttitude+0x3c8>)
 800c396:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 800c39a:	ae2b      	add	r6, sp, #172	; 0xac
 800c39c:	4b8f      	ldr	r3, [pc, #572]	; (800c5dc <MFX_emptyAttitude+0x3cc>)
 800c39e:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 800c3a2:	ce07      	ldmia	r6!, {r0, r1, r2}
 800c3a4:	4b8e      	ldr	r3, [pc, #568]	; (800c5e0 <MFX_emptyAttitude+0x3d0>)
 800c3a6:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
 800c3aa:	4b8e      	ldr	r3, [pc, #568]	; (800c5e4 <MFX_emptyAttitude+0x3d4>)
 800c3ac:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 800c3b0:	4b8d      	ldr	r3, [pc, #564]	; (800c5e8 <MFX_emptyAttitude+0x3d8>)
 800c3b2:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 800c3b6:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800c3ba:	f8a9 3070 	strh.w	r3, [r9, #112]	; 0x70
 800c3be:	ad2e      	add	r5, sp, #184	; 0xb8
 800c3c0:	f89d 30aa 	ldrb.w	r3, [sp, #170]	; 0xaa
 800c3c4:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800c3c8:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
 800c3cc:	f8c9 207c 	str.w	r2, [r9, #124]	; 0x7c
 800c3d0:	cd07      	ldmia	r5!, {r0, r1, r2}
 800c3d2:	f889 3072 	strb.w	r3, [r9, #114]	; 0x72
 800c3d6:	f240 1301 	movw	r3, #257	; 0x101
 800c3da:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800c5b8 <MFX_emptyAttitude+0x3a8>
 800c3de:	f8a9 3000 	strh.w	r3, [r9]
 800c3e2:	f8a9 3004 	strh.w	r3, [r9, #4]
 800c3e6:	4b81      	ldr	r3, [pc, #516]	; (800c5ec <MFX_emptyAttitude+0x3dc>)
 800c3e8:	f8c9 300c 	str.w	r3, [r9, #12]
 800c3ec:	4b80      	ldr	r3, [pc, #512]	; (800c5f0 <MFX_emptyAttitude+0x3e0>)
 800c3ee:	f8c9 3014 	str.w	r3, [r9, #20]
 800c3f2:	f509 7346 	add.w	r3, r9, #792	; 0x318
 800c3f6:	9304      	str	r3, [sp, #16]
 800c3f8:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
 800c3fc:	ed89 6b16 	vstr	d6, [r9, #88]	; 0x58
 800c400:	ed89 6b18 	vstr	d6, [r9, #96]	; 0x60
 800c404:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 800c408:	f8a9 8002 	strh.w	r8, [r9, #2]
 800c40c:	ed89 8a02 	vstr	s16, [r9, #8]
 800c410:	ed89 8a04 	vstr	s16, [r9, #16]
 800c414:	ed89 6b1a 	vstr	d6, [r9, #104]	; 0x68
 800c418:	f8c9 1084 	str.w	r1, [r9, #132]	; 0x84
 800c41c:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
 800c420:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 800c424:	f10d 0bd0 	add.w	fp, sp, #208	; 0xd0
 800c428:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
 800c42c:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
 800c430:	f8c9 2094 	str.w	r2, [r9, #148]	; 0x94
 800c434:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800c438:	af37      	add	r7, sp, #220	; 0xdc
 800c43a:	f8c9 0098 	str.w	r0, [r9, #152]	; 0x98
 800c43e:	f8c9 109c 	str.w	r1, [r9, #156]	; 0x9c
 800c442:	f8c9 20a0 	str.w	r2, [r9, #160]	; 0xa0
 800c446:	cf07      	ldmia	r7!, {r0, r1, r2}
 800c448:	f10d 0ee8 	add.w	lr, sp, #232	; 0xe8
 800c44c:	f8c9 00a4 	str.w	r0, [r9, #164]	; 0xa4
 800c450:	f8c9 10a8 	str.w	r1, [r9, #168]	; 0xa8
 800c454:	f8c9 20ac 	str.w	r2, [r9, #172]	; 0xac
 800c458:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 800c45c:	eddf 7a65 	vldr	s15, [pc, #404]	; 800c5f4 <MFX_emptyAttitude+0x3e4>
 800c460:	ed9f 5a65 	vldr	s10, [pc, #404]	; 800c5f8 <MFX_emptyAttitude+0x3e8>
 800c464:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800c5fc <MFX_emptyAttitude+0x3ec>
 800c468:	f8c9 00b0 	str.w	r0, [r9, #176]	; 0xb0
 800c46c:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800c470:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800c474:	f8c9 10b4 	str.w	r1, [r9, #180]	; 0xb4
 800c478:	ed89 5a65 	vstr	s10, [r9, #404]	; 0x194
 800c47c:	edc9 5a66 	vstr	s11, [r9, #408]	; 0x198
 800c480:	ed89 7a67 	vstr	s14, [r9, #412]	; 0x19c
 800c484:	edc9 8a64 	vstr	s17, [r9, #400]	; 0x190
 800c488:	edc9 8a30 	vstr	s17, [r9, #192]	; 0xc0
 800c48c:	edc9 8a4a 	vstr	s17, [r9, #296]	; 0x128
 800c490:	edc9 8a31 	vstr	s17, [r9, #196]	; 0xc4
 800c494:	f04f 0101 	mov.w	r1, #1
 800c498:	f8c9 20b8 	str.w	r2, [r9, #184]	; 0xb8
 800c49c:	edc9 8a4b 	vstr	s17, [r9, #300]	; 0x12c
 800c4a0:	edc9 8a32 	vstr	s17, [r9, #200]	; 0xc8
 800c4a4:	edc9 8a4c 	vstr	s17, [r9, #304]	; 0x130
 800c4a8:	edc9 8a33 	vstr	s17, [r9, #204]	; 0xcc
 800c4ac:	edc9 8a4d 	vstr	s17, [r9, #308]	; 0x134
 800c4b0:	edc9 8a34 	vstr	s17, [r9, #208]	; 0xd0
 800c4b4:	edc9 8a4e 	vstr	s17, [r9, #312]	; 0x138
 800c4b8:	edc9 8a35 	vstr	s17, [r9, #212]	; 0xd4
 800c4bc:	edc9 8a4f 	vstr	s17, [r9, #316]	; 0x13c
 800c4c0:	edc9 8a36 	vstr	s17, [r9, #216]	; 0xd8
 800c4c4:	edc9 8a50 	vstr	s17, [r9, #320]	; 0x140
 800c4c8:	edc9 8a37 	vstr	s17, [r9, #220]	; 0xdc
 800c4cc:	edc9 8a51 	vstr	s17, [r9, #324]	; 0x144
 800c4d0:	edc9 8a38 	vstr	s17, [r9, #224]	; 0xe0
 800c4d4:	edc9 8a52 	vstr	s17, [r9, #328]	; 0x148
 800c4d8:	edc9 8a39 	vstr	s17, [r9, #228]	; 0xe4
 800c4dc:	edc9 8a53 	vstr	s17, [r9, #332]	; 0x14c
 800c4e0:	edc9 8a3a 	vstr	s17, [r9, #232]	; 0xe8
 800c4e4:	edc9 8a54 	vstr	s17, [r9, #336]	; 0x150
 800c4e8:	edc9 8a3b 	vstr	s17, [r9, #236]	; 0xec
 800c4ec:	edc9 8a55 	vstr	s17, [r9, #340]	; 0x154
 800c4f0:	edc9 8a3c 	vstr	s17, [r9, #240]	; 0xf0
 800c4f4:	edc9 8a56 	vstr	s17, [r9, #344]	; 0x158
 800c4f8:	edc9 8a3d 	vstr	s17, [r9, #244]	; 0xf4
 800c4fc:	edc9 8a57 	vstr	s17, [r9, #348]	; 0x15c
 800c500:	edc9 8a3e 	vstr	s17, [r9, #248]	; 0xf8
 800c504:	edc9 8a58 	vstr	s17, [r9, #352]	; 0x160
 800c508:	edc9 8a3f 	vstr	s17, [r9, #252]	; 0xfc
 800c50c:	edc9 8a59 	vstr	s17, [r9, #356]	; 0x164
 800c510:	edc9 8a40 	vstr	s17, [r9, #256]	; 0x100
 800c514:	edc9 8a5a 	vstr	s17, [r9, #360]	; 0x168
 800c518:	edc9 8a41 	vstr	s17, [r9, #260]	; 0x104
 800c51c:	edc9 8a5b 	vstr	s17, [r9, #364]	; 0x16c
 800c520:	f8c9 c1a0 	str.w	ip, [r9, #416]	; 0x1a0
 800c524:	edc9 7a75 	vstr	s15, [r9, #468]	; 0x1d4
 800c528:	edc9 7a7f 	vstr	s15, [r9, #508]	; 0x1fc
 800c52c:	edc9 8a42 	vstr	s17, [r9, #264]	; 0x108
 800c530:	edc9 8a5c 	vstr	s17, [r9, #368]	; 0x170
 800c534:	edc9 8a43 	vstr	s17, [r9, #268]	; 0x10c
 800c538:	edc9 8a5d 	vstr	s17, [r9, #372]	; 0x174
 800c53c:	edc9 8a44 	vstr	s17, [r9, #272]	; 0x110
 800c540:	edc9 8a5e 	vstr	s17, [r9, #376]	; 0x178
 800c544:	edc9 8a45 	vstr	s17, [r9, #276]	; 0x114
 800c548:	edc9 8a5f 	vstr	s17, [r9, #380]	; 0x17c
 800c54c:	edc9 8a46 	vstr	s17, [r9, #280]	; 0x118
 800c550:	edc9 8a60 	vstr	s17, [r9, #384]	; 0x180
 800c554:	edc9 8a47 	vstr	s17, [r9, #284]	; 0x11c
 800c558:	edc9 8a61 	vstr	s17, [r9, #388]	; 0x184
 800c55c:	edc9 8a48 	vstr	s17, [r9, #288]	; 0x120
 800c560:	edc9 8a62 	vstr	s17, [r9, #392]	; 0x188
 800c564:	edc9 8a49 	vstr	s17, [r9, #292]	; 0x124
 800c568:	edc9 8a63 	vstr	s17, [r9, #396]	; 0x18c
 800c56c:	f889 81a4 	strb.w	r8, [r9, #420]	; 0x1a4
 800c570:	f8c9 81a6 	str.w	r8, [r9, #422]	; 0x1a6
 800c574:	edc9 8a6c 	vstr	s17, [r9, #432]	; 0x1b0
 800c578:	edc9 8a76 	vstr	s17, [r9, #472]	; 0x1d8
 800c57c:	edc9 8a77 	vstr	s17, [r9, #476]	; 0x1dc
 800c580:	edc9 8a78 	vstr	s17, [r9, #480]	; 0x1e0
 800c584:	edc9 8a79 	vstr	s17, [r9, #484]	; 0x1e4
 800c588:	edc9 8a7a 	vstr	s17, [r9, #488]	; 0x1e8
 800c58c:	edc9 8a7b 	vstr	s17, [r9, #492]	; 0x1ec
 800c590:	edc9 8a7c 	vstr	s17, [r9, #496]	; 0x1f0
 800c594:	edc9 8a7d 	vstr	s17, [r9, #500]	; 0x1f4
 800c598:	edc9 8a6d 	vstr	s17, [r9, #436]	; 0x1b4
 800c59c:	edc9 8a7e 	vstr	s17, [r9, #504]	; 0x1f8
 800c5a0:	edc9 8a80 	vstr	s17, [r9, #512]	; 0x200
 800c5a4:	edc9 7a89 	vstr	s15, [r9, #548]	; 0x224
 800c5a8:	edc9 7a93 	vstr	s15, [r9, #588]	; 0x24c
 800c5ac:	edc9 7a9d 	vstr	s15, [r9, #628]	; 0x274
 800c5b0:	e026      	b.n	800c600 <MFX_emptyAttitude+0x3f0>
 800c5b2:	bf00      	nop
 800c5b4:	f3af 8000 	nop.w
	...
 800c5c0:	080180b0 	.word	0x080180b0
 800c5c4:	00000000 	.word	0x00000000
 800c5c8:	40a00000 	.word	0x40a00000
 800c5cc:	3a9d4952 	.word	0x3a9d4952
 800c5d0:	3ac49ba6 	.word	0x3ac49ba6
 800c5d4:	3b03126f 	.word	0x3b03126f
 800c5d8:	3a83126f 	.word	0x3a83126f
 800c5dc:	3f639581 	.word	0x3f639581
 800c5e0:	402ab021 	.word	0x402ab021
 800c5e4:	3f13f7cf 	.word	0x3f13f7cf
 800c5e8:	3f2ac083 	.word	0x3f2ac083
 800c5ec:	01010100 	.word	0x01010100
 800c5f0:	41200000 	.word	0x41200000
 800c5f4:	447a0000 	.word	0x447a0000
 800c5f8:	3f4ccccd 	.word	0x3f4ccccd
 800c5fc:	3f333333 	.word	0x3f333333
 800c600:	edc9 8a81 	vstr	s17, [r9, #516]	; 0x204
 800c604:	edc9 8a82 	vstr	s17, [r9, #520]	; 0x208
 800c608:	edc9 8a83 	vstr	s17, [r9, #524]	; 0x20c
 800c60c:	edc9 8a84 	vstr	s17, [r9, #528]	; 0x210
 800c610:	edc9 8a85 	vstr	s17, [r9, #532]	; 0x214
 800c614:	edc9 8a86 	vstr	s17, [r9, #536]	; 0x218
 800c618:	edc9 8a6e 	vstr	s17, [r9, #440]	; 0x1b8
 800c61c:	edc9 8a87 	vstr	s17, [r9, #540]	; 0x21c
 800c620:	edc9 8a88 	vstr	s17, [r9, #544]	; 0x220
 800c624:	edc9 8a8a 	vstr	s17, [r9, #552]	; 0x228
 800c628:	edc9 8a8b 	vstr	s17, [r9, #556]	; 0x22c
 800c62c:	edc9 8a8c 	vstr	s17, [r9, #560]	; 0x230
 800c630:	edc9 8a8d 	vstr	s17, [r9, #564]	; 0x234
 800c634:	edc9 8a8e 	vstr	s17, [r9, #568]	; 0x238
 800c638:	edc9 8a8f 	vstr	s17, [r9, #572]	; 0x23c
 800c63c:	edc9 8a6f 	vstr	s17, [r9, #444]	; 0x1bc
 800c640:	edc9 8a90 	vstr	s17, [r9, #576]	; 0x240
 800c644:	edc9 8a91 	vstr	s17, [r9, #580]	; 0x244
 800c648:	edc9 8a92 	vstr	s17, [r9, #584]	; 0x248
 800c64c:	edc9 8a94 	vstr	s17, [r9, #592]	; 0x250
 800c650:	edc9 8a95 	vstr	s17, [r9, #596]	; 0x254
 800c654:	edc9 8a96 	vstr	s17, [r9, #600]	; 0x258
 800c658:	edc9 8a97 	vstr	s17, [r9, #604]	; 0x25c
 800c65c:	edc9 8a98 	vstr	s17, [r9, #608]	; 0x260
 800c660:	edc9 8a70 	vstr	s17, [r9, #448]	; 0x1c0
 800c664:	edc9 8a99 	vstr	s17, [r9, #612]	; 0x264
 800c668:	edc9 8a9a 	vstr	s17, [r9, #616]	; 0x268
 800c66c:	edc9 8a9b 	vstr	s17, [r9, #620]	; 0x26c
 800c670:	edc9 8a9c 	vstr	s17, [r9, #624]	; 0x270
 800c674:	edc9 8a9e 	vstr	s17, [r9, #632]	; 0x278
 800c678:	edc9 7aa7 	vstr	s15, [r9, #668]	; 0x29c
 800c67c:	edc9 7ab1 	vstr	s15, [r9, #708]	; 0x2c4
 800c680:	edc9 7abb 	vstr	s15, [r9, #748]	; 0x2ec
 800c684:	edc9 8a9f 	vstr	s17, [r9, #636]	; 0x27c
 800c688:	edc9 8aa0 	vstr	s17, [r9, #640]	; 0x280
 800c68c:	edc9 8aa1 	vstr	s17, [r9, #644]	; 0x284
 800c690:	edc9 8a71 	vstr	s17, [r9, #452]	; 0x1c4
 800c694:	edc9 8aa2 	vstr	s17, [r9, #648]	; 0x288
 800c698:	edc9 8aa3 	vstr	s17, [r9, #652]	; 0x28c
 800c69c:	edc9 8aa4 	vstr	s17, [r9, #656]	; 0x290
 800c6a0:	edc9 8aa5 	vstr	s17, [r9, #660]	; 0x294
 800c6a4:	edc9 8aa6 	vstr	s17, [r9, #664]	; 0x298
 800c6a8:	edc9 8aa8 	vstr	s17, [r9, #672]	; 0x2a0
 800c6ac:	edc9 8aa9 	vstr	s17, [r9, #676]	; 0x2a4
 800c6b0:	edc9 8aaa 	vstr	s17, [r9, #680]	; 0x2a8
 800c6b4:	edc9 8a72 	vstr	s17, [r9, #456]	; 0x1c8
 800c6b8:	edc9 8aab 	vstr	s17, [r9, #684]	; 0x2ac
 800c6bc:	edc9 8aac 	vstr	s17, [r9, #688]	; 0x2b0
 800c6c0:	edc9 8aad 	vstr	s17, [r9, #692]	; 0x2b4
 800c6c4:	edc9 8aae 	vstr	s17, [r9, #696]	; 0x2b8
 800c6c8:	edc9 8aaf 	vstr	s17, [r9, #700]	; 0x2bc
 800c6cc:	edc9 8ab0 	vstr	s17, [r9, #704]	; 0x2c0
 800c6d0:	edc9 8ab2 	vstr	s17, [r9, #712]	; 0x2c8
 800c6d4:	edc9 8ab3 	vstr	s17, [r9, #716]	; 0x2cc
 800c6d8:	edc9 8a73 	vstr	s17, [r9, #460]	; 0x1cc
 800c6dc:	edc9 8ab4 	vstr	s17, [r9, #720]	; 0x2d0
 800c6e0:	edc9 8ab5 	vstr	s17, [r9, #724]	; 0x2d4
 800c6e4:	edc9 8ab6 	vstr	s17, [r9, #728]	; 0x2d8
 800c6e8:	edc9 8ab7 	vstr	s17, [r9, #732]	; 0x2dc
 800c6ec:	edc9 8ab8 	vstr	s17, [r9, #736]	; 0x2e0
 800c6f0:	edc9 8ab9 	vstr	s17, [r9, #740]	; 0x2e4
 800c6f4:	edc9 8aba 	vstr	s17, [r9, #744]	; 0x2e8
 800c6f8:	edc9 8abc 	vstr	s17, [r9, #752]	; 0x2f0
 800c6fc:	9a04      	ldr	r2, [sp, #16]
 800c6fe:	f889 11ac 	strb.w	r1, [r9, #428]	; 0x1ac
 800c702:	edc9 8a74 	vstr	s17, [r9, #464]	; 0x1d0
 800c706:	edc9 7ac5 	vstr	s15, [r9, #788]	; 0x314
 800c70a:	9203      	str	r2, [sp, #12]
 800c70c:	f50d 624a 	add.w	r2, sp, #3232	; 0xca0
 800c710:	9202      	str	r2, [sp, #8]
 800c712:	f50d 6233 	add.w	r2, sp, #2864	; 0xb30
 800c716:	9201      	str	r2, [sp, #4]
 800c718:	f50d 621c 	add.w	r2, sp, #2496	; 0x9c0
 800c71c:	9200      	str	r2, [sp, #0]
 800c71e:	7820      	ldrb	r0, [r4, #0]
 800c720:	edc9 8abd 	vstr	s17, [r9, #756]	; 0x2f4
 800c724:	f50d 6305 	add.w	r3, sp, #2128	; 0x850
 800c728:	f50d 62dc 	add.w	r2, sp, #1760	; 0x6e0
 800c72c:	f20d 61bc 	addw	r1, sp, #1724	; 0x6bc
 800c730:	edc9 8abe 	vstr	s17, [r9, #760]	; 0x2f8
 800c734:	edc9 8abf 	vstr	s17, [r9, #764]	; 0x2fc
 800c738:	edc9 8ac0 	vstr	s17, [r9, #768]	; 0x300
 800c73c:	edc9 8ac1 	vstr	s17, [r9, #772]	; 0x304
 800c740:	edc9 8ac2 	vstr	s17, [r9, #776]	; 0x308
 800c744:	edc9 8ac3 	vstr	s17, [r9, #780]	; 0x30c
 800c748:	edc9 8ac4 	vstr	s17, [r9, #784]	; 0x310
 800c74c:	f7fe f862 	bl	800a814 <DataHist_parameters>
 800c750:	f609 1344 	addw	r3, r9, #2372	; 0x944
 800c754:	f509 6216 	add.w	r2, r9, #2400	; 0x960
 800c758:	f609 1168 	addw	r1, r9, #2408	; 0x968
 800c75c:	f509 6017 	add.w	r0, r9, #2416	; 0x970
 800c760:	f10d 0c20 	add.w	ip, sp, #32
 800c764:	9304      	str	r3, [sp, #16]
 800c766:	9205      	str	r2, [sp, #20]
 800c768:	9106      	str	r1, [sp, #24]
 800c76a:	9007      	str	r0, [sp, #28]
 800c76c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c770:	f8c9 393c 	str.w	r3, [r9, #2364]	; 0x93c
 800c774:	9b04      	ldr	r3, [sp, #16]
 800c776:	f8c9 0930 	str.w	r0, [r9, #2352]	; 0x930
 800c77a:	f8c9 1934 	str.w	r1, [r9, #2356]	; 0x934
 800c77e:	f8c9 2938 	str.w	r2, [r9, #2360]	; 0x938
 800c782:	9906      	ldr	r1, [sp, #24]
 800c784:	9a05      	ldr	r2, [sp, #20]
 800c786:	9807      	ldr	r0, [sp, #28]
 800c788:	f509 6b14 	add.w	fp, r9, #2368	; 0x940
 800c78c:	f609 1a5c 	addw	sl, r9, #2396	; 0x95c
 800c790:	edcb 8a00 	vstr	s17, [fp]
 800c794:	f609 1748 	addw	r7, r9, #2376	; 0x948
 800c798:	edca 8a00 	vstr	s17, [sl]
 800c79c:	f609 1664 	addw	r6, r9, #2404	; 0x964
 800c7a0:	edc3 8a00 	vstr	s17, [r3]
 800c7a4:	f609 1554 	addw	r5, r9, #2388	; 0x954
 800c7a8:	f609 1458 	addw	r4, r9, #2392	; 0x958
 800c7ac:	f609 1e6c 	addw	lr, r9, #2412	; 0x96c
 800c7b0:	230a      	movs	r3, #10
 800c7b2:	edc2 8a00 	vstr	s17, [r2]
 800c7b6:	edc7 8a00 	vstr	s17, [r7]
 800c7ba:	edc6 8a00 	vstr	s17, [r6]
 800c7be:	f8c9 894c 	str.w	r8, [r9, #2380]	; 0x94c
 800c7c2:	f8a9 8950 	strh.w	r8, [r9, #2384]	; 0x950
 800c7c6:	edc5 8a00 	vstr	s17, [r5]
 800c7ca:	ed84 8a00 	vstr	s16, [r4]
 800c7ce:	edc1 8a00 	vstr	s17, [r1]
 800c7d2:	edc0 8a00 	vstr	s17, [r0]
 800c7d6:	edce 8a00 	vstr	s17, [lr]
 800c7da:	f8c9 3974 	str.w	r3, [r9, #2420]	; 0x974
 800c7de:	f889 8978 	strb.w	r8, [r9, #2424]	; 0x978
 800c7e2:	f60d 4dd4 	addw	sp, sp, #3284	; 0xcd4
 800c7e6:	ecbd 8b02 	vpop	{d8}
 800c7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ee:	bf00      	nop

0800c7f0 <iNemoEngine_API_Update>:
 800c7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f4:	ed2d 8b10 	vpush	{d8-d15}
 800c7f8:	f2ad 5d94 	subw	sp, sp, #1428	; 0x594
 800c7fc:	eeb0 8a40 	vmov.f32	s16, s0
 800c800:	9006      	str	r0, [sp, #24]
 800c802:	9114      	str	r1, [sp, #80]	; 0x50
 800c804:	4614      	mov	r4, r2
 800c806:	9324      	str	r3, [sp, #144]	; 0x90
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 8222 	beq.w	800cc52 <iNemoEngine_API_Update+0x462>
 800c80e:	68e0      	ldr	r0, [r4, #12]
 800c810:	6921      	ldr	r1, [r4, #16]
 800c812:	6962      	ldr	r2, [r4, #20]
 800c814:	9d06      	ldr	r5, [sp, #24]
 800c816:	aba1      	add	r3, sp, #644	; 0x284
 800c818:	c307      	stmia	r3!, {r0, r1, r2}
 800c81a:	6820      	ldr	r0, [r4, #0]
 800c81c:	6861      	ldr	r1, [r4, #4]
 800c81e:	68a2      	ldr	r2, [r4, #8]
 800c820:	ab9e      	add	r3, sp, #632	; 0x278
 800c822:	c307      	stmia	r3!, {r0, r1, r2}
 800c824:	69a0      	ldr	r0, [r4, #24]
 800c826:	69e1      	ldr	r1, [r4, #28]
 800c828:	6a22      	ldr	r2, [r4, #32]
 800c82a:	f895 4978 	ldrb.w	r4, [r5, #2424]	; 0x978
 800c82e:	aba4      	add	r3, sp, #656	; 0x290
 800c830:	c307      	stmia	r3!, {r0, r1, r2}
 800c832:	b12c      	cbz	r4, 800c840 <iNemoEngine_API_Update+0x50>
 800c834:	f8b5 2950 	ldrh.w	r2, [r5, #2384]	; 0x950
 800c838:	792b      	ldrb	r3, [r5, #4]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	f082 82a5 	bcs.w	800ed8a <iNemoEngine_API_Update+0x259a>
 800c840:	9c06      	ldr	r4, [sp, #24]
 800c842:	ae31      	add	r6, sp, #196	; 0xc4
 800c844:	f104 033a 	add.w	r3, r4, #58	; 0x3a
 800c848:	4619      	mov	r1, r3
 800c84a:	4630      	mov	r0, r6
 800c84c:	aaa1      	add	r2, sp, #644	; 0x284
 800c84e:	9320      	str	r3, [sp, #128]	; 0x80
 800c850:	ad37      	add	r5, sp, #220	; 0xdc
 800c852:	f7fe f897 	bl	800a984 <rotVect>
 800c856:	aaa4      	add	r2, sp, #656	; 0x290
 800c858:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800c85c:	a834      	add	r0, sp, #208	; 0xd0
 800c85e:	f7fe f891 	bl	800a984 <rotVect>
 800c862:	aa9e      	add	r2, sp, #632	; 0x278
 800c864:	f104 0143 	add.w	r1, r4, #67	; 0x43
 800c868:	4628      	mov	r0, r5
 800c86a:	f7fe f88b 	bl	800a984 <rotVect>
 800c86e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800c872:	b923      	cbnz	r3, 800c87e <iNemoEngine_API_Update+0x8e>
 800c874:	4b9d      	ldr	r3, [pc, #628]	; (800caec <iNemoEngine_API_Update+0x2fc>)
 800c876:	606b      	str	r3, [r5, #4]
 800c878:	60ab      	str	r3, [r5, #8]
 800c87a:	2300      	movs	r3, #0
 800c87c:	602b      	str	r3, [r5, #0]
 800c87e:	9b06      	ldr	r3, [sp, #24]
 800c880:	f8d3 794c 	ldr.w	r7, [r3, #2380]	; 0x94c
 800c884:	2f09      	cmp	r7, #9
 800c886:	d851      	bhi.n	800c92c <iNemoEngine_API_Update+0x13c>
 800c888:	edd6 aa01 	vldr	s21, [r6, #4]
 800c88c:	ed96 ba00 	vldr	s22, [r6]
 800c890:	ed96 aa02 	vldr	s20, [r6, #8]
 800c894:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 800c898:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 800c89c:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 800c8a0:	eeea 7a0a 	vfma.f32	s15, s20, s20
 800c8a4:	ee17 0a90 	vmov	r0, s15
 800c8a8:	f7f3 fe4e 	bl	8000548 <__aeabi_f2d>
 800c8ac:	ec41 0b10 	vmov	d0, r0, r1
 800c8b0:	f009 faf8 	bl	8015ea4 <sqrt>
 800c8b4:	ec51 0b10 	vmov	r0, r1, d0
 800c8b8:	f7f4 f996 	bl	8000be8 <__aeabi_d2f>
 800c8bc:	ee07 0a90 	vmov	s15, r0
 800c8c0:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 800c8c4:	ed95 9a01 	vldr	s18, [r5, #4]
 800c8c8:	edd5 9a00 	vldr	s19, [r5]
 800c8cc:	edd5 8a02 	vldr	s17, [r5, #8]
 800c8d0:	ee69 7a09 	vmul.f32	s15, s18, s18
 800c8d4:	ee2b ba07 	vmul.f32	s22, s22, s14
 800c8d8:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800c8dc:	ee6a aa87 	vmul.f32	s21, s21, s14
 800c8e0:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800c8e4:	ee2a aa07 	vmul.f32	s20, s20, s14
 800c8e8:	ee17 0a90 	vmov	r0, s15
 800c8ec:	ed86 ba00 	vstr	s22, [r6]
 800c8f0:	edc6 aa01 	vstr	s21, [r6, #4]
 800c8f4:	ed86 aa02 	vstr	s20, [r6, #8]
 800c8f8:	f7f3 fe26 	bl	8000548 <__aeabi_f2d>
 800c8fc:	ec41 0b10 	vmov	d0, r0, r1
 800c900:	f009 fad0 	bl	8015ea4 <sqrt>
 800c904:	ec51 0b10 	vmov	r0, r1, d0
 800c908:	f7f4 f96e 	bl	8000be8 <__aeabi_d2f>
 800c90c:	ee07 0a90 	vmov	s15, r0
 800c910:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 800c914:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800c918:	ee29 9a27 	vmul.f32	s18, s18, s15
 800c91c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800c920:	edc5 9a00 	vstr	s19, [r5]
 800c924:	ed85 9a01 	vstr	s18, [r5, #4]
 800c928:	edc5 8a02 	vstr	s17, [r5, #8]
 800c92c:	9906      	ldr	r1, [sp, #24]
 800c92e:	790b      	ldrb	r3, [r1, #4]
 800c930:	f8b1 2950 	ldrh.w	r2, [r1, #2384]	; 0x950
 800c934:	429a      	cmp	r2, r3
 800c936:	f080 80f5 	bcs.w	800cb24 <iNemoEngine_API_Update+0x334>
 800c93a:	abf8      	add	r3, sp, #992	; 0x3e0
 800c93c:	9319      	str	r3, [sp, #100]	; 0x64
 800c93e:	f501 6313 	add.w	r3, r1, #2352	; 0x930
 800c942:	931c      	str	r3, [sp, #112]	; 0x70
 800c944:	f601 1334 	addw	r3, r1, #2356	; 0x934
 800c948:	931d      	str	r3, [sp, #116]	; 0x74
 800c94a:	f601 1338 	addw	r3, r1, #2360	; 0x938
 800c94e:	931e      	str	r3, [sp, #120]	; 0x78
 800c950:	eddd 9af5 	vldr	s19, [sp, #980]	; 0x3d4
 800c954:	f601 133c 	addw	r3, r1, #2364	; 0x93c
 800c958:	accc      	add	r4, sp, #816	; 0x330
 800c95a:	931f      	str	r3, [sp, #124]	; 0x7c
 800c95c:	460d      	mov	r5, r1
 800c95e:	3701      	adds	r7, #1
 800c960:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c962:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c964:	f8c5 794c 	str.w	r7, [r5, #2380]	; 0x94c
 800c968:	aaa1      	add	r2, sp, #644	; 0x284
 800c96a:	f7fe f80b 	bl	800a984 <rotVect>
 800c96e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c970:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	60d3      	str	r3, [r2, #12]
 800c976:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	6113      	str	r3, [r2, #16]
 800c97c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	6153      	str	r3, [r2, #20]
 800c982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	6193      	str	r3, [r2, #24]
 800c988:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 800c98c:	9301      	str	r3, [sp, #4]
 800c98e:	4601      	mov	r1, r0
 800c990:	f102 0328 	add.w	r3, r2, #40	; 0x28
 800c994:	4610      	mov	r0, r2
 800c996:	4615      	mov	r5, r2
 800c998:	300c      	adds	r0, #12
 800c99a:	9300      	str	r3, [sp, #0]
 800c99c:	f102 031c 	add.w	r3, r2, #28
 800c9a0:	f7ff fb6c 	bl	800c07c <output_update>
 800c9a4:	ed95 8a00 	vldr	s16, [r5]
 800c9a8:	ed95 aa01 	vldr	s20, [r5, #4]
 800c9ac:	eeb0 0a48 	vmov.f32	s0, s16
 800c9b0:	f009 fc4e 	bl	8016250 <sinf>
 800c9b4:	eeb0 9a40 	vmov.f32	s18, s0
 800c9b8:	eeb0 0a48 	vmov.f32	s0, s16
 800c9bc:	f009 fa2e 	bl	8015e1c <cosf>
 800c9c0:	edd4 7a33 	vldr	s15, [r4, #204]	; 0xcc
 800c9c4:	edd4 6a3d 	vldr	s13, [r4, #244]	; 0xf4
 800c9c8:	ee60 8a00 	vmul.f32	s17, s0, s0
 800c9cc:	eeb0 7aca 	vabs.f32	s14, s20
 800c9d0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800c9d4:	eddf 7a46 	vldr	s15, [pc, #280]	; 800caf0 <iNemoEngine_API_Update+0x300>
 800c9d8:	ee29 9a09 	vmul.f32	s18, s18, s18
 800c9dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e4:	eee9 8a26 	vfma.f32	s17, s18, s13
 800c9e8:	d579      	bpl.n	800cade <iNemoEngine_API_Update+0x2ee>
 800c9ea:	eeb0 0a4a 	vmov.f32	s0, s20
 800c9ee:	f009 fc7f 	bl	80162f0 <tanf>
 800c9f2:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c9f6:	eeb0 7a69 	vmov.f32	s14, s19
 800c9fa:	eea0 7a28 	vfma.f32	s14, s0, s17
 800c9fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ca00:	9b06      	ldr	r3, [sp, #24]
 800ca02:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800caf4 <iNemoEngine_API_Update+0x304>
 800ca06:	4c3c      	ldr	r4, [pc, #240]	; (800caf8 <iNemoEngine_API_Update+0x308>)
 800ca08:	eef1 7ac7 	vsqrt.f32	s15, s14
 800ca0c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800cb18 <iNemoEngine_API_Update+0x328>
 800ca10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ca14:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ca18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca1c:	bf88      	it	hi
 800ca1e:	eef0 7a66 	vmovhi.f32	s15, s13
 800ca22:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca2a:	bfb8      	it	lt
 800ca2c:	eef0 7a47 	vmovlt.f32	s15, s14
 800ca30:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 800ca34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ca38:	bbd3      	cbnz	r3, 800cab0 <iNemoEngine_API_Update+0x2c0>
 800ca3a:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 800ca3e:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 800ca42:	edd5 0a08 	vldr	s1, [r5, #32]
 800ca46:	ed95 0a07 	vldr	s0, [r5, #28]
 800ca4a:	f7fe f86d 	bl	800ab28 <findDirection>
 800ca4e:	ed95 7a03 	vldr	s14, [r5, #12]
 800ca52:	edd5 6a04 	vldr	s13, [r5, #16]
 800ca56:	edd5 8a05 	vldr	s17, [r5, #20]
 800ca5a:	edd5 7a06 	vldr	s15, [r5, #24]
 800ca5e:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0
 800ca62:	2805      	cmp	r0, #5
 800ca64:	f204 822c 	bhi.w	8010ec0 <iNemoEngine_API_Update+0x46d0>
 800ca68:	e8df f010 	tbh	[pc, r0, lsl #1]
 800ca6c:	11d0000a 	.word	0x11d0000a
 800ca70:	11990006 	.word	0x11990006
 800ca74:	000a0006 	.word	0x000a0006
 800ca78:	eddf 7a20 	vldr	s15, [pc, #128]	; 800cafc <iNemoEngine_API_Update+0x30c>
 800ca7c:	ee38 8a27 	vadd.f32	s16, s16, s15
 800ca80:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cb00 <iNemoEngine_API_Update+0x310>
 800ca84:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ca88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca8c:	bfa8      	it	ge
 800ca8e:	ee38 8a67 	vsubge.f32	s16, s16, s15
 800ca92:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ca96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9a:	f100 80d5 	bmi.w	800cc48 <iNemoEngine_API_Update+0x458>
 800ca9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800caa0:	ed83 8a0d 	vstr	s16, [r3, #52]	; 0x34
 800caa4:	f20d 5d94 	addw	sp, sp, #1428	; 0x594
 800caa8:	ecbd 8b10 	vpop	{d8-d15}
 800caac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab0:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 800cab4:	edd5 8a05 	vldr	s17, [r5, #20]
 800cab8:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 800cabc:	edd5 0a07 	vldr	s1, [r5, #28]
 800cac0:	ed95 0a08 	vldr	s0, [r5, #32]
 800cac4:	eeb1 1a41 	vneg.f32	s2, s2
 800cac8:	f7fe f82e 	bl	800ab28 <findDirection>
 800cacc:	eef1 8a68 	vneg.f32	s17, s17
 800cad0:	ed95 7a04 	vldr	s14, [r5, #16]
 800cad4:	edd5 6a03 	vldr	s13, [r5, #12]
 800cad8:	edd5 7a06 	vldr	s15, [r5, #24]
 800cadc:	e7bf      	b.n	800ca5e <iNemoEngine_API_Update+0x26e>
 800cade:	eddf 7a09 	vldr	s15, [pc, #36]	; 800cb04 <iNemoEngine_API_Update+0x314>
 800cae2:	eeb0 7a69 	vmov.f32	s14, s19
 800cae6:	eea8 7aa7 	vfma.f32	s14, s17, s15
 800caea:	e788      	b.n	800c9fe <iNemoEngine_API_Update+0x20e>
 800caec:	3f333333 	.word	0x3f333333
 800caf0:	3fbc430e 	.word	0x3fbc430e
 800caf4:	40490fdb 	.word	0x40490fdb
 800caf8:	2000021c 	.word	0x2000021c
 800cafc:	43340000 	.word	0x43340000
 800cb00:	43b40000 	.word	0x43b40000
 800cb04:	42c6ab07 	.word	0x42c6ab07
 800cb08:	3c03126f 	.word	0x3c03126f
 800cb0c:	3b656042 	.word	0x3b656042
 800cb10:	3e4ccccd 	.word	0x3e4ccccd
 800cb14:	3fb50481 	.word	0x3fb50481
 800cb18:	3c8efa35 	.word	0x3c8efa35
 800cb1c:	3ed93dd9 	.word	0x3ed93dd9
 800cb20:	42c80000 	.word	0x42c80000
 800cb24:	ee07 3a90 	vmov	s15, r3
 800cb28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb2c:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800cb08 <iNemoEngine_API_Update+0x318>
 800cb30:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 800cb0c <iNemoEngine_API_Update+0x31c>
 800cb34:	ed5f ba08 	vldr	s23, [pc, #-32]	; 800cb18 <iNemoEngine_API_Update+0x328>
 800cb38:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800cb14 <iNemoEngine_API_Update+0x324>
 800cb3c:	ed5f 4a0c 	vldr	s9, [pc, #-48]	; 800cb10 <iNemoEngine_API_Update+0x320>
 800cb40:	ee67 7a88 	vmul.f32	s15, s15, s16
 800cb44:	4608      	mov	r0, r1
 800cb46:	eec7 5a27 	vdiv.f32	s11, s14, s15
 800cb4a:	f601 125c 	addw	r2, r1, #2396	; 0x95c
 800cb4e:	2300      	movs	r3, #0
 800cb50:	2100      	movs	r1, #0
 800cb52:	f50d 7cb2 	add.w	ip, sp, #356	; 0x164
 800cb56:	ac56      	add	r4, sp, #344	; 0x158
 800cb58:	edcd 7a07 	vstr	s15, [sp, #28]
 800cb5c:	eef1 7ae5 	vsqrt.f32	s15, s11
 800cb60:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 800cb1c <iNemoEngine_API_Update+0x32c>
 800cb64:	ee86 4aa7 	vdiv.f32	s8, s13, s15
 800cb68:	ee67 6a87 	vmul.f32	s13, s15, s14
 800cb6c:	ed92 7a00 	vldr	s14, [r2]
 800cb70:	f8a0 1950 	strh.w	r1, [r0, #2384]	; 0x950
 800cb74:	6013      	str	r3, [r2, #0]
 800cb76:	f500 6216 	add.w	r2, r0, #2400	; 0x960
 800cb7a:	ee27 ea2b 	vmul.f32	s28, s14, s23
 800cb7e:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
 800cb82:	ed92 7a00 	vldr	s14, [r2]
 800cb86:	6013      	str	r3, [r2, #0]
 800cb88:	f600 1264 	addw	r2, r0, #2404	; 0x964
 800cb8c:	ee67 ea2b 	vmul.f32	s29, s14, s23
 800cb90:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
 800cb94:	ed92 7a00 	vldr	s14, [r2]
 800cb98:	6013      	str	r3, [r2, #0]
 800cb9a:	7947      	ldrb	r7, [r0, #5]
 800cb9c:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
 800cba0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800cba4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800cba8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cbac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cbb0:	9a06      	ldr	r2, [sp, #24]
 800cbb2:	f8d2 01c8 	ldr.w	r0, [r2, #456]	; 0x1c8
 800cbb6:	f8d2 11cc 	ldr.w	r1, [r2, #460]	; 0x1cc
 800cbba:	f8d2 21d0 	ldr.w	r2, [r2, #464]	; 0x1d0
 800cbbe:	abd9      	add	r3, sp, #868	; 0x364
 800cbc0:	2f01      	cmp	r7, #1
 800cbc2:	c307      	stmia	r3!, {r0, r1, r2}
 800cbc4:	ee27 6a86 	vmul.f32	s12, s15, s12
 800cbc8:	ee67 4aa4 	vmul.f32	s9, s15, s9
 800cbcc:	ee67 ba2b 	vmul.f32	s23, s14, s23
 800cbd0:	f002 844a 	beq.w	800f468 <iNemoEngine_API_Update+0x2c78>
 800cbd4:	2f02      	cmp	r7, #2
 800cbd6:	f002 843c 	beq.w	800f452 <iNemoEngine_API_Update+0x2c62>
 800cbda:	2f00      	cmp	r7, #0
 800cbdc:	f002 814d 	beq.w	800ee7a <iNemoEngine_API_Update+0x268a>
 800cbe0:	9b06      	ldr	r3, [sp, #24]
 800cbe2:	ed5f 5a31 	vldr	s11, [pc, #-196]	; 800cb20 <iNemoEngine_API_Update+0x330>
 800cbe6:	ed93 ba05 	vldr	s22, [r3, #20]
 800cbea:	491b      	ldr	r1, [pc, #108]	; (800cc58 <iNemoEngine_API_Update+0x468>)
 800cbec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cbf0:	ee2b ba25 	vmul.f32	s22, s22, s11
 800cbf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	8842      	ldrh	r2, [r0, #2]
 800cbfc:	1e53      	subs	r3, r2, #1
 800cbfe:	2b12      	cmp	r3, #18
 800cc00:	d834      	bhi.n	800cc6c <iNemoEngine_API_Update+0x47c>
 800cc02:	3201      	adds	r2, #1
 800cc04:	b213      	sxth	r3, r2
 800cc06:	b292      	uxth	r2, r2
 800cc08:	2a03      	cmp	r2, #3
 800cc0a:	8043      	strh	r3, [r0, #2]
 800cc0c:	f242 8401 	bls.w	800f412 <iNemoEngine_API_Update+0x2c22>
 800cc10:	ee07 3a10 	vmov	s14, r3
 800cc14:	eddf 5a11 	vldr	s11, [pc, #68]	; 800cc5c <iNemoEngine_API_Update+0x46c>
 800cc18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cc22:	ee84 4a07 	vdiv.f32	s8, s8, s14
 800cc26:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
 800cc2a:	ed8d 4a22 	vstr	s8, [sp, #136]	; 0x88
 800cc2e:	ee66 5a87 	vmul.f32	s11, s13, s14
 800cc32:	ee66 6a05 	vmul.f32	s13, s12, s10
 800cc36:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800cc68 <iNemoEngine_API_Update+0x478>
 800cc3a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800cc3e:	ee24 6a86 	vmul.f32	s12, s9, s12
 800cc42:	eeb0 7a65 	vmov.f32	s14, s11
 800cc46:	e02d      	b.n	800cca4 <iNemoEngine_API_Update+0x4b4>
 800cc48:	eddf 7a05 	vldr	s15, [pc, #20]	; 800cc60 <iNemoEngine_API_Update+0x470>
 800cc4c:	ee38 8a27 	vadd.f32	s16, s16, s15
 800cc50:	e725      	b.n	800ca9e <iNemoEngine_API_Update+0x2ae>
 800cc52:	ab46      	add	r3, sp, #280	; 0x118
 800cc54:	9324      	str	r3, [sp, #144]	; 0x90
 800cc56:	e5da      	b.n	800c80e <iNemoEngine_API_Update+0x1e>
 800cc58:	3a83126f 	.word	0x3a83126f
 800cc5c:	3d4ccccd 	.word	0x3d4ccccd
 800cc60:	43b40000 	.word	0x43b40000
 800cc64:	358637bd 	.word	0x358637bd
 800cc68:	3f333333 	.word	0x3f333333
 800cc6c:	ed1f 5a03 	vldr	s10, [pc, #-12]	; 800cc64 <iNemoEngine_API_Update+0x474>
 800cc70:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800cc74:	edd0 5a0b 	vldr	s11, [r0, #44]	; 0x2c
 800cc78:	ee37 7a05 	vadd.f32	s14, s14, s10
 800cc7c:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
 800cc80:	ee84 7a07 	vdiv.f32	s14, s8, s14
 800cc84:	2300      	movs	r3, #0
 800cc86:	8043      	strh	r3, [r0, #2]
 800cc88:	ee66 5aa5 	vmul.f32	s11, s13, s11
 800cc8c:	ed8d 7a22 	vstr	s14, [sp, #136]	; 0x88
 800cc90:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 800cc94:	ee26 7a87 	vmul.f32	s14, s13, s14
 800cc98:	ee66 6a05 	vmul.f32	s13, s12, s10
 800cc9c:	ed1f 6a0e 	vldr	s12, [pc, #-56]	; 800cc68 <iNemoEngine_API_Update+0x478>
 800cca0:	ee24 6a86 	vmul.f32	s12, s9, s12
 800cca4:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
 800cca8:	ee25 5a24 	vmul.f32	s10, s10, s9
 800ccac:	edcd 7a89 	vstr	s15, [sp, #548]	; 0x224
 800ccb0:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 800ccb4:	edcd 7a8b 	vstr	s15, [sp, #556]	; 0x22c
 800ccb8:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 800ccbc:	4bdd      	ldr	r3, [pc, #884]	; (800d034 <iNemoEngine_API_Update+0x844>)
 800ccbe:	9162      	str	r1, [sp, #392]	; 0x188
 800ccc0:	a8f8      	add	r0, sp, #992	; 0x3e0
 800ccc2:	9163      	str	r1, [sp, #396]	; 0x18c
 800ccc4:	9164      	str	r1, [sp, #400]	; 0x190
 800ccc6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800ccca:	2100      	movs	r1, #0
 800cccc:	4605      	mov	r5, r0
 800ccce:	9367      	str	r3, [sp, #412]	; 0x19c
 800ccd0:	9019      	str	r0, [sp, #100]	; 0x64
 800ccd2:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 800ccd6:	edcd 5a84 	vstr	s11, [sp, #528]	; 0x210
 800ccda:	edcd 5a85 	vstr	s11, [sp, #532]	; 0x214
 800ccde:	ed8d 7a86 	vstr	s14, [sp, #536]	; 0x218
 800cce2:	ed8d 7a87 	vstr	s14, [sp, #540]	; 0x21c
 800cce6:	ed8d 7a88 	vstr	s14, [sp, #544]	; 0x220
 800ccea:	edcd 6a8c 	vstr	s13, [sp, #560]	; 0x230
 800ccee:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 800ccf2:	ed8d 5a8e 	vstr	s10, [sp, #568]	; 0x238
 800ccf6:	edcd 7a5f 	vstr	s15, [sp, #380]	; 0x17c
 800ccfa:	edcd 7a60 	vstr	s15, [sp, #384]	; 0x180
 800ccfe:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 800cd02:	f006 f9c1 	bl	8013088 <memset>
 800cd06:	9b06      	ldr	r3, [sp, #24]
 800cd08:	7b5a      	ldrb	r2, [r3, #13]
 800cd0a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cd0e:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 800cd12:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
 800cd16:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 800cd1a:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
 800cd1e:	f8c5 3178 	str.w	r3, [r5, #376]	; 0x178
 800cd22:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
 800cd26:	2a00      	cmp	r2, #0
 800cd28:	f001 8124 	beq.w	800df74 <iNemoEngine_API_Update+0x1784>
 800cd2c:	ed94 8a01 	vldr	s16, [r4, #4]
 800cd30:	edd4 8a00 	vldr	s17, [r4]
 800cd34:	ed94 ca02 	vldr	s24, [r4, #8]
 800cd38:	ee28 9a08 	vmul.f32	s18, s16, s16
 800cd3c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800cd40:	eea8 9aa8 	vfma.f32	s18, s17, s17
 800cd44:	ee68 5a27 	vmul.f32	s11, s16, s15
 800cd48:	eeac 9a0c 	vfma.f32	s18, s24, s24
 800cd4c:	ee6c 6a27 	vmul.f32	s13, s24, s15
 800cd50:	eef1 cac9 	vsqrt.f32	s25, s18
 800cd54:	ee3c 5a0c 	vadd.f32	s10, s24, s24
 800cd58:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800cd5c:	ee38 6aa8 	vadd.f32	s12, s17, s17
 800cd60:	ee38 7a08 	vadd.f32	s14, s16, s16
 800cd64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd66:	ed94 aa04 	vldr	s20, [r4, #16]
 800cd6a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 800cd6e:	eef1 7a4a 	vneg.f32	s15, s20
 800cd72:	edd4 9a05 	vldr	s19, [r4, #20]
 800cd76:	edd4 aa03 	vldr	s21, [r4, #12]
 800cd7a:	ed83 5a01 	vstr	s10, [r3, #4]
 800cd7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cd82:	edc3 5a02 	vstr	s11, [r3, #8]
 800cd86:	edc3 7a05 	vstr	s15, [r3, #20]
 800cd8a:	eef1 7a69 	vneg.f32	s15, s19
 800cd8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cd92:	edc3 6a0c 	vstr	s13, [r3, #48]	; 0x30
 800cd96:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 800cd9a:	eef1 7a6a 	vneg.f32	s15, s21
 800cd9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cda2:	ed83 6a0e 	vstr	s12, [r3, #56]	; 0x38
 800cda6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 800cdaa:	ee79 7aa9 	vadd.f32	s15, s19, s19
 800cdae:	ed83 7a18 	vstr	s14, [r3, #96]	; 0x60
 800cdb2:	edc3 7a04 	vstr	s15, [r3, #16]
 800cdb6:	ee7a 7aaa 	vadd.f32	s15, s21, s21
 800cdba:	2230      	movs	r2, #48	; 0x30
 800cdbc:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 800cdc0:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 800cdca:	a88f      	add	r0, sp, #572	; 0x23c
 800cdcc:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 800cdd0:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
 800cdd4:	933c      	str	r3, [sp, #240]	; 0xf0
 800cdd6:	f006 f957 	bl	8013088 <memset>
 800cdda:	9a06      	ldr	r2, [sp, #24]
 800cddc:	edd2 7a07 	vldr	s15, [r2, #28]
 800cde0:	ed92 da06 	vldr	s26, [r2, #24]
 800cde4:	f892 31ac 	ldrb.w	r3, [r2, #428]	; 0x1ac
 800cde8:	ee6b 7a27 	vmul.f32	s15, s22, s15
 800cdec:	ee2b da0d 	vmul.f32	s26, s22, s26
 800cdf0:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800cdf4:	edd2 7a08 	vldr	s15, [r2, #32]
 800cdf8:	ee6b 7a27 	vmul.f32	s15, s22, s15
 800cdfc:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f043 8025 	bne.w	800fe50 <iNemoEngine_API_Update+0x3660>
 800ce06:	4613      	mov	r3, r2
 800ce08:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 800ce0c:	9225      	str	r2, [sp, #148]	; 0x94
 800ce0e:	f603 1244 	addw	r2, r3, #2372	; 0x944
 800ce12:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800ce16:	9226      	str	r2, [sp, #152]	; 0x98
 800ce18:	9327      	str	r3, [sp, #156]	; 0x9c
 800ce1a:	9a06      	ldr	r2, [sp, #24]
 800ce1c:	f892 3318 	ldrb.w	r3, [r2, #792]	; 0x318
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f042 84db 	bne.w	800f7dc <iNemoEngine_API_Update+0x2fec>
 800ce26:	4613      	mov	r3, r2
 800ce28:	f502 6597 	add.w	r5, r2, #1208	; 0x4b8
 800ce2c:	f202 47b4 	addw	r7, r2, #1204	; 0x4b4
 800ce30:	f502 66c5 	add.w	r6, r2, #1576	; 0x628
 800ce34:	f202 6824 	addw	r8, r2, #1572	; 0x624
 800ce38:	f203 7394 	addw	r3, r3, #1940	; 0x794
 800ce3c:	f502 62f3 	add.w	r2, r2, #1944	; 0x798
 800ce40:	9215      	str	r2, [sp, #84]	; 0x54
 800ce42:	931b      	str	r3, [sp, #108]	; 0x6c
 800ce44:	9b06      	ldr	r3, [sp, #24]
 800ce46:	f503 6213 	add.w	r2, r3, #2352	; 0x930
 800ce4a:	ed92 6a00 	vldr	s12, [r2]
 800ce4e:	921c      	str	r2, [sp, #112]	; 0x70
 800ce50:	f603 1134 	addw	r1, r3, #2356	; 0x934
 800ce54:	f603 1038 	addw	r0, r3, #2360	; 0x938
 800ce58:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 800ce5c:	edd3 7a00 	vldr	s15, [r3]
 800ce60:	edd1 6a00 	vldr	s13, [r1]
 800ce64:	ed90 7a00 	vldr	s14, [r0]
 800ce68:	931f      	str	r3, [sp, #124]	; 0x7c
 800ce6a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ce6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce72:	911d      	str	r1, [sp, #116]	; 0x74
 800ce74:	901e      	str	r0, [sp, #120]	; 0x78
 800ce76:	ed8d 6a4e 	vstr	s12, [sp, #312]	; 0x138
 800ce7a:	edcd 6a4f 	vstr	s13, [sp, #316]	; 0x13c
 800ce7e:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800ce82:	edcd 7a51 	vstr	s15, [sp, #324]	; 0x144
 800ce86:	f04f 0300 	mov.w	r3, #0
 800ce8a:	d13a      	bne.n	800cf02 <iNemoEngine_API_Update+0x712>
 800ce8c:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ce90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce94:	d135      	bne.n	800cf02 <iNemoEngine_API_Update+0x712>
 800ce96:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ce9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9e:	d130      	bne.n	800cf02 <iNemoEngine_API_Update+0x712>
 800cea0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea8:	d12b      	bne.n	800cf02 <iNemoEngine_API_Update+0x712>
 800ceaa:	9a06      	ldr	r2, [sp, #24]
 800ceac:	934e      	str	r3, [sp, #312]	; 0x138
 800ceae:	934f      	str	r3, [sp, #316]	; 0x13c
 800ceb0:	9350      	str	r3, [sp, #320]	; 0x140
 800ceb2:	4b61      	ldr	r3, [pc, #388]	; (800d038 <iNemoEngine_API_Update+0x848>)
 800ceb4:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 800ceb8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cebc:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 800cec0:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 800cec4:	9351      	str	r3, [sp, #324]	; 0x144
 800cec6:	2100      	movs	r1, #0
 800cec8:	4613      	mov	r3, r2
 800ceca:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 800cece:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
 800ced2:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ced6:	f006 f8d7 	bl	8013088 <memset>
 800ceda:	9a06      	ldr	r2, [sp, #24]
 800cedc:	4b57      	ldr	r3, [pc, #348]	; (800d03c <iNemoEngine_API_Update+0x84c>)
 800cede:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
 800cee2:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 800cee6:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
 800ceea:	f8c2 324c 	str.w	r3, [r2, #588]	; 0x24c
 800ceee:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
 800cef2:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
 800cef6:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
 800cefa:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
 800cefe:	f8c2 3314 	str.w	r3, [r2, #788]	; 0x314
 800cf02:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800d040 <iNemoEngine_API_Update+0x850>
 800cf06:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800cf0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0e:	f100 87e0 	bmi.w	800ded2 <iNemoEngine_API_Update+0x16e2>
 800cf12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf16:	ee7c 6ac7 	vsub.f32	s13, s25, s14
 800cf1a:	eec7 7a2c 	vdiv.f32	s15, s14, s25
 800cf1e:	eeb0 7ae6 	vabs.f32	s14, s13
 800cf22:	eef0 6a47 	vmov.f32	s13, s14
 800cf26:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 800cf2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cf2e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cf32:	ed8d 7a21 	vstr	s14, [sp, #132]	; 0x84
 800cf36:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 800cf3a:	edd4 6a00 	vldr	s13, [r4]
 800cf3e:	ed94 6a01 	vldr	s12, [r4, #4]
 800cf42:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 800cf46:	eeaa 7aaa 	vfma.f32	s14, s21, s21
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800cf50:	eea9 7aa9 	vfma.f32	s14, s19, s19
 800cf54:	ee67 6a86 	vmul.f32	s13, s15, s12
 800cf58:	ed8d 6a2d 	vstr	s12, [sp, #180]	; 0xb4
 800cf5c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800d040 <iNemoEngine_API_Update+0x850>
 800cf60:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 800cf64:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800cf68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf6c:	bf54      	ite	pl
 800cf6e:	eeb1 9ac7 	vsqrtpl.f32	s18, s14
 800cf72:	ed9f 9a34 	vldrmi	s18, [pc, #208]	; 800d044 <iNemoEngine_API_Update+0x854>
 800cf76:	ed94 5a02 	vldr	s10, [r4, #8]
 800cf7a:	edd7 3a00 	vldr	s7, [r7]
 800cf7e:	ed8d 5a2a 	vstr	s10, [sp, #168]	; 0xa8
 800cf82:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800cf86:	ee83 7a09 	vdiv.f32	s14, s6, s18
 800cf8a:	ee65 7a27 	vmul.f32	s15, s10, s15
 800cf8e:	ee2a 6a07 	vmul.f32	s12, s20, s14
 800cf92:	eeb0 0a63 	vmov.f32	s0, s7
 800cf96:	ee66 6a26 	vmul.f32	s13, s12, s13
 800cf9a:	ed8d 6a41 	vstr	s12, [sp, #260]	; 0x104
 800cf9e:	ee2a 6a87 	vmul.f32	s12, s21, s14
 800cfa2:	ee29 7a87 	vmul.f32	s14, s19, s14
 800cfa6:	eee6 6a25 	vfma.f32	s13, s12, s11
 800cfaa:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 800cfae:	eee7 6a87 	vfma.f32	s13, s15, s14
 800cfb2:	ed8d 7a42 	vstr	s14, [sp, #264]	; 0x108
 800cfb6:	edcd 5a3d 	vstr	s11, [sp, #244]	; 0xf4
 800cfba:	ed8d 6a40 	vstr	s12, [sp, #256]	; 0x100
 800cfbe:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 800cfc2:	f7fd ffa5 	bl	800af10 <dataDerivative5>
 800cfc6:	edd8 fa00 	vldr	s31, [r8]
 800cfca:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
 800cfce:	4630      	mov	r0, r6
 800cfd0:	eeb0 0a6f 	vmov.f32	s0, s31
 800cfd4:	f7fd ff9c 	bl	800af10 <dataDerivative5>
 800cfd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfda:	9815      	ldr	r0, [sp, #84]	; 0x54
 800cfdc:	ed93 fa00 	vldr	s30, [r3]
 800cfe0:	eeb0 ba40 	vmov.f32	s22, s0
 800cfe4:	eeb0 0a4f 	vmov.f32	s0, s30
 800cfe8:	f7fd ff92 	bl	800af10 <dataDerivative5>
 800cfec:	eec3 7a23 	vdiv.f32	s15, s6, s7
 800cff0:	eef0 da40 	vmov.f32	s27, s0
 800cff4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800cff8:	ee27 8a88 	vmul.f32	s16, s15, s16
 800cffc:	ee27 ca8c 	vmul.f32	s24, s15, s24
 800d000:	eddf 7a11 	vldr	s15, [pc, #68]	; 800d048 <iNemoEngine_API_Update+0x858>
 800d004:	eeb0 7ae8 	vabs.f32	s14, s17
 800d008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d010:	d52c      	bpl.n	800d06c <iNemoEngine_API_Update+0x87c>
 800d012:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d016:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d01e:	f281 8756 	bge.w	800eece <iNemoEngine_API_Update+0x26de>
 800d022:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d026:	eef4 8ac7 	vcmpe.f32	s17, s14
 800d02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d02e:	f303 80bc 	bgt.w	80101aa <iNemoEngine_API_Update+0x39ba>
 800d032:	e00b      	b.n	800d04c <iNemoEngine_API_Update+0x85c>
 800d034:	3a9d4952 	.word	0x3a9d4952
 800d038:	bf666666 	.word	0xbf666666
 800d03c:	40a00000 	.word	0x40a00000
 800d040:	3c23d70a 	.word	0x3c23d70a
 800d044:	3dcccccd 	.word	0x3dcccccd
 800d048:	4b000000 	.word	0x4b000000
 800d04c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800d050:	ee17 0a90 	vmov	r0, s15
 800d054:	f7f3 fa78 	bl	8000548 <__aeabi_f2d>
 800d058:	ec41 0b10 	vmov	d0, r0, r1
 800d05c:	f009 fd60 	bl	8016b20 <ceil>
 800d060:	ec51 0b10 	vmov	r0, r1, d0
 800d064:	f7f3 fdc0 	bl	8000be8 <__aeabi_d2f>
 800d068:	ee08 0a90 	vmov	s17, r0
 800d06c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 800d048 <iNemoEngine_API_Update+0x858>
 800d070:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 800d074:	eeb0 7ac8 	vabs.f32	s14, s16
 800d078:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d080:	d51f      	bpl.n	800d0c2 <iNemoEngine_API_Update+0x8d2>
 800d082:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d086:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d08e:	f281 870c 	bge.w	800eeaa <iNemoEngine_API_Update+0x26ba>
 800d092:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d096:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800d09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d09e:	f303 8080 	bgt.w	80101a2 <iNemoEngine_API_Update+0x39b2>
 800d0a2:	ee78 7a67 	vsub.f32	s15, s16, s15
 800d0a6:	ee17 0a90 	vmov	r0, s15
 800d0aa:	f7f3 fa4d 	bl	8000548 <__aeabi_f2d>
 800d0ae:	ec41 0b10 	vmov	d0, r0, r1
 800d0b2:	f009 fd35 	bl	8016b20 <ceil>
 800d0b6:	ec51 0b10 	vmov	r0, r1, d0
 800d0ba:	f7f3 fd95 	bl	8000be8 <__aeabi_d2f>
 800d0be:	ee08 0a10 	vmov	s16, r0
 800d0c2:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 800d048 <iNemoEngine_API_Update+0x858>
 800d0c6:	ed8d 8a44 	vstr	s16, [sp, #272]	; 0x110
 800d0ca:	eeb0 7acc 	vabs.f32	s14, s24
 800d0ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0d6:	d51f      	bpl.n	800d118 <iNemoEngine_API_Update+0x928>
 800d0d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d0dc:	eeb4 cae7 	vcmpe.f32	s24, s15
 800d0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e4:	f281 86cf 	bge.w	800ee86 <iNemoEngine_API_Update+0x2696>
 800d0e8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d0ec:	eeb4 cac7 	vcmpe.f32	s24, s14
 800d0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0f4:	f303 8065 	bgt.w	80101c2 <iNemoEngine_API_Update+0x39d2>
 800d0f8:	ee7c 7a67 	vsub.f32	s15, s24, s15
 800d0fc:	ee17 0a90 	vmov	r0, s15
 800d100:	f7f3 fa22 	bl	8000548 <__aeabi_f2d>
 800d104:	ec41 0b10 	vmov	d0, r0, r1
 800d108:	f009 fd0a 	bl	8016b20 <ceil>
 800d10c:	ec51 0b10 	vmov	r0, r1, d0
 800d110:	f7f3 fd6a 	bl	8000be8 <__aeabi_d2f>
 800d114:	ee0c 0a10 	vmov	s24, r0
 800d118:	9b06      	ldr	r3, [sp, #24]
 800d11a:	ed8d ca45 	vstr	s24, [sp, #276]	; 0x114
 800d11e:	f893 04b1 	ldrb.w	r0, [r3, #1201]	; 0x4b1
 800d122:	1e43      	subs	r3, r0, #1
 800d124:	b25b      	sxtb	r3, r3
 800d126:	2b00      	cmp	r3, #0
 800d128:	dd18      	ble.n	800d15c <iNemoEngine_API_Update+0x96c>
 800d12a:	9c06      	ldr	r4, [sp, #24]
 800d12c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d130:	1e81      	subs	r1, r0, #2
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	b2c9      	uxtb	r1, r1
 800d136:	f504 6294 	add.w	r2, r4, #1184	; 0x4a0
 800d13a:	441a      	add	r2, r3
 800d13c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d140:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 800d144:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 800d148:	4423      	add	r3, r4
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	60da      	str	r2, [r3, #12]
 800d14e:	685a      	ldr	r2, [r3, #4]
 800d150:	611a      	str	r2, [r3, #16]
 800d152:	689a      	ldr	r2, [r3, #8]
 800d154:	615a      	str	r2, [r3, #20]
 800d156:	3b0c      	subs	r3, #12
 800d158:	428b      	cmp	r3, r1
 800d15a:	d1f6      	bne.n	800d14a <iNemoEngine_API_Update+0x95a>
 800d15c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d160:	edc5 8a00 	vstr	s17, [r5]
 800d164:	eec7 8aaf 	vdiv.f32	s17, s15, s31
 800d168:	9a06      	ldr	r2, [sp, #24]
 800d16a:	f202 43bc 	addw	r3, r2, #1212	; 0x4bc
 800d16e:	ed83 8a00 	vstr	s16, [r3]
 800d172:	f502 6398 	add.w	r3, r2, #1216	; 0x4c0
 800d176:	ed83 ca00 	vstr	s24, [r3]
 800d17a:	f892 34b0 	ldrb.w	r3, [r2, #1200]	; 0x4b0
 800d17e:	ed5f 7a4e 	vldr	s15, [pc, #-312]	; 800d048 <iNemoEngine_API_Update+0x858>
 800d182:	ee2a 8aa8 	vmul.f32	s16, s21, s17
 800d186:	3301      	adds	r3, #1
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	eeb0 7ac8 	vabs.f32	s14, s16
 800d18e:	4298      	cmp	r0, r3
 800d190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d194:	bf28      	it	cs
 800d196:	4618      	movcs	r0, r3
 800d198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d19c:	ee2a ca28 	vmul.f32	s24, s20, s17
 800d1a0:	f882 04b0 	strb.w	r0, [r2, #1200]	; 0x4b0
 800d1a4:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800d1a8:	d51f      	bpl.n	800d1ea <iNemoEngine_API_Update+0x9fa>
 800d1aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d1ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1b6:	f281 87cb 	bge.w	800f150 <iNemoEngine_API_Update+0x2960>
 800d1ba:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d1be:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800d1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c6:	f303 8000 	bgt.w	80101ca <iNemoEngine_API_Update+0x39da>
 800d1ca:	ee78 7a67 	vsub.f32	s15, s16, s15
 800d1ce:	ee17 0a90 	vmov	r0, s15
 800d1d2:	f7f3 f9b9 	bl	8000548 <__aeabi_f2d>
 800d1d6:	ec41 0b10 	vmov	d0, r0, r1
 800d1da:	f009 fca1 	bl	8016b20 <ceil>
 800d1de:	ec51 0b10 	vmov	r0, r1, d0
 800d1e2:	f7f3 fd01 	bl	8000be8 <__aeabi_d2f>
 800d1e6:	ee08 0a10 	vmov	s16, r0
 800d1ea:	ed5f 7a69 	vldr	s15, [pc, #-420]	; 800d048 <iNemoEngine_API_Update+0x858>
 800d1ee:	ed8d 8a43 	vstr	s16, [sp, #268]	; 0x10c
 800d1f2:	eeb0 7acc 	vabs.f32	s14, s24
 800d1f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1fe:	d51f      	bpl.n	800d240 <iNemoEngine_API_Update+0xa50>
 800d200:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d204:	eeb4 cae7 	vcmpe.f32	s24, s15
 800d208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d20c:	f281 878e 	bge.w	800f12c <iNemoEngine_API_Update+0x293c>
 800d210:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d214:	eeb4 cac7 	vcmpe.f32	s24, s14
 800d218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21c:	f302 87cd 	bgt.w	80101ba <iNemoEngine_API_Update+0x39ca>
 800d220:	ee7c 7a67 	vsub.f32	s15, s24, s15
 800d224:	ee17 0a90 	vmov	r0, s15
 800d228:	f7f3 f98e 	bl	8000548 <__aeabi_f2d>
 800d22c:	ec41 0b10 	vmov	d0, r0, r1
 800d230:	f009 fc76 	bl	8016b20 <ceil>
 800d234:	ec51 0b10 	vmov	r0, r1, d0
 800d238:	f7f3 fcd6 	bl	8000be8 <__aeabi_d2f>
 800d23c:	ee0c 0a10 	vmov	s24, r0
 800d240:	ed5f 7a7f 	vldr	s15, [pc, #-508]	; 800d048 <iNemoEngine_API_Update+0x858>
 800d244:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 800d248:	eeb0 7ae8 	vabs.f32	s14, s17
 800d24c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d254:	d51f      	bpl.n	800d296 <iNemoEngine_API_Update+0xaa6>
 800d256:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d25a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d262:	f281 8751 	bge.w	800f108 <iNemoEngine_API_Update+0x2918>
 800d266:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d26a:	eef4 8ac7 	vcmpe.f32	s17, s14
 800d26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d272:	f302 878e 	bgt.w	8010192 <iNemoEngine_API_Update+0x39a2>
 800d276:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800d27a:	ee17 0a90 	vmov	r0, s15
 800d27e:	f7f3 f963 	bl	8000548 <__aeabi_f2d>
 800d282:	ec41 0b10 	vmov	d0, r0, r1
 800d286:	f009 fc4b 	bl	8016b20 <ceil>
 800d28a:	ec51 0b10 	vmov	r0, r1, d0
 800d28e:	f7f3 fcab 	bl	8000be8 <__aeabi_d2f>
 800d292:	ee08 0a90 	vmov	s17, r0
 800d296:	9b06      	ldr	r3, [sp, #24]
 800d298:	edcd 8a45 	vstr	s17, [sp, #276]	; 0x114
 800d29c:	f893 0621 	ldrb.w	r0, [r3, #1569]	; 0x621
 800d2a0:	1e43      	subs	r3, r0, #1
 800d2a2:	b25b      	sxtb	r3, r3
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	dd18      	ble.n	800d2da <iNemoEngine_API_Update+0xaea>
 800d2a8:	9c06      	ldr	r4, [sp, #24]
 800d2aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d2ae:	1e81      	subs	r1, r0, #2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	b2c9      	uxtb	r1, r1
 800d2b4:	f504 62c2 	add.w	r2, r4, #1552	; 0x610
 800d2b8:	441a      	add	r2, r3
 800d2ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d2be:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 800d2c2:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 800d2c6:	4423      	add	r3, r4
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	60da      	str	r2, [r3, #12]
 800d2cc:	685a      	ldr	r2, [r3, #4]
 800d2ce:	611a      	str	r2, [r3, #16]
 800d2d0:	689a      	ldr	r2, [r3, #8]
 800d2d2:	615a      	str	r2, [r3, #20]
 800d2d4:	3b0c      	subs	r3, #12
 800d2d6:	4299      	cmp	r1, r3
 800d2d8:	d1f6      	bne.n	800d2c8 <iNemoEngine_API_Update+0xad8>
 800d2da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d2de:	ed86 8a00 	vstr	s16, [r6]
 800d2e2:	ee87 8a8f 	vdiv.f32	s16, s15, s30
 800d2e6:	9a06      	ldr	r2, [sp, #24]
 800d2e8:	f202 632c 	addw	r3, r2, #1580	; 0x62c
 800d2ec:	ed83 ca00 	vstr	s24, [r3]
 800d2f0:	f502 63c6 	add.w	r3, r2, #1584	; 0x630
 800d2f4:	edc3 8a00 	vstr	s17, [r3]
 800d2f8:	f892 3620 	ldrb.w	r3, [r2, #1568]	; 0x620
 800d2fc:	ed5f 7aae 	vldr	s15, [pc, #-696]	; 800d048 <iNemoEngine_API_Update+0x858>
 800d300:	ee68 8a0e 	vmul.f32	s17, s16, s28
 800d304:	3301      	adds	r3, #1
 800d306:	b2db      	uxtb	r3, r3
 800d308:	eeb0 7ae8 	vabs.f32	s14, s17
 800d30c:	4298      	cmp	r0, r3
 800d30e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d312:	bf28      	it	cs
 800d314:	4618      	movcs	r0, r3
 800d316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d31a:	ee28 ca2e 	vmul.f32	s24, s16, s29
 800d31e:	f882 0620 	strb.w	r0, [r2, #1568]	; 0x620
 800d322:	ee28 8a2b 	vmul.f32	s16, s16, s23
 800d326:	d51f      	bpl.n	800d368 <iNemoEngine_API_Update+0xb78>
 800d328:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d32c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d334:	f281 86d6 	bge.w	800f0e4 <iNemoEngine_API_Update+0x28f4>
 800d338:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d33c:	eef4 8ac7 	vcmpe.f32	s17, s14
 800d340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d344:	f302 8745 	bgt.w	80101d2 <iNemoEngine_API_Update+0x39e2>
 800d348:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800d34c:	ee17 0a90 	vmov	r0, s15
 800d350:	f7f3 f8fa 	bl	8000548 <__aeabi_f2d>
 800d354:	ec41 0b10 	vmov	d0, r0, r1
 800d358:	f009 fbe2 	bl	8016b20 <ceil>
 800d35c:	ec51 0b10 	vmov	r0, r1, d0
 800d360:	f7f3 fc42 	bl	8000be8 <__aeabi_d2f>
 800d364:	ee08 0a90 	vmov	s17, r0
 800d368:	ed5f 7ac9 	vldr	s15, [pc, #-804]	; 800d048 <iNemoEngine_API_Update+0x858>
 800d36c:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 800d370:	eeb0 7acc 	vabs.f32	s14, s24
 800d374:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d37c:	d51f      	bpl.n	800d3be <iNemoEngine_API_Update+0xbce>
 800d37e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d382:	eeb4 cae7 	vcmpe.f32	s24, s15
 800d386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d38a:	f281 871d 	bge.w	800f1c8 <iNemoEngine_API_Update+0x29d8>
 800d38e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d392:	eeb4 cac7 	vcmpe.f32	s24, s14
 800d396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d39a:	f302 86fe 	bgt.w	801019a <iNemoEngine_API_Update+0x39aa>
 800d39e:	ee7c 7a67 	vsub.f32	s15, s24, s15
 800d3a2:	ee17 0a90 	vmov	r0, s15
 800d3a6:	f7f3 f8cf 	bl	8000548 <__aeabi_f2d>
 800d3aa:	ec41 0b10 	vmov	d0, r0, r1
 800d3ae:	f009 fbb7 	bl	8016b20 <ceil>
 800d3b2:	ec51 0b10 	vmov	r0, r1, d0
 800d3b6:	f7f3 fc17 	bl	8000be8 <__aeabi_d2f>
 800d3ba:	ee0c 0a10 	vmov	s24, r0
 800d3be:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800d048 <iNemoEngine_API_Update+0x858>
 800d3c2:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 800d3c6:	eeb0 7ac8 	vabs.f32	s14, s16
 800d3ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d2:	d51f      	bpl.n	800d414 <iNemoEngine_API_Update+0xc24>
 800d3d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d3d8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3e0:	f281 86c8 	bge.w	800f174 <iNemoEngine_API_Update+0x2984>
 800d3e4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d3e8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800d3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f0:	f302 86df 	bgt.w	80101b2 <iNemoEngine_API_Update+0x39c2>
 800d3f4:	ee78 7a67 	vsub.f32	s15, s16, s15
 800d3f8:	ee17 0a90 	vmov	r0, s15
 800d3fc:	f7f3 f8a4 	bl	8000548 <__aeabi_f2d>
 800d400:	ec41 0b10 	vmov	d0, r0, r1
 800d404:	f009 fb8c 	bl	8016b20 <ceil>
 800d408:	ec51 0b10 	vmov	r0, r1, d0
 800d40c:	f7f3 fbec 	bl	8000be8 <__aeabi_d2f>
 800d410:	ee08 0a10 	vmov	s16, r0
 800d414:	9b06      	ldr	r3, [sp, #24]
 800d416:	ed8d 8a45 	vstr	s16, [sp, #276]	; 0x114
 800d41a:	f893 0791 	ldrb.w	r0, [r3, #1937]	; 0x791
 800d41e:	1e43      	subs	r3, r0, #1
 800d420:	b25b      	sxtb	r3, r3
 800d422:	2b00      	cmp	r3, #0
 800d424:	dd18      	ble.n	800d458 <iNemoEngine_API_Update+0xc68>
 800d426:	9c06      	ldr	r4, [sp, #24]
 800d428:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d42c:	1e81      	subs	r1, r0, #2
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	b2c9      	uxtb	r1, r1
 800d432:	f504 62f0 	add.w	r2, r4, #1920	; 0x780
 800d436:	441a      	add	r2, r3
 800d438:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d43c:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 800d440:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 800d444:	4423      	add	r3, r4
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	60da      	str	r2, [r3, #12]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	611a      	str	r2, [r3, #16]
 800d44e:	689a      	ldr	r2, [r3, #8]
 800d450:	615a      	str	r2, [r3, #20]
 800d452:	3b0c      	subs	r3, #12
 800d454:	428b      	cmp	r3, r1
 800d456:	d1f6      	bne.n	800d446 <iNemoEngine_API_Update+0xc56>
 800d458:	9c06      	ldr	r4, [sp, #24]
 800d45a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d45c:	f204 729c 	addw	r2, r4, #1948	; 0x79c
 800d460:	edc3 8a00 	vstr	s17, [r3]
 800d464:	922e      	str	r2, [sp, #184]	; 0xb8
 800d466:	ed82 ca00 	vstr	s24, [r2]
 800d46a:	f504 62f4 	add.w	r2, r4, #1952	; 0x7a0
 800d46e:	ed82 8a00 	vstr	s16, [r2]
 800d472:	f894 3790 	ldrb.w	r3, [r4, #1936]	; 0x790
 800d476:	922f      	str	r2, [sp, #188]	; 0xbc
 800d478:	3301      	adds	r3, #1
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	4298      	cmp	r0, r3
 800d47e:	bf28      	it	cs
 800d480:	4618      	movcs	r0, r3
 800d482:	f884 0790 	strb.w	r0, [r4, #1936]	; 0x790
 800d486:	aa68      	add	r2, sp, #416	; 0x1a0
 800d488:	a93d      	add	r1, sp, #244	; 0xf4
 800d48a:	a840      	add	r0, sp, #256	; 0x100
 800d48c:	f7fd fe26 	bl	800b0dc <getRotationMatrix>
 800d490:	4623      	mov	r3, r4
 800d492:	f504 7247 	add.w	r2, r4, #796	; 0x31c
 800d496:	9229      	str	r2, [sp, #164]	; 0xa4
 800d498:	4614      	mov	r4, r2
 800d49a:	aeae      	add	r6, sp, #696	; 0x2b8
 800d49c:	f503 774f 	add.w	r7, r3, #828	; 0x33c
 800d4a0:	6820      	ldr	r0, [r4, #0]
 800d4a2:	6861      	ldr	r1, [r4, #4]
 800d4a4:	68a2      	ldr	r2, [r4, #8]
 800d4a6:	68e3      	ldr	r3, [r4, #12]
 800d4a8:	4635      	mov	r5, r6
 800d4aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d4ac:	3410      	adds	r4, #16
 800d4ae:	42bc      	cmp	r4, r7
 800d4b0:	462e      	mov	r6, r5
 800d4b2:	d1f5      	bne.n	800d4a0 <iNemoEngine_API_Update+0xcb0>
 800d4b4:	6820      	ldr	r0, [r4, #0]
 800d4b6:	6028      	str	r0, [r5, #0]
 800d4b8:	9b06      	ldr	r3, [sp, #24]
 800d4ba:	edd3 7ac7 	vldr	s15, [r3, #796]	; 0x31c
 800d4be:	ed93 7ac8 	vldr	s14, [r3, #800]	; 0x320
 800d4c2:	eef0 7ae7 	vabs.f32	s15, s15
 800d4c6:	eeb0 7ac7 	vabs.f32	s14, s14
 800d4ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d2:	f140 8543 	bpl.w	800df5c <iNemoEngine_API_Update+0x176c>
 800d4d6:	2604      	movs	r6, #4
 800d4d8:	2400      	movs	r4, #0
 800d4da:	eef0 7a47 	vmov.f32	s15, s14
 800d4de:	f04f 0c07 	mov.w	ip, #7
 800d4e2:	f04f 0e06 	mov.w	lr, #6
 800d4e6:	2103      	movs	r1, #3
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	4623      	mov	r3, r4
 800d4ec:	2701      	movs	r7, #1
 800d4ee:	9a06      	ldr	r2, [sp, #24]
 800d4f0:	ed92 7ac9 	vldr	s14, [r2, #804]	; 0x324
 800d4f4:	eeb0 7ac7 	vabs.f32	s14, s14
 800d4f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d500:	f340 8525 	ble.w	800df4e <iNemoEngine_API_Update+0x175e>
 800d504:	f04f 0c08 	mov.w	ip, #8
 800d508:	2104      	movs	r1, #4
 800d50a:	f04f 0906 	mov.w	r9, #6
 800d50e:	f04f 0e07 	mov.w	lr, #7
 800d512:	f04f 0803 	mov.w	r8, #3
 800d516:	2605      	movs	r6, #5
 800d518:	4660      	mov	r0, ip
 800d51a:	460c      	mov	r4, r1
 800d51c:	2200      	movs	r2, #0
 800d51e:	2301      	movs	r3, #1
 800d520:	2702      	movs	r7, #2
 800d522:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 800d524:	442c      	add	r4, r5
 800d526:	4428      	add	r0, r5
 800d528:	ed90 7a00 	vldr	s14, [r0]
 800d52c:	edd4 6a00 	vldr	s13, [r4]
 800d530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d534:	a8ae      	add	r0, sp, #696	; 0x2b8
 800d536:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d53a:	acae      	add	r4, sp, #696	; 0x2b8
 800d53c:	adae      	add	r5, sp, #696	; 0x2b8
 800d53e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800d542:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800d546:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 800d54a:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800d54e:	edc0 7a00 	vstr	s15, [r0]
 800d552:	edd5 7a00 	vldr	s15, [r5]
 800d556:	ed94 7a00 	vldr	s14, [r4]
 800d55a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d55e:	edc4 6a00 	vstr	s13, [r4]
 800d562:	ed90 6a00 	vldr	s12, [r0]
 800d566:	a8ae      	add	r0, sp, #696	; 0x2b8
 800d568:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800d56c:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800d570:	ed90 7a00 	vldr	s14, [r0]
 800d574:	edd5 7a00 	vldr	s15, [r5]
 800d578:	eee6 7a47 	vfms.f32	s15, s12, s14
 800d57c:	00b4      	lsls	r4, r6, #2
 800d57e:	9403      	str	r4, [sp, #12]
 800d580:	ea4f 048c 	mov.w	r4, ip, lsl #2
 800d584:	edc5 7a00 	vstr	s15, [r5]
 800d588:	ed90 7a00 	vldr	s14, [r0]
 800d58c:	a8ae      	add	r0, sp, #696	; 0x2b8
 800d58e:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 800d592:	edd0 7a00 	vldr	s15, [r0]
 800d596:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d59a:	4626      	mov	r6, r4
 800d59c:	acae      	add	r4, sp, #696	; 0x2b8
 800d59e:	eb04 048e 	add.w	r4, r4, lr, lsl #2
 800d5a2:	edc0 7a00 	vstr	s15, [r0]
 800d5a6:	a8ae      	add	r0, sp, #696	; 0x2b8
 800d5a8:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800d5ac:	edd0 5a00 	vldr	s11, [r0]
 800d5b0:	ed94 7a00 	vldr	s14, [r4]
 800d5b4:	eea6 7a65 	vfms.f32	s14, s12, s11
 800d5b8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800d5bc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d5c0:	eef0 7ae7 	vabs.f32	s15, s15
 800d5c4:	ed84 7a00 	vstr	s14, [r4]
 800d5c8:	ed90 6a00 	vldr	s12, [r0]
 800d5cc:	a8ae      	add	r0, sp, #696	; 0x2b8
 800d5ce:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 800d5d2:	ed90 7a00 	vldr	s14, [r0]
 800d5d6:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800d5da:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800d5de:	ea4f 048e 	mov.w	r4, lr, lsl #2
 800d5e2:	ed80 7a00 	vstr	s14, [r0]
 800d5e6:	ed95 7a00 	vldr	s14, [r5]
 800d5ea:	eeb0 7ac7 	vabs.f32	s14, s14
 800d5ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5f6:	ea4f 0581 	mov.w	r5, r1, lsl #2
 800d5fa:	dd0b      	ble.n	800d614 <iNemoEngine_API_Update+0xe24>
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	4645      	mov	r5, r8
 800d600:	4613      	mov	r3, r2
 800d602:	464c      	mov	r4, r9
 800d604:	46d4      	mov	ip, sl
 800d606:	4602      	mov	r2, r0
 800d608:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800d60c:	ea4f 098e 	mov.w	r9, lr, lsl #2
 800d610:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 800d614:	a9ae      	add	r1, sp, #696	; 0x2b8
 800d616:	eb01 0008 	add.w	r0, r1, r8
 800d61a:	440d      	add	r5, r1
 800d61c:	ed90 7a00 	vldr	s14, [r0]
 800d620:	edd5 7a00 	vldr	s15, [r5]
 800d624:	ee87 4a27 	vdiv.f32	s8, s14, s15
 800d628:	440c      	add	r4, r1
 800d62a:	eb01 0809 	add.w	r8, r1, r9
 800d62e:	440e      	add	r6, r1
 800d630:	46b6      	mov	lr, r6
 800d632:	460e      	mov	r6, r1
 800d634:	9903      	ldr	r1, [sp, #12]
 800d636:	4431      	add	r1, r6
 800d638:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800d63c:	ed80 4a00 	vstr	s8, [r0]
 800d640:	ed94 7a00 	vldr	s14, [r4]
 800d644:	edd8 7a00 	vldr	s15, [r8]
 800d648:	eee4 7a47 	vfms.f32	s15, s8, s14
 800d64c:	a8ae      	add	r0, sp, #696	; 0x2b8
 800d64e:	edc8 7a00 	vstr	s15, [r8]
 800d652:	edd1 2a00 	vldr	s5, [r1]
 800d656:	ed95 7a00 	vldr	s14, [r5]
 800d65a:	ed94 1a00 	vldr	s2, [r4]
 800d65e:	edde 1a00 	vldr	s3, [lr]
 800d662:	f50b 61b2 	add.w	r1, fp, #1424	; 0x590
 800d666:	4469      	add	r1, sp
 800d668:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 800d66c:	ee83 2a87 	vdiv.f32	s4, s7, s14
 800d670:	ed91 7a00 	vldr	s14, [r1]
 800d674:	a9ae      	add	r1, sp, #696	; 0x2b8
 800d676:	448b      	add	fp, r1
 800d678:	f50c 61b2 	add.w	r1, ip, #1424	; 0x590
 800d67c:	eec3 0aa7 	vdiv.f32	s1, s7, s15
 800d680:	4469      	add	r1, sp
 800d682:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 800d686:	4484      	add	ip, r0
 800d688:	4450      	add	r0, sl
 800d68a:	edd1 6a00 	vldr	s13, [r1]
 800d68e:	eddb 7a00 	vldr	s15, [fp]
 800d692:	ed90 0a00 	vldr	s0, [r0]
 800d696:	f50a 61b2 	add.w	r1, sl, #1424	; 0x590
 800d69a:	4469      	add	r1, sp
 800d69c:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 800d6a0:	ee83 3aa7 	vdiv.f32	s6, s7, s15
 800d6a4:	edd1 4a00 	vldr	s9, [r1]
 800d6a8:	eddc 7a00 	vldr	s15, [ip]
 800d6ac:	eee0 4a47 	vfms.f32	s9, s0, s14
 800d6b0:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 800d6b4:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800d6b8:	eee7 6ac7 	vfms.f32	s13, s15, s14
 800d6bc:	4601      	mov	r1, r0
 800d6be:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 800d6c2:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 800d6c6:	eee4 4a66 	vfms.f32	s9, s8, s13
 800d6ca:	ed90 5a00 	vldr	s10, [r0]
 800d6ce:	ee60 4aa4 	vmul.f32	s9, s1, s9
 800d6d2:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 800d6d6:	eee1 6a64 	vfms.f32	s13, s2, s9
 800d6da:	eea1 7ae4 	vfms.f32	s14, s3, s9
 800d6de:	ee62 8a26 	vmul.f32	s17, s4, s13
 800d6e2:	edd1 6a00 	vldr	s13, [r1]
 800d6e6:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 800d6ea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800d6f4:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 800d6f8:	edd1 5a00 	vldr	s11, [r1]
 800d6fc:	ed93 8a00 	vldr	s16, [r3]
 800d700:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800d704:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 800d708:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 800d70c:	eee7 5ac5 	vfms.f32	s11, s15, s10
 800d710:	eea6 8ae7 	vfms.f32	s16, s13, s15
 800d714:	ed92 6a00 	vldr	s12, [r2]
 800d718:	edd3 7a00 	vldr	s15, [r3]
 800d71c:	eea0 6a45 	vfms.f32	s12, s0, s10
 800d720:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800d724:	eea4 6a65 	vfms.f32	s12, s8, s11
 800d728:	eee4 7a48 	vfms.f32	s15, s8, s16
 800d72c:	ee20 6a86 	vmul.f32	s12, s1, s12
 800d730:	ee67 7aa0 	vmul.f32	s15, s15, s1
 800d734:	eee1 5a46 	vfms.f32	s11, s2, s12
 800d738:	eea7 8ac1 	vfms.f32	s16, s15, s2
 800d73c:	eea1 5ac6 	vfms.f32	s10, s3, s12
 800d740:	eee7 6ae1 	vfms.f32	s13, s15, s3
 800d744:	ee62 5a25 	vmul.f32	s11, s4, s11
 800d748:	ee28 2a02 	vmul.f32	s4, s16, s4
 800d74c:	eea2 7ae8 	vfms.f32	s14, s5, s17
 800d750:	eee2 6a62 	vfms.f32	s13, s4, s5
 800d754:	eea2 5ae5 	vfms.f32	s10, s5, s11
 800d758:	ee23 7a07 	vmul.f32	s14, s6, s14
 800d75c:	ee23 5a05 	vmul.f32	s10, s6, s10
 800d760:	ee26 3a83 	vmul.f32	s6, s13, s6
 800d764:	ee77 6aa5 	vadd.f32	s13, s15, s11
 800d768:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 800d76c:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d770:	ee36 6a42 	vsub.f32	s12, s12, s4
 800d774:	eef4 6ac4 	vcmpe.f32	s13, s8
 800d778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d77c:	bfc8      	it	gt
 800d77e:	ee76 6aa3 	vaddgt.f32	s13, s13, s7
 800d782:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800d786:	bfcc      	ite	gt
 800d788:	eeb1 4ae6 	vsqrtgt.f32	s8, s13
 800d78c:	ed9f 4ad7 	vldrle	s8, [pc, #860]	; 800daec <iNemoEngine_API_Update+0x12fc>
 800d790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d794:	f100 8411 	bmi.w	800dfba <iNemoEngine_API_Update+0x17ca>
 800d798:	bfd8      	it	le
 800d79a:	ee24 4a06 	vmulle.f32	s8, s8, s12
 800d79e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d7a2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d7a6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800d7aa:	ee24 6a06 	vmul.f32	s12, s8, s12
 800d7ae:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 800d7b2:	eef4 6ac4 	vcmpe.f32	s13, s8
 800d7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ba:	bf88      	it	hi
 800d7bc:	eeb7 4a00 	vmovhi.f32	s8, #112	; 0x3f800000  1.0
 800d7c0:	ee33 3a64 	vsub.f32	s6, s6, s9
 800d7c4:	bf88      	it	hi
 800d7c6:	ee36 4a84 	vaddhi.f32	s8, s13, s8
 800d7ca:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 800d7ce:	bf8c      	ite	hi
 800d7d0:	eef1 6ac4 	vsqrthi.f32	s13, s8
 800d7d4:	eddf 6ac5 	vldrls	s13, [pc, #788]	; 800daec <iNemoEngine_API_Update+0x12fc>
 800d7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7dc:	f100 83ea 	bmi.w	800dfb4 <iNemoEngine_API_Update+0x17c4>
 800d7e0:	bfd8      	it	le
 800d7e2:	ee66 6a83 	vmulle.f32	s13, s13, s6
 800d7e6:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d7ea:	ee38 5ac5 	vsub.f32	s10, s17, s10
 800d7ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d7f6:	ee66 6a87 	vmul.f32	s13, s13, s14
 800d7fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d7fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d806:	bf84      	itt	hi
 800d808:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800d80c:	ee37 7a87 	vaddhi.f32	s14, s15, s14
 800d810:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800d814:	bf8c      	ite	hi
 800d816:	eef1 7ac7 	vsqrthi.f32	s15, s14
 800d81a:	eddf 7ab4 	vldrls	s15, [pc, #720]	; 800daec <iNemoEngine_API_Update+0x12fc>
 800d81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d822:	f100 83ce 	bmi.w	800dfc2 <iNemoEngine_API_Update+0x17d2>
 800d826:	bfd8      	it	le
 800d828:	ee67 7a85 	vmulle.f32	s15, s15, s10
 800d82c:	9b06      	ldr	r3, [sp, #24]
 800d82e:	f893 2341 	ldrb.w	r2, [r3, #833]	; 0x341
 800d832:	1e53      	subs	r3, r2, #1
 800d834:	b25b      	sxtb	r3, r3
 800d836:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d840:	dd1d      	ble.n	800d87e <iNemoEngine_API_Update+0x108e>
 800d842:	9806      	ldr	r0, [sp, #24]
 800d844:	3a02      	subs	r2, #2
 800d846:	b2d1      	uxtb	r1, r2
 800d848:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d84c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800d850:	f1a0 010c 	sub.w	r1, r0, #12
 800d854:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800d858:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 800d85c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d860:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800d864:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800d868:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800d86c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 800d870:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800d874:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800d878:	3b0c      	subs	r3, #12
 800d87a:	428b      	cmp	r3, r1
 800d87c:	d1f0      	bne.n	800d860 <iNemoEngine_API_Update+0x1070>
 800d87e:	ed9d 7a07 	vldr	s14, [sp, #28]
 800d882:	9b06      	ldr	r3, [sp, #24]
 800d884:	9310      	str	r3, [sp, #64]	; 0x40
 800d886:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d88a:	ee85 7a87 	vdiv.f32	s14, s11, s14
 800d88e:	aa3d      	add	r2, sp, #244	; 0xf4
 800d890:	922b      	str	r2, [sp, #172]	; 0xac
 800d892:	9212      	str	r2, [sp, #72]	; 0x48
 800d894:	f50d 7be2 	add.w	fp, sp, #452	; 0x1c4
 800d898:	f50d 7af4 	add.w	sl, sp, #488	; 0x1e8
 800d89c:	ee36 6a06 	vadd.f32	s12, s12, s12
 800d8a0:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800d8a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d8a8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d8ac:	ee66 6a87 	vmul.f32	s13, s13, s14
 800d8b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d8b4:	ed83 6ad2 	vstr	s12, [r3, #840]	; 0x348
 800d8b8:	edc3 6ad3 	vstr	s13, [r3, #844]	; 0x34c
 800d8bc:	edc3 7ad4 	vstr	s15, [r3, #848]	; 0x350
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	930e      	str	r3, [sp, #56]	; 0x38
 800d8c4:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 800d8c8:	f1c3 0301 	rsb	r3, r3, #1
 800d8cc:	9328      	str	r3, [sp, #160]	; 0xa0
 800d8ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d8d2:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	930e      	str	r3, [sp, #56]	; 0x38
 800d8d8:	a9ae      	add	r1, sp, #696	; 0x2b8
 800d8da:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 800d8de:	18e0      	adds	r0, r4, r3
 800d8e0:	f803 0f01 	strb.w	r0, [r3, #1]!
 800d8e4:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 800d8e8:	f841 0b04 	str.w	r0, [r1], #4
 800d8ec:	f20d 10e1 	addw	r0, sp, #481	; 0x1e1
 800d8f0:	4283      	cmp	r3, r0
 800d8f2:	f102 020c 	add.w	r2, r2, #12
 800d8f6:	d1f2      	bne.n	800d8de <iNemoEngine_API_Update+0x10ee>
 800d8f8:	ed9d 7aae 	vldr	s14, [sp, #696]	; 0x2b8
 800d8fc:	eddd 7aaf 	vldr	s15, [sp, #700]	; 0x2bc
 800d900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d904:	ed9d 7ab0 	vldr	s14, [sp, #704]	; 0x2c0
 800d908:	eddd 7ab1 	vldr	s15, [sp, #708]	; 0x2c4
 800d90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d910:	bf88      	it	hi
 800d912:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800d916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d91a:	ed9d 7ab2 	vldr	s14, [sp, #712]	; 0x2c8
 800d91e:	eddd 7ab3 	vldr	s15, [sp, #716]	; 0x2cc
 800d922:	bf88      	it	hi
 800d924:	f8ab 3000 	strhhi.w	r3, [fp]
 800d928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d92c:	bf88      	it	hi
 800d92e:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800d932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d936:	ed9d 7ab4 	vldr	s14, [sp, #720]	; 0x2d0
 800d93a:	eddd 7ab5 	vldr	s15, [sp, #724]	; 0x2d4
 800d93e:	bf88      	it	hi
 800d940:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 800d944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d948:	bf88      	it	hi
 800d94a:	f240 5306 	movwhi	r3, #1286	; 0x506
 800d94e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d952:	ed9d 7ab6 	vldr	s14, [sp, #728]	; 0x2d8
 800d956:	eddd 7ab7 	vldr	s15, [sp, #732]	; 0x2dc
 800d95a:	bf88      	it	hi
 800d95c:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 800d960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d964:	bf88      	it	hi
 800d966:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800d96a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d96e:	ed9d 7ab8 	vldr	s14, [sp, #736]	; 0x2e0
 800d972:	eddd 7ab9 	vldr	s15, [sp, #740]	; 0x2e4
 800d976:	bf88      	it	hi
 800d978:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 800d97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d980:	bf88      	it	hi
 800d982:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800d986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d98a:	ed9d 7aba 	vldr	s14, [sp, #744]	; 0x2e8
 800d98e:	eddd 7abb 	vldr	s15, [sp, #748]	; 0x2ec
 800d992:	bf88      	it	hi
 800d994:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 800d998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d99c:	bf88      	it	hi
 800d99e:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800d9a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9a6:	ed9d 7abc 	vldr	s14, [sp, #752]	; 0x2f0
 800d9aa:	eddd 7abd 	vldr	s15, [sp, #756]	; 0x2f4
 800d9ae:	bf88      	it	hi
 800d9b0:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 800d9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9b8:	bf88      	it	hi
 800d9ba:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800d9be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9c2:	ed9d 7abe 	vldr	s14, [sp, #760]	; 0x2f8
 800d9c6:	eddd 7abf 	vldr	s15, [sp, #764]	; 0x2fc
 800d9ca:	bf88      	it	hi
 800d9cc:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 800d9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d4:	bf88      	it	hi
 800d9d6:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800d9da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9de:	ed9d 7ac0 	vldr	s14, [sp, #768]	; 0x300
 800d9e2:	eddd 7ac1 	vldr	s15, [sp, #772]	; 0x304
 800d9e6:	bf88      	it	hi
 800d9e8:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 800d9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9f0:	bf88      	it	hi
 800d9f2:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800d9f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9fa:	ed9d 7ac2 	vldr	s14, [sp, #776]	; 0x308
 800d9fe:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 800da02:	bf88      	it	hi
 800da04:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 800da08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da0c:	bf88      	it	hi
 800da0e:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800da12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da16:	bf88      	it	hi
 800da18:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 800da1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da20:	bf84      	itt	hi
 800da22:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800da26:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 800da2a:	ed9d 7ac4 	vldr	s14, [sp, #784]	; 0x310
 800da2e:	eddd 7ac5 	vldr	s15, [sp, #788]	; 0x314
 800da32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da36:	ed9d 7ac6 	vldr	s14, [sp, #792]	; 0x318
 800da3a:	eddd 7ac7 	vldr	s15, [sp, #796]	; 0x31c
 800da3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da42:	bf88      	it	hi
 800da44:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800da48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da4c:	ed9d 7ac8 	vldr	s14, [sp, #800]	; 0x320
 800da50:	eddd 7ac9 	vldr	s15, [sp, #804]	; 0x324
 800da54:	bf88      	it	hi
 800da56:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 800da5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da5e:	bf88      	it	hi
 800da60:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800da64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da68:	ed9d 7aca 	vldr	s14, [sp, #808]	; 0x328
 800da6c:	eddd 7acb 	vldr	s15, [sp, #812]	; 0x32c
 800da70:	bf88      	it	hi
 800da72:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 800da76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da7a:	bf88      	it	hi
 800da7c:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800da80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da84:	bf88      	it	hi
 800da86:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 800da8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da8e:	bf84      	itt	hi
 800da90:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800da94:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 800da98:	221e      	movs	r2, #30
 800da9a:	2101      	movs	r1, #1
 800da9c:	4650      	mov	r0, sl
 800da9e:	f005 faf3 	bl	8013088 <memset>
 800daa2:	2304      	movs	r3, #4
 800daa4:	930c      	str	r3, [sp, #48]	; 0x30
 800daa6:	2302      	movs	r3, #2
 800daa8:	9307      	str	r3, [sp, #28]
 800daaa:	9a07      	ldr	r2, [sp, #28]
 800daac:	920a      	str	r2, [sp, #40]	; 0x28
 800daae:	4613      	mov	r3, r2
 800dab0:	0052      	lsls	r2, r2, #1
 800dab2:	9207      	str	r2, [sp, #28]
 800dab4:	f103 0901 	add.w	r9, r3, #1
 800dab8:	f04f 0801 	mov.w	r8, #1
 800dabc:	9b07      	ldr	r3, [sp, #28]
 800dabe:	f8cd 800c 	str.w	r8, [sp, #12]
 800dac2:	4443      	add	r3, r8
 800dac4:	2b1f      	cmp	r3, #31
 800dac6:	bfa8      	it	ge
 800dac8:	231f      	movge	r3, #31
 800daca:	4642      	mov	r2, r8
 800dacc:	1a9f      	subs	r7, r3, r2
 800dace:	2f00      	cmp	r7, #0
 800dad0:	4698      	mov	r8, r3
 800dad2:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 800dad6:	dd54      	ble.n	800db82 <iNemoEngine_API_Update+0x1392>
 800dad8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800dadc:	9304      	str	r3, [sp, #16]
 800dade:	f1a8 0302 	sub.w	r3, r8, #2
 800dae2:	4616      	mov	r6, r2
 800dae4:	2400      	movs	r4, #0
 800dae6:	9305      	str	r3, [sp, #20]
 800dae8:	e00f      	b.n	800db0a <iNemoEngine_API_Update+0x131a>
 800daea:	bf00      	nop
 800daec:	00000000 	.word	0x00000000
 800daf0:	3f333333 	.word	0x3f333333
 800daf4:	3f4ccccd 	.word	0x3f4ccccd
 800daf8:	45f0      	cmp	r8, lr
 800dafa:	f80a 2004 	strb.w	r2, [sl, r4]
 800dafe:	f000 81f6 	beq.w	800deee <iNemoEngine_API_Update+0x16fe>
 800db02:	4665      	mov	r5, ip
 800db04:	3401      	adds	r4, #1
 800db06:	42a7      	cmp	r7, r4
 800db08:	dd34      	ble.n	800db74 <iNemoEngine_API_Update+0x1384>
 800db0a:	1e71      	subs	r1, r6, #1
 800db0c:	a8ae      	add	r0, sp, #696	; 0x2b8
 800db0e:	f91b 3001 	ldrsb.w	r3, [fp, r1]
 800db12:	f91b 2005 	ldrsb.w	r2, [fp, r5]
 800db16:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800db1a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800db1e:	a8ae      	add	r0, sp, #696	; 0x2b8
 800db20:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800db24:	ed50 7a01 	vldr	s15, [r0, #-4]
 800db28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db30:	f105 0e02 	add.w	lr, r5, #2
 800db34:	f105 0c01 	add.w	ip, r5, #1
 800db38:	d8de      	bhi.n	800daf8 <iNemoEngine_API_Update+0x1308>
 800db3a:	3601      	adds	r6, #1
 800db3c:	454e      	cmp	r6, r9
 800db3e:	f80a 3004 	strb.w	r3, [sl, r4]
 800db42:	d1df      	bne.n	800db04 <iNemoEngine_API_Update+0x1314>
 800db44:	1c6b      	adds	r3, r5, #1
 800db46:	9a04      	ldr	r2, [sp, #16]
 800db48:	9308      	str	r3, [sp, #32]
 800db4a:	1c60      	adds	r0, r4, #1
 800db4c:	4598      	cmp	r8, r3
 800db4e:	eba2 0205 	sub.w	r2, r2, r5
 800db52:	4450      	add	r0, sl
 800db54:	ddd6      	ble.n	800db04 <iNemoEngine_API_Update+0x1314>
 800db56:	eb0b 0105 	add.w	r1, fp, r5
 800db5a:	f005 facd 	bl	80130f8 <memcpy>
 800db5e:	9a04      	ldr	r2, [sp, #16]
 800db60:	9b05      	ldr	r3, [sp, #20]
 800db62:	4414      	add	r4, r2
 800db64:	1b64      	subs	r4, r4, r5
 800db66:	1b5a      	subs	r2, r3, r5
 800db68:	3401      	adds	r4, #1
 800db6a:	9b08      	ldr	r3, [sp, #32]
 800db6c:	42a7      	cmp	r7, r4
 800db6e:	eb02 0503 	add.w	r5, r2, r3
 800db72:	dcca      	bgt.n	800db0a <iNemoEngine_API_Update+0x131a>
 800db74:	9b03      	ldr	r3, [sp, #12]
 800db76:	1e58      	subs	r0, r3, #1
 800db78:	463a      	mov	r2, r7
 800db7a:	4458      	add	r0, fp
 800db7c:	4651      	mov	r1, sl
 800db7e:	f005 fabb 	bl	80130f8 <memcpy>
 800db82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db84:	eb08 0903 	add.w	r9, r8, r3
 800db88:	f1b9 0f1e 	cmp.w	r9, #30
 800db8c:	dd96      	ble.n	800dabc <iNemoEngine_API_Update+0x12cc>
 800db8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db90:	3b01      	subs	r3, #1
 800db92:	930c      	str	r3, [sp, #48]	; 0x30
 800db94:	d189      	bne.n	800daaa <iNemoEngine_API_Update+0x12ba>
 800db96:	f99b 300e 	ldrsb.w	r3, [fp, #14]
 800db9a:	aaae      	add	r2, sp, #696	; 0x2b8
 800db9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dba0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800dba4:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 800dba8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dbac:	ed13 7a01 	vldr	s14, [r3, #-4]
 800dbb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800dbbc:	bf4c      	ite	mi
 800dbbe:	2201      	movmi	r2, #1
 800dbc0:	2200      	movpl	r2, #0
 800dbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbc6:	bf4c      	ite	mi
 800dbc8:	2301      	movmi	r3, #1
 800dbca:	2300      	movpl	r3, #0
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	f000 819d 	beq.w	800df0c <iNemoEngine_API_Update+0x171c>
 800dbd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dbd6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dbda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dbe0:	ece3 7a01 	vstmia	r3!, {s15}
 800dbe4:	9312      	str	r3, [sp, #72]	; 0x48
 800dbe6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbe8:	3304      	adds	r3, #4
 800dbea:	9310      	str	r3, [sp, #64]	; 0x40
 800dbec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbee:	2b03      	cmp	r3, #3
 800dbf0:	f47f ae6d 	bne.w	800d8ce <iNemoEngine_API_Update+0x10de>
 800dbf4:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 800dbf8:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 800dbfc:	eddd 6a16 	vldr	s13, [sp, #88]	; 0x58
 800dc00:	ed1f 1a45 	vldr	s2, [pc, #-276]	; 800daf0 <iNemoEngine_API_Update+0x1300>
 800dc04:	9a06      	ldr	r2, [sp, #24]
 800dc06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dc0a:	ee2d 1a81 	vmul.f32	s2, s27, s2
 800dc0e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800dc12:	f892 3900 	ldrb.w	r3, [r2, #2304]	; 0x900
 800dc16:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 800dc1a:	eeb0 8a67 	vmov.f32	s16, s15
 800dc1e:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 800dc22:	eea7 8aa7 	vfma.f32	s16, s15, s15
 800dc26:	f502 6810 	add.w	r8, r2, #2304	; 0x900
 800dc2a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800dc2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc32:	eeb1 6ac8 	vsqrt.f32	s12, s16
 800dc36:	eec7 5a0d 	vdiv.f32	s11, s14, s26
 800dc3a:	ee2b 7a27 	vmul.f32	s14, s22, s15
 800dc3e:	ee6d 7aa7 	vmul.f32	s15, s27, s15
 800dc42:	eec7 6a26 	vdiv.f32	s13, s14, s13
 800dc46:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 800dc4a:	edcd 5a52 	vstr	s11, [sp, #328]	; 0x148
 800dc4e:	ee87 5a87 	vdiv.f32	s10, s15, s14
 800dc52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dc56:	eeb0 7a41 	vmov.f32	s14, s2
 800dc5a:	eeab 7a27 	vfma.f32	s14, s22, s15
 800dc5e:	ee26 6a27 	vmul.f32	s12, s12, s15
 800dc62:	ed5f 7a5c 	vldr	s15, [pc, #-368]	; 800daf4 <iNemoEngine_API_Update+0x1304>
 800dc66:	ed8d 7a03 	vstr	s14, [sp, #12]
 800dc6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc6e:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 800dc72:	ed8d 5a54 	vstr	s10, [sp, #336]	; 0x150
 800dc76:	ed8d 6a55 	vstr	s12, [sp, #340]	; 0x154
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f040 8159 	bne.w	800df32 <iNemoEngine_API_Update+0x1742>
 800dc80:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800dc84:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 800dc88:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800dc8c:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 800dc90:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800dc94:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 800dc98:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800dc9c:	f8c8 3020 	str.w	r3, [r8, #32]
 800dca0:	edc8 7a07 	vstr	s15, [r8, #28]
 800dca4:	f602 130c 	addw	r3, r2, #2316	; 0x90c
 800dca8:	edd3 8a00 	vldr	s17, [r3]
 800dcac:	edd2 2a02 	vldr	s5, [r2, #8]
 800dcb0:	f602 1324 	addw	r3, r2, #2340	; 0x924
 800dcb4:	edd3 7a00 	vldr	s15, [r3]
 800dcb8:	f602 1308 	addw	r3, r2, #2312	; 0x908
 800dcbc:	ed93 7a00 	vldr	s14, [r3]
 800dcc0:	f502 6312 	add.w	r3, r2, #2336	; 0x920
 800dcc4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800dcc8:	edd3 7a00 	vldr	s15, [r3]
 800dccc:	f502 6311 	add.w	r3, r2, #2320	; 0x910
 800dcd0:	eee7 8a27 	vfma.f32	s17, s14, s15
 800dcd4:	ed93 7a00 	vldr	s14, [r3]
 800dcd8:	f602 1328 	addw	r3, r2, #2344	; 0x928
 800dcdc:	edd3 7a00 	vldr	s15, [r3]
 800dce0:	f602 1314 	addw	r3, r2, #2324	; 0x914
 800dce4:	eee7 8a27 	vfma.f32	s17, s14, s15
 800dce8:	ed93 7a00 	vldr	s14, [r3]
 800dcec:	f602 132c 	addw	r3, r2, #2348	; 0x92c
 800dcf0:	edd3 7a00 	vldr	s15, [r3]
 800dcf4:	f602 1304 	addw	r3, r2, #2308	; 0x904
 800dcf8:	eee7 8a27 	vfma.f32	s17, s14, s15
 800dcfc:	ed93 7a00 	vldr	s14, [r3]
 800dd00:	f602 131c 	addw	r3, r2, #2332	; 0x91c
 800dd04:	edd3 7a00 	vldr	s15, [r3]
 800dd08:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 800dd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd10:	eee7 8a27 	vfma.f32	s17, s14, s15
 800dd14:	f340 8158 	ble.w	800dfc8 <iNemoEngine_API_Update+0x17d8>
 800dd18:	edd2 7a30 	vldr	s15, [r2, #192]	; 0xc0
 800dd1c:	eef4 7ae8 	vcmpe.f32	s15, s17
 800dd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd24:	f101 8112 	bmi.w	800ef4c <iNemoEngine_API_Update+0x275c>
 800dd28:	ed92 fa31 	vldr	s30, [r2, #196]	; 0xc4
 800dd2c:	4613      	mov	r3, r2
 800dd2e:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 800dd32:	eef4 7ae8 	vcmpe.f32	s15, s17
 800dd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd3a:	f142 8186 	bpl.w	801004a <iNemoEngine_API_Update+0x385a>
 800dd3e:	edd3 4a62 	vldr	s9, [r3, #392]	; 0x188
 800dd42:	eef4 4ae8 	vcmpe.f32	s9, s17
 800dd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd4a:	f342 821e 	ble.w	801018a <iNemoEngine_API_Update+0x399a>
 800dd4e:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 800dd52:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800dd56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd5a:	f302 8555 	bgt.w	8010808 <iNemoEngine_API_Update+0x4018>
 800dd5e:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800dd62:	eef4 8ae7 	vcmpe.f32	s17, s15
 800dd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd6a:	f142 8565 	bpl.w	8010838 <iNemoEngine_API_Update+0x4048>
 800dd6e:	edd3 3a4d 	vldr	s7, [r3, #308]	; 0x134
 800dd72:	ed93 4a4f 	vldr	s8, [r3, #316]	; 0x13c
 800dd76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd7a:	ee34 4a63 	vsub.f32	s8, s8, s7
 800dd7e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800dd82:	ee24 7a07 	vmul.f32	s14, s8, s14
 800dd86:	ee87 ca27 	vdiv.f32	s24, s14, s15
 800dd8a:	ee3c ca23 	vadd.f32	s24, s24, s7
 800dd8e:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800dd92:	eef4 8ae7 	vcmpe.f32	s17, s15
 800dd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd9a:	f2c2 8566 	blt.w	801086a <iNemoEngine_API_Update+0x407a>
 800dd9e:	9b06      	ldr	r3, [sp, #24]
 800dda0:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 800dda4:	eef4 8ac7 	vcmpe.f32	s17, s14
 800dda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddac:	f142 87a3 	bpl.w	8010cf6 <iNemoEngine_API_Update+0x4506>
 800ddb0:	edd3 3a51 	vldr	s7, [r3, #324]	; 0x144
 800ddb4:	ed93 4a53 	vldr	s8, [r3, #332]	; 0x14c
 800ddb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ddbc:	ee34 4a63 	vsub.f32	s8, s8, s7
 800ddc0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800ddc4:	ee64 7a27 	vmul.f32	s15, s8, s15
 800ddc8:	ee87 ca87 	vdiv.f32	s24, s15, s14
 800ddcc:	ee3c ca23 	vadd.f32	s24, s24, s7
 800ddd0:	9b06      	ldr	r3, [sp, #24]
 800ddd2:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800ddd6:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ddda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddde:	f2c2 8566 	blt.w	80108ae <iNemoEngine_API_Update+0x40be>
 800dde2:	9b06      	ldr	r3, [sp, #24]
 800dde4:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 800dde8:	eef4 8ac7 	vcmpe.f32	s17, s14
 800ddec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf0:	f142 87dc 	bpl.w	8010dac <iNemoEngine_API_Update+0x45bc>
 800ddf4:	edd3 3a55 	vldr	s7, [r3, #340]	; 0x154
 800ddf8:	ed93 4a57 	vldr	s8, [r3, #348]	; 0x15c
 800ddfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de00:	ee34 4a63 	vsub.f32	s8, s8, s7
 800de04:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800de08:	ee64 7a27 	vmul.f32	s15, s8, s15
 800de0c:	ee87 ca87 	vdiv.f32	s24, s15, s14
 800de10:	ee3c ca23 	vadd.f32	s24, s24, s7
 800de14:	9b06      	ldr	r3, [sp, #24]
 800de16:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 800de1a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800de1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de22:	f2c2 8566 	blt.w	80108f2 <iNemoEngine_API_Update+0x4102>
 800de26:	9b06      	ldr	r3, [sp, #24]
 800de28:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 800de2c:	eef4 8ac7 	vcmpe.f32	s17, s14
 800de30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de34:	f142 87c5 	bpl.w	8010dc2 <iNemoEngine_API_Update+0x45d2>
 800de38:	edd3 3a59 	vldr	s7, [r3, #356]	; 0x164
 800de3c:	ed93 4a5b 	vldr	s8, [r3, #364]	; 0x16c
 800de40:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de44:	ee34 4a63 	vsub.f32	s8, s8, s7
 800de48:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800de4c:	ee64 7a27 	vmul.f32	s15, s8, s15
 800de50:	ee87 ca87 	vdiv.f32	s24, s15, s14
 800de54:	ee3c ca23 	vadd.f32	s24, s24, s7
 800de58:	9b06      	ldr	r3, [sp, #24]
 800de5a:	edd3 7a5c 	vldr	s15, [r3, #368]	; 0x170
 800de5e:	eef4 8ae7 	vcmpe.f32	s17, s15
 800de62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de66:	f2c2 8566 	blt.w	8010936 <iNemoEngine_API_Update+0x4146>
 800de6a:	9b06      	ldr	r3, [sp, #24]
 800de6c:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 800de70:	eef4 8ac7 	vcmpe.f32	s17, s14
 800de74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de78:	f142 8795 	bpl.w	8010da6 <iNemoEngine_API_Update+0x45b6>
 800de7c:	edd3 3a5d 	vldr	s7, [r3, #372]	; 0x174
 800de80:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 800de84:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de88:	ee34 4a63 	vsub.f32	s8, s8, s7
 800de8c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800de90:	ee64 7a27 	vmul.f32	s15, s8, s15
 800de94:	ee87 ca87 	vdiv.f32	s24, s15, s14
 800de98:	ee3c ca23 	vadd.f32	s24, s24, s7
 800de9c:	9b06      	ldr	r3, [sp, #24]
 800de9e:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 800dea2:	eef4 8ae7 	vcmpe.f32	s17, s15
 800dea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deaa:	f2c0 8092 	blt.w	800dfd2 <iNemoEngine_API_Update+0x17e2>
 800deae:	9b06      	ldr	r3, [sp, #24]
 800deb0:	ed93 4a61 	vldr	s8, [r3, #388]	; 0x184
 800deb4:	ed93 7a63 	vldr	s14, [r3, #396]	; 0x18c
 800deb8:	ee74 4ae7 	vsub.f32	s9, s9, s15
 800debc:	ee37 7a44 	vsub.f32	s14, s14, s8
 800dec0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800dec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dec8:	ee87 caa4 	vdiv.f32	s24, s15, s9
 800decc:	ee3c ca04 	vadd.f32	s24, s24, s8
 800ded0:	e07f      	b.n	800dfd2 <iNemoEngine_API_Update+0x17e2>
 800ded2:	eddf 7ad2 	vldr	s15, [pc, #840]	; 800e21c <iNemoEngine_API_Update+0x1a2c>
 800ded6:	eddf cad2 	vldr	s25, [pc, #840]	; 800e220 <iNemoEngine_API_Update+0x1a30>
 800deda:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 800dede:	eddf 7ad1 	vldr	s15, [pc, #836]	; 800e224 <iNemoEngine_API_Update+0x1a34>
 800dee2:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 800dee6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800deea:	f7ff b824 	b.w	800cf36 <iNemoEngine_API_Update+0x746>
 800deee:	1c60      	adds	r0, r4, #1
 800def0:	454e      	cmp	r6, r9
 800def2:	4459      	add	r1, fp
 800def4:	4450      	add	r0, sl
 800def6:	4665      	mov	r5, ip
 800def8:	f6bf ae04 	bge.w	800db04 <iNemoEngine_API_Update+0x1314>
 800defc:	eba9 0206 	sub.w	r2, r9, r6
 800df00:	444c      	add	r4, r9
 800df02:	1ba4      	subs	r4, r4, r6
 800df04:	f005 f8f8 	bl	80130f8 <memcpy>
 800df08:	464e      	mov	r6, r9
 800df0a:	e5fb      	b.n	800db04 <iNemoEngine_API_Update+0x1314>
 800df0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800df10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df14:	f43f ae5d 	beq.w	800dbd2 <iNemoEngine_API_Update+0x13e2>
 800df18:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800df1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df20:	f43f ae57 	beq.w	800dbd2 <iNemoEngine_API_Update+0x13e2>
 800df24:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df28:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800df2c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800df30:	e655      	b.n	800dbde <iNemoEngine_API_Update+0x13ee>
 800df32:	2300      	movs	r3, #0
 800df34:	f882 3900 	strb.w	r3, [r2, #2304]	; 0x900
 800df38:	edc8 7a07 	vstr	s15, [r8, #28]
 800df3c:	edc8 7a08 	vstr	s15, [r8, #32]
 800df40:	edc8 7a09 	vstr	s15, [r8, #36]	; 0x24
 800df44:	edc8 7a0a 	vstr	s15, [r8, #40]	; 0x28
 800df48:	edc8 7a0b 	vstr	s15, [r8, #44]	; 0x2c
 800df4c:	e6aa      	b.n	800dca4 <iNemoEngine_API_Update+0x14b4>
 800df4e:	f04f 0908 	mov.w	r9, #8
 800df52:	f04f 0805 	mov.w	r8, #5
 800df56:	2202      	movs	r2, #2
 800df58:	f7ff bae3 	b.w	800d522 <iNemoEngine_API_Update+0xd32>
 800df5c:	2104      	movs	r1, #4
 800df5e:	2000      	movs	r0, #0
 800df60:	f04f 0c06 	mov.w	ip, #6
 800df64:	f04f 0e07 	mov.w	lr, #7
 800df68:	2603      	movs	r6, #3
 800df6a:	460c      	mov	r4, r1
 800df6c:	2301      	movs	r3, #1
 800df6e:	4607      	mov	r7, r0
 800df70:	f7ff babd 	b.w	800d4ee <iNemoEngine_API_Update+0xcfe>
 800df74:	ed9f 5aac 	vldr	s10, [pc, #688]	; 800e228 <iNemoEngine_API_Update+0x1a38>
 800df78:	ed9f 8aac 	vldr	s16, [pc, #688]	; 800e22c <iNemoEngine_API_Update+0x1a3c>
 800df7c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800e25c <iNemoEngine_API_Update+0x1a6c>
 800df80:	eddf 6aab 	vldr	s13, [pc, #684]	; 800e230 <iNemoEngine_API_Update+0x1a40>
 800df84:	ed84 5a00 	vstr	s10, [r4]
 800df88:	eef0 7a45 	vmov.f32	s15, s10
 800df8c:	eeb0 6a45 	vmov.f32	s12, s10
 800df90:	eddf caa8 	vldr	s25, [pc, #672]	; 800e234 <iNemoEngine_API_Update+0x1a44>
 800df94:	ed9f 9aa8 	vldr	s18, [pc, #672]	; 800e238 <iNemoEngine_API_Update+0x1a48>
 800df98:	ed84 8a01 	vstr	s16, [r4, #4]
 800df9c:	eef0 5a66 	vmov.f32	s11, s13
 800dfa0:	ed84 8a02 	vstr	s16, [r4, #8]
 800dfa4:	eeb0 5a47 	vmov.f32	s10, s14
 800dfa8:	eef0 8a67 	vmov.f32	s17, s15
 800dfac:	eeb0 ca48 	vmov.f32	s24, s16
 800dfb0:	f7fe bed8 	b.w	800cd64 <iNemoEngine_API_Update+0x574>
 800dfb4:	eef1 6a66 	vneg.f32	s13, s13
 800dfb8:	e415      	b.n	800d7e6 <iNemoEngine_API_Update+0xff6>
 800dfba:	eeb1 4a44 	vneg.f32	s8, s8
 800dfbe:	f7ff bbee 	b.w	800d79e <iNemoEngine_API_Update+0xfae>
 800dfc2:	eef1 7a67 	vneg.f32	s15, s15
 800dfc6:	e431      	b.n	800d82c <iNemoEngine_API_Update+0x103c>
 800dfc8:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800dfcc:	eeb0 fa4c 	vmov.f32	s30, s24
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	edd3 fa74 	vldr	s31, [r3, #464]	; 0x1d0
 800dfd6:	ed93 7a72 	vldr	s14, [r3, #456]	; 0x1c8
 800dfda:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 800dfde:	eddf 4a90 	vldr	s9, [pc, #576]	; 800e220 <iNemoEngine_API_Update+0x1a30>
 800dfe2:	ee7c faef 	vsub.f32	s31, s25, s31
 800dfe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dfea:	eef0 faef 	vabs.f32	s31, s31
 800dfee:	eef0 7ae7 	vabs.f32	s15, s15
 800dff2:	ee77 7aaf 	vadd.f32	s15, s15, s31
 800dff6:	eef4 7ae4 	vcmpe.f32	s15, s9
 800dffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dffe:	dd0a      	ble.n	800e016 <iNemoEngine_API_Update+0x1826>
 800e000:	ed9f 4a8e 	vldr	s8, [pc, #568]	; 800e23c <iNemoEngine_API_Update+0x1a4c>
 800e004:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e00c:	f340 8790 	ble.w	800ef30 <iNemoEngine_API_Update+0x2740>
 800e010:	eef1 4a04 	vmov.f32	s9, #20	; 0x40a00000  5.0
 800e014:	e001      	b.n	800e01a <iNemoEngine_API_Update+0x182a>
 800e016:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800e01a:	eddd 7a21 	vldr	s15, [sp, #132]	; 0x84
 800e01e:	781c      	ldrb	r4, [r3, #0]
 800e020:	eef4 4ae7 	vcmpe.f32	s9, s15
 800e024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e028:	bfa8      	it	ge
 800e02a:	eef0 7a64 	vmovge.f32	s15, s9
 800e02e:	edcd 7a04 	vstr	s15, [sp, #16]
 800e032:	b1cc      	cbz	r4, 800e068 <iNemoEngine_API_Update+0x1878>
 800e034:	785c      	ldrb	r4, [r3, #1]
 800e036:	2c00      	cmp	r4, #0
 800e038:	f040 8774 	bne.w	800ef24 <iNemoEngine_API_Update+0x2734>
 800e03c:	ee75 7aa6 	vadd.f32	s15, s11, s13
 800e040:	edd3 6a05 	vldr	s13, [r3, #20]
 800e044:	ee75 7a27 	vadd.f32	s15, s10, s15
 800e048:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e04c:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 800e050:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e054:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e058:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e05c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e064:	f102 848b 	bmi.w	801097e <iNemoEngine_API_Update+0x418e>
 800e068:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800e06c:	461a      	mov	r2, r3
 800e06e:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 800e072:	ed9d 6a50 	vldr	s12, [sp, #320]	; 0x140
 800e076:	edcd 6a98 	vstr	s13, [sp, #608]	; 0x260
 800e07a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e07e:	eef0 6a65 	vmov.f32	s13, s11
 800e082:	eee7 6a47 	vfms.f32	s13, s14, s14
 800e086:	2300      	movs	r3, #0
 800e088:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
 800e08c:	ed9d 5a4e 	vldr	s10, [sp, #312]	; 0x138
 800e090:	eddd 4a4f 	vldr	s9, [sp, #316]	; 0x13c
 800e094:	eddd 0a51 	vldr	s1, [sp, #324]	; 0x144
 800e098:	ed8d 7a45 	vstr	s14, [sp, #276]	; 0x114
 800e09c:	ee26 4a06 	vmul.f32	s8, s12, s12
 800e0a0:	ee25 2a05 	vmul.f32	s4, s10, s10
 800e0a4:	ee34 4a04 	vadd.f32	s8, s8, s8
 800e0a8:	eeb1 3ae6 	vsqrt.f32	s6, s13
 800e0ac:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 800e0b0:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
 800e0b4:	9343      	str	r3, [sp, #268]	; 0x10c
 800e0b6:	ee64 3a86 	vmul.f32	s7, s9, s12
 800e0ba:	ee25 0a24 	vmul.f32	s0, s10, s9
 800e0be:	ee64 1aa4 	vmul.f32	s3, s9, s9
 800e0c2:	ee64 6aa0 	vmul.f32	s13, s9, s1
 800e0c6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e0ca:	eea2 4a24 	vfma.f32	s8, s4, s9
 800e0ce:	ee73 3aa3 	vadd.f32	s7, s7, s7
 800e0d2:	ee35 1ac4 	vsub.f32	s2, s11, s8
 800e0d6:	ee25 4a06 	vmul.f32	s8, s10, s12
 800e0da:	ee26 6a20 	vmul.f32	s12, s12, s1
 800e0de:	ee71 1aa1 	vadd.f32	s3, s3, s3
 800e0e2:	ee30 6a06 	vadd.f32	s12, s0, s12
 800e0e6:	ee25 5a20 	vmul.f32	s10, s10, s1
 800e0ea:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e0ee:	eee2 1a24 	vfma.f32	s3, s4, s9
 800e0f2:	ee36 2a06 	vadd.f32	s4, s12, s12
 800e0f6:	eeb0 6a63 	vmov.f32	s12, s7
 800e0fa:	eea5 6a24 	vfma.f32	s12, s10, s9
 800e0fe:	eee5 3a64 	vfms.f32	s7, s10, s9
 800e102:	eeb0 5a66 	vmov.f32	s10, s13
 800e106:	ee7a 6aa6 	vadd.f32	s13, s21, s13
 800e10a:	ee94 5a24 	vfnms.f32	s10, s8, s9
 800e10e:	eee4 6a64 	vfms.f32	s13, s8, s9
 800e112:	ee25 5a07 	vmul.f32	s10, s10, s14
 800e116:	edcd 6a3d 	vstr	s13, [sp, #244]	; 0xf4
 800e11a:	edcd 6a92 	vstr	s13, [sp, #584]	; 0x248
 800e11e:	ee75 6ae1 	vsub.f32	s13, s11, s3
 800e122:	ee79 5ae5 	vsub.f32	s11, s19, s11
 800e126:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e12a:	ee75 1aa1 	vadd.f32	s3, s11, s3
 800e12e:	eee3 6a23 	vfma.f32	s13, s6, s7
 800e132:	ee26 7a07 	vmul.f32	s14, s12, s14
 800e136:	eddd 5a2a 	vldr	s11, [sp, #168]	; 0xa8
 800e13a:	eddd 4a2c 	vldr	s9, [sp, #176]	; 0xb0
 800e13e:	ed8d 9a99 	vstr	s18, [sp, #612]	; 0x264
 800e142:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800e146:	eea3 7a01 	vfma.f32	s14, s6, s2
 800e14a:	edcd 6a91 	vstr	s13, [sp, #580]	; 0x244
 800e14e:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 800e152:	edcd ca9a 	vstr	s25, [sp, #616]	; 0x268
 800e156:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e15a:	eea3 5a02 	vfma.f32	s10, s6, s4
 800e15e:	ed8d 7a90 	vstr	s14, [sp, #576]	; 0x240
 800e162:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800e270 <iNemoEngine_API_Update+0x1a80>
 800e166:	ed8d 3a44 	vstr	s6, [sp, #272]	; 0x110
 800e16a:	ee3a 6a46 	vsub.f32	s12, s20, s12
 800e16e:	ee34 5ac5 	vsub.f32	s10, s9, s10
 800e172:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e17a:	ed8d 5a8f 	vstr	s10, [sp, #572]	; 0x23c
 800e17e:	edcd 1a3f 	vstr	s3, [sp, #252]	; 0xfc
 800e182:	edcd 1a94 	vstr	s3, [sp, #592]	; 0x250
 800e186:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800e18a:	ed8d 6a93 	vstr	s12, [sp, #588]	; 0x24c
 800e18e:	d541      	bpl.n	800e214 <iNemoEngine_API_Update+0x1a24>
 800e190:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800e240 <iNemoEngine_API_Update+0x1a50>
 800e194:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e19c:	dd3a      	ble.n	800e214 <iNemoEngine_API_Update+0x1a24>
 800e19e:	ee79 7a67 	vsub.f32	s15, s18, s15
 800e1a2:	eef0 7ae7 	vabs.f32	s15, s15
 800e1a6:	ee77 7a8b 	vadd.f32	s15, s15, s22
 800e1aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b2:	dd5f      	ble.n	800e274 <iNemoEngine_API_Update+0x1a84>
 800e1b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e1b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c0:	f140 86a4 	bpl.w	800ef0c <iNemoEngine_API_Update+0x271c>
 800e1c4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e244 <iNemoEngine_API_Update+0x1a54>
 800e1c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d0:	f141 8185 	bpl.w	800f4de <iNemoEngine_API_Update+0x2cee>
 800e1d4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e254 <iNemoEngine_API_Update+0x1a64>
 800e1d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e0:	f2c1 8185 	blt.w	800f4ee <iNemoEngine_API_Update+0x2cfe>
 800e1e4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800e248 <iNemoEngine_API_Update+0x1a58>
 800e1e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f0:	f141 824e 	bpl.w	800f690 <iNemoEngine_API_Update+0x2ea0>
 800e1f4:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e254 <iNemoEngine_API_Update+0x1a64>
 800e1f8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800e24c <iNemoEngine_API_Update+0x1a5c>
 800e1fc:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800e250 <iNemoEngine_API_Update+0x1a60>
 800e200:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e204:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e20c:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e210:	f001 b977 	b.w	800f502 <iNemoEngine_API_Update+0x2d12>
 800e214:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e218:	e7c1      	b.n	800e19e <iNemoEngine_API_Update+0x19ae>
 800e21a:	bf00      	nop
 800e21c:	3ecccccc 	.word	0x3ecccccc
 800e220:	3dcccccd 	.word	0x3dcccccd
 800e224:	3f666666 	.word	0x3f666666
 800e228:	00000000 	.word	0x00000000
 800e22c:	3f333333 	.word	0x3f333333
 800e230:	bfb33333 	.word	0xbfb33333
 800e234:	3f7d6d54 	.word	0x3f7d6d54
 800e238:	3f7ae147 	.word	0x3f7ae147
 800e23c:	3fb77778 	.word	0x3fb77778
 800e240:	3f4ccccd 	.word	0x3f4ccccd
 800e244:	3ba3d70a 	.word	0x3ba3d70a
 800e248:	3c75c28f 	.word	0x3c75c28f
 800e24c:	3f19999a 	.word	0x3f19999a
 800e250:	43480000 	.word	0x43480000
 800e254:	3c23d70a 	.word	0x3c23d70a
 800e258:	3b449ba6 	.word	0x3b449ba6
 800e25c:	3fb33333 	.word	0x3fb33333
 800e260:	3ecccccd 	.word	0x3ecccccd
 800e264:	3f8f5c29 	.word	0x3f8f5c29
 800e268:	3f59999a 	.word	0x3f59999a
 800e26c:	3e4ccccd 	.word	0x3e4ccccd
 800e270:	3f99999a 	.word	0x3f99999a
 800e274:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e278:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 800e254 <iNemoEngine_API_Update+0x1a64>
 800e27c:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800e258 <iNemoEngine_API_Update+0x1a68>
 800e280:	eeb0 7a65 	vmov.f32	s14, s11
 800e284:	eef0 6a65 	vmov.f32	s13, s11
 800e288:	ed8d 6a65 	vstr	s12, [sp, #404]	; 0x194
 800e28c:	ed9d 6a04 	vldr	s12, [sp, #16]
 800e290:	ed9d 3a84 	vldr	s6, [sp, #528]	; 0x210
 800e294:	ed9d 5a83 	vldr	s10, [sp, #524]	; 0x20c
 800e298:	ed9d 2a88 	vldr	s4, [sp, #544]	; 0x220
 800e29c:	eddd 4a8c 	vldr	s9, [sp, #560]	; 0x230
 800e2a0:	9a06      	ldr	r2, [sp, #24]
 800e2a2:	ed8d 4a66 	vstr	s8, [sp, #408]	; 0x198
 800e2a6:	ee66 3a0f 	vmul.f32	s7, s12, s30
 800e2aa:	ed9d 6a8d 	vldr	s12, [sp, #564]	; 0x234
 800e2ae:	7b13      	ldrb	r3, [r2, #12]
 800e2b0:	ee23 3a23 	vmul.f32	s6, s6, s7
 800e2b4:	ee23 5a85 	vmul.f32	s10, s7, s10
 800e2b8:	ed8d 3a84 	vstr	s6, [sp, #528]	; 0x210
 800e2bc:	ed9d 3a85 	vldr	s6, [sp, #532]	; 0x214
 800e2c0:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 800e2c4:	ee63 3a23 	vmul.f32	s7, s6, s7
 800e2c8:	ed9d 3a86 	vldr	s6, [sp, #536]	; 0x218
 800e2cc:	edcd 3a85 	vstr	s7, [sp, #532]	; 0x214
 800e2d0:	eddd 3a87 	vldr	s7, [sp, #540]	; 0x21c
 800e2d4:	ee2c 3a03 	vmul.f32	s6, s24, s6
 800e2d8:	ee6c 3a23 	vmul.f32	s7, s24, s7
 800e2dc:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800e2e0:	ee2c ca02 	vmul.f32	s24, s24, s4
 800e2e4:	ee36 6a06 	vadd.f32	s12, s12, s12
 800e2e8:	ed9d 2a8e 	vldr	s4, [sp, #568]	; 0x238
 800e2ec:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 800e2f0:	ee64 4a87 	vmul.f32	s9, s9, s14
 800e2f4:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e2f8:	ee2f fa02 	vmul.f32	s30, s30, s4
 800e2fc:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 800e300:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 800e304:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 800e308:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 800e30c:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 800e310:	2b00      	cmp	r3, #0
 800e312:	f000 8525 	beq.w	800ed60 <iNemoEngine_API_Update+0x2570>
 800e316:	ee27 3a03 	vmul.f32	s6, s14, s6
 800e31a:	ee67 3a23 	vmul.f32	s7, s14, s7
 800e31e:	ee27 ca0c 	vmul.f32	s24, s14, s24
 800e322:	ed9d 2a22 	vldr	s4, [sp, #136]	; 0x88
 800e326:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 800e32a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800e32e:	4613      	mov	r3, r2
 800e330:	ee25 2a82 	vmul.f32	s4, s11, s4
 800e334:	7b92      	ldrb	r2, [r2, #14]
 800e336:	7b5b      	ldrb	r3, [r3, #13]
 800e338:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 800e33c:	ee64 5a25 	vmul.f32	s11, s8, s11
 800e340:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e344:	edcd 5a66 	vstr	s11, [sp, #408]	; 0x198
 800e348:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 800e34c:	ed8d 2a5f 	vstr	s4, [sp, #380]	; 0x17c
 800e350:	ed8d 2a60 	vstr	s4, [sp, #384]	; 0x180
 800e354:	ed8d 2a61 	vstr	s4, [sp, #388]	; 0x184
 800e358:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 800e35c:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 800e360:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 800e364:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 800e368:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 800e36c:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 800e370:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 800e374:	b15a      	cbz	r2, 800e38e <iNemoEngine_API_Update+0x1b9e>
 800e376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e37a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e382:	dd04      	ble.n	800e38e <iNemoEngine_API_Update+0x1b9e>
 800e384:	2100      	movs	r1, #0
 800e386:	f8ad 10eb 	strh.w	r1, [sp, #235]	; 0xeb
 800e38a:	f88d 10ed 	strb.w	r1, [sp, #237]	; 0xed
 800e38e:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 800e392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e396:	dd08      	ble.n	800e3aa <iNemoEngine_API_Update+0x1bba>
 800e398:	9906      	ldr	r1, [sp, #24]
 800e39a:	edd1 7a64 	vldr	s15, [r1, #400]	; 0x190
 800e39e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3a6:	f280 85a4 	bge.w	800eef2 <iNemoEngine_API_Update+0x2702>
 800e3aa:	b133      	cbz	r3, 800e3ba <iNemoEngine_API_Update+0x1bca>
 800e3ac:	f240 1101 	movw	r1, #257	; 0x101
 800e3b0:	f8ad 10e8 	strh.w	r1, [sp, #232]	; 0xe8
 800e3b4:	2101      	movs	r1, #1
 800e3b6:	f88d 10ea 	strb.w	r1, [sp, #234]	; 0xea
 800e3ba:	2401      	movs	r4, #1
 800e3bc:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 800e3c0:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 800e3c4:	ed5f 7a5b 	vldr	s15, [pc, #-364]	; 800e25c <iNemoEngine_API_Update+0x1a6c>
 800e3c8:	eef4 cae7 	vcmpe.f32	s25, s15
 800e3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d0:	dc07      	bgt.n	800e3e2 <iNemoEngine_API_Update+0x1bf2>
 800e3d2:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 800e260 <iNemoEngine_API_Update+0x1a70>
 800e3d6:	eef4 cae7 	vcmpe.f32	s25, s15
 800e3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3de:	f141 801d 	bpl.w	800f41c <iNemoEngine_API_Update+0x2c2c>
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 800e3e8:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 800e3ec:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 800e3f0:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 800e3f4:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 800e264 <iNemoEngine_API_Update+0x1a74>
 800e3f8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e400:	dc07      	bgt.n	800e412 <iNemoEngine_API_Update+0x1c22>
 800e402:	ed5f 7a67 	vldr	s15, [pc, #-412]	; 800e268 <iNemoEngine_API_Update+0x1a78>
 800e406:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40e:	f140 86ed 	bpl.w	800f1ec <iNemoEngine_API_Update+0x29fc>
 800e412:	2300      	movs	r3, #0
 800e414:	f8ad 30eb 	strh.w	r3, [sp, #235]	; 0xeb
 800e418:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
 800e41c:	f8ad 30f1 	strh.w	r3, [sp, #241]	; 0xf1
 800e420:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e424:	eef4 fae7 	vcmpe.f32	s31, s15
 800e428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42c:	f340 8486 	ble.w	800ed3c <iNemoEngine_API_Update+0x254c>
 800e430:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e434:	ee7f 7aa7 	vadd.f32	s15, s31, s15
 800e438:	9a06      	ldr	r2, [sp, #24]
 800e43a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e43e:	2300      	movs	r3, #0
 800e440:	ee67 4aa4 	vmul.f32	s9, s15, s9
 800e444:	ee27 fa8f 	vmul.f32	s30, s15, s30
 800e448:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800e44c:	eef4 fae7 	vcmpe.f32	s31, s15
 800e450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e454:	bfc4      	itt	gt
 800e456:	f88d 30f1 	strbgt.w	r3, [sp, #241]	; 0xf1
 800e45a:	f88d 30f3 	strbgt.w	r3, [sp, #243]	; 0xf3
 800e45e:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 800e462:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 800e466:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e468:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 800e46c:	2b0e      	cmp	r3, #14
 800e46e:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 800e472:	f340 8567 	ble.w	800ef44 <iNemoEngine_API_Update+0x2754>
 800e476:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 800e47a:	eeb4 dae7 	vcmpe.f32	s26, s15
 800e47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e482:	f340 82ed 	ble.w	800ea60 <iNemoEngine_API_Update+0x2270>
 800e486:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800e48a:	eef4 7acb 	vcmpe.f32	s15, s22
 800e48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e492:	f340 82e5 	ble.w	800ea60 <iNemoEngine_API_Update+0x2270>
 800e496:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 800e49a:	eef4 7aed 	vcmpe.f32	s15, s27
 800e49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4a2:	f340 82dd 	ble.w	800ea60 <iNemoEngine_API_Update+0x2270>
 800e4a6:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 800e26c <iNemoEngine_API_Update+0x1a7c>
 800e4aa:	eeb0 7ace 	vabs.f32	s14, s28
 800e4ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b6:	f140 82d3 	bpl.w	800ea60 <iNemoEngine_API_Update+0x2270>
 800e4ba:	eeb0 7aee 	vabs.f32	s14, s29
 800e4be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c6:	f140 82cb 	bpl.w	800ea60 <iNemoEngine_API_Update+0x2270>
 800e4ca:	eeb0 7aeb 	vabs.f32	s14, s23
 800e4ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d6:	f140 82c3 	bpl.w	800ea60 <iNemoEngine_API_Update+0x2270>
 800e4da:	ed5f 7a9b 	vldr	s15, [pc, #-620]	; 800e270 <iNemoEngine_API_Update+0x1a80>
 800e4de:	eef0 aaea 	vabs.f32	s21, s21
 800e4e2:	eef4 aae7 	vcmpe.f32	s21, s15
 800e4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ea:	f140 82b9 	bpl.w	800ea60 <iNemoEngine_API_Update+0x2270>
 800e4ee:	eeb0 aaca 	vabs.f32	s20, s20
 800e4f2:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4fa:	f140 82b1 	bpl.w	800ea60 <iNemoEngine_API_Update+0x2270>
 800e4fe:	eef0 9ae9 	vabs.f32	s19, s19
 800e502:	eef4 9ae7 	vcmpe.f32	s19, s15
 800e506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e50a:	f140 82a9 	bpl.w	800ea60 <iNemoEngine_API_Update+0x2270>
 800e50e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e510:	9806      	ldr	r0, [sp, #24]
 800e512:	ed93 6a00 	vldr	s12, [r3]
 800e516:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e518:	f890 11a0 	ldrb.w	r1, [r0, #416]	; 0x1a0
 800e51c:	ed93 7a00 	vldr	s14, [r3]
 800e520:	f200 73a4 	addw	r3, r0, #1956	; 0x7a4
 800e524:	edd3 4a00 	vldr	s9, [r3]
 800e528:	2909      	cmp	r1, #9
 800e52a:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800e52e:	f500 63f6 	add.w	r3, r0, #1968	; 0x7b0
 800e532:	ed93 5a00 	vldr	s10, [r3]
 800e536:	bf8c      	ite	hi
 800e538:	220a      	movhi	r2, #10
 800e53a:	2205      	movls	r2, #5
 800e53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e540:	bfb4      	ite	lt
 800e542:	eef0 7a64 	vmovlt.f32	s15, s9
 800e546:	eef0 7a46 	vmovge.f32	s15, s12
 800e54a:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e54e:	bf8c      	ite	hi
 800e550:	eef0 5a64 	vmovhi.f32	s11, s9
 800e554:	eef0 5a46 	vmovls.f32	s11, s12
 800e558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e55c:	ee36 6a24 	vadd.f32	s12, s12, s9
 800e560:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e564:	bfb8      	it	lt
 800e566:	eef0 7a45 	vmovlt.f32	s15, s10
 800e56a:	f200 73bc 	addw	r3, r0, #1980	; 0x7bc
 800e56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e572:	bf88      	it	hi
 800e574:	eef0 5a45 	vmovhi.f32	s11, s10
 800e578:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e57c:	ed93 5a00 	vldr	s10, [r3]
 800e580:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e588:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e58c:	bfb8      	it	lt
 800e58e:	eef0 7a45 	vmovlt.f32	s15, s10
 800e592:	f500 63f9 	add.w	r3, r0, #1992	; 0x7c8
 800e596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e59a:	bf88      	it	hi
 800e59c:	eef0 5a45 	vmovhi.f32	s11, s10
 800e5a0:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e5a4:	ed93 5a00 	vldr	s10, [r3]
 800e5a8:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b0:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e5b4:	bfb8      	it	lt
 800e5b6:	eef0 7a45 	vmovlt.f32	s15, s10
 800e5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5be:	bf88      	it	hi
 800e5c0:	eef0 5a45 	vmovhi.f32	s11, s10
 800e5c4:	2a05      	cmp	r2, #5
 800e5c6:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e5ca:	d065      	beq.n	800e698 <iNemoEngine_API_Update+0x1ea8>
 800e5cc:	f200 73d4 	addw	r3, r0, #2004	; 0x7d4
 800e5d0:	ed93 5a00 	vldr	s10, [r3]
 800e5d4:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5dc:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e5e0:	bfb8      	it	lt
 800e5e2:	eef0 7a45 	vmovlt.f32	s15, s10
 800e5e6:	f500 63fc 	add.w	r3, r0, #2016	; 0x7e0
 800e5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ee:	bf88      	it	hi
 800e5f0:	eef0 5a45 	vmovhi.f32	s11, s10
 800e5f4:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e5f8:	ed93 5a00 	vldr	s10, [r3]
 800e5fc:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e604:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e608:	bfb8      	it	lt
 800e60a:	eef0 7a45 	vmovlt.f32	s15, s10
 800e60e:	f200 73ec 	addw	r3, r0, #2028	; 0x7ec
 800e612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e616:	bf88      	it	hi
 800e618:	eef0 5a45 	vmovhi.f32	s11, s10
 800e61c:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e620:	ed93 5a00 	vldr	s10, [r3]
 800e624:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e62c:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e630:	bfb8      	it	lt
 800e632:	eef0 7a45 	vmovlt.f32	s15, s10
 800e636:	f500 63ff 	add.w	r3, r0, #2040	; 0x7f8
 800e63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e63e:	bf88      	it	hi
 800e640:	eef0 5a45 	vmovhi.f32	s11, s10
 800e644:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e648:	ed93 5a00 	vldr	s10, [r3]
 800e64c:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e654:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e658:	bfb8      	it	lt
 800e65a:	eef0 7a45 	vmovlt.f32	s15, s10
 800e65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e662:	bf88      	it	hi
 800e664:	eef0 5a45 	vmovhi.f32	s11, s10
 800e668:	2a0a      	cmp	r2, #10
 800e66a:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e66e:	d113      	bne.n	800e698 <iNemoEngine_API_Update+0x1ea8>
 800e670:	f600 0304 	addw	r3, r0, #2052	; 0x804
 800e674:	ed93 5a00 	vldr	s10, [r3]
 800e678:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e680:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e684:	bfb8      	it	lt
 800e686:	eef0 7a45 	vmovlt.f32	s15, s10
 800e68a:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e692:	bf88      	it	hi
 800e694:	eef0 5a45 	vmovhi.f32	s11, s10
 800e698:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e69c:	eddf 5aeb 	vldr	s11, [pc, #940]	; 800ea4c <iNemoEngine_API_Update+0x225c>
 800e6a0:	ed9f 5aeb 	vldr	s10, [pc, #940]	; 800ea50 <iNemoEngine_API_Update+0x2260>
 800e6a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e6a8:	ee26 6a05 	vmul.f32	s12, s12, s10
 800e6ac:	eef4 7ae5 	vcmpe.f32	s15, s11
 800e6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6b4:	f300 81d4 	bgt.w	800ea60 <iNemoEngine_API_Update+0x2270>
 800e6b8:	eef0 7ac6 	vabs.f32	s15, s12
 800e6bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e6c0:	ed9f 6ae4 	vldr	s12, [pc, #912]	; 800ea54 <iNemoEngine_API_Update+0x2264>
 800e6c4:	eef4 7ac6 	vcmpe.f32	s15, s12
 800e6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6cc:	f300 81c8 	bgt.w	800ea60 <iNemoEngine_API_Update+0x2270>
 800e6d0:	9806      	ldr	r0, [sp, #24]
 800e6d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e6d4:	ed93 6a00 	vldr	s12, [r3]
 800e6d8:	f500 63f5 	add.w	r3, r0, #1960	; 0x7a8
 800e6dc:	edd3 4a00 	vldr	s9, [r3]
 800e6e0:	f200 73b4 	addw	r3, r0, #1972	; 0x7b4
 800e6e4:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800e6e8:	ed93 5a00 	vldr	s10, [r3]
 800e6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f0:	bfb4      	ite	lt
 800e6f2:	eef0 7a64 	vmovlt.f32	s15, s9
 800e6f6:	eef0 7a46 	vmovge.f32	s15, s12
 800e6fa:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e6fe:	bf8c      	ite	hi
 800e700:	eef0 5a64 	vmovhi.f32	s11, s9
 800e704:	eef0 5a46 	vmovls.f32	s11, s12
 800e708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e70c:	ee36 6a24 	vadd.f32	s12, s12, s9
 800e710:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e714:	bfb8      	it	lt
 800e716:	eef0 7a45 	vmovlt.f32	s15, s10
 800e71a:	f500 63f8 	add.w	r3, r0, #1984	; 0x7c0
 800e71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e722:	bf88      	it	hi
 800e724:	eef0 5a45 	vmovhi.f32	s11, s10
 800e728:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e72c:	ed93 5a00 	vldr	s10, [r3]
 800e730:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e738:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e73c:	bfb8      	it	lt
 800e73e:	eef0 7a45 	vmovlt.f32	s15, s10
 800e742:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
 800e746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e74a:	bf88      	it	hi
 800e74c:	eef0 5a45 	vmovhi.f32	s11, s10
 800e750:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e754:	ed93 5a00 	vldr	s10, [r3]
 800e758:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e760:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e764:	bfb8      	it	lt
 800e766:	eef0 7a45 	vmovlt.f32	s15, s10
 800e76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e76e:	bf88      	it	hi
 800e770:	eef0 5a45 	vmovhi.f32	s11, s10
 800e774:	2a05      	cmp	r2, #5
 800e776:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e77a:	d065      	beq.n	800e848 <iNemoEngine_API_Update+0x2058>
 800e77c:	f500 63fb 	add.w	r3, r0, #2008	; 0x7d8
 800e780:	ed93 5a00 	vldr	s10, [r3]
 800e784:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e78c:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e790:	bfb8      	it	lt
 800e792:	eef0 7a45 	vmovlt.f32	s15, s10
 800e796:	f200 73e4 	addw	r3, r0, #2020	; 0x7e4
 800e79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79e:	bf88      	it	hi
 800e7a0:	eef0 5a45 	vmovhi.f32	s11, s10
 800e7a4:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e7a8:	ed93 5a00 	vldr	s10, [r3]
 800e7ac:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b4:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e7b8:	bfb8      	it	lt
 800e7ba:	eef0 7a45 	vmovlt.f32	s15, s10
 800e7be:	f500 63fe 	add.w	r3, r0, #2032	; 0x7f0
 800e7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7c6:	bf88      	it	hi
 800e7c8:	eef0 5a45 	vmovhi.f32	s11, s10
 800e7cc:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e7d0:	ed93 5a00 	vldr	s10, [r3]
 800e7d4:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7dc:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e7e0:	bfb8      	it	lt
 800e7e2:	eef0 7a45 	vmovlt.f32	s15, s10
 800e7e6:	f200 73fc 	addw	r3, r0, #2044	; 0x7fc
 800e7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ee:	bf88      	it	hi
 800e7f0:	eef0 5a45 	vmovhi.f32	s11, s10
 800e7f4:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e7f8:	ed93 5a00 	vldr	s10, [r3]
 800e7fc:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e804:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e808:	bfb8      	it	lt
 800e80a:	eef0 7a45 	vmovlt.f32	s15, s10
 800e80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e812:	bf88      	it	hi
 800e814:	eef0 5a45 	vmovhi.f32	s11, s10
 800e818:	2a0a      	cmp	r2, #10
 800e81a:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e81e:	d113      	bne.n	800e848 <iNemoEngine_API_Update+0x2058>
 800e820:	f600 0308 	addw	r3, r0, #2056	; 0x808
 800e824:	ed93 5a00 	vldr	s10, [r3]
 800e828:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e830:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e834:	bfb8      	it	lt
 800e836:	eef0 7a45 	vmovlt.f32	s15, s10
 800e83a:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e842:	bf88      	it	hi
 800e844:	eef0 5a45 	vmovhi.f32	s11, s10
 800e848:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e84c:	eddf 5a7f 	vldr	s11, [pc, #508]	; 800ea4c <iNemoEngine_API_Update+0x225c>
 800e850:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 800ea50 <iNemoEngine_API_Update+0x2260>
 800e854:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e858:	ee26 6a05 	vmul.f32	s12, s12, s10
 800e85c:	eef4 7ae5 	vcmpe.f32	s15, s11
 800e860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e864:	f300 80fc 	bgt.w	800ea60 <iNemoEngine_API_Update+0x2270>
 800e868:	eef0 7ac6 	vabs.f32	s15, s12
 800e86c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e870:	ed9f 6a78 	vldr	s12, [pc, #480]	; 800ea54 <iNemoEngine_API_Update+0x2264>
 800e874:	eef4 7ac6 	vcmpe.f32	s15, s12
 800e878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e87c:	f300 80f0 	bgt.w	800ea60 <iNemoEngine_API_Update+0x2270>
 800e880:	9806      	ldr	r0, [sp, #24]
 800e882:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800e884:	ed93 5a00 	vldr	s10, [r3]
 800e888:	f200 73ac 	addw	r3, r0, #1964	; 0x7ac
 800e88c:	edd3 4a00 	vldr	s9, [r3]
 800e890:	f500 63f7 	add.w	r3, r0, #1976	; 0x7b8
 800e894:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800e898:	ed93 6a00 	vldr	s12, [r3]
 800e89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a0:	bfb4      	ite	lt
 800e8a2:	eef0 7a64 	vmovlt.f32	s15, s9
 800e8a6:	eef0 7a45 	vmovge.f32	s15, s10
 800e8aa:	bf8c      	ite	hi
 800e8ac:	eef0 5a64 	vmovhi.f32	s11, s9
 800e8b0:	eef0 5a45 	vmovls.f32	s11, s10
 800e8b4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800e8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8bc:	ee35 5a24 	vadd.f32	s10, s10, s9
 800e8c0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800e8c4:	bfa8      	it	ge
 800e8c6:	eef0 7a46 	vmovge.f32	s15, s12
 800e8ca:	f200 73c4 	addw	r3, r0, #1988	; 0x7c4
 800e8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8d2:	bf98      	it	ls
 800e8d4:	eef0 5a46 	vmovls.f32	s11, s12
 800e8d8:	ee76 4a05 	vadd.f32	s9, s12, s10
 800e8dc:	ed93 6a00 	vldr	s12, [r3]
 800e8e0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800e8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800e8ec:	bfa8      	it	ge
 800e8ee:	eef0 7a46 	vmovge.f32	s15, s12
 800e8f2:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
 800e8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8fa:	bf8c      	ite	hi
 800e8fc:	eeb0 5a65 	vmovhi.f32	s10, s11
 800e900:	eeb0 5a46 	vmovls.f32	s10, s12
 800e904:	edd3 5a00 	vldr	s11, [r3]
 800e908:	eef4 5ae7 	vcmpe.f32	s11, s15
 800e90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e910:	ee36 6a24 	vadd.f32	s12, s12, s9
 800e914:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e918:	bfa8      	it	ge
 800e91a:	eef0 7a65 	vmovge.f32	s15, s11
 800e91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e922:	ee35 6a86 	vadd.f32	s12, s11, s12
 800e926:	bf88      	it	hi
 800e928:	eef0 5a45 	vmovhi.f32	s11, s10
 800e92c:	2a05      	cmp	r2, #5
 800e92e:	d065      	beq.n	800e9fc <iNemoEngine_API_Update+0x220c>
 800e930:	f200 73dc 	addw	r3, r0, #2012	; 0x7dc
 800e934:	ed93 5a00 	vldr	s10, [r3]
 800e938:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800e93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e940:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800e944:	bfa8      	it	ge
 800e946:	eef0 7a45 	vmovge.f32	s15, s10
 800e94a:	f500 63fd 	add.w	r3, r0, #2024	; 0x7e8
 800e94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e952:	bf98      	it	ls
 800e954:	eef0 5a45 	vmovls.f32	s11, s10
 800e958:	ee35 5a06 	vadd.f32	s10, s10, s12
 800e95c:	ed93 6a00 	vldr	s12, [r3]
 800e960:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800e964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e968:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800e96c:	bfa8      	it	ge
 800e96e:	eef0 7a46 	vmovge.f32	s15, s12
 800e972:	f200 73f4 	addw	r3, r0, #2036	; 0x7f4
 800e976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e97a:	bf98      	it	ls
 800e97c:	eef0 5a46 	vmovls.f32	s11, s12
 800e980:	ee36 5a05 	vadd.f32	s10, s12, s10
 800e984:	ed93 6a00 	vldr	s12, [r3]
 800e988:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800e98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e990:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800e994:	bfa8      	it	ge
 800e996:	eef0 7a46 	vmovge.f32	s15, s12
 800e99a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800e99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a2:	bf98      	it	ls
 800e9a4:	eef0 5a46 	vmovls.f32	s11, s12
 800e9a8:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e9ac:	ed93 5a00 	vldr	s10, [r3]
 800e9b0:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800e9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b8:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800e9bc:	bfa8      	it	ge
 800e9be:	eef0 7a45 	vmovge.f32	s15, s10
 800e9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9c6:	bf98      	it	ls
 800e9c8:	eef0 5a45 	vmovls.f32	s11, s10
 800e9cc:	2a0a      	cmp	r2, #10
 800e9ce:	ee35 6a06 	vadd.f32	s12, s10, s12
 800e9d2:	d113      	bne.n	800e9fc <iNemoEngine_API_Update+0x220c>
 800e9d4:	f600 030c 	addw	r3, r0, #2060	; 0x80c
 800e9d8:	ed93 5a00 	vldr	s10, [r3]
 800e9dc:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9e4:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e9e8:	bfb8      	it	lt
 800e9ea:	eef0 7a45 	vmovlt.f32	s15, s10
 800e9ee:	ee36 6a05 	vadd.f32	s12, s12, s10
 800e9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f6:	bf88      	it	hi
 800e9f8:	eef0 5a45 	vmovhi.f32	s11, s10
 800e9fc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ea00:	eddf 5a12 	vldr	s11, [pc, #72]	; 800ea4c <iNemoEngine_API_Update+0x225c>
 800ea04:	ed9f 5a12 	vldr	s10, [pc, #72]	; 800ea50 <iNemoEngine_API_Update+0x2260>
 800ea08:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea0c:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ea10:	eef4 7ae5 	vcmpe.f32	s15, s11
 800ea14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea18:	dc22      	bgt.n	800ea60 <iNemoEngine_API_Update+0x2270>
 800ea1a:	eef0 7ac6 	vabs.f32	s15, s12
 800ea1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ea22:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800ea54 <iNemoEngine_API_Update+0x2264>
 800ea26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ea2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea2e:	dc17      	bgt.n	800ea60 <iNemoEngine_API_Update+0x2270>
 800ea30:	9b06      	ldr	r3, [sp, #24]
 800ea32:	795b      	ldrb	r3, [r3, #5]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f002 8117 	beq.w	8010c68 <iNemoEngine_API_Update+0x4478>
 800ea3a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800ea3e:	2a01      	cmp	r2, #1
 800ea40:	f001 87d1 	beq.w	80109e6 <iNemoEngine_API_Update+0x41f6>
 800ea44:	f04f 0901 	mov.w	r9, #1
 800ea48:	f000 bc0b 	b.w	800f262 <iNemoEngine_API_Update+0x2a72>
 800ea4c:	3be56041 	.word	0x3be56041
 800ea50:	3dcccccd 	.word	0x3dcccccd
 800ea54:	3e333333 	.word	0x3e333333
 800ea58:	42480000 	.word	0x42480000
 800ea5c:	00000000 	.word	0x00000000
 800ea60:	9b06      	ldr	r3, [sp, #24]
 800ea62:	795b      	ldrb	r3, [r3, #5]
 800ea64:	f04f 0900 	mov.w	r9, #0
 800ea68:	f8ad 90ee 	strh.w	r9, [sp, #238]	; 0xee
 800ea6c:	f88d 90f0 	strb.w	r9, [sp, #240]	; 0xf0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	f040 83f1 	bne.w	800f258 <iNemoEngine_API_Update+0x2a68>
 800ea76:	9906      	ldr	r1, [sp, #24]
 800ea78:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 800ea7c:	9295      	str	r2, [sp, #596]	; 0x254
 800ea7e:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 800ea82:	9296      	str	r2, [sp, #600]	; 0x258
 800ea84:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 800ea88:	9297      	str	r2, [sp, #604]	; 0x25c
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ea90:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 800ea94:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 800ea98:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 800ea9c:	704a      	strb	r2, [r1, #1]
 800ea9e:	ed5f 7a12 	vldr	s15, [pc, #-72]	; 800ea58 <iNemoEngine_API_Update+0x2268>
 800eaa2:	eef4 6ae7 	vcmpe.f32	s13, s15
 800eaa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaaa:	f2c0 8138 	blt.w	800ed1e <iNemoEngine_API_Update+0x252e>
 800eaae:	9906      	ldr	r1, [sp, #24]
 800eab0:	2200      	movs	r2, #0
 800eab2:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 800eab6:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 800eaba:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d125      	bne.n	800eb0e <iNemoEngine_API_Update+0x231e>
 800eac2:	eddd 4a86 	vldr	s9, [sp, #536]	; 0x218
 800eac6:	ed9d 6a5f 	vldr	s12, [sp, #380]	; 0x17c
 800eaca:	ed9d 5a87 	vldr	s10, [sp, #540]	; 0x21c
 800eace:	ed9d 7a60 	vldr	s14, [sp, #384]	; 0x180
 800ead2:	eddd 5a88 	vldr	s11, [sp, #544]	; 0x220
 800ead6:	eddd 7a61 	vldr	s15, [sp, #388]	; 0x184
 800eada:	eeb6 4a08 	vmov.f32	s8, #104	; 0x3f400000  0.750
 800eade:	ee64 4a84 	vmul.f32	s9, s9, s8
 800eae2:	ee36 6a06 	vadd.f32	s12, s12, s12
 800eae6:	ee25 5a04 	vmul.f32	s10, s10, s8
 800eaea:	ee37 7a07 	vadd.f32	s14, s14, s14
 800eaee:	ee65 5a84 	vmul.f32	s11, s11, s8
 800eaf2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800eaf6:	edcd 4a86 	vstr	s9, [sp, #536]	; 0x218
 800eafa:	ed8d 6a5f 	vstr	s12, [sp, #380]	; 0x17c
 800eafe:	ed8d 5a87 	vstr	s10, [sp, #540]	; 0x21c
 800eb02:	ed8d 7a60 	vstr	s14, [sp, #384]	; 0x180
 800eb06:	edcd 5a88 	vstr	s11, [sp, #544]	; 0x220
 800eb0a:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 800eb0e:	9c06      	ldr	r4, [sp, #24]
 800eb10:	ed9d 6a60 	vldr	s12, [sp, #384]	; 0x180
 800eb14:	ed94 2a7f 	vldr	s4, [r4, #508]	; 0x1fc
 800eb18:	edd4 1a75 	vldr	s3, [r4, #468]	; 0x1d4
 800eb1c:	edd4 2a89 	vldr	s5, [r4, #548]	; 0x224
 800eb20:	edd4 3a93 	vldr	s7, [r4, #588]	; 0x24c
 800eb24:	eddd 0a5f 	vldr	s1, [sp, #380]	; 0x17c
 800eb28:	ed9d 1a61 	vldr	s2, [sp, #388]	; 0x184
 800eb2c:	ed94 4a9d 	vldr	s8, [r4, #628]	; 0x274
 800eb30:	edd4 4aa7 	vldr	s9, [r4, #668]	; 0x29c
 800eb34:	ed94 5ab1 	vldr	s10, [r4, #708]	; 0x2c4
 800eb38:	ed9d 3a8b 	vldr	s6, [sp, #556]	; 0x22c
 800eb3c:	ed9d 7a89 	vldr	s14, [sp, #548]	; 0x224
 800eb40:	eddd 7a8a 	vldr	s15, [sp, #552]	; 0x228
 800eb44:	edd4 5abb 	vldr	s11, [r4, #748]	; 0x2ec
 800eb48:	eea6 2a06 	vfma.f32	s4, s12, s12
 800eb4c:	ab83      	add	r3, sp, #524	; 0x20c
 800eb4e:	aa8f      	add	r2, sp, #572	; 0x23c
 800eb50:	ed9d 6a62 	vldr	s12, [sp, #392]	; 0x188
 800eb54:	ed84 2a7f 	vstr	s4, [r4, #508]	; 0x1fc
 800eb58:	eee0 1aa0 	vfma.f32	s3, s1, s1
 800eb5c:	a93a      	add	r1, sp, #232	; 0xe8
 800eb5e:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
 800eb62:	eee1 2a01 	vfma.f32	s5, s2, s2
 800eb66:	eee6 3a06 	vfma.f32	s7, s12, s12
 800eb6a:	eddd 0a63 	vldr	s1, [sp, #396]	; 0x18c
 800eb6e:	ed9d 1a64 	vldr	s2, [sp, #400]	; 0x190
 800eb72:	ed9d 6a65 	vldr	s12, [sp, #404]	; 0x194
 800eb76:	edc4 1a75 	vstr	s3, [r4, #468]	; 0x1d4
 800eb7a:	eea0 4aa0 	vfma.f32	s8, s1, s1
 800eb7e:	eee1 4a01 	vfma.f32	s9, s2, s2
 800eb82:	eea6 5a06 	vfma.f32	s10, s12, s12
 800eb86:	eddd 0a66 	vldr	s1, [sp, #408]	; 0x198
 800eb8a:	ed9d 1a67 	vldr	s2, [sp, #412]	; 0x19c
 800eb8e:	ed94 6ac5 	vldr	s12, [r4, #788]	; 0x314
 800eb92:	edc4 2a89 	vstr	s5, [r4, #548]	; 0x224
 800eb96:	eee0 5aa0 	vfma.f32	s11, s1, s1
 800eb9a:	eea1 6a01 	vfma.f32	s12, s2, s2
 800eb9e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800eba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eba6:	ee66 6a83 	vmul.f32	s13, s13, s6
 800ebaa:	ee27 7a28 	vmul.f32	s14, s14, s17
 800ebae:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800ebb2:	ee66 8aa8 	vmul.f32	s17, s13, s17
 800ebb6:	ed8d 7a89 	vstr	s14, [sp, #548]	; 0x224
 800ebba:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 800ebbe:	edc4 3a93 	vstr	s7, [r4, #588]	; 0x24c
 800ebc2:	ed84 4a9d 	vstr	s8, [r4, #628]	; 0x274
 800ebc6:	edc4 4aa7 	vstr	s9, [r4, #668]	; 0x29c
 800ebca:	ed84 5ab1 	vstr	s10, [r4, #708]	; 0x2c4
 800ebce:	edcd 8a8b 	vstr	s17, [sp, #556]	; 0x22c
 800ebd2:	edc4 5abb 	vstr	s11, [r4, #748]	; 0x2ec
 800ebd6:	ed84 6ac5 	vstr	s12, [r4, #788]	; 0x314
 800ebda:	9300      	str	r3, [sp, #0]
 800ebdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ebde:	f7fc fb1d 	bl	800b21c <kf_update>
 800ebe2:	edd4 6a6d 	vldr	s13, [r4, #436]	; 0x1b4
 800ebe6:	ed94 6a6c 	vldr	s12, [r4, #432]	; 0x1b0
 800ebea:	ed94 7a6e 	vldr	s14, [r4, #440]	; 0x1b8
 800ebee:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800ebf2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ebf6:	eee6 7a06 	vfma.f32	s15, s12, s12
 800ebfa:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ebfe:	eef4 7ae5 	vcmpe.f32	s15, s11
 800ec02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec06:	f100 80bb 	bmi.w	800ed80 <iNemoEngine_API_Update+0x2590>
 800ec0a:	ed5f 5a6c 	vldr	s11, [pc, #-432]	; 800ea5c <iNemoEngine_API_Update+0x226c>
 800ec0e:	ed8d 6a52 	vstr	s12, [sp, #328]	; 0x148
 800ec12:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ec16:	aa4e      	add	r2, sp, #312	; 0x138
 800ec18:	a8ae      	add	r0, sp, #696	; 0x2b8
 800ec1a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800ec1e:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800ec22:	4611      	mov	r1, r2
 800ec24:	ae68      	add	r6, sp, #416	; 0x1a0
 800ec26:	af70      	add	r7, sp, #448	; 0x1c0
 800ec28:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 800ec2c:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800ec30:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 800ec34:	ee27 6a86 	vmul.f32	s12, s15, s12
 800ec38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ec3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ec40:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ec44:	edcd 5a55 	vstr	s11, [sp, #340]	; 0x154
 800ec48:	ed8d 6aae 	vstr	s12, [sp, #696]	; 0x2b8
 800ec4c:	edcd 6aaf 	vstr	s13, [sp, #700]	; 0x2bc
 800ec50:	ed8d 7ab0 	vstr	s14, [sp, #704]	; 0x2c0
 800ec54:	edcd 7ab1 	vstr	s15, [sp, #708]	; 0x2c4
 800ec58:	f7fc f920 	bl	800ae9c <qmult>
 800ec5c:	ed92 6a01 	vldr	s12, [r2, #4]
 800ec60:	edd2 5a00 	vldr	s11, [r2]
 800ec64:	edd2 6a02 	vldr	s13, [r2, #8]
 800ec68:	ed92 7a03 	vldr	s14, [r2, #12]
 800ec6c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 800ec6e:	ee66 7a06 	vmul.f32	s15, s12, s12
 800ec72:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800ec76:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ec7a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800ec7e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ec82:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800ec86:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800ec8a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800ec8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ec92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ec96:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec9a:	edcd 5a4a 	vstr	s11, [sp, #296]	; 0x128
 800ec9e:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 800eca2:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 800eca6:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
 800ecaa:	4634      	mov	r4, r6
 800ecac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ecae:	42bc      	cmp	r4, r7
 800ecb0:	f105 0510 	add.w	r5, r5, #16
 800ecb4:	f106 0610 	add.w	r6, r6, #16
 800ecb8:	f845 0c10 	str.w	r0, [r5, #-16]
 800ecbc:	f845 1c0c 	str.w	r1, [r5, #-12]
 800ecc0:	f845 2c08 	str.w	r2, [r5, #-8]
 800ecc4:	f845 3c04 	str.w	r3, [r5, #-4]
 800ecc8:	d1ef      	bne.n	800ecaa <iNemoEngine_API_Update+0x24ba>
 800ecca:	6830      	ldr	r0, [r6, #0]
 800eccc:	6028      	str	r0, [r5, #0]
 800ecce:	9e06      	ldr	r6, [sp, #24]
 800ecd0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800ecd2:	f8d6 31bc 	ldr.w	r3, [r6, #444]	; 0x1bc
 800ecd6:	6013      	str	r3, [r2, #0]
 800ecd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ecda:	f8d6 31c0 	ldr.w	r3, [r6, #448]	; 0x1c0
 800ecde:	6013      	str	r3, [r2, #0]
 800ece0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800ece2:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 800ece6:	6013      	str	r3, [r2, #0]
 800ece8:	ad4a      	add	r5, sp, #296	; 0x128
 800ecea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecec:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800ecee:	60eb      	str	r3, [r5, #12]
 800ecf0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ecf2:	6028      	str	r0, [r5, #0]
 800ecf4:	6069      	str	r1, [r5, #4]
 800ecf6:	60aa      	str	r2, [r5, #8]
 800ecf8:	edd6 9a75 	vldr	s19, [r6, #468]	; 0x1d4
 800ecfc:	edc3 5a00 	vstr	s11, [r3]
 800ed00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ed02:	f8d6 794c 	ldr.w	r7, [r6, #2380]	; 0x94c
 800ed06:	ed83 6a00 	vstr	s12, [r3]
 800ed0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ed0c:	edc3 6a00 	vstr	s13, [r3]
 800ed10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ed12:	accc      	add	r4, sp, #816	; 0x330
 800ed14:	ed83 7a00 	vstr	s14, [r3]
 800ed18:	4635      	mov	r5, r6
 800ed1a:	f7fd be20 	b.w	800c95e <iNemoEngine_API_Update+0x16e>
 800ed1e:	9906      	ldr	r1, [sp, #24]
 800ed20:	f891 21a2 	ldrb.w	r2, [r1, #418]	; 0x1a2
 800ed24:	2a31      	cmp	r2, #49	; 0x31
 800ed26:	f63f aeca 	bhi.w	800eabe <iNemoEngine_API_Update+0x22ce>
 800ed2a:	3201      	adds	r2, #1
 800ed2c:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 800ed30:	2200      	movs	r2, #0
 800ed32:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 800ed36:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 800ed3a:	e6c0      	b.n	800eabe <iNemoEngine_API_Update+0x22ce>
 800ed3c:	9a06      	ldr	r2, [sp, #24]
 800ed3e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f340 8398 	ble.w	800f476 <iNemoEngine_API_Update+0x2c86>
 800ed46:	3b01      	subs	r3, #1
 800ed48:	6593      	str	r3, [r2, #88]	; 0x58
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 800ed50:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 800ed54:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 800ed58:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 800ed5c:	f7ff bb8b 	b.w	800e476 <iNemoEngine_API_Update+0x1c86>
 800ed60:	7b53      	ldrb	r3, [r2, #13]
 800ed62:	7b92      	ldrb	r2, [r2, #14]
 800ed64:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 800ed68:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 800ed6c:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 800ed70:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 800ed74:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 800ed78:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 800ed7c:	f7ff bb07 	b.w	800e38e <iNemoEngine_API_Update+0x1b9e>
 800ed80:	ee35 5ae7 	vsub.f32	s10, s11, s15
 800ed84:	eef1 5ac5 	vsqrt.f32	s11, s10
 800ed88:	e741      	b.n	800ec0e <iNemoEngine_API_Update+0x241e>
 800ed8a:	f9b5 3974 	ldrsh.w	r3, [r5, #2420]	; 0x974
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f341 8173 	ble.w	801007a <iNemoEngine_API_Update+0x388a>
 800ed94:	3b01      	subs	r3, #1
 800ed96:	f8a5 3974 	strh.w	r3, [r5, #2420]	; 0x974
 800ed9a:	f7fd bd51 	b.w	800c840 <iNemoEngine_API_Update+0x50>
 800ed9e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800eda2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800eda6:	eea7 6a07 	vfma.f32	s12, s14, s14
 800edaa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800edae:	eeb0 8a67 	vmov.f32	s16, s15
 800edb2:	eef0 7a46 	vmov.f32	s15, s12
 800edb6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800edba:	eee8 7ae8 	vfms.f32	s15, s17, s17
 800edbe:	ee17 0a90 	vmov	r0, s15
 800edc2:	f7f1 fbc1 	bl	8000548 <__aeabi_f2d>
 800edc6:	ee78 7a08 	vadd.f32	s15, s16, s16
 800edca:	4602      	mov	r2, r0
 800edcc:	460b      	mov	r3, r1
 800edce:	ee17 0a90 	vmov	r0, s15
 800edd2:	ec43 2b18 	vmov	d8, r2, r3
 800edd6:	f7f1 fbb7 	bl	8000548 <__aeabi_f2d>
 800edda:	eeb0 1a48 	vmov.f32	s2, s16
 800edde:	eef0 1a68 	vmov.f32	s3, s17
 800ede2:	ec41 0b10 	vmov	d0, r0, r1
 800ede6:	f006 ff51 	bl	8015c8c <atan2>
 800edea:	a3eb      	add	r3, pc, #940	; (adr r3, 800f198 <iNemoEngine_API_Update+0x29a8>)
 800edec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf0:	ec51 0b10 	vmov	r0, r1, d0
 800edf4:	f7f1 fc00 	bl	80005f8 <__aeabi_dmul>
 800edf8:	4be9      	ldr	r3, [pc, #932]	; (800f1a0 <iNemoEngine_API_Update+0x29b0>)
 800edfa:	2200      	movs	r2, #0
 800edfc:	f7f1 fa46 	bl	800028c <__adddf3>
 800ee00:	f7f1 fef2 	bl	8000be8 <__aeabi_d2f>
 800ee04:	ee08 0a10 	vmov	s16, r0
 800ee08:	f7fd be3a 	b.w	800ca80 <iNemoEngine_API_Update+0x290>
 800ee0c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ee10:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800ee14:	eea7 6a07 	vfma.f32	s12, s14, s14
 800ee18:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ee1c:	eeb0 8a67 	vmov.f32	s16, s15
 800ee20:	eef0 7a46 	vmov.f32	s15, s12
 800ee24:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800ee28:	eee8 7ae8 	vfms.f32	s15, s17, s17
 800ee2c:	ee17 0a90 	vmov	r0, s15
 800ee30:	f7f1 fb8a 	bl	8000548 <__aeabi_f2d>
 800ee34:	ee78 7a08 	vadd.f32	s15, s16, s16
 800ee38:	4602      	mov	r2, r0
 800ee3a:	460b      	mov	r3, r1
 800ee3c:	ee17 0a90 	vmov	r0, s15
 800ee40:	ec43 2b18 	vmov	d8, r2, r3
 800ee44:	f7f1 fb80 	bl	8000548 <__aeabi_f2d>
 800ee48:	eeb0 1a48 	vmov.f32	s2, s16
 800ee4c:	eef0 1a68 	vmov.f32	s3, s17
 800ee50:	ec41 0b10 	vmov	d0, r0, r1
 800ee54:	f006 ff1a 	bl	8015c8c <atan2>
 800ee58:	a3cf      	add	r3, pc, #828	; (adr r3, 800f198 <iNemoEngine_API_Update+0x29a8>)
 800ee5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5e:	ec51 0b10 	vmov	r0, r1, d0
 800ee62:	f7f1 fbc9 	bl	80005f8 <__aeabi_dmul>
 800ee66:	4bce      	ldr	r3, [pc, #824]	; (800f1a0 <iNemoEngine_API_Update+0x29b0>)
 800ee68:	2200      	movs	r2, #0
 800ee6a:	f7f1 fa0d 	bl	8000288 <__aeabi_dsub>
 800ee6e:	f7f1 febb 	bl	8000be8 <__aeabi_d2f>
 800ee72:	ee08 0a10 	vmov	s16, r0
 800ee76:	f7fd be03 	b.w	800ca80 <iNemoEngine_API_Update+0x290>
 800ee7a:	ed9f baca 	vldr	s22, [pc, #808]	; 800f1a4 <iNemoEngine_API_Update+0x29b4>
 800ee7e:	49ca      	ldr	r1, [pc, #808]	; (800f1a8 <iNemoEngine_API_Update+0x29b8>)
 800ee80:	9806      	ldr	r0, [sp, #24]
 800ee82:	f7fd beba 	b.w	800cbfa <iNemoEngine_API_Update+0x40a>
 800ee86:	ee7c 7a27 	vadd.f32	s15, s24, s15
 800ee8a:	ee17 0a90 	vmov	r0, s15
 800ee8e:	f7f1 fb5b 	bl	8000548 <__aeabi_f2d>
 800ee92:	ec41 0b10 	vmov	d0, r0, r1
 800ee96:	f007 fec3 	bl	8016c20 <floor>
 800ee9a:	ec51 0b10 	vmov	r0, r1, d0
 800ee9e:	f7f1 fea3 	bl	8000be8 <__aeabi_d2f>
 800eea2:	ee0c 0a10 	vmov	s24, r0
 800eea6:	f7fe b937 	b.w	800d118 <iNemoEngine_API_Update+0x928>
 800eeaa:	ee78 7a27 	vadd.f32	s15, s16, s15
 800eeae:	ee17 0a90 	vmov	r0, s15
 800eeb2:	f7f1 fb49 	bl	8000548 <__aeabi_f2d>
 800eeb6:	ec41 0b10 	vmov	d0, r0, r1
 800eeba:	f007 feb1 	bl	8016c20 <floor>
 800eebe:	ec51 0b10 	vmov	r0, r1, d0
 800eec2:	f7f1 fe91 	bl	8000be8 <__aeabi_d2f>
 800eec6:	ee08 0a10 	vmov	s16, r0
 800eeca:	f7fe b8fa 	b.w	800d0c2 <iNemoEngine_API_Update+0x8d2>
 800eece:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800eed2:	ee17 0a90 	vmov	r0, s15
 800eed6:	f7f1 fb37 	bl	8000548 <__aeabi_f2d>
 800eeda:	ec41 0b10 	vmov	d0, r0, r1
 800eede:	f007 fe9f 	bl	8016c20 <floor>
 800eee2:	ec51 0b10 	vmov	r0, r1, d0
 800eee6:	f7f1 fe7f 	bl	8000be8 <__aeabi_d2f>
 800eeea:	ee08 0a90 	vmov	s17, r0
 800eeee:	f7fe b8bd 	b.w	800d06c <iNemoEngine_API_Update+0x87c>
 800eef2:	2c00      	cmp	r4, #0
 800eef4:	f47f aa59 	bne.w	800e3aa <iNemoEngine_API_Update+0x1bba>
 800eef8:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
 800eefc:	f88d 40ea 	strb.w	r4, [sp, #234]	; 0xea
 800ef00:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 800ef04:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 800ef08:	f7ff ba5c 	b.w	800e3c4 <iNemoEngine_API_Update+0x1bd4>
 800ef0c:	eddf 5aa7 	vldr	s11, [pc, #668]	; 800f1ac <iNemoEngine_API_Update+0x29bc>
 800ef10:	ed9f 4aa7 	vldr	s8, [pc, #668]	; 800f1b0 <iNemoEngine_API_Update+0x29c0>
 800ef14:	ed9f 6aa7 	vldr	s12, [pc, #668]	; 800f1b4 <iNemoEngine_API_Update+0x29c4>
 800ef18:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 800f1b8 <iNemoEngine_API_Update+0x29c8>
 800ef1c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 800f1bc <iNemoEngine_API_Update+0x29cc>
 800ef20:	f7ff b9b2 	b.w	800e288 <iNemoEngine_API_Update+0x1a98>
 800ef24:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800ef28:	2400      	movs	r4, #0
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	f7ff b89f 	b.w	800e06e <iNemoEngine_API_Update+0x187e>
 800ef30:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ef34:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 800ef38:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800ef3c:	eee7 4a84 	vfma.f32	s9, s15, s8
 800ef40:	f7ff b86b 	b.w	800e01a <iNemoEngine_API_Update+0x182a>
 800ef44:	3305      	adds	r3, #5
 800ef46:	6593      	str	r3, [r2, #88]	; 0x58
 800ef48:	f7ff ba95 	b.w	800e476 <iNemoEngine_API_Update+0x1c86>
 800ef4c:	edd2 4a48 	vldr	s9, [r2, #288]	; 0x120
 800ef50:	eef4 4ae8 	vcmpe.f32	s9, s17
 800ef54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef58:	f341 8112 	ble.w	8010180 <iNemoEngine_API_Update+0x3990>
 800ef5c:	ed92 7a32 	vldr	s14, [r2, #200]	; 0xc8
 800ef60:	eef4 8ac7 	vcmpe.f32	s17, s14
 800ef64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef68:	4613      	mov	r3, r2
 800ef6a:	f101 8392 	bmi.w	8010692 <iNemoEngine_API_Update+0x3ea2>
 800ef6e:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 800ef72:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ef76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef7a:	f141 83a2 	bpl.w	80106c2 <iNemoEngine_API_Update+0x3ed2>
 800ef7e:	edd3 3a33 	vldr	s7, [r3, #204]	; 0xcc
 800ef82:	ed93 4a35 	vldr	s8, [r3, #212]	; 0xd4
 800ef86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef8a:	ee34 4a63 	vsub.f32	s8, s8, s7
 800ef8e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ef92:	ee24 7a07 	vmul.f32	s14, s8, s14
 800ef96:	ee87 fa27 	vdiv.f32	s30, s14, s15
 800ef9a:	ee3f fa23 	vadd.f32	s30, s30, s7
 800ef9e:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800efa2:	eef4 8ae7 	vcmpe.f32	s17, s15
 800efa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efaa:	f2c1 83a3 	blt.w	80106f4 <iNemoEngine_API_Update+0x3f04>
 800efae:	9b06      	ldr	r3, [sp, #24]
 800efb0:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800efb4:	eef4 8ac7 	vcmpe.f32	s17, s14
 800efb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efbc:	f141 86ad 	bpl.w	8010d1a <iNemoEngine_API_Update+0x452a>
 800efc0:	edd3 3a37 	vldr	s7, [r3, #220]	; 0xdc
 800efc4:	ed93 4a39 	vldr	s8, [r3, #228]	; 0xe4
 800efc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800efcc:	ee34 4a63 	vsub.f32	s8, s8, s7
 800efd0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800efd4:	ee64 7a27 	vmul.f32	s15, s8, s15
 800efd8:	ee87 fa87 	vdiv.f32	s30, s15, s14
 800efdc:	ee3f fa23 	vadd.f32	s30, s30, s7
 800efe0:	9b06      	ldr	r3, [sp, #24]
 800efe2:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 800efe6:	eef4 8ae7 	vcmpe.f32	s17, s15
 800efea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efee:	f2c1 83a3 	blt.w	8010738 <iNemoEngine_API_Update+0x3f48>
 800eff2:	9b06      	ldr	r3, [sp, #24]
 800eff4:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 800eff8:	eef4 8ac7 	vcmpe.f32	s17, s14
 800effc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f000:	f141 86ca 	bpl.w	8010d98 <iNemoEngine_API_Update+0x45a8>
 800f004:	edd3 3a3b 	vldr	s7, [r3, #236]	; 0xec
 800f008:	ed93 4a3d 	vldr	s8, [r3, #244]	; 0xf4
 800f00c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f010:	ee34 4a63 	vsub.f32	s8, s8, s7
 800f014:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800f018:	ee64 7a27 	vmul.f32	s15, s8, s15
 800f01c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 800f020:	ee3f fa23 	vadd.f32	s30, s30, s7
 800f024:	9b06      	ldr	r3, [sp, #24]
 800f026:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 800f02a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f032:	f2c1 83a3 	blt.w	801077c <iNemoEngine_API_Update+0x3f8c>
 800f036:	9b06      	ldr	r3, [sp, #24]
 800f038:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 800f03c:	eef4 8ac7 	vcmpe.f32	s17, s14
 800f040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f044:	f141 866c 	bpl.w	8010d20 <iNemoEngine_API_Update+0x4530>
 800f048:	edd3 3a3f 	vldr	s7, [r3, #252]	; 0xfc
 800f04c:	ed93 4a41 	vldr	s8, [r3, #260]	; 0x104
 800f050:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f054:	ee34 4a63 	vsub.f32	s8, s8, s7
 800f058:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800f05c:	ee64 7a27 	vmul.f32	s15, s8, s15
 800f060:	ee87 fa87 	vdiv.f32	s30, s15, s14
 800f064:	ee3f fa23 	vadd.f32	s30, s30, s7
 800f068:	9b06      	ldr	r3, [sp, #24]
 800f06a:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 800f06e:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f076:	f2c1 83a3 	blt.w	80107c0 <iNemoEngine_API_Update+0x3fd0>
 800f07a:	9b06      	ldr	r3, [sp, #24]
 800f07c:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 800f080:	eef4 8ac7 	vcmpe.f32	s17, s14
 800f084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f088:	f141 863c 	bpl.w	8010d04 <iNemoEngine_API_Update+0x4514>
 800f08c:	edd3 3a43 	vldr	s7, [r3, #268]	; 0x10c
 800f090:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 800f094:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f098:	ee34 4a63 	vsub.f32	s8, s8, s7
 800f09c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800f0a0:	ee64 7a27 	vmul.f32	s15, s8, s15
 800f0a4:	ee87 fa87 	vdiv.f32	s30, s15, s14
 800f0a8:	ee3f fa23 	vadd.f32	s30, s30, s7
 800f0ac:	9b06      	ldr	r3, [sp, #24]
 800f0ae:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 800f0b2:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ba:	f6fe ae38 	blt.w	800dd2e <iNemoEngine_API_Update+0x153e>
 800f0be:	9b06      	ldr	r3, [sp, #24]
 800f0c0:	ed93 4a47 	vldr	s8, [r3, #284]	; 0x11c
 800f0c4:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 800f0c8:	ee74 4ae7 	vsub.f32	s9, s9, s15
 800f0cc:	ee37 7a44 	vsub.f32	s14, s14, s8
 800f0d0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800f0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0d8:	ee87 faa4 	vdiv.f32	s30, s15, s9
 800f0dc:	ee3f fa04 	vadd.f32	s30, s30, s8
 800f0e0:	f7fe be25 	b.w	800dd2e <iNemoEngine_API_Update+0x153e>
 800f0e4:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800f0e8:	ee17 0a90 	vmov	r0, s15
 800f0ec:	f7f1 fa2c 	bl	8000548 <__aeabi_f2d>
 800f0f0:	ec41 0b10 	vmov	d0, r0, r1
 800f0f4:	f007 fd94 	bl	8016c20 <floor>
 800f0f8:	ec51 0b10 	vmov	r0, r1, d0
 800f0fc:	f7f1 fd74 	bl	8000be8 <__aeabi_d2f>
 800f100:	ee08 0a90 	vmov	s17, r0
 800f104:	f7fe b930 	b.w	800d368 <iNemoEngine_API_Update+0xb78>
 800f108:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800f10c:	ee17 0a90 	vmov	r0, s15
 800f110:	f7f1 fa1a 	bl	8000548 <__aeabi_f2d>
 800f114:	ec41 0b10 	vmov	d0, r0, r1
 800f118:	f007 fd82 	bl	8016c20 <floor>
 800f11c:	ec51 0b10 	vmov	r0, r1, d0
 800f120:	f7f1 fd62 	bl	8000be8 <__aeabi_d2f>
 800f124:	ee08 0a90 	vmov	s17, r0
 800f128:	f7fe b8b5 	b.w	800d296 <iNemoEngine_API_Update+0xaa6>
 800f12c:	ee7c 7a27 	vadd.f32	s15, s24, s15
 800f130:	ee17 0a90 	vmov	r0, s15
 800f134:	f7f1 fa08 	bl	8000548 <__aeabi_f2d>
 800f138:	ec41 0b10 	vmov	d0, r0, r1
 800f13c:	f007 fd70 	bl	8016c20 <floor>
 800f140:	ec51 0b10 	vmov	r0, r1, d0
 800f144:	f7f1 fd50 	bl	8000be8 <__aeabi_d2f>
 800f148:	ee0c 0a10 	vmov	s24, r0
 800f14c:	f7fe b878 	b.w	800d240 <iNemoEngine_API_Update+0xa50>
 800f150:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f154:	ee17 0a90 	vmov	r0, s15
 800f158:	f7f1 f9f6 	bl	8000548 <__aeabi_f2d>
 800f15c:	ec41 0b10 	vmov	d0, r0, r1
 800f160:	f007 fd5e 	bl	8016c20 <floor>
 800f164:	ec51 0b10 	vmov	r0, r1, d0
 800f168:	f7f1 fd3e 	bl	8000be8 <__aeabi_d2f>
 800f16c:	ee08 0a10 	vmov	s16, r0
 800f170:	f7fe b83b 	b.w	800d1ea <iNemoEngine_API_Update+0x9fa>
 800f174:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f178:	ee17 0a90 	vmov	r0, s15
 800f17c:	f7f1 f9e4 	bl	8000548 <__aeabi_f2d>
 800f180:	ec41 0b10 	vmov	d0, r0, r1
 800f184:	f007 fd4c 	bl	8016c20 <floor>
 800f188:	ec51 0b10 	vmov	r0, r1, d0
 800f18c:	f7f1 fd2c 	bl	8000be8 <__aeabi_d2f>
 800f190:	ee08 0a10 	vmov	s16, r0
 800f194:	f7fe b93e 	b.w	800d414 <iNemoEngine_API_Update+0xc24>
 800f198:	20000000 	.word	0x20000000
 800f19c:	404ca5dc 	.word	0x404ca5dc
 800f1a0:	40568000 	.word	0x40568000
 800f1a4:	3dcccccd 	.word	0x3dcccccd
 800f1a8:	3a83126f 	.word	0x3a83126f
 800f1ac:	3c75c28f 	.word	0x3c75c28f
 800f1b0:	391d4951 	.word	0x391d4951
 800f1b4:	383cbe62 	.word	0x383cbe62
 800f1b8:	469c3e00 	.word	0x469c3e00
 800f1bc:	43168000 	.word	0x43168000
 800f1c0:	3d088889 	.word	0x3d088889
 800f1c4:	3e4ccccd 	.word	0x3e4ccccd
 800f1c8:	ee7c 7a27 	vadd.f32	s15, s24, s15
 800f1cc:	ee17 0a90 	vmov	r0, s15
 800f1d0:	f7f1 f9ba 	bl	8000548 <__aeabi_f2d>
 800f1d4:	ec41 0b10 	vmov	d0, r0, r1
 800f1d8:	f007 fd22 	bl	8016c20 <floor>
 800f1dc:	ec51 0b10 	vmov	r0, r1, d0
 800f1e0:	f7f1 fd02 	bl	8000be8 <__aeabi_d2f>
 800f1e4:	ee0c 0a10 	vmov	s24, r0
 800f1e8:	f7fe b8e9 	b.w	800d3be <iNemoEngine_API_Update+0xbce>
 800f1ec:	2a00      	cmp	r2, #0
 800f1ee:	f43f a910 	beq.w	800e412 <iNemoEngine_API_Update+0x1c22>
 800f1f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f1f6:	ee39 9a47 	vsub.f32	s18, s18, s14
 800f1fa:	eef0 7ac9 	vabs.f32	s15, s18
 800f1fe:	ee29 9a09 	vmul.f32	s18, s18, s18
 800f202:	eef4 7ac6 	vcmpe.f32	s15, s12
 800f206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f20a:	eeb4 9ac7 	vcmpe.f32	s18, s14
 800f20e:	bfb8      	it	lt
 800f210:	eef0 7a46 	vmovlt.f32	s15, s12
 800f214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f218:	edcd 7a8d 	vstr	s15, [sp, #564]	; 0x234
 800f21c:	f77f a900 	ble.w	800e420 <iNemoEngine_API_Update+0x1c30>
 800f220:	eddd 7a86 	vldr	s15, [sp, #536]	; 0x218
 800f224:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f228:	eeb4 9ac7 	vcmpe.f32	s18, s14
 800f22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f230:	f77f a8f6 	ble.w	800e420 <iNemoEngine_API_Update+0x1c30>
 800f234:	ee67 7a89 	vmul.f32	s15, s15, s18
 800f238:	edcd 7a86 	vstr	s15, [sp, #536]	; 0x218
 800f23c:	eddd 7a87 	vldr	s15, [sp, #540]	; 0x21c
 800f240:	ee67 7a89 	vmul.f32	s15, s15, s18
 800f244:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800f248:	eddd 7a88 	vldr	s15, [sp, #544]	; 0x220
 800f24c:	ee27 9a89 	vmul.f32	s18, s15, s18
 800f250:	ed8d 9a88 	vstr	s18, [sp, #544]	; 0x220
 800f254:	f7ff b8e4 	b.w	800e420 <iNemoEngine_API_Update+0x1c30>
 800f258:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800f25c:	2a01      	cmp	r2, #1
 800f25e:	f000 877b 	beq.w	8010158 <iNemoEngine_API_Update+0x3968>
 800f262:	2b02      	cmp	r3, #2
 800f264:	f040 8778 	bne.w	8010158 <iNemoEngine_API_Update+0x3968>
 800f268:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 800f26c:	9a06      	ldr	r2, [sp, #24]
 800f26e:	ee87 7a8d 	vdiv.f32	s14, s15, s26
 800f272:	f240 1301 	movw	r3, #257	; 0x101
 800f276:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
 800f27a:	2301      	movs	r3, #1
 800f27c:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 800f280:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800f284:	ed92 6a64 	vldr	s12, [r2, #400]	; 0x190
 800f288:	ed8d 7a3d 	vstr	s14, [sp, #244]	; 0xf4
 800f28c:	eecb 5a27 	vdiv.f32	s11, s22, s15
 800f290:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 800f294:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800f298:	eecd 7aa7 	vdiv.f32	s15, s27, s15
 800f29c:	eeb4 5a00 	vmov.f32	s10, #64	; 0x3e000000  0.125
 800f2a0:	ee26 6a05 	vmul.f32	s12, s12, s10
 800f2a4:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 800f2a8:	eeb4 6ae8 	vcmpe.f32	s12, s17
 800f2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2b0:	f280 87d8 	bge.w	8010264 <iNemoEngine_API_Update+0x3a74>
 800f2b4:	ed9d 6a18 	vldr	s12, [sp, #96]	; 0x60
 800f2b8:	eeb4 dac6 	vcmpe.f32	s26, s12
 800f2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2c0:	f341 83a4 	ble.w	8010a0c <iNemoEngine_API_Update+0x421c>
 800f2c4:	ed9d 6a16 	vldr	s12, [sp, #88]	; 0x58
 800f2c8:	eeb4 6acb 	vcmpe.f32	s12, s22
 800f2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d0:	f341 839c 	ble.w	8010a0c <iNemoEngine_API_Update+0x421c>
 800f2d4:	ed9d 6a17 	vldr	s12, [sp, #92]	; 0x5c
 800f2d8:	eeb4 6aed 	vcmpe.f32	s12, s27
 800f2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e0:	f341 8394 	ble.w	8010a0c <iNemoEngine_API_Update+0x421c>
 800f2e4:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 800f2e8:	eeb4 8ac6 	vcmpe.f32	s16, s12
 800f2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2f0:	f141 838c 	bpl.w	8010a0c <iNemoEngine_API_Update+0x421c>
 800f2f4:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f2f8:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 800f2fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f300:	eef4 7ac6 	vcmpe.f32	s15, s12
 800f304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f308:	f141 8380 	bpl.w	8010a0c <iNemoEngine_API_Update+0x421c>
 800f30c:	2300      	movs	r3, #0
 800f30e:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 800f312:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 800f316:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800f31a:	2a00      	cmp	r2, #0
 800f31c:	f040 87c7 	bne.w	80102ae <iNemoEngine_API_Update+0x3abe>
 800f320:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f322:	a840      	add	r0, sp, #256	; 0x100
 800f324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f328:	4613      	mov	r3, r2
 800f32a:	edd2 7a00 	vldr	s15, [r2]
 800f32e:	3101      	adds	r1, #1
 800f330:	330c      	adds	r3, #12
 800f332:	3204      	adds	r2, #4
 800f334:	461c      	mov	r4, r3
 800f336:	ed94 7a00 	vldr	s14, [r4]
 800f33a:	330c      	adds	r3, #12
 800f33c:	4598      	cmp	r8, r3
 800f33e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f342:	d1f7      	bne.n	800f334 <iNemoEngine_API_Update+0x2b44>
 800f344:	2902      	cmp	r1, #2
 800f346:	ece0 7a01 	vstmia	r0!, {s15}
 800f34a:	f108 0804 	add.w	r8, r8, #4
 800f34e:	d1eb      	bne.n	800f328 <iNemoEngine_API_Update+0x2b38>
 800f350:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 800f1c0 <iNemoEngine_API_Update+0x29d0>
 800f354:	9b06      	ldr	r3, [sp, #24]
 800f356:	eddd 4a40 	vldr	s9, [sp, #256]	; 0x100
 800f35a:	ed9d 5a41 	vldr	s10, [sp, #260]	; 0x104
 800f35e:	eddd 5a42 	vldr	s11, [sp, #264]	; 0x108
 800f362:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800f364:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 800f368:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800f36c:	ee25 5a27 	vmul.f32	s10, s10, s15
 800f370:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800f374:	f503 71b2 	add.w	r1, r3, #356	; 0x164
 800f378:	4602      	mov	r2, r0
 800f37a:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 800f37e:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 800f382:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 800f386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f38e:	f103 030c 	add.w	r3, r3, #12
 800f392:	bf88      	it	hi
 800f394:	eef0 7a47 	vmovhi.f32	s15, s14
 800f398:	4293      	cmp	r3, r2
 800f39a:	d1f2      	bne.n	800f382 <iNemoEngine_API_Update+0x2b92>
 800f39c:	1d1a      	adds	r2, r3, #4
 800f39e:	4291      	cmp	r1, r2
 800f3a0:	ece4 7a01 	vstmia	r4!, {s15}
 800f3a4:	d1e9      	bne.n	800f37a <iNemoEngine_API_Update+0x2b8a>
 800f3a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3a8:	ed9d 4a3d 	vldr	s8, [sp, #244]	; 0xf4
 800f3ac:	edd3 7a00 	vldr	s15, [r3]
 800f3b0:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 800f3b4:	ed9d 6a3f 	vldr	s12, [sp, #252]	; 0xfc
 800f3b8:	9b06      	ldr	r3, [sp, #24]
 800f3ba:	ee97 4aa4 	vfnms.f32	s8, s15, s9
 800f3be:	785b      	ldrb	r3, [r3, #1]
 800f3c0:	ee97 7a85 	vfnms.f32	s14, s15, s10
 800f3c4:	ee97 6aa5 	vfnms.f32	s12, s15, s11
 800f3c8:	eef0 4a47 	vmov.f32	s9, s14
 800f3cc:	ed8d 4a40 	vstr	s8, [sp, #256]	; 0x100
 800f3d0:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800f3d4:	ed8d 6a42 	vstr	s12, [sp, #264]	; 0x108
 800f3d8:	b13b      	cbz	r3, 800f3ea <iNemoEngine_API_Update+0x2bfa>
 800f3da:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800f3de:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e6:	f101 83e1 	bmi.w	8010bac <iNemoEngine_API_Update+0x43bc>
 800f3ea:	9b06      	ldr	r3, [sp, #24]
 800f3ec:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
 800f3f0:	2a1e      	cmp	r2, #30
 800f3f2:	f001 843c 	beq.w	8010c6e <iNemoEngine_API_Update+0x447e>
 800f3f6:	1c53      	adds	r3, r2, #1
 800f3f8:	2aff      	cmp	r2, #255	; 0xff
 800f3fa:	9906      	ldr	r1, [sp, #24]
 800f3fc:	bf14      	ite	ne
 800f3fe:	b2db      	uxtbne	r3, r3
 800f400:	23ff      	moveq	r3, #255	; 0xff
 800f402:	2200      	movs	r2, #0
 800f404:	f881 31a1 	strb.w	r3, [r1, #417]	; 0x1a1
 800f408:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 800f40c:	464b      	mov	r3, r9
 800f40e:	f7ff bb46 	b.w	800ea9e <iNemoEngine_API_Update+0x22ae>
 800f412:	ed1f 7a94 	vldr	s14, [pc, #-592]	; 800f1c4 <iNemoEngine_API_Update+0x29d4>
 800f416:	4603      	mov	r3, r0
 800f418:	f7fd bc03 	b.w	800cc22 <iNemoEngine_API_Update+0x432>
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	f43e afe0 	beq.w	800e3e2 <iNemoEngine_API_Update+0x1bf2>
 800f422:	f89d 30e8 	ldrb.w	r3, [sp, #232]	; 0xe8
 800f426:	2b01      	cmp	r3, #1
 800f428:	d002      	beq.n	800f430 <iNemoEngine_API_Update+0x2c40>
 800f42a:	2c01      	cmp	r4, #1
 800f42c:	f47e afe2 	bne.w	800e3f4 <iNemoEngine_API_Update+0x1c04>
 800f430:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 800f434:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800f438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f43c:	bfb8      	it	lt
 800f43e:	eeb0 5a67 	vmovlt.f32	s10, s15
 800f442:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 800f446:	ed8d 5a84 	vstr	s10, [sp, #528]	; 0x210
 800f44a:	ed8d 5a85 	vstr	s10, [sp, #532]	; 0x214
 800f44e:	f7fe bfd1 	b.w	800e3f4 <iNemoEngine_API_Update+0x1c04>
 800f452:	9b06      	ldr	r3, [sp, #24]
 800f454:	49c6      	ldr	r1, [pc, #792]	; (800f770 <iNemoEngine_API_Update+0x2f80>)
 800f456:	ed93 ba05 	vldr	s22, [r3, #20]
 800f45a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800f45e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f462:	4618      	mov	r0, r3
 800f464:	f7fd bbc9 	b.w	800cbfa <iNemoEngine_API_Update+0x40a>
 800f468:	9b06      	ldr	r3, [sp, #24]
 800f46a:	49c2      	ldr	r1, [pc, #776]	; (800f774 <iNemoEngine_API_Update+0x2f84>)
 800f46c:	ed93 ba05 	vldr	s22, [r3, #20]
 800f470:	4618      	mov	r0, r3
 800f472:	f7fd bbc2 	b.w	800cbfa <iNemoEngine_API_Update+0x40a>
 800f476:	4611      	mov	r1, r2
 800f478:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800f47a:	2a00      	cmp	r2, #0
 800f47c:	dd0c      	ble.n	800f498 <iNemoEngine_API_Update+0x2ca8>
 800f47e:	ed9d 7a03 	vldr	s14, [sp, #12]
 800f482:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 800f486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f48e:	dd03      	ble.n	800f498 <iNemoEngine_API_Update+0x2ca8>
 800f490:	3a01      	subs	r2, #1
 800f492:	65ca      	str	r2, [r1, #92]	; 0x5c
 800f494:	f7fe bfef 	b.w	800e476 <iNemoEngine_API_Update+0x1c86>
 800f498:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 800f49c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800f4a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4a4:	eeb4 bac7 	vcmpe.f32	s22, s14
 800f4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ac:	f57e afe3 	bpl.w	800e476 <iNemoEngine_API_Update+0x1c86>
 800f4b0:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 800f4b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4b8:	eef4 dae7 	vcmpe.f32	s27, s15
 800f4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c0:	f57e afd9 	bpl.w	800e476 <iNemoEngine_API_Update+0x1c86>
 800f4c4:	ee7d 7a0d 	vadd.f32	s15, s26, s26
 800f4c8:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 800f4cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d4:	f341 8492 	ble.w	8010dfc <iNemoEngine_API_Update+0x460c>
 800f4d8:	9a06      	ldr	r2, [sp, #24]
 800f4da:	3303      	adds	r3, #3
 800f4dc:	e434      	b.n	800ed48 <iNemoEngine_API_Update+0x2558>
 800f4de:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800f778 <iNemoEngine_API_Update+0x2f88>
 800f4e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ea:	f57e ae7b 	bpl.w	800e1e4 <iNemoEngine_API_Update+0x19f4>
 800f4ee:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800f77c <iNemoEngine_API_Update+0x2f8c>
 800f4f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fa:	f280 80c9 	bge.w	800f690 <iNemoEngine_API_Update+0x2ea0>
 800f4fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f502:	eddf 6a9f 	vldr	s13, [pc, #636]	; 800f780 <iNemoEngine_API_Update+0x2f90>
 800f506:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50e:	f280 80d5 	bge.w	800f6bc <iNemoEngine_API_Update+0x2ecc>
 800f512:	eddf 6a9c 	vldr	s13, [pc, #624]	; 800f784 <iNemoEngine_API_Update+0x2f94>
 800f516:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51e:	f280 80e3 	bge.w	800f6e8 <iNemoEngine_API_Update+0x2ef8>
 800f522:	eddf 6a99 	vldr	s13, [pc, #612]	; 800f788 <iNemoEngine_API_Update+0x2f98>
 800f526:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f52e:	f280 80f1 	bge.w	800f714 <iNemoEngine_API_Update+0x2f24>
 800f532:	eddf 6a96 	vldr	s13, [pc, #600]	; 800f78c <iNemoEngine_API_Update+0x2f9c>
 800f536:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f53e:	f280 80ff 	bge.w	800f740 <iNemoEngine_API_Update+0x2f50>
 800f542:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f546:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54e:	db0d      	blt.n	800f56c <iNemoEngine_API_Update+0x2d7c>
 800f550:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f554:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800f790 <iNemoEngine_API_Update+0x2fa0>
 800f558:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800f55c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800f560:	ee66 6a87 	vmul.f32	s13, s13, s14
 800f564:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800f794 <iNemoEngine_API_Update+0x2fa4>
 800f568:	eea6 7a86 	vfma.f32	s14, s13, s12
 800f56c:	eddf 6a8a 	vldr	s13, [pc, #552]	; 800f798 <iNemoEngine_API_Update+0x2fa8>
 800f570:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f578:	f141 82fa 	bpl.w	8010b70 <iNemoEngine_API_Update+0x4380>
 800f57c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800f778 <iNemoEngine_API_Update+0x2f88>
 800f580:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f588:	f2c1 82fa 	blt.w	8010b80 <iNemoEngine_API_Update+0x4390>
 800f58c:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800f77c <iNemoEngine_API_Update+0x2f8c>
 800f590:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f598:	f141 8296 	bpl.w	8010ac8 <iNemoEngine_API_Update+0x42d8>
 800f59c:	ed9f 6a76 	vldr	s12, [pc, #472]	; 800f778 <iNemoEngine_API_Update+0x2f88>
 800f5a0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800f79c <iNemoEngine_API_Update+0x2fac>
 800f5a4:	eddf 5a7e 	vldr	s11, [pc, #504]	; 800f7a0 <iNemoEngine_API_Update+0x2fb0>
 800f5a8:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800f5ac:	ee26 6a26 	vmul.f32	s12, s12, s13
 800f5b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f5b4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f5b8:	ed9f 6a71 	vldr	s12, [pc, #452]	; 800f780 <iNemoEngine_API_Update+0x2f90>
 800f5bc:	eef4 7ac6 	vcmpe.f32	s15, s12
 800f5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5c4:	f2c1 8296 	blt.w	8010af4 <iNemoEngine_API_Update+0x4304>
 800f5c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800f784 <iNemoEngine_API_Update+0x2f94>
 800f5cc:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d4:	f141 8296 	bpl.w	8010b04 <iNemoEngine_API_Update+0x4314>
 800f5d8:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800f780 <iNemoEngine_API_Update+0x2f90>
 800f5dc:	eddf 6a71 	vldr	s13, [pc, #452]	; 800f7a4 <iNemoEngine_API_Update+0x2fb4>
 800f5e0:	eddf 5a71 	vldr	s11, [pc, #452]	; 800f7a8 <iNemoEngine_API_Update+0x2fb8>
 800f5e4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800f5e8:	ee26 6a26 	vmul.f32	s12, s12, s13
 800f5ec:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f7ac <iNemoEngine_API_Update+0x2fbc>
 800f5f0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f5f4:	ed9f 6a64 	vldr	s12, [pc, #400]	; 800f788 <iNemoEngine_API_Update+0x2f98>
 800f5f8:	eef4 7ac6 	vcmpe.f32	s15, s12
 800f5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f600:	f2c1 8296 	blt.w	8010b30 <iNemoEngine_API_Update+0x4340>
 800f604:	eddf 6a61 	vldr	s13, [pc, #388]	; 800f78c <iNemoEngine_API_Update+0x2f9c>
 800f608:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f610:	f141 8296 	bpl.w	8010b40 <iNemoEngine_API_Update+0x4350>
 800f614:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 800f788 <iNemoEngine_API_Update+0x2f98>
 800f618:	eddf 6a65 	vldr	s13, [pc, #404]	; 800f7b0 <iNemoEngine_API_Update+0x2fc0>
 800f61c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800f620:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 800f624:	ee26 6a26 	vmul.f32	s12, s12, s13
 800f628:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 800f62c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f630:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f634:	eef4 7ac6 	vcmpe.f32	s15, s12
 800f638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f63c:	db0d      	blt.n	800f65a <iNemoEngine_API_Update+0x2e6a>
 800f63e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f642:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800f7b4 <iNemoEngine_API_Update+0x2fc4>
 800f646:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800f64a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800f64e:	ee26 6a26 	vmul.f32	s12, s12, s13
 800f652:	eddf 6a59 	vldr	s13, [pc, #356]	; 800f7b8 <iNemoEngine_API_Update+0x2fc8>
 800f656:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f65a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f65e:	ee37 6a06 	vadd.f32	s12, s14, s12
 800f662:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800f666:	eec5 5a06 	vdiv.f32	s11, s10, s12
 800f66a:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800f77c <iNemoEngine_API_Update+0x2f8c>
 800f66e:	ed9f 4a42 	vldr	s8, [pc, #264]	; 800f778 <iNemoEngine_API_Update+0x2f88>
 800f672:	eef4 5ac6 	vcmpe.f32	s11, s12
 800f676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67a:	bfb8      	it	lt
 800f67c:	eef0 5a46 	vmovlt.f32	s11, s12
 800f680:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 800f7bc <iNemoEngine_API_Update+0x2fcc>
 800f684:	ee25 4a84 	vmul.f32	s8, s11, s8
 800f688:	ee25 6a86 	vmul.f32	s12, s11, s12
 800f68c:	f7fe bdfc 	b.w	800e288 <iNemoEngine_API_Update+0x1a98>
 800f690:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800f780 <iNemoEngine_API_Update+0x2f90>
 800f694:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f69c:	d50e      	bpl.n	800f6bc <iNemoEngine_API_Update+0x2ecc>
 800f69e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800f77c <iNemoEngine_API_Update+0x2f8c>
 800f6a2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800f7c0 <iNemoEngine_API_Update+0x2fd0>
 800f6a6:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800f7c4 <iNemoEngine_API_Update+0x2fd4>
 800f6aa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800f6ae:	ee66 6a87 	vmul.f32	s13, s13, s14
 800f6b2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800f7c8 <iNemoEngine_API_Update+0x2fd8>
 800f6b6:	eea6 7a86 	vfma.f32	s14, s13, s12
 800f6ba:	e72a      	b.n	800f512 <iNemoEngine_API_Update+0x2d22>
 800f6bc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f784 <iNemoEngine_API_Update+0x2f94>
 800f6c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6c8:	d50e      	bpl.n	800f6e8 <iNemoEngine_API_Update+0x2ef8>
 800f6ca:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800f780 <iNemoEngine_API_Update+0x2f90>
 800f6ce:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800f7a8 <iNemoEngine_API_Update+0x2fb8>
 800f6d2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800f6d6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800f6da:	ee66 6a87 	vmul.f32	s13, s13, s14
 800f6de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f6e2:	eea6 7a86 	vfma.f32	s14, s13, s12
 800f6e6:	e71c      	b.n	800f522 <iNemoEngine_API_Update+0x2d32>
 800f6e8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800f788 <iNemoEngine_API_Update+0x2f98>
 800f6ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f4:	d50e      	bpl.n	800f714 <iNemoEngine_API_Update+0x2f24>
 800f6f6:	eddf 6a23 	vldr	s13, [pc, #140]	; 800f784 <iNemoEngine_API_Update+0x2f94>
 800f6fa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800f6fe:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800f702:	ee66 6a87 	vmul.f32	s13, s13, s14
 800f706:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 800f70a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800f70e:	eea6 7a86 	vfma.f32	s14, s13, s12
 800f712:	e70e      	b.n	800f532 <iNemoEngine_API_Update+0x2d42>
 800f714:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800f78c <iNemoEngine_API_Update+0x2f9c>
 800f718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f720:	d50e      	bpl.n	800f740 <iNemoEngine_API_Update+0x2f50>
 800f722:	eddf 6a19 	vldr	s13, [pc, #100]	; 800f788 <iNemoEngine_API_Update+0x2f98>
 800f726:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800f7cc <iNemoEngine_API_Update+0x2fdc>
 800f72a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800f72e:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800f732:	ee66 6a87 	vmul.f32	s13, s13, s14
 800f736:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800f73a:	eea6 7a86 	vfma.f32	s14, s13, s12
 800f73e:	e700      	b.n	800f542 <iNemoEngine_API_Update+0x2d52>
 800f740:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f744:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f74c:	f57f af00 	bpl.w	800f550 <iNemoEngine_API_Update+0x2d60>
 800f750:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800f78c <iNemoEngine_API_Update+0x2f9c>
 800f754:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800f7d0 <iNemoEngine_API_Update+0x2fe0>
 800f758:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800f7d4 <iNemoEngine_API_Update+0x2fe4>
 800f75c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800f760:	ee66 6a87 	vmul.f32	s13, s13, s14
 800f764:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800f7d8 <iNemoEngine_API_Update+0x2fe8>
 800f768:	eea6 7a86 	vfma.f32	s14, s13, s12
 800f76c:	e6fe      	b.n	800f56c <iNemoEngine_API_Update+0x2d7c>
 800f76e:	bf00      	nop
 800f770:	3727c5ac 	.word	0x3727c5ac
 800f774:	3ac49ba6 	.word	0x3ac49ba6
 800f778:	3c23d70a 	.word	0x3c23d70a
 800f77c:	3c75c28f 	.word	0x3c75c28f
 800f780:	3cf5c28f 	.word	0x3cf5c28f
 800f784:	3d4ccccd 	.word	0x3d4ccccd
 800f788:	3dcccccd 	.word	0x3dcccccd
 800f78c:	3e4ccccd 	.word	0x3e4ccccd
 800f790:	46979000 	.word	0x46979000
 800f794:	4415c000 	.word	0x4415c000
 800f798:	3ba3d70a 	.word	0x3ba3d70a
 800f79c:	3d4cccc0 	.word	0x3d4cccc0
 800f7a0:	43480000 	.word	0x43480000
 800f7a4:	3eb33334 	.word	0x3eb33334
 800f7a8:	4247ffff 	.word	0x4247ffff
 800f7ac:	3f933333 	.word	0x3f933333
 800f7b0:	410c0000 	.word	0x410c0000
 800f7b4:	42c80000 	.word	0x42c80000
 800f7b8:	424a0000 	.word	0x424a0000
 800f7bc:	3b449ba6 	.word	0x3b449ba6
 800f7c0:	3ecccccc 	.word	0x3ecccccc
 800f7c4:	42855556 	.word	0x42855556
 800f7c8:	3fcccccd 	.word	0x3fcccccd
 800f7cc:	42d40000 	.word	0x42d40000
 800f7d0:	43f00000 	.word	0x43f00000
 800f7d4:	40555555 	.word	0x40555555
 800f7d8:	42ee0000 	.word	0x42ee0000
 800f7dc:	4615      	mov	r5, r2
 800f7de:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 800f7e2:	49d7      	ldr	r1, [pc, #860]	; (800fb40 <iNemoEngine_API_Update+0x3350>)
 800f7e4:	4ad7      	ldr	r2, [pc, #860]	; (800fb44 <iNemoEngine_API_Update+0x3354>)
 800f7e6:	4bd8      	ldr	r3, [pc, #864]	; (800fb48 <iNemoEngine_API_Update+0x3358>)
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	f885 0318 	strb.w	r0, [r5, #792]	; 0x318
 800f7ee:	f205 6824 	addw	r8, r5, #1572	; 0x624
 800f7f2:	6039      	str	r1, [r7, #0]
 800f7f4:	f205 7194 	addw	r1, r5, #1940	; 0x794
 800f7f8:	f8c8 2000 	str.w	r2, [r8]
 800f7fc:	600b      	str	r3, [r1, #0]
 800f7fe:	f895 64b1 	ldrb.w	r6, [r5, #1201]	; 0x4b1
 800f802:	911b      	str	r1, [sp, #108]	; 0x6c
 800f804:	2e00      	cmp	r6, #0
 800f806:	f001 8297 	beq.w	8010d38 <iNemoEngine_API_Update+0x4548>
 800f80a:	eddf 7ad0 	vldr	s15, [pc, #832]	; 800fb4c <iNemoEngine_API_Update+0x335c>
 800f80e:	ee68 faa7 	vmul.f32	s31, s17, s15
 800f812:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 800f816:	ee28 fa27 	vmul.f32	s30, s16, s15
 800f81a:	ee6c da27 	vmul.f32	s27, s24, s15
 800f81e:	ee7f 7acb 	vsub.f32	s15, s31, s22
 800f822:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800f826:	ee17 0a90 	vmov	r0, s15
 800f82a:	f7f0 fe8d 	bl	8000548 <__aeabi_f2d>
 800f82e:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 800f832:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f836:	ee17 0a90 	vmov	r0, s15
 800f83a:	f7f0 fe85 	bl	8000548 <__aeabi_f2d>
 800f83e:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 800f842:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f846:	ee17 0a90 	vmov	r0, s15
 800f84a:	f7f0 fe7d 	bl	8000548 <__aeabi_f2d>
 800f84e:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 800f852:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f856:	ee17 0a90 	vmov	r0, s15
 800f85a:	f7f0 fe75 	bl	8000548 <__aeabi_f2d>
 800f85e:	ee7d 7acb 	vsub.f32	s15, s27, s22
 800f862:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f866:	ee17 0a90 	vmov	r0, s15
 800f86a:	f7f0 fe6d 	bl	8000548 <__aeabi_f2d>
 800f86e:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 800f872:	4602      	mov	r2, r0
 800f874:	460b      	mov	r3, r1
 800f876:	ee17 0a90 	vmov	r0, s15
 800f87a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800f87e:	f7f0 fe63 	bl	8000548 <__aeabi_f2d>
 800f882:	9b06      	ldr	r3, [sp, #24]
 800f884:	ed9f bab8 	vldr	s22, [pc, #736]	; 800fb68 <iNemoEngine_API_Update+0x3378>
 800f888:	eef0 7aef 	vabs.f32	s15, s31
 800f88c:	edcd 7a03 	vstr	s15, [sp, #12]
 800f890:	eef0 7acf 	vabs.f32	s15, s30
 800f894:	f503 6597 	add.w	r5, r3, #1208	; 0x4b8
 800f898:	edcd 7a04 	vstr	s15, [sp, #16]
 800f89c:	230c      	movs	r3, #12
 800f89e:	eef0 7aed 	vabs.f32	s15, s27
 800f8a2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800f8a6:	fb13 5606 	smlabb	r6, r3, r6, r5
 800f8aa:	edcd 7a05 	vstr	s15, [sp, #20]
 800f8ae:	46aa      	mov	sl, r5
 800f8b0:	e060      	b.n	800f974 <iNemoEngine_API_Update+0x3184>
 800f8b2:	eddf 7aa7 	vldr	s15, [pc, #668]	; 800fb50 <iNemoEngine_API_Update+0x3360>
 800f8b6:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8be:	f280 8162 	bge.w	800fb86 <iNemoEngine_API_Update+0x3396>
 800f8c2:	eddf 7aa4 	vldr	s15, [pc, #656]	; 800fb54 <iNemoEngine_API_Update+0x3364>
 800f8c6:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ce:	f300 816c 	bgt.w	800fbaa <iNemoEngine_API_Update+0x33ba>
 800f8d2:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f8d6:	f007 f923 	bl	8016b20 <ceil>
 800f8da:	ec51 0b10 	vmov	r0, r1, d0
 800f8de:	f7f1 f983 	bl	8000be8 <__aeabi_d2f>
 800f8e2:	eddd 7a04 	vldr	s15, [sp, #16]
 800f8e6:	f8ca 0000 	str.w	r0, [sl]
 800f8ea:	eef4 7acb 	vcmpe.f32	s15, s22
 800f8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f2:	f140 8121 	bpl.w	800fb38 <iNemoEngine_API_Update+0x3348>
 800f8f6:	eddf 7a96 	vldr	s15, [pc, #600]	; 800fb50 <iNemoEngine_API_Update+0x3360>
 800f8fa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f902:	f280 8137 	bge.w	800fb74 <iNemoEngine_API_Update+0x3384>
 800f906:	eddf 7a93 	vldr	s15, [pc, #588]	; 800fb54 <iNemoEngine_API_Update+0x3364>
 800f90a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f912:	f300 8257 	bgt.w	800fdc4 <iNemoEngine_API_Update+0x35d4>
 800f916:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 800f91a:	f007 f901 	bl	8016b20 <ceil>
 800f91e:	ec51 0b10 	vmov	r0, r1, d0
 800f922:	f7f1 f961 	bl	8000be8 <__aeabi_d2f>
 800f926:	eddd 7a05 	vldr	s15, [sp, #20]
 800f92a:	f8ca 0004 	str.w	r0, [sl, #4]
 800f92e:	eef4 7acb 	vcmpe.f32	s15, s22
 800f932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f936:	d527      	bpl.n	800f988 <iNemoEngine_API_Update+0x3198>
 800f938:	eddf 7a85 	vldr	s15, [pc, #532]	; 800fb50 <iNemoEngine_API_Update+0x3360>
 800f93c:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f944:	f280 8128 	bge.w	800fb98 <iNemoEngine_API_Update+0x33a8>
 800f948:	eddf 7a82 	vldr	s15, [pc, #520]	; 800fb54 <iNemoEngine_API_Update+0x3364>
 800f94c:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f954:	f300 812b 	bgt.w	800fbae <iNemoEngine_API_Update+0x33be>
 800f958:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 800f95c:	f007 f8e0 	bl	8016b20 <ceil>
 800f960:	ec51 0b10 	vmov	r0, r1, d0
 800f964:	f7f1 f940 	bl	8000be8 <__aeabi_d2f>
 800f968:	f8ca 0008 	str.w	r0, [sl, #8]
 800f96c:	f10a 0a0c 	add.w	sl, sl, #12
 800f970:	45b2      	cmp	sl, r6
 800f972:	d011      	beq.n	800f998 <iNemoEngine_API_Update+0x31a8>
 800f974:	eddd 7a03 	vldr	s15, [sp, #12]
 800f978:	eef4 7acb 	vcmpe.f32	s15, s22
 800f97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f980:	d497      	bmi.n	800f8b2 <iNemoEngine_API_Update+0x30c2>
 800f982:	ee1f 0a90 	vmov	r0, s31
 800f986:	e7ac      	b.n	800f8e2 <iNemoEngine_API_Update+0x30f2>
 800f988:	ee1d 0a90 	vmov	r0, s27
 800f98c:	f10a 0a0c 	add.w	sl, sl, #12
 800f990:	f84a 0c04 	str.w	r0, [sl, #-4]
 800f994:	45b2      	cmp	sl, r6
 800f996:	d1ed      	bne.n	800f974 <iNemoEngine_API_Update+0x3184>
 800f998:	9b06      	ldr	r3, [sp, #24]
 800f99a:	f893 9621 	ldrb.w	r9, [r3, #1569]	; 0x621
 800f99e:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 800f9a2:	f1b9 0f00 	cmp.w	r9, #0
 800f9a6:	f000 8114 	beq.w	800fbd2 <iNemoEngine_API_Update+0x33e2>
 800f9aa:	eddf 7a6b 	vldr	s15, [pc, #428]	; 800fb58 <iNemoEngine_API_Update+0x3368>
 800f9ae:	ee6a faa7 	vmul.f32	s31, s21, s15
 800f9b2:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 800f9b6:	ee2a fa27 	vmul.f32	s30, s20, s15
 800f9ba:	ee69 daa7 	vmul.f32	s27, s19, s15
 800f9be:	ee7f 7acb 	vsub.f32	s15, s31, s22
 800f9c2:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800f9c6:	ee17 0a90 	vmov	r0, s15
 800f9ca:	f7f0 fdbd 	bl	8000548 <__aeabi_f2d>
 800f9ce:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 800f9d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f9d6:	ee17 0a90 	vmov	r0, s15
 800f9da:	f7f0 fdb5 	bl	8000548 <__aeabi_f2d>
 800f9de:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 800f9e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f9e6:	ee17 0a90 	vmov	r0, s15
 800f9ea:	f7f0 fdad 	bl	8000548 <__aeabi_f2d>
 800f9ee:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 800f9f2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f9f6:	ee17 0a90 	vmov	r0, s15
 800f9fa:	f7f0 fda5 	bl	8000548 <__aeabi_f2d>
 800f9fe:	ee7d 7acb 	vsub.f32	s15, s27, s22
 800fa02:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800fa06:	ee17 0a90 	vmov	r0, s15
 800fa0a:	f7f0 fd9d 	bl	8000548 <__aeabi_f2d>
 800fa0e:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 800fa12:	4602      	mov	r2, r0
 800fa14:	460b      	mov	r3, r1
 800fa16:	ee17 0a90 	vmov	r0, s15
 800fa1a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800fa1e:	f7f0 fd93 	bl	8000548 <__aeabi_f2d>
 800fa22:	eef0 7aef 	vabs.f32	s15, s31
 800fa26:	9b06      	ldr	r3, [sp, #24]
 800fa28:	edcd 7a03 	vstr	s15, [sp, #12]
 800fa2c:	eef0 7acf 	vabs.f32	s15, s30
 800fa30:	edcd 7a04 	vstr	s15, [sp, #16]
 800fa34:	eef0 7aed 	vabs.f32	s15, s27
 800fa38:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 800fa3c:	edcd 7a05 	vstr	s15, [sp, #20]
 800fa40:	230c      	movs	r3, #12
 800fa42:	eef0 7a6c 	vmov.f32	s15, s25
 800fa46:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800fa4a:	eef0 ca48 	vmov.f32	s25, s16
 800fa4e:	ed9f ba46 	vldr	s22, [pc, #280]	; 800fb68 <iNemoEngine_API_Update+0x3378>
 800fa52:	eeb0 8a4d 	vmov.f32	s16, s26
 800fa56:	fb13 6909 	smlabb	r9, r3, r9, r6
 800fa5a:	46b3      	mov	fp, r6
 800fa5c:	eeb0 da67 	vmov.f32	s26, s15
 800fa60:	e060      	b.n	800fb24 <iNemoEngine_API_Update+0x3334>
 800fa62:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800fb5c <iNemoEngine_API_Update+0x336c>
 800fa66:	eef4 aae7 	vcmpe.f32	s21, s15
 800fa6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6e:	f280 8197 	bge.w	800fda0 <iNemoEngine_API_Update+0x35b0>
 800fa72:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800fb60 <iNemoEngine_API_Update+0x3370>
 800fa76:	eef4 aae7 	vcmpe.f32	s21, s15
 800fa7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa7e:	f300 81a3 	bgt.w	800fdc8 <iNemoEngine_API_Update+0x35d8>
 800fa82:	ed9d 0b08 	vldr	d0, [sp, #32]
 800fa86:	f007 f84b 	bl	8016b20 <ceil>
 800fa8a:	ec51 0b10 	vmov	r0, r1, d0
 800fa8e:	f7f1 f8ab 	bl	8000be8 <__aeabi_d2f>
 800fa92:	eddd 7a04 	vldr	s15, [sp, #16]
 800fa96:	f8cb 0000 	str.w	r0, [fp]
 800fa9a:	eef4 7acb 	vcmpe.f32	s15, s22
 800fa9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa2:	f140 8171 	bpl.w	800fd88 <iNemoEngine_API_Update+0x3598>
 800faa6:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800fb5c <iNemoEngine_API_Update+0x336c>
 800faaa:	eeb4 aae7 	vcmpe.f32	s20, s15
 800faae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab2:	f280 816c 	bge.w	800fd8e <iNemoEngine_API_Update+0x359e>
 800fab6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800fb60 <iNemoEngine_API_Update+0x3370>
 800faba:	eeb4 aae7 	vcmpe.f32	s20, s15
 800fabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac2:	f300 81bd 	bgt.w	800fe40 <iNemoEngine_API_Update+0x3650>
 800fac6:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 800faca:	f007 f829 	bl	8016b20 <ceil>
 800face:	ec51 0b10 	vmov	r0, r1, d0
 800fad2:	f7f1 f889 	bl	8000be8 <__aeabi_d2f>
 800fad6:	eddd 7a05 	vldr	s15, [sp, #20]
 800fada:	f8cb 0004 	str.w	r0, [fp, #4]
 800fade:	eef4 7acb 	vcmpe.f32	s15, s22
 800fae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fae6:	d564      	bpl.n	800fbb2 <iNemoEngine_API_Update+0x33c2>
 800fae8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800fb5c <iNemoEngine_API_Update+0x336c>
 800faec:	eef4 9ae7 	vcmpe.f32	s19, s15
 800faf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf4:	f280 815d 	bge.w	800fdb2 <iNemoEngine_API_Update+0x35c2>
 800faf8:	eddf 7a19 	vldr	s15, [pc, #100]	; 800fb60 <iNemoEngine_API_Update+0x3370>
 800fafc:	eef4 9ae7 	vcmpe.f32	s19, s15
 800fb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb04:	f300 8162 	bgt.w	800fdcc <iNemoEngine_API_Update+0x35dc>
 800fb08:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 800fb0c:	f007 f808 	bl	8016b20 <ceil>
 800fb10:	ec51 0b10 	vmov	r0, r1, d0
 800fb14:	f7f1 f868 	bl	8000be8 <__aeabi_d2f>
 800fb18:	f8cb 0008 	str.w	r0, [fp, #8]
 800fb1c:	f10b 0b0c 	add.w	fp, fp, #12
 800fb20:	45cb      	cmp	fp, r9
 800fb22:	d04e      	beq.n	800fbc2 <iNemoEngine_API_Update+0x33d2>
 800fb24:	eddd 7a03 	vldr	s15, [sp, #12]
 800fb28:	eef4 7acb 	vcmpe.f32	s15, s22
 800fb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb30:	d497      	bmi.n	800fa62 <iNemoEngine_API_Update+0x3272>
 800fb32:	ee1f 0a90 	vmov	r0, s31
 800fb36:	e7ac      	b.n	800fa92 <iNemoEngine_API_Update+0x32a2>
 800fb38:	ee1f 0a10 	vmov	r0, s30
 800fb3c:	e6f3      	b.n	800f926 <iNemoEngine_API_Update+0x3136>
 800fb3e:	bf00      	nop
 800fb40:	3a7001e0 	.word	0x3a7001e0
 800fb44:	3a000100 	.word	0x3a000100
 800fb48:	3a8c0118 	.word	0x3a8c0118
 800fb4c:	44888777 	.word	0x44888777
 800fb50:	39f001e1 	.word	0x39f001e1
 800fb54:	b9f001e1 	.word	0xb9f001e1
 800fb58:	44fffe00 	.word	0x44fffe00
 800fb5c:	39800100 	.word	0x39800100
 800fb60:	b9800100 	.word	0xb9800100
 800fb64:	446a0ccd 	.word	0x446a0ccd
 800fb68:	4b000000 	.word	0x4b000000
 800fb6c:	3cfaad3b 	.word	0x3cfaad3b
 800fb70:	bcfaad3b 	.word	0xbcfaad3b
 800fb74:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800fb78:	f007 f852 	bl	8016c20 <floor>
 800fb7c:	ec51 0b10 	vmov	r0, r1, d0
 800fb80:	f7f1 f832 	bl	8000be8 <__aeabi_d2f>
 800fb84:	e6cf      	b.n	800f926 <iNemoEngine_API_Update+0x3136>
 800fb86:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fb8a:	f007 f849 	bl	8016c20 <floor>
 800fb8e:	ec51 0b10 	vmov	r0, r1, d0
 800fb92:	f7f1 f829 	bl	8000be8 <__aeabi_d2f>
 800fb96:	e6a4      	b.n	800f8e2 <iNemoEngine_API_Update+0x30f2>
 800fb98:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 800fb9c:	f007 f840 	bl	8016c20 <floor>
 800fba0:	ec51 0b10 	vmov	r0, r1, d0
 800fba4:	f7f1 f820 	bl	8000be8 <__aeabi_d2f>
 800fba8:	e6de      	b.n	800f968 <iNemoEngine_API_Update+0x3178>
 800fbaa:	4648      	mov	r0, r9
 800fbac:	e699      	b.n	800f8e2 <iNemoEngine_API_Update+0x30f2>
 800fbae:	4648      	mov	r0, r9
 800fbb0:	e6da      	b.n	800f968 <iNemoEngine_API_Update+0x3178>
 800fbb2:	ee1d 0a90 	vmov	r0, s27
 800fbb6:	f10b 0b0c 	add.w	fp, fp, #12
 800fbba:	f84b 0c04 	str.w	r0, [fp, #-4]
 800fbbe:	45cb      	cmp	fp, r9
 800fbc0:	d1b0      	bne.n	800fb24 <iNemoEngine_API_Update+0x3334>
 800fbc2:	eef0 7a4d 	vmov.f32	s15, s26
 800fbc6:	eeb0 da48 	vmov.f32	s26, s16
 800fbca:	eeb0 8a6c 	vmov.f32	s16, s25
 800fbce:	eef0 ca67 	vmov.f32	s25, s15
 800fbd2:	9b06      	ldr	r3, [sp, #24]
 800fbd4:	f893 9791 	ldrb.w	r9, [r3, #1937]	; 0x791
 800fbd8:	f1b9 0f00 	cmp.w	r9, #0
 800fbdc:	f001 80a7 	beq.w	8010d2e <iNemoEngine_API_Update+0x453e>
 800fbe0:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 800fb64 <iNemoEngine_API_Update+0x3374>
 800fbe4:	ee6e fa27 	vmul.f32	s31, s28, s15
 800fbe8:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 800fbec:	ee2e faa7 	vmul.f32	s30, s29, s15
 800fbf0:	ee6b daa7 	vmul.f32	s27, s23, s15
 800fbf4:	ee7f 7acb 	vsub.f32	s15, s31, s22
 800fbf8:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800fbfc:	ee17 0a90 	vmov	r0, s15
 800fc00:	f7f0 fca2 	bl	8000548 <__aeabi_f2d>
 800fc04:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 800fc08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fc0c:	ee17 0a90 	vmov	r0, s15
 800fc10:	f7f0 fc9a 	bl	8000548 <__aeabi_f2d>
 800fc14:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 800fc18:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800fc1c:	ee17 0a90 	vmov	r0, s15
 800fc20:	f7f0 fc92 	bl	8000548 <__aeabi_f2d>
 800fc24:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 800fc28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fc2c:	ee17 0a90 	vmov	r0, s15
 800fc30:	f7f0 fc8a 	bl	8000548 <__aeabi_f2d>
 800fc34:	ee7d 7acb 	vsub.f32	s15, s27, s22
 800fc38:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800fc3c:	ee17 0a90 	vmov	r0, s15
 800fc40:	f7f0 fc82 	bl	8000548 <__aeabi_f2d>
 800fc44:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 800fc48:	4602      	mov	r2, r0
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	ee17 0a90 	vmov	r0, s15
 800fc50:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800fc54:	f7f0 fc78 	bl	8000548 <__aeabi_f2d>
 800fc58:	eef0 7aef 	vabs.f32	s15, s31
 800fc5c:	9b06      	ldr	r3, [sp, #24]
 800fc5e:	edcd 7a03 	vstr	s15, [sp, #12]
 800fc62:	eef0 7acf 	vabs.f32	s15, s30
 800fc66:	edcd 7a04 	vstr	s15, [sp, #16]
 800fc6a:	eef0 7aed 	vabs.f32	s15, s27
 800fc6e:	f503 62f3 	add.w	r2, r3, #1944	; 0x798
 800fc72:	eeb0 7a48 	vmov.f32	s14, s16
 800fc76:	230c      	movs	r3, #12
 800fc78:	edcd 7a05 	vstr	s15, [sp, #20]
 800fc7c:	eef0 7a6c 	vmov.f32	s15, s25
 800fc80:	eeb0 8a4d 	vmov.f32	s16, s26
 800fc84:	eef0 ca4a 	vmov.f32	s25, s20
 800fc88:	eeb0 da6a 	vmov.f32	s26, s21
 800fc8c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800fc90:	eef0 aa69 	vmov.f32	s21, s19
 800fc94:	ed1f ba4c 	vldr	s22, [pc, #-304]	; 800fb68 <iNemoEngine_API_Update+0x3378>
 800fc98:	9215      	str	r2, [sp, #84]	; 0x54
 800fc9a:	fb13 2909 	smlabb	r9, r3, r9, r2
 800fc9e:	4693      	mov	fp, r2
 800fca0:	eeb0 aa67 	vmov.f32	s20, s15
 800fca4:	eef0 9a47 	vmov.f32	s19, s14
 800fca8:	e064      	b.n	800fd74 <iNemoEngine_API_Update+0x3584>
 800fcaa:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 800fcae:	ed1f 7a51 	vldr	s14, [pc, #-324]	; 800fb6c <iNemoEngine_API_Update+0x337c>
 800fcb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fcb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcba:	f280 80af 	bge.w	800fe1c <iNemoEngine_API_Update+0x362c>
 800fcbe:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 800fb70 <iNemoEngine_API_Update+0x3380>
 800fcc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcca:	f300 80bb 	bgt.w	800fe44 <iNemoEngine_API_Update+0x3654>
 800fcce:	ed9d 0b08 	vldr	d0, [sp, #32]
 800fcd2:	f006 ff25 	bl	8016b20 <ceil>
 800fcd6:	ec51 0b10 	vmov	r0, r1, d0
 800fcda:	f7f0 ff85 	bl	8000be8 <__aeabi_d2f>
 800fcde:	eddd 7a04 	vldr	s15, [sp, #16]
 800fce2:	f8cb 0000 	str.w	r0, [fp]
 800fce6:	eef4 7acb 	vcmpe.f32	s15, s22
 800fcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcee:	f140 8089 	bpl.w	800fe04 <iNemoEngine_API_Update+0x3614>
 800fcf2:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 800fcf6:	ed1f 7a63 	vldr	s14, [pc, #-396]	; 800fb6c <iNemoEngine_API_Update+0x337c>
 800fcfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd02:	f280 8082 	bge.w	800fe0a <iNemoEngine_API_Update+0x361a>
 800fd06:	ed1f 7a66 	vldr	s14, [pc, #-408]	; 800fb70 <iNemoEngine_API_Update+0x3380>
 800fd0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd12:	f300 809b 	bgt.w	800fe4c <iNemoEngine_API_Update+0x365c>
 800fd16:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 800fd1a:	f006 ff01 	bl	8016b20 <ceil>
 800fd1e:	ec51 0b10 	vmov	r0, r1, d0
 800fd22:	f7f0 ff61 	bl	8000be8 <__aeabi_d2f>
 800fd26:	eddd 7a05 	vldr	s15, [sp, #20]
 800fd2a:	f8cb 0004 	str.w	r0, [fp, #4]
 800fd2e:	eef4 7acb 	vcmpe.f32	s15, s22
 800fd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd36:	d54b      	bpl.n	800fdd0 <iNemoEngine_API_Update+0x35e0>
 800fd38:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 800fd3c:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 800fb6c <iNemoEngine_API_Update+0x337c>
 800fd40:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd48:	da71      	bge.n	800fe2e <iNemoEngine_API_Update+0x363e>
 800fd4a:	ed1f 7a77 	vldr	s14, [pc, #-476]	; 800fb70 <iNemoEngine_API_Update+0x3380>
 800fd4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd56:	dc77      	bgt.n	800fe48 <iNemoEngine_API_Update+0x3658>
 800fd58:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 800fd5c:	f006 fee0 	bl	8016b20 <ceil>
 800fd60:	ec51 0b10 	vmov	r0, r1, d0
 800fd64:	f7f0 ff40 	bl	8000be8 <__aeabi_d2f>
 800fd68:	f8cb 0008 	str.w	r0, [fp, #8]
 800fd6c:	f10b 0b0c 	add.w	fp, fp, #12
 800fd70:	45cb      	cmp	fp, r9
 800fd72:	d035      	beq.n	800fde0 <iNemoEngine_API_Update+0x35f0>
 800fd74:	eddd 7a03 	vldr	s15, [sp, #12]
 800fd78:	eef4 7acb 	vcmpe.f32	s15, s22
 800fd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd80:	d493      	bmi.n	800fcaa <iNemoEngine_API_Update+0x34ba>
 800fd82:	ee1f 0a90 	vmov	r0, s31
 800fd86:	e7aa      	b.n	800fcde <iNemoEngine_API_Update+0x34ee>
 800fd88:	ee1f 0a10 	vmov	r0, s30
 800fd8c:	e6a3      	b.n	800fad6 <iNemoEngine_API_Update+0x32e6>
 800fd8e:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800fd92:	f006 ff45 	bl	8016c20 <floor>
 800fd96:	ec51 0b10 	vmov	r0, r1, d0
 800fd9a:	f7f0 ff25 	bl	8000be8 <__aeabi_d2f>
 800fd9e:	e69a      	b.n	800fad6 <iNemoEngine_API_Update+0x32e6>
 800fda0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fda4:	f006 ff3c 	bl	8016c20 <floor>
 800fda8:	ec51 0b10 	vmov	r0, r1, d0
 800fdac:	f7f0 ff1c 	bl	8000be8 <__aeabi_d2f>
 800fdb0:	e66f      	b.n	800fa92 <iNemoEngine_API_Update+0x32a2>
 800fdb2:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 800fdb6:	f006 ff33 	bl	8016c20 <floor>
 800fdba:	ec51 0b10 	vmov	r0, r1, d0
 800fdbe:	f7f0 ff13 	bl	8000be8 <__aeabi_d2f>
 800fdc2:	e6a9      	b.n	800fb18 <iNemoEngine_API_Update+0x3328>
 800fdc4:	4648      	mov	r0, r9
 800fdc6:	e5ae      	b.n	800f926 <iNemoEngine_API_Update+0x3136>
 800fdc8:	4650      	mov	r0, sl
 800fdca:	e662      	b.n	800fa92 <iNemoEngine_API_Update+0x32a2>
 800fdcc:	4650      	mov	r0, sl
 800fdce:	e6a3      	b.n	800fb18 <iNemoEngine_API_Update+0x3328>
 800fdd0:	ee1d 0a90 	vmov	r0, s27
 800fdd4:	f10b 0b0c 	add.w	fp, fp, #12
 800fdd8:	f84b 0c04 	str.w	r0, [fp, #-4]
 800fddc:	45cb      	cmp	fp, r9
 800fdde:	d1c9      	bne.n	800fd74 <iNemoEngine_API_Update+0x3584>
 800fde0:	eeb0 7a69 	vmov.f32	s14, s19
 800fde4:	eef0 7a4a 	vmov.f32	s15, s20
 800fde8:	eef0 9a6a 	vmov.f32	s19, s21
 800fdec:	eeb0 aa6c 	vmov.f32	s20, s25
 800fdf0:	eef0 aa4d 	vmov.f32	s21, s26
 800fdf4:	eef0 ca67 	vmov.f32	s25, s15
 800fdf8:	eeb0 da48 	vmov.f32	s26, s16
 800fdfc:	eeb0 8a47 	vmov.f32	s16, s14
 800fe00:	f7fd b820 	b.w	800ce44 <iNemoEngine_API_Update+0x654>
 800fe04:	ee1f 0a10 	vmov	r0, s30
 800fe08:	e78d      	b.n	800fd26 <iNemoEngine_API_Update+0x3536>
 800fe0a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800fe0e:	f006 ff07 	bl	8016c20 <floor>
 800fe12:	ec51 0b10 	vmov	r0, r1, d0
 800fe16:	f7f0 fee7 	bl	8000be8 <__aeabi_d2f>
 800fe1a:	e784      	b.n	800fd26 <iNemoEngine_API_Update+0x3536>
 800fe1c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fe20:	f006 fefe 	bl	8016c20 <floor>
 800fe24:	ec51 0b10 	vmov	r0, r1, d0
 800fe28:	f7f0 fede 	bl	8000be8 <__aeabi_d2f>
 800fe2c:	e757      	b.n	800fcde <iNemoEngine_API_Update+0x34ee>
 800fe2e:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 800fe32:	f006 fef5 	bl	8016c20 <floor>
 800fe36:	ec51 0b10 	vmov	r0, r1, d0
 800fe3a:	f7f0 fed5 	bl	8000be8 <__aeabi_d2f>
 800fe3e:	e793      	b.n	800fd68 <iNemoEngine_API_Update+0x3578>
 800fe40:	4650      	mov	r0, sl
 800fe42:	e648      	b.n	800fad6 <iNemoEngine_API_Update+0x32e6>
 800fe44:	4650      	mov	r0, sl
 800fe46:	e74a      	b.n	800fcde <iNemoEngine_API_Update+0x34ee>
 800fe48:	4650      	mov	r0, sl
 800fe4a:	e78d      	b.n	800fd68 <iNemoEngine_API_Update+0x3578>
 800fe4c:	4650      	mov	r0, sl
 800fe4e:	e76a      	b.n	800fd26 <iNemoEngine_API_Update+0x3536>
 800fe50:	4616      	mov	r6, r2
 800fe52:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 800fe56:	4be1      	ldr	r3, [pc, #900]	; (80101dc <iNemoEngine_API_Update+0x39ec>)
 800fe58:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 800fe5c:	2100      	movs	r1, #0
 800fe5e:	f8c2 51cc 	str.w	r5, [r2, #460]	; 0x1cc
 800fe62:	f8c2 51d0 	str.w	r5, [r2, #464]	; 0x1d0
 800fe66:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 800fe6a:	f506 70ea 	add.w	r0, r6, #468	; 0x1d4
 800fe6e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800fe72:	f003 f909 	bl	8013088 <memset>
 800fe76:	ed96 6a02 	vldr	s12, [r6, #8]
 800fe7a:	eddf 7ad9 	vldr	s15, [pc, #868]	; 80101e0 <iNemoEngine_API_Update+0x39f0>
 800fe7e:	eddf 5ad9 	vldr	s11, [pc, #868]	; 80101e4 <iNemoEngine_API_Update+0x39f4>
 800fe82:	ed9f 5ad9 	vldr	s10, [pc, #868]	; 80101e8 <iNemoEngine_API_Update+0x39f8>
 800fe86:	f8c6 50c4 	str.w	r5, [r6, #196]	; 0xc4
 800fe8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fe8e:	2300      	movs	r3, #0
 800fe90:	edc6 7a34 	vstr	s15, [r6, #208]	; 0xd0
 800fe94:	eddf 7ad5 	vldr	s15, [pc, #852]	; 80101ec <iNemoEngine_API_Update+0x39fc>
 800fe98:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 800fe9c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fea0:	f8c6 3128 	str.w	r3, [r6, #296]	; 0x128
 800fea4:	edc6 7a4e 	vstr	s15, [r6, #312]	; 0x138
 800fea8:	eddf 7ad1 	vldr	s15, [pc, #836]	; 80101f0 <iNemoEngine_API_Update+0x3a00>
 800feac:	4bd1      	ldr	r3, [pc, #836]	; (80101f4 <iNemoEngine_API_Update+0x3a04>)
 800feae:	f8c6 30dc 	str.w	r3, [r6, #220]	; 0xdc
 800feb2:	ee66 7a27 	vmul.f32	s15, s12, s15
 800feb6:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
 800feba:	edc6 7a50 	vstr	s15, [r6, #320]	; 0x140
 800febe:	eddf 7ace 	vldr	s15, [pc, #824]	; 80101f8 <iNemoEngine_API_Update+0x3a08>
 800fec2:	4bce      	ldr	r3, [pc, #824]	; (80101fc <iNemoEngine_API_Update+0x3a0c>)
 800fec4:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 800fec8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fecc:	4bcc      	ldr	r3, [pc, #816]	; (8010200 <iNemoEngine_API_Update+0x3a10>)
 800fece:	edc6 7a38 	vstr	s15, [r6, #224]	; 0xe0
 800fed2:	eddf 7acc 	vldr	s15, [pc, #816]	; 8010204 <iNemoEngine_API_Update+0x3a14>
 800fed6:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
 800feda:	ee66 7a27 	vmul.f32	s15, s12, s15
 800fede:	4bca      	ldr	r3, [pc, #808]	; (8010208 <iNemoEngine_API_Update+0x3a18>)
 800fee0:	edc6 7a52 	vstr	s15, [r6, #328]	; 0x148
 800fee4:	eddf 7ac9 	vldr	s15, [pc, #804]	; 801020c <iNemoEngine_API_Update+0x3a1c>
 800fee8:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
 800feec:	4bc8      	ldr	r3, [pc, #800]	; (8010210 <iNemoEngine_API_Update+0x3a20>)
 800feee:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
 800fef2:	4631      	mov	r1, r6
 800fef4:	ee66 5a25 	vmul.f32	s11, s12, s11
 800fef8:	ee26 5a05 	vmul.f32	s10, s12, s10
 800fefc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ff00:	4bc4      	ldr	r3, [pc, #784]	; (8010214 <iNemoEngine_API_Update+0x3a24>)
 800ff02:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
 800ff06:	4bc4      	ldr	r3, [pc, #784]	; (8010218 <iNemoEngine_API_Update+0x3a28>)
 800ff08:	f8c6 512c 	str.w	r5, [r6, #300]	; 0x12c
 800ff0c:	f8c6 50cc 	str.w	r5, [r6, #204]	; 0xcc
 800ff10:	f8c6 5134 	str.w	r5, [r6, #308]	; 0x134
 800ff14:	edc6 7a3a 	vstr	s15, [r6, #232]	; 0xe8
 800ff18:	edc6 5a32 	vstr	s11, [r6, #200]	; 0xc8
 800ff1c:	edc6 5a4c 	vstr	s11, [r6, #304]	; 0x130
 800ff20:	ed86 5a36 	vstr	s10, [r6, #216]	; 0xd8
 800ff24:	f8c1 31d4 	str.w	r3, [r1, #468]	; 0x1d4
 800ff28:	f8c1 31fc 	str.w	r3, [r1, #508]	; 0x1fc
 800ff2c:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
 800ff30:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 800ff34:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 800ff38:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 800ff3c:	f8c1 32c4 	str.w	r3, [r1, #708]	; 0x2c4
 800ff40:	f8c1 32ec 	str.w	r3, [r1, #748]	; 0x2ec
 800ff44:	f8c1 3314 	str.w	r3, [r1, #788]	; 0x314
 800ff48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ff4c:	ed81 5a54 	vstr	s10, [r1, #336]	; 0x150
 800ff50:	eddf 3ab2 	vldr	s7, [pc, #712]	; 801021c <iNemoEngine_API_Update+0x3a2c>
 800ff54:	ed9f 4ab2 	vldr	s8, [pc, #712]	; 8010220 <iNemoEngine_API_Update+0x3a30>
 800ff58:	f8c1 317c 	str.w	r3, [r1, #380]	; 0x17c
 800ff5c:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
 800ff60:	f8c1 3124 	str.w	r3, [r1, #292]	; 0x124
 800ff64:	eddf 6aaf 	vldr	s13, [pc, #700]	; 8010224 <iNemoEngine_API_Update+0x3a34>
 800ff68:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8010228 <iNemoEngine_API_Update+0x3a38>
 800ff6c:	eddf 7aaf 	vldr	s15, [pc, #700]	; 801022c <iNemoEngine_API_Update+0x3a3c>
 800ff70:	eddf 4aaf 	vldr	s9, [pc, #700]	; 8010230 <iNemoEngine_API_Update+0x3a40>
 800ff74:	4aaf      	ldr	r2, [pc, #700]	; (8010234 <iNemoEngine_API_Update+0x3a44>)
 800ff76:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8010254 <iNemoEngine_API_Update+0x3a64>
 800ff7a:	4faf      	ldr	r7, [pc, #700]	; (8010238 <iNemoEngine_API_Update+0x3a48>)
 800ff7c:	4eaf      	ldr	r6, [pc, #700]	; (801023c <iNemoEngine_API_Update+0x3a4c>)
 800ff7e:	4db0      	ldr	r5, [pc, #704]	; (8010240 <iNemoEngine_API_Update+0x3a50>)
 800ff80:	48b0      	ldr	r0, [pc, #704]	; (8010244 <iNemoEngine_API_Update+0x3a54>)
 800ff82:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 8010258 <iNemoEngine_API_Update+0x3a68>
 800ff86:	edc1 3a3d 	vstr	s7, [r1, #244]	; 0xf4
 800ff8a:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 800ff8e:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 800ff92:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
 800ff96:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ff9a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800ff9e:	ee26 7a07 	vmul.f32	s14, s12, s14
 800ffa2:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ffa6:	ee66 2a23 	vmul.f32	s5, s12, s7
 800ffaa:	ee26 3a02 	vmul.f32	s6, s12, s4
 800ffae:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
 800ffb2:	ee66 4a24 	vmul.f32	s9, s12, s9
 800ffb6:	4ba4      	ldr	r3, [pc, #656]	; (8010248 <iNemoEngine_API_Update+0x3a58>)
 800ffb8:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184
 800ffbc:	ee66 1a04 	vmul.f32	s3, s12, s8
 800ffc0:	4ba2      	ldr	r3, [pc, #648]	; (801024c <iNemoEngine_API_Update+0x3a5c>)
 800ffc2:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
 800ffc6:	f8c1 c15c 	str.w	ip, [r1, #348]	; 0x15c
 800ffca:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
 800ffce:	f8c1 6164 	str.w	r6, [r1, #356]	; 0x164
 800ffd2:	f8c1 516c 	str.w	r5, [r1, #364]	; 0x16c
 800ffd6:	f8c1 0174 	str.w	r0, [r1, #372]	; 0x174
 800ffda:	edc1 1a46 	vstr	s3, [r1, #280]	; 0x118
 800ffde:	edc1 4a60 	vstr	s9, [r1, #384]	; 0x180
 800ffe2:	f8c1 e19c 	str.w	lr, [r1, #412]	; 0x19c
 800ffe6:	ed81 2a66 	vstr	s4, [r1, #408]	; 0x198
 800ffea:	ed81 4a65 	vstr	s8, [r1, #404]	; 0x194
 800ffee:	f8c1 2154 	str.w	r2, [r1, #340]	; 0x154
 800fff2:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
 800fff6:	edc1 6a3c 	vstr	s13, [r1, #240]	; 0xf0
 800fffa:	edc1 6a56 	vstr	s13, [r1, #344]	; 0x158
 800fffe:	ed81 7a3e 	vstr	s14, [r1, #248]	; 0xf8
 8010002:	ed81 7a58 	vstr	s14, [r1, #352]	; 0x160
 8010006:	edc1 7a40 	vstr	s15, [r1, #256]	; 0x100
 801000a:	edc1 7a5a 	vstr	s15, [r1, #360]	; 0x168
 801000e:	edc1 2a42 	vstr	s5, [r1, #264]	; 0x108
 8010012:	edc1 2a5c 	vstr	s5, [r1, #368]	; 0x170
 8010016:	ed81 3a44 	vstr	s6, [r1, #272]	; 0x110
 801001a:	ed81 3a5e 	vstr	s6, [r1, #376]	; 0x178
 801001e:	ed81 6a48 	vstr	s12, [r1, #288]	; 0x120
 8010022:	ed81 6a62 	vstr	s12, [r1, #392]	; 0x188
 8010026:	edc1 5a64 	vstr	s11, [r1, #400]	; 0x190
 801002a:	784b      	ldrb	r3, [r1, #1]
 801002c:	b18b      	cbz	r3, 8010052 <iNemoEngine_API_Update+0x3862>
 801002e:	f501 6214 	add.w	r2, r1, #2368	; 0x940
 8010032:	9225      	str	r2, [sp, #148]	; 0x94
 8010034:	f601 1348 	addw	r3, r1, #2376	; 0x948
 8010038:	f601 1244 	addw	r2, r1, #2372	; 0x944
 801003c:	9226      	str	r2, [sp, #152]	; 0x98
 801003e:	9327      	str	r3, [sp, #156]	; 0x9c
 8010040:	9a06      	ldr	r2, [sp, #24]
 8010042:	2300      	movs	r3, #0
 8010044:	7053      	strb	r3, [r2, #1]
 8010046:	f7fc bee8 	b.w	800ce1a <iNemoEngine_API_Update+0x62a>
 801004a:	ed93 ca4b 	vldr	s24, [r3, #300]	; 0x12c
 801004e:	f7fd bfc0 	b.w	800dfd2 <iNemoEngine_API_Update+0x17e2>
 8010052:	9a06      	ldr	r2, [sp, #24]
 8010054:	f502 6314 	add.w	r3, r2, #2368	; 0x940
 8010058:	f602 1144 	addw	r1, r2, #2372	; 0x944
 801005c:	f602 1048 	addw	r0, r2, #2376	; 0x948
 8010060:	9325      	str	r3, [sp, #148]	; 0x94
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
 8010068:	680b      	ldr	r3, [r1, #0]
 801006a:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
 801006e:	6803      	ldr	r3, [r0, #0]
 8010070:	9126      	str	r1, [sp, #152]	; 0x98
 8010072:	9027      	str	r0, [sp, #156]	; 0x9c
 8010074:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
 8010078:	e7e2      	b.n	8010040 <iNemoEngine_API_Update+0x3850>
 801007a:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 801007e:	ed97 0a00 	vldr	s0, [r7]
 8010082:	f505 6097 	add.w	r0, r5, #1208	; 0x4b8
 8010086:	f7fa ff43 	bl	800af10 <dataDerivative5>
 801008a:	f205 6824 	addw	r8, r5, #1572	; 0x624
 801008e:	eef0 3a40 	vmov.f32	s7, s0
 8010092:	f505 60c5 	add.w	r0, r5, #1576	; 0x628
 8010096:	ed98 0a00 	vldr	s0, [r8]
 801009a:	f7fa ff39 	bl	800af10 <dataDerivative5>
 801009e:	f205 7394 	addw	r3, r5, #1940	; 0x794
 80100a2:	eeb0 3a40 	vmov.f32	s6, s0
 80100a6:	f505 60f3 	add.w	r0, r5, #1944	; 0x798
 80100aa:	ed93 0a00 	vldr	s0, [r3]
 80100ae:	f7fa ff2f 	bl	800af10 <dataDerivative5>
 80100b2:	f9b5 3976 	ldrsh.w	r3, [r5, #2422]	; 0x976
 80100b6:	ee07 3a90 	vmov	s15, r3
 80100ba:	3301      	adds	r3, #1
 80100bc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80100c0:	ee07 3a90 	vmov	s15, r3
 80100c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80100cc:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80100d0:	f605 106c 	addw	r0, r5, #2412	; 0x96c
 80100d4:	f605 1168 	addw	r1, r5, #2408	; 0x968
 80100d8:	f505 6217 	add.w	r2, r5, #2416	; 0x970
 80100dc:	b21b      	sxth	r3, r3
 80100de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80100e2:	ed90 7a00 	vldr	s14, [r0]
 80100e6:	ed91 5a00 	vldr	s10, [r1]
 80100ea:	eef0 7a63 	vmov.f32	s15, s7
 80100ee:	eee7 7a25 	vfma.f32	s15, s14, s11
 80100f2:	eeb0 7a43 	vmov.f32	s14, s6
 80100f6:	eea5 7a85 	vfma.f32	s14, s11, s10
 80100fa:	ed92 5a00 	vldr	s10, [r2]
 80100fe:	eef0 6a40 	vmov.f32	s13, s0
 8010102:	eee5 6a85 	vfma.f32	s13, s11, s10
 8010106:	ee67 7a86 	vmul.f32	s15, s15, s12
 801010a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801010e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010112:	edc0 7a00 	vstr	s15, [r0]
 8010116:	ed81 7a00 	vstr	s14, [r1]
 801011a:	edc2 6a00 	vstr	s13, [r2]
 801011e:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 8010122:	f47c ab8d 	bne.w	800c840 <iNemoEngine_API_Update+0x50>
 8010126:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801012a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801012e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010132:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010136:	2300      	movs	r3, #0
 8010138:	ed85 7a07 	vstr	s14, [r5, #28]
 801013c:	edc5 6a08 	vstr	s13, [r5, #32]
 8010140:	edc5 7a06 	vstr	s15, [r5, #24]
 8010144:	6003      	str	r3, [r0, #0]
 8010146:	600b      	str	r3, [r1, #0]
 8010148:	6013      	str	r3, [r2, #0]
 801014a:	2300      	movs	r3, #0
 801014c:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 8010150:	f885 3978 	strb.w	r3, [r5, #2424]	; 0x978
 8010154:	f7fc bb74 	b.w	800c840 <iNemoEngine_API_Update+0x50>
 8010158:	9906      	ldr	r1, [sp, #24]
 801015a:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 801015e:	9295      	str	r2, [sp, #596]	; 0x254
 8010160:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 8010164:	9296      	str	r2, [sp, #600]	; 0x258
 8010166:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 801016a:	9297      	str	r2, [sp, #604]	; 0x25c
 801016c:	2200      	movs	r2, #0
 801016e:	464b      	mov	r3, r9
 8010170:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8010174:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 8010178:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 801017c:	f7fe bc8f 	b.w	800ea9e <iNemoEngine_API_Update+0x22ae>
 8010180:	ed92 fa49 	vldr	s30, [r2, #292]	; 0x124
 8010184:	4613      	mov	r3, r2
 8010186:	f7fd bdd2 	b.w	800dd2e <iNemoEngine_API_Update+0x153e>
 801018a:	ed93 ca63 	vldr	s24, [r3, #396]	; 0x18c
 801018e:	f7fd bf20 	b.w	800dfd2 <iNemoEngine_API_Update+0x17e2>
 8010192:	eddf 8a2f 	vldr	s17, [pc, #188]	; 8010250 <iNemoEngine_API_Update+0x3a60>
 8010196:	f7fd b87e 	b.w	800d296 <iNemoEngine_API_Update+0xaa6>
 801019a:	ed9f ca2d 	vldr	s24, [pc, #180]	; 8010250 <iNemoEngine_API_Update+0x3a60>
 801019e:	f7fd b90e 	b.w	800d3be <iNemoEngine_API_Update+0xbce>
 80101a2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8010250 <iNemoEngine_API_Update+0x3a60>
 80101a6:	f7fc bf8c 	b.w	800d0c2 <iNemoEngine_API_Update+0x8d2>
 80101aa:	eddf 8a29 	vldr	s17, [pc, #164]	; 8010250 <iNemoEngine_API_Update+0x3a60>
 80101ae:	f7fc bf5d 	b.w	800d06c <iNemoEngine_API_Update+0x87c>
 80101b2:	ed9f 8a27 	vldr	s16, [pc, #156]	; 8010250 <iNemoEngine_API_Update+0x3a60>
 80101b6:	f7fd b92d 	b.w	800d414 <iNemoEngine_API_Update+0xc24>
 80101ba:	ed9f ca25 	vldr	s24, [pc, #148]	; 8010250 <iNemoEngine_API_Update+0x3a60>
 80101be:	f7fd b83f 	b.w	800d240 <iNemoEngine_API_Update+0xa50>
 80101c2:	ed9f ca23 	vldr	s24, [pc, #140]	; 8010250 <iNemoEngine_API_Update+0x3a60>
 80101c6:	f7fc bfa7 	b.w	800d118 <iNemoEngine_API_Update+0x928>
 80101ca:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8010250 <iNemoEngine_API_Update+0x3a60>
 80101ce:	f7fd b80c 	b.w	800d1ea <iNemoEngine_API_Update+0x9fa>
 80101d2:	eddf 8a1f 	vldr	s17, [pc, #124]	; 8010250 <iNemoEngine_API_Update+0x3a60>
 80101d6:	f7fd b8c7 	b.w	800d368 <iNemoEngine_API_Update+0xb78>
 80101da:	bf00      	nop
 80101dc:	bf666666 	.word	0xbf666666
 80101e0:	3d072b02 	.word	0x3d072b02
 80101e4:	3ca3d70a 	.word	0x3ca3d70a
 80101e8:	3d4ccccd 	.word	0x3d4ccccd
 80101ec:	3cb43958 	.word	0x3cb43958
 80101f0:	3cf5c28f 	.word	0x3cf5c28f
 80101f4:	3eb33333 	.word	0x3eb33333
 80101f8:	3d75c28f 	.word	0x3d75c28f
 80101fc:	3ee66666 	.word	0x3ee66666
 8010200:	3f866666 	.word	0x3f866666
 8010204:	3d23d70a 	.word	0x3d23d70a
 8010208:	3f8ccccd 	.word	0x3f8ccccd
 801020c:	3d8f5c29 	.word	0x3d8f5c29
 8010210:	3f933333 	.word	0x3f933333
 8010214:	3ebd70a4 	.word	0x3ebd70a4
 8010218:	40a00000 	.word	0x40a00000
 801021c:	3ecccccd 	.word	0x3ecccccd
 8010220:	3f4ccccd 	.word	0x3f4ccccd
 8010224:	3dcccccd 	.word	0x3dcccccd
 8010228:	3e4ccccd 	.word	0x3e4ccccd
 801022c:	3e99999a 	.word	0x3e99999a
 8010230:	3f666666 	.word	0x3f666666
 8010234:	3f99999a 	.word	0x3f99999a
 8010238:	3f19999a 	.word	0x3f19999a
 801023c:	3fb9999a 	.word	0x3fb9999a
 8010240:	3fcccccd 	.word	0x3fcccccd
 8010244:	3fe66666 	.word	0x3fe66666
 8010248:	40200000 	.word	0x40200000
 801024c:	40400000 	.word	0x40400000
 8010250:	80000000 	.word	0x80000000
 8010254:	3fa66666 	.word	0x3fa66666
 8010258:	3f333333 	.word	0x3f333333
 801025c:	3e4cccce 	.word	0x3e4cccce
 8010260:	3eaaaaab 	.word	0x3eaaaaab
 8010264:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 8010268:	2a00      	cmp	r2, #0
 801026a:	f040 85bc 	bne.w	8010de6 <iNemoEngine_API_Update+0x45f6>
 801026e:	9906      	ldr	r1, [sp, #24]
 8010270:	ed5f 8a06 	vldr	s17, [pc, #-24]	; 801025c <iNemoEngine_API_Update+0x3a6c>
 8010274:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 8010278:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 8010260 <iNemoEngine_API_Update+0x3a70>
 801027c:	3301      	adds	r3, #1
 801027e:	b29b      	uxth	r3, r3
 8010280:	2b31      	cmp	r3, #49	; 0x31
 8010282:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 8010286:	bf98      	it	ls
 8010288:	eef0 8a67 	vmovls.f32	s17, s15
 801028c:	460b      	mov	r3, r1
 801028e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8010292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010296:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 801029a:	f000 8599 	beq.w	8010dd0 <iNemoEngine_API_Update+0x45e0>
 801029e:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 80102a2:	f47f a83a 	bne.w	800f31a <iNemoEngine_API_Update+0x2b2a>
 80102a6:	9a06      	ldr	r2, [sp, #24]
 80102a8:	2301      	movs	r3, #1
 80102aa:	f882 31a4 	strb.w	r3, [r2, #420]	; 0x1a4
 80102ae:	9a06      	ldr	r2, [sp, #24]
 80102b0:	edcd 6a03 	vstr	s13, [sp, #12]
 80102b4:	f502 63c3 	add.w	r3, r2, #1560	; 0x618
 80102b8:	ed93 5a00 	vldr	s10, [r3]
 80102bc:	f502 63f1 	add.w	r3, r2, #1928	; 0x788
 80102c0:	ed93 7a00 	vldr	s14, [r3]
 80102c4:	f202 6314 	addw	r3, r2, #1556	; 0x614
 80102c8:	edd3 4a00 	vldr	s9, [r3]
 80102cc:	ee25 4a05 	vmul.f32	s8, s10, s10
 80102d0:	f202 7384 	addw	r3, r2, #1924	; 0x784
 80102d4:	eea4 4aa4 	vfma.f32	s8, s9, s9
 80102d8:	a93d      	add	r1, sp, #244	; 0xf4
 80102da:	a843      	add	r0, sp, #268	; 0x10c
 80102dc:	ed93 6a00 	vldr	s12, [r3]
 80102e0:	f202 631c 	addw	r3, r2, #1564	; 0x61c
 80102e4:	edd3 7a00 	vldr	s15, [r3]
 80102e8:	eea7 4aa7 	vfma.f32	s8, s15, s15
 80102ec:	f202 738c 	addw	r3, r2, #1932	; 0x78c
 80102f0:	465e      	mov	r6, fp
 80102f2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80102f6:	eeb1 3ac4 	vsqrt.f32	s6, s8
 80102fa:	465a      	mov	r2, fp
 80102fc:	4655      	mov	r5, sl
 80102fe:	4657      	mov	r7, sl
 8010300:	acae      	add	r4, sp, #696	; 0x2b8
 8010302:	ee67 5a07 	vmul.f32	s11, s14, s14
 8010306:	ee83 4a83 	vdiv.f32	s8, s7, s6
 801030a:	eee6 5a06 	vfma.f32	s11, s12, s12
 801030e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010312:	ee25 5a04 	vmul.f32	s10, s10, s8
 8010316:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 801031a:	edd3 7a00 	vldr	s15, [r3]
 801031e:	ed8d 5a3e 	vstr	s10, [sp, #248]	; 0xf8
 8010322:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8010326:	ee64 4a84 	vmul.f32	s9, s9, s8
 801032a:	eeb1 5ae5 	vsqrt.f32	s10, s11
 801032e:	edcd 4a3d 	vstr	s9, [sp, #244]	; 0xf4
 8010332:	eec3 5a85 	vdiv.f32	s11, s7, s10
 8010336:	ee27 7a25 	vmul.f32	s14, s14, s11
 801033a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801033e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8010342:	ed8d 7a44 	vstr	s14, [sp, #272]	; 0x110
 8010346:	edcd 7a45 	vstr	s15, [sp, #276]	; 0x114
 801034a:	ed8d 6a43 	vstr	s12, [sp, #268]	; 0x10c
 801034e:	f7fa fec5 	bl	800b0dc <getRotationMatrix>
 8010352:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010356:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801035a:	6836      	ldr	r6, [r6, #0]
 801035c:	602e      	str	r6, [r5, #0]
 801035e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010362:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010366:	edda 7a00 	vldr	s15, [sl]
 801036a:	ed9a 7a01 	vldr	s14, [sl, #4]
 801036e:	eddd 6a03 	vldr	s13, [sp, #12]
 8010372:	6026      	str	r6, [r4, #0]
 8010374:	eef0 7ae7 	vabs.f32	s15, s15
 8010378:	eeb0 7ac7 	vabs.f32	s14, s14
 801037c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010384:	f140 8407 	bpl.w	8010b96 <iNemoEngine_API_Update+0x43a6>
 8010388:	2304      	movs	r3, #4
 801038a:	2000      	movs	r0, #0
 801038c:	930c      	str	r3, [sp, #48]	; 0x30
 801038e:	469e      	mov	lr, r3
 8010390:	eef0 7a47 	vmov.f32	s15, s14
 8010394:	2103      	movs	r1, #3
 8010396:	2707      	movs	r7, #7
 8010398:	f04f 0c06 	mov.w	ip, #6
 801039c:	4603      	mov	r3, r0
 801039e:	2601      	movs	r6, #1
 80103a0:	ed9a 7a02 	vldr	s14, [sl, #8]
 80103a4:	eeb0 7ac7 	vabs.f32	s14, s14
 80103a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80103ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b0:	f340 8453 	ble.w	8010c5a <iNemoEngine_API_Update+0x446a>
 80103b4:	2306      	movs	r3, #6
 80103b6:	2708      	movs	r7, #8
 80103b8:	2104      	movs	r1, #4
 80103ba:	9303      	str	r3, [sp, #12]
 80103bc:	f04f 0c07 	mov.w	ip, #7
 80103c0:	f04f 0e05 	mov.w	lr, #5
 80103c4:	970c      	str	r7, [sp, #48]	; 0x30
 80103c6:	4608      	mov	r0, r1
 80103c8:	2200      	movs	r2, #0
 80103ca:	2301      	movs	r3, #1
 80103cc:	2602      	movs	r6, #2
 80103ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80103d0:	4450      	add	r0, sl
 80103d2:	4454      	add	r4, sl
 80103d4:	ed90 6a00 	vldr	s12, [r0]
 80103d8:	ed94 7a00 	vldr	s14, [r4]
 80103dc:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80103e0:	a8ae      	add	r0, sp, #696	; 0x2b8
 80103e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80103e6:	acae      	add	r4, sp, #696	; 0x2b8
 80103e8:	adae      	add	r5, sp, #696	; 0x2b8
 80103ea:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80103ee:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 80103f2:	edc0 7a00 	vstr	s15, [r0]
 80103f6:	ed94 7a00 	vldr	s14, [r4]
 80103fa:	edd5 7a00 	vldr	s15, [r5]
 80103fe:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8010402:	ed84 6a00 	vstr	s12, [r4]
 8010406:	edd0 5a00 	vldr	s11, [r0]
 801040a:	a8ae      	add	r0, sp, #696	; 0x2b8
 801040c:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8010410:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 8010414:	ed90 7a00 	vldr	s14, [r0]
 8010418:	edd5 7a00 	vldr	s15, [r5]
 801041c:	eee5 7ac7 	vfms.f32	s15, s11, s14
 8010420:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8010424:	9404      	str	r4, [sp, #16]
 8010426:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010428:	edc5 7a00 	vstr	s15, [r5]
 801042c:	ed90 7a00 	vldr	s14, [r0]
 8010430:	a8ae      	add	r0, sp, #696	; 0x2b8
 8010432:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8010436:	edd0 7a00 	vldr	s15, [r0]
 801043a:	eee6 7a47 	vfms.f32	s15, s12, s14
 801043e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8010442:	00bc      	lsls	r4, r7, #2
 8010444:	9405      	str	r4, [sp, #20]
 8010446:	edc0 7a00 	vstr	s15, [r0]
 801044a:	acae      	add	r4, sp, #696	; 0x2b8
 801044c:	a8ae      	add	r0, sp, #696	; 0x2b8
 801044e:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8010452:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8010456:	ed90 5a00 	vldr	s10, [r0]
 801045a:	ed94 7a00 	vldr	s14, [r4]
 801045e:	eea5 7ac5 	vfms.f32	s14, s11, s10
 8010462:	0097      	lsls	r7, r2, #2
 8010464:	eef0 7ae7 	vabs.f32	s15, s15
 8010468:	ed84 7a00 	vstr	s14, [r4]
 801046c:	9c03      	ldr	r4, [sp, #12]
 801046e:	edd0 5a00 	vldr	s11, [r0]
 8010472:	a8ae      	add	r0, sp, #696	; 0x2b8
 8010474:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8010478:	ed90 7a00 	vldr	s14, [r0]
 801047c:	eea6 7a65 	vfms.f32	s14, s12, s11
 8010480:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8010484:	008c      	lsls	r4, r1, #2
 8010486:	ed80 7a00 	vstr	s14, [r0]
 801048a:	ed95 7a00 	vldr	s14, [r5]
 801048e:	eeb0 7ac7 	vabs.f32	s14, s14
 8010492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010496:	00b0      	lsls	r0, r6, #2
 8010498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801049c:	9003      	str	r0, [sp, #12]
 801049e:	ea4f 0583 	mov.w	r5, r3, lsl #2
 80104a2:	ea4f 008c 	mov.w	r0, ip, lsl #2
 80104a6:	dd0a      	ble.n	80104be <iNemoEngine_API_Update+0x3cce>
 80104a8:	4618      	mov	r0, r3
 80104aa:	4613      	mov	r3, r2
 80104ac:	4602      	mov	r2, r0
 80104ae:	4674      	mov	r4, lr
 80104b0:	4650      	mov	r0, sl
 80104b2:	463d      	mov	r5, r7
 80104b4:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 80104b8:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80104bc:	0097      	lsls	r7, r2, #2
 80104be:	a9ae      	add	r1, sp, #696	; 0x2b8
 80104c0:	448e      	add	lr, r1
 80104c2:	440c      	add	r4, r1
 80104c4:	ed9e 7a00 	vldr	s14, [lr]
 80104c8:	edd4 7a00 	vldr	s15, [r4]
 80104cc:	edcd 6a03 	vstr	s13, [sp, #12]
 80104d0:	ee87 2a27 	vdiv.f32	s4, s14, s15
 80104d4:	4408      	add	r0, r1
 80104d6:	4451      	add	r1, sl
 80104d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80104dc:	ed8e 2a00 	vstr	s4, [lr]
 80104e0:	ed90 6a00 	vldr	s12, [r0]
 80104e4:	edd1 7a00 	vldr	s15, [r1]
 80104e8:	eee2 7a46 	vfms.f32	s15, s4, s12
 80104ec:	edc1 7a00 	vstr	s15, [r1]
 80104f0:	9905      	ldr	r1, [sp, #20]
 80104f2:	ed90 3a00 	vldr	s6, [r0]
 80104f6:	ed94 6a00 	vldr	s12, [r4]
 80104fa:	a8ae      	add	r0, sp, #696	; 0x2b8
 80104fc:	4401      	add	r1, r0
 80104fe:	edd1 3a00 	vldr	s7, [r1]
 8010502:	9904      	ldr	r1, [sp, #16]
 8010504:	4401      	add	r1, r0
 8010506:	00b0      	lsls	r0, r6, #2
 8010508:	edd1 4a00 	vldr	s9, [r1]
 801050c:	f500 61b2 	add.w	r1, r0, #1424	; 0x590
 8010510:	4469      	add	r1, sp
 8010512:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8010516:	eec7 2a27 	vdiv.f32	s5, s14, s15
 801051a:	edd1 7a00 	vldr	s15, [r1]
 801051e:	a9ae      	add	r1, sp, #696	; 0x2b8
 8010520:	4401      	add	r1, r0
 8010522:	ee87 4a06 	vdiv.f32	s8, s14, s12
 8010526:	a8ae      	add	r0, sp, #696	; 0x2b8
 8010528:	ed91 6a00 	vldr	s12, [r1]
 801052c:	f505 61b2 	add.w	r1, r5, #1424	; 0x590
 8010530:	4469      	add	r1, sp
 8010532:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8010536:	ee87 5a06 	vdiv.f32	s10, s14, s12
 801053a:	4405      	add	r5, r0
 801053c:	ed91 7a00 	vldr	s14, [r1]
 8010540:	edd5 5a00 	vldr	s11, [r5]
 8010544:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8010548:	4469      	add	r1, sp
 801054a:	4407      	add	r7, r0
 801054c:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8010550:	edd7 1a00 	vldr	s3, [r7]
 8010554:	ed91 6a00 	vldr	s12, [r1]
 8010558:	eea5 7ae7 	vfms.f32	s14, s11, s15
 801055c:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8010560:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8010564:	eea1 6ae7 	vfms.f32	s12, s3, s15
 8010568:	4601      	mov	r1, r0
 801056a:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 801056e:	ed91 1a00 	vldr	s2, [r1]
 8010572:	eea2 6a47 	vfms.f32	s12, s4, s14
 8010576:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 801057a:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 801057e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010582:	ee22 6a86 	vmul.f32	s12, s5, s12
 8010586:	460b      	mov	r3, r1
 8010588:	eea3 7a46 	vfms.f32	s14, s6, s12
 801058c:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 8010590:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8010594:	eee3 7ac6 	vfms.f32	s15, s7, s12
 8010598:	ee27 7a04 	vmul.f32	s14, s14, s8
 801059c:	ed8b 6a02 	vstr	s12, [fp, #8]
 80105a0:	eee4 7ac7 	vfms.f32	s15, s9, s14
 80105a4:	ed8b 7a01 	vstr	s14, [fp, #4]
 80105a8:	ee65 7a27 	vmul.f32	s15, s10, s15
 80105ac:	ed90 7a00 	vldr	s14, [r0]
 80105b0:	ed91 6a00 	vldr	s12, [r1]
 80105b4:	edcb 7a00 	vstr	s15, [fp]
 80105b8:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 80105bc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80105c0:	edd3 7a00 	vldr	s15, [r3]
 80105c4:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 80105c8:	edd3 0a00 	vldr	s1, [r3]
 80105cc:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 80105d0:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80105d4:	4658      	mov	r0, fp
 80105d6:	a952      	add	r1, sp, #328	; 0x148
 80105d8:	eee1 7a65 	vfms.f32	s15, s2, s11
 80105dc:	edd2 5a00 	vldr	s11, [r2]
 80105e0:	eee1 0a61 	vfms.f32	s1, s2, s3
 80105e4:	eee1 5ac7 	vfms.f32	s11, s3, s14
 80105e8:	eef0 1a60 	vmov.f32	s3, s1
 80105ec:	eee2 5a46 	vfms.f32	s11, s4, s12
 80105f0:	eee2 1a67 	vfms.f32	s3, s4, s15
 80105f4:	ee62 5aa5 	vmul.f32	s11, s5, s11
 80105f8:	ee62 2aa1 	vmul.f32	s5, s5, s3
 80105fc:	eea3 6a65 	vfms.f32	s12, s6, s11
 8010600:	eee2 7ac3 	vfms.f32	s15, s5, s6
 8010604:	eea2 1ae3 	vfms.f32	s2, s5, s7
 8010608:	eea3 7ae5 	vfms.f32	s14, s7, s11
 801060c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8010610:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010614:	edcb 5a05 	vstr	s11, [fp, #20]
 8010618:	eef0 5a41 	vmov.f32	s11, s2
 801061c:	eea4 7ac6 	vfms.f32	s14, s9, s12
 8010620:	eee7 5ae4 	vfms.f32	s11, s15, s9
 8010624:	ee25 7a07 	vmul.f32	s14, s10, s14
 8010628:	ee65 5a25 	vmul.f32	s11, s10, s11
 801062c:	ed8b 6a04 	vstr	s12, [fp, #16]
 8010630:	ed8b 7a03 	vstr	s14, [fp, #12]
 8010634:	edcb 2a08 	vstr	s5, [fp, #32]
 8010638:	edcb 7a07 	vstr	s15, [fp, #28]
 801063c:	edcb 5a06 	vstr	s11, [fp, #24]
 8010640:	f7fa fcac 	bl	800af9c <b_dcm2q>
 8010644:	ed9d 7a53 	vldr	s14, [sp, #332]	; 0x14c
 8010648:	eddd 7a54 	vldr	s15, [sp, #336]	; 0x150
 801064c:	ed9d 6a52 	vldr	s12, [sp, #328]	; 0x148
 8010650:	9b06      	ldr	r3, [sp, #24]
 8010652:	eddd 6a03 	vldr	s13, [sp, #12]
 8010656:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 801065a:	ee37 7a07 	vadd.f32	s14, s14, s14
 801065e:	ee36 6a06 	vadd.f32	s12, s12, s12
 8010662:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010666:	ed8d 6a3d 	vstr	s12, [sp, #244]	; 0xf4
 801066a:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 801066e:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8010672:	2b00      	cmp	r3, #0
 8010674:	f43e ae54 	beq.w	800f320 <iNemoEngine_API_Update+0x2b30>
 8010678:	9906      	ldr	r1, [sp, #24]
 801067a:	2200      	movs	r2, #0
 801067c:	464b      	mov	r3, r9
 801067e:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 8010682:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8010686:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 801068a:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 801068e:	f7fe ba06 	b.w	800ea9e <iNemoEngine_API_Update+0x22ae>
 8010692:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010696:	ee38 4ae7 	vsub.f32	s8, s17, s15
 801069a:	edd2 3a31 	vldr	s7, [r2, #196]	; 0xc4
 801069e:	edd2 7a33 	vldr	s15, [r2, #204]	; 0xcc
 80106a2:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80106a6:	ee67 7a84 	vmul.f32	s15, s15, s8
 80106aa:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80106ae:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 80106b2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80106b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ba:	ee3f fa23 	vadd.f32	s30, s30, s7
 80106be:	f6fe ac6e 	blt.w	800ef9e <iNemoEngine_API_Update+0x27ae>
 80106c2:	9b06      	ldr	r3, [sp, #24]
 80106c4:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 80106c8:	eef4 8ac7 	vcmpe.f32	s17, s14
 80106cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106d0:	f140 837a 	bpl.w	8010dc8 <iNemoEngine_API_Update+0x45d8>
 80106d4:	edd3 3a35 	vldr	s7, [r3, #212]	; 0xd4
 80106d8:	ed93 4a37 	vldr	s8, [r3, #220]	; 0xdc
 80106dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80106e0:	ee34 4a63 	vsub.f32	s8, s8, s7
 80106e4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80106e8:	ee64 7a27 	vmul.f32	s15, s8, s15
 80106ec:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80106f0:	ee3f fa23 	vadd.f32	s30, s30, s7
 80106f4:	9b06      	ldr	r3, [sp, #24]
 80106f6:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80106fa:	eef4 8ae7 	vcmpe.f32	s17, s15
 80106fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010702:	f6fe ac6d 	blt.w	800efe0 <iNemoEngine_API_Update+0x27f0>
 8010706:	9b06      	ldr	r3, [sp, #24]
 8010708:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 801070c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8010710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010714:	f140 82fd 	bpl.w	8010d12 <iNemoEngine_API_Update+0x4522>
 8010718:	edd3 3a39 	vldr	s7, [r3, #228]	; 0xe4
 801071c:	ed93 4a3b 	vldr	s8, [r3, #236]	; 0xec
 8010720:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010724:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010728:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801072c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8010730:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8010734:	ee3f fa23 	vadd.f32	s30, s30, s7
 8010738:	9b06      	ldr	r3, [sp, #24]
 801073a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 801073e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010746:	f6fe ac6d 	blt.w	800f024 <iNemoEngine_API_Update+0x2834>
 801074a:	9b06      	ldr	r3, [sp, #24]
 801074c:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8010750:	eef4 8ac7 	vcmpe.f32	s17, s14
 8010754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010758:	f140 831a 	bpl.w	8010d90 <iNemoEngine_API_Update+0x45a0>
 801075c:	edd3 3a3d 	vldr	s7, [r3, #244]	; 0xf4
 8010760:	ed93 4a3f 	vldr	s8, [r3, #252]	; 0xfc
 8010764:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010768:	ee34 4a63 	vsub.f32	s8, s8, s7
 801076c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8010770:	ee64 7a27 	vmul.f32	s15, s8, s15
 8010774:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8010778:	ee3f fa23 	vadd.f32	s30, s30, s7
 801077c:	9b06      	ldr	r3, [sp, #24]
 801077e:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8010782:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801078a:	f6fe ac6d 	blt.w	800f068 <iNemoEngine_API_Update+0x2878>
 801078e:	9b06      	ldr	r3, [sp, #24]
 8010790:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 8010794:	eef4 8ac7 	vcmpe.f32	s17, s14
 8010798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801079c:	f140 82c3 	bpl.w	8010d26 <iNemoEngine_API_Update+0x4536>
 80107a0:	edd3 3a41 	vldr	s7, [r3, #260]	; 0x104
 80107a4:	ed93 4a43 	vldr	s8, [r3, #268]	; 0x10c
 80107a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107ac:	ee34 4a63 	vsub.f32	s8, s8, s7
 80107b0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80107b4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80107b8:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80107bc:	ee3f fa23 	vadd.f32	s30, s30, s7
 80107c0:	9b06      	ldr	r3, [sp, #24]
 80107c2:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 80107c6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80107ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ce:	f6fe ac6d 	blt.w	800f0ac <iNemoEngine_API_Update+0x28bc>
 80107d2:	9b06      	ldr	r3, [sp, #24]
 80107d4:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
 80107d8:	eef4 8ac7 	vcmpe.f32	s17, s14
 80107dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e0:	f140 82d2 	bpl.w	8010d88 <iNemoEngine_API_Update+0x4598>
 80107e4:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 80107e8:	edd3 4a47 	vldr	s9, [r3, #284]	; 0x11c
 80107ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107f0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80107f4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80107f8:	ee64 7aa7 	vmul.f32	s15, s9, s15
 80107fc:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8010800:	ee3f fa04 	vadd.f32	s30, s30, s8
 8010804:	f7fd ba93 	b.w	800dd2e <iNemoEngine_API_Update+0x153e>
 8010808:	ee37 7a67 	vsub.f32	s14, s14, s15
 801080c:	ee38 4ae7 	vsub.f32	s8, s17, s15
 8010810:	edd3 3a4b 	vldr	s7, [r3, #300]	; 0x12c
 8010814:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8010818:	ee77 7ae3 	vsub.f32	s15, s15, s7
 801081c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010820:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8010824:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8010828:	eef4 8ae7 	vcmpe.f32	s17, s15
 801082c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010830:	ee3c ca23 	vadd.f32	s24, s24, s7
 8010834:	f6fd aaab 	blt.w	800dd8e <iNemoEngine_API_Update+0x159e>
 8010838:	9b06      	ldr	r3, [sp, #24]
 801083a:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
 801083e:	eef4 8ac7 	vcmpe.f32	s17, s14
 8010842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010846:	f140 8260 	bpl.w	8010d0a <iNemoEngine_API_Update+0x451a>
 801084a:	edd3 3a4f 	vldr	s7, [r3, #316]	; 0x13c
 801084e:	ed93 4a51 	vldr	s8, [r3, #324]	; 0x144
 8010852:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010856:	ee34 4a63 	vsub.f32	s8, s8, s7
 801085a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801085e:	ee64 7a27 	vmul.f32	s15, s8, s15
 8010862:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8010866:	ee3c ca23 	vadd.f32	s24, s24, s7
 801086a:	9b06      	ldr	r3, [sp, #24]
 801086c:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8010870:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010878:	f6fd aaaa 	blt.w	800ddd0 <iNemoEngine_API_Update+0x15e0>
 801087c:	9b06      	ldr	r3, [sp, #24]
 801087e:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8010882:	eef4 8ac7 	vcmpe.f32	s17, s14
 8010886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801088a:	f140 8237 	bpl.w	8010cfc <iNemoEngine_API_Update+0x450c>
 801088e:	edd3 3a53 	vldr	s7, [r3, #332]	; 0x14c
 8010892:	ed93 4a55 	vldr	s8, [r3, #340]	; 0x154
 8010896:	ee37 7a67 	vsub.f32	s14, s14, s15
 801089a:	ee34 4a63 	vsub.f32	s8, s8, s7
 801089e:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80108a2:	ee64 7a27 	vmul.f32	s15, s8, s15
 80108a6:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80108aa:	ee3c ca23 	vadd.f32	s24, s24, s7
 80108ae:	9b06      	ldr	r3, [sp, #24]
 80108b0:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80108b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80108b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108bc:	f6fd aaaa 	blt.w	800de14 <iNemoEngine_API_Update+0x1624>
 80108c0:	9b06      	ldr	r3, [sp, #24]
 80108c2:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 80108c6:	eef4 8ac7 	vcmpe.f32	s17, s14
 80108ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ce:	f140 8270 	bpl.w	8010db2 <iNemoEngine_API_Update+0x45c2>
 80108d2:	edd3 3a57 	vldr	s7, [r3, #348]	; 0x15c
 80108d6:	ed93 4a59 	vldr	s8, [r3, #356]	; 0x164
 80108da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80108de:	ee34 4a63 	vsub.f32	s8, s8, s7
 80108e2:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80108e6:	ee64 7a27 	vmul.f32	s15, s8, s15
 80108ea:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80108ee:	ee3c ca23 	vadd.f32	s24, s24, s7
 80108f2:	9b06      	ldr	r3, [sp, #24]
 80108f4:	edd3 7a5a 	vldr	s15, [r3, #360]	; 0x168
 80108f8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80108fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010900:	f6fd aaaa 	blt.w	800de58 <iNemoEngine_API_Update+0x1668>
 8010904:	9b06      	ldr	r3, [sp, #24]
 8010906:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 801090a:	eef4 8ac7 	vcmpe.f32	s17, s14
 801090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010912:	f140 8252 	bpl.w	8010dba <iNemoEngine_API_Update+0x45ca>
 8010916:	edd3 3a5b 	vldr	s7, [r3, #364]	; 0x16c
 801091a:	ed93 4a5d 	vldr	s8, [r3, #372]	; 0x174
 801091e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010922:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010926:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801092a:	ee64 7a27 	vmul.f32	s15, s8, s15
 801092e:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8010932:	ee3c ca23 	vadd.f32	s24, s24, s7
 8010936:	9b06      	ldr	r3, [sp, #24]
 8010938:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 801093c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010944:	f6fd aaaa 	blt.w	800de9c <iNemoEngine_API_Update+0x16ac>
 8010948:	9b06      	ldr	r3, [sp, #24]
 801094a:	ed93 7a60 	vldr	s14, [r3, #384]	; 0x180
 801094e:	eef4 8ac7 	vcmpe.f32	s17, s14
 8010952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010956:	f140 8222 	bpl.w	8010d9e <iNemoEngine_API_Update+0x45ae>
 801095a:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 801095e:	edd3 4a61 	vldr	s9, [r3, #388]	; 0x184
 8010962:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010966:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801096a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801096e:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8010972:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8010976:	ee3c ca04 	vadd.f32	s24, s24, s8
 801097a:	f7fd bb2a 	b.w	800dfd2 <iNemoEngine_API_Update+0x17e2>
 801097e:	a94e      	add	r1, sp, #312	; 0x138
 8010980:	a868      	add	r0, sp, #416	; 0x1a0
 8010982:	f7fa fb0b 	bl	800af9c <b_dcm2q>
 8010986:	9d06      	ldr	r5, [sp, #24]
 8010988:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 801098c:	edc5 7a72 	vstr	s15, [r5, #456]	; 0x1c8
 8010990:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010994:	edc5 7a73 	vstr	s15, [r5, #460]	; 0x1cc
 8010998:	4621      	mov	r1, r4
 801099a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801099e:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
 80109a2:	edcd 7a05 	vstr	s15, [sp, #20]
 80109a6:	f002 fb6f 	bl	8013088 <memset>
 80109aa:	4be5      	ldr	r3, [pc, #916]	; (8010d40 <iNemoEngine_API_Update+0x4550>)
 80109ac:	702c      	strb	r4, [r5, #0]
 80109ae:	eddd 7a05 	vldr	s15, [sp, #20]
 80109b2:	edd5 2a02 	vldr	s5, [r5, #8]
 80109b6:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 80109ba:	9a06      	ldr	r2, [sp, #24]
 80109bc:	f8c5 31d4 	str.w	r3, [r5, #468]	; 0x1d4
 80109c0:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
 80109c4:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
 80109c8:	f8c5 324c 	str.w	r3, [r5, #588]	; 0x24c
 80109cc:	f8c5 3274 	str.w	r3, [r5, #628]	; 0x274
 80109d0:	f8c5 329c 	str.w	r3, [r5, #668]	; 0x29c
 80109d4:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
 80109d8:	f8c5 32ec 	str.w	r3, [r5, #748]	; 0x2ec
 80109dc:	f8c5 3314 	str.w	r3, [r5, #788]	; 0x314
 80109e0:	2401      	movs	r4, #1
 80109e2:	f7fd bb44 	b.w	800e06e <iNemoEngine_API_Update+0x187e>
 80109e6:	290a      	cmp	r1, #10
 80109e8:	f000 815d 	beq.w	8010ca6 <iNemoEngine_API_Update+0x44b6>
 80109ec:	1c4b      	adds	r3, r1, #1
 80109ee:	9906      	ldr	r1, [sp, #24]
 80109f0:	f881 31a0 	strb.w	r3, [r1, #416]	; 0x1a0
 80109f4:	4613      	mov	r3, r2
 80109f6:	2200      	movs	r2, #0
 80109f8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80109fc:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8010a00:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8010a04:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8010a08:	f7fe b849 	b.w	800ea9e <iNemoEngine_API_Update+0x22ae>
 8010a0c:	ed9d 7a55 	vldr	s14, [sp, #340]	; 0x154
 8010a10:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a18:	f340 824f 	ble.w	8010eba <iNemoEngine_API_Update+0x46ca>
 8010a1c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8010a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a28:	f140 8244 	bpl.w	8010eb4 <iNemoEngine_API_Update+0x46c4>
 8010a2c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010a30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a38:	f140 81f9 	bpl.w	8010e2e <iNemoEngine_API_Update+0x463e>
 8010a3c:	eddf 7ace 	vldr	s15, [pc, #824]	; 8010d78 <iNemoEngine_API_Update+0x4588>
 8010a40:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a48:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8010a4c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8010a50:	eef0 8a46 	vmov.f32	s17, s12
 8010a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a58:	eee7 8aa5 	vfma.f32	s17, s15, s11
 8010a5c:	f2c0 81fb 	blt.w	8010e56 <iNemoEngine_API_Update+0x4666>
 8010a60:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a6c:	f140 81fb 	bpl.w	8010e66 <iNemoEngine_API_Update+0x4676>
 8010a70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a78:	ed9f 6ab2 	vldr	s12, [pc, #712]	; 8010d44 <iNemoEngine_API_Update+0x4554>
 8010a7c:	eddf 8ab2 	vldr	s17, [pc, #712]	; 8010d48 <iNemoEngine_API_Update+0x4558>
 8010a80:	eee7 8a86 	vfma.f32	s17, s15, s12
 8010a84:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8010a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a90:	f2c0 81fb 	blt.w	8010e8a <iNemoEngine_API_Update+0x469a>
 8010a94:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8010a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa0:	f140 81fb 	bpl.w	8010e9a <iNemoEngine_API_Update+0x46aa>
 8010aa4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8010aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010aac:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8010ab0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010ab4:	eee7 8a87 	vfma.f32	s17, s15, s14
 8010ab8:	9a06      	ldr	r2, [sp, #24]
 8010aba:	2300      	movs	r3, #0
 8010abc:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 8010ac0:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 8010ac4:	f7fe bc29 	b.w	800f31a <iNemoEngine_API_Update+0x2b2a>
 8010ac8:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8010d4c <iNemoEngine_API_Update+0x455c>
 8010acc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad4:	f57e ad78 	bpl.w	800f5c8 <iNemoEngine_API_Update+0x2dd8>
 8010ad8:	ed9f 6a9d 	vldr	s12, [pc, #628]	; 8010d50 <iNemoEngine_API_Update+0x4560>
 8010adc:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8010d78 <iNemoEngine_API_Update+0x4588>
 8010ae0:	eddf 5a9c 	vldr	s11, [pc, #624]	; 8010d54 <iNemoEngine_API_Update+0x4564>
 8010ae4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8010ae8:	ee26 6a26 	vmul.f32	s12, s12, s13
 8010aec:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8010d58 <iNemoEngine_API_Update+0x4568>
 8010af0:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010af4:	ed9f 6a99 	vldr	s12, [pc, #612]	; 8010d5c <iNemoEngine_API_Update+0x456c>
 8010af8:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b00:	f6fe ad78 	blt.w	800f5f4 <iNemoEngine_API_Update+0x2e04>
 8010b04:	eddf 6a96 	vldr	s13, [pc, #600]	; 8010d60 <iNemoEngine_API_Update+0x4570>
 8010b08:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b10:	f57e ad78 	bpl.w	800f604 <iNemoEngine_API_Update+0x2e14>
 8010b14:	ed9f 6a91 	vldr	s12, [pc, #580]	; 8010d5c <iNemoEngine_API_Update+0x456c>
 8010b18:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8010b1c:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8010b20:	ee26 6a26 	vmul.f32	s12, s12, s13
 8010b24:	eef3 5a04 	vmov.f32	s11, #52	; 0x41a00000  20.0
 8010b28:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8010b2c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010b30:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8010d80 <iNemoEngine_API_Update+0x4590>
 8010b34:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b3c:	f6fe ad78 	blt.w	800f630 <iNemoEngine_API_Update+0x2e40>
 8010b40:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010b44:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b4c:	f57e ad77 	bpl.w	800f63e <iNemoEngine_API_Update+0x2e4e>
 8010b50:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8010d80 <iNemoEngine_API_Update+0x4590>
 8010b54:	eddf 6a83 	vldr	s13, [pc, #524]	; 8010d64 <iNemoEngine_API_Update+0x4574>
 8010b58:	eddf 5a83 	vldr	s11, [pc, #524]	; 8010d68 <iNemoEngine_API_Update+0x4578>
 8010b5c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8010b60:	ee26 6a26 	vmul.f32	s12, s12, s13
 8010b64:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8010b68:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010b6c:	f7fe bd75 	b.w	800f65a <iNemoEngine_API_Update+0x2e6a>
 8010b70:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8010d6c <iNemoEngine_API_Update+0x457c>
 8010b74:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b7c:	f57e ad06 	bpl.w	800f58c <iNemoEngine_API_Update+0x2d9c>
 8010b80:	eddf 6a73 	vldr	s13, [pc, #460]	; 8010d50 <iNemoEngine_API_Update+0x4560>
 8010b84:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8c:	da9c      	bge.n	8010ac8 <iNemoEngine_API_Update+0x42d8>
 8010b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b92:	f7fe bd11 	b.w	800f5b8 <iNemoEngine_API_Update+0x2dc8>
 8010b96:	2104      	movs	r1, #4
 8010b98:	f04f 0e03 	mov.w	lr, #3
 8010b9c:	2706      	movs	r7, #6
 8010b9e:	f04f 0c07 	mov.w	ip, #7
 8010ba2:	4608      	mov	r0, r1
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	2600      	movs	r6, #0
 8010ba8:	f7ff bbfa 	b.w	80103a0 <iNemoEngine_API_Update+0x3bb0>
 8010bac:	eddf 3a70 	vldr	s7, [pc, #448]	; 8010d70 <iNemoEngine_API_Update+0x4580>
 8010bb0:	ed9f 5a70 	vldr	s10, [pc, #448]	; 8010d74 <iNemoEngine_API_Update+0x4584>
 8010bb4:	ac43      	add	r4, sp, #268	; 0x10c
 8010bb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010bba:	edd0 7a7c 	vldr	s15, [r0, #496]	; 0x1f0
 8010bbe:	f5a0 73ae 	sub.w	r3, r0, #348	; 0x15c
 8010bc2:	3101      	adds	r1, #1
 8010bc4:	eeb0 7a67 	vmov.f32	s14, s15
 8010bc8:	461a      	mov	r2, r3
 8010bca:	edd2 5ad6 	vldr	s11, [r2, #856]	; 0x358
 8010bce:	320c      	adds	r2, #12
 8010bd0:	4290      	cmp	r0, r2
 8010bd2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010bd6:	d1f8      	bne.n	8010bca <iNemoEngine_API_Update+0x43da>
 8010bd8:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010bdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010be0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010be4:	edd3 5ad6 	vldr	s11, [r3, #856]	; 0x358
 8010be8:	330c      	adds	r3, #12
 8010bea:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8010bee:	4298      	cmp	r0, r3
 8010bf0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8010bf4:	d1f6      	bne.n	8010be4 <iNemoEngine_API_Update+0x43f4>
 8010bf6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010bfa:	2902      	cmp	r1, #2
 8010bfc:	f100 0004 	add.w	r0, r0, #4
 8010c00:	ece4 7a01 	vstmia	r4!, {s15}
 8010c04:	d1d9      	bne.n	8010bba <iNemoEngine_API_Update+0x43ca>
 8010c06:	eddd 5a43 	vldr	s11, [sp, #268]	; 0x10c
 8010c0a:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 8010c0e:	ed9d 7a45 	vldr	s14, [sp, #276]	; 0x114
 8010c12:	eeb1 3ae5 	vsqrt.f32	s6, s11
 8010c16:	eef1 3ae7 	vsqrt.f32	s7, s15
 8010c1a:	eeb1 5ac7 	vsqrt.f32	s10, s14
 8010c1e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010c22:	eef3 5a00 	vmov.f32	s11, #48	; 0x41800000  16.0
 8010c26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010c2a:	ed8d 3a43 	vstr	s6, [sp, #268]	; 0x10c
 8010c2e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8010c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c36:	edcd 3a44 	vstr	s7, [sp, #272]	; 0x110
 8010c3a:	ed8d 5a45 	vstr	s10, [sp, #276]	; 0x114
 8010c3e:	f57e abd4 	bpl.w	800f3ea <iNemoEngine_API_Update+0x2bfa>
 8010c42:	9906      	ldr	r1, [sp, #24]
 8010c44:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 8010c48:	2200      	movs	r2, #0
 8010c4a:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 8010c4e:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 8010c52:	464b      	mov	r3, r9
 8010c54:	704a      	strb	r2, [r1, #1]
 8010c56:	f7fd bf22 	b.w	800ea9e <iNemoEngine_API_Update+0x22ae>
 8010c5a:	2208      	movs	r2, #8
 8010c5c:	9203      	str	r2, [sp, #12]
 8010c5e:	2205      	movs	r2, #5
 8010c60:	920e      	str	r2, [sp, #56]	; 0x38
 8010c62:	2202      	movs	r2, #2
 8010c64:	f7ff bbb3 	b.w	80103ce <iNemoEngine_API_Update+0x3bde>
 8010c68:	2301      	movs	r3, #1
 8010c6a:	f7fd bf04 	b.w	800ea76 <iNemoEngine_API_Update+0x2286>
 8010c6e:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8010c72:	2b27      	cmp	r3, #39	; 0x27
 8010c74:	d838      	bhi.n	8010ce8 <iNemoEngine_API_Update+0x44f8>
 8010c76:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 8010c7a:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 8010c7e:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 8010c82:	9906      	ldr	r1, [sp, #24]
 8010c84:	f8b1 31a8 	ldrh.w	r3, [r1, #424]	; 0x1a8
 8010c88:	3301      	adds	r3, #1
 8010c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c8e:	bf14      	ite	ne
 8010c90:	b29b      	uxthne	r3, r3
 8010c92:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8010c96:	2201      	movs	r2, #1
 8010c98:	f8a1 31a8 	strh.w	r3, [r1, #424]	; 0x1a8
 8010c9c:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8010ca0:	464b      	mov	r3, r9
 8010ca2:	f7fd befc 	b.w	800ea9e <iNemoEngine_API_Update+0x22ae>
 8010ca6:	9906      	ldr	r1, [sp, #24]
 8010ca8:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8010cac:	f891 31a3 	ldrb.w	r3, [r1, #419]	; 0x1a3
 8010cb0:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	f881 31a3 	strb.w	r3, [r1, #419]	; 0x1a3
 8010cba:	784b      	ldrb	r3, [r1, #1]
 8010cbc:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 8010cc0:	f240 1201 	movw	r2, #257	; 0x101
 8010cc4:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 8010cc8:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8010ccc:	b13b      	cbz	r3, 8010cde <iNemoEngine_API_Update+0x44ee>
 8010cce:	2300      	movs	r3, #0
 8010cd0:	ed81 ea6f 	vstr	s28, [r1, #444]	; 0x1bc
 8010cd4:	edc1 ea70 	vstr	s29, [r1, #448]	; 0x1c0
 8010cd8:	edc1 ba71 	vstr	s23, [r1, #452]	; 0x1c4
 8010cdc:	704b      	strb	r3, [r1, #1]
 8010cde:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	f7fd bedb 	b.w	800ea9e <iNemoEngine_API_Update+0x22ae>
 8010ce8:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 8010cec:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 8010cf0:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 8010cf4:	e7c5      	b.n	8010c82 <iNemoEngine_API_Update+0x4492>
 8010cf6:	eef0 7a47 	vmov.f32	s15, s14
 8010cfa:	e5bf      	b.n	801087c <iNemoEngine_API_Update+0x408c>
 8010cfc:	eef0 7a47 	vmov.f32	s15, s14
 8010d00:	f7fd b86f 	b.w	800dde2 <iNemoEngine_API_Update+0x15f2>
 8010d04:	eef0 7a47 	vmov.f32	s15, s14
 8010d08:	e563      	b.n	80107d2 <iNemoEngine_API_Update+0x3fe2>
 8010d0a:	eef0 7a47 	vmov.f32	s15, s14
 8010d0e:	f7fd b846 	b.w	800dd9e <iNemoEngine_API_Update+0x15ae>
 8010d12:	eef0 7a47 	vmov.f32	s15, s14
 8010d16:	f7fe b96c 	b.w	800eff2 <iNemoEngine_API_Update+0x2802>
 8010d1a:	eef0 7a47 	vmov.f32	s15, s14
 8010d1e:	e4f2      	b.n	8010706 <iNemoEngine_API_Update+0x3f16>
 8010d20:	eef0 7a47 	vmov.f32	s15, s14
 8010d24:	e533      	b.n	801078e <iNemoEngine_API_Update+0x3f9e>
 8010d26:	eef0 7a47 	vmov.f32	s15, s14
 8010d2a:	f7fe b9a6 	b.w	800f07a <iNemoEngine_API_Update+0x288a>
 8010d2e:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8010d32:	9315      	str	r3, [sp, #84]	; 0x54
 8010d34:	f7fc b886 	b.w	800ce44 <iNemoEngine_API_Update+0x654>
 8010d38:	f505 6597 	add.w	r5, r5, #1208	; 0x4b8
 8010d3c:	f7fe be2c 	b.w	800f998 <iNemoEngine_API_Update+0x31a8>
 8010d40:	40a00000 	.word	0x40a00000
 8010d44:	3e999998 	.word	0x3e999998
 8010d48:	3f99999a 	.word	0x3f99999a
 8010d4c:	3cf5c28f 	.word	0x3cf5c28f
 8010d50:	3c75c28f 	.word	0x3c75c28f
 8010d54:	42855556 	.word	0x42855556
 8010d58:	3f866666 	.word	0x3f866666
 8010d5c:	3d4ccccd 	.word	0x3d4ccccd
 8010d60:	3dcccccd 	.word	0x3dcccccd
 8010d64:	42200000 	.word	0x42200000
 8010d68:	40555555 	.word	0x40555555
 8010d6c:	3c23d70a 	.word	0x3c23d70a
 8010d70:	3d088889 	.word	0x3d088889
 8010d74:	3d0d3dcb 	.word	0x3d0d3dcb
 8010d78:	3dccccd0 	.word	0x3dccccd0
 8010d7c:	3f8ccccd 	.word	0x3f8ccccd
 8010d80:	3e4ccccd 	.word	0x3e4ccccd
 8010d84:	00000000 	.word	0x00000000
 8010d88:	eef0 7a47 	vmov.f32	s15, s14
 8010d8c:	f7fe b997 	b.w	800f0be <iNemoEngine_API_Update+0x28ce>
 8010d90:	eef0 7a47 	vmov.f32	s15, s14
 8010d94:	f7fe b94f 	b.w	800f036 <iNemoEngine_API_Update+0x2846>
 8010d98:	eef0 7a47 	vmov.f32	s15, s14
 8010d9c:	e4d5      	b.n	801074a <iNemoEngine_API_Update+0x3f5a>
 8010d9e:	eef0 7a47 	vmov.f32	s15, s14
 8010da2:	f7fd b884 	b.w	800deae <iNemoEngine_API_Update+0x16be>
 8010da6:	eef0 7a47 	vmov.f32	s15, s14
 8010daa:	e5cd      	b.n	8010948 <iNemoEngine_API_Update+0x4158>
 8010dac:	eef0 7a47 	vmov.f32	s15, s14
 8010db0:	e586      	b.n	80108c0 <iNemoEngine_API_Update+0x40d0>
 8010db2:	eef0 7a47 	vmov.f32	s15, s14
 8010db6:	f7fd b836 	b.w	800de26 <iNemoEngine_API_Update+0x1636>
 8010dba:	eef0 7a47 	vmov.f32	s15, s14
 8010dbe:	f7fd b854 	b.w	800de6a <iNemoEngine_API_Update+0x167a>
 8010dc2:	eef0 7a47 	vmov.f32	s15, s14
 8010dc6:	e59d      	b.n	8010904 <iNemoEngine_API_Update+0x4114>
 8010dc8:	eef0 7a47 	vmov.f32	s15, s14
 8010dcc:	f7fe b8ef 	b.w	800efae <iNemoEngine_API_Update+0x27be>
 8010dd0:	9906      	ldr	r1, [sp, #24]
 8010dd2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010dd6:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 8010dda:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 8010dde:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 8010de2:	f7fe ba9a 	b.w	800f31a <iNemoEngine_API_Update+0x2b2a>
 8010de6:	9906      	ldr	r1, [sp, #24]
 8010de8:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 8010dec:	3301      	adds	r3, #1
 8010dee:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 8010df2:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8010df6:	460b      	mov	r3, r1
 8010df8:	f7ff ba49 	b.w	801028e <iNemoEngine_API_Update+0x3a9e>
 8010dfc:	2a00      	cmp	r2, #0
 8010dfe:	f73d afa4 	bgt.w	800ed4a <iNemoEngine_API_Update+0x255a>
 8010e02:	eddd 5a83 	vldr	s11, [sp, #524]	; 0x20c
 8010e06:	ed9d 7a84 	vldr	s14, [sp, #528]	; 0x210
 8010e0a:	eddd 7a85 	vldr	s15, [sp, #532]	; 0x214
 8010e0e:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8010e12:	ee65 5a86 	vmul.f32	s11, s11, s12
 8010e16:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010e1a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010e1e:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 8010e22:	ed8d 7a84 	vstr	s14, [sp, #528]	; 0x210
 8010e26:	edcd 7a85 	vstr	s15, [sp, #532]	; 0x214
 8010e2a:	f7fd bb24 	b.w	800e476 <iNemoEngine_API_Update+0x1c86>
 8010e2e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010e32:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8010e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e3a:	f57f ae11 	bpl.w	8010a60 <iNemoEngine_API_Update+0x4270>
 8010e3e:	ed1f 6a32 	vldr	s12, [pc, #-200]	; 8010d78 <iNemoEngine_API_Update+0x4588>
 8010e42:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 8010d7c <iNemoEngine_API_Update+0x458c>
 8010e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e4a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010e4e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8010e52:	eee7 8a86 	vfma.f32	s17, s15, s12
 8010e56:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010e5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e62:	f6ff ae0f 	blt.w	8010a84 <iNemoEngine_API_Update+0x4294>
 8010e66:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8010e6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e72:	f57f ae0f 	bpl.w	8010a94 <iNemoEngine_API_Update+0x42a4>
 8010e76:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e7e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010e82:	eef7 8a08 	vmov.f32	s17, #120	; 0x3fc00000  1.5
 8010e86:	eee7 8a86 	vfma.f32	s17, s15, s12
 8010e8a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8010e8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e96:	f6ff ae0f 	blt.w	8010ab8 <iNemoEngine_API_Update+0x42c8>
 8010e9a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8010e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ea2:	ed1f 7a49 	vldr	s14, [pc, #-292]	; 8010d80 <iNemoEngine_API_Update+0x4590>
 8010ea6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010eaa:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
 8010eae:	eee7 8a87 	vfma.f32	s17, s15, s14
 8010eb2:	e601      	b.n	8010ab8 <iNemoEngine_API_Update+0x42c8>
 8010eb4:	eef1 8a04 	vmov.f32	s17, #20	; 0x40a00000  5.0
 8010eb8:	e5fe      	b.n	8010ab8 <iNemoEngine_API_Update+0x42c8>
 8010eba:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8010ebe:	e5fb      	b.n	8010ab8 <iNemoEngine_API_Update+0x42c8>
 8010ec0:	ed1f 8a50 	vldr	s16, [pc, #-320]	; 8010d84 <iNemoEngine_API_Update+0x4594>
 8010ec4:	f7fb bdeb 	b.w	800ca9e <iNemoEngine_API_Update+0x2ae>

08010ec8 <MotionFX_initialize>:
 8010ec8:	4a4c      	ldr	r2, [pc, #304]	; (8010ffc <MotionFX_initialize+0x134>)
 8010eca:	6813      	ldr	r3, [r2, #0]
 8010ecc:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
 8010ed0:	f023 0301 	bic.w	r3, r3, #1
 8010ed4:	b530      	push	{r4, r5, lr}
 8010ed6:	6013      	str	r3, [r2, #0]
 8010ed8:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 8010edc:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8010ee0:	400b      	ands	r3, r1
 8010ee2:	f24c 2240 	movw	r2, #49728	; 0xc240
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	b085      	sub	sp, #20
 8010eea:	4604      	mov	r4, r0
 8010eec:	d013      	beq.n	8010f16 <MotionFX_initialize+0x4e>
 8010eee:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 8010ef2:	f24c 2270 	movw	r2, #49776	; 0xc270
 8010ef6:	4019      	ands	r1, r3
 8010ef8:	4291      	cmp	r1, r2
 8010efa:	d00c      	beq.n	8010f16 <MotionFX_initialize+0x4e>
 8010efc:	4a40      	ldr	r2, [pc, #256]	; (8011000 <MotionFX_initialize+0x138>)
 8010efe:	2301      	movs	r3, #1
 8010f00:	6093      	str	r3, [r2, #8]
 8010f02:	6893      	ldr	r3, [r2, #8]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d1fc      	bne.n	8010f02 <MotionFX_initialize+0x3a>
 8010f08:	4b3e      	ldr	r3, [pc, #248]	; (8011004 <MotionFX_initialize+0x13c>)
 8010f0a:	6013      	str	r3, [r2, #0]
 8010f0c:	6812      	ldr	r2, [r2, #0]
 8010f0e:	4b3e      	ldr	r3, [pc, #248]	; (8011008 <MotionFX_initialize+0x140>)
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d02c      	beq.n	8010f6e <MotionFX_initialize+0xa6>
 8010f14:	e7fe      	b.n	8010f14 <MotionFX_initialize+0x4c>
 8010f16:	4b3d      	ldr	r3, [pc, #244]	; (801100c <MotionFX_initialize+0x144>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d1ee      	bne.n	8010efc <MotionFX_initialize+0x34>
 8010f1e:	4a3c      	ldr	r2, [pc, #240]	; (8011010 <MotionFX_initialize+0x148>)
 8010f20:	6813      	ldr	r3, [r2, #0]
 8010f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f26:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8010f2a:	d056      	beq.n	8010fda <MotionFX_initialize+0x112>
 8010f2c:	6813      	ldr	r3, [r2, #0]
 8010f2e:	f240 4183 	movw	r1, #1155	; 0x483
 8010f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f36:	428b      	cmp	r3, r1
 8010f38:	d04f      	beq.n	8010fda <MotionFX_initialize+0x112>
 8010f3a:	6813      	ldr	r3, [r2, #0]
 8010f3c:	f240 4285 	movw	r2, #1157	; 0x485
 8010f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f44:	4293      	cmp	r3, r2
 8010f46:	d048      	beq.n	8010fda <MotionFX_initialize+0x112>
 8010f48:	4b32      	ldr	r3, [pc, #200]	; (8011014 <MotionFX_initialize+0x14c>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f50:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8010f54:	d1d2      	bne.n	8010efc <MotionFX_initialize+0x34>
 8010f56:	4a30      	ldr	r2, [pc, #192]	; (8011018 <MotionFX_initialize+0x150>)
 8010f58:	2301      	movs	r3, #1
 8010f5a:	6093      	str	r3, [r2, #8]
 8010f5c:	6893      	ldr	r3, [r2, #8]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d1fc      	bne.n	8010f5c <MotionFX_initialize+0x94>
 8010f62:	4b28      	ldr	r3, [pc, #160]	; (8011004 <MotionFX_initialize+0x13c>)
 8010f64:	6013      	str	r3, [r2, #0]
 8010f66:	6812      	ldr	r2, [r2, #0]
 8010f68:	4b27      	ldr	r3, [pc, #156]	; (8011008 <MotionFX_initialize+0x140>)
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d1d2      	bne.n	8010f14 <MotionFX_initialize+0x4c>
 8010f6e:	4b2b      	ldr	r3, [pc, #172]	; (801101c <MotionFX_initialize+0x154>)
 8010f70:	4a2b      	ldr	r2, [pc, #172]	; (8011020 <MotionFX_initialize+0x158>)
 8010f72:	9303      	str	r3, [sp, #12]
 8010f74:	2501      	movs	r5, #1
 8010f76:	4620      	mov	r0, r4
 8010f78:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8010f7c:	f882 53c4 	strb.w	r5, [r2, #964]	; 0x3c4
 8010f80:	f7fb f946 	bl	800c210 <MFX_emptyAttitude>
 8010f84:	a901      	add	r1, sp, #4
 8010f86:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8010f8a:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8010f8e:	f7f9 ff03 	bl	800ad98 <updateOrientation>
 8010f92:	a903      	add	r1, sp, #12
 8010f94:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8010f98:	f7f9 fefe 	bl	800ad98 <updateOrientation>
 8010f9c:	a902      	add	r1, sp, #8
 8010f9e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8010fa2:	f7f9 fef9 	bl	800ad98 <updateOrientation>
 8010fa6:	4b1f      	ldr	r3, [pc, #124]	; (8011024 <MotionFX_initialize+0x15c>)
 8010fa8:	491f      	ldr	r1, [pc, #124]	; (8011028 <MotionFX_initialize+0x160>)
 8010faa:	6363      	str	r3, [r4, #52]	; 0x34
 8010fac:	4b1f      	ldr	r3, [pc, #124]	; (801102c <MotionFX_initialize+0x164>)
 8010fae:	4a20      	ldr	r2, [pc, #128]	; (8011030 <MotionFX_initialize+0x168>)
 8010fb0:	62a1      	str	r1, [r4, #40]	; 0x28
 8010fb2:	61e3      	str	r3, [r4, #28]
 8010fb4:	491f      	ldr	r1, [pc, #124]	; (8011034 <MotionFX_initialize+0x16c>)
 8010fb6:	61a2      	str	r2, [r4, #24]
 8010fb8:	2300      	movs	r3, #0
 8010fba:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8010fbe:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010fc2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8010fc6:	f240 1301 	movw	r3, #257	; 0x101
 8010fca:	62e0      	str	r0, [r4, #44]	; 0x2c
 8010fcc:	6221      	str	r1, [r4, #32]
 8010fce:	80a2      	strh	r2, [r4, #4]
 8010fd0:	f8a4 300d 	strh.w	r3, [r4, #13]
 8010fd4:	73e5      	strb	r5, [r4, #15]
 8010fd6:	b005      	add	sp, #20
 8010fd8:	bd30      	pop	{r4, r5, pc}
 8010fda:	4a17      	ldr	r2, [pc, #92]	; (8011038 <MotionFX_initialize+0x170>)
 8010fdc:	2301      	movs	r3, #1
 8010fde:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8010fe2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d1fb      	bne.n	8010fe2 <MotionFX_initialize+0x11a>
 8010fea:	4b06      	ldr	r3, [pc, #24]	; (8011004 <MotionFX_initialize+0x13c>)
 8010fec:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8010ff0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8010ff4:	4b04      	ldr	r3, [pc, #16]	; (8011008 <MotionFX_initialize+0x140>)
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d0b9      	beq.n	8010f6e <MotionFX_initialize+0xa6>
 8010ffa:	e78b      	b.n	8010f14 <MotionFX_initialize+0x4c>
 8010ffc:	e0002000 	.word	0xe0002000
 8011000:	40023000 	.word	0x40023000
 8011004:	f407a5c2 	.word	0xf407a5c2
 8011008:	b5e8b5cd 	.word	0xb5e8b5cd
 801100c:	e0042000 	.word	0xe0042000
 8011010:	5c001000 	.word	0x5c001000
 8011014:	50081000 	.word	0x50081000
 8011018:	4c004000 	.word	0x4c004000
 801101c:	00756e65 	.word	0x00756e65
 8011020:	2000021c 	.word	0x2000021c
 8011024:	3f2ac083 	.word	0x3f2ac083
 8011028:	3f666666 	.word	0x3f666666
 801102c:	3a378034 	.word	0x3a378034
 8011030:	3a51b717 	.word	0x3a51b717
 8011034:	3b378034 	.word	0x3b378034
 8011038:	58024000 	.word	0x58024000

0801103c <MotionFX_setKnobs>:
 801103c:	4b24      	ldr	r3, [pc, #144]	; (80110d0 <MotionFX_setKnobs+0x94>)
 801103e:	f893 23c4 	ldrb.w	r2, [r3, #964]	; 0x3c4
 8011042:	b902      	cbnz	r2, 8011046 <MotionFX_setKnobs+0xa>
 8011044:	4770      	bx	lr
 8011046:	460b      	mov	r3, r1
 8011048:	2900      	cmp	r1, #0
 801104a:	d0fb      	beq.n	8011044 <MotionFX_setKnobs+0x8>
 801104c:	b510      	push	{r4, lr}
 801104e:	4604      	mov	r4, r0
 8011050:	689a      	ldr	r2, [r3, #8]
 8011052:	6808      	ldr	r0, [r1, #0]
 8011054:	6849      	ldr	r1, [r1, #4]
 8011056:	62e1      	str	r1, [r4, #44]	; 0x2c
 8011058:	62a0      	str	r0, [r4, #40]	; 0x28
 801105a:	6362      	str	r2, [r4, #52]	; 0x34
 801105c:	7b1a      	ldrb	r2, [r3, #12]
 801105e:	7162      	strb	r2, [r4, #5]
 8011060:	6918      	ldr	r0, [r3, #16]
 8011062:	6959      	ldr	r1, [r3, #20]
 8011064:	699a      	ldr	r2, [r3, #24]
 8011066:	6222      	str	r2, [r4, #32]
 8011068:	61a0      	str	r0, [r4, #24]
 801106a:	61e1      	str	r1, [r4, #28]
 801106c:	7f1a      	ldrb	r2, [r3, #28]
 801106e:	7122      	strb	r2, [r4, #4]
 8011070:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8011074:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 8011078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801107a:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 801107e:	b084      	sub	sp, #16
 8011080:	f8b3 101d 	ldrh.w	r1, [r3, #29]
 8011084:	7fda      	ldrb	r2, [r3, #31]
 8011086:	f88d 2006 	strb.w	r2, [sp, #6]
 801108a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801108e:	f8b3 2021 	ldrh.w	r2, [r3, #33]	; 0x21
 8011092:	f8ad 2008 	strh.w	r2, [sp, #8]
 8011096:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801109a:	f88d 200a 	strb.w	r2, [sp, #10]
 801109e:	f8b3 2025 	ldrh.w	r2, [r3, #37]	; 0x25
 80110a2:	f8ad 200c 	strh.w	r2, [sp, #12]
 80110a6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80110aa:	f88d 300e 	strb.w	r3, [sp, #14]
 80110ae:	a901      	add	r1, sp, #4
 80110b0:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80110b4:	f7f9 fe70 	bl	800ad98 <updateOrientation>
 80110b8:	a903      	add	r1, sp, #12
 80110ba:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80110be:	f7f9 fe6b 	bl	800ad98 <updateOrientation>
 80110c2:	a902      	add	r1, sp, #8
 80110c4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80110c8:	f7f9 fe66 	bl	800ad98 <updateOrientation>
 80110cc:	b004      	add	sp, #16
 80110ce:	bd10      	pop	{r4, pc}
 80110d0:	2000021c 	.word	0x2000021c

080110d4 <MotionFX_getKnobs>:
 80110d4:	4b1d      	ldr	r3, [pc, #116]	; (801114c <MotionFX_getKnobs+0x78>)
 80110d6:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80110da:	b903      	cbnz	r3, 80110de <MotionFX_getKnobs+0xa>
 80110dc:	4770      	bx	lr
 80110de:	460a      	mov	r2, r1
 80110e0:	2900      	cmp	r1, #0
 80110e2:	d0fb      	beq.n	80110dc <MotionFX_getKnobs+0x8>
 80110e4:	b510      	push	{r4, lr}
 80110e6:	4604      	mov	r4, r0
 80110e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80110ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80110ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80110ee:	6093      	str	r3, [r2, #8]
 80110f0:	6010      	str	r0, [r2, #0]
 80110f2:	6051      	str	r1, [r2, #4]
 80110f4:	7963      	ldrb	r3, [r4, #5]
 80110f6:	7313      	strb	r3, [r2, #12]
 80110f8:	69a0      	ldr	r0, [r4, #24]
 80110fa:	69e1      	ldr	r1, [r4, #28]
 80110fc:	6a23      	ldr	r3, [r4, #32]
 80110fe:	6193      	str	r3, [r2, #24]
 8011100:	6110      	str	r0, [r2, #16]
 8011102:	6151      	str	r1, [r2, #20]
 8011104:	7923      	ldrb	r3, [r4, #4]
 8011106:	7713      	strb	r3, [r2, #28]
 8011108:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801110c:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8011110:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8011114:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011116:	f102 011d 	add.w	r1, r2, #29
 801111a:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 801111e:	f7f9 fc93 	bl	800aa48 <findAxis>
 8011122:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8011126:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801112a:	f7f9 fc8d 	bl	800aa48 <findAxis>
 801112e:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8011132:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8011136:	f7f9 fc87 	bl	800aa48 <findAxis>
 801113a:	2300      	movs	r3, #0
 801113c:	f882 3020 	strb.w	r3, [r2, #32]
 8011140:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8011144:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8011148:	bd10      	pop	{r4, pc}
 801114a:	bf00      	nop
 801114c:	2000021c 	.word	0x2000021c

08011150 <MotionFX_enable_6X>:
 8011150:	4b0e      	ldr	r3, [pc, #56]	; (801118c <MotionFX_enable_6X+0x3c>)
 8011152:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8011156:	b903      	cbnz	r3, 801115a <MotionFX_enable_6X+0xa>
 8011158:	4770      	bx	lr
 801115a:	2900      	cmp	r1, #0
 801115c:	d0fc      	beq.n	8011158 <MotionFX_enable_6X+0x8>
 801115e:	b530      	push	{r4, r5, lr}
 8011160:	1d05      	adds	r5, r0, #4
 8011162:	b099      	sub	sp, #100	; 0x64
 8011164:	4604      	mov	r4, r0
 8011166:	4629      	mov	r1, r5
 8011168:	225c      	movs	r2, #92	; 0x5c
 801116a:	a801      	add	r0, sp, #4
 801116c:	f001 ffc4 	bl	80130f8 <memcpy>
 8011170:	4620      	mov	r0, r4
 8011172:	f7fb f84d 	bl	800c210 <MFX_emptyAttitude>
 8011176:	225c      	movs	r2, #92	; 0x5c
 8011178:	a901      	add	r1, sp, #4
 801117a:	4628      	mov	r0, r5
 801117c:	f001 ffbc 	bl	80130f8 <memcpy>
 8011180:	2300      	movs	r3, #0
 8011182:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8011186:	7363      	strb	r3, [r4, #13]
 8011188:	b019      	add	sp, #100	; 0x64
 801118a:	bd30      	pop	{r4, r5, pc}
 801118c:	2000021c 	.word	0x2000021c

08011190 <MotionFX_enable_9X>:
 8011190:	4b0e      	ldr	r3, [pc, #56]	; (80111cc <MotionFX_enable_9X+0x3c>)
 8011192:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8011196:	b903      	cbnz	r3, 801119a <MotionFX_enable_9X+0xa>
 8011198:	4770      	bx	lr
 801119a:	2900      	cmp	r1, #0
 801119c:	d0fc      	beq.n	8011198 <MotionFX_enable_9X+0x8>
 801119e:	b530      	push	{r4, r5, lr}
 80111a0:	1d05      	adds	r5, r0, #4
 80111a2:	b099      	sub	sp, #100	; 0x64
 80111a4:	4604      	mov	r4, r0
 80111a6:	4629      	mov	r1, r5
 80111a8:	225c      	movs	r2, #92	; 0x5c
 80111aa:	a801      	add	r0, sp, #4
 80111ac:	f001 ffa4 	bl	80130f8 <memcpy>
 80111b0:	4620      	mov	r0, r4
 80111b2:	f7fb f82d 	bl	800c210 <MFX_emptyAttitude>
 80111b6:	225c      	movs	r2, #92	; 0x5c
 80111b8:	a901      	add	r1, sp, #4
 80111ba:	4628      	mov	r0, r5
 80111bc:	f001 ff9c 	bl	80130f8 <memcpy>
 80111c0:	2301      	movs	r3, #1
 80111c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80111c6:	7363      	strb	r3, [r4, #13]
 80111c8:	b019      	add	sp, #100	; 0x64
 80111ca:	bd30      	pop	{r4, r5, pc}
 80111cc:	2000021c 	.word	0x2000021c

080111d0 <MotionFX_update>:
 80111d0:	b430      	push	{r4, r5}
 80111d2:	4c06      	ldr	r4, [pc, #24]	; (80111ec <MotionFX_update+0x1c>)
 80111d4:	9d02      	ldr	r5, [sp, #8]
 80111d6:	f894 43c4 	ldrb.w	r4, [r4, #964]	; 0x3c4
 80111da:	b90c      	cbnz	r4, 80111e0 <MotionFX_update+0x10>
 80111dc:	bc30      	pop	{r4, r5}
 80111de:	4770      	bx	lr
 80111e0:	ed93 0a00 	vldr	s0, [r3]
 80111e4:	462b      	mov	r3, r5
 80111e6:	bc30      	pop	{r4, r5}
 80111e8:	f7fb bb02 	b.w	800c7f0 <iNemoEngine_API_Update>
 80111ec:	2000021c 	.word	0x2000021c

080111f0 <MotionFX_propagate>:
 80111f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111f4:	ed2d 8b06 	vpush	{d8-d10}
 80111f8:	4ca2      	ldr	r4, [pc, #648]	; (8011484 <MotionFX_propagate+0x294>)
 80111fa:	f894 63c4 	ldrb.w	r6, [r4, #964]	; 0x3c4
 80111fe:	b0a1      	sub	sp, #132	; 0x84
 8011200:	b926      	cbnz	r6, 801120c <MotionFX_propagate+0x1c>
 8011202:	b021      	add	sp, #132	; 0x84
 8011204:	ecbd 8b06 	vpop	{d8-d10}
 8011208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801120c:	4694      	mov	ip, r2
 801120e:	4604      	mov	r4, r0
 8011210:	460d      	mov	r5, r1
 8011212:	68d0      	ldr	r0, [r2, #12]
 8011214:	6911      	ldr	r1, [r2, #16]
 8011216:	6952      	ldr	r2, [r2, #20]
 8011218:	edd3 9a00 	vldr	s19, [r3]
 801121c:	ab13      	add	r3, sp, #76	; 0x4c
 801121e:	c307      	stmia	r3!, {r0, r1, r2}
 8011220:	f8dc 0000 	ldr.w	r0, [ip]
 8011224:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011228:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801122c:	ab10      	add	r3, sp, #64	; 0x40
 801122e:	c307      	stmia	r3!, {r0, r1, r2}
 8011230:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8011234:	f8dc 101c 	ldr.w	r1, [ip, #28]
 8011238:	f8dc 2020 	ldr.w	r2, [ip, #32]
 801123c:	ab16      	add	r3, sp, #88	; 0x58
 801123e:	f104 073a 	add.w	r7, r4, #58	; 0x3a
 8011242:	c307      	stmia	r3!, {r0, r1, r2}
 8011244:	4639      	mov	r1, r7
 8011246:	a803      	add	r0, sp, #12
 8011248:	aa13      	add	r2, sp, #76	; 0x4c
 801124a:	f7f9 fb9b 	bl	800a984 <rotVect>
 801124e:	aa16      	add	r2, sp, #88	; 0x58
 8011250:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8011254:	a806      	add	r0, sp, #24
 8011256:	f7f9 fb95 	bl	800a984 <rotVect>
 801125a:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 801125e:	2b09      	cmp	r3, #9
 8011260:	d829      	bhi.n	80112b6 <MotionFX_propagate+0xc6>
 8011262:	eddd 8a04 	vldr	s17, [sp, #16]
 8011266:	ed9d 9a03 	vldr	s18, [sp, #12]
 801126a:	ed9d 8a05 	vldr	s16, [sp, #20]
 801126e:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8011272:	eee9 7a09 	vfma.f32	s15, s18, s18
 8011276:	eee8 7a08 	vfma.f32	s15, s16, s16
 801127a:	ee17 0a90 	vmov	r0, s15
 801127e:	f7ef f963 	bl	8000548 <__aeabi_f2d>
 8011282:	ec41 0b10 	vmov	d0, r0, r1
 8011286:	f004 fe0d 	bl	8015ea4 <sqrt>
 801128a:	ec51 0b10 	vmov	r0, r1, d0
 801128e:	f7ef fcab 	bl	8000be8 <__aeabi_d2f>
 8011292:	ee07 0a90 	vmov	s15, r0
 8011296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801129a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801129e:	ee29 9a27 	vmul.f32	s18, s18, s15
 80112a2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80112a6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80112aa:	ed8d 9a03 	vstr	s18, [sp, #12]
 80112ae:	edcd 8a04 	vstr	s17, [sp, #16]
 80112b2:	ed8d 8a05 	vstr	s16, [sp, #20]
 80112b6:	7923      	ldrb	r3, [r4, #4]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	f000 80ce 	beq.w	801145a <MotionFX_propagate+0x26a>
 80112be:	ee07 3a90 	vmov	s15, r3
 80112c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112ce:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 80112d2:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 80112d6:	edd3 7a00 	vldr	s15, [r3]
 80112da:	eddd 8a06 	vldr	s17, [sp, #24]
 80112de:	ed9d 6a07 	vldr	s12, [sp, #28]
 80112e2:	eddd 6a08 	vldr	s13, [sp, #32]
 80112e6:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8011488 <MotionFX_propagate+0x298>
 80112ea:	eddf 5a68 	vldr	s11, [pc, #416]	; 801148c <MotionFX_propagate+0x29c>
 80112ee:	eee7 7a28 	vfma.f32	s15, s14, s17
 80112f2:	ee26 9a08 	vmul.f32	s18, s12, s16
 80112f6:	edc3 7a00 	vstr	s15, [r3]
 80112fa:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 80112fe:	edd3 7a00 	vldr	s15, [r3]
 8011302:	ed8d 9a07 	vstr	s18, [sp, #28]
 8011306:	eee7 7a06 	vfma.f32	s15, s14, s12
 801130a:	ee68 8a88 	vmul.f32	s17, s17, s16
 801130e:	edc3 7a00 	vstr	s15, [r3]
 8011312:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8011316:	edd3 7a00 	vldr	s15, [r3]
 801131a:	edcd 8a06 	vstr	s17, [sp, #24]
 801131e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8011322:	ee26 8a88 	vmul.f32	s16, s13, s16
 8011326:	edc3 7a00 	vstr	s15, [r3]
 801132a:	f604 1344 	addw	r3, r4, #2372	; 0x944
 801132e:	edd3 7a00 	vldr	s15, [r3]
 8011332:	ed8d 8a08 	vstr	s16, [sp, #32]
 8011336:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 801133a:	ed93 7a00 	vldr	s14, [r3]
 801133e:	ee39 9a67 	vsub.f32	s18, s18, s15
 8011342:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8011346:	ee69 7a09 	vmul.f32	s15, s18, s18
 801134a:	f604 1348 	addw	r3, r4, #2376	; 0x948
 801134e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8011352:	ed93 7a00 	vldr	s14, [r3]
 8011356:	ee38 8a47 	vsub.f32	s16, s16, s14
 801135a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801135e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8011362:	ee29 0a80 	vmul.f32	s0, s19, s0
 8011366:	eef4 7ae5 	vcmpe.f32	s15, s11
 801136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801136e:	dd79      	ble.n	8011464 <MotionFX_propagate+0x274>
 8011370:	eeb1 aae7 	vsqrt.f32	s20, s15
 8011374:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8011378:	eeb0 0a69 	vmov.f32	s0, s19
 801137c:	f004 ff68 	bl	8016250 <sinf>
 8011380:	eeb0 7a40 	vmov.f32	s14, s0
 8011384:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8011388:	eeb0 0a69 	vmov.f32	s0, s19
 801138c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011390:	ee29 9a27 	vmul.f32	s18, s18, s15
 8011394:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011398:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 801139c:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 80113a0:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80113a4:	f004 fd3a 	bl	8015e1c <cosf>
 80113a8:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 80113ac:	a809      	add	r0, sp, #36	; 0x24
 80113ae:	f604 1838 	addw	r8, r4, #2360	; 0x938
 80113b2:	4632      	mov	r2, r6
 80113b4:	4631      	mov	r1, r6
 80113b6:	f7f9 fd71 	bl	800ae9c <qmult>
 80113ba:	edd8 6a00 	vldr	s13, [r8]
 80113be:	edd6 5a00 	vldr	s11, [r6]
 80113c2:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 80113c6:	f604 1934 	addw	r9, r4, #2356	; 0x934
 80113ca:	ed99 6a00 	vldr	s12, [r9]
 80113ce:	ee66 7aa6 	vmul.f32	s15, s13, s13
 80113d2:	4639      	mov	r1, r7
 80113d4:	eee6 7a06 	vfma.f32	s15, s12, s12
 80113d8:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 80113dc:	3301      	adds	r3, #1
 80113de:	ed97 7a00 	vldr	s14, [r7]
 80113e2:	eee7 7a07 	vfma.f32	s15, s14, s14
 80113e6:	aa13      	add	r2, sp, #76	; 0x4c
 80113e8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80113ec:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80113f0:	eeb1 5ae7 	vsqrt.f32	s10, s15
 80113f4:	eec4 7a85 	vdiv.f32	s15, s9, s10
 80113f8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80113fc:	ee27 6a86 	vmul.f32	s12, s15, s12
 8011400:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8011404:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011408:	edc6 5a00 	vstr	s11, [r6]
 801140c:	ed89 6a00 	vstr	s12, [r9]
 8011410:	edc8 6a00 	vstr	s13, [r8]
 8011414:	ed87 7a00 	vstr	s14, [r7]
 8011418:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 801141c:	f7f9 fab2 	bl	800a984 <rotVect>
 8011420:	6833      	ldr	r3, [r6, #0]
 8011422:	60eb      	str	r3, [r5, #12]
 8011424:	f8d9 3000 	ldr.w	r3, [r9]
 8011428:	f8d8 2000 	ldr.w	r2, [r8]
 801142c:	612b      	str	r3, [r5, #16]
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	61ab      	str	r3, [r5, #24]
 8011432:	616a      	str	r2, [r5, #20]
 8011434:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8011438:	f105 0328 	add.w	r3, r5, #40	; 0x28
 801143c:	e9cd 3200 	strd	r3, r2, [sp]
 8011440:	4601      	mov	r1, r0
 8011442:	f105 031c 	add.w	r3, r5, #28
 8011446:	462a      	mov	r2, r5
 8011448:	f105 000c 	add.w	r0, r5, #12
 801144c:	f7fa fe16 	bl	800c07c <output_update>
 8011450:	b021      	add	sp, #132	; 0x84
 8011452:	ecbd 8b06 	vpop	{d8-d10}
 8011456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801145a:	2301      	movs	r3, #1
 801145c:	7123      	strb	r3, [r4, #4]
 801145e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011462:	e734      	b.n	80112ce <MotionFX_propagate+0xde>
 8011464:	ee68 8a80 	vmul.f32	s17, s17, s0
 8011468:	ee29 9a00 	vmul.f32	s18, s18, s0
 801146c:	ee28 8a00 	vmul.f32	s16, s16, s0
 8011470:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011474:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8011478:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 801147c:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8011480:	930c      	str	r3, [sp, #48]	; 0x30
 8011482:	e793      	b.n	80113ac <MotionFX_propagate+0x1bc>
 8011484:	2000021c 	.word	0x2000021c
 8011488:	3c8efa35 	.word	0x3c8efa35
 801148c:	38d1b718 	.word	0x38d1b718

08011490 <atoi>:
 8011490:	220a      	movs	r2, #10
 8011492:	2100      	movs	r1, #0
 8011494:	f001 bdbe 	b.w	8013014 <strtol>

08011498 <__cvt>:
 8011498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801149c:	ec55 4b10 	vmov	r4, r5, d0
 80114a0:	2d00      	cmp	r5, #0
 80114a2:	460e      	mov	r6, r1
 80114a4:	4619      	mov	r1, r3
 80114a6:	462b      	mov	r3, r5
 80114a8:	bfbb      	ittet	lt
 80114aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80114ae:	461d      	movlt	r5, r3
 80114b0:	2300      	movge	r3, #0
 80114b2:	232d      	movlt	r3, #45	; 0x2d
 80114b4:	700b      	strb	r3, [r1, #0]
 80114b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80114bc:	4691      	mov	r9, r2
 80114be:	f023 0820 	bic.w	r8, r3, #32
 80114c2:	bfbc      	itt	lt
 80114c4:	4622      	movlt	r2, r4
 80114c6:	4614      	movlt	r4, r2
 80114c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80114cc:	d005      	beq.n	80114da <__cvt+0x42>
 80114ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80114d2:	d100      	bne.n	80114d6 <__cvt+0x3e>
 80114d4:	3601      	adds	r6, #1
 80114d6:	2102      	movs	r1, #2
 80114d8:	e000      	b.n	80114dc <__cvt+0x44>
 80114da:	2103      	movs	r1, #3
 80114dc:	ab03      	add	r3, sp, #12
 80114de:	9301      	str	r3, [sp, #4]
 80114e0:	ab02      	add	r3, sp, #8
 80114e2:	9300      	str	r3, [sp, #0]
 80114e4:	ec45 4b10 	vmov	d0, r4, r5
 80114e8:	4653      	mov	r3, sl
 80114ea:	4632      	mov	r2, r6
 80114ec:	f001 feac 	bl	8013248 <_dtoa_r>
 80114f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80114f4:	4607      	mov	r7, r0
 80114f6:	d102      	bne.n	80114fe <__cvt+0x66>
 80114f8:	f019 0f01 	tst.w	r9, #1
 80114fc:	d022      	beq.n	8011544 <__cvt+0xac>
 80114fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011502:	eb07 0906 	add.w	r9, r7, r6
 8011506:	d110      	bne.n	801152a <__cvt+0x92>
 8011508:	783b      	ldrb	r3, [r7, #0]
 801150a:	2b30      	cmp	r3, #48	; 0x30
 801150c:	d10a      	bne.n	8011524 <__cvt+0x8c>
 801150e:	2200      	movs	r2, #0
 8011510:	2300      	movs	r3, #0
 8011512:	4620      	mov	r0, r4
 8011514:	4629      	mov	r1, r5
 8011516:	f7ef fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 801151a:	b918      	cbnz	r0, 8011524 <__cvt+0x8c>
 801151c:	f1c6 0601 	rsb	r6, r6, #1
 8011520:	f8ca 6000 	str.w	r6, [sl]
 8011524:	f8da 3000 	ldr.w	r3, [sl]
 8011528:	4499      	add	r9, r3
 801152a:	2200      	movs	r2, #0
 801152c:	2300      	movs	r3, #0
 801152e:	4620      	mov	r0, r4
 8011530:	4629      	mov	r1, r5
 8011532:	f7ef fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 8011536:	b108      	cbz	r0, 801153c <__cvt+0xa4>
 8011538:	f8cd 900c 	str.w	r9, [sp, #12]
 801153c:	2230      	movs	r2, #48	; 0x30
 801153e:	9b03      	ldr	r3, [sp, #12]
 8011540:	454b      	cmp	r3, r9
 8011542:	d307      	bcc.n	8011554 <__cvt+0xbc>
 8011544:	9b03      	ldr	r3, [sp, #12]
 8011546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011548:	1bdb      	subs	r3, r3, r7
 801154a:	4638      	mov	r0, r7
 801154c:	6013      	str	r3, [r2, #0]
 801154e:	b004      	add	sp, #16
 8011550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011554:	1c59      	adds	r1, r3, #1
 8011556:	9103      	str	r1, [sp, #12]
 8011558:	701a      	strb	r2, [r3, #0]
 801155a:	e7f0      	b.n	801153e <__cvt+0xa6>

0801155c <__exponent>:
 801155c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801155e:	4603      	mov	r3, r0
 8011560:	2900      	cmp	r1, #0
 8011562:	bfb8      	it	lt
 8011564:	4249      	neglt	r1, r1
 8011566:	f803 2b02 	strb.w	r2, [r3], #2
 801156a:	bfb4      	ite	lt
 801156c:	222d      	movlt	r2, #45	; 0x2d
 801156e:	222b      	movge	r2, #43	; 0x2b
 8011570:	2909      	cmp	r1, #9
 8011572:	7042      	strb	r2, [r0, #1]
 8011574:	dd2a      	ble.n	80115cc <__exponent+0x70>
 8011576:	f10d 0207 	add.w	r2, sp, #7
 801157a:	4617      	mov	r7, r2
 801157c:	260a      	movs	r6, #10
 801157e:	4694      	mov	ip, r2
 8011580:	fb91 f5f6 	sdiv	r5, r1, r6
 8011584:	fb06 1415 	mls	r4, r6, r5, r1
 8011588:	3430      	adds	r4, #48	; 0x30
 801158a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801158e:	460c      	mov	r4, r1
 8011590:	2c63      	cmp	r4, #99	; 0x63
 8011592:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8011596:	4629      	mov	r1, r5
 8011598:	dcf1      	bgt.n	801157e <__exponent+0x22>
 801159a:	3130      	adds	r1, #48	; 0x30
 801159c:	f1ac 0402 	sub.w	r4, ip, #2
 80115a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80115a4:	1c41      	adds	r1, r0, #1
 80115a6:	4622      	mov	r2, r4
 80115a8:	42ba      	cmp	r2, r7
 80115aa:	d30a      	bcc.n	80115c2 <__exponent+0x66>
 80115ac:	f10d 0209 	add.w	r2, sp, #9
 80115b0:	eba2 020c 	sub.w	r2, r2, ip
 80115b4:	42bc      	cmp	r4, r7
 80115b6:	bf88      	it	hi
 80115b8:	2200      	movhi	r2, #0
 80115ba:	4413      	add	r3, r2
 80115bc:	1a18      	subs	r0, r3, r0
 80115be:	b003      	add	sp, #12
 80115c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115c2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80115c6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80115ca:	e7ed      	b.n	80115a8 <__exponent+0x4c>
 80115cc:	2330      	movs	r3, #48	; 0x30
 80115ce:	3130      	adds	r1, #48	; 0x30
 80115d0:	7083      	strb	r3, [r0, #2]
 80115d2:	70c1      	strb	r1, [r0, #3]
 80115d4:	1d03      	adds	r3, r0, #4
 80115d6:	e7f1      	b.n	80115bc <__exponent+0x60>

080115d8 <_printf_float>:
 80115d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115dc:	ed2d 8b02 	vpush	{d8}
 80115e0:	b08d      	sub	sp, #52	; 0x34
 80115e2:	460c      	mov	r4, r1
 80115e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80115e8:	4616      	mov	r6, r2
 80115ea:	461f      	mov	r7, r3
 80115ec:	4605      	mov	r5, r0
 80115ee:	f001 fd53 	bl	8013098 <_localeconv_r>
 80115f2:	f8d0 a000 	ldr.w	sl, [r0]
 80115f6:	4650      	mov	r0, sl
 80115f8:	f7ee fe3a 	bl	8000270 <strlen>
 80115fc:	2300      	movs	r3, #0
 80115fe:	930a      	str	r3, [sp, #40]	; 0x28
 8011600:	6823      	ldr	r3, [r4, #0]
 8011602:	9305      	str	r3, [sp, #20]
 8011604:	f8d8 3000 	ldr.w	r3, [r8]
 8011608:	f894 b018 	ldrb.w	fp, [r4, #24]
 801160c:	3307      	adds	r3, #7
 801160e:	f023 0307 	bic.w	r3, r3, #7
 8011612:	f103 0208 	add.w	r2, r3, #8
 8011616:	f8c8 2000 	str.w	r2, [r8]
 801161a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801161e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011622:	9307      	str	r3, [sp, #28]
 8011624:	f8cd 8018 	str.w	r8, [sp, #24]
 8011628:	ee08 0a10 	vmov	s16, r0
 801162c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011630:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011634:	4b9e      	ldr	r3, [pc, #632]	; (80118b0 <_printf_float+0x2d8>)
 8011636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801163a:	f7ef fa77 	bl	8000b2c <__aeabi_dcmpun>
 801163e:	bb88      	cbnz	r0, 80116a4 <_printf_float+0xcc>
 8011640:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011644:	4b9a      	ldr	r3, [pc, #616]	; (80118b0 <_printf_float+0x2d8>)
 8011646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801164a:	f7ef fa51 	bl	8000af0 <__aeabi_dcmple>
 801164e:	bb48      	cbnz	r0, 80116a4 <_printf_float+0xcc>
 8011650:	2200      	movs	r2, #0
 8011652:	2300      	movs	r3, #0
 8011654:	4640      	mov	r0, r8
 8011656:	4649      	mov	r1, r9
 8011658:	f7ef fa40 	bl	8000adc <__aeabi_dcmplt>
 801165c:	b110      	cbz	r0, 8011664 <_printf_float+0x8c>
 801165e:	232d      	movs	r3, #45	; 0x2d
 8011660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011664:	4a93      	ldr	r2, [pc, #588]	; (80118b4 <_printf_float+0x2dc>)
 8011666:	4b94      	ldr	r3, [pc, #592]	; (80118b8 <_printf_float+0x2e0>)
 8011668:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801166c:	bf94      	ite	ls
 801166e:	4690      	movls	r8, r2
 8011670:	4698      	movhi	r8, r3
 8011672:	2303      	movs	r3, #3
 8011674:	6123      	str	r3, [r4, #16]
 8011676:	9b05      	ldr	r3, [sp, #20]
 8011678:	f023 0304 	bic.w	r3, r3, #4
 801167c:	6023      	str	r3, [r4, #0]
 801167e:	f04f 0900 	mov.w	r9, #0
 8011682:	9700      	str	r7, [sp, #0]
 8011684:	4633      	mov	r3, r6
 8011686:	aa0b      	add	r2, sp, #44	; 0x2c
 8011688:	4621      	mov	r1, r4
 801168a:	4628      	mov	r0, r5
 801168c:	f000 f9da 	bl	8011a44 <_printf_common>
 8011690:	3001      	adds	r0, #1
 8011692:	f040 8090 	bne.w	80117b6 <_printf_float+0x1de>
 8011696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801169a:	b00d      	add	sp, #52	; 0x34
 801169c:	ecbd 8b02 	vpop	{d8}
 80116a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116a4:	4642      	mov	r2, r8
 80116a6:	464b      	mov	r3, r9
 80116a8:	4640      	mov	r0, r8
 80116aa:	4649      	mov	r1, r9
 80116ac:	f7ef fa3e 	bl	8000b2c <__aeabi_dcmpun>
 80116b0:	b140      	cbz	r0, 80116c4 <_printf_float+0xec>
 80116b2:	464b      	mov	r3, r9
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	bfbc      	itt	lt
 80116b8:	232d      	movlt	r3, #45	; 0x2d
 80116ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80116be:	4a7f      	ldr	r2, [pc, #508]	; (80118bc <_printf_float+0x2e4>)
 80116c0:	4b7f      	ldr	r3, [pc, #508]	; (80118c0 <_printf_float+0x2e8>)
 80116c2:	e7d1      	b.n	8011668 <_printf_float+0x90>
 80116c4:	6863      	ldr	r3, [r4, #4]
 80116c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80116ca:	9206      	str	r2, [sp, #24]
 80116cc:	1c5a      	adds	r2, r3, #1
 80116ce:	d13f      	bne.n	8011750 <_printf_float+0x178>
 80116d0:	2306      	movs	r3, #6
 80116d2:	6063      	str	r3, [r4, #4]
 80116d4:	9b05      	ldr	r3, [sp, #20]
 80116d6:	6861      	ldr	r1, [r4, #4]
 80116d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80116dc:	2300      	movs	r3, #0
 80116de:	9303      	str	r3, [sp, #12]
 80116e0:	ab0a      	add	r3, sp, #40	; 0x28
 80116e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80116e6:	ab09      	add	r3, sp, #36	; 0x24
 80116e8:	ec49 8b10 	vmov	d0, r8, r9
 80116ec:	9300      	str	r3, [sp, #0]
 80116ee:	6022      	str	r2, [r4, #0]
 80116f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80116f4:	4628      	mov	r0, r5
 80116f6:	f7ff fecf 	bl	8011498 <__cvt>
 80116fa:	9b06      	ldr	r3, [sp, #24]
 80116fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116fe:	2b47      	cmp	r3, #71	; 0x47
 8011700:	4680      	mov	r8, r0
 8011702:	d108      	bne.n	8011716 <_printf_float+0x13e>
 8011704:	1cc8      	adds	r0, r1, #3
 8011706:	db02      	blt.n	801170e <_printf_float+0x136>
 8011708:	6863      	ldr	r3, [r4, #4]
 801170a:	4299      	cmp	r1, r3
 801170c:	dd41      	ble.n	8011792 <_printf_float+0x1ba>
 801170e:	f1ab 0302 	sub.w	r3, fp, #2
 8011712:	fa5f fb83 	uxtb.w	fp, r3
 8011716:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801171a:	d820      	bhi.n	801175e <_printf_float+0x186>
 801171c:	3901      	subs	r1, #1
 801171e:	465a      	mov	r2, fp
 8011720:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011724:	9109      	str	r1, [sp, #36]	; 0x24
 8011726:	f7ff ff19 	bl	801155c <__exponent>
 801172a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801172c:	1813      	adds	r3, r2, r0
 801172e:	2a01      	cmp	r2, #1
 8011730:	4681      	mov	r9, r0
 8011732:	6123      	str	r3, [r4, #16]
 8011734:	dc02      	bgt.n	801173c <_printf_float+0x164>
 8011736:	6822      	ldr	r2, [r4, #0]
 8011738:	07d2      	lsls	r2, r2, #31
 801173a:	d501      	bpl.n	8011740 <_printf_float+0x168>
 801173c:	3301      	adds	r3, #1
 801173e:	6123      	str	r3, [r4, #16]
 8011740:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011744:	2b00      	cmp	r3, #0
 8011746:	d09c      	beq.n	8011682 <_printf_float+0xaa>
 8011748:	232d      	movs	r3, #45	; 0x2d
 801174a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801174e:	e798      	b.n	8011682 <_printf_float+0xaa>
 8011750:	9a06      	ldr	r2, [sp, #24]
 8011752:	2a47      	cmp	r2, #71	; 0x47
 8011754:	d1be      	bne.n	80116d4 <_printf_float+0xfc>
 8011756:	2b00      	cmp	r3, #0
 8011758:	d1bc      	bne.n	80116d4 <_printf_float+0xfc>
 801175a:	2301      	movs	r3, #1
 801175c:	e7b9      	b.n	80116d2 <_printf_float+0xfa>
 801175e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011762:	d118      	bne.n	8011796 <_printf_float+0x1be>
 8011764:	2900      	cmp	r1, #0
 8011766:	6863      	ldr	r3, [r4, #4]
 8011768:	dd0b      	ble.n	8011782 <_printf_float+0x1aa>
 801176a:	6121      	str	r1, [r4, #16]
 801176c:	b913      	cbnz	r3, 8011774 <_printf_float+0x19c>
 801176e:	6822      	ldr	r2, [r4, #0]
 8011770:	07d0      	lsls	r0, r2, #31
 8011772:	d502      	bpl.n	801177a <_printf_float+0x1a2>
 8011774:	3301      	adds	r3, #1
 8011776:	440b      	add	r3, r1
 8011778:	6123      	str	r3, [r4, #16]
 801177a:	65a1      	str	r1, [r4, #88]	; 0x58
 801177c:	f04f 0900 	mov.w	r9, #0
 8011780:	e7de      	b.n	8011740 <_printf_float+0x168>
 8011782:	b913      	cbnz	r3, 801178a <_printf_float+0x1b2>
 8011784:	6822      	ldr	r2, [r4, #0]
 8011786:	07d2      	lsls	r2, r2, #31
 8011788:	d501      	bpl.n	801178e <_printf_float+0x1b6>
 801178a:	3302      	adds	r3, #2
 801178c:	e7f4      	b.n	8011778 <_printf_float+0x1a0>
 801178e:	2301      	movs	r3, #1
 8011790:	e7f2      	b.n	8011778 <_printf_float+0x1a0>
 8011792:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011798:	4299      	cmp	r1, r3
 801179a:	db05      	blt.n	80117a8 <_printf_float+0x1d0>
 801179c:	6823      	ldr	r3, [r4, #0]
 801179e:	6121      	str	r1, [r4, #16]
 80117a0:	07d8      	lsls	r0, r3, #31
 80117a2:	d5ea      	bpl.n	801177a <_printf_float+0x1a2>
 80117a4:	1c4b      	adds	r3, r1, #1
 80117a6:	e7e7      	b.n	8011778 <_printf_float+0x1a0>
 80117a8:	2900      	cmp	r1, #0
 80117aa:	bfd4      	ite	le
 80117ac:	f1c1 0202 	rsble	r2, r1, #2
 80117b0:	2201      	movgt	r2, #1
 80117b2:	4413      	add	r3, r2
 80117b4:	e7e0      	b.n	8011778 <_printf_float+0x1a0>
 80117b6:	6823      	ldr	r3, [r4, #0]
 80117b8:	055a      	lsls	r2, r3, #21
 80117ba:	d407      	bmi.n	80117cc <_printf_float+0x1f4>
 80117bc:	6923      	ldr	r3, [r4, #16]
 80117be:	4642      	mov	r2, r8
 80117c0:	4631      	mov	r1, r6
 80117c2:	4628      	mov	r0, r5
 80117c4:	47b8      	blx	r7
 80117c6:	3001      	adds	r0, #1
 80117c8:	d12c      	bne.n	8011824 <_printf_float+0x24c>
 80117ca:	e764      	b.n	8011696 <_printf_float+0xbe>
 80117cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80117d0:	f240 80e0 	bls.w	8011994 <_printf_float+0x3bc>
 80117d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80117d8:	2200      	movs	r2, #0
 80117da:	2300      	movs	r3, #0
 80117dc:	f7ef f974 	bl	8000ac8 <__aeabi_dcmpeq>
 80117e0:	2800      	cmp	r0, #0
 80117e2:	d034      	beq.n	801184e <_printf_float+0x276>
 80117e4:	4a37      	ldr	r2, [pc, #220]	; (80118c4 <_printf_float+0x2ec>)
 80117e6:	2301      	movs	r3, #1
 80117e8:	4631      	mov	r1, r6
 80117ea:	4628      	mov	r0, r5
 80117ec:	47b8      	blx	r7
 80117ee:	3001      	adds	r0, #1
 80117f0:	f43f af51 	beq.w	8011696 <_printf_float+0xbe>
 80117f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80117f8:	429a      	cmp	r2, r3
 80117fa:	db02      	blt.n	8011802 <_printf_float+0x22a>
 80117fc:	6823      	ldr	r3, [r4, #0]
 80117fe:	07d8      	lsls	r0, r3, #31
 8011800:	d510      	bpl.n	8011824 <_printf_float+0x24c>
 8011802:	ee18 3a10 	vmov	r3, s16
 8011806:	4652      	mov	r2, sl
 8011808:	4631      	mov	r1, r6
 801180a:	4628      	mov	r0, r5
 801180c:	47b8      	blx	r7
 801180e:	3001      	adds	r0, #1
 8011810:	f43f af41 	beq.w	8011696 <_printf_float+0xbe>
 8011814:	f04f 0800 	mov.w	r8, #0
 8011818:	f104 091a 	add.w	r9, r4, #26
 801181c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801181e:	3b01      	subs	r3, #1
 8011820:	4543      	cmp	r3, r8
 8011822:	dc09      	bgt.n	8011838 <_printf_float+0x260>
 8011824:	6823      	ldr	r3, [r4, #0]
 8011826:	079b      	lsls	r3, r3, #30
 8011828:	f100 8107 	bmi.w	8011a3a <_printf_float+0x462>
 801182c:	68e0      	ldr	r0, [r4, #12]
 801182e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011830:	4298      	cmp	r0, r3
 8011832:	bfb8      	it	lt
 8011834:	4618      	movlt	r0, r3
 8011836:	e730      	b.n	801169a <_printf_float+0xc2>
 8011838:	2301      	movs	r3, #1
 801183a:	464a      	mov	r2, r9
 801183c:	4631      	mov	r1, r6
 801183e:	4628      	mov	r0, r5
 8011840:	47b8      	blx	r7
 8011842:	3001      	adds	r0, #1
 8011844:	f43f af27 	beq.w	8011696 <_printf_float+0xbe>
 8011848:	f108 0801 	add.w	r8, r8, #1
 801184c:	e7e6      	b.n	801181c <_printf_float+0x244>
 801184e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011850:	2b00      	cmp	r3, #0
 8011852:	dc39      	bgt.n	80118c8 <_printf_float+0x2f0>
 8011854:	4a1b      	ldr	r2, [pc, #108]	; (80118c4 <_printf_float+0x2ec>)
 8011856:	2301      	movs	r3, #1
 8011858:	4631      	mov	r1, r6
 801185a:	4628      	mov	r0, r5
 801185c:	47b8      	blx	r7
 801185e:	3001      	adds	r0, #1
 8011860:	f43f af19 	beq.w	8011696 <_printf_float+0xbe>
 8011864:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011868:	4313      	orrs	r3, r2
 801186a:	d102      	bne.n	8011872 <_printf_float+0x29a>
 801186c:	6823      	ldr	r3, [r4, #0]
 801186e:	07d9      	lsls	r1, r3, #31
 8011870:	d5d8      	bpl.n	8011824 <_printf_float+0x24c>
 8011872:	ee18 3a10 	vmov	r3, s16
 8011876:	4652      	mov	r2, sl
 8011878:	4631      	mov	r1, r6
 801187a:	4628      	mov	r0, r5
 801187c:	47b8      	blx	r7
 801187e:	3001      	adds	r0, #1
 8011880:	f43f af09 	beq.w	8011696 <_printf_float+0xbe>
 8011884:	f04f 0900 	mov.w	r9, #0
 8011888:	f104 0a1a 	add.w	sl, r4, #26
 801188c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801188e:	425b      	negs	r3, r3
 8011890:	454b      	cmp	r3, r9
 8011892:	dc01      	bgt.n	8011898 <_printf_float+0x2c0>
 8011894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011896:	e792      	b.n	80117be <_printf_float+0x1e6>
 8011898:	2301      	movs	r3, #1
 801189a:	4652      	mov	r2, sl
 801189c:	4631      	mov	r1, r6
 801189e:	4628      	mov	r0, r5
 80118a0:	47b8      	blx	r7
 80118a2:	3001      	adds	r0, #1
 80118a4:	f43f aef7 	beq.w	8011696 <_printf_float+0xbe>
 80118a8:	f109 0901 	add.w	r9, r9, #1
 80118ac:	e7ee      	b.n	801188c <_printf_float+0x2b4>
 80118ae:	bf00      	nop
 80118b0:	7fefffff 	.word	0x7fefffff
 80118b4:	08018194 	.word	0x08018194
 80118b8:	08018198 	.word	0x08018198
 80118bc:	0801819c 	.word	0x0801819c
 80118c0:	080181a0 	.word	0x080181a0
 80118c4:	080181a4 	.word	0x080181a4
 80118c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80118cc:	429a      	cmp	r2, r3
 80118ce:	bfa8      	it	ge
 80118d0:	461a      	movge	r2, r3
 80118d2:	2a00      	cmp	r2, #0
 80118d4:	4691      	mov	r9, r2
 80118d6:	dc37      	bgt.n	8011948 <_printf_float+0x370>
 80118d8:	f04f 0b00 	mov.w	fp, #0
 80118dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80118e0:	f104 021a 	add.w	r2, r4, #26
 80118e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80118e6:	9305      	str	r3, [sp, #20]
 80118e8:	eba3 0309 	sub.w	r3, r3, r9
 80118ec:	455b      	cmp	r3, fp
 80118ee:	dc33      	bgt.n	8011958 <_printf_float+0x380>
 80118f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80118f4:	429a      	cmp	r2, r3
 80118f6:	db3b      	blt.n	8011970 <_printf_float+0x398>
 80118f8:	6823      	ldr	r3, [r4, #0]
 80118fa:	07da      	lsls	r2, r3, #31
 80118fc:	d438      	bmi.n	8011970 <_printf_float+0x398>
 80118fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011902:	eba2 0903 	sub.w	r9, r2, r3
 8011906:	9b05      	ldr	r3, [sp, #20]
 8011908:	1ad2      	subs	r2, r2, r3
 801190a:	4591      	cmp	r9, r2
 801190c:	bfa8      	it	ge
 801190e:	4691      	movge	r9, r2
 8011910:	f1b9 0f00 	cmp.w	r9, #0
 8011914:	dc35      	bgt.n	8011982 <_printf_float+0x3aa>
 8011916:	f04f 0800 	mov.w	r8, #0
 801191a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801191e:	f104 0a1a 	add.w	sl, r4, #26
 8011922:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011926:	1a9b      	subs	r3, r3, r2
 8011928:	eba3 0309 	sub.w	r3, r3, r9
 801192c:	4543      	cmp	r3, r8
 801192e:	f77f af79 	ble.w	8011824 <_printf_float+0x24c>
 8011932:	2301      	movs	r3, #1
 8011934:	4652      	mov	r2, sl
 8011936:	4631      	mov	r1, r6
 8011938:	4628      	mov	r0, r5
 801193a:	47b8      	blx	r7
 801193c:	3001      	adds	r0, #1
 801193e:	f43f aeaa 	beq.w	8011696 <_printf_float+0xbe>
 8011942:	f108 0801 	add.w	r8, r8, #1
 8011946:	e7ec      	b.n	8011922 <_printf_float+0x34a>
 8011948:	4613      	mov	r3, r2
 801194a:	4631      	mov	r1, r6
 801194c:	4642      	mov	r2, r8
 801194e:	4628      	mov	r0, r5
 8011950:	47b8      	blx	r7
 8011952:	3001      	adds	r0, #1
 8011954:	d1c0      	bne.n	80118d8 <_printf_float+0x300>
 8011956:	e69e      	b.n	8011696 <_printf_float+0xbe>
 8011958:	2301      	movs	r3, #1
 801195a:	4631      	mov	r1, r6
 801195c:	4628      	mov	r0, r5
 801195e:	9205      	str	r2, [sp, #20]
 8011960:	47b8      	blx	r7
 8011962:	3001      	adds	r0, #1
 8011964:	f43f ae97 	beq.w	8011696 <_printf_float+0xbe>
 8011968:	9a05      	ldr	r2, [sp, #20]
 801196a:	f10b 0b01 	add.w	fp, fp, #1
 801196e:	e7b9      	b.n	80118e4 <_printf_float+0x30c>
 8011970:	ee18 3a10 	vmov	r3, s16
 8011974:	4652      	mov	r2, sl
 8011976:	4631      	mov	r1, r6
 8011978:	4628      	mov	r0, r5
 801197a:	47b8      	blx	r7
 801197c:	3001      	adds	r0, #1
 801197e:	d1be      	bne.n	80118fe <_printf_float+0x326>
 8011980:	e689      	b.n	8011696 <_printf_float+0xbe>
 8011982:	9a05      	ldr	r2, [sp, #20]
 8011984:	464b      	mov	r3, r9
 8011986:	4442      	add	r2, r8
 8011988:	4631      	mov	r1, r6
 801198a:	4628      	mov	r0, r5
 801198c:	47b8      	blx	r7
 801198e:	3001      	adds	r0, #1
 8011990:	d1c1      	bne.n	8011916 <_printf_float+0x33e>
 8011992:	e680      	b.n	8011696 <_printf_float+0xbe>
 8011994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011996:	2a01      	cmp	r2, #1
 8011998:	dc01      	bgt.n	801199e <_printf_float+0x3c6>
 801199a:	07db      	lsls	r3, r3, #31
 801199c:	d53a      	bpl.n	8011a14 <_printf_float+0x43c>
 801199e:	2301      	movs	r3, #1
 80119a0:	4642      	mov	r2, r8
 80119a2:	4631      	mov	r1, r6
 80119a4:	4628      	mov	r0, r5
 80119a6:	47b8      	blx	r7
 80119a8:	3001      	adds	r0, #1
 80119aa:	f43f ae74 	beq.w	8011696 <_printf_float+0xbe>
 80119ae:	ee18 3a10 	vmov	r3, s16
 80119b2:	4652      	mov	r2, sl
 80119b4:	4631      	mov	r1, r6
 80119b6:	4628      	mov	r0, r5
 80119b8:	47b8      	blx	r7
 80119ba:	3001      	adds	r0, #1
 80119bc:	f43f ae6b 	beq.w	8011696 <_printf_float+0xbe>
 80119c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80119c4:	2200      	movs	r2, #0
 80119c6:	2300      	movs	r3, #0
 80119c8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80119cc:	f7ef f87c 	bl	8000ac8 <__aeabi_dcmpeq>
 80119d0:	b9d8      	cbnz	r0, 8011a0a <_printf_float+0x432>
 80119d2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80119d6:	f108 0201 	add.w	r2, r8, #1
 80119da:	4631      	mov	r1, r6
 80119dc:	4628      	mov	r0, r5
 80119de:	47b8      	blx	r7
 80119e0:	3001      	adds	r0, #1
 80119e2:	d10e      	bne.n	8011a02 <_printf_float+0x42a>
 80119e4:	e657      	b.n	8011696 <_printf_float+0xbe>
 80119e6:	2301      	movs	r3, #1
 80119e8:	4652      	mov	r2, sl
 80119ea:	4631      	mov	r1, r6
 80119ec:	4628      	mov	r0, r5
 80119ee:	47b8      	blx	r7
 80119f0:	3001      	adds	r0, #1
 80119f2:	f43f ae50 	beq.w	8011696 <_printf_float+0xbe>
 80119f6:	f108 0801 	add.w	r8, r8, #1
 80119fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119fc:	3b01      	subs	r3, #1
 80119fe:	4543      	cmp	r3, r8
 8011a00:	dcf1      	bgt.n	80119e6 <_printf_float+0x40e>
 8011a02:	464b      	mov	r3, r9
 8011a04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011a08:	e6da      	b.n	80117c0 <_printf_float+0x1e8>
 8011a0a:	f04f 0800 	mov.w	r8, #0
 8011a0e:	f104 0a1a 	add.w	sl, r4, #26
 8011a12:	e7f2      	b.n	80119fa <_printf_float+0x422>
 8011a14:	2301      	movs	r3, #1
 8011a16:	4642      	mov	r2, r8
 8011a18:	e7df      	b.n	80119da <_printf_float+0x402>
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	464a      	mov	r2, r9
 8011a1e:	4631      	mov	r1, r6
 8011a20:	4628      	mov	r0, r5
 8011a22:	47b8      	blx	r7
 8011a24:	3001      	adds	r0, #1
 8011a26:	f43f ae36 	beq.w	8011696 <_printf_float+0xbe>
 8011a2a:	f108 0801 	add.w	r8, r8, #1
 8011a2e:	68e3      	ldr	r3, [r4, #12]
 8011a30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a32:	1a5b      	subs	r3, r3, r1
 8011a34:	4543      	cmp	r3, r8
 8011a36:	dcf0      	bgt.n	8011a1a <_printf_float+0x442>
 8011a38:	e6f8      	b.n	801182c <_printf_float+0x254>
 8011a3a:	f04f 0800 	mov.w	r8, #0
 8011a3e:	f104 0919 	add.w	r9, r4, #25
 8011a42:	e7f4      	b.n	8011a2e <_printf_float+0x456>

08011a44 <_printf_common>:
 8011a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a48:	4616      	mov	r6, r2
 8011a4a:	4699      	mov	r9, r3
 8011a4c:	688a      	ldr	r2, [r1, #8]
 8011a4e:	690b      	ldr	r3, [r1, #16]
 8011a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011a54:	4293      	cmp	r3, r2
 8011a56:	bfb8      	it	lt
 8011a58:	4613      	movlt	r3, r2
 8011a5a:	6033      	str	r3, [r6, #0]
 8011a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011a60:	4607      	mov	r7, r0
 8011a62:	460c      	mov	r4, r1
 8011a64:	b10a      	cbz	r2, 8011a6a <_printf_common+0x26>
 8011a66:	3301      	adds	r3, #1
 8011a68:	6033      	str	r3, [r6, #0]
 8011a6a:	6823      	ldr	r3, [r4, #0]
 8011a6c:	0699      	lsls	r1, r3, #26
 8011a6e:	bf42      	ittt	mi
 8011a70:	6833      	ldrmi	r3, [r6, #0]
 8011a72:	3302      	addmi	r3, #2
 8011a74:	6033      	strmi	r3, [r6, #0]
 8011a76:	6825      	ldr	r5, [r4, #0]
 8011a78:	f015 0506 	ands.w	r5, r5, #6
 8011a7c:	d106      	bne.n	8011a8c <_printf_common+0x48>
 8011a7e:	f104 0a19 	add.w	sl, r4, #25
 8011a82:	68e3      	ldr	r3, [r4, #12]
 8011a84:	6832      	ldr	r2, [r6, #0]
 8011a86:	1a9b      	subs	r3, r3, r2
 8011a88:	42ab      	cmp	r3, r5
 8011a8a:	dc26      	bgt.n	8011ada <_printf_common+0x96>
 8011a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011a90:	1e13      	subs	r3, r2, #0
 8011a92:	6822      	ldr	r2, [r4, #0]
 8011a94:	bf18      	it	ne
 8011a96:	2301      	movne	r3, #1
 8011a98:	0692      	lsls	r2, r2, #26
 8011a9a:	d42b      	bmi.n	8011af4 <_printf_common+0xb0>
 8011a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011aa0:	4649      	mov	r1, r9
 8011aa2:	4638      	mov	r0, r7
 8011aa4:	47c0      	blx	r8
 8011aa6:	3001      	adds	r0, #1
 8011aa8:	d01e      	beq.n	8011ae8 <_printf_common+0xa4>
 8011aaa:	6823      	ldr	r3, [r4, #0]
 8011aac:	6922      	ldr	r2, [r4, #16]
 8011aae:	f003 0306 	and.w	r3, r3, #6
 8011ab2:	2b04      	cmp	r3, #4
 8011ab4:	bf02      	ittt	eq
 8011ab6:	68e5      	ldreq	r5, [r4, #12]
 8011ab8:	6833      	ldreq	r3, [r6, #0]
 8011aba:	1aed      	subeq	r5, r5, r3
 8011abc:	68a3      	ldr	r3, [r4, #8]
 8011abe:	bf0c      	ite	eq
 8011ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ac4:	2500      	movne	r5, #0
 8011ac6:	4293      	cmp	r3, r2
 8011ac8:	bfc4      	itt	gt
 8011aca:	1a9b      	subgt	r3, r3, r2
 8011acc:	18ed      	addgt	r5, r5, r3
 8011ace:	2600      	movs	r6, #0
 8011ad0:	341a      	adds	r4, #26
 8011ad2:	42b5      	cmp	r5, r6
 8011ad4:	d11a      	bne.n	8011b0c <_printf_common+0xc8>
 8011ad6:	2000      	movs	r0, #0
 8011ad8:	e008      	b.n	8011aec <_printf_common+0xa8>
 8011ada:	2301      	movs	r3, #1
 8011adc:	4652      	mov	r2, sl
 8011ade:	4649      	mov	r1, r9
 8011ae0:	4638      	mov	r0, r7
 8011ae2:	47c0      	blx	r8
 8011ae4:	3001      	adds	r0, #1
 8011ae6:	d103      	bne.n	8011af0 <_printf_common+0xac>
 8011ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011af0:	3501      	adds	r5, #1
 8011af2:	e7c6      	b.n	8011a82 <_printf_common+0x3e>
 8011af4:	18e1      	adds	r1, r4, r3
 8011af6:	1c5a      	adds	r2, r3, #1
 8011af8:	2030      	movs	r0, #48	; 0x30
 8011afa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011afe:	4422      	add	r2, r4
 8011b00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b08:	3302      	adds	r3, #2
 8011b0a:	e7c7      	b.n	8011a9c <_printf_common+0x58>
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	4622      	mov	r2, r4
 8011b10:	4649      	mov	r1, r9
 8011b12:	4638      	mov	r0, r7
 8011b14:	47c0      	blx	r8
 8011b16:	3001      	adds	r0, #1
 8011b18:	d0e6      	beq.n	8011ae8 <_printf_common+0xa4>
 8011b1a:	3601      	adds	r6, #1
 8011b1c:	e7d9      	b.n	8011ad2 <_printf_common+0x8e>
	...

08011b20 <_printf_i>:
 8011b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b24:	7e0f      	ldrb	r7, [r1, #24]
 8011b26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011b28:	2f78      	cmp	r7, #120	; 0x78
 8011b2a:	4691      	mov	r9, r2
 8011b2c:	4680      	mov	r8, r0
 8011b2e:	460c      	mov	r4, r1
 8011b30:	469a      	mov	sl, r3
 8011b32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011b36:	d807      	bhi.n	8011b48 <_printf_i+0x28>
 8011b38:	2f62      	cmp	r7, #98	; 0x62
 8011b3a:	d80a      	bhi.n	8011b52 <_printf_i+0x32>
 8011b3c:	2f00      	cmp	r7, #0
 8011b3e:	f000 80d4 	beq.w	8011cea <_printf_i+0x1ca>
 8011b42:	2f58      	cmp	r7, #88	; 0x58
 8011b44:	f000 80c0 	beq.w	8011cc8 <_printf_i+0x1a8>
 8011b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011b50:	e03a      	b.n	8011bc8 <_printf_i+0xa8>
 8011b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011b56:	2b15      	cmp	r3, #21
 8011b58:	d8f6      	bhi.n	8011b48 <_printf_i+0x28>
 8011b5a:	a101      	add	r1, pc, #4	; (adr r1, 8011b60 <_printf_i+0x40>)
 8011b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011b60:	08011bb9 	.word	0x08011bb9
 8011b64:	08011bcd 	.word	0x08011bcd
 8011b68:	08011b49 	.word	0x08011b49
 8011b6c:	08011b49 	.word	0x08011b49
 8011b70:	08011b49 	.word	0x08011b49
 8011b74:	08011b49 	.word	0x08011b49
 8011b78:	08011bcd 	.word	0x08011bcd
 8011b7c:	08011b49 	.word	0x08011b49
 8011b80:	08011b49 	.word	0x08011b49
 8011b84:	08011b49 	.word	0x08011b49
 8011b88:	08011b49 	.word	0x08011b49
 8011b8c:	08011cd1 	.word	0x08011cd1
 8011b90:	08011bf9 	.word	0x08011bf9
 8011b94:	08011c8b 	.word	0x08011c8b
 8011b98:	08011b49 	.word	0x08011b49
 8011b9c:	08011b49 	.word	0x08011b49
 8011ba0:	08011cf3 	.word	0x08011cf3
 8011ba4:	08011b49 	.word	0x08011b49
 8011ba8:	08011bf9 	.word	0x08011bf9
 8011bac:	08011b49 	.word	0x08011b49
 8011bb0:	08011b49 	.word	0x08011b49
 8011bb4:	08011c93 	.word	0x08011c93
 8011bb8:	682b      	ldr	r3, [r5, #0]
 8011bba:	1d1a      	adds	r2, r3, #4
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	602a      	str	r2, [r5, #0]
 8011bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011bc8:	2301      	movs	r3, #1
 8011bca:	e09f      	b.n	8011d0c <_printf_i+0x1ec>
 8011bcc:	6820      	ldr	r0, [r4, #0]
 8011bce:	682b      	ldr	r3, [r5, #0]
 8011bd0:	0607      	lsls	r7, r0, #24
 8011bd2:	f103 0104 	add.w	r1, r3, #4
 8011bd6:	6029      	str	r1, [r5, #0]
 8011bd8:	d501      	bpl.n	8011bde <_printf_i+0xbe>
 8011bda:	681e      	ldr	r6, [r3, #0]
 8011bdc:	e003      	b.n	8011be6 <_printf_i+0xc6>
 8011bde:	0646      	lsls	r6, r0, #25
 8011be0:	d5fb      	bpl.n	8011bda <_printf_i+0xba>
 8011be2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011be6:	2e00      	cmp	r6, #0
 8011be8:	da03      	bge.n	8011bf2 <_printf_i+0xd2>
 8011bea:	232d      	movs	r3, #45	; 0x2d
 8011bec:	4276      	negs	r6, r6
 8011bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011bf2:	485a      	ldr	r0, [pc, #360]	; (8011d5c <_printf_i+0x23c>)
 8011bf4:	230a      	movs	r3, #10
 8011bf6:	e012      	b.n	8011c1e <_printf_i+0xfe>
 8011bf8:	682b      	ldr	r3, [r5, #0]
 8011bfa:	6820      	ldr	r0, [r4, #0]
 8011bfc:	1d19      	adds	r1, r3, #4
 8011bfe:	6029      	str	r1, [r5, #0]
 8011c00:	0605      	lsls	r5, r0, #24
 8011c02:	d501      	bpl.n	8011c08 <_printf_i+0xe8>
 8011c04:	681e      	ldr	r6, [r3, #0]
 8011c06:	e002      	b.n	8011c0e <_printf_i+0xee>
 8011c08:	0641      	lsls	r1, r0, #25
 8011c0a:	d5fb      	bpl.n	8011c04 <_printf_i+0xe4>
 8011c0c:	881e      	ldrh	r6, [r3, #0]
 8011c0e:	4853      	ldr	r0, [pc, #332]	; (8011d5c <_printf_i+0x23c>)
 8011c10:	2f6f      	cmp	r7, #111	; 0x6f
 8011c12:	bf0c      	ite	eq
 8011c14:	2308      	moveq	r3, #8
 8011c16:	230a      	movne	r3, #10
 8011c18:	2100      	movs	r1, #0
 8011c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c1e:	6865      	ldr	r5, [r4, #4]
 8011c20:	60a5      	str	r5, [r4, #8]
 8011c22:	2d00      	cmp	r5, #0
 8011c24:	bfa2      	ittt	ge
 8011c26:	6821      	ldrge	r1, [r4, #0]
 8011c28:	f021 0104 	bicge.w	r1, r1, #4
 8011c2c:	6021      	strge	r1, [r4, #0]
 8011c2e:	b90e      	cbnz	r6, 8011c34 <_printf_i+0x114>
 8011c30:	2d00      	cmp	r5, #0
 8011c32:	d04b      	beq.n	8011ccc <_printf_i+0x1ac>
 8011c34:	4615      	mov	r5, r2
 8011c36:	fbb6 f1f3 	udiv	r1, r6, r3
 8011c3a:	fb03 6711 	mls	r7, r3, r1, r6
 8011c3e:	5dc7      	ldrb	r7, [r0, r7]
 8011c40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011c44:	4637      	mov	r7, r6
 8011c46:	42bb      	cmp	r3, r7
 8011c48:	460e      	mov	r6, r1
 8011c4a:	d9f4      	bls.n	8011c36 <_printf_i+0x116>
 8011c4c:	2b08      	cmp	r3, #8
 8011c4e:	d10b      	bne.n	8011c68 <_printf_i+0x148>
 8011c50:	6823      	ldr	r3, [r4, #0]
 8011c52:	07de      	lsls	r6, r3, #31
 8011c54:	d508      	bpl.n	8011c68 <_printf_i+0x148>
 8011c56:	6923      	ldr	r3, [r4, #16]
 8011c58:	6861      	ldr	r1, [r4, #4]
 8011c5a:	4299      	cmp	r1, r3
 8011c5c:	bfde      	ittt	le
 8011c5e:	2330      	movle	r3, #48	; 0x30
 8011c60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011c64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011c68:	1b52      	subs	r2, r2, r5
 8011c6a:	6122      	str	r2, [r4, #16]
 8011c6c:	f8cd a000 	str.w	sl, [sp]
 8011c70:	464b      	mov	r3, r9
 8011c72:	aa03      	add	r2, sp, #12
 8011c74:	4621      	mov	r1, r4
 8011c76:	4640      	mov	r0, r8
 8011c78:	f7ff fee4 	bl	8011a44 <_printf_common>
 8011c7c:	3001      	adds	r0, #1
 8011c7e:	d14a      	bne.n	8011d16 <_printf_i+0x1f6>
 8011c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c84:	b004      	add	sp, #16
 8011c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c8a:	6823      	ldr	r3, [r4, #0]
 8011c8c:	f043 0320 	orr.w	r3, r3, #32
 8011c90:	6023      	str	r3, [r4, #0]
 8011c92:	4833      	ldr	r0, [pc, #204]	; (8011d60 <_printf_i+0x240>)
 8011c94:	2778      	movs	r7, #120	; 0x78
 8011c96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011c9a:	6823      	ldr	r3, [r4, #0]
 8011c9c:	6829      	ldr	r1, [r5, #0]
 8011c9e:	061f      	lsls	r7, r3, #24
 8011ca0:	f851 6b04 	ldr.w	r6, [r1], #4
 8011ca4:	d402      	bmi.n	8011cac <_printf_i+0x18c>
 8011ca6:	065f      	lsls	r7, r3, #25
 8011ca8:	bf48      	it	mi
 8011caa:	b2b6      	uxthmi	r6, r6
 8011cac:	07df      	lsls	r7, r3, #31
 8011cae:	bf48      	it	mi
 8011cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8011cb4:	6029      	str	r1, [r5, #0]
 8011cb6:	bf48      	it	mi
 8011cb8:	6023      	strmi	r3, [r4, #0]
 8011cba:	b91e      	cbnz	r6, 8011cc4 <_printf_i+0x1a4>
 8011cbc:	6823      	ldr	r3, [r4, #0]
 8011cbe:	f023 0320 	bic.w	r3, r3, #32
 8011cc2:	6023      	str	r3, [r4, #0]
 8011cc4:	2310      	movs	r3, #16
 8011cc6:	e7a7      	b.n	8011c18 <_printf_i+0xf8>
 8011cc8:	4824      	ldr	r0, [pc, #144]	; (8011d5c <_printf_i+0x23c>)
 8011cca:	e7e4      	b.n	8011c96 <_printf_i+0x176>
 8011ccc:	4615      	mov	r5, r2
 8011cce:	e7bd      	b.n	8011c4c <_printf_i+0x12c>
 8011cd0:	682b      	ldr	r3, [r5, #0]
 8011cd2:	6826      	ldr	r6, [r4, #0]
 8011cd4:	6961      	ldr	r1, [r4, #20]
 8011cd6:	1d18      	adds	r0, r3, #4
 8011cd8:	6028      	str	r0, [r5, #0]
 8011cda:	0635      	lsls	r5, r6, #24
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	d501      	bpl.n	8011ce4 <_printf_i+0x1c4>
 8011ce0:	6019      	str	r1, [r3, #0]
 8011ce2:	e002      	b.n	8011cea <_printf_i+0x1ca>
 8011ce4:	0670      	lsls	r0, r6, #25
 8011ce6:	d5fb      	bpl.n	8011ce0 <_printf_i+0x1c0>
 8011ce8:	8019      	strh	r1, [r3, #0]
 8011cea:	2300      	movs	r3, #0
 8011cec:	6123      	str	r3, [r4, #16]
 8011cee:	4615      	mov	r5, r2
 8011cf0:	e7bc      	b.n	8011c6c <_printf_i+0x14c>
 8011cf2:	682b      	ldr	r3, [r5, #0]
 8011cf4:	1d1a      	adds	r2, r3, #4
 8011cf6:	602a      	str	r2, [r5, #0]
 8011cf8:	681d      	ldr	r5, [r3, #0]
 8011cfa:	6862      	ldr	r2, [r4, #4]
 8011cfc:	2100      	movs	r1, #0
 8011cfe:	4628      	mov	r0, r5
 8011d00:	f7ee fa66 	bl	80001d0 <memchr>
 8011d04:	b108      	cbz	r0, 8011d0a <_printf_i+0x1ea>
 8011d06:	1b40      	subs	r0, r0, r5
 8011d08:	6060      	str	r0, [r4, #4]
 8011d0a:	6863      	ldr	r3, [r4, #4]
 8011d0c:	6123      	str	r3, [r4, #16]
 8011d0e:	2300      	movs	r3, #0
 8011d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d14:	e7aa      	b.n	8011c6c <_printf_i+0x14c>
 8011d16:	6923      	ldr	r3, [r4, #16]
 8011d18:	462a      	mov	r2, r5
 8011d1a:	4649      	mov	r1, r9
 8011d1c:	4640      	mov	r0, r8
 8011d1e:	47d0      	blx	sl
 8011d20:	3001      	adds	r0, #1
 8011d22:	d0ad      	beq.n	8011c80 <_printf_i+0x160>
 8011d24:	6823      	ldr	r3, [r4, #0]
 8011d26:	079b      	lsls	r3, r3, #30
 8011d28:	d413      	bmi.n	8011d52 <_printf_i+0x232>
 8011d2a:	68e0      	ldr	r0, [r4, #12]
 8011d2c:	9b03      	ldr	r3, [sp, #12]
 8011d2e:	4298      	cmp	r0, r3
 8011d30:	bfb8      	it	lt
 8011d32:	4618      	movlt	r0, r3
 8011d34:	e7a6      	b.n	8011c84 <_printf_i+0x164>
 8011d36:	2301      	movs	r3, #1
 8011d38:	4632      	mov	r2, r6
 8011d3a:	4649      	mov	r1, r9
 8011d3c:	4640      	mov	r0, r8
 8011d3e:	47d0      	blx	sl
 8011d40:	3001      	adds	r0, #1
 8011d42:	d09d      	beq.n	8011c80 <_printf_i+0x160>
 8011d44:	3501      	adds	r5, #1
 8011d46:	68e3      	ldr	r3, [r4, #12]
 8011d48:	9903      	ldr	r1, [sp, #12]
 8011d4a:	1a5b      	subs	r3, r3, r1
 8011d4c:	42ab      	cmp	r3, r5
 8011d4e:	dcf2      	bgt.n	8011d36 <_printf_i+0x216>
 8011d50:	e7eb      	b.n	8011d2a <_printf_i+0x20a>
 8011d52:	2500      	movs	r5, #0
 8011d54:	f104 0619 	add.w	r6, r4, #25
 8011d58:	e7f5      	b.n	8011d46 <_printf_i+0x226>
 8011d5a:	bf00      	nop
 8011d5c:	080181a6 	.word	0x080181a6
 8011d60:	080181b7 	.word	0x080181b7

08011d64 <_scanf_float>:
 8011d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d68:	b087      	sub	sp, #28
 8011d6a:	4617      	mov	r7, r2
 8011d6c:	9303      	str	r3, [sp, #12]
 8011d6e:	688b      	ldr	r3, [r1, #8]
 8011d70:	1e5a      	subs	r2, r3, #1
 8011d72:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011d76:	bf83      	ittte	hi
 8011d78:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011d7c:	195b      	addhi	r3, r3, r5
 8011d7e:	9302      	strhi	r3, [sp, #8]
 8011d80:	2300      	movls	r3, #0
 8011d82:	bf86      	itte	hi
 8011d84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011d88:	608b      	strhi	r3, [r1, #8]
 8011d8a:	9302      	strls	r3, [sp, #8]
 8011d8c:	680b      	ldr	r3, [r1, #0]
 8011d8e:	468b      	mov	fp, r1
 8011d90:	2500      	movs	r5, #0
 8011d92:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011d96:	f84b 3b1c 	str.w	r3, [fp], #28
 8011d9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011d9e:	4680      	mov	r8, r0
 8011da0:	460c      	mov	r4, r1
 8011da2:	465e      	mov	r6, fp
 8011da4:	46aa      	mov	sl, r5
 8011da6:	46a9      	mov	r9, r5
 8011da8:	9501      	str	r5, [sp, #4]
 8011daa:	68a2      	ldr	r2, [r4, #8]
 8011dac:	b152      	cbz	r2, 8011dc4 <_scanf_float+0x60>
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	2b4e      	cmp	r3, #78	; 0x4e
 8011db4:	d864      	bhi.n	8011e80 <_scanf_float+0x11c>
 8011db6:	2b40      	cmp	r3, #64	; 0x40
 8011db8:	d83c      	bhi.n	8011e34 <_scanf_float+0xd0>
 8011dba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011dbe:	b2c8      	uxtb	r0, r1
 8011dc0:	280e      	cmp	r0, #14
 8011dc2:	d93a      	bls.n	8011e3a <_scanf_float+0xd6>
 8011dc4:	f1b9 0f00 	cmp.w	r9, #0
 8011dc8:	d003      	beq.n	8011dd2 <_scanf_float+0x6e>
 8011dca:	6823      	ldr	r3, [r4, #0]
 8011dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011dd0:	6023      	str	r3, [r4, #0]
 8011dd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011dd6:	f1ba 0f01 	cmp.w	sl, #1
 8011dda:	f200 8113 	bhi.w	8012004 <_scanf_float+0x2a0>
 8011dde:	455e      	cmp	r6, fp
 8011de0:	f200 8105 	bhi.w	8011fee <_scanf_float+0x28a>
 8011de4:	2501      	movs	r5, #1
 8011de6:	4628      	mov	r0, r5
 8011de8:	b007      	add	sp, #28
 8011dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011df2:	2a0d      	cmp	r2, #13
 8011df4:	d8e6      	bhi.n	8011dc4 <_scanf_float+0x60>
 8011df6:	a101      	add	r1, pc, #4	; (adr r1, 8011dfc <_scanf_float+0x98>)
 8011df8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011dfc:	08011f3b 	.word	0x08011f3b
 8011e00:	08011dc5 	.word	0x08011dc5
 8011e04:	08011dc5 	.word	0x08011dc5
 8011e08:	08011dc5 	.word	0x08011dc5
 8011e0c:	08011f9b 	.word	0x08011f9b
 8011e10:	08011f73 	.word	0x08011f73
 8011e14:	08011dc5 	.word	0x08011dc5
 8011e18:	08011dc5 	.word	0x08011dc5
 8011e1c:	08011f49 	.word	0x08011f49
 8011e20:	08011dc5 	.word	0x08011dc5
 8011e24:	08011dc5 	.word	0x08011dc5
 8011e28:	08011dc5 	.word	0x08011dc5
 8011e2c:	08011dc5 	.word	0x08011dc5
 8011e30:	08011f01 	.word	0x08011f01
 8011e34:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011e38:	e7db      	b.n	8011df2 <_scanf_float+0x8e>
 8011e3a:	290e      	cmp	r1, #14
 8011e3c:	d8c2      	bhi.n	8011dc4 <_scanf_float+0x60>
 8011e3e:	a001      	add	r0, pc, #4	; (adr r0, 8011e44 <_scanf_float+0xe0>)
 8011e40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011e44:	08011ef3 	.word	0x08011ef3
 8011e48:	08011dc5 	.word	0x08011dc5
 8011e4c:	08011ef3 	.word	0x08011ef3
 8011e50:	08011f87 	.word	0x08011f87
 8011e54:	08011dc5 	.word	0x08011dc5
 8011e58:	08011ea1 	.word	0x08011ea1
 8011e5c:	08011edd 	.word	0x08011edd
 8011e60:	08011edd 	.word	0x08011edd
 8011e64:	08011edd 	.word	0x08011edd
 8011e68:	08011edd 	.word	0x08011edd
 8011e6c:	08011edd 	.word	0x08011edd
 8011e70:	08011edd 	.word	0x08011edd
 8011e74:	08011edd 	.word	0x08011edd
 8011e78:	08011edd 	.word	0x08011edd
 8011e7c:	08011edd 	.word	0x08011edd
 8011e80:	2b6e      	cmp	r3, #110	; 0x6e
 8011e82:	d809      	bhi.n	8011e98 <_scanf_float+0x134>
 8011e84:	2b60      	cmp	r3, #96	; 0x60
 8011e86:	d8b2      	bhi.n	8011dee <_scanf_float+0x8a>
 8011e88:	2b54      	cmp	r3, #84	; 0x54
 8011e8a:	d077      	beq.n	8011f7c <_scanf_float+0x218>
 8011e8c:	2b59      	cmp	r3, #89	; 0x59
 8011e8e:	d199      	bne.n	8011dc4 <_scanf_float+0x60>
 8011e90:	2d07      	cmp	r5, #7
 8011e92:	d197      	bne.n	8011dc4 <_scanf_float+0x60>
 8011e94:	2508      	movs	r5, #8
 8011e96:	e029      	b.n	8011eec <_scanf_float+0x188>
 8011e98:	2b74      	cmp	r3, #116	; 0x74
 8011e9a:	d06f      	beq.n	8011f7c <_scanf_float+0x218>
 8011e9c:	2b79      	cmp	r3, #121	; 0x79
 8011e9e:	e7f6      	b.n	8011e8e <_scanf_float+0x12a>
 8011ea0:	6821      	ldr	r1, [r4, #0]
 8011ea2:	05c8      	lsls	r0, r1, #23
 8011ea4:	d51a      	bpl.n	8011edc <_scanf_float+0x178>
 8011ea6:	9b02      	ldr	r3, [sp, #8]
 8011ea8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011eac:	6021      	str	r1, [r4, #0]
 8011eae:	f109 0901 	add.w	r9, r9, #1
 8011eb2:	b11b      	cbz	r3, 8011ebc <_scanf_float+0x158>
 8011eb4:	3b01      	subs	r3, #1
 8011eb6:	3201      	adds	r2, #1
 8011eb8:	9302      	str	r3, [sp, #8]
 8011eba:	60a2      	str	r2, [r4, #8]
 8011ebc:	68a3      	ldr	r3, [r4, #8]
 8011ebe:	3b01      	subs	r3, #1
 8011ec0:	60a3      	str	r3, [r4, #8]
 8011ec2:	6923      	ldr	r3, [r4, #16]
 8011ec4:	3301      	adds	r3, #1
 8011ec6:	6123      	str	r3, [r4, #16]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	3b01      	subs	r3, #1
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	607b      	str	r3, [r7, #4]
 8011ed0:	f340 8084 	ble.w	8011fdc <_scanf_float+0x278>
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	603b      	str	r3, [r7, #0]
 8011eda:	e766      	b.n	8011daa <_scanf_float+0x46>
 8011edc:	eb1a 0f05 	cmn.w	sl, r5
 8011ee0:	f47f af70 	bne.w	8011dc4 <_scanf_float+0x60>
 8011ee4:	6822      	ldr	r2, [r4, #0]
 8011ee6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011eea:	6022      	str	r2, [r4, #0]
 8011eec:	f806 3b01 	strb.w	r3, [r6], #1
 8011ef0:	e7e4      	b.n	8011ebc <_scanf_float+0x158>
 8011ef2:	6822      	ldr	r2, [r4, #0]
 8011ef4:	0610      	lsls	r0, r2, #24
 8011ef6:	f57f af65 	bpl.w	8011dc4 <_scanf_float+0x60>
 8011efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011efe:	e7f4      	b.n	8011eea <_scanf_float+0x186>
 8011f00:	f1ba 0f00 	cmp.w	sl, #0
 8011f04:	d10e      	bne.n	8011f24 <_scanf_float+0x1c0>
 8011f06:	f1b9 0f00 	cmp.w	r9, #0
 8011f0a:	d10e      	bne.n	8011f2a <_scanf_float+0x1c6>
 8011f0c:	6822      	ldr	r2, [r4, #0]
 8011f0e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011f12:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011f16:	d108      	bne.n	8011f2a <_scanf_float+0x1c6>
 8011f18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011f1c:	6022      	str	r2, [r4, #0]
 8011f1e:	f04f 0a01 	mov.w	sl, #1
 8011f22:	e7e3      	b.n	8011eec <_scanf_float+0x188>
 8011f24:	f1ba 0f02 	cmp.w	sl, #2
 8011f28:	d055      	beq.n	8011fd6 <_scanf_float+0x272>
 8011f2a:	2d01      	cmp	r5, #1
 8011f2c:	d002      	beq.n	8011f34 <_scanf_float+0x1d0>
 8011f2e:	2d04      	cmp	r5, #4
 8011f30:	f47f af48 	bne.w	8011dc4 <_scanf_float+0x60>
 8011f34:	3501      	adds	r5, #1
 8011f36:	b2ed      	uxtb	r5, r5
 8011f38:	e7d8      	b.n	8011eec <_scanf_float+0x188>
 8011f3a:	f1ba 0f01 	cmp.w	sl, #1
 8011f3e:	f47f af41 	bne.w	8011dc4 <_scanf_float+0x60>
 8011f42:	f04f 0a02 	mov.w	sl, #2
 8011f46:	e7d1      	b.n	8011eec <_scanf_float+0x188>
 8011f48:	b97d      	cbnz	r5, 8011f6a <_scanf_float+0x206>
 8011f4a:	f1b9 0f00 	cmp.w	r9, #0
 8011f4e:	f47f af3c 	bne.w	8011dca <_scanf_float+0x66>
 8011f52:	6822      	ldr	r2, [r4, #0]
 8011f54:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011f58:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011f5c:	f47f af39 	bne.w	8011dd2 <_scanf_float+0x6e>
 8011f60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011f64:	6022      	str	r2, [r4, #0]
 8011f66:	2501      	movs	r5, #1
 8011f68:	e7c0      	b.n	8011eec <_scanf_float+0x188>
 8011f6a:	2d03      	cmp	r5, #3
 8011f6c:	d0e2      	beq.n	8011f34 <_scanf_float+0x1d0>
 8011f6e:	2d05      	cmp	r5, #5
 8011f70:	e7de      	b.n	8011f30 <_scanf_float+0x1cc>
 8011f72:	2d02      	cmp	r5, #2
 8011f74:	f47f af26 	bne.w	8011dc4 <_scanf_float+0x60>
 8011f78:	2503      	movs	r5, #3
 8011f7a:	e7b7      	b.n	8011eec <_scanf_float+0x188>
 8011f7c:	2d06      	cmp	r5, #6
 8011f7e:	f47f af21 	bne.w	8011dc4 <_scanf_float+0x60>
 8011f82:	2507      	movs	r5, #7
 8011f84:	e7b2      	b.n	8011eec <_scanf_float+0x188>
 8011f86:	6822      	ldr	r2, [r4, #0]
 8011f88:	0591      	lsls	r1, r2, #22
 8011f8a:	f57f af1b 	bpl.w	8011dc4 <_scanf_float+0x60>
 8011f8e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011f92:	6022      	str	r2, [r4, #0]
 8011f94:	f8cd 9004 	str.w	r9, [sp, #4]
 8011f98:	e7a8      	b.n	8011eec <_scanf_float+0x188>
 8011f9a:	6822      	ldr	r2, [r4, #0]
 8011f9c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011fa0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011fa4:	d006      	beq.n	8011fb4 <_scanf_float+0x250>
 8011fa6:	0550      	lsls	r0, r2, #21
 8011fa8:	f57f af0c 	bpl.w	8011dc4 <_scanf_float+0x60>
 8011fac:	f1b9 0f00 	cmp.w	r9, #0
 8011fb0:	f43f af0f 	beq.w	8011dd2 <_scanf_float+0x6e>
 8011fb4:	0591      	lsls	r1, r2, #22
 8011fb6:	bf58      	it	pl
 8011fb8:	9901      	ldrpl	r1, [sp, #4]
 8011fba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011fbe:	bf58      	it	pl
 8011fc0:	eba9 0101 	subpl.w	r1, r9, r1
 8011fc4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011fc8:	bf58      	it	pl
 8011fca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011fce:	6022      	str	r2, [r4, #0]
 8011fd0:	f04f 0900 	mov.w	r9, #0
 8011fd4:	e78a      	b.n	8011eec <_scanf_float+0x188>
 8011fd6:	f04f 0a03 	mov.w	sl, #3
 8011fda:	e787      	b.n	8011eec <_scanf_float+0x188>
 8011fdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011fe0:	4639      	mov	r1, r7
 8011fe2:	4640      	mov	r0, r8
 8011fe4:	4798      	blx	r3
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	f43f aedf 	beq.w	8011daa <_scanf_float+0x46>
 8011fec:	e6ea      	b.n	8011dc4 <_scanf_float+0x60>
 8011fee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011ff2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011ff6:	463a      	mov	r2, r7
 8011ff8:	4640      	mov	r0, r8
 8011ffa:	4798      	blx	r3
 8011ffc:	6923      	ldr	r3, [r4, #16]
 8011ffe:	3b01      	subs	r3, #1
 8012000:	6123      	str	r3, [r4, #16]
 8012002:	e6ec      	b.n	8011dde <_scanf_float+0x7a>
 8012004:	1e6b      	subs	r3, r5, #1
 8012006:	2b06      	cmp	r3, #6
 8012008:	d825      	bhi.n	8012056 <_scanf_float+0x2f2>
 801200a:	2d02      	cmp	r5, #2
 801200c:	d836      	bhi.n	801207c <_scanf_float+0x318>
 801200e:	455e      	cmp	r6, fp
 8012010:	f67f aee8 	bls.w	8011de4 <_scanf_float+0x80>
 8012014:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012018:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801201c:	463a      	mov	r2, r7
 801201e:	4640      	mov	r0, r8
 8012020:	4798      	blx	r3
 8012022:	6923      	ldr	r3, [r4, #16]
 8012024:	3b01      	subs	r3, #1
 8012026:	6123      	str	r3, [r4, #16]
 8012028:	e7f1      	b.n	801200e <_scanf_float+0x2aa>
 801202a:	9802      	ldr	r0, [sp, #8]
 801202c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012030:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012034:	9002      	str	r0, [sp, #8]
 8012036:	463a      	mov	r2, r7
 8012038:	4640      	mov	r0, r8
 801203a:	4798      	blx	r3
 801203c:	6923      	ldr	r3, [r4, #16]
 801203e:	3b01      	subs	r3, #1
 8012040:	6123      	str	r3, [r4, #16]
 8012042:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012046:	fa5f fa8a 	uxtb.w	sl, sl
 801204a:	f1ba 0f02 	cmp.w	sl, #2
 801204e:	d1ec      	bne.n	801202a <_scanf_float+0x2c6>
 8012050:	3d03      	subs	r5, #3
 8012052:	b2ed      	uxtb	r5, r5
 8012054:	1b76      	subs	r6, r6, r5
 8012056:	6823      	ldr	r3, [r4, #0]
 8012058:	05da      	lsls	r2, r3, #23
 801205a:	d52f      	bpl.n	80120bc <_scanf_float+0x358>
 801205c:	055b      	lsls	r3, r3, #21
 801205e:	d510      	bpl.n	8012082 <_scanf_float+0x31e>
 8012060:	455e      	cmp	r6, fp
 8012062:	f67f aebf 	bls.w	8011de4 <_scanf_float+0x80>
 8012066:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801206a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801206e:	463a      	mov	r2, r7
 8012070:	4640      	mov	r0, r8
 8012072:	4798      	blx	r3
 8012074:	6923      	ldr	r3, [r4, #16]
 8012076:	3b01      	subs	r3, #1
 8012078:	6123      	str	r3, [r4, #16]
 801207a:	e7f1      	b.n	8012060 <_scanf_float+0x2fc>
 801207c:	46aa      	mov	sl, r5
 801207e:	9602      	str	r6, [sp, #8]
 8012080:	e7df      	b.n	8012042 <_scanf_float+0x2de>
 8012082:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012086:	6923      	ldr	r3, [r4, #16]
 8012088:	2965      	cmp	r1, #101	; 0x65
 801208a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801208e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8012092:	6123      	str	r3, [r4, #16]
 8012094:	d00c      	beq.n	80120b0 <_scanf_float+0x34c>
 8012096:	2945      	cmp	r1, #69	; 0x45
 8012098:	d00a      	beq.n	80120b0 <_scanf_float+0x34c>
 801209a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801209e:	463a      	mov	r2, r7
 80120a0:	4640      	mov	r0, r8
 80120a2:	4798      	blx	r3
 80120a4:	6923      	ldr	r3, [r4, #16]
 80120a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80120aa:	3b01      	subs	r3, #1
 80120ac:	1eb5      	subs	r5, r6, #2
 80120ae:	6123      	str	r3, [r4, #16]
 80120b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80120b4:	463a      	mov	r2, r7
 80120b6:	4640      	mov	r0, r8
 80120b8:	4798      	blx	r3
 80120ba:	462e      	mov	r6, r5
 80120bc:	6825      	ldr	r5, [r4, #0]
 80120be:	f015 0510 	ands.w	r5, r5, #16
 80120c2:	d158      	bne.n	8012176 <_scanf_float+0x412>
 80120c4:	7035      	strb	r5, [r6, #0]
 80120c6:	6823      	ldr	r3, [r4, #0]
 80120c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80120cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80120d0:	d11c      	bne.n	801210c <_scanf_float+0x3a8>
 80120d2:	9b01      	ldr	r3, [sp, #4]
 80120d4:	454b      	cmp	r3, r9
 80120d6:	eba3 0209 	sub.w	r2, r3, r9
 80120da:	d124      	bne.n	8012126 <_scanf_float+0x3c2>
 80120dc:	2200      	movs	r2, #0
 80120de:	4659      	mov	r1, fp
 80120e0:	4640      	mov	r0, r8
 80120e2:	f000 ff0d 	bl	8012f00 <_strtod_r>
 80120e6:	9b03      	ldr	r3, [sp, #12]
 80120e8:	6821      	ldr	r1, [r4, #0]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	f011 0f02 	tst.w	r1, #2
 80120f0:	ec57 6b10 	vmov	r6, r7, d0
 80120f4:	f103 0204 	add.w	r2, r3, #4
 80120f8:	d020      	beq.n	801213c <_scanf_float+0x3d8>
 80120fa:	9903      	ldr	r1, [sp, #12]
 80120fc:	600a      	str	r2, [r1, #0]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	e9c3 6700 	strd	r6, r7, [r3]
 8012104:	68e3      	ldr	r3, [r4, #12]
 8012106:	3301      	adds	r3, #1
 8012108:	60e3      	str	r3, [r4, #12]
 801210a:	e66c      	b.n	8011de6 <_scanf_float+0x82>
 801210c:	9b04      	ldr	r3, [sp, #16]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d0e4      	beq.n	80120dc <_scanf_float+0x378>
 8012112:	9905      	ldr	r1, [sp, #20]
 8012114:	230a      	movs	r3, #10
 8012116:	462a      	mov	r2, r5
 8012118:	3101      	adds	r1, #1
 801211a:	4640      	mov	r0, r8
 801211c:	f000 ff78 	bl	8013010 <_strtol_r>
 8012120:	9b04      	ldr	r3, [sp, #16]
 8012122:	9e05      	ldr	r6, [sp, #20]
 8012124:	1ac2      	subs	r2, r0, r3
 8012126:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801212a:	429e      	cmp	r6, r3
 801212c:	bf28      	it	cs
 801212e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012132:	4912      	ldr	r1, [pc, #72]	; (801217c <_scanf_float+0x418>)
 8012134:	4630      	mov	r0, r6
 8012136:	f000 f825 	bl	8012184 <siprintf>
 801213a:	e7cf      	b.n	80120dc <_scanf_float+0x378>
 801213c:	f011 0f04 	tst.w	r1, #4
 8012140:	9903      	ldr	r1, [sp, #12]
 8012142:	600a      	str	r2, [r1, #0]
 8012144:	d1db      	bne.n	80120fe <_scanf_float+0x39a>
 8012146:	f8d3 8000 	ldr.w	r8, [r3]
 801214a:	ee10 2a10 	vmov	r2, s0
 801214e:	ee10 0a10 	vmov	r0, s0
 8012152:	463b      	mov	r3, r7
 8012154:	4639      	mov	r1, r7
 8012156:	f7ee fce9 	bl	8000b2c <__aeabi_dcmpun>
 801215a:	b128      	cbz	r0, 8012168 <_scanf_float+0x404>
 801215c:	4808      	ldr	r0, [pc, #32]	; (8012180 <_scanf_float+0x41c>)
 801215e:	f000 ffe3 	bl	8013128 <nanf>
 8012162:	ed88 0a00 	vstr	s0, [r8]
 8012166:	e7cd      	b.n	8012104 <_scanf_float+0x3a0>
 8012168:	4630      	mov	r0, r6
 801216a:	4639      	mov	r1, r7
 801216c:	f7ee fd3c 	bl	8000be8 <__aeabi_d2f>
 8012170:	f8c8 0000 	str.w	r0, [r8]
 8012174:	e7c6      	b.n	8012104 <_scanf_float+0x3a0>
 8012176:	2500      	movs	r5, #0
 8012178:	e635      	b.n	8011de6 <_scanf_float+0x82>
 801217a:	bf00      	nop
 801217c:	080181c8 	.word	0x080181c8
 8012180:	080185b7 	.word	0x080185b7

08012184 <siprintf>:
 8012184:	b40e      	push	{r1, r2, r3}
 8012186:	b500      	push	{lr}
 8012188:	b09c      	sub	sp, #112	; 0x70
 801218a:	ab1d      	add	r3, sp, #116	; 0x74
 801218c:	9002      	str	r0, [sp, #8]
 801218e:	9006      	str	r0, [sp, #24]
 8012190:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012194:	4809      	ldr	r0, [pc, #36]	; (80121bc <siprintf+0x38>)
 8012196:	9107      	str	r1, [sp, #28]
 8012198:	9104      	str	r1, [sp, #16]
 801219a:	4909      	ldr	r1, [pc, #36]	; (80121c0 <siprintf+0x3c>)
 801219c:	f853 2b04 	ldr.w	r2, [r3], #4
 80121a0:	9105      	str	r1, [sp, #20]
 80121a2:	6800      	ldr	r0, [r0, #0]
 80121a4:	9301      	str	r3, [sp, #4]
 80121a6:	a902      	add	r1, sp, #8
 80121a8:	f002 f9f2 	bl	8014590 <_svfiprintf_r>
 80121ac:	9b02      	ldr	r3, [sp, #8]
 80121ae:	2200      	movs	r2, #0
 80121b0:	701a      	strb	r2, [r3, #0]
 80121b2:	b01c      	add	sp, #112	; 0x70
 80121b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80121b8:	b003      	add	sp, #12
 80121ba:	4770      	bx	lr
 80121bc:	200001ec 	.word	0x200001ec
 80121c0:	ffff0208 	.word	0xffff0208

080121c4 <std>:
 80121c4:	2300      	movs	r3, #0
 80121c6:	b510      	push	{r4, lr}
 80121c8:	4604      	mov	r4, r0
 80121ca:	e9c0 3300 	strd	r3, r3, [r0]
 80121ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80121d2:	6083      	str	r3, [r0, #8]
 80121d4:	8181      	strh	r1, [r0, #12]
 80121d6:	6643      	str	r3, [r0, #100]	; 0x64
 80121d8:	81c2      	strh	r2, [r0, #14]
 80121da:	6183      	str	r3, [r0, #24]
 80121dc:	4619      	mov	r1, r3
 80121de:	2208      	movs	r2, #8
 80121e0:	305c      	adds	r0, #92	; 0x5c
 80121e2:	f000 ff51 	bl	8013088 <memset>
 80121e6:	4b05      	ldr	r3, [pc, #20]	; (80121fc <std+0x38>)
 80121e8:	6263      	str	r3, [r4, #36]	; 0x24
 80121ea:	4b05      	ldr	r3, [pc, #20]	; (8012200 <std+0x3c>)
 80121ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80121ee:	4b05      	ldr	r3, [pc, #20]	; (8012204 <std+0x40>)
 80121f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80121f2:	4b05      	ldr	r3, [pc, #20]	; (8012208 <std+0x44>)
 80121f4:	6224      	str	r4, [r4, #32]
 80121f6:	6323      	str	r3, [r4, #48]	; 0x30
 80121f8:	bd10      	pop	{r4, pc}
 80121fa:	bf00      	nop
 80121fc:	080153cf 	.word	0x080153cf
 8012200:	080153f1 	.word	0x080153f1
 8012204:	08015429 	.word	0x08015429
 8012208:	0801544d 	.word	0x0801544d

0801220c <stdio_exit_handler>:
 801220c:	4a02      	ldr	r2, [pc, #8]	; (8012218 <stdio_exit_handler+0xc>)
 801220e:	4903      	ldr	r1, [pc, #12]	; (801221c <stdio_exit_handler+0x10>)
 8012210:	4803      	ldr	r0, [pc, #12]	; (8012220 <stdio_exit_handler+0x14>)
 8012212:	f000 bf09 	b.w	8013028 <_fwalk_sglue>
 8012216:	bf00      	nop
 8012218:	20000028 	.word	0x20000028
 801221c:	08014a0d 	.word	0x08014a0d
 8012220:	200001a0 	.word	0x200001a0

08012224 <cleanup_stdio>:
 8012224:	6841      	ldr	r1, [r0, #4]
 8012226:	4b0c      	ldr	r3, [pc, #48]	; (8012258 <cleanup_stdio+0x34>)
 8012228:	4299      	cmp	r1, r3
 801222a:	b510      	push	{r4, lr}
 801222c:	4604      	mov	r4, r0
 801222e:	d001      	beq.n	8012234 <cleanup_stdio+0x10>
 8012230:	f002 fbec 	bl	8014a0c <_fflush_r>
 8012234:	68a1      	ldr	r1, [r4, #8]
 8012236:	4b09      	ldr	r3, [pc, #36]	; (801225c <cleanup_stdio+0x38>)
 8012238:	4299      	cmp	r1, r3
 801223a:	d002      	beq.n	8012242 <cleanup_stdio+0x1e>
 801223c:	4620      	mov	r0, r4
 801223e:	f002 fbe5 	bl	8014a0c <_fflush_r>
 8012242:	68e1      	ldr	r1, [r4, #12]
 8012244:	4b06      	ldr	r3, [pc, #24]	; (8012260 <cleanup_stdio+0x3c>)
 8012246:	4299      	cmp	r1, r3
 8012248:	d004      	beq.n	8012254 <cleanup_stdio+0x30>
 801224a:	4620      	mov	r0, r4
 801224c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012250:	f002 bbdc 	b.w	8014a0c <_fflush_r>
 8012254:	bd10      	pop	{r4, pc}
 8012256:	bf00      	nop
 8012258:	20002efc 	.word	0x20002efc
 801225c:	20002f64 	.word	0x20002f64
 8012260:	20002fcc 	.word	0x20002fcc

08012264 <global_stdio_init.part.0>:
 8012264:	b510      	push	{r4, lr}
 8012266:	4b0b      	ldr	r3, [pc, #44]	; (8012294 <global_stdio_init.part.0+0x30>)
 8012268:	4c0b      	ldr	r4, [pc, #44]	; (8012298 <global_stdio_init.part.0+0x34>)
 801226a:	4a0c      	ldr	r2, [pc, #48]	; (801229c <global_stdio_init.part.0+0x38>)
 801226c:	601a      	str	r2, [r3, #0]
 801226e:	4620      	mov	r0, r4
 8012270:	2200      	movs	r2, #0
 8012272:	2104      	movs	r1, #4
 8012274:	f7ff ffa6 	bl	80121c4 <std>
 8012278:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801227c:	2201      	movs	r2, #1
 801227e:	2109      	movs	r1, #9
 8012280:	f7ff ffa0 	bl	80121c4 <std>
 8012284:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012288:	2202      	movs	r2, #2
 801228a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801228e:	2112      	movs	r1, #18
 8012290:	f7ff bf98 	b.w	80121c4 <std>
 8012294:	20003034 	.word	0x20003034
 8012298:	20002efc 	.word	0x20002efc
 801229c:	0801220d 	.word	0x0801220d

080122a0 <__sfp_lock_acquire>:
 80122a0:	4801      	ldr	r0, [pc, #4]	; (80122a8 <__sfp_lock_acquire+0x8>)
 80122a2:	f000 bf27 	b.w	80130f4 <__retarget_lock_acquire_recursive>
 80122a6:	bf00      	nop
 80122a8:	20003039 	.word	0x20003039

080122ac <__sfp_lock_release>:
 80122ac:	4801      	ldr	r0, [pc, #4]	; (80122b4 <__sfp_lock_release+0x8>)
 80122ae:	f000 bf22 	b.w	80130f6 <__retarget_lock_release_recursive>
 80122b2:	bf00      	nop
 80122b4:	20003039 	.word	0x20003039

080122b8 <__sinit>:
 80122b8:	b510      	push	{r4, lr}
 80122ba:	4604      	mov	r4, r0
 80122bc:	f7ff fff0 	bl	80122a0 <__sfp_lock_acquire>
 80122c0:	6a23      	ldr	r3, [r4, #32]
 80122c2:	b11b      	cbz	r3, 80122cc <__sinit+0x14>
 80122c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122c8:	f7ff bff0 	b.w	80122ac <__sfp_lock_release>
 80122cc:	4b04      	ldr	r3, [pc, #16]	; (80122e0 <__sinit+0x28>)
 80122ce:	6223      	str	r3, [r4, #32]
 80122d0:	4b04      	ldr	r3, [pc, #16]	; (80122e4 <__sinit+0x2c>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d1f5      	bne.n	80122c4 <__sinit+0xc>
 80122d8:	f7ff ffc4 	bl	8012264 <global_stdio_init.part.0>
 80122dc:	e7f2      	b.n	80122c4 <__sinit+0xc>
 80122de:	bf00      	nop
 80122e0:	08012225 	.word	0x08012225
 80122e4:	20003034 	.word	0x20003034

080122e8 <sulp>:
 80122e8:	b570      	push	{r4, r5, r6, lr}
 80122ea:	4604      	mov	r4, r0
 80122ec:	460d      	mov	r5, r1
 80122ee:	ec45 4b10 	vmov	d0, r4, r5
 80122f2:	4616      	mov	r6, r2
 80122f4:	f002 ff2a 	bl	801514c <__ulp>
 80122f8:	ec51 0b10 	vmov	r0, r1, d0
 80122fc:	b17e      	cbz	r6, 801231e <sulp+0x36>
 80122fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012302:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012306:	2b00      	cmp	r3, #0
 8012308:	dd09      	ble.n	801231e <sulp+0x36>
 801230a:	051b      	lsls	r3, r3, #20
 801230c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012310:	2400      	movs	r4, #0
 8012312:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012316:	4622      	mov	r2, r4
 8012318:	462b      	mov	r3, r5
 801231a:	f7ee f96d 	bl	80005f8 <__aeabi_dmul>
 801231e:	bd70      	pop	{r4, r5, r6, pc}

08012320 <_strtod_l>:
 8012320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012324:	ed2d 8b02 	vpush	{d8}
 8012328:	b09b      	sub	sp, #108	; 0x6c
 801232a:	4604      	mov	r4, r0
 801232c:	9213      	str	r2, [sp, #76]	; 0x4c
 801232e:	2200      	movs	r2, #0
 8012330:	9216      	str	r2, [sp, #88]	; 0x58
 8012332:	460d      	mov	r5, r1
 8012334:	f04f 0800 	mov.w	r8, #0
 8012338:	f04f 0900 	mov.w	r9, #0
 801233c:	460a      	mov	r2, r1
 801233e:	9215      	str	r2, [sp, #84]	; 0x54
 8012340:	7811      	ldrb	r1, [r2, #0]
 8012342:	292b      	cmp	r1, #43	; 0x2b
 8012344:	d04c      	beq.n	80123e0 <_strtod_l+0xc0>
 8012346:	d83a      	bhi.n	80123be <_strtod_l+0x9e>
 8012348:	290d      	cmp	r1, #13
 801234a:	d834      	bhi.n	80123b6 <_strtod_l+0x96>
 801234c:	2908      	cmp	r1, #8
 801234e:	d834      	bhi.n	80123ba <_strtod_l+0x9a>
 8012350:	2900      	cmp	r1, #0
 8012352:	d03d      	beq.n	80123d0 <_strtod_l+0xb0>
 8012354:	2200      	movs	r2, #0
 8012356:	920a      	str	r2, [sp, #40]	; 0x28
 8012358:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801235a:	7832      	ldrb	r2, [r6, #0]
 801235c:	2a30      	cmp	r2, #48	; 0x30
 801235e:	f040 80b4 	bne.w	80124ca <_strtod_l+0x1aa>
 8012362:	7872      	ldrb	r2, [r6, #1]
 8012364:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8012368:	2a58      	cmp	r2, #88	; 0x58
 801236a:	d170      	bne.n	801244e <_strtod_l+0x12e>
 801236c:	9302      	str	r3, [sp, #8]
 801236e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012370:	9301      	str	r3, [sp, #4]
 8012372:	ab16      	add	r3, sp, #88	; 0x58
 8012374:	9300      	str	r3, [sp, #0]
 8012376:	4a8e      	ldr	r2, [pc, #568]	; (80125b0 <_strtod_l+0x290>)
 8012378:	ab17      	add	r3, sp, #92	; 0x5c
 801237a:	a915      	add	r1, sp, #84	; 0x54
 801237c:	4620      	mov	r0, r4
 801237e:	f001 fdbd 	bl	8013efc <__gethex>
 8012382:	f010 070f 	ands.w	r7, r0, #15
 8012386:	4605      	mov	r5, r0
 8012388:	d005      	beq.n	8012396 <_strtod_l+0x76>
 801238a:	2f06      	cmp	r7, #6
 801238c:	d12a      	bne.n	80123e4 <_strtod_l+0xc4>
 801238e:	3601      	adds	r6, #1
 8012390:	2300      	movs	r3, #0
 8012392:	9615      	str	r6, [sp, #84]	; 0x54
 8012394:	930a      	str	r3, [sp, #40]	; 0x28
 8012396:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012398:	2b00      	cmp	r3, #0
 801239a:	f040 857f 	bne.w	8012e9c <_strtod_l+0xb7c>
 801239e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123a0:	b1db      	cbz	r3, 80123da <_strtod_l+0xba>
 80123a2:	4642      	mov	r2, r8
 80123a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80123a8:	ec43 2b10 	vmov	d0, r2, r3
 80123ac:	b01b      	add	sp, #108	; 0x6c
 80123ae:	ecbd 8b02 	vpop	{d8}
 80123b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b6:	2920      	cmp	r1, #32
 80123b8:	d1cc      	bne.n	8012354 <_strtod_l+0x34>
 80123ba:	3201      	adds	r2, #1
 80123bc:	e7bf      	b.n	801233e <_strtod_l+0x1e>
 80123be:	292d      	cmp	r1, #45	; 0x2d
 80123c0:	d1c8      	bne.n	8012354 <_strtod_l+0x34>
 80123c2:	2101      	movs	r1, #1
 80123c4:	910a      	str	r1, [sp, #40]	; 0x28
 80123c6:	1c51      	adds	r1, r2, #1
 80123c8:	9115      	str	r1, [sp, #84]	; 0x54
 80123ca:	7852      	ldrb	r2, [r2, #1]
 80123cc:	2a00      	cmp	r2, #0
 80123ce:	d1c3      	bne.n	8012358 <_strtod_l+0x38>
 80123d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80123d2:	9515      	str	r5, [sp, #84]	; 0x54
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	f040 855f 	bne.w	8012e98 <_strtod_l+0xb78>
 80123da:	4642      	mov	r2, r8
 80123dc:	464b      	mov	r3, r9
 80123de:	e7e3      	b.n	80123a8 <_strtod_l+0x88>
 80123e0:	2100      	movs	r1, #0
 80123e2:	e7ef      	b.n	80123c4 <_strtod_l+0xa4>
 80123e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80123e6:	b13a      	cbz	r2, 80123f8 <_strtod_l+0xd8>
 80123e8:	2135      	movs	r1, #53	; 0x35
 80123ea:	a818      	add	r0, sp, #96	; 0x60
 80123ec:	f002 ffab 	bl	8015346 <__copybits>
 80123f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80123f2:	4620      	mov	r0, r4
 80123f4:	f002 fb7e 	bl	8014af4 <_Bfree>
 80123f8:	3f01      	subs	r7, #1
 80123fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80123fc:	2f04      	cmp	r7, #4
 80123fe:	d806      	bhi.n	801240e <_strtod_l+0xee>
 8012400:	e8df f007 	tbb	[pc, r7]
 8012404:	201d0314 	.word	0x201d0314
 8012408:	14          	.byte	0x14
 8012409:	00          	.byte	0x00
 801240a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801240e:	05e9      	lsls	r1, r5, #23
 8012410:	bf48      	it	mi
 8012412:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8012416:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801241a:	0d1b      	lsrs	r3, r3, #20
 801241c:	051b      	lsls	r3, r3, #20
 801241e:	2b00      	cmp	r3, #0
 8012420:	d1b9      	bne.n	8012396 <_strtod_l+0x76>
 8012422:	f000 fe3d 	bl	80130a0 <__errno>
 8012426:	2322      	movs	r3, #34	; 0x22
 8012428:	6003      	str	r3, [r0, #0]
 801242a:	e7b4      	b.n	8012396 <_strtod_l+0x76>
 801242c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8012430:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012434:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012438:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801243c:	e7e7      	b.n	801240e <_strtod_l+0xee>
 801243e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80125b8 <_strtod_l+0x298>
 8012442:	e7e4      	b.n	801240e <_strtod_l+0xee>
 8012444:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012448:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801244c:	e7df      	b.n	801240e <_strtod_l+0xee>
 801244e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012450:	1c5a      	adds	r2, r3, #1
 8012452:	9215      	str	r2, [sp, #84]	; 0x54
 8012454:	785b      	ldrb	r3, [r3, #1]
 8012456:	2b30      	cmp	r3, #48	; 0x30
 8012458:	d0f9      	beq.n	801244e <_strtod_l+0x12e>
 801245a:	2b00      	cmp	r3, #0
 801245c:	d09b      	beq.n	8012396 <_strtod_l+0x76>
 801245e:	2301      	movs	r3, #1
 8012460:	f04f 0a00 	mov.w	sl, #0
 8012464:	9304      	str	r3, [sp, #16]
 8012466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012468:	930b      	str	r3, [sp, #44]	; 0x2c
 801246a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801246e:	46d3      	mov	fp, sl
 8012470:	220a      	movs	r2, #10
 8012472:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012474:	7806      	ldrb	r6, [r0, #0]
 8012476:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801247a:	b2d9      	uxtb	r1, r3
 801247c:	2909      	cmp	r1, #9
 801247e:	d926      	bls.n	80124ce <_strtod_l+0x1ae>
 8012480:	494c      	ldr	r1, [pc, #304]	; (80125b4 <_strtod_l+0x294>)
 8012482:	2201      	movs	r2, #1
 8012484:	f000 fdee 	bl	8013064 <strncmp>
 8012488:	2800      	cmp	r0, #0
 801248a:	d030      	beq.n	80124ee <_strtod_l+0x1ce>
 801248c:	2000      	movs	r0, #0
 801248e:	4632      	mov	r2, r6
 8012490:	9005      	str	r0, [sp, #20]
 8012492:	465e      	mov	r6, fp
 8012494:	4603      	mov	r3, r0
 8012496:	2a65      	cmp	r2, #101	; 0x65
 8012498:	d001      	beq.n	801249e <_strtod_l+0x17e>
 801249a:	2a45      	cmp	r2, #69	; 0x45
 801249c:	d113      	bne.n	80124c6 <_strtod_l+0x1a6>
 801249e:	b91e      	cbnz	r6, 80124a8 <_strtod_l+0x188>
 80124a0:	9a04      	ldr	r2, [sp, #16]
 80124a2:	4302      	orrs	r2, r0
 80124a4:	d094      	beq.n	80123d0 <_strtod_l+0xb0>
 80124a6:	2600      	movs	r6, #0
 80124a8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80124aa:	1c6a      	adds	r2, r5, #1
 80124ac:	9215      	str	r2, [sp, #84]	; 0x54
 80124ae:	786a      	ldrb	r2, [r5, #1]
 80124b0:	2a2b      	cmp	r2, #43	; 0x2b
 80124b2:	d074      	beq.n	801259e <_strtod_l+0x27e>
 80124b4:	2a2d      	cmp	r2, #45	; 0x2d
 80124b6:	d078      	beq.n	80125aa <_strtod_l+0x28a>
 80124b8:	f04f 0c00 	mov.w	ip, #0
 80124bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80124c0:	2909      	cmp	r1, #9
 80124c2:	d97f      	bls.n	80125c4 <_strtod_l+0x2a4>
 80124c4:	9515      	str	r5, [sp, #84]	; 0x54
 80124c6:	2700      	movs	r7, #0
 80124c8:	e09e      	b.n	8012608 <_strtod_l+0x2e8>
 80124ca:	2300      	movs	r3, #0
 80124cc:	e7c8      	b.n	8012460 <_strtod_l+0x140>
 80124ce:	f1bb 0f08 	cmp.w	fp, #8
 80124d2:	bfd8      	it	le
 80124d4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80124d6:	f100 0001 	add.w	r0, r0, #1
 80124da:	bfda      	itte	le
 80124dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80124e0:	9309      	strle	r3, [sp, #36]	; 0x24
 80124e2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80124e6:	f10b 0b01 	add.w	fp, fp, #1
 80124ea:	9015      	str	r0, [sp, #84]	; 0x54
 80124ec:	e7c1      	b.n	8012472 <_strtod_l+0x152>
 80124ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80124f0:	1c5a      	adds	r2, r3, #1
 80124f2:	9215      	str	r2, [sp, #84]	; 0x54
 80124f4:	785a      	ldrb	r2, [r3, #1]
 80124f6:	f1bb 0f00 	cmp.w	fp, #0
 80124fa:	d037      	beq.n	801256c <_strtod_l+0x24c>
 80124fc:	9005      	str	r0, [sp, #20]
 80124fe:	465e      	mov	r6, fp
 8012500:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012504:	2b09      	cmp	r3, #9
 8012506:	d912      	bls.n	801252e <_strtod_l+0x20e>
 8012508:	2301      	movs	r3, #1
 801250a:	e7c4      	b.n	8012496 <_strtod_l+0x176>
 801250c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801250e:	1c5a      	adds	r2, r3, #1
 8012510:	9215      	str	r2, [sp, #84]	; 0x54
 8012512:	785a      	ldrb	r2, [r3, #1]
 8012514:	3001      	adds	r0, #1
 8012516:	2a30      	cmp	r2, #48	; 0x30
 8012518:	d0f8      	beq.n	801250c <_strtod_l+0x1ec>
 801251a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801251e:	2b08      	cmp	r3, #8
 8012520:	f200 84c1 	bhi.w	8012ea6 <_strtod_l+0xb86>
 8012524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012526:	9005      	str	r0, [sp, #20]
 8012528:	2000      	movs	r0, #0
 801252a:	930b      	str	r3, [sp, #44]	; 0x2c
 801252c:	4606      	mov	r6, r0
 801252e:	3a30      	subs	r2, #48	; 0x30
 8012530:	f100 0301 	add.w	r3, r0, #1
 8012534:	d014      	beq.n	8012560 <_strtod_l+0x240>
 8012536:	9905      	ldr	r1, [sp, #20]
 8012538:	4419      	add	r1, r3
 801253a:	9105      	str	r1, [sp, #20]
 801253c:	4633      	mov	r3, r6
 801253e:	eb00 0c06 	add.w	ip, r0, r6
 8012542:	210a      	movs	r1, #10
 8012544:	4563      	cmp	r3, ip
 8012546:	d113      	bne.n	8012570 <_strtod_l+0x250>
 8012548:	1833      	adds	r3, r6, r0
 801254a:	2b08      	cmp	r3, #8
 801254c:	f106 0601 	add.w	r6, r6, #1
 8012550:	4406      	add	r6, r0
 8012552:	dc1a      	bgt.n	801258a <_strtod_l+0x26a>
 8012554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012556:	230a      	movs	r3, #10
 8012558:	fb03 2301 	mla	r3, r3, r1, r2
 801255c:	9309      	str	r3, [sp, #36]	; 0x24
 801255e:	2300      	movs	r3, #0
 8012560:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012562:	1c51      	adds	r1, r2, #1
 8012564:	9115      	str	r1, [sp, #84]	; 0x54
 8012566:	7852      	ldrb	r2, [r2, #1]
 8012568:	4618      	mov	r0, r3
 801256a:	e7c9      	b.n	8012500 <_strtod_l+0x1e0>
 801256c:	4658      	mov	r0, fp
 801256e:	e7d2      	b.n	8012516 <_strtod_l+0x1f6>
 8012570:	2b08      	cmp	r3, #8
 8012572:	f103 0301 	add.w	r3, r3, #1
 8012576:	dc03      	bgt.n	8012580 <_strtod_l+0x260>
 8012578:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801257a:	434f      	muls	r7, r1
 801257c:	9709      	str	r7, [sp, #36]	; 0x24
 801257e:	e7e1      	b.n	8012544 <_strtod_l+0x224>
 8012580:	2b10      	cmp	r3, #16
 8012582:	bfd8      	it	le
 8012584:	fb01 fa0a 	mulle.w	sl, r1, sl
 8012588:	e7dc      	b.n	8012544 <_strtod_l+0x224>
 801258a:	2e10      	cmp	r6, #16
 801258c:	bfdc      	itt	le
 801258e:	230a      	movle	r3, #10
 8012590:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8012594:	e7e3      	b.n	801255e <_strtod_l+0x23e>
 8012596:	2300      	movs	r3, #0
 8012598:	9305      	str	r3, [sp, #20]
 801259a:	2301      	movs	r3, #1
 801259c:	e780      	b.n	80124a0 <_strtod_l+0x180>
 801259e:	f04f 0c00 	mov.w	ip, #0
 80125a2:	1caa      	adds	r2, r5, #2
 80125a4:	9215      	str	r2, [sp, #84]	; 0x54
 80125a6:	78aa      	ldrb	r2, [r5, #2]
 80125a8:	e788      	b.n	80124bc <_strtod_l+0x19c>
 80125aa:	f04f 0c01 	mov.w	ip, #1
 80125ae:	e7f8      	b.n	80125a2 <_strtod_l+0x282>
 80125b0:	080181d0 	.word	0x080181d0
 80125b4:	080181cd 	.word	0x080181cd
 80125b8:	7ff00000 	.word	0x7ff00000
 80125bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80125be:	1c51      	adds	r1, r2, #1
 80125c0:	9115      	str	r1, [sp, #84]	; 0x54
 80125c2:	7852      	ldrb	r2, [r2, #1]
 80125c4:	2a30      	cmp	r2, #48	; 0x30
 80125c6:	d0f9      	beq.n	80125bc <_strtod_l+0x29c>
 80125c8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80125cc:	2908      	cmp	r1, #8
 80125ce:	f63f af7a 	bhi.w	80124c6 <_strtod_l+0x1a6>
 80125d2:	3a30      	subs	r2, #48	; 0x30
 80125d4:	9208      	str	r2, [sp, #32]
 80125d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80125d8:	920c      	str	r2, [sp, #48]	; 0x30
 80125da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80125dc:	1c57      	adds	r7, r2, #1
 80125de:	9715      	str	r7, [sp, #84]	; 0x54
 80125e0:	7852      	ldrb	r2, [r2, #1]
 80125e2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80125e6:	f1be 0f09 	cmp.w	lr, #9
 80125ea:	d938      	bls.n	801265e <_strtod_l+0x33e>
 80125ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80125ee:	1a7f      	subs	r7, r7, r1
 80125f0:	2f08      	cmp	r7, #8
 80125f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80125f6:	dc03      	bgt.n	8012600 <_strtod_l+0x2e0>
 80125f8:	9908      	ldr	r1, [sp, #32]
 80125fa:	428f      	cmp	r7, r1
 80125fc:	bfa8      	it	ge
 80125fe:	460f      	movge	r7, r1
 8012600:	f1bc 0f00 	cmp.w	ip, #0
 8012604:	d000      	beq.n	8012608 <_strtod_l+0x2e8>
 8012606:	427f      	negs	r7, r7
 8012608:	2e00      	cmp	r6, #0
 801260a:	d14f      	bne.n	80126ac <_strtod_l+0x38c>
 801260c:	9904      	ldr	r1, [sp, #16]
 801260e:	4301      	orrs	r1, r0
 8012610:	f47f aec1 	bne.w	8012396 <_strtod_l+0x76>
 8012614:	2b00      	cmp	r3, #0
 8012616:	f47f aedb 	bne.w	80123d0 <_strtod_l+0xb0>
 801261a:	2a69      	cmp	r2, #105	; 0x69
 801261c:	d029      	beq.n	8012672 <_strtod_l+0x352>
 801261e:	dc26      	bgt.n	801266e <_strtod_l+0x34e>
 8012620:	2a49      	cmp	r2, #73	; 0x49
 8012622:	d026      	beq.n	8012672 <_strtod_l+0x352>
 8012624:	2a4e      	cmp	r2, #78	; 0x4e
 8012626:	f47f aed3 	bne.w	80123d0 <_strtod_l+0xb0>
 801262a:	499b      	ldr	r1, [pc, #620]	; (8012898 <_strtod_l+0x578>)
 801262c:	a815      	add	r0, sp, #84	; 0x54
 801262e:	f001 fea5 	bl	801437c <__match>
 8012632:	2800      	cmp	r0, #0
 8012634:	f43f aecc 	beq.w	80123d0 <_strtod_l+0xb0>
 8012638:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	2b28      	cmp	r3, #40	; 0x28
 801263e:	d12f      	bne.n	80126a0 <_strtod_l+0x380>
 8012640:	4996      	ldr	r1, [pc, #600]	; (801289c <_strtod_l+0x57c>)
 8012642:	aa18      	add	r2, sp, #96	; 0x60
 8012644:	a815      	add	r0, sp, #84	; 0x54
 8012646:	f001 fead 	bl	80143a4 <__hexnan>
 801264a:	2805      	cmp	r0, #5
 801264c:	d128      	bne.n	80126a0 <_strtod_l+0x380>
 801264e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012650:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012654:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012658:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801265c:	e69b      	b.n	8012396 <_strtod_l+0x76>
 801265e:	9f08      	ldr	r7, [sp, #32]
 8012660:	210a      	movs	r1, #10
 8012662:	fb01 2107 	mla	r1, r1, r7, r2
 8012666:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801266a:	9208      	str	r2, [sp, #32]
 801266c:	e7b5      	b.n	80125da <_strtod_l+0x2ba>
 801266e:	2a6e      	cmp	r2, #110	; 0x6e
 8012670:	e7d9      	b.n	8012626 <_strtod_l+0x306>
 8012672:	498b      	ldr	r1, [pc, #556]	; (80128a0 <_strtod_l+0x580>)
 8012674:	a815      	add	r0, sp, #84	; 0x54
 8012676:	f001 fe81 	bl	801437c <__match>
 801267a:	2800      	cmp	r0, #0
 801267c:	f43f aea8 	beq.w	80123d0 <_strtod_l+0xb0>
 8012680:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012682:	4988      	ldr	r1, [pc, #544]	; (80128a4 <_strtod_l+0x584>)
 8012684:	3b01      	subs	r3, #1
 8012686:	a815      	add	r0, sp, #84	; 0x54
 8012688:	9315      	str	r3, [sp, #84]	; 0x54
 801268a:	f001 fe77 	bl	801437c <__match>
 801268e:	b910      	cbnz	r0, 8012696 <_strtod_l+0x376>
 8012690:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012692:	3301      	adds	r3, #1
 8012694:	9315      	str	r3, [sp, #84]	; 0x54
 8012696:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80128b4 <_strtod_l+0x594>
 801269a:	f04f 0800 	mov.w	r8, #0
 801269e:	e67a      	b.n	8012396 <_strtod_l+0x76>
 80126a0:	4881      	ldr	r0, [pc, #516]	; (80128a8 <_strtod_l+0x588>)
 80126a2:	f000 fd39 	bl	8013118 <nan>
 80126a6:	ec59 8b10 	vmov	r8, r9, d0
 80126aa:	e674      	b.n	8012396 <_strtod_l+0x76>
 80126ac:	9b05      	ldr	r3, [sp, #20]
 80126ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80126b0:	1afb      	subs	r3, r7, r3
 80126b2:	f1bb 0f00 	cmp.w	fp, #0
 80126b6:	bf08      	it	eq
 80126b8:	46b3      	moveq	fp, r6
 80126ba:	2e10      	cmp	r6, #16
 80126bc:	9308      	str	r3, [sp, #32]
 80126be:	4635      	mov	r5, r6
 80126c0:	bfa8      	it	ge
 80126c2:	2510      	movge	r5, #16
 80126c4:	f7ed ff1e 	bl	8000504 <__aeabi_ui2d>
 80126c8:	2e09      	cmp	r6, #9
 80126ca:	4680      	mov	r8, r0
 80126cc:	4689      	mov	r9, r1
 80126ce:	dd13      	ble.n	80126f8 <_strtod_l+0x3d8>
 80126d0:	4b76      	ldr	r3, [pc, #472]	; (80128ac <_strtod_l+0x58c>)
 80126d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80126d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80126da:	f7ed ff8d 	bl	80005f8 <__aeabi_dmul>
 80126de:	4680      	mov	r8, r0
 80126e0:	4650      	mov	r0, sl
 80126e2:	4689      	mov	r9, r1
 80126e4:	f7ed ff0e 	bl	8000504 <__aeabi_ui2d>
 80126e8:	4602      	mov	r2, r0
 80126ea:	460b      	mov	r3, r1
 80126ec:	4640      	mov	r0, r8
 80126ee:	4649      	mov	r1, r9
 80126f0:	f7ed fdcc 	bl	800028c <__adddf3>
 80126f4:	4680      	mov	r8, r0
 80126f6:	4689      	mov	r9, r1
 80126f8:	2e0f      	cmp	r6, #15
 80126fa:	dc38      	bgt.n	801276e <_strtod_l+0x44e>
 80126fc:	9b08      	ldr	r3, [sp, #32]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	f43f ae49 	beq.w	8012396 <_strtod_l+0x76>
 8012704:	dd24      	ble.n	8012750 <_strtod_l+0x430>
 8012706:	2b16      	cmp	r3, #22
 8012708:	dc0b      	bgt.n	8012722 <_strtod_l+0x402>
 801270a:	4968      	ldr	r1, [pc, #416]	; (80128ac <_strtod_l+0x58c>)
 801270c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012714:	4642      	mov	r2, r8
 8012716:	464b      	mov	r3, r9
 8012718:	f7ed ff6e 	bl	80005f8 <__aeabi_dmul>
 801271c:	4680      	mov	r8, r0
 801271e:	4689      	mov	r9, r1
 8012720:	e639      	b.n	8012396 <_strtod_l+0x76>
 8012722:	9a08      	ldr	r2, [sp, #32]
 8012724:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8012728:	4293      	cmp	r3, r2
 801272a:	db20      	blt.n	801276e <_strtod_l+0x44e>
 801272c:	4c5f      	ldr	r4, [pc, #380]	; (80128ac <_strtod_l+0x58c>)
 801272e:	f1c6 060f 	rsb	r6, r6, #15
 8012732:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8012736:	4642      	mov	r2, r8
 8012738:	464b      	mov	r3, r9
 801273a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801273e:	f7ed ff5b 	bl	80005f8 <__aeabi_dmul>
 8012742:	9b08      	ldr	r3, [sp, #32]
 8012744:	1b9e      	subs	r6, r3, r6
 8012746:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801274a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801274e:	e7e3      	b.n	8012718 <_strtod_l+0x3f8>
 8012750:	9b08      	ldr	r3, [sp, #32]
 8012752:	3316      	adds	r3, #22
 8012754:	db0b      	blt.n	801276e <_strtod_l+0x44e>
 8012756:	9b05      	ldr	r3, [sp, #20]
 8012758:	1bdf      	subs	r7, r3, r7
 801275a:	4b54      	ldr	r3, [pc, #336]	; (80128ac <_strtod_l+0x58c>)
 801275c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012764:	4640      	mov	r0, r8
 8012766:	4649      	mov	r1, r9
 8012768:	f7ee f870 	bl	800084c <__aeabi_ddiv>
 801276c:	e7d6      	b.n	801271c <_strtod_l+0x3fc>
 801276e:	9b08      	ldr	r3, [sp, #32]
 8012770:	1b75      	subs	r5, r6, r5
 8012772:	441d      	add	r5, r3
 8012774:	2d00      	cmp	r5, #0
 8012776:	dd70      	ble.n	801285a <_strtod_l+0x53a>
 8012778:	f015 030f 	ands.w	r3, r5, #15
 801277c:	d00a      	beq.n	8012794 <_strtod_l+0x474>
 801277e:	494b      	ldr	r1, [pc, #300]	; (80128ac <_strtod_l+0x58c>)
 8012780:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012784:	4642      	mov	r2, r8
 8012786:	464b      	mov	r3, r9
 8012788:	e9d1 0100 	ldrd	r0, r1, [r1]
 801278c:	f7ed ff34 	bl	80005f8 <__aeabi_dmul>
 8012790:	4680      	mov	r8, r0
 8012792:	4689      	mov	r9, r1
 8012794:	f035 050f 	bics.w	r5, r5, #15
 8012798:	d04d      	beq.n	8012836 <_strtod_l+0x516>
 801279a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801279e:	dd22      	ble.n	80127e6 <_strtod_l+0x4c6>
 80127a0:	2500      	movs	r5, #0
 80127a2:	46ab      	mov	fp, r5
 80127a4:	9509      	str	r5, [sp, #36]	; 0x24
 80127a6:	9505      	str	r5, [sp, #20]
 80127a8:	2322      	movs	r3, #34	; 0x22
 80127aa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80128b4 <_strtod_l+0x594>
 80127ae:	6023      	str	r3, [r4, #0]
 80127b0:	f04f 0800 	mov.w	r8, #0
 80127b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	f43f aded 	beq.w	8012396 <_strtod_l+0x76>
 80127bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80127be:	4620      	mov	r0, r4
 80127c0:	f002 f998 	bl	8014af4 <_Bfree>
 80127c4:	9905      	ldr	r1, [sp, #20]
 80127c6:	4620      	mov	r0, r4
 80127c8:	f002 f994 	bl	8014af4 <_Bfree>
 80127cc:	4659      	mov	r1, fp
 80127ce:	4620      	mov	r0, r4
 80127d0:	f002 f990 	bl	8014af4 <_Bfree>
 80127d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80127d6:	4620      	mov	r0, r4
 80127d8:	f002 f98c 	bl	8014af4 <_Bfree>
 80127dc:	4629      	mov	r1, r5
 80127de:	4620      	mov	r0, r4
 80127e0:	f002 f988 	bl	8014af4 <_Bfree>
 80127e4:	e5d7      	b.n	8012396 <_strtod_l+0x76>
 80127e6:	4b32      	ldr	r3, [pc, #200]	; (80128b0 <_strtod_l+0x590>)
 80127e8:	9304      	str	r3, [sp, #16]
 80127ea:	2300      	movs	r3, #0
 80127ec:	112d      	asrs	r5, r5, #4
 80127ee:	4640      	mov	r0, r8
 80127f0:	4649      	mov	r1, r9
 80127f2:	469a      	mov	sl, r3
 80127f4:	2d01      	cmp	r5, #1
 80127f6:	dc21      	bgt.n	801283c <_strtod_l+0x51c>
 80127f8:	b10b      	cbz	r3, 80127fe <_strtod_l+0x4de>
 80127fa:	4680      	mov	r8, r0
 80127fc:	4689      	mov	r9, r1
 80127fe:	492c      	ldr	r1, [pc, #176]	; (80128b0 <_strtod_l+0x590>)
 8012800:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012804:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012808:	4642      	mov	r2, r8
 801280a:	464b      	mov	r3, r9
 801280c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012810:	f7ed fef2 	bl	80005f8 <__aeabi_dmul>
 8012814:	4b27      	ldr	r3, [pc, #156]	; (80128b4 <_strtod_l+0x594>)
 8012816:	460a      	mov	r2, r1
 8012818:	400b      	ands	r3, r1
 801281a:	4927      	ldr	r1, [pc, #156]	; (80128b8 <_strtod_l+0x598>)
 801281c:	428b      	cmp	r3, r1
 801281e:	4680      	mov	r8, r0
 8012820:	d8be      	bhi.n	80127a0 <_strtod_l+0x480>
 8012822:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012826:	428b      	cmp	r3, r1
 8012828:	bf86      	itte	hi
 801282a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80128bc <_strtod_l+0x59c>
 801282e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8012832:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012836:	2300      	movs	r3, #0
 8012838:	9304      	str	r3, [sp, #16]
 801283a:	e07b      	b.n	8012934 <_strtod_l+0x614>
 801283c:	07ea      	lsls	r2, r5, #31
 801283e:	d505      	bpl.n	801284c <_strtod_l+0x52c>
 8012840:	9b04      	ldr	r3, [sp, #16]
 8012842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012846:	f7ed fed7 	bl	80005f8 <__aeabi_dmul>
 801284a:	2301      	movs	r3, #1
 801284c:	9a04      	ldr	r2, [sp, #16]
 801284e:	3208      	adds	r2, #8
 8012850:	f10a 0a01 	add.w	sl, sl, #1
 8012854:	106d      	asrs	r5, r5, #1
 8012856:	9204      	str	r2, [sp, #16]
 8012858:	e7cc      	b.n	80127f4 <_strtod_l+0x4d4>
 801285a:	d0ec      	beq.n	8012836 <_strtod_l+0x516>
 801285c:	426d      	negs	r5, r5
 801285e:	f015 020f 	ands.w	r2, r5, #15
 8012862:	d00a      	beq.n	801287a <_strtod_l+0x55a>
 8012864:	4b11      	ldr	r3, [pc, #68]	; (80128ac <_strtod_l+0x58c>)
 8012866:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801286a:	4640      	mov	r0, r8
 801286c:	4649      	mov	r1, r9
 801286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012872:	f7ed ffeb 	bl	800084c <__aeabi_ddiv>
 8012876:	4680      	mov	r8, r0
 8012878:	4689      	mov	r9, r1
 801287a:	112d      	asrs	r5, r5, #4
 801287c:	d0db      	beq.n	8012836 <_strtod_l+0x516>
 801287e:	2d1f      	cmp	r5, #31
 8012880:	dd1e      	ble.n	80128c0 <_strtod_l+0x5a0>
 8012882:	2500      	movs	r5, #0
 8012884:	46ab      	mov	fp, r5
 8012886:	9509      	str	r5, [sp, #36]	; 0x24
 8012888:	9505      	str	r5, [sp, #20]
 801288a:	2322      	movs	r3, #34	; 0x22
 801288c:	f04f 0800 	mov.w	r8, #0
 8012890:	f04f 0900 	mov.w	r9, #0
 8012894:	6023      	str	r3, [r4, #0]
 8012896:	e78d      	b.n	80127b4 <_strtod_l+0x494>
 8012898:	080181a1 	.word	0x080181a1
 801289c:	080181e4 	.word	0x080181e4
 80128a0:	08018199 	.word	0x08018199
 80128a4:	0801832c 	.word	0x0801832c
 80128a8:	080185b7 	.word	0x080185b7
 80128ac:	080184a8 	.word	0x080184a8
 80128b0:	08018480 	.word	0x08018480
 80128b4:	7ff00000 	.word	0x7ff00000
 80128b8:	7ca00000 	.word	0x7ca00000
 80128bc:	7fefffff 	.word	0x7fefffff
 80128c0:	f015 0310 	ands.w	r3, r5, #16
 80128c4:	bf18      	it	ne
 80128c6:	236a      	movne	r3, #106	; 0x6a
 80128c8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8012c6c <_strtod_l+0x94c>
 80128cc:	9304      	str	r3, [sp, #16]
 80128ce:	4640      	mov	r0, r8
 80128d0:	4649      	mov	r1, r9
 80128d2:	2300      	movs	r3, #0
 80128d4:	07ea      	lsls	r2, r5, #31
 80128d6:	d504      	bpl.n	80128e2 <_strtod_l+0x5c2>
 80128d8:	e9da 2300 	ldrd	r2, r3, [sl]
 80128dc:	f7ed fe8c 	bl	80005f8 <__aeabi_dmul>
 80128e0:	2301      	movs	r3, #1
 80128e2:	106d      	asrs	r5, r5, #1
 80128e4:	f10a 0a08 	add.w	sl, sl, #8
 80128e8:	d1f4      	bne.n	80128d4 <_strtod_l+0x5b4>
 80128ea:	b10b      	cbz	r3, 80128f0 <_strtod_l+0x5d0>
 80128ec:	4680      	mov	r8, r0
 80128ee:	4689      	mov	r9, r1
 80128f0:	9b04      	ldr	r3, [sp, #16]
 80128f2:	b1bb      	cbz	r3, 8012924 <_strtod_l+0x604>
 80128f4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80128f8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	4649      	mov	r1, r9
 8012900:	dd10      	ble.n	8012924 <_strtod_l+0x604>
 8012902:	2b1f      	cmp	r3, #31
 8012904:	f340 811e 	ble.w	8012b44 <_strtod_l+0x824>
 8012908:	2b34      	cmp	r3, #52	; 0x34
 801290a:	bfde      	ittt	le
 801290c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8012910:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012914:	4093      	lslle	r3, r2
 8012916:	f04f 0800 	mov.w	r8, #0
 801291a:	bfcc      	ite	gt
 801291c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012920:	ea03 0901 	andle.w	r9, r3, r1
 8012924:	2200      	movs	r2, #0
 8012926:	2300      	movs	r3, #0
 8012928:	4640      	mov	r0, r8
 801292a:	4649      	mov	r1, r9
 801292c:	f7ee f8cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8012930:	2800      	cmp	r0, #0
 8012932:	d1a6      	bne.n	8012882 <_strtod_l+0x562>
 8012934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012936:	9300      	str	r3, [sp, #0]
 8012938:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801293a:	4633      	mov	r3, r6
 801293c:	465a      	mov	r2, fp
 801293e:	4620      	mov	r0, r4
 8012940:	f002 f940 	bl	8014bc4 <__s2b>
 8012944:	9009      	str	r0, [sp, #36]	; 0x24
 8012946:	2800      	cmp	r0, #0
 8012948:	f43f af2a 	beq.w	80127a0 <_strtod_l+0x480>
 801294c:	9a08      	ldr	r2, [sp, #32]
 801294e:	9b05      	ldr	r3, [sp, #20]
 8012950:	2a00      	cmp	r2, #0
 8012952:	eba3 0307 	sub.w	r3, r3, r7
 8012956:	bfa8      	it	ge
 8012958:	2300      	movge	r3, #0
 801295a:	930c      	str	r3, [sp, #48]	; 0x30
 801295c:	2500      	movs	r5, #0
 801295e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012962:	9312      	str	r3, [sp, #72]	; 0x48
 8012964:	46ab      	mov	fp, r5
 8012966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012968:	4620      	mov	r0, r4
 801296a:	6859      	ldr	r1, [r3, #4]
 801296c:	f002 f882 	bl	8014a74 <_Balloc>
 8012970:	9005      	str	r0, [sp, #20]
 8012972:	2800      	cmp	r0, #0
 8012974:	f43f af18 	beq.w	80127a8 <_strtod_l+0x488>
 8012978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801297a:	691a      	ldr	r2, [r3, #16]
 801297c:	3202      	adds	r2, #2
 801297e:	f103 010c 	add.w	r1, r3, #12
 8012982:	0092      	lsls	r2, r2, #2
 8012984:	300c      	adds	r0, #12
 8012986:	f000 fbb7 	bl	80130f8 <memcpy>
 801298a:	ec49 8b10 	vmov	d0, r8, r9
 801298e:	aa18      	add	r2, sp, #96	; 0x60
 8012990:	a917      	add	r1, sp, #92	; 0x5c
 8012992:	4620      	mov	r0, r4
 8012994:	f002 fc4a 	bl	801522c <__d2b>
 8012998:	ec49 8b18 	vmov	d8, r8, r9
 801299c:	9016      	str	r0, [sp, #88]	; 0x58
 801299e:	2800      	cmp	r0, #0
 80129a0:	f43f af02 	beq.w	80127a8 <_strtod_l+0x488>
 80129a4:	2101      	movs	r1, #1
 80129a6:	4620      	mov	r0, r4
 80129a8:	f002 f9a4 	bl	8014cf4 <__i2b>
 80129ac:	4683      	mov	fp, r0
 80129ae:	2800      	cmp	r0, #0
 80129b0:	f43f aefa 	beq.w	80127a8 <_strtod_l+0x488>
 80129b4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80129b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80129b8:	2e00      	cmp	r6, #0
 80129ba:	bfab      	itete	ge
 80129bc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80129be:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80129c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80129c2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80129c6:	bfac      	ite	ge
 80129c8:	eb06 0a03 	addge.w	sl, r6, r3
 80129cc:	1b9f      	sublt	r7, r3, r6
 80129ce:	9b04      	ldr	r3, [sp, #16]
 80129d0:	1af6      	subs	r6, r6, r3
 80129d2:	4416      	add	r6, r2
 80129d4:	4ba0      	ldr	r3, [pc, #640]	; (8012c58 <_strtod_l+0x938>)
 80129d6:	3e01      	subs	r6, #1
 80129d8:	429e      	cmp	r6, r3
 80129da:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80129de:	f280 80c4 	bge.w	8012b6a <_strtod_l+0x84a>
 80129e2:	1b9b      	subs	r3, r3, r6
 80129e4:	2b1f      	cmp	r3, #31
 80129e6:	eba2 0203 	sub.w	r2, r2, r3
 80129ea:	f04f 0101 	mov.w	r1, #1
 80129ee:	f300 80b0 	bgt.w	8012b52 <_strtod_l+0x832>
 80129f2:	fa01 f303 	lsl.w	r3, r1, r3
 80129f6:	930e      	str	r3, [sp, #56]	; 0x38
 80129f8:	2300      	movs	r3, #0
 80129fa:	930d      	str	r3, [sp, #52]	; 0x34
 80129fc:	eb0a 0602 	add.w	r6, sl, r2
 8012a00:	9b04      	ldr	r3, [sp, #16]
 8012a02:	45b2      	cmp	sl, r6
 8012a04:	4417      	add	r7, r2
 8012a06:	441f      	add	r7, r3
 8012a08:	4653      	mov	r3, sl
 8012a0a:	bfa8      	it	ge
 8012a0c:	4633      	movge	r3, r6
 8012a0e:	42bb      	cmp	r3, r7
 8012a10:	bfa8      	it	ge
 8012a12:	463b      	movge	r3, r7
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	bfc2      	ittt	gt
 8012a18:	1af6      	subgt	r6, r6, r3
 8012a1a:	1aff      	subgt	r7, r7, r3
 8012a1c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8012a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	dd17      	ble.n	8012a56 <_strtod_l+0x736>
 8012a26:	4659      	mov	r1, fp
 8012a28:	461a      	mov	r2, r3
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	f002 fa22 	bl	8014e74 <__pow5mult>
 8012a30:	4683      	mov	fp, r0
 8012a32:	2800      	cmp	r0, #0
 8012a34:	f43f aeb8 	beq.w	80127a8 <_strtod_l+0x488>
 8012a38:	4601      	mov	r1, r0
 8012a3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	f002 f96f 	bl	8014d20 <__multiply>
 8012a42:	900b      	str	r0, [sp, #44]	; 0x2c
 8012a44:	2800      	cmp	r0, #0
 8012a46:	f43f aeaf 	beq.w	80127a8 <_strtod_l+0x488>
 8012a4a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012a4c:	4620      	mov	r0, r4
 8012a4e:	f002 f851 	bl	8014af4 <_Bfree>
 8012a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a54:	9316      	str	r3, [sp, #88]	; 0x58
 8012a56:	2e00      	cmp	r6, #0
 8012a58:	f300 808c 	bgt.w	8012b74 <_strtod_l+0x854>
 8012a5c:	9b08      	ldr	r3, [sp, #32]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	dd08      	ble.n	8012a74 <_strtod_l+0x754>
 8012a62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a64:	9905      	ldr	r1, [sp, #20]
 8012a66:	4620      	mov	r0, r4
 8012a68:	f002 fa04 	bl	8014e74 <__pow5mult>
 8012a6c:	9005      	str	r0, [sp, #20]
 8012a6e:	2800      	cmp	r0, #0
 8012a70:	f43f ae9a 	beq.w	80127a8 <_strtod_l+0x488>
 8012a74:	2f00      	cmp	r7, #0
 8012a76:	dd08      	ble.n	8012a8a <_strtod_l+0x76a>
 8012a78:	9905      	ldr	r1, [sp, #20]
 8012a7a:	463a      	mov	r2, r7
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f002 fa53 	bl	8014f28 <__lshift>
 8012a82:	9005      	str	r0, [sp, #20]
 8012a84:	2800      	cmp	r0, #0
 8012a86:	f43f ae8f 	beq.w	80127a8 <_strtod_l+0x488>
 8012a8a:	f1ba 0f00 	cmp.w	sl, #0
 8012a8e:	dd08      	ble.n	8012aa2 <_strtod_l+0x782>
 8012a90:	4659      	mov	r1, fp
 8012a92:	4652      	mov	r2, sl
 8012a94:	4620      	mov	r0, r4
 8012a96:	f002 fa47 	bl	8014f28 <__lshift>
 8012a9a:	4683      	mov	fp, r0
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	f43f ae83 	beq.w	80127a8 <_strtod_l+0x488>
 8012aa2:	9a05      	ldr	r2, [sp, #20]
 8012aa4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012aa6:	4620      	mov	r0, r4
 8012aa8:	f002 fac6 	bl	8015038 <__mdiff>
 8012aac:	4605      	mov	r5, r0
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	f43f ae7a 	beq.w	80127a8 <_strtod_l+0x488>
 8012ab4:	68c3      	ldr	r3, [r0, #12]
 8012ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ab8:	2300      	movs	r3, #0
 8012aba:	60c3      	str	r3, [r0, #12]
 8012abc:	4659      	mov	r1, fp
 8012abe:	f002 fa9f 	bl	8015000 <__mcmp>
 8012ac2:	2800      	cmp	r0, #0
 8012ac4:	da60      	bge.n	8012b88 <_strtod_l+0x868>
 8012ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ac8:	ea53 0308 	orrs.w	r3, r3, r8
 8012acc:	f040 8084 	bne.w	8012bd8 <_strtod_l+0x8b8>
 8012ad0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d17f      	bne.n	8012bd8 <_strtod_l+0x8b8>
 8012ad8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012adc:	0d1b      	lsrs	r3, r3, #20
 8012ade:	051b      	lsls	r3, r3, #20
 8012ae0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012ae4:	d978      	bls.n	8012bd8 <_strtod_l+0x8b8>
 8012ae6:	696b      	ldr	r3, [r5, #20]
 8012ae8:	b913      	cbnz	r3, 8012af0 <_strtod_l+0x7d0>
 8012aea:	692b      	ldr	r3, [r5, #16]
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	dd73      	ble.n	8012bd8 <_strtod_l+0x8b8>
 8012af0:	4629      	mov	r1, r5
 8012af2:	2201      	movs	r2, #1
 8012af4:	4620      	mov	r0, r4
 8012af6:	f002 fa17 	bl	8014f28 <__lshift>
 8012afa:	4659      	mov	r1, fp
 8012afc:	4605      	mov	r5, r0
 8012afe:	f002 fa7f 	bl	8015000 <__mcmp>
 8012b02:	2800      	cmp	r0, #0
 8012b04:	dd68      	ble.n	8012bd8 <_strtod_l+0x8b8>
 8012b06:	9904      	ldr	r1, [sp, #16]
 8012b08:	4a54      	ldr	r2, [pc, #336]	; (8012c5c <_strtod_l+0x93c>)
 8012b0a:	464b      	mov	r3, r9
 8012b0c:	2900      	cmp	r1, #0
 8012b0e:	f000 8084 	beq.w	8012c1a <_strtod_l+0x8fa>
 8012b12:	ea02 0109 	and.w	r1, r2, r9
 8012b16:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012b1a:	dc7e      	bgt.n	8012c1a <_strtod_l+0x8fa>
 8012b1c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012b20:	f77f aeb3 	ble.w	801288a <_strtod_l+0x56a>
 8012b24:	4b4e      	ldr	r3, [pc, #312]	; (8012c60 <_strtod_l+0x940>)
 8012b26:	4640      	mov	r0, r8
 8012b28:	4649      	mov	r1, r9
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	f7ed fd64 	bl	80005f8 <__aeabi_dmul>
 8012b30:	4b4a      	ldr	r3, [pc, #296]	; (8012c5c <_strtod_l+0x93c>)
 8012b32:	400b      	ands	r3, r1
 8012b34:	4680      	mov	r8, r0
 8012b36:	4689      	mov	r9, r1
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	f47f ae3f 	bne.w	80127bc <_strtod_l+0x49c>
 8012b3e:	2322      	movs	r3, #34	; 0x22
 8012b40:	6023      	str	r3, [r4, #0]
 8012b42:	e63b      	b.n	80127bc <_strtod_l+0x49c>
 8012b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b48:	fa02 f303 	lsl.w	r3, r2, r3
 8012b4c:	ea03 0808 	and.w	r8, r3, r8
 8012b50:	e6e8      	b.n	8012924 <_strtod_l+0x604>
 8012b52:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012b56:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8012b5a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012b5e:	36e2      	adds	r6, #226	; 0xe2
 8012b60:	fa01 f306 	lsl.w	r3, r1, r6
 8012b64:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8012b68:	e748      	b.n	80129fc <_strtod_l+0x6dc>
 8012b6a:	2100      	movs	r1, #0
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8012b72:	e743      	b.n	80129fc <_strtod_l+0x6dc>
 8012b74:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012b76:	4632      	mov	r2, r6
 8012b78:	4620      	mov	r0, r4
 8012b7a:	f002 f9d5 	bl	8014f28 <__lshift>
 8012b7e:	9016      	str	r0, [sp, #88]	; 0x58
 8012b80:	2800      	cmp	r0, #0
 8012b82:	f47f af6b 	bne.w	8012a5c <_strtod_l+0x73c>
 8012b86:	e60f      	b.n	80127a8 <_strtod_l+0x488>
 8012b88:	46ca      	mov	sl, r9
 8012b8a:	d171      	bne.n	8012c70 <_strtod_l+0x950>
 8012b8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012b8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012b92:	b352      	cbz	r2, 8012bea <_strtod_l+0x8ca>
 8012b94:	4a33      	ldr	r2, [pc, #204]	; (8012c64 <_strtod_l+0x944>)
 8012b96:	4293      	cmp	r3, r2
 8012b98:	d12a      	bne.n	8012bf0 <_strtod_l+0x8d0>
 8012b9a:	9b04      	ldr	r3, [sp, #16]
 8012b9c:	4641      	mov	r1, r8
 8012b9e:	b1fb      	cbz	r3, 8012be0 <_strtod_l+0x8c0>
 8012ba0:	4b2e      	ldr	r3, [pc, #184]	; (8012c5c <_strtod_l+0x93c>)
 8012ba2:	ea09 0303 	and.w	r3, r9, r3
 8012ba6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012baa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012bae:	d81a      	bhi.n	8012be6 <_strtod_l+0x8c6>
 8012bb0:	0d1b      	lsrs	r3, r3, #20
 8012bb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8012bba:	4299      	cmp	r1, r3
 8012bbc:	d118      	bne.n	8012bf0 <_strtod_l+0x8d0>
 8012bbe:	4b2a      	ldr	r3, [pc, #168]	; (8012c68 <_strtod_l+0x948>)
 8012bc0:	459a      	cmp	sl, r3
 8012bc2:	d102      	bne.n	8012bca <_strtod_l+0x8aa>
 8012bc4:	3101      	adds	r1, #1
 8012bc6:	f43f adef 	beq.w	80127a8 <_strtod_l+0x488>
 8012bca:	4b24      	ldr	r3, [pc, #144]	; (8012c5c <_strtod_l+0x93c>)
 8012bcc:	ea0a 0303 	and.w	r3, sl, r3
 8012bd0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8012bd4:	f04f 0800 	mov.w	r8, #0
 8012bd8:	9b04      	ldr	r3, [sp, #16]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d1a2      	bne.n	8012b24 <_strtod_l+0x804>
 8012bde:	e5ed      	b.n	80127bc <_strtod_l+0x49c>
 8012be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012be4:	e7e9      	b.n	8012bba <_strtod_l+0x89a>
 8012be6:	4613      	mov	r3, r2
 8012be8:	e7e7      	b.n	8012bba <_strtod_l+0x89a>
 8012bea:	ea53 0308 	orrs.w	r3, r3, r8
 8012bee:	d08a      	beq.n	8012b06 <_strtod_l+0x7e6>
 8012bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012bf2:	b1e3      	cbz	r3, 8012c2e <_strtod_l+0x90e>
 8012bf4:	ea13 0f0a 	tst.w	r3, sl
 8012bf8:	d0ee      	beq.n	8012bd8 <_strtod_l+0x8b8>
 8012bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012bfc:	9a04      	ldr	r2, [sp, #16]
 8012bfe:	4640      	mov	r0, r8
 8012c00:	4649      	mov	r1, r9
 8012c02:	b1c3      	cbz	r3, 8012c36 <_strtod_l+0x916>
 8012c04:	f7ff fb70 	bl	80122e8 <sulp>
 8012c08:	4602      	mov	r2, r0
 8012c0a:	460b      	mov	r3, r1
 8012c0c:	ec51 0b18 	vmov	r0, r1, d8
 8012c10:	f7ed fb3c 	bl	800028c <__adddf3>
 8012c14:	4680      	mov	r8, r0
 8012c16:	4689      	mov	r9, r1
 8012c18:	e7de      	b.n	8012bd8 <_strtod_l+0x8b8>
 8012c1a:	4013      	ands	r3, r2
 8012c1c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012c20:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012c24:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012c28:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012c2c:	e7d4      	b.n	8012bd8 <_strtod_l+0x8b8>
 8012c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c30:	ea13 0f08 	tst.w	r3, r8
 8012c34:	e7e0      	b.n	8012bf8 <_strtod_l+0x8d8>
 8012c36:	f7ff fb57 	bl	80122e8 <sulp>
 8012c3a:	4602      	mov	r2, r0
 8012c3c:	460b      	mov	r3, r1
 8012c3e:	ec51 0b18 	vmov	r0, r1, d8
 8012c42:	f7ed fb21 	bl	8000288 <__aeabi_dsub>
 8012c46:	2200      	movs	r2, #0
 8012c48:	2300      	movs	r3, #0
 8012c4a:	4680      	mov	r8, r0
 8012c4c:	4689      	mov	r9, r1
 8012c4e:	f7ed ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c52:	2800      	cmp	r0, #0
 8012c54:	d0c0      	beq.n	8012bd8 <_strtod_l+0x8b8>
 8012c56:	e618      	b.n	801288a <_strtod_l+0x56a>
 8012c58:	fffffc02 	.word	0xfffffc02
 8012c5c:	7ff00000 	.word	0x7ff00000
 8012c60:	39500000 	.word	0x39500000
 8012c64:	000fffff 	.word	0x000fffff
 8012c68:	7fefffff 	.word	0x7fefffff
 8012c6c:	080181f8 	.word	0x080181f8
 8012c70:	4659      	mov	r1, fp
 8012c72:	4628      	mov	r0, r5
 8012c74:	f002 fb34 	bl	80152e0 <__ratio>
 8012c78:	ec57 6b10 	vmov	r6, r7, d0
 8012c7c:	ee10 0a10 	vmov	r0, s0
 8012c80:	2200      	movs	r2, #0
 8012c82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012c86:	4639      	mov	r1, r7
 8012c88:	f7ed ff32 	bl	8000af0 <__aeabi_dcmple>
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	d071      	beq.n	8012d74 <_strtod_l+0xa54>
 8012c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d17c      	bne.n	8012d90 <_strtod_l+0xa70>
 8012c96:	f1b8 0f00 	cmp.w	r8, #0
 8012c9a:	d15a      	bne.n	8012d52 <_strtod_l+0xa32>
 8012c9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d15d      	bne.n	8012d60 <_strtod_l+0xa40>
 8012ca4:	4b90      	ldr	r3, [pc, #576]	; (8012ee8 <_strtod_l+0xbc8>)
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	4630      	mov	r0, r6
 8012caa:	4639      	mov	r1, r7
 8012cac:	f7ed ff16 	bl	8000adc <__aeabi_dcmplt>
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	d15c      	bne.n	8012d6e <_strtod_l+0xa4e>
 8012cb4:	4630      	mov	r0, r6
 8012cb6:	4639      	mov	r1, r7
 8012cb8:	4b8c      	ldr	r3, [pc, #560]	; (8012eec <_strtod_l+0xbcc>)
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f7ed fc9c 	bl	80005f8 <__aeabi_dmul>
 8012cc0:	4606      	mov	r6, r0
 8012cc2:	460f      	mov	r7, r1
 8012cc4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012cc8:	9606      	str	r6, [sp, #24]
 8012cca:	9307      	str	r3, [sp, #28]
 8012ccc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012cd0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012cd4:	4b86      	ldr	r3, [pc, #536]	; (8012ef0 <_strtod_l+0xbd0>)
 8012cd6:	ea0a 0303 	and.w	r3, sl, r3
 8012cda:	930d      	str	r3, [sp, #52]	; 0x34
 8012cdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012cde:	4b85      	ldr	r3, [pc, #532]	; (8012ef4 <_strtod_l+0xbd4>)
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	f040 8090 	bne.w	8012e06 <_strtod_l+0xae6>
 8012ce6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8012cea:	ec49 8b10 	vmov	d0, r8, r9
 8012cee:	f002 fa2d 	bl	801514c <__ulp>
 8012cf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012cf6:	ec51 0b10 	vmov	r0, r1, d0
 8012cfa:	f7ed fc7d 	bl	80005f8 <__aeabi_dmul>
 8012cfe:	4642      	mov	r2, r8
 8012d00:	464b      	mov	r3, r9
 8012d02:	f7ed fac3 	bl	800028c <__adddf3>
 8012d06:	460b      	mov	r3, r1
 8012d08:	4979      	ldr	r1, [pc, #484]	; (8012ef0 <_strtod_l+0xbd0>)
 8012d0a:	4a7b      	ldr	r2, [pc, #492]	; (8012ef8 <_strtod_l+0xbd8>)
 8012d0c:	4019      	ands	r1, r3
 8012d0e:	4291      	cmp	r1, r2
 8012d10:	4680      	mov	r8, r0
 8012d12:	d944      	bls.n	8012d9e <_strtod_l+0xa7e>
 8012d14:	ee18 2a90 	vmov	r2, s17
 8012d18:	4b78      	ldr	r3, [pc, #480]	; (8012efc <_strtod_l+0xbdc>)
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d104      	bne.n	8012d28 <_strtod_l+0xa08>
 8012d1e:	ee18 3a10 	vmov	r3, s16
 8012d22:	3301      	adds	r3, #1
 8012d24:	f43f ad40 	beq.w	80127a8 <_strtod_l+0x488>
 8012d28:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8012efc <_strtod_l+0xbdc>
 8012d2c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012d30:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012d32:	4620      	mov	r0, r4
 8012d34:	f001 fede 	bl	8014af4 <_Bfree>
 8012d38:	9905      	ldr	r1, [sp, #20]
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f001 feda 	bl	8014af4 <_Bfree>
 8012d40:	4659      	mov	r1, fp
 8012d42:	4620      	mov	r0, r4
 8012d44:	f001 fed6 	bl	8014af4 <_Bfree>
 8012d48:	4629      	mov	r1, r5
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	f001 fed2 	bl	8014af4 <_Bfree>
 8012d50:	e609      	b.n	8012966 <_strtod_l+0x646>
 8012d52:	f1b8 0f01 	cmp.w	r8, #1
 8012d56:	d103      	bne.n	8012d60 <_strtod_l+0xa40>
 8012d58:	f1b9 0f00 	cmp.w	r9, #0
 8012d5c:	f43f ad95 	beq.w	801288a <_strtod_l+0x56a>
 8012d60:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8012eb8 <_strtod_l+0xb98>
 8012d64:	4f60      	ldr	r7, [pc, #384]	; (8012ee8 <_strtod_l+0xbc8>)
 8012d66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012d6a:	2600      	movs	r6, #0
 8012d6c:	e7ae      	b.n	8012ccc <_strtod_l+0x9ac>
 8012d6e:	4f5f      	ldr	r7, [pc, #380]	; (8012eec <_strtod_l+0xbcc>)
 8012d70:	2600      	movs	r6, #0
 8012d72:	e7a7      	b.n	8012cc4 <_strtod_l+0x9a4>
 8012d74:	4b5d      	ldr	r3, [pc, #372]	; (8012eec <_strtod_l+0xbcc>)
 8012d76:	4630      	mov	r0, r6
 8012d78:	4639      	mov	r1, r7
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	f7ed fc3c 	bl	80005f8 <__aeabi_dmul>
 8012d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d82:	4606      	mov	r6, r0
 8012d84:	460f      	mov	r7, r1
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d09c      	beq.n	8012cc4 <_strtod_l+0x9a4>
 8012d8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012d8e:	e79d      	b.n	8012ccc <_strtod_l+0x9ac>
 8012d90:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8012ec0 <_strtod_l+0xba0>
 8012d94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012d98:	ec57 6b17 	vmov	r6, r7, d7
 8012d9c:	e796      	b.n	8012ccc <_strtod_l+0x9ac>
 8012d9e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8012da2:	9b04      	ldr	r3, [sp, #16]
 8012da4:	46ca      	mov	sl, r9
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d1c2      	bne.n	8012d30 <_strtod_l+0xa10>
 8012daa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012dae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012db0:	0d1b      	lsrs	r3, r3, #20
 8012db2:	051b      	lsls	r3, r3, #20
 8012db4:	429a      	cmp	r2, r3
 8012db6:	d1bb      	bne.n	8012d30 <_strtod_l+0xa10>
 8012db8:	4630      	mov	r0, r6
 8012dba:	4639      	mov	r1, r7
 8012dbc:	f7ed ff7c 	bl	8000cb8 <__aeabi_d2lz>
 8012dc0:	f7ed fbec 	bl	800059c <__aeabi_l2d>
 8012dc4:	4602      	mov	r2, r0
 8012dc6:	460b      	mov	r3, r1
 8012dc8:	4630      	mov	r0, r6
 8012dca:	4639      	mov	r1, r7
 8012dcc:	f7ed fa5c 	bl	8000288 <__aeabi_dsub>
 8012dd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012dd2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012dd6:	ea43 0308 	orr.w	r3, r3, r8
 8012dda:	4313      	orrs	r3, r2
 8012ddc:	4606      	mov	r6, r0
 8012dde:	460f      	mov	r7, r1
 8012de0:	d054      	beq.n	8012e8c <_strtod_l+0xb6c>
 8012de2:	a339      	add	r3, pc, #228	; (adr r3, 8012ec8 <_strtod_l+0xba8>)
 8012de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de8:	f7ed fe78 	bl	8000adc <__aeabi_dcmplt>
 8012dec:	2800      	cmp	r0, #0
 8012dee:	f47f ace5 	bne.w	80127bc <_strtod_l+0x49c>
 8012df2:	a337      	add	r3, pc, #220	; (adr r3, 8012ed0 <_strtod_l+0xbb0>)
 8012df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df8:	4630      	mov	r0, r6
 8012dfa:	4639      	mov	r1, r7
 8012dfc:	f7ed fe8c 	bl	8000b18 <__aeabi_dcmpgt>
 8012e00:	2800      	cmp	r0, #0
 8012e02:	d095      	beq.n	8012d30 <_strtod_l+0xa10>
 8012e04:	e4da      	b.n	80127bc <_strtod_l+0x49c>
 8012e06:	9b04      	ldr	r3, [sp, #16]
 8012e08:	b333      	cbz	r3, 8012e58 <_strtod_l+0xb38>
 8012e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012e10:	d822      	bhi.n	8012e58 <_strtod_l+0xb38>
 8012e12:	a331      	add	r3, pc, #196	; (adr r3, 8012ed8 <_strtod_l+0xbb8>)
 8012e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e18:	4630      	mov	r0, r6
 8012e1a:	4639      	mov	r1, r7
 8012e1c:	f7ed fe68 	bl	8000af0 <__aeabi_dcmple>
 8012e20:	b1a0      	cbz	r0, 8012e4c <_strtod_l+0xb2c>
 8012e22:	4639      	mov	r1, r7
 8012e24:	4630      	mov	r0, r6
 8012e26:	f7ed febf 	bl	8000ba8 <__aeabi_d2uiz>
 8012e2a:	2801      	cmp	r0, #1
 8012e2c:	bf38      	it	cc
 8012e2e:	2001      	movcc	r0, #1
 8012e30:	f7ed fb68 	bl	8000504 <__aeabi_ui2d>
 8012e34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e36:	4606      	mov	r6, r0
 8012e38:	460f      	mov	r7, r1
 8012e3a:	bb23      	cbnz	r3, 8012e86 <_strtod_l+0xb66>
 8012e3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e40:	9010      	str	r0, [sp, #64]	; 0x40
 8012e42:	9311      	str	r3, [sp, #68]	; 0x44
 8012e44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012e48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012e54:	1a9b      	subs	r3, r3, r2
 8012e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e58:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012e5c:	eeb0 0a48 	vmov.f32	s0, s16
 8012e60:	eef0 0a68 	vmov.f32	s1, s17
 8012e64:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012e68:	f002 f970 	bl	801514c <__ulp>
 8012e6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012e70:	ec53 2b10 	vmov	r2, r3, d0
 8012e74:	f7ed fbc0 	bl	80005f8 <__aeabi_dmul>
 8012e78:	ec53 2b18 	vmov	r2, r3, d8
 8012e7c:	f7ed fa06 	bl	800028c <__adddf3>
 8012e80:	4680      	mov	r8, r0
 8012e82:	4689      	mov	r9, r1
 8012e84:	e78d      	b.n	8012da2 <_strtod_l+0xa82>
 8012e86:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8012e8a:	e7db      	b.n	8012e44 <_strtod_l+0xb24>
 8012e8c:	a314      	add	r3, pc, #80	; (adr r3, 8012ee0 <_strtod_l+0xbc0>)
 8012e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e92:	f7ed fe23 	bl	8000adc <__aeabi_dcmplt>
 8012e96:	e7b3      	b.n	8012e00 <_strtod_l+0xae0>
 8012e98:	2300      	movs	r3, #0
 8012e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8012e9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012e9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ea0:	6013      	str	r3, [r2, #0]
 8012ea2:	f7ff ba7c 	b.w	801239e <_strtod_l+0x7e>
 8012ea6:	2a65      	cmp	r2, #101	; 0x65
 8012ea8:	f43f ab75 	beq.w	8012596 <_strtod_l+0x276>
 8012eac:	2a45      	cmp	r2, #69	; 0x45
 8012eae:	f43f ab72 	beq.w	8012596 <_strtod_l+0x276>
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	f7ff bbaa 	b.w	801260c <_strtod_l+0x2ec>
 8012eb8:	00000000 	.word	0x00000000
 8012ebc:	bff00000 	.word	0xbff00000
 8012ec0:	00000000 	.word	0x00000000
 8012ec4:	3ff00000 	.word	0x3ff00000
 8012ec8:	94a03595 	.word	0x94a03595
 8012ecc:	3fdfffff 	.word	0x3fdfffff
 8012ed0:	35afe535 	.word	0x35afe535
 8012ed4:	3fe00000 	.word	0x3fe00000
 8012ed8:	ffc00000 	.word	0xffc00000
 8012edc:	41dfffff 	.word	0x41dfffff
 8012ee0:	94a03595 	.word	0x94a03595
 8012ee4:	3fcfffff 	.word	0x3fcfffff
 8012ee8:	3ff00000 	.word	0x3ff00000
 8012eec:	3fe00000 	.word	0x3fe00000
 8012ef0:	7ff00000 	.word	0x7ff00000
 8012ef4:	7fe00000 	.word	0x7fe00000
 8012ef8:	7c9fffff 	.word	0x7c9fffff
 8012efc:	7fefffff 	.word	0x7fefffff

08012f00 <_strtod_r>:
 8012f00:	4b01      	ldr	r3, [pc, #4]	; (8012f08 <_strtod_r+0x8>)
 8012f02:	f7ff ba0d 	b.w	8012320 <_strtod_l>
 8012f06:	bf00      	nop
 8012f08:	20000034 	.word	0x20000034

08012f0c <_strtol_l.constprop.0>:
 8012f0c:	2b01      	cmp	r3, #1
 8012f0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f12:	d001      	beq.n	8012f18 <_strtol_l.constprop.0+0xc>
 8012f14:	2b24      	cmp	r3, #36	; 0x24
 8012f16:	d906      	bls.n	8012f26 <_strtol_l.constprop.0+0x1a>
 8012f18:	f000 f8c2 	bl	80130a0 <__errno>
 8012f1c:	2316      	movs	r3, #22
 8012f1e:	6003      	str	r3, [r0, #0]
 8012f20:	2000      	movs	r0, #0
 8012f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f26:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801300c <_strtol_l.constprop.0+0x100>
 8012f2a:	460d      	mov	r5, r1
 8012f2c:	462e      	mov	r6, r5
 8012f2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f32:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012f36:	f017 0708 	ands.w	r7, r7, #8
 8012f3a:	d1f7      	bne.n	8012f2c <_strtol_l.constprop.0+0x20>
 8012f3c:	2c2d      	cmp	r4, #45	; 0x2d
 8012f3e:	d132      	bne.n	8012fa6 <_strtol_l.constprop.0+0x9a>
 8012f40:	782c      	ldrb	r4, [r5, #0]
 8012f42:	2701      	movs	r7, #1
 8012f44:	1cb5      	adds	r5, r6, #2
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d05b      	beq.n	8013002 <_strtol_l.constprop.0+0xf6>
 8012f4a:	2b10      	cmp	r3, #16
 8012f4c:	d109      	bne.n	8012f62 <_strtol_l.constprop.0+0x56>
 8012f4e:	2c30      	cmp	r4, #48	; 0x30
 8012f50:	d107      	bne.n	8012f62 <_strtol_l.constprop.0+0x56>
 8012f52:	782c      	ldrb	r4, [r5, #0]
 8012f54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012f58:	2c58      	cmp	r4, #88	; 0x58
 8012f5a:	d14d      	bne.n	8012ff8 <_strtol_l.constprop.0+0xec>
 8012f5c:	786c      	ldrb	r4, [r5, #1]
 8012f5e:	2310      	movs	r3, #16
 8012f60:	3502      	adds	r5, #2
 8012f62:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012f66:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012f6a:	f04f 0e00 	mov.w	lr, #0
 8012f6e:	fbb8 f9f3 	udiv	r9, r8, r3
 8012f72:	4676      	mov	r6, lr
 8012f74:	fb03 8a19 	mls	sl, r3, r9, r8
 8012f78:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012f7c:	f1bc 0f09 	cmp.w	ip, #9
 8012f80:	d816      	bhi.n	8012fb0 <_strtol_l.constprop.0+0xa4>
 8012f82:	4664      	mov	r4, ip
 8012f84:	42a3      	cmp	r3, r4
 8012f86:	dd24      	ble.n	8012fd2 <_strtol_l.constprop.0+0xc6>
 8012f88:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8012f8c:	d008      	beq.n	8012fa0 <_strtol_l.constprop.0+0x94>
 8012f8e:	45b1      	cmp	r9, r6
 8012f90:	d31c      	bcc.n	8012fcc <_strtol_l.constprop.0+0xc0>
 8012f92:	d101      	bne.n	8012f98 <_strtol_l.constprop.0+0x8c>
 8012f94:	45a2      	cmp	sl, r4
 8012f96:	db19      	blt.n	8012fcc <_strtol_l.constprop.0+0xc0>
 8012f98:	fb06 4603 	mla	r6, r6, r3, r4
 8012f9c:	f04f 0e01 	mov.w	lr, #1
 8012fa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012fa4:	e7e8      	b.n	8012f78 <_strtol_l.constprop.0+0x6c>
 8012fa6:	2c2b      	cmp	r4, #43	; 0x2b
 8012fa8:	bf04      	itt	eq
 8012faa:	782c      	ldrbeq	r4, [r5, #0]
 8012fac:	1cb5      	addeq	r5, r6, #2
 8012fae:	e7ca      	b.n	8012f46 <_strtol_l.constprop.0+0x3a>
 8012fb0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012fb4:	f1bc 0f19 	cmp.w	ip, #25
 8012fb8:	d801      	bhi.n	8012fbe <_strtol_l.constprop.0+0xb2>
 8012fba:	3c37      	subs	r4, #55	; 0x37
 8012fbc:	e7e2      	b.n	8012f84 <_strtol_l.constprop.0+0x78>
 8012fbe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012fc2:	f1bc 0f19 	cmp.w	ip, #25
 8012fc6:	d804      	bhi.n	8012fd2 <_strtol_l.constprop.0+0xc6>
 8012fc8:	3c57      	subs	r4, #87	; 0x57
 8012fca:	e7db      	b.n	8012f84 <_strtol_l.constprop.0+0x78>
 8012fcc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8012fd0:	e7e6      	b.n	8012fa0 <_strtol_l.constprop.0+0x94>
 8012fd2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8012fd6:	d105      	bne.n	8012fe4 <_strtol_l.constprop.0+0xd8>
 8012fd8:	2322      	movs	r3, #34	; 0x22
 8012fda:	6003      	str	r3, [r0, #0]
 8012fdc:	4646      	mov	r6, r8
 8012fde:	b942      	cbnz	r2, 8012ff2 <_strtol_l.constprop.0+0xe6>
 8012fe0:	4630      	mov	r0, r6
 8012fe2:	e79e      	b.n	8012f22 <_strtol_l.constprop.0+0x16>
 8012fe4:	b107      	cbz	r7, 8012fe8 <_strtol_l.constprop.0+0xdc>
 8012fe6:	4276      	negs	r6, r6
 8012fe8:	2a00      	cmp	r2, #0
 8012fea:	d0f9      	beq.n	8012fe0 <_strtol_l.constprop.0+0xd4>
 8012fec:	f1be 0f00 	cmp.w	lr, #0
 8012ff0:	d000      	beq.n	8012ff4 <_strtol_l.constprop.0+0xe8>
 8012ff2:	1e69      	subs	r1, r5, #1
 8012ff4:	6011      	str	r1, [r2, #0]
 8012ff6:	e7f3      	b.n	8012fe0 <_strtol_l.constprop.0+0xd4>
 8012ff8:	2430      	movs	r4, #48	; 0x30
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d1b1      	bne.n	8012f62 <_strtol_l.constprop.0+0x56>
 8012ffe:	2308      	movs	r3, #8
 8013000:	e7af      	b.n	8012f62 <_strtol_l.constprop.0+0x56>
 8013002:	2c30      	cmp	r4, #48	; 0x30
 8013004:	d0a5      	beq.n	8012f52 <_strtol_l.constprop.0+0x46>
 8013006:	230a      	movs	r3, #10
 8013008:	e7ab      	b.n	8012f62 <_strtol_l.constprop.0+0x56>
 801300a:	bf00      	nop
 801300c:	08018229 	.word	0x08018229

08013010 <_strtol_r>:
 8013010:	f7ff bf7c 	b.w	8012f0c <_strtol_l.constprop.0>

08013014 <strtol>:
 8013014:	4613      	mov	r3, r2
 8013016:	460a      	mov	r2, r1
 8013018:	4601      	mov	r1, r0
 801301a:	4802      	ldr	r0, [pc, #8]	; (8013024 <strtol+0x10>)
 801301c:	6800      	ldr	r0, [r0, #0]
 801301e:	f7ff bf75 	b.w	8012f0c <_strtol_l.constprop.0>
 8013022:	bf00      	nop
 8013024:	200001ec 	.word	0x200001ec

08013028 <_fwalk_sglue>:
 8013028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801302c:	4607      	mov	r7, r0
 801302e:	4688      	mov	r8, r1
 8013030:	4614      	mov	r4, r2
 8013032:	2600      	movs	r6, #0
 8013034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013038:	f1b9 0901 	subs.w	r9, r9, #1
 801303c:	d505      	bpl.n	801304a <_fwalk_sglue+0x22>
 801303e:	6824      	ldr	r4, [r4, #0]
 8013040:	2c00      	cmp	r4, #0
 8013042:	d1f7      	bne.n	8013034 <_fwalk_sglue+0xc>
 8013044:	4630      	mov	r0, r6
 8013046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801304a:	89ab      	ldrh	r3, [r5, #12]
 801304c:	2b01      	cmp	r3, #1
 801304e:	d907      	bls.n	8013060 <_fwalk_sglue+0x38>
 8013050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013054:	3301      	adds	r3, #1
 8013056:	d003      	beq.n	8013060 <_fwalk_sglue+0x38>
 8013058:	4629      	mov	r1, r5
 801305a:	4638      	mov	r0, r7
 801305c:	47c0      	blx	r8
 801305e:	4306      	orrs	r6, r0
 8013060:	3568      	adds	r5, #104	; 0x68
 8013062:	e7e9      	b.n	8013038 <_fwalk_sglue+0x10>

08013064 <strncmp>:
 8013064:	b510      	push	{r4, lr}
 8013066:	b16a      	cbz	r2, 8013084 <strncmp+0x20>
 8013068:	3901      	subs	r1, #1
 801306a:	1884      	adds	r4, r0, r2
 801306c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013070:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013074:	429a      	cmp	r2, r3
 8013076:	d103      	bne.n	8013080 <strncmp+0x1c>
 8013078:	42a0      	cmp	r0, r4
 801307a:	d001      	beq.n	8013080 <strncmp+0x1c>
 801307c:	2a00      	cmp	r2, #0
 801307e:	d1f5      	bne.n	801306c <strncmp+0x8>
 8013080:	1ad0      	subs	r0, r2, r3
 8013082:	bd10      	pop	{r4, pc}
 8013084:	4610      	mov	r0, r2
 8013086:	e7fc      	b.n	8013082 <strncmp+0x1e>

08013088 <memset>:
 8013088:	4402      	add	r2, r0
 801308a:	4603      	mov	r3, r0
 801308c:	4293      	cmp	r3, r2
 801308e:	d100      	bne.n	8013092 <memset+0xa>
 8013090:	4770      	bx	lr
 8013092:	f803 1b01 	strb.w	r1, [r3], #1
 8013096:	e7f9      	b.n	801308c <memset+0x4>

08013098 <_localeconv_r>:
 8013098:	4800      	ldr	r0, [pc, #0]	; (801309c <_localeconv_r+0x4>)
 801309a:	4770      	bx	lr
 801309c:	20000124 	.word	0x20000124

080130a0 <__errno>:
 80130a0:	4b01      	ldr	r3, [pc, #4]	; (80130a8 <__errno+0x8>)
 80130a2:	6818      	ldr	r0, [r3, #0]
 80130a4:	4770      	bx	lr
 80130a6:	bf00      	nop
 80130a8:	200001ec 	.word	0x200001ec

080130ac <__libc_init_array>:
 80130ac:	b570      	push	{r4, r5, r6, lr}
 80130ae:	4d0d      	ldr	r5, [pc, #52]	; (80130e4 <__libc_init_array+0x38>)
 80130b0:	4c0d      	ldr	r4, [pc, #52]	; (80130e8 <__libc_init_array+0x3c>)
 80130b2:	1b64      	subs	r4, r4, r5
 80130b4:	10a4      	asrs	r4, r4, #2
 80130b6:	2600      	movs	r6, #0
 80130b8:	42a6      	cmp	r6, r4
 80130ba:	d109      	bne.n	80130d0 <__libc_init_array+0x24>
 80130bc:	4d0b      	ldr	r5, [pc, #44]	; (80130ec <__libc_init_array+0x40>)
 80130be:	4c0c      	ldr	r4, [pc, #48]	; (80130f0 <__libc_init_array+0x44>)
 80130c0:	f004 fb48 	bl	8017754 <_init>
 80130c4:	1b64      	subs	r4, r4, r5
 80130c6:	10a4      	asrs	r4, r4, #2
 80130c8:	2600      	movs	r6, #0
 80130ca:	42a6      	cmp	r6, r4
 80130cc:	d105      	bne.n	80130da <__libc_init_array+0x2e>
 80130ce:	bd70      	pop	{r4, r5, r6, pc}
 80130d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80130d4:	4798      	blx	r3
 80130d6:	3601      	adds	r6, #1
 80130d8:	e7ee      	b.n	80130b8 <__libc_init_array+0xc>
 80130da:	f855 3b04 	ldr.w	r3, [r5], #4
 80130de:	4798      	blx	r3
 80130e0:	3601      	adds	r6, #1
 80130e2:	e7f2      	b.n	80130ca <__libc_init_array+0x1e>
 80130e4:	08018a38 	.word	0x08018a38
 80130e8:	08018a38 	.word	0x08018a38
 80130ec:	08018a38 	.word	0x08018a38
 80130f0:	08018a3c 	.word	0x08018a3c

080130f4 <__retarget_lock_acquire_recursive>:
 80130f4:	4770      	bx	lr

080130f6 <__retarget_lock_release_recursive>:
 80130f6:	4770      	bx	lr

080130f8 <memcpy>:
 80130f8:	440a      	add	r2, r1
 80130fa:	4291      	cmp	r1, r2
 80130fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013100:	d100      	bne.n	8013104 <memcpy+0xc>
 8013102:	4770      	bx	lr
 8013104:	b510      	push	{r4, lr}
 8013106:	f811 4b01 	ldrb.w	r4, [r1], #1
 801310a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801310e:	4291      	cmp	r1, r2
 8013110:	d1f9      	bne.n	8013106 <memcpy+0xe>
 8013112:	bd10      	pop	{r4, pc}
 8013114:	0000      	movs	r0, r0
	...

08013118 <nan>:
 8013118:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013120 <nan+0x8>
 801311c:	4770      	bx	lr
 801311e:	bf00      	nop
 8013120:	00000000 	.word	0x00000000
 8013124:	7ff80000 	.word	0x7ff80000

08013128 <nanf>:
 8013128:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013130 <nanf+0x8>
 801312c:	4770      	bx	lr
 801312e:	bf00      	nop
 8013130:	7fc00000 	.word	0x7fc00000

08013134 <quorem>:
 8013134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013138:	6903      	ldr	r3, [r0, #16]
 801313a:	690c      	ldr	r4, [r1, #16]
 801313c:	42a3      	cmp	r3, r4
 801313e:	4607      	mov	r7, r0
 8013140:	db7e      	blt.n	8013240 <quorem+0x10c>
 8013142:	3c01      	subs	r4, #1
 8013144:	f101 0814 	add.w	r8, r1, #20
 8013148:	f100 0514 	add.w	r5, r0, #20
 801314c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013150:	9301      	str	r3, [sp, #4]
 8013152:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013156:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801315a:	3301      	adds	r3, #1
 801315c:	429a      	cmp	r2, r3
 801315e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013162:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013166:	fbb2 f6f3 	udiv	r6, r2, r3
 801316a:	d331      	bcc.n	80131d0 <quorem+0x9c>
 801316c:	f04f 0e00 	mov.w	lr, #0
 8013170:	4640      	mov	r0, r8
 8013172:	46ac      	mov	ip, r5
 8013174:	46f2      	mov	sl, lr
 8013176:	f850 2b04 	ldr.w	r2, [r0], #4
 801317a:	b293      	uxth	r3, r2
 801317c:	fb06 e303 	mla	r3, r6, r3, lr
 8013180:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013184:	0c1a      	lsrs	r2, r3, #16
 8013186:	b29b      	uxth	r3, r3
 8013188:	ebaa 0303 	sub.w	r3, sl, r3
 801318c:	f8dc a000 	ldr.w	sl, [ip]
 8013190:	fa13 f38a 	uxtah	r3, r3, sl
 8013194:	fb06 220e 	mla	r2, r6, lr, r2
 8013198:	9300      	str	r3, [sp, #0]
 801319a:	9b00      	ldr	r3, [sp, #0]
 801319c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80131a0:	b292      	uxth	r2, r2
 80131a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80131a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80131aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80131ae:	4581      	cmp	r9, r0
 80131b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131b4:	f84c 3b04 	str.w	r3, [ip], #4
 80131b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80131bc:	d2db      	bcs.n	8013176 <quorem+0x42>
 80131be:	f855 300b 	ldr.w	r3, [r5, fp]
 80131c2:	b92b      	cbnz	r3, 80131d0 <quorem+0x9c>
 80131c4:	9b01      	ldr	r3, [sp, #4]
 80131c6:	3b04      	subs	r3, #4
 80131c8:	429d      	cmp	r5, r3
 80131ca:	461a      	mov	r2, r3
 80131cc:	d32c      	bcc.n	8013228 <quorem+0xf4>
 80131ce:	613c      	str	r4, [r7, #16]
 80131d0:	4638      	mov	r0, r7
 80131d2:	f001 ff15 	bl	8015000 <__mcmp>
 80131d6:	2800      	cmp	r0, #0
 80131d8:	db22      	blt.n	8013220 <quorem+0xec>
 80131da:	3601      	adds	r6, #1
 80131dc:	4629      	mov	r1, r5
 80131de:	2000      	movs	r0, #0
 80131e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80131e4:	f8d1 c000 	ldr.w	ip, [r1]
 80131e8:	b293      	uxth	r3, r2
 80131ea:	1ac3      	subs	r3, r0, r3
 80131ec:	0c12      	lsrs	r2, r2, #16
 80131ee:	fa13 f38c 	uxtah	r3, r3, ip
 80131f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80131f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80131fa:	b29b      	uxth	r3, r3
 80131fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013200:	45c1      	cmp	r9, r8
 8013202:	f841 3b04 	str.w	r3, [r1], #4
 8013206:	ea4f 4022 	mov.w	r0, r2, asr #16
 801320a:	d2e9      	bcs.n	80131e0 <quorem+0xac>
 801320c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013210:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013214:	b922      	cbnz	r2, 8013220 <quorem+0xec>
 8013216:	3b04      	subs	r3, #4
 8013218:	429d      	cmp	r5, r3
 801321a:	461a      	mov	r2, r3
 801321c:	d30a      	bcc.n	8013234 <quorem+0x100>
 801321e:	613c      	str	r4, [r7, #16]
 8013220:	4630      	mov	r0, r6
 8013222:	b003      	add	sp, #12
 8013224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013228:	6812      	ldr	r2, [r2, #0]
 801322a:	3b04      	subs	r3, #4
 801322c:	2a00      	cmp	r2, #0
 801322e:	d1ce      	bne.n	80131ce <quorem+0x9a>
 8013230:	3c01      	subs	r4, #1
 8013232:	e7c9      	b.n	80131c8 <quorem+0x94>
 8013234:	6812      	ldr	r2, [r2, #0]
 8013236:	3b04      	subs	r3, #4
 8013238:	2a00      	cmp	r2, #0
 801323a:	d1f0      	bne.n	801321e <quorem+0xea>
 801323c:	3c01      	subs	r4, #1
 801323e:	e7eb      	b.n	8013218 <quorem+0xe4>
 8013240:	2000      	movs	r0, #0
 8013242:	e7ee      	b.n	8013222 <quorem+0xee>
 8013244:	0000      	movs	r0, r0
	...

08013248 <_dtoa_r>:
 8013248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801324c:	ed2d 8b04 	vpush	{d8-d9}
 8013250:	69c5      	ldr	r5, [r0, #28]
 8013252:	b093      	sub	sp, #76	; 0x4c
 8013254:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013258:	ec57 6b10 	vmov	r6, r7, d0
 801325c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013260:	9107      	str	r1, [sp, #28]
 8013262:	4604      	mov	r4, r0
 8013264:	920a      	str	r2, [sp, #40]	; 0x28
 8013266:	930d      	str	r3, [sp, #52]	; 0x34
 8013268:	b975      	cbnz	r5, 8013288 <_dtoa_r+0x40>
 801326a:	2010      	movs	r0, #16
 801326c:	f001 fa8e 	bl	801478c <malloc>
 8013270:	4602      	mov	r2, r0
 8013272:	61e0      	str	r0, [r4, #28]
 8013274:	b920      	cbnz	r0, 8013280 <_dtoa_r+0x38>
 8013276:	4bae      	ldr	r3, [pc, #696]	; (8013530 <_dtoa_r+0x2e8>)
 8013278:	21ef      	movs	r1, #239	; 0xef
 801327a:	48ae      	ldr	r0, [pc, #696]	; (8013534 <_dtoa_r+0x2ec>)
 801327c:	f002 f996 	bl	80155ac <__assert_func>
 8013280:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013284:	6005      	str	r5, [r0, #0]
 8013286:	60c5      	str	r5, [r0, #12]
 8013288:	69e3      	ldr	r3, [r4, #28]
 801328a:	6819      	ldr	r1, [r3, #0]
 801328c:	b151      	cbz	r1, 80132a4 <_dtoa_r+0x5c>
 801328e:	685a      	ldr	r2, [r3, #4]
 8013290:	604a      	str	r2, [r1, #4]
 8013292:	2301      	movs	r3, #1
 8013294:	4093      	lsls	r3, r2
 8013296:	608b      	str	r3, [r1, #8]
 8013298:	4620      	mov	r0, r4
 801329a:	f001 fc2b 	bl	8014af4 <_Bfree>
 801329e:	69e3      	ldr	r3, [r4, #28]
 80132a0:	2200      	movs	r2, #0
 80132a2:	601a      	str	r2, [r3, #0]
 80132a4:	1e3b      	subs	r3, r7, #0
 80132a6:	bfbb      	ittet	lt
 80132a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80132ac:	9303      	strlt	r3, [sp, #12]
 80132ae:	2300      	movge	r3, #0
 80132b0:	2201      	movlt	r2, #1
 80132b2:	bfac      	ite	ge
 80132b4:	f8c8 3000 	strge.w	r3, [r8]
 80132b8:	f8c8 2000 	strlt.w	r2, [r8]
 80132bc:	4b9e      	ldr	r3, [pc, #632]	; (8013538 <_dtoa_r+0x2f0>)
 80132be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80132c2:	ea33 0308 	bics.w	r3, r3, r8
 80132c6:	d11b      	bne.n	8013300 <_dtoa_r+0xb8>
 80132c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80132ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80132ce:	6013      	str	r3, [r2, #0]
 80132d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80132d4:	4333      	orrs	r3, r6
 80132d6:	f000 8593 	beq.w	8013e00 <_dtoa_r+0xbb8>
 80132da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132dc:	b963      	cbnz	r3, 80132f8 <_dtoa_r+0xb0>
 80132de:	4b97      	ldr	r3, [pc, #604]	; (801353c <_dtoa_r+0x2f4>)
 80132e0:	e027      	b.n	8013332 <_dtoa_r+0xea>
 80132e2:	4b97      	ldr	r3, [pc, #604]	; (8013540 <_dtoa_r+0x2f8>)
 80132e4:	9300      	str	r3, [sp, #0]
 80132e6:	3308      	adds	r3, #8
 80132e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80132ea:	6013      	str	r3, [r2, #0]
 80132ec:	9800      	ldr	r0, [sp, #0]
 80132ee:	b013      	add	sp, #76	; 0x4c
 80132f0:	ecbd 8b04 	vpop	{d8-d9}
 80132f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132f8:	4b90      	ldr	r3, [pc, #576]	; (801353c <_dtoa_r+0x2f4>)
 80132fa:	9300      	str	r3, [sp, #0]
 80132fc:	3303      	adds	r3, #3
 80132fe:	e7f3      	b.n	80132e8 <_dtoa_r+0xa0>
 8013300:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013304:	2200      	movs	r2, #0
 8013306:	ec51 0b17 	vmov	r0, r1, d7
 801330a:	eeb0 8a47 	vmov.f32	s16, s14
 801330e:	eef0 8a67 	vmov.f32	s17, s15
 8013312:	2300      	movs	r3, #0
 8013314:	f7ed fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8013318:	4681      	mov	r9, r0
 801331a:	b160      	cbz	r0, 8013336 <_dtoa_r+0xee>
 801331c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801331e:	2301      	movs	r3, #1
 8013320:	6013      	str	r3, [r2, #0]
 8013322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013324:	2b00      	cmp	r3, #0
 8013326:	f000 8568 	beq.w	8013dfa <_dtoa_r+0xbb2>
 801332a:	4b86      	ldr	r3, [pc, #536]	; (8013544 <_dtoa_r+0x2fc>)
 801332c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801332e:	6013      	str	r3, [r2, #0]
 8013330:	3b01      	subs	r3, #1
 8013332:	9300      	str	r3, [sp, #0]
 8013334:	e7da      	b.n	80132ec <_dtoa_r+0xa4>
 8013336:	aa10      	add	r2, sp, #64	; 0x40
 8013338:	a911      	add	r1, sp, #68	; 0x44
 801333a:	4620      	mov	r0, r4
 801333c:	eeb0 0a48 	vmov.f32	s0, s16
 8013340:	eef0 0a68 	vmov.f32	s1, s17
 8013344:	f001 ff72 	bl	801522c <__d2b>
 8013348:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801334c:	4682      	mov	sl, r0
 801334e:	2d00      	cmp	r5, #0
 8013350:	d07f      	beq.n	8013452 <_dtoa_r+0x20a>
 8013352:	ee18 3a90 	vmov	r3, s17
 8013356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801335a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801335e:	ec51 0b18 	vmov	r0, r1, d8
 8013362:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801336a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801336e:	4619      	mov	r1, r3
 8013370:	2200      	movs	r2, #0
 8013372:	4b75      	ldr	r3, [pc, #468]	; (8013548 <_dtoa_r+0x300>)
 8013374:	f7ec ff88 	bl	8000288 <__aeabi_dsub>
 8013378:	a367      	add	r3, pc, #412	; (adr r3, 8013518 <_dtoa_r+0x2d0>)
 801337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801337e:	f7ed f93b 	bl	80005f8 <__aeabi_dmul>
 8013382:	a367      	add	r3, pc, #412	; (adr r3, 8013520 <_dtoa_r+0x2d8>)
 8013384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013388:	f7ec ff80 	bl	800028c <__adddf3>
 801338c:	4606      	mov	r6, r0
 801338e:	4628      	mov	r0, r5
 8013390:	460f      	mov	r7, r1
 8013392:	f7ed f8c7 	bl	8000524 <__aeabi_i2d>
 8013396:	a364      	add	r3, pc, #400	; (adr r3, 8013528 <_dtoa_r+0x2e0>)
 8013398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801339c:	f7ed f92c 	bl	80005f8 <__aeabi_dmul>
 80133a0:	4602      	mov	r2, r0
 80133a2:	460b      	mov	r3, r1
 80133a4:	4630      	mov	r0, r6
 80133a6:	4639      	mov	r1, r7
 80133a8:	f7ec ff70 	bl	800028c <__adddf3>
 80133ac:	4606      	mov	r6, r0
 80133ae:	460f      	mov	r7, r1
 80133b0:	f7ed fbd2 	bl	8000b58 <__aeabi_d2iz>
 80133b4:	2200      	movs	r2, #0
 80133b6:	4683      	mov	fp, r0
 80133b8:	2300      	movs	r3, #0
 80133ba:	4630      	mov	r0, r6
 80133bc:	4639      	mov	r1, r7
 80133be:	f7ed fb8d 	bl	8000adc <__aeabi_dcmplt>
 80133c2:	b148      	cbz	r0, 80133d8 <_dtoa_r+0x190>
 80133c4:	4658      	mov	r0, fp
 80133c6:	f7ed f8ad 	bl	8000524 <__aeabi_i2d>
 80133ca:	4632      	mov	r2, r6
 80133cc:	463b      	mov	r3, r7
 80133ce:	f7ed fb7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80133d2:	b908      	cbnz	r0, 80133d8 <_dtoa_r+0x190>
 80133d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80133d8:	f1bb 0f16 	cmp.w	fp, #22
 80133dc:	d857      	bhi.n	801348e <_dtoa_r+0x246>
 80133de:	4b5b      	ldr	r3, [pc, #364]	; (801354c <_dtoa_r+0x304>)
 80133e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80133e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e8:	ec51 0b18 	vmov	r0, r1, d8
 80133ec:	f7ed fb76 	bl	8000adc <__aeabi_dcmplt>
 80133f0:	2800      	cmp	r0, #0
 80133f2:	d04e      	beq.n	8013492 <_dtoa_r+0x24a>
 80133f4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80133f8:	2300      	movs	r3, #0
 80133fa:	930c      	str	r3, [sp, #48]	; 0x30
 80133fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133fe:	1b5b      	subs	r3, r3, r5
 8013400:	1e5a      	subs	r2, r3, #1
 8013402:	bf45      	ittet	mi
 8013404:	f1c3 0301 	rsbmi	r3, r3, #1
 8013408:	9305      	strmi	r3, [sp, #20]
 801340a:	2300      	movpl	r3, #0
 801340c:	2300      	movmi	r3, #0
 801340e:	9206      	str	r2, [sp, #24]
 8013410:	bf54      	ite	pl
 8013412:	9305      	strpl	r3, [sp, #20]
 8013414:	9306      	strmi	r3, [sp, #24]
 8013416:	f1bb 0f00 	cmp.w	fp, #0
 801341a:	db3c      	blt.n	8013496 <_dtoa_r+0x24e>
 801341c:	9b06      	ldr	r3, [sp, #24]
 801341e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8013422:	445b      	add	r3, fp
 8013424:	9306      	str	r3, [sp, #24]
 8013426:	2300      	movs	r3, #0
 8013428:	9308      	str	r3, [sp, #32]
 801342a:	9b07      	ldr	r3, [sp, #28]
 801342c:	2b09      	cmp	r3, #9
 801342e:	d868      	bhi.n	8013502 <_dtoa_r+0x2ba>
 8013430:	2b05      	cmp	r3, #5
 8013432:	bfc4      	itt	gt
 8013434:	3b04      	subgt	r3, #4
 8013436:	9307      	strgt	r3, [sp, #28]
 8013438:	9b07      	ldr	r3, [sp, #28]
 801343a:	f1a3 0302 	sub.w	r3, r3, #2
 801343e:	bfcc      	ite	gt
 8013440:	2500      	movgt	r5, #0
 8013442:	2501      	movle	r5, #1
 8013444:	2b03      	cmp	r3, #3
 8013446:	f200 8085 	bhi.w	8013554 <_dtoa_r+0x30c>
 801344a:	e8df f003 	tbb	[pc, r3]
 801344e:	3b2e      	.short	0x3b2e
 8013450:	5839      	.short	0x5839
 8013452:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013456:	441d      	add	r5, r3
 8013458:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801345c:	2b20      	cmp	r3, #32
 801345e:	bfc1      	itttt	gt
 8013460:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013464:	fa08 f803 	lslgt.w	r8, r8, r3
 8013468:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801346c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013470:	bfd6      	itet	le
 8013472:	f1c3 0320 	rsble	r3, r3, #32
 8013476:	ea48 0003 	orrgt.w	r0, r8, r3
 801347a:	fa06 f003 	lslle.w	r0, r6, r3
 801347e:	f7ed f841 	bl	8000504 <__aeabi_ui2d>
 8013482:	2201      	movs	r2, #1
 8013484:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013488:	3d01      	subs	r5, #1
 801348a:	920e      	str	r2, [sp, #56]	; 0x38
 801348c:	e76f      	b.n	801336e <_dtoa_r+0x126>
 801348e:	2301      	movs	r3, #1
 8013490:	e7b3      	b.n	80133fa <_dtoa_r+0x1b2>
 8013492:	900c      	str	r0, [sp, #48]	; 0x30
 8013494:	e7b2      	b.n	80133fc <_dtoa_r+0x1b4>
 8013496:	9b05      	ldr	r3, [sp, #20]
 8013498:	eba3 030b 	sub.w	r3, r3, fp
 801349c:	9305      	str	r3, [sp, #20]
 801349e:	f1cb 0300 	rsb	r3, fp, #0
 80134a2:	9308      	str	r3, [sp, #32]
 80134a4:	2300      	movs	r3, #0
 80134a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80134a8:	e7bf      	b.n	801342a <_dtoa_r+0x1e2>
 80134aa:	2300      	movs	r3, #0
 80134ac:	9309      	str	r3, [sp, #36]	; 0x24
 80134ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	dc52      	bgt.n	801355a <_dtoa_r+0x312>
 80134b4:	2301      	movs	r3, #1
 80134b6:	9301      	str	r3, [sp, #4]
 80134b8:	9304      	str	r3, [sp, #16]
 80134ba:	461a      	mov	r2, r3
 80134bc:	920a      	str	r2, [sp, #40]	; 0x28
 80134be:	e00b      	b.n	80134d8 <_dtoa_r+0x290>
 80134c0:	2301      	movs	r3, #1
 80134c2:	e7f3      	b.n	80134ac <_dtoa_r+0x264>
 80134c4:	2300      	movs	r3, #0
 80134c6:	9309      	str	r3, [sp, #36]	; 0x24
 80134c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134ca:	445b      	add	r3, fp
 80134cc:	9301      	str	r3, [sp, #4]
 80134ce:	3301      	adds	r3, #1
 80134d0:	2b01      	cmp	r3, #1
 80134d2:	9304      	str	r3, [sp, #16]
 80134d4:	bfb8      	it	lt
 80134d6:	2301      	movlt	r3, #1
 80134d8:	69e0      	ldr	r0, [r4, #28]
 80134da:	2100      	movs	r1, #0
 80134dc:	2204      	movs	r2, #4
 80134de:	f102 0614 	add.w	r6, r2, #20
 80134e2:	429e      	cmp	r6, r3
 80134e4:	d93d      	bls.n	8013562 <_dtoa_r+0x31a>
 80134e6:	6041      	str	r1, [r0, #4]
 80134e8:	4620      	mov	r0, r4
 80134ea:	f001 fac3 	bl	8014a74 <_Balloc>
 80134ee:	9000      	str	r0, [sp, #0]
 80134f0:	2800      	cmp	r0, #0
 80134f2:	d139      	bne.n	8013568 <_dtoa_r+0x320>
 80134f4:	4b16      	ldr	r3, [pc, #88]	; (8013550 <_dtoa_r+0x308>)
 80134f6:	4602      	mov	r2, r0
 80134f8:	f240 11af 	movw	r1, #431	; 0x1af
 80134fc:	e6bd      	b.n	801327a <_dtoa_r+0x32>
 80134fe:	2301      	movs	r3, #1
 8013500:	e7e1      	b.n	80134c6 <_dtoa_r+0x27e>
 8013502:	2501      	movs	r5, #1
 8013504:	2300      	movs	r3, #0
 8013506:	9307      	str	r3, [sp, #28]
 8013508:	9509      	str	r5, [sp, #36]	; 0x24
 801350a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801350e:	9301      	str	r3, [sp, #4]
 8013510:	9304      	str	r3, [sp, #16]
 8013512:	2200      	movs	r2, #0
 8013514:	2312      	movs	r3, #18
 8013516:	e7d1      	b.n	80134bc <_dtoa_r+0x274>
 8013518:	636f4361 	.word	0x636f4361
 801351c:	3fd287a7 	.word	0x3fd287a7
 8013520:	8b60c8b3 	.word	0x8b60c8b3
 8013524:	3fc68a28 	.word	0x3fc68a28
 8013528:	509f79fb 	.word	0x509f79fb
 801352c:	3fd34413 	.word	0x3fd34413
 8013530:	08018336 	.word	0x08018336
 8013534:	0801834d 	.word	0x0801834d
 8013538:	7ff00000 	.word	0x7ff00000
 801353c:	08018332 	.word	0x08018332
 8013540:	08018329 	.word	0x08018329
 8013544:	080181a5 	.word	0x080181a5
 8013548:	3ff80000 	.word	0x3ff80000
 801354c:	080184a8 	.word	0x080184a8
 8013550:	080183a5 	.word	0x080183a5
 8013554:	2301      	movs	r3, #1
 8013556:	9309      	str	r3, [sp, #36]	; 0x24
 8013558:	e7d7      	b.n	801350a <_dtoa_r+0x2c2>
 801355a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801355c:	9301      	str	r3, [sp, #4]
 801355e:	9304      	str	r3, [sp, #16]
 8013560:	e7ba      	b.n	80134d8 <_dtoa_r+0x290>
 8013562:	3101      	adds	r1, #1
 8013564:	0052      	lsls	r2, r2, #1
 8013566:	e7ba      	b.n	80134de <_dtoa_r+0x296>
 8013568:	69e3      	ldr	r3, [r4, #28]
 801356a:	9a00      	ldr	r2, [sp, #0]
 801356c:	601a      	str	r2, [r3, #0]
 801356e:	9b04      	ldr	r3, [sp, #16]
 8013570:	2b0e      	cmp	r3, #14
 8013572:	f200 80a8 	bhi.w	80136c6 <_dtoa_r+0x47e>
 8013576:	2d00      	cmp	r5, #0
 8013578:	f000 80a5 	beq.w	80136c6 <_dtoa_r+0x47e>
 801357c:	f1bb 0f00 	cmp.w	fp, #0
 8013580:	dd38      	ble.n	80135f4 <_dtoa_r+0x3ac>
 8013582:	4bc0      	ldr	r3, [pc, #768]	; (8013884 <_dtoa_r+0x63c>)
 8013584:	f00b 020f 	and.w	r2, fp, #15
 8013588:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801358c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013590:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013594:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013598:	d019      	beq.n	80135ce <_dtoa_r+0x386>
 801359a:	4bbb      	ldr	r3, [pc, #748]	; (8013888 <_dtoa_r+0x640>)
 801359c:	ec51 0b18 	vmov	r0, r1, d8
 80135a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80135a4:	f7ed f952 	bl	800084c <__aeabi_ddiv>
 80135a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135ac:	f008 080f 	and.w	r8, r8, #15
 80135b0:	2503      	movs	r5, #3
 80135b2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013888 <_dtoa_r+0x640>
 80135b6:	f1b8 0f00 	cmp.w	r8, #0
 80135ba:	d10a      	bne.n	80135d2 <_dtoa_r+0x38a>
 80135bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135c0:	4632      	mov	r2, r6
 80135c2:	463b      	mov	r3, r7
 80135c4:	f7ed f942 	bl	800084c <__aeabi_ddiv>
 80135c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135cc:	e02b      	b.n	8013626 <_dtoa_r+0x3de>
 80135ce:	2502      	movs	r5, #2
 80135d0:	e7ef      	b.n	80135b2 <_dtoa_r+0x36a>
 80135d2:	f018 0f01 	tst.w	r8, #1
 80135d6:	d008      	beq.n	80135ea <_dtoa_r+0x3a2>
 80135d8:	4630      	mov	r0, r6
 80135da:	4639      	mov	r1, r7
 80135dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80135e0:	f7ed f80a 	bl	80005f8 <__aeabi_dmul>
 80135e4:	3501      	adds	r5, #1
 80135e6:	4606      	mov	r6, r0
 80135e8:	460f      	mov	r7, r1
 80135ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80135ee:	f109 0908 	add.w	r9, r9, #8
 80135f2:	e7e0      	b.n	80135b6 <_dtoa_r+0x36e>
 80135f4:	f000 809f 	beq.w	8013736 <_dtoa_r+0x4ee>
 80135f8:	f1cb 0600 	rsb	r6, fp, #0
 80135fc:	4ba1      	ldr	r3, [pc, #644]	; (8013884 <_dtoa_r+0x63c>)
 80135fe:	4fa2      	ldr	r7, [pc, #648]	; (8013888 <_dtoa_r+0x640>)
 8013600:	f006 020f 	and.w	r2, r6, #15
 8013604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801360c:	ec51 0b18 	vmov	r0, r1, d8
 8013610:	f7ec fff2 	bl	80005f8 <__aeabi_dmul>
 8013614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013618:	1136      	asrs	r6, r6, #4
 801361a:	2300      	movs	r3, #0
 801361c:	2502      	movs	r5, #2
 801361e:	2e00      	cmp	r6, #0
 8013620:	d17e      	bne.n	8013720 <_dtoa_r+0x4d8>
 8013622:	2b00      	cmp	r3, #0
 8013624:	d1d0      	bne.n	80135c8 <_dtoa_r+0x380>
 8013626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013628:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801362c:	2b00      	cmp	r3, #0
 801362e:	f000 8084 	beq.w	801373a <_dtoa_r+0x4f2>
 8013632:	4b96      	ldr	r3, [pc, #600]	; (801388c <_dtoa_r+0x644>)
 8013634:	2200      	movs	r2, #0
 8013636:	4640      	mov	r0, r8
 8013638:	4649      	mov	r1, r9
 801363a:	f7ed fa4f 	bl	8000adc <__aeabi_dcmplt>
 801363e:	2800      	cmp	r0, #0
 8013640:	d07b      	beq.n	801373a <_dtoa_r+0x4f2>
 8013642:	9b04      	ldr	r3, [sp, #16]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d078      	beq.n	801373a <_dtoa_r+0x4f2>
 8013648:	9b01      	ldr	r3, [sp, #4]
 801364a:	2b00      	cmp	r3, #0
 801364c:	dd39      	ble.n	80136c2 <_dtoa_r+0x47a>
 801364e:	4b90      	ldr	r3, [pc, #576]	; (8013890 <_dtoa_r+0x648>)
 8013650:	2200      	movs	r2, #0
 8013652:	4640      	mov	r0, r8
 8013654:	4649      	mov	r1, r9
 8013656:	f7ec ffcf 	bl	80005f8 <__aeabi_dmul>
 801365a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801365e:	9e01      	ldr	r6, [sp, #4]
 8013660:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8013664:	3501      	adds	r5, #1
 8013666:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801366a:	4628      	mov	r0, r5
 801366c:	f7ec ff5a 	bl	8000524 <__aeabi_i2d>
 8013670:	4642      	mov	r2, r8
 8013672:	464b      	mov	r3, r9
 8013674:	f7ec ffc0 	bl	80005f8 <__aeabi_dmul>
 8013678:	4b86      	ldr	r3, [pc, #536]	; (8013894 <_dtoa_r+0x64c>)
 801367a:	2200      	movs	r2, #0
 801367c:	f7ec fe06 	bl	800028c <__adddf3>
 8013680:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013688:	9303      	str	r3, [sp, #12]
 801368a:	2e00      	cmp	r6, #0
 801368c:	d158      	bne.n	8013740 <_dtoa_r+0x4f8>
 801368e:	4b82      	ldr	r3, [pc, #520]	; (8013898 <_dtoa_r+0x650>)
 8013690:	2200      	movs	r2, #0
 8013692:	4640      	mov	r0, r8
 8013694:	4649      	mov	r1, r9
 8013696:	f7ec fdf7 	bl	8000288 <__aeabi_dsub>
 801369a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801369e:	4680      	mov	r8, r0
 80136a0:	4689      	mov	r9, r1
 80136a2:	f7ed fa39 	bl	8000b18 <__aeabi_dcmpgt>
 80136a6:	2800      	cmp	r0, #0
 80136a8:	f040 8296 	bne.w	8013bd8 <_dtoa_r+0x990>
 80136ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80136b0:	4640      	mov	r0, r8
 80136b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80136b6:	4649      	mov	r1, r9
 80136b8:	f7ed fa10 	bl	8000adc <__aeabi_dcmplt>
 80136bc:	2800      	cmp	r0, #0
 80136be:	f040 8289 	bne.w	8013bd4 <_dtoa_r+0x98c>
 80136c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80136c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	f2c0 814e 	blt.w	801396a <_dtoa_r+0x722>
 80136ce:	f1bb 0f0e 	cmp.w	fp, #14
 80136d2:	f300 814a 	bgt.w	801396a <_dtoa_r+0x722>
 80136d6:	4b6b      	ldr	r3, [pc, #428]	; (8013884 <_dtoa_r+0x63c>)
 80136d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80136dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80136e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	f280 80dc 	bge.w	80138a0 <_dtoa_r+0x658>
 80136e8:	9b04      	ldr	r3, [sp, #16]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	f300 80d8 	bgt.w	80138a0 <_dtoa_r+0x658>
 80136f0:	f040 826f 	bne.w	8013bd2 <_dtoa_r+0x98a>
 80136f4:	4b68      	ldr	r3, [pc, #416]	; (8013898 <_dtoa_r+0x650>)
 80136f6:	2200      	movs	r2, #0
 80136f8:	4640      	mov	r0, r8
 80136fa:	4649      	mov	r1, r9
 80136fc:	f7ec ff7c 	bl	80005f8 <__aeabi_dmul>
 8013700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013704:	f7ed f9fe 	bl	8000b04 <__aeabi_dcmpge>
 8013708:	9e04      	ldr	r6, [sp, #16]
 801370a:	4637      	mov	r7, r6
 801370c:	2800      	cmp	r0, #0
 801370e:	f040 8245 	bne.w	8013b9c <_dtoa_r+0x954>
 8013712:	9d00      	ldr	r5, [sp, #0]
 8013714:	2331      	movs	r3, #49	; 0x31
 8013716:	f805 3b01 	strb.w	r3, [r5], #1
 801371a:	f10b 0b01 	add.w	fp, fp, #1
 801371e:	e241      	b.n	8013ba4 <_dtoa_r+0x95c>
 8013720:	07f2      	lsls	r2, r6, #31
 8013722:	d505      	bpl.n	8013730 <_dtoa_r+0x4e8>
 8013724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013728:	f7ec ff66 	bl	80005f8 <__aeabi_dmul>
 801372c:	3501      	adds	r5, #1
 801372e:	2301      	movs	r3, #1
 8013730:	1076      	asrs	r6, r6, #1
 8013732:	3708      	adds	r7, #8
 8013734:	e773      	b.n	801361e <_dtoa_r+0x3d6>
 8013736:	2502      	movs	r5, #2
 8013738:	e775      	b.n	8013626 <_dtoa_r+0x3de>
 801373a:	9e04      	ldr	r6, [sp, #16]
 801373c:	465f      	mov	r7, fp
 801373e:	e792      	b.n	8013666 <_dtoa_r+0x41e>
 8013740:	9900      	ldr	r1, [sp, #0]
 8013742:	4b50      	ldr	r3, [pc, #320]	; (8013884 <_dtoa_r+0x63c>)
 8013744:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013748:	4431      	add	r1, r6
 801374a:	9102      	str	r1, [sp, #8]
 801374c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801374e:	eeb0 9a47 	vmov.f32	s18, s14
 8013752:	eef0 9a67 	vmov.f32	s19, s15
 8013756:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801375a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801375e:	2900      	cmp	r1, #0
 8013760:	d044      	beq.n	80137ec <_dtoa_r+0x5a4>
 8013762:	494e      	ldr	r1, [pc, #312]	; (801389c <_dtoa_r+0x654>)
 8013764:	2000      	movs	r0, #0
 8013766:	f7ed f871 	bl	800084c <__aeabi_ddiv>
 801376a:	ec53 2b19 	vmov	r2, r3, d9
 801376e:	f7ec fd8b 	bl	8000288 <__aeabi_dsub>
 8013772:	9d00      	ldr	r5, [sp, #0]
 8013774:	ec41 0b19 	vmov	d9, r0, r1
 8013778:	4649      	mov	r1, r9
 801377a:	4640      	mov	r0, r8
 801377c:	f7ed f9ec 	bl	8000b58 <__aeabi_d2iz>
 8013780:	4606      	mov	r6, r0
 8013782:	f7ec fecf 	bl	8000524 <__aeabi_i2d>
 8013786:	4602      	mov	r2, r0
 8013788:	460b      	mov	r3, r1
 801378a:	4640      	mov	r0, r8
 801378c:	4649      	mov	r1, r9
 801378e:	f7ec fd7b 	bl	8000288 <__aeabi_dsub>
 8013792:	3630      	adds	r6, #48	; 0x30
 8013794:	f805 6b01 	strb.w	r6, [r5], #1
 8013798:	ec53 2b19 	vmov	r2, r3, d9
 801379c:	4680      	mov	r8, r0
 801379e:	4689      	mov	r9, r1
 80137a0:	f7ed f99c 	bl	8000adc <__aeabi_dcmplt>
 80137a4:	2800      	cmp	r0, #0
 80137a6:	d164      	bne.n	8013872 <_dtoa_r+0x62a>
 80137a8:	4642      	mov	r2, r8
 80137aa:	464b      	mov	r3, r9
 80137ac:	4937      	ldr	r1, [pc, #220]	; (801388c <_dtoa_r+0x644>)
 80137ae:	2000      	movs	r0, #0
 80137b0:	f7ec fd6a 	bl	8000288 <__aeabi_dsub>
 80137b4:	ec53 2b19 	vmov	r2, r3, d9
 80137b8:	f7ed f990 	bl	8000adc <__aeabi_dcmplt>
 80137bc:	2800      	cmp	r0, #0
 80137be:	f040 80b6 	bne.w	801392e <_dtoa_r+0x6e6>
 80137c2:	9b02      	ldr	r3, [sp, #8]
 80137c4:	429d      	cmp	r5, r3
 80137c6:	f43f af7c 	beq.w	80136c2 <_dtoa_r+0x47a>
 80137ca:	4b31      	ldr	r3, [pc, #196]	; (8013890 <_dtoa_r+0x648>)
 80137cc:	ec51 0b19 	vmov	r0, r1, d9
 80137d0:	2200      	movs	r2, #0
 80137d2:	f7ec ff11 	bl	80005f8 <__aeabi_dmul>
 80137d6:	4b2e      	ldr	r3, [pc, #184]	; (8013890 <_dtoa_r+0x648>)
 80137d8:	ec41 0b19 	vmov	d9, r0, r1
 80137dc:	2200      	movs	r2, #0
 80137de:	4640      	mov	r0, r8
 80137e0:	4649      	mov	r1, r9
 80137e2:	f7ec ff09 	bl	80005f8 <__aeabi_dmul>
 80137e6:	4680      	mov	r8, r0
 80137e8:	4689      	mov	r9, r1
 80137ea:	e7c5      	b.n	8013778 <_dtoa_r+0x530>
 80137ec:	ec51 0b17 	vmov	r0, r1, d7
 80137f0:	f7ec ff02 	bl	80005f8 <__aeabi_dmul>
 80137f4:	9b02      	ldr	r3, [sp, #8]
 80137f6:	9d00      	ldr	r5, [sp, #0]
 80137f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80137fa:	ec41 0b19 	vmov	d9, r0, r1
 80137fe:	4649      	mov	r1, r9
 8013800:	4640      	mov	r0, r8
 8013802:	f7ed f9a9 	bl	8000b58 <__aeabi_d2iz>
 8013806:	4606      	mov	r6, r0
 8013808:	f7ec fe8c 	bl	8000524 <__aeabi_i2d>
 801380c:	3630      	adds	r6, #48	; 0x30
 801380e:	4602      	mov	r2, r0
 8013810:	460b      	mov	r3, r1
 8013812:	4640      	mov	r0, r8
 8013814:	4649      	mov	r1, r9
 8013816:	f7ec fd37 	bl	8000288 <__aeabi_dsub>
 801381a:	f805 6b01 	strb.w	r6, [r5], #1
 801381e:	9b02      	ldr	r3, [sp, #8]
 8013820:	429d      	cmp	r5, r3
 8013822:	4680      	mov	r8, r0
 8013824:	4689      	mov	r9, r1
 8013826:	f04f 0200 	mov.w	r2, #0
 801382a:	d124      	bne.n	8013876 <_dtoa_r+0x62e>
 801382c:	4b1b      	ldr	r3, [pc, #108]	; (801389c <_dtoa_r+0x654>)
 801382e:	ec51 0b19 	vmov	r0, r1, d9
 8013832:	f7ec fd2b 	bl	800028c <__adddf3>
 8013836:	4602      	mov	r2, r0
 8013838:	460b      	mov	r3, r1
 801383a:	4640      	mov	r0, r8
 801383c:	4649      	mov	r1, r9
 801383e:	f7ed f96b 	bl	8000b18 <__aeabi_dcmpgt>
 8013842:	2800      	cmp	r0, #0
 8013844:	d173      	bne.n	801392e <_dtoa_r+0x6e6>
 8013846:	ec53 2b19 	vmov	r2, r3, d9
 801384a:	4914      	ldr	r1, [pc, #80]	; (801389c <_dtoa_r+0x654>)
 801384c:	2000      	movs	r0, #0
 801384e:	f7ec fd1b 	bl	8000288 <__aeabi_dsub>
 8013852:	4602      	mov	r2, r0
 8013854:	460b      	mov	r3, r1
 8013856:	4640      	mov	r0, r8
 8013858:	4649      	mov	r1, r9
 801385a:	f7ed f93f 	bl	8000adc <__aeabi_dcmplt>
 801385e:	2800      	cmp	r0, #0
 8013860:	f43f af2f 	beq.w	80136c2 <_dtoa_r+0x47a>
 8013864:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013866:	1e6b      	subs	r3, r5, #1
 8013868:	930f      	str	r3, [sp, #60]	; 0x3c
 801386a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801386e:	2b30      	cmp	r3, #48	; 0x30
 8013870:	d0f8      	beq.n	8013864 <_dtoa_r+0x61c>
 8013872:	46bb      	mov	fp, r7
 8013874:	e04a      	b.n	801390c <_dtoa_r+0x6c4>
 8013876:	4b06      	ldr	r3, [pc, #24]	; (8013890 <_dtoa_r+0x648>)
 8013878:	f7ec febe 	bl	80005f8 <__aeabi_dmul>
 801387c:	4680      	mov	r8, r0
 801387e:	4689      	mov	r9, r1
 8013880:	e7bd      	b.n	80137fe <_dtoa_r+0x5b6>
 8013882:	bf00      	nop
 8013884:	080184a8 	.word	0x080184a8
 8013888:	08018480 	.word	0x08018480
 801388c:	3ff00000 	.word	0x3ff00000
 8013890:	40240000 	.word	0x40240000
 8013894:	401c0000 	.word	0x401c0000
 8013898:	40140000 	.word	0x40140000
 801389c:	3fe00000 	.word	0x3fe00000
 80138a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80138a4:	9d00      	ldr	r5, [sp, #0]
 80138a6:	4642      	mov	r2, r8
 80138a8:	464b      	mov	r3, r9
 80138aa:	4630      	mov	r0, r6
 80138ac:	4639      	mov	r1, r7
 80138ae:	f7ec ffcd 	bl	800084c <__aeabi_ddiv>
 80138b2:	f7ed f951 	bl	8000b58 <__aeabi_d2iz>
 80138b6:	9001      	str	r0, [sp, #4]
 80138b8:	f7ec fe34 	bl	8000524 <__aeabi_i2d>
 80138bc:	4642      	mov	r2, r8
 80138be:	464b      	mov	r3, r9
 80138c0:	f7ec fe9a 	bl	80005f8 <__aeabi_dmul>
 80138c4:	4602      	mov	r2, r0
 80138c6:	460b      	mov	r3, r1
 80138c8:	4630      	mov	r0, r6
 80138ca:	4639      	mov	r1, r7
 80138cc:	f7ec fcdc 	bl	8000288 <__aeabi_dsub>
 80138d0:	9e01      	ldr	r6, [sp, #4]
 80138d2:	9f04      	ldr	r7, [sp, #16]
 80138d4:	3630      	adds	r6, #48	; 0x30
 80138d6:	f805 6b01 	strb.w	r6, [r5], #1
 80138da:	9e00      	ldr	r6, [sp, #0]
 80138dc:	1bae      	subs	r6, r5, r6
 80138de:	42b7      	cmp	r7, r6
 80138e0:	4602      	mov	r2, r0
 80138e2:	460b      	mov	r3, r1
 80138e4:	d134      	bne.n	8013950 <_dtoa_r+0x708>
 80138e6:	f7ec fcd1 	bl	800028c <__adddf3>
 80138ea:	4642      	mov	r2, r8
 80138ec:	464b      	mov	r3, r9
 80138ee:	4606      	mov	r6, r0
 80138f0:	460f      	mov	r7, r1
 80138f2:	f7ed f911 	bl	8000b18 <__aeabi_dcmpgt>
 80138f6:	b9c8      	cbnz	r0, 801392c <_dtoa_r+0x6e4>
 80138f8:	4642      	mov	r2, r8
 80138fa:	464b      	mov	r3, r9
 80138fc:	4630      	mov	r0, r6
 80138fe:	4639      	mov	r1, r7
 8013900:	f7ed f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8013904:	b110      	cbz	r0, 801390c <_dtoa_r+0x6c4>
 8013906:	9b01      	ldr	r3, [sp, #4]
 8013908:	07db      	lsls	r3, r3, #31
 801390a:	d40f      	bmi.n	801392c <_dtoa_r+0x6e4>
 801390c:	4651      	mov	r1, sl
 801390e:	4620      	mov	r0, r4
 8013910:	f001 f8f0 	bl	8014af4 <_Bfree>
 8013914:	2300      	movs	r3, #0
 8013916:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013918:	702b      	strb	r3, [r5, #0]
 801391a:	f10b 0301 	add.w	r3, fp, #1
 801391e:	6013      	str	r3, [r2, #0]
 8013920:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013922:	2b00      	cmp	r3, #0
 8013924:	f43f ace2 	beq.w	80132ec <_dtoa_r+0xa4>
 8013928:	601d      	str	r5, [r3, #0]
 801392a:	e4df      	b.n	80132ec <_dtoa_r+0xa4>
 801392c:	465f      	mov	r7, fp
 801392e:	462b      	mov	r3, r5
 8013930:	461d      	mov	r5, r3
 8013932:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013936:	2a39      	cmp	r2, #57	; 0x39
 8013938:	d106      	bne.n	8013948 <_dtoa_r+0x700>
 801393a:	9a00      	ldr	r2, [sp, #0]
 801393c:	429a      	cmp	r2, r3
 801393e:	d1f7      	bne.n	8013930 <_dtoa_r+0x6e8>
 8013940:	9900      	ldr	r1, [sp, #0]
 8013942:	2230      	movs	r2, #48	; 0x30
 8013944:	3701      	adds	r7, #1
 8013946:	700a      	strb	r2, [r1, #0]
 8013948:	781a      	ldrb	r2, [r3, #0]
 801394a:	3201      	adds	r2, #1
 801394c:	701a      	strb	r2, [r3, #0]
 801394e:	e790      	b.n	8013872 <_dtoa_r+0x62a>
 8013950:	4ba3      	ldr	r3, [pc, #652]	; (8013be0 <_dtoa_r+0x998>)
 8013952:	2200      	movs	r2, #0
 8013954:	f7ec fe50 	bl	80005f8 <__aeabi_dmul>
 8013958:	2200      	movs	r2, #0
 801395a:	2300      	movs	r3, #0
 801395c:	4606      	mov	r6, r0
 801395e:	460f      	mov	r7, r1
 8013960:	f7ed f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8013964:	2800      	cmp	r0, #0
 8013966:	d09e      	beq.n	80138a6 <_dtoa_r+0x65e>
 8013968:	e7d0      	b.n	801390c <_dtoa_r+0x6c4>
 801396a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801396c:	2a00      	cmp	r2, #0
 801396e:	f000 80ca 	beq.w	8013b06 <_dtoa_r+0x8be>
 8013972:	9a07      	ldr	r2, [sp, #28]
 8013974:	2a01      	cmp	r2, #1
 8013976:	f300 80ad 	bgt.w	8013ad4 <_dtoa_r+0x88c>
 801397a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801397c:	2a00      	cmp	r2, #0
 801397e:	f000 80a5 	beq.w	8013acc <_dtoa_r+0x884>
 8013982:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013986:	9e08      	ldr	r6, [sp, #32]
 8013988:	9d05      	ldr	r5, [sp, #20]
 801398a:	9a05      	ldr	r2, [sp, #20]
 801398c:	441a      	add	r2, r3
 801398e:	9205      	str	r2, [sp, #20]
 8013990:	9a06      	ldr	r2, [sp, #24]
 8013992:	2101      	movs	r1, #1
 8013994:	441a      	add	r2, r3
 8013996:	4620      	mov	r0, r4
 8013998:	9206      	str	r2, [sp, #24]
 801399a:	f001 f9ab 	bl	8014cf4 <__i2b>
 801399e:	4607      	mov	r7, r0
 80139a0:	b165      	cbz	r5, 80139bc <_dtoa_r+0x774>
 80139a2:	9b06      	ldr	r3, [sp, #24]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	dd09      	ble.n	80139bc <_dtoa_r+0x774>
 80139a8:	42ab      	cmp	r3, r5
 80139aa:	9a05      	ldr	r2, [sp, #20]
 80139ac:	bfa8      	it	ge
 80139ae:	462b      	movge	r3, r5
 80139b0:	1ad2      	subs	r2, r2, r3
 80139b2:	9205      	str	r2, [sp, #20]
 80139b4:	9a06      	ldr	r2, [sp, #24]
 80139b6:	1aed      	subs	r5, r5, r3
 80139b8:	1ad3      	subs	r3, r2, r3
 80139ba:	9306      	str	r3, [sp, #24]
 80139bc:	9b08      	ldr	r3, [sp, #32]
 80139be:	b1f3      	cbz	r3, 80139fe <_dtoa_r+0x7b6>
 80139c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	f000 80a3 	beq.w	8013b0e <_dtoa_r+0x8c6>
 80139c8:	2e00      	cmp	r6, #0
 80139ca:	dd10      	ble.n	80139ee <_dtoa_r+0x7a6>
 80139cc:	4639      	mov	r1, r7
 80139ce:	4632      	mov	r2, r6
 80139d0:	4620      	mov	r0, r4
 80139d2:	f001 fa4f 	bl	8014e74 <__pow5mult>
 80139d6:	4652      	mov	r2, sl
 80139d8:	4601      	mov	r1, r0
 80139da:	4607      	mov	r7, r0
 80139dc:	4620      	mov	r0, r4
 80139de:	f001 f99f 	bl	8014d20 <__multiply>
 80139e2:	4651      	mov	r1, sl
 80139e4:	4680      	mov	r8, r0
 80139e6:	4620      	mov	r0, r4
 80139e8:	f001 f884 	bl	8014af4 <_Bfree>
 80139ec:	46c2      	mov	sl, r8
 80139ee:	9b08      	ldr	r3, [sp, #32]
 80139f0:	1b9a      	subs	r2, r3, r6
 80139f2:	d004      	beq.n	80139fe <_dtoa_r+0x7b6>
 80139f4:	4651      	mov	r1, sl
 80139f6:	4620      	mov	r0, r4
 80139f8:	f001 fa3c 	bl	8014e74 <__pow5mult>
 80139fc:	4682      	mov	sl, r0
 80139fe:	2101      	movs	r1, #1
 8013a00:	4620      	mov	r0, r4
 8013a02:	f001 f977 	bl	8014cf4 <__i2b>
 8013a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	4606      	mov	r6, r0
 8013a0c:	f340 8081 	ble.w	8013b12 <_dtoa_r+0x8ca>
 8013a10:	461a      	mov	r2, r3
 8013a12:	4601      	mov	r1, r0
 8013a14:	4620      	mov	r0, r4
 8013a16:	f001 fa2d 	bl	8014e74 <__pow5mult>
 8013a1a:	9b07      	ldr	r3, [sp, #28]
 8013a1c:	2b01      	cmp	r3, #1
 8013a1e:	4606      	mov	r6, r0
 8013a20:	dd7a      	ble.n	8013b18 <_dtoa_r+0x8d0>
 8013a22:	f04f 0800 	mov.w	r8, #0
 8013a26:	6933      	ldr	r3, [r6, #16]
 8013a28:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013a2c:	6918      	ldr	r0, [r3, #16]
 8013a2e:	f001 f913 	bl	8014c58 <__hi0bits>
 8013a32:	f1c0 0020 	rsb	r0, r0, #32
 8013a36:	9b06      	ldr	r3, [sp, #24]
 8013a38:	4418      	add	r0, r3
 8013a3a:	f010 001f 	ands.w	r0, r0, #31
 8013a3e:	f000 8094 	beq.w	8013b6a <_dtoa_r+0x922>
 8013a42:	f1c0 0320 	rsb	r3, r0, #32
 8013a46:	2b04      	cmp	r3, #4
 8013a48:	f340 8085 	ble.w	8013b56 <_dtoa_r+0x90e>
 8013a4c:	9b05      	ldr	r3, [sp, #20]
 8013a4e:	f1c0 001c 	rsb	r0, r0, #28
 8013a52:	4403      	add	r3, r0
 8013a54:	9305      	str	r3, [sp, #20]
 8013a56:	9b06      	ldr	r3, [sp, #24]
 8013a58:	4403      	add	r3, r0
 8013a5a:	4405      	add	r5, r0
 8013a5c:	9306      	str	r3, [sp, #24]
 8013a5e:	9b05      	ldr	r3, [sp, #20]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	dd05      	ble.n	8013a70 <_dtoa_r+0x828>
 8013a64:	4651      	mov	r1, sl
 8013a66:	461a      	mov	r2, r3
 8013a68:	4620      	mov	r0, r4
 8013a6a:	f001 fa5d 	bl	8014f28 <__lshift>
 8013a6e:	4682      	mov	sl, r0
 8013a70:	9b06      	ldr	r3, [sp, #24]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	dd05      	ble.n	8013a82 <_dtoa_r+0x83a>
 8013a76:	4631      	mov	r1, r6
 8013a78:	461a      	mov	r2, r3
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	f001 fa54 	bl	8014f28 <__lshift>
 8013a80:	4606      	mov	r6, r0
 8013a82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d072      	beq.n	8013b6e <_dtoa_r+0x926>
 8013a88:	4631      	mov	r1, r6
 8013a8a:	4650      	mov	r0, sl
 8013a8c:	f001 fab8 	bl	8015000 <__mcmp>
 8013a90:	2800      	cmp	r0, #0
 8013a92:	da6c      	bge.n	8013b6e <_dtoa_r+0x926>
 8013a94:	2300      	movs	r3, #0
 8013a96:	4651      	mov	r1, sl
 8013a98:	220a      	movs	r2, #10
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	f001 f84c 	bl	8014b38 <__multadd>
 8013aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aa2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013aa6:	4682      	mov	sl, r0
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	f000 81b0 	beq.w	8013e0e <_dtoa_r+0xbc6>
 8013aae:	2300      	movs	r3, #0
 8013ab0:	4639      	mov	r1, r7
 8013ab2:	220a      	movs	r2, #10
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	f001 f83f 	bl	8014b38 <__multadd>
 8013aba:	9b01      	ldr	r3, [sp, #4]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	4607      	mov	r7, r0
 8013ac0:	f300 8096 	bgt.w	8013bf0 <_dtoa_r+0x9a8>
 8013ac4:	9b07      	ldr	r3, [sp, #28]
 8013ac6:	2b02      	cmp	r3, #2
 8013ac8:	dc59      	bgt.n	8013b7e <_dtoa_r+0x936>
 8013aca:	e091      	b.n	8013bf0 <_dtoa_r+0x9a8>
 8013acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013ace:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013ad2:	e758      	b.n	8013986 <_dtoa_r+0x73e>
 8013ad4:	9b04      	ldr	r3, [sp, #16]
 8013ad6:	1e5e      	subs	r6, r3, #1
 8013ad8:	9b08      	ldr	r3, [sp, #32]
 8013ada:	42b3      	cmp	r3, r6
 8013adc:	bfbf      	itttt	lt
 8013ade:	9b08      	ldrlt	r3, [sp, #32]
 8013ae0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013ae2:	9608      	strlt	r6, [sp, #32]
 8013ae4:	1af3      	sublt	r3, r6, r3
 8013ae6:	bfb4      	ite	lt
 8013ae8:	18d2      	addlt	r2, r2, r3
 8013aea:	1b9e      	subge	r6, r3, r6
 8013aec:	9b04      	ldr	r3, [sp, #16]
 8013aee:	bfbc      	itt	lt
 8013af0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013af2:	2600      	movlt	r6, #0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	bfb7      	itett	lt
 8013af8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013afc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013b00:	1a9d      	sublt	r5, r3, r2
 8013b02:	2300      	movlt	r3, #0
 8013b04:	e741      	b.n	801398a <_dtoa_r+0x742>
 8013b06:	9e08      	ldr	r6, [sp, #32]
 8013b08:	9d05      	ldr	r5, [sp, #20]
 8013b0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013b0c:	e748      	b.n	80139a0 <_dtoa_r+0x758>
 8013b0e:	9a08      	ldr	r2, [sp, #32]
 8013b10:	e770      	b.n	80139f4 <_dtoa_r+0x7ac>
 8013b12:	9b07      	ldr	r3, [sp, #28]
 8013b14:	2b01      	cmp	r3, #1
 8013b16:	dc19      	bgt.n	8013b4c <_dtoa_r+0x904>
 8013b18:	9b02      	ldr	r3, [sp, #8]
 8013b1a:	b9bb      	cbnz	r3, 8013b4c <_dtoa_r+0x904>
 8013b1c:	9b03      	ldr	r3, [sp, #12]
 8013b1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b22:	b99b      	cbnz	r3, 8013b4c <_dtoa_r+0x904>
 8013b24:	9b03      	ldr	r3, [sp, #12]
 8013b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013b2a:	0d1b      	lsrs	r3, r3, #20
 8013b2c:	051b      	lsls	r3, r3, #20
 8013b2e:	b183      	cbz	r3, 8013b52 <_dtoa_r+0x90a>
 8013b30:	9b05      	ldr	r3, [sp, #20]
 8013b32:	3301      	adds	r3, #1
 8013b34:	9305      	str	r3, [sp, #20]
 8013b36:	9b06      	ldr	r3, [sp, #24]
 8013b38:	3301      	adds	r3, #1
 8013b3a:	9306      	str	r3, [sp, #24]
 8013b3c:	f04f 0801 	mov.w	r8, #1
 8013b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	f47f af6f 	bne.w	8013a26 <_dtoa_r+0x7de>
 8013b48:	2001      	movs	r0, #1
 8013b4a:	e774      	b.n	8013a36 <_dtoa_r+0x7ee>
 8013b4c:	f04f 0800 	mov.w	r8, #0
 8013b50:	e7f6      	b.n	8013b40 <_dtoa_r+0x8f8>
 8013b52:	4698      	mov	r8, r3
 8013b54:	e7f4      	b.n	8013b40 <_dtoa_r+0x8f8>
 8013b56:	d082      	beq.n	8013a5e <_dtoa_r+0x816>
 8013b58:	9a05      	ldr	r2, [sp, #20]
 8013b5a:	331c      	adds	r3, #28
 8013b5c:	441a      	add	r2, r3
 8013b5e:	9205      	str	r2, [sp, #20]
 8013b60:	9a06      	ldr	r2, [sp, #24]
 8013b62:	441a      	add	r2, r3
 8013b64:	441d      	add	r5, r3
 8013b66:	9206      	str	r2, [sp, #24]
 8013b68:	e779      	b.n	8013a5e <_dtoa_r+0x816>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	e7f4      	b.n	8013b58 <_dtoa_r+0x910>
 8013b6e:	9b04      	ldr	r3, [sp, #16]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	dc37      	bgt.n	8013be4 <_dtoa_r+0x99c>
 8013b74:	9b07      	ldr	r3, [sp, #28]
 8013b76:	2b02      	cmp	r3, #2
 8013b78:	dd34      	ble.n	8013be4 <_dtoa_r+0x99c>
 8013b7a:	9b04      	ldr	r3, [sp, #16]
 8013b7c:	9301      	str	r3, [sp, #4]
 8013b7e:	9b01      	ldr	r3, [sp, #4]
 8013b80:	b963      	cbnz	r3, 8013b9c <_dtoa_r+0x954>
 8013b82:	4631      	mov	r1, r6
 8013b84:	2205      	movs	r2, #5
 8013b86:	4620      	mov	r0, r4
 8013b88:	f000 ffd6 	bl	8014b38 <__multadd>
 8013b8c:	4601      	mov	r1, r0
 8013b8e:	4606      	mov	r6, r0
 8013b90:	4650      	mov	r0, sl
 8013b92:	f001 fa35 	bl	8015000 <__mcmp>
 8013b96:	2800      	cmp	r0, #0
 8013b98:	f73f adbb 	bgt.w	8013712 <_dtoa_r+0x4ca>
 8013b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b9e:	9d00      	ldr	r5, [sp, #0]
 8013ba0:	ea6f 0b03 	mvn.w	fp, r3
 8013ba4:	f04f 0800 	mov.w	r8, #0
 8013ba8:	4631      	mov	r1, r6
 8013baa:	4620      	mov	r0, r4
 8013bac:	f000 ffa2 	bl	8014af4 <_Bfree>
 8013bb0:	2f00      	cmp	r7, #0
 8013bb2:	f43f aeab 	beq.w	801390c <_dtoa_r+0x6c4>
 8013bb6:	f1b8 0f00 	cmp.w	r8, #0
 8013bba:	d005      	beq.n	8013bc8 <_dtoa_r+0x980>
 8013bbc:	45b8      	cmp	r8, r7
 8013bbe:	d003      	beq.n	8013bc8 <_dtoa_r+0x980>
 8013bc0:	4641      	mov	r1, r8
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	f000 ff96 	bl	8014af4 <_Bfree>
 8013bc8:	4639      	mov	r1, r7
 8013bca:	4620      	mov	r0, r4
 8013bcc:	f000 ff92 	bl	8014af4 <_Bfree>
 8013bd0:	e69c      	b.n	801390c <_dtoa_r+0x6c4>
 8013bd2:	2600      	movs	r6, #0
 8013bd4:	4637      	mov	r7, r6
 8013bd6:	e7e1      	b.n	8013b9c <_dtoa_r+0x954>
 8013bd8:	46bb      	mov	fp, r7
 8013bda:	4637      	mov	r7, r6
 8013bdc:	e599      	b.n	8013712 <_dtoa_r+0x4ca>
 8013bde:	bf00      	nop
 8013be0:	40240000 	.word	0x40240000
 8013be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	f000 80c8 	beq.w	8013d7c <_dtoa_r+0xb34>
 8013bec:	9b04      	ldr	r3, [sp, #16]
 8013bee:	9301      	str	r3, [sp, #4]
 8013bf0:	2d00      	cmp	r5, #0
 8013bf2:	dd05      	ble.n	8013c00 <_dtoa_r+0x9b8>
 8013bf4:	4639      	mov	r1, r7
 8013bf6:	462a      	mov	r2, r5
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	f001 f995 	bl	8014f28 <__lshift>
 8013bfe:	4607      	mov	r7, r0
 8013c00:	f1b8 0f00 	cmp.w	r8, #0
 8013c04:	d05b      	beq.n	8013cbe <_dtoa_r+0xa76>
 8013c06:	6879      	ldr	r1, [r7, #4]
 8013c08:	4620      	mov	r0, r4
 8013c0a:	f000 ff33 	bl	8014a74 <_Balloc>
 8013c0e:	4605      	mov	r5, r0
 8013c10:	b928      	cbnz	r0, 8013c1e <_dtoa_r+0x9d6>
 8013c12:	4b83      	ldr	r3, [pc, #524]	; (8013e20 <_dtoa_r+0xbd8>)
 8013c14:	4602      	mov	r2, r0
 8013c16:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013c1a:	f7ff bb2e 	b.w	801327a <_dtoa_r+0x32>
 8013c1e:	693a      	ldr	r2, [r7, #16]
 8013c20:	3202      	adds	r2, #2
 8013c22:	0092      	lsls	r2, r2, #2
 8013c24:	f107 010c 	add.w	r1, r7, #12
 8013c28:	300c      	adds	r0, #12
 8013c2a:	f7ff fa65 	bl	80130f8 <memcpy>
 8013c2e:	2201      	movs	r2, #1
 8013c30:	4629      	mov	r1, r5
 8013c32:	4620      	mov	r0, r4
 8013c34:	f001 f978 	bl	8014f28 <__lshift>
 8013c38:	9b00      	ldr	r3, [sp, #0]
 8013c3a:	3301      	adds	r3, #1
 8013c3c:	9304      	str	r3, [sp, #16]
 8013c3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c42:	4413      	add	r3, r2
 8013c44:	9308      	str	r3, [sp, #32]
 8013c46:	9b02      	ldr	r3, [sp, #8]
 8013c48:	f003 0301 	and.w	r3, r3, #1
 8013c4c:	46b8      	mov	r8, r7
 8013c4e:	9306      	str	r3, [sp, #24]
 8013c50:	4607      	mov	r7, r0
 8013c52:	9b04      	ldr	r3, [sp, #16]
 8013c54:	4631      	mov	r1, r6
 8013c56:	3b01      	subs	r3, #1
 8013c58:	4650      	mov	r0, sl
 8013c5a:	9301      	str	r3, [sp, #4]
 8013c5c:	f7ff fa6a 	bl	8013134 <quorem>
 8013c60:	4641      	mov	r1, r8
 8013c62:	9002      	str	r0, [sp, #8]
 8013c64:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013c68:	4650      	mov	r0, sl
 8013c6a:	f001 f9c9 	bl	8015000 <__mcmp>
 8013c6e:	463a      	mov	r2, r7
 8013c70:	9005      	str	r0, [sp, #20]
 8013c72:	4631      	mov	r1, r6
 8013c74:	4620      	mov	r0, r4
 8013c76:	f001 f9df 	bl	8015038 <__mdiff>
 8013c7a:	68c2      	ldr	r2, [r0, #12]
 8013c7c:	4605      	mov	r5, r0
 8013c7e:	bb02      	cbnz	r2, 8013cc2 <_dtoa_r+0xa7a>
 8013c80:	4601      	mov	r1, r0
 8013c82:	4650      	mov	r0, sl
 8013c84:	f001 f9bc 	bl	8015000 <__mcmp>
 8013c88:	4602      	mov	r2, r0
 8013c8a:	4629      	mov	r1, r5
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	9209      	str	r2, [sp, #36]	; 0x24
 8013c90:	f000 ff30 	bl	8014af4 <_Bfree>
 8013c94:	9b07      	ldr	r3, [sp, #28]
 8013c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c98:	9d04      	ldr	r5, [sp, #16]
 8013c9a:	ea43 0102 	orr.w	r1, r3, r2
 8013c9e:	9b06      	ldr	r3, [sp, #24]
 8013ca0:	4319      	orrs	r1, r3
 8013ca2:	d110      	bne.n	8013cc6 <_dtoa_r+0xa7e>
 8013ca4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013ca8:	d029      	beq.n	8013cfe <_dtoa_r+0xab6>
 8013caa:	9b05      	ldr	r3, [sp, #20]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	dd02      	ble.n	8013cb6 <_dtoa_r+0xa6e>
 8013cb0:	9b02      	ldr	r3, [sp, #8]
 8013cb2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013cb6:	9b01      	ldr	r3, [sp, #4]
 8013cb8:	f883 9000 	strb.w	r9, [r3]
 8013cbc:	e774      	b.n	8013ba8 <_dtoa_r+0x960>
 8013cbe:	4638      	mov	r0, r7
 8013cc0:	e7ba      	b.n	8013c38 <_dtoa_r+0x9f0>
 8013cc2:	2201      	movs	r2, #1
 8013cc4:	e7e1      	b.n	8013c8a <_dtoa_r+0xa42>
 8013cc6:	9b05      	ldr	r3, [sp, #20]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	db04      	blt.n	8013cd6 <_dtoa_r+0xa8e>
 8013ccc:	9907      	ldr	r1, [sp, #28]
 8013cce:	430b      	orrs	r3, r1
 8013cd0:	9906      	ldr	r1, [sp, #24]
 8013cd2:	430b      	orrs	r3, r1
 8013cd4:	d120      	bne.n	8013d18 <_dtoa_r+0xad0>
 8013cd6:	2a00      	cmp	r2, #0
 8013cd8:	dded      	ble.n	8013cb6 <_dtoa_r+0xa6e>
 8013cda:	4651      	mov	r1, sl
 8013cdc:	2201      	movs	r2, #1
 8013cde:	4620      	mov	r0, r4
 8013ce0:	f001 f922 	bl	8014f28 <__lshift>
 8013ce4:	4631      	mov	r1, r6
 8013ce6:	4682      	mov	sl, r0
 8013ce8:	f001 f98a 	bl	8015000 <__mcmp>
 8013cec:	2800      	cmp	r0, #0
 8013cee:	dc03      	bgt.n	8013cf8 <_dtoa_r+0xab0>
 8013cf0:	d1e1      	bne.n	8013cb6 <_dtoa_r+0xa6e>
 8013cf2:	f019 0f01 	tst.w	r9, #1
 8013cf6:	d0de      	beq.n	8013cb6 <_dtoa_r+0xa6e>
 8013cf8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013cfc:	d1d8      	bne.n	8013cb0 <_dtoa_r+0xa68>
 8013cfe:	9a01      	ldr	r2, [sp, #4]
 8013d00:	2339      	movs	r3, #57	; 0x39
 8013d02:	7013      	strb	r3, [r2, #0]
 8013d04:	462b      	mov	r3, r5
 8013d06:	461d      	mov	r5, r3
 8013d08:	3b01      	subs	r3, #1
 8013d0a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013d0e:	2a39      	cmp	r2, #57	; 0x39
 8013d10:	d06c      	beq.n	8013dec <_dtoa_r+0xba4>
 8013d12:	3201      	adds	r2, #1
 8013d14:	701a      	strb	r2, [r3, #0]
 8013d16:	e747      	b.n	8013ba8 <_dtoa_r+0x960>
 8013d18:	2a00      	cmp	r2, #0
 8013d1a:	dd07      	ble.n	8013d2c <_dtoa_r+0xae4>
 8013d1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013d20:	d0ed      	beq.n	8013cfe <_dtoa_r+0xab6>
 8013d22:	9a01      	ldr	r2, [sp, #4]
 8013d24:	f109 0301 	add.w	r3, r9, #1
 8013d28:	7013      	strb	r3, [r2, #0]
 8013d2a:	e73d      	b.n	8013ba8 <_dtoa_r+0x960>
 8013d2c:	9b04      	ldr	r3, [sp, #16]
 8013d2e:	9a08      	ldr	r2, [sp, #32]
 8013d30:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013d34:	4293      	cmp	r3, r2
 8013d36:	d043      	beq.n	8013dc0 <_dtoa_r+0xb78>
 8013d38:	4651      	mov	r1, sl
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	220a      	movs	r2, #10
 8013d3e:	4620      	mov	r0, r4
 8013d40:	f000 fefa 	bl	8014b38 <__multadd>
 8013d44:	45b8      	cmp	r8, r7
 8013d46:	4682      	mov	sl, r0
 8013d48:	f04f 0300 	mov.w	r3, #0
 8013d4c:	f04f 020a 	mov.w	r2, #10
 8013d50:	4641      	mov	r1, r8
 8013d52:	4620      	mov	r0, r4
 8013d54:	d107      	bne.n	8013d66 <_dtoa_r+0xb1e>
 8013d56:	f000 feef 	bl	8014b38 <__multadd>
 8013d5a:	4680      	mov	r8, r0
 8013d5c:	4607      	mov	r7, r0
 8013d5e:	9b04      	ldr	r3, [sp, #16]
 8013d60:	3301      	adds	r3, #1
 8013d62:	9304      	str	r3, [sp, #16]
 8013d64:	e775      	b.n	8013c52 <_dtoa_r+0xa0a>
 8013d66:	f000 fee7 	bl	8014b38 <__multadd>
 8013d6a:	4639      	mov	r1, r7
 8013d6c:	4680      	mov	r8, r0
 8013d6e:	2300      	movs	r3, #0
 8013d70:	220a      	movs	r2, #10
 8013d72:	4620      	mov	r0, r4
 8013d74:	f000 fee0 	bl	8014b38 <__multadd>
 8013d78:	4607      	mov	r7, r0
 8013d7a:	e7f0      	b.n	8013d5e <_dtoa_r+0xb16>
 8013d7c:	9b04      	ldr	r3, [sp, #16]
 8013d7e:	9301      	str	r3, [sp, #4]
 8013d80:	9d00      	ldr	r5, [sp, #0]
 8013d82:	4631      	mov	r1, r6
 8013d84:	4650      	mov	r0, sl
 8013d86:	f7ff f9d5 	bl	8013134 <quorem>
 8013d8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013d8e:	9b00      	ldr	r3, [sp, #0]
 8013d90:	f805 9b01 	strb.w	r9, [r5], #1
 8013d94:	1aea      	subs	r2, r5, r3
 8013d96:	9b01      	ldr	r3, [sp, #4]
 8013d98:	4293      	cmp	r3, r2
 8013d9a:	dd07      	ble.n	8013dac <_dtoa_r+0xb64>
 8013d9c:	4651      	mov	r1, sl
 8013d9e:	2300      	movs	r3, #0
 8013da0:	220a      	movs	r2, #10
 8013da2:	4620      	mov	r0, r4
 8013da4:	f000 fec8 	bl	8014b38 <__multadd>
 8013da8:	4682      	mov	sl, r0
 8013daa:	e7ea      	b.n	8013d82 <_dtoa_r+0xb3a>
 8013dac:	9b01      	ldr	r3, [sp, #4]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	bfc8      	it	gt
 8013db2:	461d      	movgt	r5, r3
 8013db4:	9b00      	ldr	r3, [sp, #0]
 8013db6:	bfd8      	it	le
 8013db8:	2501      	movle	r5, #1
 8013dba:	441d      	add	r5, r3
 8013dbc:	f04f 0800 	mov.w	r8, #0
 8013dc0:	4651      	mov	r1, sl
 8013dc2:	2201      	movs	r2, #1
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	f001 f8af 	bl	8014f28 <__lshift>
 8013dca:	4631      	mov	r1, r6
 8013dcc:	4682      	mov	sl, r0
 8013dce:	f001 f917 	bl	8015000 <__mcmp>
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	dc96      	bgt.n	8013d04 <_dtoa_r+0xabc>
 8013dd6:	d102      	bne.n	8013dde <_dtoa_r+0xb96>
 8013dd8:	f019 0f01 	tst.w	r9, #1
 8013ddc:	d192      	bne.n	8013d04 <_dtoa_r+0xabc>
 8013dde:	462b      	mov	r3, r5
 8013de0:	461d      	mov	r5, r3
 8013de2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013de6:	2a30      	cmp	r2, #48	; 0x30
 8013de8:	d0fa      	beq.n	8013de0 <_dtoa_r+0xb98>
 8013dea:	e6dd      	b.n	8013ba8 <_dtoa_r+0x960>
 8013dec:	9a00      	ldr	r2, [sp, #0]
 8013dee:	429a      	cmp	r2, r3
 8013df0:	d189      	bne.n	8013d06 <_dtoa_r+0xabe>
 8013df2:	f10b 0b01 	add.w	fp, fp, #1
 8013df6:	2331      	movs	r3, #49	; 0x31
 8013df8:	e796      	b.n	8013d28 <_dtoa_r+0xae0>
 8013dfa:	4b0a      	ldr	r3, [pc, #40]	; (8013e24 <_dtoa_r+0xbdc>)
 8013dfc:	f7ff ba99 	b.w	8013332 <_dtoa_r+0xea>
 8013e00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	f47f aa6d 	bne.w	80132e2 <_dtoa_r+0x9a>
 8013e08:	4b07      	ldr	r3, [pc, #28]	; (8013e28 <_dtoa_r+0xbe0>)
 8013e0a:	f7ff ba92 	b.w	8013332 <_dtoa_r+0xea>
 8013e0e:	9b01      	ldr	r3, [sp, #4]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	dcb5      	bgt.n	8013d80 <_dtoa_r+0xb38>
 8013e14:	9b07      	ldr	r3, [sp, #28]
 8013e16:	2b02      	cmp	r3, #2
 8013e18:	f73f aeb1 	bgt.w	8013b7e <_dtoa_r+0x936>
 8013e1c:	e7b0      	b.n	8013d80 <_dtoa_r+0xb38>
 8013e1e:	bf00      	nop
 8013e20:	080183a5 	.word	0x080183a5
 8013e24:	080181a4 	.word	0x080181a4
 8013e28:	08018329 	.word	0x08018329

08013e2c <rshift>:
 8013e2c:	6903      	ldr	r3, [r0, #16]
 8013e2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013e32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e36:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013e3a:	f100 0414 	add.w	r4, r0, #20
 8013e3e:	dd45      	ble.n	8013ecc <rshift+0xa0>
 8013e40:	f011 011f 	ands.w	r1, r1, #31
 8013e44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013e48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013e4c:	d10c      	bne.n	8013e68 <rshift+0x3c>
 8013e4e:	f100 0710 	add.w	r7, r0, #16
 8013e52:	4629      	mov	r1, r5
 8013e54:	42b1      	cmp	r1, r6
 8013e56:	d334      	bcc.n	8013ec2 <rshift+0x96>
 8013e58:	1a9b      	subs	r3, r3, r2
 8013e5a:	009b      	lsls	r3, r3, #2
 8013e5c:	1eea      	subs	r2, r5, #3
 8013e5e:	4296      	cmp	r6, r2
 8013e60:	bf38      	it	cc
 8013e62:	2300      	movcc	r3, #0
 8013e64:	4423      	add	r3, r4
 8013e66:	e015      	b.n	8013e94 <rshift+0x68>
 8013e68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013e6c:	f1c1 0820 	rsb	r8, r1, #32
 8013e70:	40cf      	lsrs	r7, r1
 8013e72:	f105 0e04 	add.w	lr, r5, #4
 8013e76:	46a1      	mov	r9, r4
 8013e78:	4576      	cmp	r6, lr
 8013e7a:	46f4      	mov	ip, lr
 8013e7c:	d815      	bhi.n	8013eaa <rshift+0x7e>
 8013e7e:	1a9a      	subs	r2, r3, r2
 8013e80:	0092      	lsls	r2, r2, #2
 8013e82:	3a04      	subs	r2, #4
 8013e84:	3501      	adds	r5, #1
 8013e86:	42ae      	cmp	r6, r5
 8013e88:	bf38      	it	cc
 8013e8a:	2200      	movcc	r2, #0
 8013e8c:	18a3      	adds	r3, r4, r2
 8013e8e:	50a7      	str	r7, [r4, r2]
 8013e90:	b107      	cbz	r7, 8013e94 <rshift+0x68>
 8013e92:	3304      	adds	r3, #4
 8013e94:	1b1a      	subs	r2, r3, r4
 8013e96:	42a3      	cmp	r3, r4
 8013e98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013e9c:	bf08      	it	eq
 8013e9e:	2300      	moveq	r3, #0
 8013ea0:	6102      	str	r2, [r0, #16]
 8013ea2:	bf08      	it	eq
 8013ea4:	6143      	streq	r3, [r0, #20]
 8013ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013eaa:	f8dc c000 	ldr.w	ip, [ip]
 8013eae:	fa0c fc08 	lsl.w	ip, ip, r8
 8013eb2:	ea4c 0707 	orr.w	r7, ip, r7
 8013eb6:	f849 7b04 	str.w	r7, [r9], #4
 8013eba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013ebe:	40cf      	lsrs	r7, r1
 8013ec0:	e7da      	b.n	8013e78 <rshift+0x4c>
 8013ec2:	f851 cb04 	ldr.w	ip, [r1], #4
 8013ec6:	f847 cf04 	str.w	ip, [r7, #4]!
 8013eca:	e7c3      	b.n	8013e54 <rshift+0x28>
 8013ecc:	4623      	mov	r3, r4
 8013ece:	e7e1      	b.n	8013e94 <rshift+0x68>

08013ed0 <__hexdig_fun>:
 8013ed0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013ed4:	2b09      	cmp	r3, #9
 8013ed6:	d802      	bhi.n	8013ede <__hexdig_fun+0xe>
 8013ed8:	3820      	subs	r0, #32
 8013eda:	b2c0      	uxtb	r0, r0
 8013edc:	4770      	bx	lr
 8013ede:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013ee2:	2b05      	cmp	r3, #5
 8013ee4:	d801      	bhi.n	8013eea <__hexdig_fun+0x1a>
 8013ee6:	3847      	subs	r0, #71	; 0x47
 8013ee8:	e7f7      	b.n	8013eda <__hexdig_fun+0xa>
 8013eea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013eee:	2b05      	cmp	r3, #5
 8013ef0:	d801      	bhi.n	8013ef6 <__hexdig_fun+0x26>
 8013ef2:	3827      	subs	r0, #39	; 0x27
 8013ef4:	e7f1      	b.n	8013eda <__hexdig_fun+0xa>
 8013ef6:	2000      	movs	r0, #0
 8013ef8:	4770      	bx	lr
	...

08013efc <__gethex>:
 8013efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f00:	4617      	mov	r7, r2
 8013f02:	680a      	ldr	r2, [r1, #0]
 8013f04:	b085      	sub	sp, #20
 8013f06:	f102 0b02 	add.w	fp, r2, #2
 8013f0a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013f0e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013f12:	4681      	mov	r9, r0
 8013f14:	468a      	mov	sl, r1
 8013f16:	9302      	str	r3, [sp, #8]
 8013f18:	32fe      	adds	r2, #254	; 0xfe
 8013f1a:	eb02 030b 	add.w	r3, r2, fp
 8013f1e:	46d8      	mov	r8, fp
 8013f20:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013f24:	9301      	str	r3, [sp, #4]
 8013f26:	2830      	cmp	r0, #48	; 0x30
 8013f28:	d0f7      	beq.n	8013f1a <__gethex+0x1e>
 8013f2a:	f7ff ffd1 	bl	8013ed0 <__hexdig_fun>
 8013f2e:	4604      	mov	r4, r0
 8013f30:	2800      	cmp	r0, #0
 8013f32:	d138      	bne.n	8013fa6 <__gethex+0xaa>
 8013f34:	49a7      	ldr	r1, [pc, #668]	; (80141d4 <__gethex+0x2d8>)
 8013f36:	2201      	movs	r2, #1
 8013f38:	4640      	mov	r0, r8
 8013f3a:	f7ff f893 	bl	8013064 <strncmp>
 8013f3e:	4606      	mov	r6, r0
 8013f40:	2800      	cmp	r0, #0
 8013f42:	d169      	bne.n	8014018 <__gethex+0x11c>
 8013f44:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013f48:	465d      	mov	r5, fp
 8013f4a:	f7ff ffc1 	bl	8013ed0 <__hexdig_fun>
 8013f4e:	2800      	cmp	r0, #0
 8013f50:	d064      	beq.n	801401c <__gethex+0x120>
 8013f52:	465a      	mov	r2, fp
 8013f54:	7810      	ldrb	r0, [r2, #0]
 8013f56:	2830      	cmp	r0, #48	; 0x30
 8013f58:	4690      	mov	r8, r2
 8013f5a:	f102 0201 	add.w	r2, r2, #1
 8013f5e:	d0f9      	beq.n	8013f54 <__gethex+0x58>
 8013f60:	f7ff ffb6 	bl	8013ed0 <__hexdig_fun>
 8013f64:	2301      	movs	r3, #1
 8013f66:	fab0 f480 	clz	r4, r0
 8013f6a:	0964      	lsrs	r4, r4, #5
 8013f6c:	465e      	mov	r6, fp
 8013f6e:	9301      	str	r3, [sp, #4]
 8013f70:	4642      	mov	r2, r8
 8013f72:	4615      	mov	r5, r2
 8013f74:	3201      	adds	r2, #1
 8013f76:	7828      	ldrb	r0, [r5, #0]
 8013f78:	f7ff ffaa 	bl	8013ed0 <__hexdig_fun>
 8013f7c:	2800      	cmp	r0, #0
 8013f7e:	d1f8      	bne.n	8013f72 <__gethex+0x76>
 8013f80:	4994      	ldr	r1, [pc, #592]	; (80141d4 <__gethex+0x2d8>)
 8013f82:	2201      	movs	r2, #1
 8013f84:	4628      	mov	r0, r5
 8013f86:	f7ff f86d 	bl	8013064 <strncmp>
 8013f8a:	b978      	cbnz	r0, 8013fac <__gethex+0xb0>
 8013f8c:	b946      	cbnz	r6, 8013fa0 <__gethex+0xa4>
 8013f8e:	1c6e      	adds	r6, r5, #1
 8013f90:	4632      	mov	r2, r6
 8013f92:	4615      	mov	r5, r2
 8013f94:	3201      	adds	r2, #1
 8013f96:	7828      	ldrb	r0, [r5, #0]
 8013f98:	f7ff ff9a 	bl	8013ed0 <__hexdig_fun>
 8013f9c:	2800      	cmp	r0, #0
 8013f9e:	d1f8      	bne.n	8013f92 <__gethex+0x96>
 8013fa0:	1b73      	subs	r3, r6, r5
 8013fa2:	009e      	lsls	r6, r3, #2
 8013fa4:	e004      	b.n	8013fb0 <__gethex+0xb4>
 8013fa6:	2400      	movs	r4, #0
 8013fa8:	4626      	mov	r6, r4
 8013faa:	e7e1      	b.n	8013f70 <__gethex+0x74>
 8013fac:	2e00      	cmp	r6, #0
 8013fae:	d1f7      	bne.n	8013fa0 <__gethex+0xa4>
 8013fb0:	782b      	ldrb	r3, [r5, #0]
 8013fb2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013fb6:	2b50      	cmp	r3, #80	; 0x50
 8013fb8:	d13d      	bne.n	8014036 <__gethex+0x13a>
 8013fba:	786b      	ldrb	r3, [r5, #1]
 8013fbc:	2b2b      	cmp	r3, #43	; 0x2b
 8013fbe:	d02f      	beq.n	8014020 <__gethex+0x124>
 8013fc0:	2b2d      	cmp	r3, #45	; 0x2d
 8013fc2:	d031      	beq.n	8014028 <__gethex+0x12c>
 8013fc4:	1c69      	adds	r1, r5, #1
 8013fc6:	f04f 0b00 	mov.w	fp, #0
 8013fca:	7808      	ldrb	r0, [r1, #0]
 8013fcc:	f7ff ff80 	bl	8013ed0 <__hexdig_fun>
 8013fd0:	1e42      	subs	r2, r0, #1
 8013fd2:	b2d2      	uxtb	r2, r2
 8013fd4:	2a18      	cmp	r2, #24
 8013fd6:	d82e      	bhi.n	8014036 <__gethex+0x13a>
 8013fd8:	f1a0 0210 	sub.w	r2, r0, #16
 8013fdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013fe0:	f7ff ff76 	bl	8013ed0 <__hexdig_fun>
 8013fe4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8013fe8:	fa5f fc8c 	uxtb.w	ip, ip
 8013fec:	f1bc 0f18 	cmp.w	ip, #24
 8013ff0:	d91d      	bls.n	801402e <__gethex+0x132>
 8013ff2:	f1bb 0f00 	cmp.w	fp, #0
 8013ff6:	d000      	beq.n	8013ffa <__gethex+0xfe>
 8013ff8:	4252      	negs	r2, r2
 8013ffa:	4416      	add	r6, r2
 8013ffc:	f8ca 1000 	str.w	r1, [sl]
 8014000:	b1dc      	cbz	r4, 801403a <__gethex+0x13e>
 8014002:	9b01      	ldr	r3, [sp, #4]
 8014004:	2b00      	cmp	r3, #0
 8014006:	bf14      	ite	ne
 8014008:	f04f 0800 	movne.w	r8, #0
 801400c:	f04f 0806 	moveq.w	r8, #6
 8014010:	4640      	mov	r0, r8
 8014012:	b005      	add	sp, #20
 8014014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014018:	4645      	mov	r5, r8
 801401a:	4626      	mov	r6, r4
 801401c:	2401      	movs	r4, #1
 801401e:	e7c7      	b.n	8013fb0 <__gethex+0xb4>
 8014020:	f04f 0b00 	mov.w	fp, #0
 8014024:	1ca9      	adds	r1, r5, #2
 8014026:	e7d0      	b.n	8013fca <__gethex+0xce>
 8014028:	f04f 0b01 	mov.w	fp, #1
 801402c:	e7fa      	b.n	8014024 <__gethex+0x128>
 801402e:	230a      	movs	r3, #10
 8014030:	fb03 0002 	mla	r0, r3, r2, r0
 8014034:	e7d0      	b.n	8013fd8 <__gethex+0xdc>
 8014036:	4629      	mov	r1, r5
 8014038:	e7e0      	b.n	8013ffc <__gethex+0x100>
 801403a:	eba5 0308 	sub.w	r3, r5, r8
 801403e:	3b01      	subs	r3, #1
 8014040:	4621      	mov	r1, r4
 8014042:	2b07      	cmp	r3, #7
 8014044:	dc0a      	bgt.n	801405c <__gethex+0x160>
 8014046:	4648      	mov	r0, r9
 8014048:	f000 fd14 	bl	8014a74 <_Balloc>
 801404c:	4604      	mov	r4, r0
 801404e:	b940      	cbnz	r0, 8014062 <__gethex+0x166>
 8014050:	4b61      	ldr	r3, [pc, #388]	; (80141d8 <__gethex+0x2dc>)
 8014052:	4602      	mov	r2, r0
 8014054:	21e4      	movs	r1, #228	; 0xe4
 8014056:	4861      	ldr	r0, [pc, #388]	; (80141dc <__gethex+0x2e0>)
 8014058:	f001 faa8 	bl	80155ac <__assert_func>
 801405c:	3101      	adds	r1, #1
 801405e:	105b      	asrs	r3, r3, #1
 8014060:	e7ef      	b.n	8014042 <__gethex+0x146>
 8014062:	f100 0a14 	add.w	sl, r0, #20
 8014066:	2300      	movs	r3, #0
 8014068:	495a      	ldr	r1, [pc, #360]	; (80141d4 <__gethex+0x2d8>)
 801406a:	f8cd a004 	str.w	sl, [sp, #4]
 801406e:	469b      	mov	fp, r3
 8014070:	45a8      	cmp	r8, r5
 8014072:	d342      	bcc.n	80140fa <__gethex+0x1fe>
 8014074:	9801      	ldr	r0, [sp, #4]
 8014076:	f840 bb04 	str.w	fp, [r0], #4
 801407a:	eba0 000a 	sub.w	r0, r0, sl
 801407e:	1080      	asrs	r0, r0, #2
 8014080:	6120      	str	r0, [r4, #16]
 8014082:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014086:	4658      	mov	r0, fp
 8014088:	f000 fde6 	bl	8014c58 <__hi0bits>
 801408c:	683d      	ldr	r5, [r7, #0]
 801408e:	eba8 0000 	sub.w	r0, r8, r0
 8014092:	42a8      	cmp	r0, r5
 8014094:	dd59      	ble.n	801414a <__gethex+0x24e>
 8014096:	eba0 0805 	sub.w	r8, r0, r5
 801409a:	4641      	mov	r1, r8
 801409c:	4620      	mov	r0, r4
 801409e:	f001 f975 	bl	801538c <__any_on>
 80140a2:	4683      	mov	fp, r0
 80140a4:	b1b8      	cbz	r0, 80140d6 <__gethex+0x1da>
 80140a6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80140aa:	1159      	asrs	r1, r3, #5
 80140ac:	f003 021f 	and.w	r2, r3, #31
 80140b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80140b4:	f04f 0b01 	mov.w	fp, #1
 80140b8:	fa0b f202 	lsl.w	r2, fp, r2
 80140bc:	420a      	tst	r2, r1
 80140be:	d00a      	beq.n	80140d6 <__gethex+0x1da>
 80140c0:	455b      	cmp	r3, fp
 80140c2:	dd06      	ble.n	80140d2 <__gethex+0x1d6>
 80140c4:	f1a8 0102 	sub.w	r1, r8, #2
 80140c8:	4620      	mov	r0, r4
 80140ca:	f001 f95f 	bl	801538c <__any_on>
 80140ce:	2800      	cmp	r0, #0
 80140d0:	d138      	bne.n	8014144 <__gethex+0x248>
 80140d2:	f04f 0b02 	mov.w	fp, #2
 80140d6:	4641      	mov	r1, r8
 80140d8:	4620      	mov	r0, r4
 80140da:	f7ff fea7 	bl	8013e2c <rshift>
 80140de:	4446      	add	r6, r8
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	42b3      	cmp	r3, r6
 80140e4:	da41      	bge.n	801416a <__gethex+0x26e>
 80140e6:	4621      	mov	r1, r4
 80140e8:	4648      	mov	r0, r9
 80140ea:	f000 fd03 	bl	8014af4 <_Bfree>
 80140ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140f0:	2300      	movs	r3, #0
 80140f2:	6013      	str	r3, [r2, #0]
 80140f4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80140f8:	e78a      	b.n	8014010 <__gethex+0x114>
 80140fa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80140fe:	2a2e      	cmp	r2, #46	; 0x2e
 8014100:	d014      	beq.n	801412c <__gethex+0x230>
 8014102:	2b20      	cmp	r3, #32
 8014104:	d106      	bne.n	8014114 <__gethex+0x218>
 8014106:	9b01      	ldr	r3, [sp, #4]
 8014108:	f843 bb04 	str.w	fp, [r3], #4
 801410c:	f04f 0b00 	mov.w	fp, #0
 8014110:	9301      	str	r3, [sp, #4]
 8014112:	465b      	mov	r3, fp
 8014114:	7828      	ldrb	r0, [r5, #0]
 8014116:	9303      	str	r3, [sp, #12]
 8014118:	f7ff feda 	bl	8013ed0 <__hexdig_fun>
 801411c:	9b03      	ldr	r3, [sp, #12]
 801411e:	f000 000f 	and.w	r0, r0, #15
 8014122:	4098      	lsls	r0, r3
 8014124:	ea4b 0b00 	orr.w	fp, fp, r0
 8014128:	3304      	adds	r3, #4
 801412a:	e7a1      	b.n	8014070 <__gethex+0x174>
 801412c:	45a8      	cmp	r8, r5
 801412e:	d8e8      	bhi.n	8014102 <__gethex+0x206>
 8014130:	2201      	movs	r2, #1
 8014132:	4628      	mov	r0, r5
 8014134:	9303      	str	r3, [sp, #12]
 8014136:	f7fe ff95 	bl	8013064 <strncmp>
 801413a:	4926      	ldr	r1, [pc, #152]	; (80141d4 <__gethex+0x2d8>)
 801413c:	9b03      	ldr	r3, [sp, #12]
 801413e:	2800      	cmp	r0, #0
 8014140:	d1df      	bne.n	8014102 <__gethex+0x206>
 8014142:	e795      	b.n	8014070 <__gethex+0x174>
 8014144:	f04f 0b03 	mov.w	fp, #3
 8014148:	e7c5      	b.n	80140d6 <__gethex+0x1da>
 801414a:	da0b      	bge.n	8014164 <__gethex+0x268>
 801414c:	eba5 0800 	sub.w	r8, r5, r0
 8014150:	4621      	mov	r1, r4
 8014152:	4642      	mov	r2, r8
 8014154:	4648      	mov	r0, r9
 8014156:	f000 fee7 	bl	8014f28 <__lshift>
 801415a:	eba6 0608 	sub.w	r6, r6, r8
 801415e:	4604      	mov	r4, r0
 8014160:	f100 0a14 	add.w	sl, r0, #20
 8014164:	f04f 0b00 	mov.w	fp, #0
 8014168:	e7ba      	b.n	80140e0 <__gethex+0x1e4>
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	42b3      	cmp	r3, r6
 801416e:	dd73      	ble.n	8014258 <__gethex+0x35c>
 8014170:	1b9e      	subs	r6, r3, r6
 8014172:	42b5      	cmp	r5, r6
 8014174:	dc34      	bgt.n	80141e0 <__gethex+0x2e4>
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	2b02      	cmp	r3, #2
 801417a:	d023      	beq.n	80141c4 <__gethex+0x2c8>
 801417c:	2b03      	cmp	r3, #3
 801417e:	d025      	beq.n	80141cc <__gethex+0x2d0>
 8014180:	2b01      	cmp	r3, #1
 8014182:	d115      	bne.n	80141b0 <__gethex+0x2b4>
 8014184:	42b5      	cmp	r5, r6
 8014186:	d113      	bne.n	80141b0 <__gethex+0x2b4>
 8014188:	2d01      	cmp	r5, #1
 801418a:	d10b      	bne.n	80141a4 <__gethex+0x2a8>
 801418c:	9a02      	ldr	r2, [sp, #8]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	6013      	str	r3, [r2, #0]
 8014192:	2301      	movs	r3, #1
 8014194:	6123      	str	r3, [r4, #16]
 8014196:	f8ca 3000 	str.w	r3, [sl]
 801419a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801419c:	f04f 0862 	mov.w	r8, #98	; 0x62
 80141a0:	601c      	str	r4, [r3, #0]
 80141a2:	e735      	b.n	8014010 <__gethex+0x114>
 80141a4:	1e69      	subs	r1, r5, #1
 80141a6:	4620      	mov	r0, r4
 80141a8:	f001 f8f0 	bl	801538c <__any_on>
 80141ac:	2800      	cmp	r0, #0
 80141ae:	d1ed      	bne.n	801418c <__gethex+0x290>
 80141b0:	4621      	mov	r1, r4
 80141b2:	4648      	mov	r0, r9
 80141b4:	f000 fc9e 	bl	8014af4 <_Bfree>
 80141b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80141ba:	2300      	movs	r3, #0
 80141bc:	6013      	str	r3, [r2, #0]
 80141be:	f04f 0850 	mov.w	r8, #80	; 0x50
 80141c2:	e725      	b.n	8014010 <__gethex+0x114>
 80141c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d1f2      	bne.n	80141b0 <__gethex+0x2b4>
 80141ca:	e7df      	b.n	801418c <__gethex+0x290>
 80141cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d1dc      	bne.n	801418c <__gethex+0x290>
 80141d2:	e7ed      	b.n	80141b0 <__gethex+0x2b4>
 80141d4:	080181cd 	.word	0x080181cd
 80141d8:	080183a5 	.word	0x080183a5
 80141dc:	080183b6 	.word	0x080183b6
 80141e0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80141e4:	f1bb 0f00 	cmp.w	fp, #0
 80141e8:	d133      	bne.n	8014252 <__gethex+0x356>
 80141ea:	f1b8 0f00 	cmp.w	r8, #0
 80141ee:	d004      	beq.n	80141fa <__gethex+0x2fe>
 80141f0:	4641      	mov	r1, r8
 80141f2:	4620      	mov	r0, r4
 80141f4:	f001 f8ca 	bl	801538c <__any_on>
 80141f8:	4683      	mov	fp, r0
 80141fa:	ea4f 1268 	mov.w	r2, r8, asr #5
 80141fe:	2301      	movs	r3, #1
 8014200:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014204:	f008 081f 	and.w	r8, r8, #31
 8014208:	fa03 f308 	lsl.w	r3, r3, r8
 801420c:	4213      	tst	r3, r2
 801420e:	4631      	mov	r1, r6
 8014210:	4620      	mov	r0, r4
 8014212:	bf18      	it	ne
 8014214:	f04b 0b02 	orrne.w	fp, fp, #2
 8014218:	1bad      	subs	r5, r5, r6
 801421a:	f7ff fe07 	bl	8013e2c <rshift>
 801421e:	687e      	ldr	r6, [r7, #4]
 8014220:	f04f 0802 	mov.w	r8, #2
 8014224:	f1bb 0f00 	cmp.w	fp, #0
 8014228:	d04a      	beq.n	80142c0 <__gethex+0x3c4>
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	2b02      	cmp	r3, #2
 801422e:	d016      	beq.n	801425e <__gethex+0x362>
 8014230:	2b03      	cmp	r3, #3
 8014232:	d018      	beq.n	8014266 <__gethex+0x36a>
 8014234:	2b01      	cmp	r3, #1
 8014236:	d109      	bne.n	801424c <__gethex+0x350>
 8014238:	f01b 0f02 	tst.w	fp, #2
 801423c:	d006      	beq.n	801424c <__gethex+0x350>
 801423e:	f8da 3000 	ldr.w	r3, [sl]
 8014242:	ea4b 0b03 	orr.w	fp, fp, r3
 8014246:	f01b 0f01 	tst.w	fp, #1
 801424a:	d10f      	bne.n	801426c <__gethex+0x370>
 801424c:	f048 0810 	orr.w	r8, r8, #16
 8014250:	e036      	b.n	80142c0 <__gethex+0x3c4>
 8014252:	f04f 0b01 	mov.w	fp, #1
 8014256:	e7d0      	b.n	80141fa <__gethex+0x2fe>
 8014258:	f04f 0801 	mov.w	r8, #1
 801425c:	e7e2      	b.n	8014224 <__gethex+0x328>
 801425e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014260:	f1c3 0301 	rsb	r3, r3, #1
 8014264:	930f      	str	r3, [sp, #60]	; 0x3c
 8014266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014268:	2b00      	cmp	r3, #0
 801426a:	d0ef      	beq.n	801424c <__gethex+0x350>
 801426c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014270:	f104 0214 	add.w	r2, r4, #20
 8014274:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8014278:	9301      	str	r3, [sp, #4]
 801427a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801427e:	2300      	movs	r3, #0
 8014280:	4694      	mov	ip, r2
 8014282:	f852 1b04 	ldr.w	r1, [r2], #4
 8014286:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801428a:	d01e      	beq.n	80142ca <__gethex+0x3ce>
 801428c:	3101      	adds	r1, #1
 801428e:	f8cc 1000 	str.w	r1, [ip]
 8014292:	f1b8 0f02 	cmp.w	r8, #2
 8014296:	f104 0214 	add.w	r2, r4, #20
 801429a:	d13d      	bne.n	8014318 <__gethex+0x41c>
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	3b01      	subs	r3, #1
 80142a0:	42ab      	cmp	r3, r5
 80142a2:	d10b      	bne.n	80142bc <__gethex+0x3c0>
 80142a4:	1169      	asrs	r1, r5, #5
 80142a6:	2301      	movs	r3, #1
 80142a8:	f005 051f 	and.w	r5, r5, #31
 80142ac:	fa03 f505 	lsl.w	r5, r3, r5
 80142b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80142b4:	421d      	tst	r5, r3
 80142b6:	bf18      	it	ne
 80142b8:	f04f 0801 	movne.w	r8, #1
 80142bc:	f048 0820 	orr.w	r8, r8, #32
 80142c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142c2:	601c      	str	r4, [r3, #0]
 80142c4:	9b02      	ldr	r3, [sp, #8]
 80142c6:	601e      	str	r6, [r3, #0]
 80142c8:	e6a2      	b.n	8014010 <__gethex+0x114>
 80142ca:	4290      	cmp	r0, r2
 80142cc:	f842 3c04 	str.w	r3, [r2, #-4]
 80142d0:	d8d6      	bhi.n	8014280 <__gethex+0x384>
 80142d2:	68a2      	ldr	r2, [r4, #8]
 80142d4:	4593      	cmp	fp, r2
 80142d6:	db17      	blt.n	8014308 <__gethex+0x40c>
 80142d8:	6861      	ldr	r1, [r4, #4]
 80142da:	4648      	mov	r0, r9
 80142dc:	3101      	adds	r1, #1
 80142de:	f000 fbc9 	bl	8014a74 <_Balloc>
 80142e2:	4682      	mov	sl, r0
 80142e4:	b918      	cbnz	r0, 80142ee <__gethex+0x3f2>
 80142e6:	4b1b      	ldr	r3, [pc, #108]	; (8014354 <__gethex+0x458>)
 80142e8:	4602      	mov	r2, r0
 80142ea:	2184      	movs	r1, #132	; 0x84
 80142ec:	e6b3      	b.n	8014056 <__gethex+0x15a>
 80142ee:	6922      	ldr	r2, [r4, #16]
 80142f0:	3202      	adds	r2, #2
 80142f2:	f104 010c 	add.w	r1, r4, #12
 80142f6:	0092      	lsls	r2, r2, #2
 80142f8:	300c      	adds	r0, #12
 80142fa:	f7fe fefd 	bl	80130f8 <memcpy>
 80142fe:	4621      	mov	r1, r4
 8014300:	4648      	mov	r0, r9
 8014302:	f000 fbf7 	bl	8014af4 <_Bfree>
 8014306:	4654      	mov	r4, sl
 8014308:	6922      	ldr	r2, [r4, #16]
 801430a:	1c51      	adds	r1, r2, #1
 801430c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014310:	6121      	str	r1, [r4, #16]
 8014312:	2101      	movs	r1, #1
 8014314:	6151      	str	r1, [r2, #20]
 8014316:	e7bc      	b.n	8014292 <__gethex+0x396>
 8014318:	6921      	ldr	r1, [r4, #16]
 801431a:	4559      	cmp	r1, fp
 801431c:	dd0b      	ble.n	8014336 <__gethex+0x43a>
 801431e:	2101      	movs	r1, #1
 8014320:	4620      	mov	r0, r4
 8014322:	f7ff fd83 	bl	8013e2c <rshift>
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	3601      	adds	r6, #1
 801432a:	42b3      	cmp	r3, r6
 801432c:	f6ff aedb 	blt.w	80140e6 <__gethex+0x1ea>
 8014330:	f04f 0801 	mov.w	r8, #1
 8014334:	e7c2      	b.n	80142bc <__gethex+0x3c0>
 8014336:	f015 051f 	ands.w	r5, r5, #31
 801433a:	d0f9      	beq.n	8014330 <__gethex+0x434>
 801433c:	9b01      	ldr	r3, [sp, #4]
 801433e:	441a      	add	r2, r3
 8014340:	f1c5 0520 	rsb	r5, r5, #32
 8014344:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014348:	f000 fc86 	bl	8014c58 <__hi0bits>
 801434c:	42a8      	cmp	r0, r5
 801434e:	dbe6      	blt.n	801431e <__gethex+0x422>
 8014350:	e7ee      	b.n	8014330 <__gethex+0x434>
 8014352:	bf00      	nop
 8014354:	080183a5 	.word	0x080183a5

08014358 <L_shift>:
 8014358:	f1c2 0208 	rsb	r2, r2, #8
 801435c:	0092      	lsls	r2, r2, #2
 801435e:	b570      	push	{r4, r5, r6, lr}
 8014360:	f1c2 0620 	rsb	r6, r2, #32
 8014364:	6843      	ldr	r3, [r0, #4]
 8014366:	6804      	ldr	r4, [r0, #0]
 8014368:	fa03 f506 	lsl.w	r5, r3, r6
 801436c:	432c      	orrs	r4, r5
 801436e:	40d3      	lsrs	r3, r2
 8014370:	6004      	str	r4, [r0, #0]
 8014372:	f840 3f04 	str.w	r3, [r0, #4]!
 8014376:	4288      	cmp	r0, r1
 8014378:	d3f4      	bcc.n	8014364 <L_shift+0xc>
 801437a:	bd70      	pop	{r4, r5, r6, pc}

0801437c <__match>:
 801437c:	b530      	push	{r4, r5, lr}
 801437e:	6803      	ldr	r3, [r0, #0]
 8014380:	3301      	adds	r3, #1
 8014382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014386:	b914      	cbnz	r4, 801438e <__match+0x12>
 8014388:	6003      	str	r3, [r0, #0]
 801438a:	2001      	movs	r0, #1
 801438c:	bd30      	pop	{r4, r5, pc}
 801438e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014392:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014396:	2d19      	cmp	r5, #25
 8014398:	bf98      	it	ls
 801439a:	3220      	addls	r2, #32
 801439c:	42a2      	cmp	r2, r4
 801439e:	d0f0      	beq.n	8014382 <__match+0x6>
 80143a0:	2000      	movs	r0, #0
 80143a2:	e7f3      	b.n	801438c <__match+0x10>

080143a4 <__hexnan>:
 80143a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143a8:	680b      	ldr	r3, [r1, #0]
 80143aa:	6801      	ldr	r1, [r0, #0]
 80143ac:	115e      	asrs	r6, r3, #5
 80143ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80143b2:	f013 031f 	ands.w	r3, r3, #31
 80143b6:	b087      	sub	sp, #28
 80143b8:	bf18      	it	ne
 80143ba:	3604      	addne	r6, #4
 80143bc:	2500      	movs	r5, #0
 80143be:	1f37      	subs	r7, r6, #4
 80143c0:	4682      	mov	sl, r0
 80143c2:	4690      	mov	r8, r2
 80143c4:	9301      	str	r3, [sp, #4]
 80143c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80143ca:	46b9      	mov	r9, r7
 80143cc:	463c      	mov	r4, r7
 80143ce:	9502      	str	r5, [sp, #8]
 80143d0:	46ab      	mov	fp, r5
 80143d2:	784a      	ldrb	r2, [r1, #1]
 80143d4:	1c4b      	adds	r3, r1, #1
 80143d6:	9303      	str	r3, [sp, #12]
 80143d8:	b342      	cbz	r2, 801442c <__hexnan+0x88>
 80143da:	4610      	mov	r0, r2
 80143dc:	9105      	str	r1, [sp, #20]
 80143de:	9204      	str	r2, [sp, #16]
 80143e0:	f7ff fd76 	bl	8013ed0 <__hexdig_fun>
 80143e4:	2800      	cmp	r0, #0
 80143e6:	d14f      	bne.n	8014488 <__hexnan+0xe4>
 80143e8:	9a04      	ldr	r2, [sp, #16]
 80143ea:	9905      	ldr	r1, [sp, #20]
 80143ec:	2a20      	cmp	r2, #32
 80143ee:	d818      	bhi.n	8014422 <__hexnan+0x7e>
 80143f0:	9b02      	ldr	r3, [sp, #8]
 80143f2:	459b      	cmp	fp, r3
 80143f4:	dd13      	ble.n	801441e <__hexnan+0x7a>
 80143f6:	454c      	cmp	r4, r9
 80143f8:	d206      	bcs.n	8014408 <__hexnan+0x64>
 80143fa:	2d07      	cmp	r5, #7
 80143fc:	dc04      	bgt.n	8014408 <__hexnan+0x64>
 80143fe:	462a      	mov	r2, r5
 8014400:	4649      	mov	r1, r9
 8014402:	4620      	mov	r0, r4
 8014404:	f7ff ffa8 	bl	8014358 <L_shift>
 8014408:	4544      	cmp	r4, r8
 801440a:	d950      	bls.n	80144ae <__hexnan+0x10a>
 801440c:	2300      	movs	r3, #0
 801440e:	f1a4 0904 	sub.w	r9, r4, #4
 8014412:	f844 3c04 	str.w	r3, [r4, #-4]
 8014416:	f8cd b008 	str.w	fp, [sp, #8]
 801441a:	464c      	mov	r4, r9
 801441c:	461d      	mov	r5, r3
 801441e:	9903      	ldr	r1, [sp, #12]
 8014420:	e7d7      	b.n	80143d2 <__hexnan+0x2e>
 8014422:	2a29      	cmp	r2, #41	; 0x29
 8014424:	d155      	bne.n	80144d2 <__hexnan+0x12e>
 8014426:	3102      	adds	r1, #2
 8014428:	f8ca 1000 	str.w	r1, [sl]
 801442c:	f1bb 0f00 	cmp.w	fp, #0
 8014430:	d04f      	beq.n	80144d2 <__hexnan+0x12e>
 8014432:	454c      	cmp	r4, r9
 8014434:	d206      	bcs.n	8014444 <__hexnan+0xa0>
 8014436:	2d07      	cmp	r5, #7
 8014438:	dc04      	bgt.n	8014444 <__hexnan+0xa0>
 801443a:	462a      	mov	r2, r5
 801443c:	4649      	mov	r1, r9
 801443e:	4620      	mov	r0, r4
 8014440:	f7ff ff8a 	bl	8014358 <L_shift>
 8014444:	4544      	cmp	r4, r8
 8014446:	d934      	bls.n	80144b2 <__hexnan+0x10e>
 8014448:	f1a8 0204 	sub.w	r2, r8, #4
 801444c:	4623      	mov	r3, r4
 801444e:	f853 1b04 	ldr.w	r1, [r3], #4
 8014452:	f842 1f04 	str.w	r1, [r2, #4]!
 8014456:	429f      	cmp	r7, r3
 8014458:	d2f9      	bcs.n	801444e <__hexnan+0xaa>
 801445a:	1b3b      	subs	r3, r7, r4
 801445c:	f023 0303 	bic.w	r3, r3, #3
 8014460:	3304      	adds	r3, #4
 8014462:	3e03      	subs	r6, #3
 8014464:	3401      	adds	r4, #1
 8014466:	42a6      	cmp	r6, r4
 8014468:	bf38      	it	cc
 801446a:	2304      	movcc	r3, #4
 801446c:	4443      	add	r3, r8
 801446e:	2200      	movs	r2, #0
 8014470:	f843 2b04 	str.w	r2, [r3], #4
 8014474:	429f      	cmp	r7, r3
 8014476:	d2fb      	bcs.n	8014470 <__hexnan+0xcc>
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	b91b      	cbnz	r3, 8014484 <__hexnan+0xe0>
 801447c:	4547      	cmp	r7, r8
 801447e:	d126      	bne.n	80144ce <__hexnan+0x12a>
 8014480:	2301      	movs	r3, #1
 8014482:	603b      	str	r3, [r7, #0]
 8014484:	2005      	movs	r0, #5
 8014486:	e025      	b.n	80144d4 <__hexnan+0x130>
 8014488:	3501      	adds	r5, #1
 801448a:	2d08      	cmp	r5, #8
 801448c:	f10b 0b01 	add.w	fp, fp, #1
 8014490:	dd06      	ble.n	80144a0 <__hexnan+0xfc>
 8014492:	4544      	cmp	r4, r8
 8014494:	d9c3      	bls.n	801441e <__hexnan+0x7a>
 8014496:	2300      	movs	r3, #0
 8014498:	f844 3c04 	str.w	r3, [r4, #-4]
 801449c:	2501      	movs	r5, #1
 801449e:	3c04      	subs	r4, #4
 80144a0:	6822      	ldr	r2, [r4, #0]
 80144a2:	f000 000f 	and.w	r0, r0, #15
 80144a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80144aa:	6020      	str	r0, [r4, #0]
 80144ac:	e7b7      	b.n	801441e <__hexnan+0x7a>
 80144ae:	2508      	movs	r5, #8
 80144b0:	e7b5      	b.n	801441e <__hexnan+0x7a>
 80144b2:	9b01      	ldr	r3, [sp, #4]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d0df      	beq.n	8014478 <__hexnan+0xd4>
 80144b8:	f1c3 0320 	rsb	r3, r3, #32
 80144bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80144c0:	40da      	lsrs	r2, r3
 80144c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80144c6:	4013      	ands	r3, r2
 80144c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80144cc:	e7d4      	b.n	8014478 <__hexnan+0xd4>
 80144ce:	3f04      	subs	r7, #4
 80144d0:	e7d2      	b.n	8014478 <__hexnan+0xd4>
 80144d2:	2004      	movs	r0, #4
 80144d4:	b007      	add	sp, #28
 80144d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080144da <__ssputs_r>:
 80144da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144de:	688e      	ldr	r6, [r1, #8]
 80144e0:	461f      	mov	r7, r3
 80144e2:	42be      	cmp	r6, r7
 80144e4:	680b      	ldr	r3, [r1, #0]
 80144e6:	4682      	mov	sl, r0
 80144e8:	460c      	mov	r4, r1
 80144ea:	4690      	mov	r8, r2
 80144ec:	d82c      	bhi.n	8014548 <__ssputs_r+0x6e>
 80144ee:	898a      	ldrh	r2, [r1, #12]
 80144f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80144f4:	d026      	beq.n	8014544 <__ssputs_r+0x6a>
 80144f6:	6965      	ldr	r5, [r4, #20]
 80144f8:	6909      	ldr	r1, [r1, #16]
 80144fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80144fe:	eba3 0901 	sub.w	r9, r3, r1
 8014502:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014506:	1c7b      	adds	r3, r7, #1
 8014508:	444b      	add	r3, r9
 801450a:	106d      	asrs	r5, r5, #1
 801450c:	429d      	cmp	r5, r3
 801450e:	bf38      	it	cc
 8014510:	461d      	movcc	r5, r3
 8014512:	0553      	lsls	r3, r2, #21
 8014514:	d527      	bpl.n	8014566 <__ssputs_r+0x8c>
 8014516:	4629      	mov	r1, r5
 8014518:	f000 f960 	bl	80147dc <_malloc_r>
 801451c:	4606      	mov	r6, r0
 801451e:	b360      	cbz	r0, 801457a <__ssputs_r+0xa0>
 8014520:	6921      	ldr	r1, [r4, #16]
 8014522:	464a      	mov	r2, r9
 8014524:	f7fe fde8 	bl	80130f8 <memcpy>
 8014528:	89a3      	ldrh	r3, [r4, #12]
 801452a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801452e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014532:	81a3      	strh	r3, [r4, #12]
 8014534:	6126      	str	r6, [r4, #16]
 8014536:	6165      	str	r5, [r4, #20]
 8014538:	444e      	add	r6, r9
 801453a:	eba5 0509 	sub.w	r5, r5, r9
 801453e:	6026      	str	r6, [r4, #0]
 8014540:	60a5      	str	r5, [r4, #8]
 8014542:	463e      	mov	r6, r7
 8014544:	42be      	cmp	r6, r7
 8014546:	d900      	bls.n	801454a <__ssputs_r+0x70>
 8014548:	463e      	mov	r6, r7
 801454a:	6820      	ldr	r0, [r4, #0]
 801454c:	4632      	mov	r2, r6
 801454e:	4641      	mov	r1, r8
 8014550:	f000 ffbc 	bl	80154cc <memmove>
 8014554:	68a3      	ldr	r3, [r4, #8]
 8014556:	1b9b      	subs	r3, r3, r6
 8014558:	60a3      	str	r3, [r4, #8]
 801455a:	6823      	ldr	r3, [r4, #0]
 801455c:	4433      	add	r3, r6
 801455e:	6023      	str	r3, [r4, #0]
 8014560:	2000      	movs	r0, #0
 8014562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014566:	462a      	mov	r2, r5
 8014568:	f000 ff74 	bl	8015454 <_realloc_r>
 801456c:	4606      	mov	r6, r0
 801456e:	2800      	cmp	r0, #0
 8014570:	d1e0      	bne.n	8014534 <__ssputs_r+0x5a>
 8014572:	6921      	ldr	r1, [r4, #16]
 8014574:	4650      	mov	r0, sl
 8014576:	f001 f84d 	bl	8015614 <_free_r>
 801457a:	230c      	movs	r3, #12
 801457c:	f8ca 3000 	str.w	r3, [sl]
 8014580:	89a3      	ldrh	r3, [r4, #12]
 8014582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014586:	81a3      	strh	r3, [r4, #12]
 8014588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801458c:	e7e9      	b.n	8014562 <__ssputs_r+0x88>
	...

08014590 <_svfiprintf_r>:
 8014590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014594:	4698      	mov	r8, r3
 8014596:	898b      	ldrh	r3, [r1, #12]
 8014598:	061b      	lsls	r3, r3, #24
 801459a:	b09d      	sub	sp, #116	; 0x74
 801459c:	4607      	mov	r7, r0
 801459e:	460d      	mov	r5, r1
 80145a0:	4614      	mov	r4, r2
 80145a2:	d50e      	bpl.n	80145c2 <_svfiprintf_r+0x32>
 80145a4:	690b      	ldr	r3, [r1, #16]
 80145a6:	b963      	cbnz	r3, 80145c2 <_svfiprintf_r+0x32>
 80145a8:	2140      	movs	r1, #64	; 0x40
 80145aa:	f000 f917 	bl	80147dc <_malloc_r>
 80145ae:	6028      	str	r0, [r5, #0]
 80145b0:	6128      	str	r0, [r5, #16]
 80145b2:	b920      	cbnz	r0, 80145be <_svfiprintf_r+0x2e>
 80145b4:	230c      	movs	r3, #12
 80145b6:	603b      	str	r3, [r7, #0]
 80145b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145bc:	e0d0      	b.n	8014760 <_svfiprintf_r+0x1d0>
 80145be:	2340      	movs	r3, #64	; 0x40
 80145c0:	616b      	str	r3, [r5, #20]
 80145c2:	2300      	movs	r3, #0
 80145c4:	9309      	str	r3, [sp, #36]	; 0x24
 80145c6:	2320      	movs	r3, #32
 80145c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80145cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80145d0:	2330      	movs	r3, #48	; 0x30
 80145d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014778 <_svfiprintf_r+0x1e8>
 80145d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80145da:	f04f 0901 	mov.w	r9, #1
 80145de:	4623      	mov	r3, r4
 80145e0:	469a      	mov	sl, r3
 80145e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145e6:	b10a      	cbz	r2, 80145ec <_svfiprintf_r+0x5c>
 80145e8:	2a25      	cmp	r2, #37	; 0x25
 80145ea:	d1f9      	bne.n	80145e0 <_svfiprintf_r+0x50>
 80145ec:	ebba 0b04 	subs.w	fp, sl, r4
 80145f0:	d00b      	beq.n	801460a <_svfiprintf_r+0x7a>
 80145f2:	465b      	mov	r3, fp
 80145f4:	4622      	mov	r2, r4
 80145f6:	4629      	mov	r1, r5
 80145f8:	4638      	mov	r0, r7
 80145fa:	f7ff ff6e 	bl	80144da <__ssputs_r>
 80145fe:	3001      	adds	r0, #1
 8014600:	f000 80a9 	beq.w	8014756 <_svfiprintf_r+0x1c6>
 8014604:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014606:	445a      	add	r2, fp
 8014608:	9209      	str	r2, [sp, #36]	; 0x24
 801460a:	f89a 3000 	ldrb.w	r3, [sl]
 801460e:	2b00      	cmp	r3, #0
 8014610:	f000 80a1 	beq.w	8014756 <_svfiprintf_r+0x1c6>
 8014614:	2300      	movs	r3, #0
 8014616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801461a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801461e:	f10a 0a01 	add.w	sl, sl, #1
 8014622:	9304      	str	r3, [sp, #16]
 8014624:	9307      	str	r3, [sp, #28]
 8014626:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801462a:	931a      	str	r3, [sp, #104]	; 0x68
 801462c:	4654      	mov	r4, sl
 801462e:	2205      	movs	r2, #5
 8014630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014634:	4850      	ldr	r0, [pc, #320]	; (8014778 <_svfiprintf_r+0x1e8>)
 8014636:	f7eb fdcb 	bl	80001d0 <memchr>
 801463a:	9a04      	ldr	r2, [sp, #16]
 801463c:	b9d8      	cbnz	r0, 8014676 <_svfiprintf_r+0xe6>
 801463e:	06d0      	lsls	r0, r2, #27
 8014640:	bf44      	itt	mi
 8014642:	2320      	movmi	r3, #32
 8014644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014648:	0711      	lsls	r1, r2, #28
 801464a:	bf44      	itt	mi
 801464c:	232b      	movmi	r3, #43	; 0x2b
 801464e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014652:	f89a 3000 	ldrb.w	r3, [sl]
 8014656:	2b2a      	cmp	r3, #42	; 0x2a
 8014658:	d015      	beq.n	8014686 <_svfiprintf_r+0xf6>
 801465a:	9a07      	ldr	r2, [sp, #28]
 801465c:	4654      	mov	r4, sl
 801465e:	2000      	movs	r0, #0
 8014660:	f04f 0c0a 	mov.w	ip, #10
 8014664:	4621      	mov	r1, r4
 8014666:	f811 3b01 	ldrb.w	r3, [r1], #1
 801466a:	3b30      	subs	r3, #48	; 0x30
 801466c:	2b09      	cmp	r3, #9
 801466e:	d94d      	bls.n	801470c <_svfiprintf_r+0x17c>
 8014670:	b1b0      	cbz	r0, 80146a0 <_svfiprintf_r+0x110>
 8014672:	9207      	str	r2, [sp, #28]
 8014674:	e014      	b.n	80146a0 <_svfiprintf_r+0x110>
 8014676:	eba0 0308 	sub.w	r3, r0, r8
 801467a:	fa09 f303 	lsl.w	r3, r9, r3
 801467e:	4313      	orrs	r3, r2
 8014680:	9304      	str	r3, [sp, #16]
 8014682:	46a2      	mov	sl, r4
 8014684:	e7d2      	b.n	801462c <_svfiprintf_r+0x9c>
 8014686:	9b03      	ldr	r3, [sp, #12]
 8014688:	1d19      	adds	r1, r3, #4
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	9103      	str	r1, [sp, #12]
 801468e:	2b00      	cmp	r3, #0
 8014690:	bfbb      	ittet	lt
 8014692:	425b      	neglt	r3, r3
 8014694:	f042 0202 	orrlt.w	r2, r2, #2
 8014698:	9307      	strge	r3, [sp, #28]
 801469a:	9307      	strlt	r3, [sp, #28]
 801469c:	bfb8      	it	lt
 801469e:	9204      	strlt	r2, [sp, #16]
 80146a0:	7823      	ldrb	r3, [r4, #0]
 80146a2:	2b2e      	cmp	r3, #46	; 0x2e
 80146a4:	d10c      	bne.n	80146c0 <_svfiprintf_r+0x130>
 80146a6:	7863      	ldrb	r3, [r4, #1]
 80146a8:	2b2a      	cmp	r3, #42	; 0x2a
 80146aa:	d134      	bne.n	8014716 <_svfiprintf_r+0x186>
 80146ac:	9b03      	ldr	r3, [sp, #12]
 80146ae:	1d1a      	adds	r2, r3, #4
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	9203      	str	r2, [sp, #12]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	bfb8      	it	lt
 80146b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80146bc:	3402      	adds	r4, #2
 80146be:	9305      	str	r3, [sp, #20]
 80146c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014788 <_svfiprintf_r+0x1f8>
 80146c4:	7821      	ldrb	r1, [r4, #0]
 80146c6:	2203      	movs	r2, #3
 80146c8:	4650      	mov	r0, sl
 80146ca:	f7eb fd81 	bl	80001d0 <memchr>
 80146ce:	b138      	cbz	r0, 80146e0 <_svfiprintf_r+0x150>
 80146d0:	9b04      	ldr	r3, [sp, #16]
 80146d2:	eba0 000a 	sub.w	r0, r0, sl
 80146d6:	2240      	movs	r2, #64	; 0x40
 80146d8:	4082      	lsls	r2, r0
 80146da:	4313      	orrs	r3, r2
 80146dc:	3401      	adds	r4, #1
 80146de:	9304      	str	r3, [sp, #16]
 80146e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146e4:	4825      	ldr	r0, [pc, #148]	; (801477c <_svfiprintf_r+0x1ec>)
 80146e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80146ea:	2206      	movs	r2, #6
 80146ec:	f7eb fd70 	bl	80001d0 <memchr>
 80146f0:	2800      	cmp	r0, #0
 80146f2:	d038      	beq.n	8014766 <_svfiprintf_r+0x1d6>
 80146f4:	4b22      	ldr	r3, [pc, #136]	; (8014780 <_svfiprintf_r+0x1f0>)
 80146f6:	bb1b      	cbnz	r3, 8014740 <_svfiprintf_r+0x1b0>
 80146f8:	9b03      	ldr	r3, [sp, #12]
 80146fa:	3307      	adds	r3, #7
 80146fc:	f023 0307 	bic.w	r3, r3, #7
 8014700:	3308      	adds	r3, #8
 8014702:	9303      	str	r3, [sp, #12]
 8014704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014706:	4433      	add	r3, r6
 8014708:	9309      	str	r3, [sp, #36]	; 0x24
 801470a:	e768      	b.n	80145de <_svfiprintf_r+0x4e>
 801470c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014710:	460c      	mov	r4, r1
 8014712:	2001      	movs	r0, #1
 8014714:	e7a6      	b.n	8014664 <_svfiprintf_r+0xd4>
 8014716:	2300      	movs	r3, #0
 8014718:	3401      	adds	r4, #1
 801471a:	9305      	str	r3, [sp, #20]
 801471c:	4619      	mov	r1, r3
 801471e:	f04f 0c0a 	mov.w	ip, #10
 8014722:	4620      	mov	r0, r4
 8014724:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014728:	3a30      	subs	r2, #48	; 0x30
 801472a:	2a09      	cmp	r2, #9
 801472c:	d903      	bls.n	8014736 <_svfiprintf_r+0x1a6>
 801472e:	2b00      	cmp	r3, #0
 8014730:	d0c6      	beq.n	80146c0 <_svfiprintf_r+0x130>
 8014732:	9105      	str	r1, [sp, #20]
 8014734:	e7c4      	b.n	80146c0 <_svfiprintf_r+0x130>
 8014736:	fb0c 2101 	mla	r1, ip, r1, r2
 801473a:	4604      	mov	r4, r0
 801473c:	2301      	movs	r3, #1
 801473e:	e7f0      	b.n	8014722 <_svfiprintf_r+0x192>
 8014740:	ab03      	add	r3, sp, #12
 8014742:	9300      	str	r3, [sp, #0]
 8014744:	462a      	mov	r2, r5
 8014746:	4b0f      	ldr	r3, [pc, #60]	; (8014784 <_svfiprintf_r+0x1f4>)
 8014748:	a904      	add	r1, sp, #16
 801474a:	4638      	mov	r0, r7
 801474c:	f7fc ff44 	bl	80115d8 <_printf_float>
 8014750:	1c42      	adds	r2, r0, #1
 8014752:	4606      	mov	r6, r0
 8014754:	d1d6      	bne.n	8014704 <_svfiprintf_r+0x174>
 8014756:	89ab      	ldrh	r3, [r5, #12]
 8014758:	065b      	lsls	r3, r3, #25
 801475a:	f53f af2d 	bmi.w	80145b8 <_svfiprintf_r+0x28>
 801475e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014760:	b01d      	add	sp, #116	; 0x74
 8014762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014766:	ab03      	add	r3, sp, #12
 8014768:	9300      	str	r3, [sp, #0]
 801476a:	462a      	mov	r2, r5
 801476c:	4b05      	ldr	r3, [pc, #20]	; (8014784 <_svfiprintf_r+0x1f4>)
 801476e:	a904      	add	r1, sp, #16
 8014770:	4638      	mov	r0, r7
 8014772:	f7fd f9d5 	bl	8011b20 <_printf_i>
 8014776:	e7eb      	b.n	8014750 <_svfiprintf_r+0x1c0>
 8014778:	08018416 	.word	0x08018416
 801477c:	08018420 	.word	0x08018420
 8014780:	080115d9 	.word	0x080115d9
 8014784:	080144db 	.word	0x080144db
 8014788:	0801841c 	.word	0x0801841c

0801478c <malloc>:
 801478c:	4b02      	ldr	r3, [pc, #8]	; (8014798 <malloc+0xc>)
 801478e:	4601      	mov	r1, r0
 8014790:	6818      	ldr	r0, [r3, #0]
 8014792:	f000 b823 	b.w	80147dc <_malloc_r>
 8014796:	bf00      	nop
 8014798:	200001ec 	.word	0x200001ec

0801479c <sbrk_aligned>:
 801479c:	b570      	push	{r4, r5, r6, lr}
 801479e:	4e0e      	ldr	r6, [pc, #56]	; (80147d8 <sbrk_aligned+0x3c>)
 80147a0:	460c      	mov	r4, r1
 80147a2:	6831      	ldr	r1, [r6, #0]
 80147a4:	4605      	mov	r5, r0
 80147a6:	b911      	cbnz	r1, 80147ae <sbrk_aligned+0x12>
 80147a8:	f000 fede 	bl	8015568 <_sbrk_r>
 80147ac:	6030      	str	r0, [r6, #0]
 80147ae:	4621      	mov	r1, r4
 80147b0:	4628      	mov	r0, r5
 80147b2:	f000 fed9 	bl	8015568 <_sbrk_r>
 80147b6:	1c43      	adds	r3, r0, #1
 80147b8:	d00a      	beq.n	80147d0 <sbrk_aligned+0x34>
 80147ba:	1cc4      	adds	r4, r0, #3
 80147bc:	f024 0403 	bic.w	r4, r4, #3
 80147c0:	42a0      	cmp	r0, r4
 80147c2:	d007      	beq.n	80147d4 <sbrk_aligned+0x38>
 80147c4:	1a21      	subs	r1, r4, r0
 80147c6:	4628      	mov	r0, r5
 80147c8:	f000 fece 	bl	8015568 <_sbrk_r>
 80147cc:	3001      	adds	r0, #1
 80147ce:	d101      	bne.n	80147d4 <sbrk_aligned+0x38>
 80147d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80147d4:	4620      	mov	r0, r4
 80147d6:	bd70      	pop	{r4, r5, r6, pc}
 80147d8:	20003040 	.word	0x20003040

080147dc <_malloc_r>:
 80147dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147e0:	1ccd      	adds	r5, r1, #3
 80147e2:	f025 0503 	bic.w	r5, r5, #3
 80147e6:	3508      	adds	r5, #8
 80147e8:	2d0c      	cmp	r5, #12
 80147ea:	bf38      	it	cc
 80147ec:	250c      	movcc	r5, #12
 80147ee:	2d00      	cmp	r5, #0
 80147f0:	4607      	mov	r7, r0
 80147f2:	db01      	blt.n	80147f8 <_malloc_r+0x1c>
 80147f4:	42a9      	cmp	r1, r5
 80147f6:	d905      	bls.n	8014804 <_malloc_r+0x28>
 80147f8:	230c      	movs	r3, #12
 80147fa:	603b      	str	r3, [r7, #0]
 80147fc:	2600      	movs	r6, #0
 80147fe:	4630      	mov	r0, r6
 8014800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014804:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80148d8 <_malloc_r+0xfc>
 8014808:	f000 f928 	bl	8014a5c <__malloc_lock>
 801480c:	f8d8 3000 	ldr.w	r3, [r8]
 8014810:	461c      	mov	r4, r3
 8014812:	bb5c      	cbnz	r4, 801486c <_malloc_r+0x90>
 8014814:	4629      	mov	r1, r5
 8014816:	4638      	mov	r0, r7
 8014818:	f7ff ffc0 	bl	801479c <sbrk_aligned>
 801481c:	1c43      	adds	r3, r0, #1
 801481e:	4604      	mov	r4, r0
 8014820:	d155      	bne.n	80148ce <_malloc_r+0xf2>
 8014822:	f8d8 4000 	ldr.w	r4, [r8]
 8014826:	4626      	mov	r6, r4
 8014828:	2e00      	cmp	r6, #0
 801482a:	d145      	bne.n	80148b8 <_malloc_r+0xdc>
 801482c:	2c00      	cmp	r4, #0
 801482e:	d048      	beq.n	80148c2 <_malloc_r+0xe6>
 8014830:	6823      	ldr	r3, [r4, #0]
 8014832:	4631      	mov	r1, r6
 8014834:	4638      	mov	r0, r7
 8014836:	eb04 0903 	add.w	r9, r4, r3
 801483a:	f000 fe95 	bl	8015568 <_sbrk_r>
 801483e:	4581      	cmp	r9, r0
 8014840:	d13f      	bne.n	80148c2 <_malloc_r+0xe6>
 8014842:	6821      	ldr	r1, [r4, #0]
 8014844:	1a6d      	subs	r5, r5, r1
 8014846:	4629      	mov	r1, r5
 8014848:	4638      	mov	r0, r7
 801484a:	f7ff ffa7 	bl	801479c <sbrk_aligned>
 801484e:	3001      	adds	r0, #1
 8014850:	d037      	beq.n	80148c2 <_malloc_r+0xe6>
 8014852:	6823      	ldr	r3, [r4, #0]
 8014854:	442b      	add	r3, r5
 8014856:	6023      	str	r3, [r4, #0]
 8014858:	f8d8 3000 	ldr.w	r3, [r8]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d038      	beq.n	80148d2 <_malloc_r+0xf6>
 8014860:	685a      	ldr	r2, [r3, #4]
 8014862:	42a2      	cmp	r2, r4
 8014864:	d12b      	bne.n	80148be <_malloc_r+0xe2>
 8014866:	2200      	movs	r2, #0
 8014868:	605a      	str	r2, [r3, #4]
 801486a:	e00f      	b.n	801488c <_malloc_r+0xb0>
 801486c:	6822      	ldr	r2, [r4, #0]
 801486e:	1b52      	subs	r2, r2, r5
 8014870:	d41f      	bmi.n	80148b2 <_malloc_r+0xd6>
 8014872:	2a0b      	cmp	r2, #11
 8014874:	d917      	bls.n	80148a6 <_malloc_r+0xca>
 8014876:	1961      	adds	r1, r4, r5
 8014878:	42a3      	cmp	r3, r4
 801487a:	6025      	str	r5, [r4, #0]
 801487c:	bf18      	it	ne
 801487e:	6059      	strne	r1, [r3, #4]
 8014880:	6863      	ldr	r3, [r4, #4]
 8014882:	bf08      	it	eq
 8014884:	f8c8 1000 	streq.w	r1, [r8]
 8014888:	5162      	str	r2, [r4, r5]
 801488a:	604b      	str	r3, [r1, #4]
 801488c:	4638      	mov	r0, r7
 801488e:	f104 060b 	add.w	r6, r4, #11
 8014892:	f000 f8e9 	bl	8014a68 <__malloc_unlock>
 8014896:	f026 0607 	bic.w	r6, r6, #7
 801489a:	1d23      	adds	r3, r4, #4
 801489c:	1af2      	subs	r2, r6, r3
 801489e:	d0ae      	beq.n	80147fe <_malloc_r+0x22>
 80148a0:	1b9b      	subs	r3, r3, r6
 80148a2:	50a3      	str	r3, [r4, r2]
 80148a4:	e7ab      	b.n	80147fe <_malloc_r+0x22>
 80148a6:	42a3      	cmp	r3, r4
 80148a8:	6862      	ldr	r2, [r4, #4]
 80148aa:	d1dd      	bne.n	8014868 <_malloc_r+0x8c>
 80148ac:	f8c8 2000 	str.w	r2, [r8]
 80148b0:	e7ec      	b.n	801488c <_malloc_r+0xb0>
 80148b2:	4623      	mov	r3, r4
 80148b4:	6864      	ldr	r4, [r4, #4]
 80148b6:	e7ac      	b.n	8014812 <_malloc_r+0x36>
 80148b8:	4634      	mov	r4, r6
 80148ba:	6876      	ldr	r6, [r6, #4]
 80148bc:	e7b4      	b.n	8014828 <_malloc_r+0x4c>
 80148be:	4613      	mov	r3, r2
 80148c0:	e7cc      	b.n	801485c <_malloc_r+0x80>
 80148c2:	230c      	movs	r3, #12
 80148c4:	603b      	str	r3, [r7, #0]
 80148c6:	4638      	mov	r0, r7
 80148c8:	f000 f8ce 	bl	8014a68 <__malloc_unlock>
 80148cc:	e797      	b.n	80147fe <_malloc_r+0x22>
 80148ce:	6025      	str	r5, [r4, #0]
 80148d0:	e7dc      	b.n	801488c <_malloc_r+0xb0>
 80148d2:	605b      	str	r3, [r3, #4]
 80148d4:	deff      	udf	#255	; 0xff
 80148d6:	bf00      	nop
 80148d8:	2000303c 	.word	0x2000303c

080148dc <__ascii_mbtowc>:
 80148dc:	b082      	sub	sp, #8
 80148de:	b901      	cbnz	r1, 80148e2 <__ascii_mbtowc+0x6>
 80148e0:	a901      	add	r1, sp, #4
 80148e2:	b142      	cbz	r2, 80148f6 <__ascii_mbtowc+0x1a>
 80148e4:	b14b      	cbz	r3, 80148fa <__ascii_mbtowc+0x1e>
 80148e6:	7813      	ldrb	r3, [r2, #0]
 80148e8:	600b      	str	r3, [r1, #0]
 80148ea:	7812      	ldrb	r2, [r2, #0]
 80148ec:	1e10      	subs	r0, r2, #0
 80148ee:	bf18      	it	ne
 80148f0:	2001      	movne	r0, #1
 80148f2:	b002      	add	sp, #8
 80148f4:	4770      	bx	lr
 80148f6:	4610      	mov	r0, r2
 80148f8:	e7fb      	b.n	80148f2 <__ascii_mbtowc+0x16>
 80148fa:	f06f 0001 	mvn.w	r0, #1
 80148fe:	e7f8      	b.n	80148f2 <__ascii_mbtowc+0x16>

08014900 <__sflush_r>:
 8014900:	898a      	ldrh	r2, [r1, #12]
 8014902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014906:	4605      	mov	r5, r0
 8014908:	0710      	lsls	r0, r2, #28
 801490a:	460c      	mov	r4, r1
 801490c:	d458      	bmi.n	80149c0 <__sflush_r+0xc0>
 801490e:	684b      	ldr	r3, [r1, #4]
 8014910:	2b00      	cmp	r3, #0
 8014912:	dc05      	bgt.n	8014920 <__sflush_r+0x20>
 8014914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014916:	2b00      	cmp	r3, #0
 8014918:	dc02      	bgt.n	8014920 <__sflush_r+0x20>
 801491a:	2000      	movs	r0, #0
 801491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014922:	2e00      	cmp	r6, #0
 8014924:	d0f9      	beq.n	801491a <__sflush_r+0x1a>
 8014926:	2300      	movs	r3, #0
 8014928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801492c:	682f      	ldr	r7, [r5, #0]
 801492e:	6a21      	ldr	r1, [r4, #32]
 8014930:	602b      	str	r3, [r5, #0]
 8014932:	d032      	beq.n	801499a <__sflush_r+0x9a>
 8014934:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014936:	89a3      	ldrh	r3, [r4, #12]
 8014938:	075a      	lsls	r2, r3, #29
 801493a:	d505      	bpl.n	8014948 <__sflush_r+0x48>
 801493c:	6863      	ldr	r3, [r4, #4]
 801493e:	1ac0      	subs	r0, r0, r3
 8014940:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014942:	b10b      	cbz	r3, 8014948 <__sflush_r+0x48>
 8014944:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014946:	1ac0      	subs	r0, r0, r3
 8014948:	2300      	movs	r3, #0
 801494a:	4602      	mov	r2, r0
 801494c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801494e:	6a21      	ldr	r1, [r4, #32]
 8014950:	4628      	mov	r0, r5
 8014952:	47b0      	blx	r6
 8014954:	1c43      	adds	r3, r0, #1
 8014956:	89a3      	ldrh	r3, [r4, #12]
 8014958:	d106      	bne.n	8014968 <__sflush_r+0x68>
 801495a:	6829      	ldr	r1, [r5, #0]
 801495c:	291d      	cmp	r1, #29
 801495e:	d82b      	bhi.n	80149b8 <__sflush_r+0xb8>
 8014960:	4a29      	ldr	r2, [pc, #164]	; (8014a08 <__sflush_r+0x108>)
 8014962:	410a      	asrs	r2, r1
 8014964:	07d6      	lsls	r6, r2, #31
 8014966:	d427      	bmi.n	80149b8 <__sflush_r+0xb8>
 8014968:	2200      	movs	r2, #0
 801496a:	6062      	str	r2, [r4, #4]
 801496c:	04d9      	lsls	r1, r3, #19
 801496e:	6922      	ldr	r2, [r4, #16]
 8014970:	6022      	str	r2, [r4, #0]
 8014972:	d504      	bpl.n	801497e <__sflush_r+0x7e>
 8014974:	1c42      	adds	r2, r0, #1
 8014976:	d101      	bne.n	801497c <__sflush_r+0x7c>
 8014978:	682b      	ldr	r3, [r5, #0]
 801497a:	b903      	cbnz	r3, 801497e <__sflush_r+0x7e>
 801497c:	6560      	str	r0, [r4, #84]	; 0x54
 801497e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014980:	602f      	str	r7, [r5, #0]
 8014982:	2900      	cmp	r1, #0
 8014984:	d0c9      	beq.n	801491a <__sflush_r+0x1a>
 8014986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801498a:	4299      	cmp	r1, r3
 801498c:	d002      	beq.n	8014994 <__sflush_r+0x94>
 801498e:	4628      	mov	r0, r5
 8014990:	f000 fe40 	bl	8015614 <_free_r>
 8014994:	2000      	movs	r0, #0
 8014996:	6360      	str	r0, [r4, #52]	; 0x34
 8014998:	e7c0      	b.n	801491c <__sflush_r+0x1c>
 801499a:	2301      	movs	r3, #1
 801499c:	4628      	mov	r0, r5
 801499e:	47b0      	blx	r6
 80149a0:	1c41      	adds	r1, r0, #1
 80149a2:	d1c8      	bne.n	8014936 <__sflush_r+0x36>
 80149a4:	682b      	ldr	r3, [r5, #0]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d0c5      	beq.n	8014936 <__sflush_r+0x36>
 80149aa:	2b1d      	cmp	r3, #29
 80149ac:	d001      	beq.n	80149b2 <__sflush_r+0xb2>
 80149ae:	2b16      	cmp	r3, #22
 80149b0:	d101      	bne.n	80149b6 <__sflush_r+0xb6>
 80149b2:	602f      	str	r7, [r5, #0]
 80149b4:	e7b1      	b.n	801491a <__sflush_r+0x1a>
 80149b6:	89a3      	ldrh	r3, [r4, #12]
 80149b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149bc:	81a3      	strh	r3, [r4, #12]
 80149be:	e7ad      	b.n	801491c <__sflush_r+0x1c>
 80149c0:	690f      	ldr	r7, [r1, #16]
 80149c2:	2f00      	cmp	r7, #0
 80149c4:	d0a9      	beq.n	801491a <__sflush_r+0x1a>
 80149c6:	0793      	lsls	r3, r2, #30
 80149c8:	680e      	ldr	r6, [r1, #0]
 80149ca:	bf08      	it	eq
 80149cc:	694b      	ldreq	r3, [r1, #20]
 80149ce:	600f      	str	r7, [r1, #0]
 80149d0:	bf18      	it	ne
 80149d2:	2300      	movne	r3, #0
 80149d4:	eba6 0807 	sub.w	r8, r6, r7
 80149d8:	608b      	str	r3, [r1, #8]
 80149da:	f1b8 0f00 	cmp.w	r8, #0
 80149de:	dd9c      	ble.n	801491a <__sflush_r+0x1a>
 80149e0:	6a21      	ldr	r1, [r4, #32]
 80149e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80149e4:	4643      	mov	r3, r8
 80149e6:	463a      	mov	r2, r7
 80149e8:	4628      	mov	r0, r5
 80149ea:	47b0      	blx	r6
 80149ec:	2800      	cmp	r0, #0
 80149ee:	dc06      	bgt.n	80149fe <__sflush_r+0xfe>
 80149f0:	89a3      	ldrh	r3, [r4, #12]
 80149f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149f6:	81a3      	strh	r3, [r4, #12]
 80149f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149fc:	e78e      	b.n	801491c <__sflush_r+0x1c>
 80149fe:	4407      	add	r7, r0
 8014a00:	eba8 0800 	sub.w	r8, r8, r0
 8014a04:	e7e9      	b.n	80149da <__sflush_r+0xda>
 8014a06:	bf00      	nop
 8014a08:	dfbffffe 	.word	0xdfbffffe

08014a0c <_fflush_r>:
 8014a0c:	b538      	push	{r3, r4, r5, lr}
 8014a0e:	690b      	ldr	r3, [r1, #16]
 8014a10:	4605      	mov	r5, r0
 8014a12:	460c      	mov	r4, r1
 8014a14:	b913      	cbnz	r3, 8014a1c <_fflush_r+0x10>
 8014a16:	2500      	movs	r5, #0
 8014a18:	4628      	mov	r0, r5
 8014a1a:	bd38      	pop	{r3, r4, r5, pc}
 8014a1c:	b118      	cbz	r0, 8014a26 <_fflush_r+0x1a>
 8014a1e:	6a03      	ldr	r3, [r0, #32]
 8014a20:	b90b      	cbnz	r3, 8014a26 <_fflush_r+0x1a>
 8014a22:	f7fd fc49 	bl	80122b8 <__sinit>
 8014a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d0f3      	beq.n	8014a16 <_fflush_r+0xa>
 8014a2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014a30:	07d0      	lsls	r0, r2, #31
 8014a32:	d404      	bmi.n	8014a3e <_fflush_r+0x32>
 8014a34:	0599      	lsls	r1, r3, #22
 8014a36:	d402      	bmi.n	8014a3e <_fflush_r+0x32>
 8014a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a3a:	f7fe fb5b 	bl	80130f4 <__retarget_lock_acquire_recursive>
 8014a3e:	4628      	mov	r0, r5
 8014a40:	4621      	mov	r1, r4
 8014a42:	f7ff ff5d 	bl	8014900 <__sflush_r>
 8014a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a48:	07da      	lsls	r2, r3, #31
 8014a4a:	4605      	mov	r5, r0
 8014a4c:	d4e4      	bmi.n	8014a18 <_fflush_r+0xc>
 8014a4e:	89a3      	ldrh	r3, [r4, #12]
 8014a50:	059b      	lsls	r3, r3, #22
 8014a52:	d4e1      	bmi.n	8014a18 <_fflush_r+0xc>
 8014a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a56:	f7fe fb4e 	bl	80130f6 <__retarget_lock_release_recursive>
 8014a5a:	e7dd      	b.n	8014a18 <_fflush_r+0xc>

08014a5c <__malloc_lock>:
 8014a5c:	4801      	ldr	r0, [pc, #4]	; (8014a64 <__malloc_lock+0x8>)
 8014a5e:	f7fe bb49 	b.w	80130f4 <__retarget_lock_acquire_recursive>
 8014a62:	bf00      	nop
 8014a64:	20003038 	.word	0x20003038

08014a68 <__malloc_unlock>:
 8014a68:	4801      	ldr	r0, [pc, #4]	; (8014a70 <__malloc_unlock+0x8>)
 8014a6a:	f7fe bb44 	b.w	80130f6 <__retarget_lock_release_recursive>
 8014a6e:	bf00      	nop
 8014a70:	20003038 	.word	0x20003038

08014a74 <_Balloc>:
 8014a74:	b570      	push	{r4, r5, r6, lr}
 8014a76:	69c6      	ldr	r6, [r0, #28]
 8014a78:	4604      	mov	r4, r0
 8014a7a:	460d      	mov	r5, r1
 8014a7c:	b976      	cbnz	r6, 8014a9c <_Balloc+0x28>
 8014a7e:	2010      	movs	r0, #16
 8014a80:	f7ff fe84 	bl	801478c <malloc>
 8014a84:	4602      	mov	r2, r0
 8014a86:	61e0      	str	r0, [r4, #28]
 8014a88:	b920      	cbnz	r0, 8014a94 <_Balloc+0x20>
 8014a8a:	4b18      	ldr	r3, [pc, #96]	; (8014aec <_Balloc+0x78>)
 8014a8c:	4818      	ldr	r0, [pc, #96]	; (8014af0 <_Balloc+0x7c>)
 8014a8e:	216b      	movs	r1, #107	; 0x6b
 8014a90:	f000 fd8c 	bl	80155ac <__assert_func>
 8014a94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014a98:	6006      	str	r6, [r0, #0]
 8014a9a:	60c6      	str	r6, [r0, #12]
 8014a9c:	69e6      	ldr	r6, [r4, #28]
 8014a9e:	68f3      	ldr	r3, [r6, #12]
 8014aa0:	b183      	cbz	r3, 8014ac4 <_Balloc+0x50>
 8014aa2:	69e3      	ldr	r3, [r4, #28]
 8014aa4:	68db      	ldr	r3, [r3, #12]
 8014aa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014aaa:	b9b8      	cbnz	r0, 8014adc <_Balloc+0x68>
 8014aac:	2101      	movs	r1, #1
 8014aae:	fa01 f605 	lsl.w	r6, r1, r5
 8014ab2:	1d72      	adds	r2, r6, #5
 8014ab4:	0092      	lsls	r2, r2, #2
 8014ab6:	4620      	mov	r0, r4
 8014ab8:	f000 fd96 	bl	80155e8 <_calloc_r>
 8014abc:	b160      	cbz	r0, 8014ad8 <_Balloc+0x64>
 8014abe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014ac2:	e00e      	b.n	8014ae2 <_Balloc+0x6e>
 8014ac4:	2221      	movs	r2, #33	; 0x21
 8014ac6:	2104      	movs	r1, #4
 8014ac8:	4620      	mov	r0, r4
 8014aca:	f000 fd8d 	bl	80155e8 <_calloc_r>
 8014ace:	69e3      	ldr	r3, [r4, #28]
 8014ad0:	60f0      	str	r0, [r6, #12]
 8014ad2:	68db      	ldr	r3, [r3, #12]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d1e4      	bne.n	8014aa2 <_Balloc+0x2e>
 8014ad8:	2000      	movs	r0, #0
 8014ada:	bd70      	pop	{r4, r5, r6, pc}
 8014adc:	6802      	ldr	r2, [r0, #0]
 8014ade:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014ae8:	e7f7      	b.n	8014ada <_Balloc+0x66>
 8014aea:	bf00      	nop
 8014aec:	08018336 	.word	0x08018336
 8014af0:	08018427 	.word	0x08018427

08014af4 <_Bfree>:
 8014af4:	b570      	push	{r4, r5, r6, lr}
 8014af6:	69c6      	ldr	r6, [r0, #28]
 8014af8:	4605      	mov	r5, r0
 8014afa:	460c      	mov	r4, r1
 8014afc:	b976      	cbnz	r6, 8014b1c <_Bfree+0x28>
 8014afe:	2010      	movs	r0, #16
 8014b00:	f7ff fe44 	bl	801478c <malloc>
 8014b04:	4602      	mov	r2, r0
 8014b06:	61e8      	str	r0, [r5, #28]
 8014b08:	b920      	cbnz	r0, 8014b14 <_Bfree+0x20>
 8014b0a:	4b09      	ldr	r3, [pc, #36]	; (8014b30 <_Bfree+0x3c>)
 8014b0c:	4809      	ldr	r0, [pc, #36]	; (8014b34 <_Bfree+0x40>)
 8014b0e:	218f      	movs	r1, #143	; 0x8f
 8014b10:	f000 fd4c 	bl	80155ac <__assert_func>
 8014b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014b18:	6006      	str	r6, [r0, #0]
 8014b1a:	60c6      	str	r6, [r0, #12]
 8014b1c:	b13c      	cbz	r4, 8014b2e <_Bfree+0x3a>
 8014b1e:	69eb      	ldr	r3, [r5, #28]
 8014b20:	6862      	ldr	r2, [r4, #4]
 8014b22:	68db      	ldr	r3, [r3, #12]
 8014b24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014b28:	6021      	str	r1, [r4, #0]
 8014b2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014b2e:	bd70      	pop	{r4, r5, r6, pc}
 8014b30:	08018336 	.word	0x08018336
 8014b34:	08018427 	.word	0x08018427

08014b38 <__multadd>:
 8014b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b3c:	690d      	ldr	r5, [r1, #16]
 8014b3e:	4607      	mov	r7, r0
 8014b40:	460c      	mov	r4, r1
 8014b42:	461e      	mov	r6, r3
 8014b44:	f101 0c14 	add.w	ip, r1, #20
 8014b48:	2000      	movs	r0, #0
 8014b4a:	f8dc 3000 	ldr.w	r3, [ip]
 8014b4e:	b299      	uxth	r1, r3
 8014b50:	fb02 6101 	mla	r1, r2, r1, r6
 8014b54:	0c1e      	lsrs	r6, r3, #16
 8014b56:	0c0b      	lsrs	r3, r1, #16
 8014b58:	fb02 3306 	mla	r3, r2, r6, r3
 8014b5c:	b289      	uxth	r1, r1
 8014b5e:	3001      	adds	r0, #1
 8014b60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014b64:	4285      	cmp	r5, r0
 8014b66:	f84c 1b04 	str.w	r1, [ip], #4
 8014b6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014b6e:	dcec      	bgt.n	8014b4a <__multadd+0x12>
 8014b70:	b30e      	cbz	r6, 8014bb6 <__multadd+0x7e>
 8014b72:	68a3      	ldr	r3, [r4, #8]
 8014b74:	42ab      	cmp	r3, r5
 8014b76:	dc19      	bgt.n	8014bac <__multadd+0x74>
 8014b78:	6861      	ldr	r1, [r4, #4]
 8014b7a:	4638      	mov	r0, r7
 8014b7c:	3101      	adds	r1, #1
 8014b7e:	f7ff ff79 	bl	8014a74 <_Balloc>
 8014b82:	4680      	mov	r8, r0
 8014b84:	b928      	cbnz	r0, 8014b92 <__multadd+0x5a>
 8014b86:	4602      	mov	r2, r0
 8014b88:	4b0c      	ldr	r3, [pc, #48]	; (8014bbc <__multadd+0x84>)
 8014b8a:	480d      	ldr	r0, [pc, #52]	; (8014bc0 <__multadd+0x88>)
 8014b8c:	21ba      	movs	r1, #186	; 0xba
 8014b8e:	f000 fd0d 	bl	80155ac <__assert_func>
 8014b92:	6922      	ldr	r2, [r4, #16]
 8014b94:	3202      	adds	r2, #2
 8014b96:	f104 010c 	add.w	r1, r4, #12
 8014b9a:	0092      	lsls	r2, r2, #2
 8014b9c:	300c      	adds	r0, #12
 8014b9e:	f7fe faab 	bl	80130f8 <memcpy>
 8014ba2:	4621      	mov	r1, r4
 8014ba4:	4638      	mov	r0, r7
 8014ba6:	f7ff ffa5 	bl	8014af4 <_Bfree>
 8014baa:	4644      	mov	r4, r8
 8014bac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014bb0:	3501      	adds	r5, #1
 8014bb2:	615e      	str	r6, [r3, #20]
 8014bb4:	6125      	str	r5, [r4, #16]
 8014bb6:	4620      	mov	r0, r4
 8014bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bbc:	080183a5 	.word	0x080183a5
 8014bc0:	08018427 	.word	0x08018427

08014bc4 <__s2b>:
 8014bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bc8:	460c      	mov	r4, r1
 8014bca:	4615      	mov	r5, r2
 8014bcc:	461f      	mov	r7, r3
 8014bce:	2209      	movs	r2, #9
 8014bd0:	3308      	adds	r3, #8
 8014bd2:	4606      	mov	r6, r0
 8014bd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8014bd8:	2100      	movs	r1, #0
 8014bda:	2201      	movs	r2, #1
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	db09      	blt.n	8014bf4 <__s2b+0x30>
 8014be0:	4630      	mov	r0, r6
 8014be2:	f7ff ff47 	bl	8014a74 <_Balloc>
 8014be6:	b940      	cbnz	r0, 8014bfa <__s2b+0x36>
 8014be8:	4602      	mov	r2, r0
 8014bea:	4b19      	ldr	r3, [pc, #100]	; (8014c50 <__s2b+0x8c>)
 8014bec:	4819      	ldr	r0, [pc, #100]	; (8014c54 <__s2b+0x90>)
 8014bee:	21d3      	movs	r1, #211	; 0xd3
 8014bf0:	f000 fcdc 	bl	80155ac <__assert_func>
 8014bf4:	0052      	lsls	r2, r2, #1
 8014bf6:	3101      	adds	r1, #1
 8014bf8:	e7f0      	b.n	8014bdc <__s2b+0x18>
 8014bfa:	9b08      	ldr	r3, [sp, #32]
 8014bfc:	6143      	str	r3, [r0, #20]
 8014bfe:	2d09      	cmp	r5, #9
 8014c00:	f04f 0301 	mov.w	r3, #1
 8014c04:	6103      	str	r3, [r0, #16]
 8014c06:	dd16      	ble.n	8014c36 <__s2b+0x72>
 8014c08:	f104 0909 	add.w	r9, r4, #9
 8014c0c:	46c8      	mov	r8, r9
 8014c0e:	442c      	add	r4, r5
 8014c10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014c14:	4601      	mov	r1, r0
 8014c16:	3b30      	subs	r3, #48	; 0x30
 8014c18:	220a      	movs	r2, #10
 8014c1a:	4630      	mov	r0, r6
 8014c1c:	f7ff ff8c 	bl	8014b38 <__multadd>
 8014c20:	45a0      	cmp	r8, r4
 8014c22:	d1f5      	bne.n	8014c10 <__s2b+0x4c>
 8014c24:	f1a5 0408 	sub.w	r4, r5, #8
 8014c28:	444c      	add	r4, r9
 8014c2a:	1b2d      	subs	r5, r5, r4
 8014c2c:	1963      	adds	r3, r4, r5
 8014c2e:	42bb      	cmp	r3, r7
 8014c30:	db04      	blt.n	8014c3c <__s2b+0x78>
 8014c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c36:	340a      	adds	r4, #10
 8014c38:	2509      	movs	r5, #9
 8014c3a:	e7f6      	b.n	8014c2a <__s2b+0x66>
 8014c3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014c40:	4601      	mov	r1, r0
 8014c42:	3b30      	subs	r3, #48	; 0x30
 8014c44:	220a      	movs	r2, #10
 8014c46:	4630      	mov	r0, r6
 8014c48:	f7ff ff76 	bl	8014b38 <__multadd>
 8014c4c:	e7ee      	b.n	8014c2c <__s2b+0x68>
 8014c4e:	bf00      	nop
 8014c50:	080183a5 	.word	0x080183a5
 8014c54:	08018427 	.word	0x08018427

08014c58 <__hi0bits>:
 8014c58:	0c03      	lsrs	r3, r0, #16
 8014c5a:	041b      	lsls	r3, r3, #16
 8014c5c:	b9d3      	cbnz	r3, 8014c94 <__hi0bits+0x3c>
 8014c5e:	0400      	lsls	r0, r0, #16
 8014c60:	2310      	movs	r3, #16
 8014c62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014c66:	bf04      	itt	eq
 8014c68:	0200      	lsleq	r0, r0, #8
 8014c6a:	3308      	addeq	r3, #8
 8014c6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014c70:	bf04      	itt	eq
 8014c72:	0100      	lsleq	r0, r0, #4
 8014c74:	3304      	addeq	r3, #4
 8014c76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014c7a:	bf04      	itt	eq
 8014c7c:	0080      	lsleq	r0, r0, #2
 8014c7e:	3302      	addeq	r3, #2
 8014c80:	2800      	cmp	r0, #0
 8014c82:	db05      	blt.n	8014c90 <__hi0bits+0x38>
 8014c84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014c88:	f103 0301 	add.w	r3, r3, #1
 8014c8c:	bf08      	it	eq
 8014c8e:	2320      	moveq	r3, #32
 8014c90:	4618      	mov	r0, r3
 8014c92:	4770      	bx	lr
 8014c94:	2300      	movs	r3, #0
 8014c96:	e7e4      	b.n	8014c62 <__hi0bits+0xa>

08014c98 <__lo0bits>:
 8014c98:	6803      	ldr	r3, [r0, #0]
 8014c9a:	f013 0207 	ands.w	r2, r3, #7
 8014c9e:	d00c      	beq.n	8014cba <__lo0bits+0x22>
 8014ca0:	07d9      	lsls	r1, r3, #31
 8014ca2:	d422      	bmi.n	8014cea <__lo0bits+0x52>
 8014ca4:	079a      	lsls	r2, r3, #30
 8014ca6:	bf49      	itett	mi
 8014ca8:	085b      	lsrmi	r3, r3, #1
 8014caa:	089b      	lsrpl	r3, r3, #2
 8014cac:	6003      	strmi	r3, [r0, #0]
 8014cae:	2201      	movmi	r2, #1
 8014cb0:	bf5c      	itt	pl
 8014cb2:	6003      	strpl	r3, [r0, #0]
 8014cb4:	2202      	movpl	r2, #2
 8014cb6:	4610      	mov	r0, r2
 8014cb8:	4770      	bx	lr
 8014cba:	b299      	uxth	r1, r3
 8014cbc:	b909      	cbnz	r1, 8014cc2 <__lo0bits+0x2a>
 8014cbe:	0c1b      	lsrs	r3, r3, #16
 8014cc0:	2210      	movs	r2, #16
 8014cc2:	b2d9      	uxtb	r1, r3
 8014cc4:	b909      	cbnz	r1, 8014cca <__lo0bits+0x32>
 8014cc6:	3208      	adds	r2, #8
 8014cc8:	0a1b      	lsrs	r3, r3, #8
 8014cca:	0719      	lsls	r1, r3, #28
 8014ccc:	bf04      	itt	eq
 8014cce:	091b      	lsreq	r3, r3, #4
 8014cd0:	3204      	addeq	r2, #4
 8014cd2:	0799      	lsls	r1, r3, #30
 8014cd4:	bf04      	itt	eq
 8014cd6:	089b      	lsreq	r3, r3, #2
 8014cd8:	3202      	addeq	r2, #2
 8014cda:	07d9      	lsls	r1, r3, #31
 8014cdc:	d403      	bmi.n	8014ce6 <__lo0bits+0x4e>
 8014cde:	085b      	lsrs	r3, r3, #1
 8014ce0:	f102 0201 	add.w	r2, r2, #1
 8014ce4:	d003      	beq.n	8014cee <__lo0bits+0x56>
 8014ce6:	6003      	str	r3, [r0, #0]
 8014ce8:	e7e5      	b.n	8014cb6 <__lo0bits+0x1e>
 8014cea:	2200      	movs	r2, #0
 8014cec:	e7e3      	b.n	8014cb6 <__lo0bits+0x1e>
 8014cee:	2220      	movs	r2, #32
 8014cf0:	e7e1      	b.n	8014cb6 <__lo0bits+0x1e>
	...

08014cf4 <__i2b>:
 8014cf4:	b510      	push	{r4, lr}
 8014cf6:	460c      	mov	r4, r1
 8014cf8:	2101      	movs	r1, #1
 8014cfa:	f7ff febb 	bl	8014a74 <_Balloc>
 8014cfe:	4602      	mov	r2, r0
 8014d00:	b928      	cbnz	r0, 8014d0e <__i2b+0x1a>
 8014d02:	4b05      	ldr	r3, [pc, #20]	; (8014d18 <__i2b+0x24>)
 8014d04:	4805      	ldr	r0, [pc, #20]	; (8014d1c <__i2b+0x28>)
 8014d06:	f240 1145 	movw	r1, #325	; 0x145
 8014d0a:	f000 fc4f 	bl	80155ac <__assert_func>
 8014d0e:	2301      	movs	r3, #1
 8014d10:	6144      	str	r4, [r0, #20]
 8014d12:	6103      	str	r3, [r0, #16]
 8014d14:	bd10      	pop	{r4, pc}
 8014d16:	bf00      	nop
 8014d18:	080183a5 	.word	0x080183a5
 8014d1c:	08018427 	.word	0x08018427

08014d20 <__multiply>:
 8014d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d24:	4691      	mov	r9, r2
 8014d26:	690a      	ldr	r2, [r1, #16]
 8014d28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014d2c:	429a      	cmp	r2, r3
 8014d2e:	bfb8      	it	lt
 8014d30:	460b      	movlt	r3, r1
 8014d32:	460c      	mov	r4, r1
 8014d34:	bfbc      	itt	lt
 8014d36:	464c      	movlt	r4, r9
 8014d38:	4699      	movlt	r9, r3
 8014d3a:	6927      	ldr	r7, [r4, #16]
 8014d3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014d40:	68a3      	ldr	r3, [r4, #8]
 8014d42:	6861      	ldr	r1, [r4, #4]
 8014d44:	eb07 060a 	add.w	r6, r7, sl
 8014d48:	42b3      	cmp	r3, r6
 8014d4a:	b085      	sub	sp, #20
 8014d4c:	bfb8      	it	lt
 8014d4e:	3101      	addlt	r1, #1
 8014d50:	f7ff fe90 	bl	8014a74 <_Balloc>
 8014d54:	b930      	cbnz	r0, 8014d64 <__multiply+0x44>
 8014d56:	4602      	mov	r2, r0
 8014d58:	4b44      	ldr	r3, [pc, #272]	; (8014e6c <__multiply+0x14c>)
 8014d5a:	4845      	ldr	r0, [pc, #276]	; (8014e70 <__multiply+0x150>)
 8014d5c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014d60:	f000 fc24 	bl	80155ac <__assert_func>
 8014d64:	f100 0514 	add.w	r5, r0, #20
 8014d68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014d6c:	462b      	mov	r3, r5
 8014d6e:	2200      	movs	r2, #0
 8014d70:	4543      	cmp	r3, r8
 8014d72:	d321      	bcc.n	8014db8 <__multiply+0x98>
 8014d74:	f104 0314 	add.w	r3, r4, #20
 8014d78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014d7c:	f109 0314 	add.w	r3, r9, #20
 8014d80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014d84:	9202      	str	r2, [sp, #8]
 8014d86:	1b3a      	subs	r2, r7, r4
 8014d88:	3a15      	subs	r2, #21
 8014d8a:	f022 0203 	bic.w	r2, r2, #3
 8014d8e:	3204      	adds	r2, #4
 8014d90:	f104 0115 	add.w	r1, r4, #21
 8014d94:	428f      	cmp	r7, r1
 8014d96:	bf38      	it	cc
 8014d98:	2204      	movcc	r2, #4
 8014d9a:	9201      	str	r2, [sp, #4]
 8014d9c:	9a02      	ldr	r2, [sp, #8]
 8014d9e:	9303      	str	r3, [sp, #12]
 8014da0:	429a      	cmp	r2, r3
 8014da2:	d80c      	bhi.n	8014dbe <__multiply+0x9e>
 8014da4:	2e00      	cmp	r6, #0
 8014da6:	dd03      	ble.n	8014db0 <__multiply+0x90>
 8014da8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d05b      	beq.n	8014e68 <__multiply+0x148>
 8014db0:	6106      	str	r6, [r0, #16]
 8014db2:	b005      	add	sp, #20
 8014db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014db8:	f843 2b04 	str.w	r2, [r3], #4
 8014dbc:	e7d8      	b.n	8014d70 <__multiply+0x50>
 8014dbe:	f8b3 a000 	ldrh.w	sl, [r3]
 8014dc2:	f1ba 0f00 	cmp.w	sl, #0
 8014dc6:	d024      	beq.n	8014e12 <__multiply+0xf2>
 8014dc8:	f104 0e14 	add.w	lr, r4, #20
 8014dcc:	46a9      	mov	r9, r5
 8014dce:	f04f 0c00 	mov.w	ip, #0
 8014dd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014dd6:	f8d9 1000 	ldr.w	r1, [r9]
 8014dda:	fa1f fb82 	uxth.w	fp, r2
 8014dde:	b289      	uxth	r1, r1
 8014de0:	fb0a 110b 	mla	r1, sl, fp, r1
 8014de4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014de8:	f8d9 2000 	ldr.w	r2, [r9]
 8014dec:	4461      	add	r1, ip
 8014dee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014df2:	fb0a c20b 	mla	r2, sl, fp, ip
 8014df6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014dfa:	b289      	uxth	r1, r1
 8014dfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014e00:	4577      	cmp	r7, lr
 8014e02:	f849 1b04 	str.w	r1, [r9], #4
 8014e06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014e0a:	d8e2      	bhi.n	8014dd2 <__multiply+0xb2>
 8014e0c:	9a01      	ldr	r2, [sp, #4]
 8014e0e:	f845 c002 	str.w	ip, [r5, r2]
 8014e12:	9a03      	ldr	r2, [sp, #12]
 8014e14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014e18:	3304      	adds	r3, #4
 8014e1a:	f1b9 0f00 	cmp.w	r9, #0
 8014e1e:	d021      	beq.n	8014e64 <__multiply+0x144>
 8014e20:	6829      	ldr	r1, [r5, #0]
 8014e22:	f104 0c14 	add.w	ip, r4, #20
 8014e26:	46ae      	mov	lr, r5
 8014e28:	f04f 0a00 	mov.w	sl, #0
 8014e2c:	f8bc b000 	ldrh.w	fp, [ip]
 8014e30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014e34:	fb09 220b 	mla	r2, r9, fp, r2
 8014e38:	4452      	add	r2, sl
 8014e3a:	b289      	uxth	r1, r1
 8014e3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014e40:	f84e 1b04 	str.w	r1, [lr], #4
 8014e44:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014e48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014e4c:	f8be 1000 	ldrh.w	r1, [lr]
 8014e50:	fb09 110a 	mla	r1, r9, sl, r1
 8014e54:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014e58:	4567      	cmp	r7, ip
 8014e5a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014e5e:	d8e5      	bhi.n	8014e2c <__multiply+0x10c>
 8014e60:	9a01      	ldr	r2, [sp, #4]
 8014e62:	50a9      	str	r1, [r5, r2]
 8014e64:	3504      	adds	r5, #4
 8014e66:	e799      	b.n	8014d9c <__multiply+0x7c>
 8014e68:	3e01      	subs	r6, #1
 8014e6a:	e79b      	b.n	8014da4 <__multiply+0x84>
 8014e6c:	080183a5 	.word	0x080183a5
 8014e70:	08018427 	.word	0x08018427

08014e74 <__pow5mult>:
 8014e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e78:	4615      	mov	r5, r2
 8014e7a:	f012 0203 	ands.w	r2, r2, #3
 8014e7e:	4606      	mov	r6, r0
 8014e80:	460f      	mov	r7, r1
 8014e82:	d007      	beq.n	8014e94 <__pow5mult+0x20>
 8014e84:	4c25      	ldr	r4, [pc, #148]	; (8014f1c <__pow5mult+0xa8>)
 8014e86:	3a01      	subs	r2, #1
 8014e88:	2300      	movs	r3, #0
 8014e8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014e8e:	f7ff fe53 	bl	8014b38 <__multadd>
 8014e92:	4607      	mov	r7, r0
 8014e94:	10ad      	asrs	r5, r5, #2
 8014e96:	d03d      	beq.n	8014f14 <__pow5mult+0xa0>
 8014e98:	69f4      	ldr	r4, [r6, #28]
 8014e9a:	b97c      	cbnz	r4, 8014ebc <__pow5mult+0x48>
 8014e9c:	2010      	movs	r0, #16
 8014e9e:	f7ff fc75 	bl	801478c <malloc>
 8014ea2:	4602      	mov	r2, r0
 8014ea4:	61f0      	str	r0, [r6, #28]
 8014ea6:	b928      	cbnz	r0, 8014eb4 <__pow5mult+0x40>
 8014ea8:	4b1d      	ldr	r3, [pc, #116]	; (8014f20 <__pow5mult+0xac>)
 8014eaa:	481e      	ldr	r0, [pc, #120]	; (8014f24 <__pow5mult+0xb0>)
 8014eac:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014eb0:	f000 fb7c 	bl	80155ac <__assert_func>
 8014eb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014eb8:	6004      	str	r4, [r0, #0]
 8014eba:	60c4      	str	r4, [r0, #12]
 8014ebc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014ec0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014ec4:	b94c      	cbnz	r4, 8014eda <__pow5mult+0x66>
 8014ec6:	f240 2171 	movw	r1, #625	; 0x271
 8014eca:	4630      	mov	r0, r6
 8014ecc:	f7ff ff12 	bl	8014cf4 <__i2b>
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	f8c8 0008 	str.w	r0, [r8, #8]
 8014ed6:	4604      	mov	r4, r0
 8014ed8:	6003      	str	r3, [r0, #0]
 8014eda:	f04f 0900 	mov.w	r9, #0
 8014ede:	07eb      	lsls	r3, r5, #31
 8014ee0:	d50a      	bpl.n	8014ef8 <__pow5mult+0x84>
 8014ee2:	4639      	mov	r1, r7
 8014ee4:	4622      	mov	r2, r4
 8014ee6:	4630      	mov	r0, r6
 8014ee8:	f7ff ff1a 	bl	8014d20 <__multiply>
 8014eec:	4639      	mov	r1, r7
 8014eee:	4680      	mov	r8, r0
 8014ef0:	4630      	mov	r0, r6
 8014ef2:	f7ff fdff 	bl	8014af4 <_Bfree>
 8014ef6:	4647      	mov	r7, r8
 8014ef8:	106d      	asrs	r5, r5, #1
 8014efa:	d00b      	beq.n	8014f14 <__pow5mult+0xa0>
 8014efc:	6820      	ldr	r0, [r4, #0]
 8014efe:	b938      	cbnz	r0, 8014f10 <__pow5mult+0x9c>
 8014f00:	4622      	mov	r2, r4
 8014f02:	4621      	mov	r1, r4
 8014f04:	4630      	mov	r0, r6
 8014f06:	f7ff ff0b 	bl	8014d20 <__multiply>
 8014f0a:	6020      	str	r0, [r4, #0]
 8014f0c:	f8c0 9000 	str.w	r9, [r0]
 8014f10:	4604      	mov	r4, r0
 8014f12:	e7e4      	b.n	8014ede <__pow5mult+0x6a>
 8014f14:	4638      	mov	r0, r7
 8014f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f1a:	bf00      	nop
 8014f1c:	08018570 	.word	0x08018570
 8014f20:	08018336 	.word	0x08018336
 8014f24:	08018427 	.word	0x08018427

08014f28 <__lshift>:
 8014f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f2c:	460c      	mov	r4, r1
 8014f2e:	6849      	ldr	r1, [r1, #4]
 8014f30:	6923      	ldr	r3, [r4, #16]
 8014f32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014f36:	68a3      	ldr	r3, [r4, #8]
 8014f38:	4607      	mov	r7, r0
 8014f3a:	4691      	mov	r9, r2
 8014f3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014f40:	f108 0601 	add.w	r6, r8, #1
 8014f44:	42b3      	cmp	r3, r6
 8014f46:	db0b      	blt.n	8014f60 <__lshift+0x38>
 8014f48:	4638      	mov	r0, r7
 8014f4a:	f7ff fd93 	bl	8014a74 <_Balloc>
 8014f4e:	4605      	mov	r5, r0
 8014f50:	b948      	cbnz	r0, 8014f66 <__lshift+0x3e>
 8014f52:	4602      	mov	r2, r0
 8014f54:	4b28      	ldr	r3, [pc, #160]	; (8014ff8 <__lshift+0xd0>)
 8014f56:	4829      	ldr	r0, [pc, #164]	; (8014ffc <__lshift+0xd4>)
 8014f58:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014f5c:	f000 fb26 	bl	80155ac <__assert_func>
 8014f60:	3101      	adds	r1, #1
 8014f62:	005b      	lsls	r3, r3, #1
 8014f64:	e7ee      	b.n	8014f44 <__lshift+0x1c>
 8014f66:	2300      	movs	r3, #0
 8014f68:	f100 0114 	add.w	r1, r0, #20
 8014f6c:	f100 0210 	add.w	r2, r0, #16
 8014f70:	4618      	mov	r0, r3
 8014f72:	4553      	cmp	r3, sl
 8014f74:	db33      	blt.n	8014fde <__lshift+0xb6>
 8014f76:	6920      	ldr	r0, [r4, #16]
 8014f78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014f7c:	f104 0314 	add.w	r3, r4, #20
 8014f80:	f019 091f 	ands.w	r9, r9, #31
 8014f84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014f88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014f8c:	d02b      	beq.n	8014fe6 <__lshift+0xbe>
 8014f8e:	f1c9 0e20 	rsb	lr, r9, #32
 8014f92:	468a      	mov	sl, r1
 8014f94:	2200      	movs	r2, #0
 8014f96:	6818      	ldr	r0, [r3, #0]
 8014f98:	fa00 f009 	lsl.w	r0, r0, r9
 8014f9c:	4310      	orrs	r0, r2
 8014f9e:	f84a 0b04 	str.w	r0, [sl], #4
 8014fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fa6:	459c      	cmp	ip, r3
 8014fa8:	fa22 f20e 	lsr.w	r2, r2, lr
 8014fac:	d8f3      	bhi.n	8014f96 <__lshift+0x6e>
 8014fae:	ebac 0304 	sub.w	r3, ip, r4
 8014fb2:	3b15      	subs	r3, #21
 8014fb4:	f023 0303 	bic.w	r3, r3, #3
 8014fb8:	3304      	adds	r3, #4
 8014fba:	f104 0015 	add.w	r0, r4, #21
 8014fbe:	4584      	cmp	ip, r0
 8014fc0:	bf38      	it	cc
 8014fc2:	2304      	movcc	r3, #4
 8014fc4:	50ca      	str	r2, [r1, r3]
 8014fc6:	b10a      	cbz	r2, 8014fcc <__lshift+0xa4>
 8014fc8:	f108 0602 	add.w	r6, r8, #2
 8014fcc:	3e01      	subs	r6, #1
 8014fce:	4638      	mov	r0, r7
 8014fd0:	612e      	str	r6, [r5, #16]
 8014fd2:	4621      	mov	r1, r4
 8014fd4:	f7ff fd8e 	bl	8014af4 <_Bfree>
 8014fd8:	4628      	mov	r0, r5
 8014fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fde:	f842 0f04 	str.w	r0, [r2, #4]!
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	e7c5      	b.n	8014f72 <__lshift+0x4a>
 8014fe6:	3904      	subs	r1, #4
 8014fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fec:	f841 2f04 	str.w	r2, [r1, #4]!
 8014ff0:	459c      	cmp	ip, r3
 8014ff2:	d8f9      	bhi.n	8014fe8 <__lshift+0xc0>
 8014ff4:	e7ea      	b.n	8014fcc <__lshift+0xa4>
 8014ff6:	bf00      	nop
 8014ff8:	080183a5 	.word	0x080183a5
 8014ffc:	08018427 	.word	0x08018427

08015000 <__mcmp>:
 8015000:	b530      	push	{r4, r5, lr}
 8015002:	6902      	ldr	r2, [r0, #16]
 8015004:	690c      	ldr	r4, [r1, #16]
 8015006:	1b12      	subs	r2, r2, r4
 8015008:	d10e      	bne.n	8015028 <__mcmp+0x28>
 801500a:	f100 0314 	add.w	r3, r0, #20
 801500e:	3114      	adds	r1, #20
 8015010:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015014:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015018:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801501c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015020:	42a5      	cmp	r5, r4
 8015022:	d003      	beq.n	801502c <__mcmp+0x2c>
 8015024:	d305      	bcc.n	8015032 <__mcmp+0x32>
 8015026:	2201      	movs	r2, #1
 8015028:	4610      	mov	r0, r2
 801502a:	bd30      	pop	{r4, r5, pc}
 801502c:	4283      	cmp	r3, r0
 801502e:	d3f3      	bcc.n	8015018 <__mcmp+0x18>
 8015030:	e7fa      	b.n	8015028 <__mcmp+0x28>
 8015032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015036:	e7f7      	b.n	8015028 <__mcmp+0x28>

08015038 <__mdiff>:
 8015038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801503c:	460c      	mov	r4, r1
 801503e:	4606      	mov	r6, r0
 8015040:	4611      	mov	r1, r2
 8015042:	4620      	mov	r0, r4
 8015044:	4690      	mov	r8, r2
 8015046:	f7ff ffdb 	bl	8015000 <__mcmp>
 801504a:	1e05      	subs	r5, r0, #0
 801504c:	d110      	bne.n	8015070 <__mdiff+0x38>
 801504e:	4629      	mov	r1, r5
 8015050:	4630      	mov	r0, r6
 8015052:	f7ff fd0f 	bl	8014a74 <_Balloc>
 8015056:	b930      	cbnz	r0, 8015066 <__mdiff+0x2e>
 8015058:	4b3a      	ldr	r3, [pc, #232]	; (8015144 <__mdiff+0x10c>)
 801505a:	4602      	mov	r2, r0
 801505c:	f240 2137 	movw	r1, #567	; 0x237
 8015060:	4839      	ldr	r0, [pc, #228]	; (8015148 <__mdiff+0x110>)
 8015062:	f000 faa3 	bl	80155ac <__assert_func>
 8015066:	2301      	movs	r3, #1
 8015068:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801506c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015070:	bfa4      	itt	ge
 8015072:	4643      	movge	r3, r8
 8015074:	46a0      	movge	r8, r4
 8015076:	4630      	mov	r0, r6
 8015078:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801507c:	bfa6      	itte	ge
 801507e:	461c      	movge	r4, r3
 8015080:	2500      	movge	r5, #0
 8015082:	2501      	movlt	r5, #1
 8015084:	f7ff fcf6 	bl	8014a74 <_Balloc>
 8015088:	b920      	cbnz	r0, 8015094 <__mdiff+0x5c>
 801508a:	4b2e      	ldr	r3, [pc, #184]	; (8015144 <__mdiff+0x10c>)
 801508c:	4602      	mov	r2, r0
 801508e:	f240 2145 	movw	r1, #581	; 0x245
 8015092:	e7e5      	b.n	8015060 <__mdiff+0x28>
 8015094:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015098:	6926      	ldr	r6, [r4, #16]
 801509a:	60c5      	str	r5, [r0, #12]
 801509c:	f104 0914 	add.w	r9, r4, #20
 80150a0:	f108 0514 	add.w	r5, r8, #20
 80150a4:	f100 0e14 	add.w	lr, r0, #20
 80150a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80150ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80150b0:	f108 0210 	add.w	r2, r8, #16
 80150b4:	46f2      	mov	sl, lr
 80150b6:	2100      	movs	r1, #0
 80150b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80150bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80150c0:	fa11 f88b 	uxtah	r8, r1, fp
 80150c4:	b299      	uxth	r1, r3
 80150c6:	0c1b      	lsrs	r3, r3, #16
 80150c8:	eba8 0801 	sub.w	r8, r8, r1
 80150cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80150d0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80150d4:	fa1f f888 	uxth.w	r8, r8
 80150d8:	1419      	asrs	r1, r3, #16
 80150da:	454e      	cmp	r6, r9
 80150dc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80150e0:	f84a 3b04 	str.w	r3, [sl], #4
 80150e4:	d8e8      	bhi.n	80150b8 <__mdiff+0x80>
 80150e6:	1b33      	subs	r3, r6, r4
 80150e8:	3b15      	subs	r3, #21
 80150ea:	f023 0303 	bic.w	r3, r3, #3
 80150ee:	3304      	adds	r3, #4
 80150f0:	3415      	adds	r4, #21
 80150f2:	42a6      	cmp	r6, r4
 80150f4:	bf38      	it	cc
 80150f6:	2304      	movcc	r3, #4
 80150f8:	441d      	add	r5, r3
 80150fa:	4473      	add	r3, lr
 80150fc:	469e      	mov	lr, r3
 80150fe:	462e      	mov	r6, r5
 8015100:	4566      	cmp	r6, ip
 8015102:	d30e      	bcc.n	8015122 <__mdiff+0xea>
 8015104:	f10c 0203 	add.w	r2, ip, #3
 8015108:	1b52      	subs	r2, r2, r5
 801510a:	f022 0203 	bic.w	r2, r2, #3
 801510e:	3d03      	subs	r5, #3
 8015110:	45ac      	cmp	ip, r5
 8015112:	bf38      	it	cc
 8015114:	2200      	movcc	r2, #0
 8015116:	4413      	add	r3, r2
 8015118:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801511c:	b17a      	cbz	r2, 801513e <__mdiff+0x106>
 801511e:	6107      	str	r7, [r0, #16]
 8015120:	e7a4      	b.n	801506c <__mdiff+0x34>
 8015122:	f856 8b04 	ldr.w	r8, [r6], #4
 8015126:	fa11 f288 	uxtah	r2, r1, r8
 801512a:	1414      	asrs	r4, r2, #16
 801512c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015130:	b292      	uxth	r2, r2
 8015132:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015136:	f84e 2b04 	str.w	r2, [lr], #4
 801513a:	1421      	asrs	r1, r4, #16
 801513c:	e7e0      	b.n	8015100 <__mdiff+0xc8>
 801513e:	3f01      	subs	r7, #1
 8015140:	e7ea      	b.n	8015118 <__mdiff+0xe0>
 8015142:	bf00      	nop
 8015144:	080183a5 	.word	0x080183a5
 8015148:	08018427 	.word	0x08018427

0801514c <__ulp>:
 801514c:	b082      	sub	sp, #8
 801514e:	ed8d 0b00 	vstr	d0, [sp]
 8015152:	9a01      	ldr	r2, [sp, #4]
 8015154:	4b0f      	ldr	r3, [pc, #60]	; (8015194 <__ulp+0x48>)
 8015156:	4013      	ands	r3, r2
 8015158:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801515c:	2b00      	cmp	r3, #0
 801515e:	dc08      	bgt.n	8015172 <__ulp+0x26>
 8015160:	425b      	negs	r3, r3
 8015162:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8015166:	ea4f 5223 	mov.w	r2, r3, asr #20
 801516a:	da04      	bge.n	8015176 <__ulp+0x2a>
 801516c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015170:	4113      	asrs	r3, r2
 8015172:	2200      	movs	r2, #0
 8015174:	e008      	b.n	8015188 <__ulp+0x3c>
 8015176:	f1a2 0314 	sub.w	r3, r2, #20
 801517a:	2b1e      	cmp	r3, #30
 801517c:	bfda      	itte	le
 801517e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8015182:	40da      	lsrle	r2, r3
 8015184:	2201      	movgt	r2, #1
 8015186:	2300      	movs	r3, #0
 8015188:	4619      	mov	r1, r3
 801518a:	4610      	mov	r0, r2
 801518c:	ec41 0b10 	vmov	d0, r0, r1
 8015190:	b002      	add	sp, #8
 8015192:	4770      	bx	lr
 8015194:	7ff00000 	.word	0x7ff00000

08015198 <__b2d>:
 8015198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801519c:	6906      	ldr	r6, [r0, #16]
 801519e:	f100 0814 	add.w	r8, r0, #20
 80151a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80151a6:	1f37      	subs	r7, r6, #4
 80151a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80151ac:	4610      	mov	r0, r2
 80151ae:	f7ff fd53 	bl	8014c58 <__hi0bits>
 80151b2:	f1c0 0320 	rsb	r3, r0, #32
 80151b6:	280a      	cmp	r0, #10
 80151b8:	600b      	str	r3, [r1, #0]
 80151ba:	491b      	ldr	r1, [pc, #108]	; (8015228 <__b2d+0x90>)
 80151bc:	dc15      	bgt.n	80151ea <__b2d+0x52>
 80151be:	f1c0 0c0b 	rsb	ip, r0, #11
 80151c2:	fa22 f30c 	lsr.w	r3, r2, ip
 80151c6:	45b8      	cmp	r8, r7
 80151c8:	ea43 0501 	orr.w	r5, r3, r1
 80151cc:	bf34      	ite	cc
 80151ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80151d2:	2300      	movcs	r3, #0
 80151d4:	3015      	adds	r0, #21
 80151d6:	fa02 f000 	lsl.w	r0, r2, r0
 80151da:	fa23 f30c 	lsr.w	r3, r3, ip
 80151de:	4303      	orrs	r3, r0
 80151e0:	461c      	mov	r4, r3
 80151e2:	ec45 4b10 	vmov	d0, r4, r5
 80151e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151ea:	45b8      	cmp	r8, r7
 80151ec:	bf3a      	itte	cc
 80151ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80151f2:	f1a6 0708 	subcc.w	r7, r6, #8
 80151f6:	2300      	movcs	r3, #0
 80151f8:	380b      	subs	r0, #11
 80151fa:	d012      	beq.n	8015222 <__b2d+0x8a>
 80151fc:	f1c0 0120 	rsb	r1, r0, #32
 8015200:	fa23 f401 	lsr.w	r4, r3, r1
 8015204:	4082      	lsls	r2, r0
 8015206:	4322      	orrs	r2, r4
 8015208:	4547      	cmp	r7, r8
 801520a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801520e:	bf8c      	ite	hi
 8015210:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015214:	2200      	movls	r2, #0
 8015216:	4083      	lsls	r3, r0
 8015218:	40ca      	lsrs	r2, r1
 801521a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801521e:	4313      	orrs	r3, r2
 8015220:	e7de      	b.n	80151e0 <__b2d+0x48>
 8015222:	ea42 0501 	orr.w	r5, r2, r1
 8015226:	e7db      	b.n	80151e0 <__b2d+0x48>
 8015228:	3ff00000 	.word	0x3ff00000

0801522c <__d2b>:
 801522c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015230:	460f      	mov	r7, r1
 8015232:	2101      	movs	r1, #1
 8015234:	ec59 8b10 	vmov	r8, r9, d0
 8015238:	4616      	mov	r6, r2
 801523a:	f7ff fc1b 	bl	8014a74 <_Balloc>
 801523e:	4604      	mov	r4, r0
 8015240:	b930      	cbnz	r0, 8015250 <__d2b+0x24>
 8015242:	4602      	mov	r2, r0
 8015244:	4b24      	ldr	r3, [pc, #144]	; (80152d8 <__d2b+0xac>)
 8015246:	4825      	ldr	r0, [pc, #148]	; (80152dc <__d2b+0xb0>)
 8015248:	f240 310f 	movw	r1, #783	; 0x30f
 801524c:	f000 f9ae 	bl	80155ac <__assert_func>
 8015250:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015254:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015258:	bb2d      	cbnz	r5, 80152a6 <__d2b+0x7a>
 801525a:	9301      	str	r3, [sp, #4]
 801525c:	f1b8 0300 	subs.w	r3, r8, #0
 8015260:	d026      	beq.n	80152b0 <__d2b+0x84>
 8015262:	4668      	mov	r0, sp
 8015264:	9300      	str	r3, [sp, #0]
 8015266:	f7ff fd17 	bl	8014c98 <__lo0bits>
 801526a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801526e:	b1e8      	cbz	r0, 80152ac <__d2b+0x80>
 8015270:	f1c0 0320 	rsb	r3, r0, #32
 8015274:	fa02 f303 	lsl.w	r3, r2, r3
 8015278:	430b      	orrs	r3, r1
 801527a:	40c2      	lsrs	r2, r0
 801527c:	6163      	str	r3, [r4, #20]
 801527e:	9201      	str	r2, [sp, #4]
 8015280:	9b01      	ldr	r3, [sp, #4]
 8015282:	61a3      	str	r3, [r4, #24]
 8015284:	2b00      	cmp	r3, #0
 8015286:	bf14      	ite	ne
 8015288:	2202      	movne	r2, #2
 801528a:	2201      	moveq	r2, #1
 801528c:	6122      	str	r2, [r4, #16]
 801528e:	b1bd      	cbz	r5, 80152c0 <__d2b+0x94>
 8015290:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015294:	4405      	add	r5, r0
 8015296:	603d      	str	r5, [r7, #0]
 8015298:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801529c:	6030      	str	r0, [r6, #0]
 801529e:	4620      	mov	r0, r4
 80152a0:	b003      	add	sp, #12
 80152a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80152aa:	e7d6      	b.n	801525a <__d2b+0x2e>
 80152ac:	6161      	str	r1, [r4, #20]
 80152ae:	e7e7      	b.n	8015280 <__d2b+0x54>
 80152b0:	a801      	add	r0, sp, #4
 80152b2:	f7ff fcf1 	bl	8014c98 <__lo0bits>
 80152b6:	9b01      	ldr	r3, [sp, #4]
 80152b8:	6163      	str	r3, [r4, #20]
 80152ba:	3020      	adds	r0, #32
 80152bc:	2201      	movs	r2, #1
 80152be:	e7e5      	b.n	801528c <__d2b+0x60>
 80152c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80152c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80152c8:	6038      	str	r0, [r7, #0]
 80152ca:	6918      	ldr	r0, [r3, #16]
 80152cc:	f7ff fcc4 	bl	8014c58 <__hi0bits>
 80152d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80152d4:	e7e2      	b.n	801529c <__d2b+0x70>
 80152d6:	bf00      	nop
 80152d8:	080183a5 	.word	0x080183a5
 80152dc:	08018427 	.word	0x08018427

080152e0 <__ratio>:
 80152e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152e4:	4688      	mov	r8, r1
 80152e6:	4669      	mov	r1, sp
 80152e8:	4681      	mov	r9, r0
 80152ea:	f7ff ff55 	bl	8015198 <__b2d>
 80152ee:	a901      	add	r1, sp, #4
 80152f0:	4640      	mov	r0, r8
 80152f2:	ec55 4b10 	vmov	r4, r5, d0
 80152f6:	f7ff ff4f 	bl	8015198 <__b2d>
 80152fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80152fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015302:	eba3 0c02 	sub.w	ip, r3, r2
 8015306:	e9dd 3200 	ldrd	r3, r2, [sp]
 801530a:	1a9b      	subs	r3, r3, r2
 801530c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015310:	ec51 0b10 	vmov	r0, r1, d0
 8015314:	2b00      	cmp	r3, #0
 8015316:	bfd6      	itet	le
 8015318:	460a      	movle	r2, r1
 801531a:	462a      	movgt	r2, r5
 801531c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015320:	468b      	mov	fp, r1
 8015322:	462f      	mov	r7, r5
 8015324:	bfd4      	ite	le
 8015326:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801532a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801532e:	4620      	mov	r0, r4
 8015330:	ee10 2a10 	vmov	r2, s0
 8015334:	465b      	mov	r3, fp
 8015336:	4639      	mov	r1, r7
 8015338:	f7eb fa88 	bl	800084c <__aeabi_ddiv>
 801533c:	ec41 0b10 	vmov	d0, r0, r1
 8015340:	b003      	add	sp, #12
 8015342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015346 <__copybits>:
 8015346:	3901      	subs	r1, #1
 8015348:	b570      	push	{r4, r5, r6, lr}
 801534a:	1149      	asrs	r1, r1, #5
 801534c:	6914      	ldr	r4, [r2, #16]
 801534e:	3101      	adds	r1, #1
 8015350:	f102 0314 	add.w	r3, r2, #20
 8015354:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015358:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801535c:	1f05      	subs	r5, r0, #4
 801535e:	42a3      	cmp	r3, r4
 8015360:	d30c      	bcc.n	801537c <__copybits+0x36>
 8015362:	1aa3      	subs	r3, r4, r2
 8015364:	3b11      	subs	r3, #17
 8015366:	f023 0303 	bic.w	r3, r3, #3
 801536a:	3211      	adds	r2, #17
 801536c:	42a2      	cmp	r2, r4
 801536e:	bf88      	it	hi
 8015370:	2300      	movhi	r3, #0
 8015372:	4418      	add	r0, r3
 8015374:	2300      	movs	r3, #0
 8015376:	4288      	cmp	r0, r1
 8015378:	d305      	bcc.n	8015386 <__copybits+0x40>
 801537a:	bd70      	pop	{r4, r5, r6, pc}
 801537c:	f853 6b04 	ldr.w	r6, [r3], #4
 8015380:	f845 6f04 	str.w	r6, [r5, #4]!
 8015384:	e7eb      	b.n	801535e <__copybits+0x18>
 8015386:	f840 3b04 	str.w	r3, [r0], #4
 801538a:	e7f4      	b.n	8015376 <__copybits+0x30>

0801538c <__any_on>:
 801538c:	f100 0214 	add.w	r2, r0, #20
 8015390:	6900      	ldr	r0, [r0, #16]
 8015392:	114b      	asrs	r3, r1, #5
 8015394:	4298      	cmp	r0, r3
 8015396:	b510      	push	{r4, lr}
 8015398:	db11      	blt.n	80153be <__any_on+0x32>
 801539a:	dd0a      	ble.n	80153b2 <__any_on+0x26>
 801539c:	f011 011f 	ands.w	r1, r1, #31
 80153a0:	d007      	beq.n	80153b2 <__any_on+0x26>
 80153a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80153a6:	fa24 f001 	lsr.w	r0, r4, r1
 80153aa:	fa00 f101 	lsl.w	r1, r0, r1
 80153ae:	428c      	cmp	r4, r1
 80153b0:	d10b      	bne.n	80153ca <__any_on+0x3e>
 80153b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80153b6:	4293      	cmp	r3, r2
 80153b8:	d803      	bhi.n	80153c2 <__any_on+0x36>
 80153ba:	2000      	movs	r0, #0
 80153bc:	bd10      	pop	{r4, pc}
 80153be:	4603      	mov	r3, r0
 80153c0:	e7f7      	b.n	80153b2 <__any_on+0x26>
 80153c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80153c6:	2900      	cmp	r1, #0
 80153c8:	d0f5      	beq.n	80153b6 <__any_on+0x2a>
 80153ca:	2001      	movs	r0, #1
 80153cc:	e7f6      	b.n	80153bc <__any_on+0x30>

080153ce <__sread>:
 80153ce:	b510      	push	{r4, lr}
 80153d0:	460c      	mov	r4, r1
 80153d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153d6:	f000 f8b5 	bl	8015544 <_read_r>
 80153da:	2800      	cmp	r0, #0
 80153dc:	bfab      	itete	ge
 80153de:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80153e0:	89a3      	ldrhlt	r3, [r4, #12]
 80153e2:	181b      	addge	r3, r3, r0
 80153e4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80153e8:	bfac      	ite	ge
 80153ea:	6563      	strge	r3, [r4, #84]	; 0x54
 80153ec:	81a3      	strhlt	r3, [r4, #12]
 80153ee:	bd10      	pop	{r4, pc}

080153f0 <__swrite>:
 80153f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153f4:	461f      	mov	r7, r3
 80153f6:	898b      	ldrh	r3, [r1, #12]
 80153f8:	05db      	lsls	r3, r3, #23
 80153fa:	4605      	mov	r5, r0
 80153fc:	460c      	mov	r4, r1
 80153fe:	4616      	mov	r6, r2
 8015400:	d505      	bpl.n	801540e <__swrite+0x1e>
 8015402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015406:	2302      	movs	r3, #2
 8015408:	2200      	movs	r2, #0
 801540a:	f000 f889 	bl	8015520 <_lseek_r>
 801540e:	89a3      	ldrh	r3, [r4, #12]
 8015410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015418:	81a3      	strh	r3, [r4, #12]
 801541a:	4632      	mov	r2, r6
 801541c:	463b      	mov	r3, r7
 801541e:	4628      	mov	r0, r5
 8015420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015424:	f000 b8b0 	b.w	8015588 <_write_r>

08015428 <__sseek>:
 8015428:	b510      	push	{r4, lr}
 801542a:	460c      	mov	r4, r1
 801542c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015430:	f000 f876 	bl	8015520 <_lseek_r>
 8015434:	1c43      	adds	r3, r0, #1
 8015436:	89a3      	ldrh	r3, [r4, #12]
 8015438:	bf15      	itete	ne
 801543a:	6560      	strne	r0, [r4, #84]	; 0x54
 801543c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015440:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015444:	81a3      	strheq	r3, [r4, #12]
 8015446:	bf18      	it	ne
 8015448:	81a3      	strhne	r3, [r4, #12]
 801544a:	bd10      	pop	{r4, pc}

0801544c <__sclose>:
 801544c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015450:	f000 b856 	b.w	8015500 <_close_r>

08015454 <_realloc_r>:
 8015454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015458:	4680      	mov	r8, r0
 801545a:	4614      	mov	r4, r2
 801545c:	460e      	mov	r6, r1
 801545e:	b921      	cbnz	r1, 801546a <_realloc_r+0x16>
 8015460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015464:	4611      	mov	r1, r2
 8015466:	f7ff b9b9 	b.w	80147dc <_malloc_r>
 801546a:	b92a      	cbnz	r2, 8015478 <_realloc_r+0x24>
 801546c:	f000 f8d2 	bl	8015614 <_free_r>
 8015470:	4625      	mov	r5, r4
 8015472:	4628      	mov	r0, r5
 8015474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015478:	f000 f918 	bl	80156ac <_malloc_usable_size_r>
 801547c:	4284      	cmp	r4, r0
 801547e:	4607      	mov	r7, r0
 8015480:	d802      	bhi.n	8015488 <_realloc_r+0x34>
 8015482:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015486:	d812      	bhi.n	80154ae <_realloc_r+0x5a>
 8015488:	4621      	mov	r1, r4
 801548a:	4640      	mov	r0, r8
 801548c:	f7ff f9a6 	bl	80147dc <_malloc_r>
 8015490:	4605      	mov	r5, r0
 8015492:	2800      	cmp	r0, #0
 8015494:	d0ed      	beq.n	8015472 <_realloc_r+0x1e>
 8015496:	42bc      	cmp	r4, r7
 8015498:	4622      	mov	r2, r4
 801549a:	4631      	mov	r1, r6
 801549c:	bf28      	it	cs
 801549e:	463a      	movcs	r2, r7
 80154a0:	f7fd fe2a 	bl	80130f8 <memcpy>
 80154a4:	4631      	mov	r1, r6
 80154a6:	4640      	mov	r0, r8
 80154a8:	f000 f8b4 	bl	8015614 <_free_r>
 80154ac:	e7e1      	b.n	8015472 <_realloc_r+0x1e>
 80154ae:	4635      	mov	r5, r6
 80154b0:	e7df      	b.n	8015472 <_realloc_r+0x1e>

080154b2 <__ascii_wctomb>:
 80154b2:	b149      	cbz	r1, 80154c8 <__ascii_wctomb+0x16>
 80154b4:	2aff      	cmp	r2, #255	; 0xff
 80154b6:	bf85      	ittet	hi
 80154b8:	238a      	movhi	r3, #138	; 0x8a
 80154ba:	6003      	strhi	r3, [r0, #0]
 80154bc:	700a      	strbls	r2, [r1, #0]
 80154be:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80154c2:	bf98      	it	ls
 80154c4:	2001      	movls	r0, #1
 80154c6:	4770      	bx	lr
 80154c8:	4608      	mov	r0, r1
 80154ca:	4770      	bx	lr

080154cc <memmove>:
 80154cc:	4288      	cmp	r0, r1
 80154ce:	b510      	push	{r4, lr}
 80154d0:	eb01 0402 	add.w	r4, r1, r2
 80154d4:	d902      	bls.n	80154dc <memmove+0x10>
 80154d6:	4284      	cmp	r4, r0
 80154d8:	4623      	mov	r3, r4
 80154da:	d807      	bhi.n	80154ec <memmove+0x20>
 80154dc:	1e43      	subs	r3, r0, #1
 80154de:	42a1      	cmp	r1, r4
 80154e0:	d008      	beq.n	80154f4 <memmove+0x28>
 80154e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80154e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80154ea:	e7f8      	b.n	80154de <memmove+0x12>
 80154ec:	4402      	add	r2, r0
 80154ee:	4601      	mov	r1, r0
 80154f0:	428a      	cmp	r2, r1
 80154f2:	d100      	bne.n	80154f6 <memmove+0x2a>
 80154f4:	bd10      	pop	{r4, pc}
 80154f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80154fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80154fe:	e7f7      	b.n	80154f0 <memmove+0x24>

08015500 <_close_r>:
 8015500:	b538      	push	{r3, r4, r5, lr}
 8015502:	4d06      	ldr	r5, [pc, #24]	; (801551c <_close_r+0x1c>)
 8015504:	2300      	movs	r3, #0
 8015506:	4604      	mov	r4, r0
 8015508:	4608      	mov	r0, r1
 801550a:	602b      	str	r3, [r5, #0]
 801550c:	f7ef fb21 	bl	8004b52 <_close>
 8015510:	1c43      	adds	r3, r0, #1
 8015512:	d102      	bne.n	801551a <_close_r+0x1a>
 8015514:	682b      	ldr	r3, [r5, #0]
 8015516:	b103      	cbz	r3, 801551a <_close_r+0x1a>
 8015518:	6023      	str	r3, [r4, #0]
 801551a:	bd38      	pop	{r3, r4, r5, pc}
 801551c:	20003044 	.word	0x20003044

08015520 <_lseek_r>:
 8015520:	b538      	push	{r3, r4, r5, lr}
 8015522:	4d07      	ldr	r5, [pc, #28]	; (8015540 <_lseek_r+0x20>)
 8015524:	4604      	mov	r4, r0
 8015526:	4608      	mov	r0, r1
 8015528:	4611      	mov	r1, r2
 801552a:	2200      	movs	r2, #0
 801552c:	602a      	str	r2, [r5, #0]
 801552e:	461a      	mov	r2, r3
 8015530:	f7ef fb36 	bl	8004ba0 <_lseek>
 8015534:	1c43      	adds	r3, r0, #1
 8015536:	d102      	bne.n	801553e <_lseek_r+0x1e>
 8015538:	682b      	ldr	r3, [r5, #0]
 801553a:	b103      	cbz	r3, 801553e <_lseek_r+0x1e>
 801553c:	6023      	str	r3, [r4, #0]
 801553e:	bd38      	pop	{r3, r4, r5, pc}
 8015540:	20003044 	.word	0x20003044

08015544 <_read_r>:
 8015544:	b538      	push	{r3, r4, r5, lr}
 8015546:	4d07      	ldr	r5, [pc, #28]	; (8015564 <_read_r+0x20>)
 8015548:	4604      	mov	r4, r0
 801554a:	4608      	mov	r0, r1
 801554c:	4611      	mov	r1, r2
 801554e:	2200      	movs	r2, #0
 8015550:	602a      	str	r2, [r5, #0]
 8015552:	461a      	mov	r2, r3
 8015554:	f7ef fac4 	bl	8004ae0 <_read>
 8015558:	1c43      	adds	r3, r0, #1
 801555a:	d102      	bne.n	8015562 <_read_r+0x1e>
 801555c:	682b      	ldr	r3, [r5, #0]
 801555e:	b103      	cbz	r3, 8015562 <_read_r+0x1e>
 8015560:	6023      	str	r3, [r4, #0]
 8015562:	bd38      	pop	{r3, r4, r5, pc}
 8015564:	20003044 	.word	0x20003044

08015568 <_sbrk_r>:
 8015568:	b538      	push	{r3, r4, r5, lr}
 801556a:	4d06      	ldr	r5, [pc, #24]	; (8015584 <_sbrk_r+0x1c>)
 801556c:	2300      	movs	r3, #0
 801556e:	4604      	mov	r4, r0
 8015570:	4608      	mov	r0, r1
 8015572:	602b      	str	r3, [r5, #0]
 8015574:	f7ef fb22 	bl	8004bbc <_sbrk>
 8015578:	1c43      	adds	r3, r0, #1
 801557a:	d102      	bne.n	8015582 <_sbrk_r+0x1a>
 801557c:	682b      	ldr	r3, [r5, #0]
 801557e:	b103      	cbz	r3, 8015582 <_sbrk_r+0x1a>
 8015580:	6023      	str	r3, [r4, #0]
 8015582:	bd38      	pop	{r3, r4, r5, pc}
 8015584:	20003044 	.word	0x20003044

08015588 <_write_r>:
 8015588:	b538      	push	{r3, r4, r5, lr}
 801558a:	4d07      	ldr	r5, [pc, #28]	; (80155a8 <_write_r+0x20>)
 801558c:	4604      	mov	r4, r0
 801558e:	4608      	mov	r0, r1
 8015590:	4611      	mov	r1, r2
 8015592:	2200      	movs	r2, #0
 8015594:	602a      	str	r2, [r5, #0]
 8015596:	461a      	mov	r2, r3
 8015598:	f7ef fabf 	bl	8004b1a <_write>
 801559c:	1c43      	adds	r3, r0, #1
 801559e:	d102      	bne.n	80155a6 <_write_r+0x1e>
 80155a0:	682b      	ldr	r3, [r5, #0]
 80155a2:	b103      	cbz	r3, 80155a6 <_write_r+0x1e>
 80155a4:	6023      	str	r3, [r4, #0]
 80155a6:	bd38      	pop	{r3, r4, r5, pc}
 80155a8:	20003044 	.word	0x20003044

080155ac <__assert_func>:
 80155ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80155ae:	4614      	mov	r4, r2
 80155b0:	461a      	mov	r2, r3
 80155b2:	4b09      	ldr	r3, [pc, #36]	; (80155d8 <__assert_func+0x2c>)
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	4605      	mov	r5, r0
 80155b8:	68d8      	ldr	r0, [r3, #12]
 80155ba:	b14c      	cbz	r4, 80155d0 <__assert_func+0x24>
 80155bc:	4b07      	ldr	r3, [pc, #28]	; (80155dc <__assert_func+0x30>)
 80155be:	9100      	str	r1, [sp, #0]
 80155c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80155c4:	4906      	ldr	r1, [pc, #24]	; (80155e0 <__assert_func+0x34>)
 80155c6:	462b      	mov	r3, r5
 80155c8:	f000 f878 	bl	80156bc <fiprintf>
 80155cc:	f000 f888 	bl	80156e0 <abort>
 80155d0:	4b04      	ldr	r3, [pc, #16]	; (80155e4 <__assert_func+0x38>)
 80155d2:	461c      	mov	r4, r3
 80155d4:	e7f3      	b.n	80155be <__assert_func+0x12>
 80155d6:	bf00      	nop
 80155d8:	200001ec 	.word	0x200001ec
 80155dc:	0801857c 	.word	0x0801857c
 80155e0:	08018589 	.word	0x08018589
 80155e4:	080185b7 	.word	0x080185b7

080155e8 <_calloc_r>:
 80155e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155ea:	fba1 2402 	umull	r2, r4, r1, r2
 80155ee:	b94c      	cbnz	r4, 8015604 <_calloc_r+0x1c>
 80155f0:	4611      	mov	r1, r2
 80155f2:	9201      	str	r2, [sp, #4]
 80155f4:	f7ff f8f2 	bl	80147dc <_malloc_r>
 80155f8:	9a01      	ldr	r2, [sp, #4]
 80155fa:	4605      	mov	r5, r0
 80155fc:	b930      	cbnz	r0, 801560c <_calloc_r+0x24>
 80155fe:	4628      	mov	r0, r5
 8015600:	b003      	add	sp, #12
 8015602:	bd30      	pop	{r4, r5, pc}
 8015604:	220c      	movs	r2, #12
 8015606:	6002      	str	r2, [r0, #0]
 8015608:	2500      	movs	r5, #0
 801560a:	e7f8      	b.n	80155fe <_calloc_r+0x16>
 801560c:	4621      	mov	r1, r4
 801560e:	f7fd fd3b 	bl	8013088 <memset>
 8015612:	e7f4      	b.n	80155fe <_calloc_r+0x16>

08015614 <_free_r>:
 8015614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015616:	2900      	cmp	r1, #0
 8015618:	d044      	beq.n	80156a4 <_free_r+0x90>
 801561a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801561e:	9001      	str	r0, [sp, #4]
 8015620:	2b00      	cmp	r3, #0
 8015622:	f1a1 0404 	sub.w	r4, r1, #4
 8015626:	bfb8      	it	lt
 8015628:	18e4      	addlt	r4, r4, r3
 801562a:	f7ff fa17 	bl	8014a5c <__malloc_lock>
 801562e:	4a1e      	ldr	r2, [pc, #120]	; (80156a8 <_free_r+0x94>)
 8015630:	9801      	ldr	r0, [sp, #4]
 8015632:	6813      	ldr	r3, [r2, #0]
 8015634:	b933      	cbnz	r3, 8015644 <_free_r+0x30>
 8015636:	6063      	str	r3, [r4, #4]
 8015638:	6014      	str	r4, [r2, #0]
 801563a:	b003      	add	sp, #12
 801563c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015640:	f7ff ba12 	b.w	8014a68 <__malloc_unlock>
 8015644:	42a3      	cmp	r3, r4
 8015646:	d908      	bls.n	801565a <_free_r+0x46>
 8015648:	6825      	ldr	r5, [r4, #0]
 801564a:	1961      	adds	r1, r4, r5
 801564c:	428b      	cmp	r3, r1
 801564e:	bf01      	itttt	eq
 8015650:	6819      	ldreq	r1, [r3, #0]
 8015652:	685b      	ldreq	r3, [r3, #4]
 8015654:	1949      	addeq	r1, r1, r5
 8015656:	6021      	streq	r1, [r4, #0]
 8015658:	e7ed      	b.n	8015636 <_free_r+0x22>
 801565a:	461a      	mov	r2, r3
 801565c:	685b      	ldr	r3, [r3, #4]
 801565e:	b10b      	cbz	r3, 8015664 <_free_r+0x50>
 8015660:	42a3      	cmp	r3, r4
 8015662:	d9fa      	bls.n	801565a <_free_r+0x46>
 8015664:	6811      	ldr	r1, [r2, #0]
 8015666:	1855      	adds	r5, r2, r1
 8015668:	42a5      	cmp	r5, r4
 801566a:	d10b      	bne.n	8015684 <_free_r+0x70>
 801566c:	6824      	ldr	r4, [r4, #0]
 801566e:	4421      	add	r1, r4
 8015670:	1854      	adds	r4, r2, r1
 8015672:	42a3      	cmp	r3, r4
 8015674:	6011      	str	r1, [r2, #0]
 8015676:	d1e0      	bne.n	801563a <_free_r+0x26>
 8015678:	681c      	ldr	r4, [r3, #0]
 801567a:	685b      	ldr	r3, [r3, #4]
 801567c:	6053      	str	r3, [r2, #4]
 801567e:	440c      	add	r4, r1
 8015680:	6014      	str	r4, [r2, #0]
 8015682:	e7da      	b.n	801563a <_free_r+0x26>
 8015684:	d902      	bls.n	801568c <_free_r+0x78>
 8015686:	230c      	movs	r3, #12
 8015688:	6003      	str	r3, [r0, #0]
 801568a:	e7d6      	b.n	801563a <_free_r+0x26>
 801568c:	6825      	ldr	r5, [r4, #0]
 801568e:	1961      	adds	r1, r4, r5
 8015690:	428b      	cmp	r3, r1
 8015692:	bf04      	itt	eq
 8015694:	6819      	ldreq	r1, [r3, #0]
 8015696:	685b      	ldreq	r3, [r3, #4]
 8015698:	6063      	str	r3, [r4, #4]
 801569a:	bf04      	itt	eq
 801569c:	1949      	addeq	r1, r1, r5
 801569e:	6021      	streq	r1, [r4, #0]
 80156a0:	6054      	str	r4, [r2, #4]
 80156a2:	e7ca      	b.n	801563a <_free_r+0x26>
 80156a4:	b003      	add	sp, #12
 80156a6:	bd30      	pop	{r4, r5, pc}
 80156a8:	2000303c 	.word	0x2000303c

080156ac <_malloc_usable_size_r>:
 80156ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156b0:	1f18      	subs	r0, r3, #4
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	bfbc      	itt	lt
 80156b6:	580b      	ldrlt	r3, [r1, r0]
 80156b8:	18c0      	addlt	r0, r0, r3
 80156ba:	4770      	bx	lr

080156bc <fiprintf>:
 80156bc:	b40e      	push	{r1, r2, r3}
 80156be:	b503      	push	{r0, r1, lr}
 80156c0:	4601      	mov	r1, r0
 80156c2:	ab03      	add	r3, sp, #12
 80156c4:	4805      	ldr	r0, [pc, #20]	; (80156dc <fiprintf+0x20>)
 80156c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80156ca:	6800      	ldr	r0, [r0, #0]
 80156cc:	9301      	str	r3, [sp, #4]
 80156ce:	f000 f837 	bl	8015740 <_vfiprintf_r>
 80156d2:	b002      	add	sp, #8
 80156d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80156d8:	b003      	add	sp, #12
 80156da:	4770      	bx	lr
 80156dc:	200001ec 	.word	0x200001ec

080156e0 <abort>:
 80156e0:	b508      	push	{r3, lr}
 80156e2:	2006      	movs	r0, #6
 80156e4:	f000 fa88 	bl	8015bf8 <raise>
 80156e8:	2001      	movs	r0, #1
 80156ea:	f7ef f9ef 	bl	8004acc <_exit>

080156ee <__sfputc_r>:
 80156ee:	6893      	ldr	r3, [r2, #8]
 80156f0:	3b01      	subs	r3, #1
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	b410      	push	{r4}
 80156f6:	6093      	str	r3, [r2, #8]
 80156f8:	da08      	bge.n	801570c <__sfputc_r+0x1e>
 80156fa:	6994      	ldr	r4, [r2, #24]
 80156fc:	42a3      	cmp	r3, r4
 80156fe:	db01      	blt.n	8015704 <__sfputc_r+0x16>
 8015700:	290a      	cmp	r1, #10
 8015702:	d103      	bne.n	801570c <__sfputc_r+0x1e>
 8015704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015708:	f000 b934 	b.w	8015974 <__swbuf_r>
 801570c:	6813      	ldr	r3, [r2, #0]
 801570e:	1c58      	adds	r0, r3, #1
 8015710:	6010      	str	r0, [r2, #0]
 8015712:	7019      	strb	r1, [r3, #0]
 8015714:	4608      	mov	r0, r1
 8015716:	f85d 4b04 	ldr.w	r4, [sp], #4
 801571a:	4770      	bx	lr

0801571c <__sfputs_r>:
 801571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801571e:	4606      	mov	r6, r0
 8015720:	460f      	mov	r7, r1
 8015722:	4614      	mov	r4, r2
 8015724:	18d5      	adds	r5, r2, r3
 8015726:	42ac      	cmp	r4, r5
 8015728:	d101      	bne.n	801572e <__sfputs_r+0x12>
 801572a:	2000      	movs	r0, #0
 801572c:	e007      	b.n	801573e <__sfputs_r+0x22>
 801572e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015732:	463a      	mov	r2, r7
 8015734:	4630      	mov	r0, r6
 8015736:	f7ff ffda 	bl	80156ee <__sfputc_r>
 801573a:	1c43      	adds	r3, r0, #1
 801573c:	d1f3      	bne.n	8015726 <__sfputs_r+0xa>
 801573e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015740 <_vfiprintf_r>:
 8015740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015744:	460d      	mov	r5, r1
 8015746:	b09d      	sub	sp, #116	; 0x74
 8015748:	4614      	mov	r4, r2
 801574a:	4698      	mov	r8, r3
 801574c:	4606      	mov	r6, r0
 801574e:	b118      	cbz	r0, 8015758 <_vfiprintf_r+0x18>
 8015750:	6a03      	ldr	r3, [r0, #32]
 8015752:	b90b      	cbnz	r3, 8015758 <_vfiprintf_r+0x18>
 8015754:	f7fc fdb0 	bl	80122b8 <__sinit>
 8015758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801575a:	07d9      	lsls	r1, r3, #31
 801575c:	d405      	bmi.n	801576a <_vfiprintf_r+0x2a>
 801575e:	89ab      	ldrh	r3, [r5, #12]
 8015760:	059a      	lsls	r2, r3, #22
 8015762:	d402      	bmi.n	801576a <_vfiprintf_r+0x2a>
 8015764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015766:	f7fd fcc5 	bl	80130f4 <__retarget_lock_acquire_recursive>
 801576a:	89ab      	ldrh	r3, [r5, #12]
 801576c:	071b      	lsls	r3, r3, #28
 801576e:	d501      	bpl.n	8015774 <_vfiprintf_r+0x34>
 8015770:	692b      	ldr	r3, [r5, #16]
 8015772:	b99b      	cbnz	r3, 801579c <_vfiprintf_r+0x5c>
 8015774:	4629      	mov	r1, r5
 8015776:	4630      	mov	r0, r6
 8015778:	f000 f93a 	bl	80159f0 <__swsetup_r>
 801577c:	b170      	cbz	r0, 801579c <_vfiprintf_r+0x5c>
 801577e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015780:	07dc      	lsls	r4, r3, #31
 8015782:	d504      	bpl.n	801578e <_vfiprintf_r+0x4e>
 8015784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015788:	b01d      	add	sp, #116	; 0x74
 801578a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801578e:	89ab      	ldrh	r3, [r5, #12]
 8015790:	0598      	lsls	r0, r3, #22
 8015792:	d4f7      	bmi.n	8015784 <_vfiprintf_r+0x44>
 8015794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015796:	f7fd fcae 	bl	80130f6 <__retarget_lock_release_recursive>
 801579a:	e7f3      	b.n	8015784 <_vfiprintf_r+0x44>
 801579c:	2300      	movs	r3, #0
 801579e:	9309      	str	r3, [sp, #36]	; 0x24
 80157a0:	2320      	movs	r3, #32
 80157a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80157a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80157aa:	2330      	movs	r3, #48	; 0x30
 80157ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015960 <_vfiprintf_r+0x220>
 80157b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80157b4:	f04f 0901 	mov.w	r9, #1
 80157b8:	4623      	mov	r3, r4
 80157ba:	469a      	mov	sl, r3
 80157bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80157c0:	b10a      	cbz	r2, 80157c6 <_vfiprintf_r+0x86>
 80157c2:	2a25      	cmp	r2, #37	; 0x25
 80157c4:	d1f9      	bne.n	80157ba <_vfiprintf_r+0x7a>
 80157c6:	ebba 0b04 	subs.w	fp, sl, r4
 80157ca:	d00b      	beq.n	80157e4 <_vfiprintf_r+0xa4>
 80157cc:	465b      	mov	r3, fp
 80157ce:	4622      	mov	r2, r4
 80157d0:	4629      	mov	r1, r5
 80157d2:	4630      	mov	r0, r6
 80157d4:	f7ff ffa2 	bl	801571c <__sfputs_r>
 80157d8:	3001      	adds	r0, #1
 80157da:	f000 80a9 	beq.w	8015930 <_vfiprintf_r+0x1f0>
 80157de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157e0:	445a      	add	r2, fp
 80157e2:	9209      	str	r2, [sp, #36]	; 0x24
 80157e4:	f89a 3000 	ldrb.w	r3, [sl]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	f000 80a1 	beq.w	8015930 <_vfiprintf_r+0x1f0>
 80157ee:	2300      	movs	r3, #0
 80157f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80157f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80157f8:	f10a 0a01 	add.w	sl, sl, #1
 80157fc:	9304      	str	r3, [sp, #16]
 80157fe:	9307      	str	r3, [sp, #28]
 8015800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015804:	931a      	str	r3, [sp, #104]	; 0x68
 8015806:	4654      	mov	r4, sl
 8015808:	2205      	movs	r2, #5
 801580a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801580e:	4854      	ldr	r0, [pc, #336]	; (8015960 <_vfiprintf_r+0x220>)
 8015810:	f7ea fcde 	bl	80001d0 <memchr>
 8015814:	9a04      	ldr	r2, [sp, #16]
 8015816:	b9d8      	cbnz	r0, 8015850 <_vfiprintf_r+0x110>
 8015818:	06d1      	lsls	r1, r2, #27
 801581a:	bf44      	itt	mi
 801581c:	2320      	movmi	r3, #32
 801581e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015822:	0713      	lsls	r3, r2, #28
 8015824:	bf44      	itt	mi
 8015826:	232b      	movmi	r3, #43	; 0x2b
 8015828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801582c:	f89a 3000 	ldrb.w	r3, [sl]
 8015830:	2b2a      	cmp	r3, #42	; 0x2a
 8015832:	d015      	beq.n	8015860 <_vfiprintf_r+0x120>
 8015834:	9a07      	ldr	r2, [sp, #28]
 8015836:	4654      	mov	r4, sl
 8015838:	2000      	movs	r0, #0
 801583a:	f04f 0c0a 	mov.w	ip, #10
 801583e:	4621      	mov	r1, r4
 8015840:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015844:	3b30      	subs	r3, #48	; 0x30
 8015846:	2b09      	cmp	r3, #9
 8015848:	d94d      	bls.n	80158e6 <_vfiprintf_r+0x1a6>
 801584a:	b1b0      	cbz	r0, 801587a <_vfiprintf_r+0x13a>
 801584c:	9207      	str	r2, [sp, #28]
 801584e:	e014      	b.n	801587a <_vfiprintf_r+0x13a>
 8015850:	eba0 0308 	sub.w	r3, r0, r8
 8015854:	fa09 f303 	lsl.w	r3, r9, r3
 8015858:	4313      	orrs	r3, r2
 801585a:	9304      	str	r3, [sp, #16]
 801585c:	46a2      	mov	sl, r4
 801585e:	e7d2      	b.n	8015806 <_vfiprintf_r+0xc6>
 8015860:	9b03      	ldr	r3, [sp, #12]
 8015862:	1d19      	adds	r1, r3, #4
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	9103      	str	r1, [sp, #12]
 8015868:	2b00      	cmp	r3, #0
 801586a:	bfbb      	ittet	lt
 801586c:	425b      	neglt	r3, r3
 801586e:	f042 0202 	orrlt.w	r2, r2, #2
 8015872:	9307      	strge	r3, [sp, #28]
 8015874:	9307      	strlt	r3, [sp, #28]
 8015876:	bfb8      	it	lt
 8015878:	9204      	strlt	r2, [sp, #16]
 801587a:	7823      	ldrb	r3, [r4, #0]
 801587c:	2b2e      	cmp	r3, #46	; 0x2e
 801587e:	d10c      	bne.n	801589a <_vfiprintf_r+0x15a>
 8015880:	7863      	ldrb	r3, [r4, #1]
 8015882:	2b2a      	cmp	r3, #42	; 0x2a
 8015884:	d134      	bne.n	80158f0 <_vfiprintf_r+0x1b0>
 8015886:	9b03      	ldr	r3, [sp, #12]
 8015888:	1d1a      	adds	r2, r3, #4
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	9203      	str	r2, [sp, #12]
 801588e:	2b00      	cmp	r3, #0
 8015890:	bfb8      	it	lt
 8015892:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015896:	3402      	adds	r4, #2
 8015898:	9305      	str	r3, [sp, #20]
 801589a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015970 <_vfiprintf_r+0x230>
 801589e:	7821      	ldrb	r1, [r4, #0]
 80158a0:	2203      	movs	r2, #3
 80158a2:	4650      	mov	r0, sl
 80158a4:	f7ea fc94 	bl	80001d0 <memchr>
 80158a8:	b138      	cbz	r0, 80158ba <_vfiprintf_r+0x17a>
 80158aa:	9b04      	ldr	r3, [sp, #16]
 80158ac:	eba0 000a 	sub.w	r0, r0, sl
 80158b0:	2240      	movs	r2, #64	; 0x40
 80158b2:	4082      	lsls	r2, r0
 80158b4:	4313      	orrs	r3, r2
 80158b6:	3401      	adds	r4, #1
 80158b8:	9304      	str	r3, [sp, #16]
 80158ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158be:	4829      	ldr	r0, [pc, #164]	; (8015964 <_vfiprintf_r+0x224>)
 80158c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80158c4:	2206      	movs	r2, #6
 80158c6:	f7ea fc83 	bl	80001d0 <memchr>
 80158ca:	2800      	cmp	r0, #0
 80158cc:	d03f      	beq.n	801594e <_vfiprintf_r+0x20e>
 80158ce:	4b26      	ldr	r3, [pc, #152]	; (8015968 <_vfiprintf_r+0x228>)
 80158d0:	bb1b      	cbnz	r3, 801591a <_vfiprintf_r+0x1da>
 80158d2:	9b03      	ldr	r3, [sp, #12]
 80158d4:	3307      	adds	r3, #7
 80158d6:	f023 0307 	bic.w	r3, r3, #7
 80158da:	3308      	adds	r3, #8
 80158dc:	9303      	str	r3, [sp, #12]
 80158de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158e0:	443b      	add	r3, r7
 80158e2:	9309      	str	r3, [sp, #36]	; 0x24
 80158e4:	e768      	b.n	80157b8 <_vfiprintf_r+0x78>
 80158e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80158ea:	460c      	mov	r4, r1
 80158ec:	2001      	movs	r0, #1
 80158ee:	e7a6      	b.n	801583e <_vfiprintf_r+0xfe>
 80158f0:	2300      	movs	r3, #0
 80158f2:	3401      	adds	r4, #1
 80158f4:	9305      	str	r3, [sp, #20]
 80158f6:	4619      	mov	r1, r3
 80158f8:	f04f 0c0a 	mov.w	ip, #10
 80158fc:	4620      	mov	r0, r4
 80158fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015902:	3a30      	subs	r2, #48	; 0x30
 8015904:	2a09      	cmp	r2, #9
 8015906:	d903      	bls.n	8015910 <_vfiprintf_r+0x1d0>
 8015908:	2b00      	cmp	r3, #0
 801590a:	d0c6      	beq.n	801589a <_vfiprintf_r+0x15a>
 801590c:	9105      	str	r1, [sp, #20]
 801590e:	e7c4      	b.n	801589a <_vfiprintf_r+0x15a>
 8015910:	fb0c 2101 	mla	r1, ip, r1, r2
 8015914:	4604      	mov	r4, r0
 8015916:	2301      	movs	r3, #1
 8015918:	e7f0      	b.n	80158fc <_vfiprintf_r+0x1bc>
 801591a:	ab03      	add	r3, sp, #12
 801591c:	9300      	str	r3, [sp, #0]
 801591e:	462a      	mov	r2, r5
 8015920:	4b12      	ldr	r3, [pc, #72]	; (801596c <_vfiprintf_r+0x22c>)
 8015922:	a904      	add	r1, sp, #16
 8015924:	4630      	mov	r0, r6
 8015926:	f7fb fe57 	bl	80115d8 <_printf_float>
 801592a:	4607      	mov	r7, r0
 801592c:	1c78      	adds	r0, r7, #1
 801592e:	d1d6      	bne.n	80158de <_vfiprintf_r+0x19e>
 8015930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015932:	07d9      	lsls	r1, r3, #31
 8015934:	d405      	bmi.n	8015942 <_vfiprintf_r+0x202>
 8015936:	89ab      	ldrh	r3, [r5, #12]
 8015938:	059a      	lsls	r2, r3, #22
 801593a:	d402      	bmi.n	8015942 <_vfiprintf_r+0x202>
 801593c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801593e:	f7fd fbda 	bl	80130f6 <__retarget_lock_release_recursive>
 8015942:	89ab      	ldrh	r3, [r5, #12]
 8015944:	065b      	lsls	r3, r3, #25
 8015946:	f53f af1d 	bmi.w	8015784 <_vfiprintf_r+0x44>
 801594a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801594c:	e71c      	b.n	8015788 <_vfiprintf_r+0x48>
 801594e:	ab03      	add	r3, sp, #12
 8015950:	9300      	str	r3, [sp, #0]
 8015952:	462a      	mov	r2, r5
 8015954:	4b05      	ldr	r3, [pc, #20]	; (801596c <_vfiprintf_r+0x22c>)
 8015956:	a904      	add	r1, sp, #16
 8015958:	4630      	mov	r0, r6
 801595a:	f7fc f8e1 	bl	8011b20 <_printf_i>
 801595e:	e7e4      	b.n	801592a <_vfiprintf_r+0x1ea>
 8015960:	08018416 	.word	0x08018416
 8015964:	08018420 	.word	0x08018420
 8015968:	080115d9 	.word	0x080115d9
 801596c:	0801571d 	.word	0x0801571d
 8015970:	0801841c 	.word	0x0801841c

08015974 <__swbuf_r>:
 8015974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015976:	460e      	mov	r6, r1
 8015978:	4614      	mov	r4, r2
 801597a:	4605      	mov	r5, r0
 801597c:	b118      	cbz	r0, 8015986 <__swbuf_r+0x12>
 801597e:	6a03      	ldr	r3, [r0, #32]
 8015980:	b90b      	cbnz	r3, 8015986 <__swbuf_r+0x12>
 8015982:	f7fc fc99 	bl	80122b8 <__sinit>
 8015986:	69a3      	ldr	r3, [r4, #24]
 8015988:	60a3      	str	r3, [r4, #8]
 801598a:	89a3      	ldrh	r3, [r4, #12]
 801598c:	071a      	lsls	r2, r3, #28
 801598e:	d525      	bpl.n	80159dc <__swbuf_r+0x68>
 8015990:	6923      	ldr	r3, [r4, #16]
 8015992:	b31b      	cbz	r3, 80159dc <__swbuf_r+0x68>
 8015994:	6823      	ldr	r3, [r4, #0]
 8015996:	6922      	ldr	r2, [r4, #16]
 8015998:	1a98      	subs	r0, r3, r2
 801599a:	6963      	ldr	r3, [r4, #20]
 801599c:	b2f6      	uxtb	r6, r6
 801599e:	4283      	cmp	r3, r0
 80159a0:	4637      	mov	r7, r6
 80159a2:	dc04      	bgt.n	80159ae <__swbuf_r+0x3a>
 80159a4:	4621      	mov	r1, r4
 80159a6:	4628      	mov	r0, r5
 80159a8:	f7ff f830 	bl	8014a0c <_fflush_r>
 80159ac:	b9e0      	cbnz	r0, 80159e8 <__swbuf_r+0x74>
 80159ae:	68a3      	ldr	r3, [r4, #8]
 80159b0:	3b01      	subs	r3, #1
 80159b2:	60a3      	str	r3, [r4, #8]
 80159b4:	6823      	ldr	r3, [r4, #0]
 80159b6:	1c5a      	adds	r2, r3, #1
 80159b8:	6022      	str	r2, [r4, #0]
 80159ba:	701e      	strb	r6, [r3, #0]
 80159bc:	6962      	ldr	r2, [r4, #20]
 80159be:	1c43      	adds	r3, r0, #1
 80159c0:	429a      	cmp	r2, r3
 80159c2:	d004      	beq.n	80159ce <__swbuf_r+0x5a>
 80159c4:	89a3      	ldrh	r3, [r4, #12]
 80159c6:	07db      	lsls	r3, r3, #31
 80159c8:	d506      	bpl.n	80159d8 <__swbuf_r+0x64>
 80159ca:	2e0a      	cmp	r6, #10
 80159cc:	d104      	bne.n	80159d8 <__swbuf_r+0x64>
 80159ce:	4621      	mov	r1, r4
 80159d0:	4628      	mov	r0, r5
 80159d2:	f7ff f81b 	bl	8014a0c <_fflush_r>
 80159d6:	b938      	cbnz	r0, 80159e8 <__swbuf_r+0x74>
 80159d8:	4638      	mov	r0, r7
 80159da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159dc:	4621      	mov	r1, r4
 80159de:	4628      	mov	r0, r5
 80159e0:	f000 f806 	bl	80159f0 <__swsetup_r>
 80159e4:	2800      	cmp	r0, #0
 80159e6:	d0d5      	beq.n	8015994 <__swbuf_r+0x20>
 80159e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80159ec:	e7f4      	b.n	80159d8 <__swbuf_r+0x64>
	...

080159f0 <__swsetup_r>:
 80159f0:	b538      	push	{r3, r4, r5, lr}
 80159f2:	4b2a      	ldr	r3, [pc, #168]	; (8015a9c <__swsetup_r+0xac>)
 80159f4:	4605      	mov	r5, r0
 80159f6:	6818      	ldr	r0, [r3, #0]
 80159f8:	460c      	mov	r4, r1
 80159fa:	b118      	cbz	r0, 8015a04 <__swsetup_r+0x14>
 80159fc:	6a03      	ldr	r3, [r0, #32]
 80159fe:	b90b      	cbnz	r3, 8015a04 <__swsetup_r+0x14>
 8015a00:	f7fc fc5a 	bl	80122b8 <__sinit>
 8015a04:	89a3      	ldrh	r3, [r4, #12]
 8015a06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a0a:	0718      	lsls	r0, r3, #28
 8015a0c:	d422      	bmi.n	8015a54 <__swsetup_r+0x64>
 8015a0e:	06d9      	lsls	r1, r3, #27
 8015a10:	d407      	bmi.n	8015a22 <__swsetup_r+0x32>
 8015a12:	2309      	movs	r3, #9
 8015a14:	602b      	str	r3, [r5, #0]
 8015a16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015a1a:	81a3      	strh	r3, [r4, #12]
 8015a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a20:	e034      	b.n	8015a8c <__swsetup_r+0x9c>
 8015a22:	0758      	lsls	r0, r3, #29
 8015a24:	d512      	bpl.n	8015a4c <__swsetup_r+0x5c>
 8015a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a28:	b141      	cbz	r1, 8015a3c <__swsetup_r+0x4c>
 8015a2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a2e:	4299      	cmp	r1, r3
 8015a30:	d002      	beq.n	8015a38 <__swsetup_r+0x48>
 8015a32:	4628      	mov	r0, r5
 8015a34:	f7ff fdee 	bl	8015614 <_free_r>
 8015a38:	2300      	movs	r3, #0
 8015a3a:	6363      	str	r3, [r4, #52]	; 0x34
 8015a3c:	89a3      	ldrh	r3, [r4, #12]
 8015a3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015a42:	81a3      	strh	r3, [r4, #12]
 8015a44:	2300      	movs	r3, #0
 8015a46:	6063      	str	r3, [r4, #4]
 8015a48:	6923      	ldr	r3, [r4, #16]
 8015a4a:	6023      	str	r3, [r4, #0]
 8015a4c:	89a3      	ldrh	r3, [r4, #12]
 8015a4e:	f043 0308 	orr.w	r3, r3, #8
 8015a52:	81a3      	strh	r3, [r4, #12]
 8015a54:	6923      	ldr	r3, [r4, #16]
 8015a56:	b94b      	cbnz	r3, 8015a6c <__swsetup_r+0x7c>
 8015a58:	89a3      	ldrh	r3, [r4, #12]
 8015a5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a62:	d003      	beq.n	8015a6c <__swsetup_r+0x7c>
 8015a64:	4621      	mov	r1, r4
 8015a66:	4628      	mov	r0, r5
 8015a68:	f000 f840 	bl	8015aec <__smakebuf_r>
 8015a6c:	89a0      	ldrh	r0, [r4, #12]
 8015a6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a72:	f010 0301 	ands.w	r3, r0, #1
 8015a76:	d00a      	beq.n	8015a8e <__swsetup_r+0x9e>
 8015a78:	2300      	movs	r3, #0
 8015a7a:	60a3      	str	r3, [r4, #8]
 8015a7c:	6963      	ldr	r3, [r4, #20]
 8015a7e:	425b      	negs	r3, r3
 8015a80:	61a3      	str	r3, [r4, #24]
 8015a82:	6923      	ldr	r3, [r4, #16]
 8015a84:	b943      	cbnz	r3, 8015a98 <__swsetup_r+0xa8>
 8015a86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015a8a:	d1c4      	bne.n	8015a16 <__swsetup_r+0x26>
 8015a8c:	bd38      	pop	{r3, r4, r5, pc}
 8015a8e:	0781      	lsls	r1, r0, #30
 8015a90:	bf58      	it	pl
 8015a92:	6963      	ldrpl	r3, [r4, #20]
 8015a94:	60a3      	str	r3, [r4, #8]
 8015a96:	e7f4      	b.n	8015a82 <__swsetup_r+0x92>
 8015a98:	2000      	movs	r0, #0
 8015a9a:	e7f7      	b.n	8015a8c <__swsetup_r+0x9c>
 8015a9c:	200001ec 	.word	0x200001ec

08015aa0 <__swhatbuf_r>:
 8015aa0:	b570      	push	{r4, r5, r6, lr}
 8015aa2:	460c      	mov	r4, r1
 8015aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015aa8:	2900      	cmp	r1, #0
 8015aaa:	b096      	sub	sp, #88	; 0x58
 8015aac:	4615      	mov	r5, r2
 8015aae:	461e      	mov	r6, r3
 8015ab0:	da0d      	bge.n	8015ace <__swhatbuf_r+0x2e>
 8015ab2:	89a3      	ldrh	r3, [r4, #12]
 8015ab4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015ab8:	f04f 0100 	mov.w	r1, #0
 8015abc:	bf0c      	ite	eq
 8015abe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015ac2:	2340      	movne	r3, #64	; 0x40
 8015ac4:	2000      	movs	r0, #0
 8015ac6:	6031      	str	r1, [r6, #0]
 8015ac8:	602b      	str	r3, [r5, #0]
 8015aca:	b016      	add	sp, #88	; 0x58
 8015acc:	bd70      	pop	{r4, r5, r6, pc}
 8015ace:	466a      	mov	r2, sp
 8015ad0:	f000 f848 	bl	8015b64 <_fstat_r>
 8015ad4:	2800      	cmp	r0, #0
 8015ad6:	dbec      	blt.n	8015ab2 <__swhatbuf_r+0x12>
 8015ad8:	9901      	ldr	r1, [sp, #4]
 8015ada:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015ade:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015ae2:	4259      	negs	r1, r3
 8015ae4:	4159      	adcs	r1, r3
 8015ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015aea:	e7eb      	b.n	8015ac4 <__swhatbuf_r+0x24>

08015aec <__smakebuf_r>:
 8015aec:	898b      	ldrh	r3, [r1, #12]
 8015aee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015af0:	079d      	lsls	r5, r3, #30
 8015af2:	4606      	mov	r6, r0
 8015af4:	460c      	mov	r4, r1
 8015af6:	d507      	bpl.n	8015b08 <__smakebuf_r+0x1c>
 8015af8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015afc:	6023      	str	r3, [r4, #0]
 8015afe:	6123      	str	r3, [r4, #16]
 8015b00:	2301      	movs	r3, #1
 8015b02:	6163      	str	r3, [r4, #20]
 8015b04:	b002      	add	sp, #8
 8015b06:	bd70      	pop	{r4, r5, r6, pc}
 8015b08:	ab01      	add	r3, sp, #4
 8015b0a:	466a      	mov	r2, sp
 8015b0c:	f7ff ffc8 	bl	8015aa0 <__swhatbuf_r>
 8015b10:	9900      	ldr	r1, [sp, #0]
 8015b12:	4605      	mov	r5, r0
 8015b14:	4630      	mov	r0, r6
 8015b16:	f7fe fe61 	bl	80147dc <_malloc_r>
 8015b1a:	b948      	cbnz	r0, 8015b30 <__smakebuf_r+0x44>
 8015b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b20:	059a      	lsls	r2, r3, #22
 8015b22:	d4ef      	bmi.n	8015b04 <__smakebuf_r+0x18>
 8015b24:	f023 0303 	bic.w	r3, r3, #3
 8015b28:	f043 0302 	orr.w	r3, r3, #2
 8015b2c:	81a3      	strh	r3, [r4, #12]
 8015b2e:	e7e3      	b.n	8015af8 <__smakebuf_r+0xc>
 8015b30:	89a3      	ldrh	r3, [r4, #12]
 8015b32:	6020      	str	r0, [r4, #0]
 8015b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b38:	81a3      	strh	r3, [r4, #12]
 8015b3a:	9b00      	ldr	r3, [sp, #0]
 8015b3c:	6163      	str	r3, [r4, #20]
 8015b3e:	9b01      	ldr	r3, [sp, #4]
 8015b40:	6120      	str	r0, [r4, #16]
 8015b42:	b15b      	cbz	r3, 8015b5c <__smakebuf_r+0x70>
 8015b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b48:	4630      	mov	r0, r6
 8015b4a:	f000 f81d 	bl	8015b88 <_isatty_r>
 8015b4e:	b128      	cbz	r0, 8015b5c <__smakebuf_r+0x70>
 8015b50:	89a3      	ldrh	r3, [r4, #12]
 8015b52:	f023 0303 	bic.w	r3, r3, #3
 8015b56:	f043 0301 	orr.w	r3, r3, #1
 8015b5a:	81a3      	strh	r3, [r4, #12]
 8015b5c:	89a3      	ldrh	r3, [r4, #12]
 8015b5e:	431d      	orrs	r5, r3
 8015b60:	81a5      	strh	r5, [r4, #12]
 8015b62:	e7cf      	b.n	8015b04 <__smakebuf_r+0x18>

08015b64 <_fstat_r>:
 8015b64:	b538      	push	{r3, r4, r5, lr}
 8015b66:	4d07      	ldr	r5, [pc, #28]	; (8015b84 <_fstat_r+0x20>)
 8015b68:	2300      	movs	r3, #0
 8015b6a:	4604      	mov	r4, r0
 8015b6c:	4608      	mov	r0, r1
 8015b6e:	4611      	mov	r1, r2
 8015b70:	602b      	str	r3, [r5, #0]
 8015b72:	f7ee fffa 	bl	8004b6a <_fstat>
 8015b76:	1c43      	adds	r3, r0, #1
 8015b78:	d102      	bne.n	8015b80 <_fstat_r+0x1c>
 8015b7a:	682b      	ldr	r3, [r5, #0]
 8015b7c:	b103      	cbz	r3, 8015b80 <_fstat_r+0x1c>
 8015b7e:	6023      	str	r3, [r4, #0]
 8015b80:	bd38      	pop	{r3, r4, r5, pc}
 8015b82:	bf00      	nop
 8015b84:	20003044 	.word	0x20003044

08015b88 <_isatty_r>:
 8015b88:	b538      	push	{r3, r4, r5, lr}
 8015b8a:	4d06      	ldr	r5, [pc, #24]	; (8015ba4 <_isatty_r+0x1c>)
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	4604      	mov	r4, r0
 8015b90:	4608      	mov	r0, r1
 8015b92:	602b      	str	r3, [r5, #0]
 8015b94:	f7ee fff9 	bl	8004b8a <_isatty>
 8015b98:	1c43      	adds	r3, r0, #1
 8015b9a:	d102      	bne.n	8015ba2 <_isatty_r+0x1a>
 8015b9c:	682b      	ldr	r3, [r5, #0]
 8015b9e:	b103      	cbz	r3, 8015ba2 <_isatty_r+0x1a>
 8015ba0:	6023      	str	r3, [r4, #0]
 8015ba2:	bd38      	pop	{r3, r4, r5, pc}
 8015ba4:	20003044 	.word	0x20003044

08015ba8 <_raise_r>:
 8015ba8:	291f      	cmp	r1, #31
 8015baa:	b538      	push	{r3, r4, r5, lr}
 8015bac:	4604      	mov	r4, r0
 8015bae:	460d      	mov	r5, r1
 8015bb0:	d904      	bls.n	8015bbc <_raise_r+0x14>
 8015bb2:	2316      	movs	r3, #22
 8015bb4:	6003      	str	r3, [r0, #0]
 8015bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015bba:	bd38      	pop	{r3, r4, r5, pc}
 8015bbc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015bbe:	b112      	cbz	r2, 8015bc6 <_raise_r+0x1e>
 8015bc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015bc4:	b94b      	cbnz	r3, 8015bda <_raise_r+0x32>
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	f000 f830 	bl	8015c2c <_getpid_r>
 8015bcc:	462a      	mov	r2, r5
 8015bce:	4601      	mov	r1, r0
 8015bd0:	4620      	mov	r0, r4
 8015bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015bd6:	f000 b817 	b.w	8015c08 <_kill_r>
 8015bda:	2b01      	cmp	r3, #1
 8015bdc:	d00a      	beq.n	8015bf4 <_raise_r+0x4c>
 8015bde:	1c59      	adds	r1, r3, #1
 8015be0:	d103      	bne.n	8015bea <_raise_r+0x42>
 8015be2:	2316      	movs	r3, #22
 8015be4:	6003      	str	r3, [r0, #0]
 8015be6:	2001      	movs	r0, #1
 8015be8:	e7e7      	b.n	8015bba <_raise_r+0x12>
 8015bea:	2400      	movs	r4, #0
 8015bec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015bf0:	4628      	mov	r0, r5
 8015bf2:	4798      	blx	r3
 8015bf4:	2000      	movs	r0, #0
 8015bf6:	e7e0      	b.n	8015bba <_raise_r+0x12>

08015bf8 <raise>:
 8015bf8:	4b02      	ldr	r3, [pc, #8]	; (8015c04 <raise+0xc>)
 8015bfa:	4601      	mov	r1, r0
 8015bfc:	6818      	ldr	r0, [r3, #0]
 8015bfe:	f7ff bfd3 	b.w	8015ba8 <_raise_r>
 8015c02:	bf00      	nop
 8015c04:	200001ec 	.word	0x200001ec

08015c08 <_kill_r>:
 8015c08:	b538      	push	{r3, r4, r5, lr}
 8015c0a:	4d07      	ldr	r5, [pc, #28]	; (8015c28 <_kill_r+0x20>)
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	4604      	mov	r4, r0
 8015c10:	4608      	mov	r0, r1
 8015c12:	4611      	mov	r1, r2
 8015c14:	602b      	str	r3, [r5, #0]
 8015c16:	f7ee ff49 	bl	8004aac <_kill>
 8015c1a:	1c43      	adds	r3, r0, #1
 8015c1c:	d102      	bne.n	8015c24 <_kill_r+0x1c>
 8015c1e:	682b      	ldr	r3, [r5, #0]
 8015c20:	b103      	cbz	r3, 8015c24 <_kill_r+0x1c>
 8015c22:	6023      	str	r3, [r4, #0]
 8015c24:	bd38      	pop	{r3, r4, r5, pc}
 8015c26:	bf00      	nop
 8015c28:	20003044 	.word	0x20003044

08015c2c <_getpid_r>:
 8015c2c:	f7ee bf36 	b.w	8004a9c <_getpid>

08015c30 <asinf>:
 8015c30:	b508      	push	{r3, lr}
 8015c32:	ed2d 8b02 	vpush	{d8}
 8015c36:	eeb0 8a40 	vmov.f32	s16, s0
 8015c3a:	f000 fd0b 	bl	8016654 <__ieee754_asinf>
 8015c3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c46:	eef0 8a40 	vmov.f32	s17, s0
 8015c4a:	d615      	bvs.n	8015c78 <asinf+0x48>
 8015c4c:	eeb0 0a48 	vmov.f32	s0, s16
 8015c50:	f000 f954 	bl	8015efc <fabsf>
 8015c54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015c58:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c60:	dd0a      	ble.n	8015c78 <asinf+0x48>
 8015c62:	f7fd fa1d 	bl	80130a0 <__errno>
 8015c66:	ecbd 8b02 	vpop	{d8}
 8015c6a:	2321      	movs	r3, #33	; 0x21
 8015c6c:	6003      	str	r3, [r0, #0]
 8015c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015c72:	4804      	ldr	r0, [pc, #16]	; (8015c84 <asinf+0x54>)
 8015c74:	f7fd ba58 	b.w	8013128 <nanf>
 8015c78:	eeb0 0a68 	vmov.f32	s0, s17
 8015c7c:	ecbd 8b02 	vpop	{d8}
 8015c80:	bd08      	pop	{r3, pc}
 8015c82:	bf00      	nop
 8015c84:	080185b7 	.word	0x080185b7

08015c88 <atan2f>:
 8015c88:	f000 bdca 	b.w	8016820 <__ieee754_atan2f>

08015c8c <atan2>:
 8015c8c:	f000 b800 	b.w	8015c90 <__ieee754_atan2>

08015c90 <__ieee754_atan2>:
 8015c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c94:	ec57 6b11 	vmov	r6, r7, d1
 8015c98:	4273      	negs	r3, r6
 8015c9a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8015e18 <__ieee754_atan2+0x188>
 8015c9e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015ca2:	4333      	orrs	r3, r6
 8015ca4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015ca8:	4543      	cmp	r3, r8
 8015caa:	ec51 0b10 	vmov	r0, r1, d0
 8015cae:	ee11 5a10 	vmov	r5, s2
 8015cb2:	d80a      	bhi.n	8015cca <__ieee754_atan2+0x3a>
 8015cb4:	4244      	negs	r4, r0
 8015cb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015cba:	4304      	orrs	r4, r0
 8015cbc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015cc0:	4544      	cmp	r4, r8
 8015cc2:	ee10 9a10 	vmov	r9, s0
 8015cc6:	468e      	mov	lr, r1
 8015cc8:	d907      	bls.n	8015cda <__ieee754_atan2+0x4a>
 8015cca:	4632      	mov	r2, r6
 8015ccc:	463b      	mov	r3, r7
 8015cce:	f7ea fadd 	bl	800028c <__adddf3>
 8015cd2:	ec41 0b10 	vmov	d0, r0, r1
 8015cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cda:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015cde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015ce2:	4334      	orrs	r4, r6
 8015ce4:	d103      	bne.n	8015cee <__ieee754_atan2+0x5e>
 8015ce6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cea:	f000 b911 	b.w	8015f10 <atan>
 8015cee:	17bc      	asrs	r4, r7, #30
 8015cf0:	f004 0402 	and.w	r4, r4, #2
 8015cf4:	ea53 0909 	orrs.w	r9, r3, r9
 8015cf8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015cfc:	d107      	bne.n	8015d0e <__ieee754_atan2+0x7e>
 8015cfe:	2c02      	cmp	r4, #2
 8015d00:	d05f      	beq.n	8015dc2 <__ieee754_atan2+0x132>
 8015d02:	2c03      	cmp	r4, #3
 8015d04:	d1e5      	bne.n	8015cd2 <__ieee754_atan2+0x42>
 8015d06:	a140      	add	r1, pc, #256	; (adr r1, 8015e08 <__ieee754_atan2+0x178>)
 8015d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d0c:	e7e1      	b.n	8015cd2 <__ieee754_atan2+0x42>
 8015d0e:	4315      	orrs	r5, r2
 8015d10:	d106      	bne.n	8015d20 <__ieee754_atan2+0x90>
 8015d12:	f1be 0f00 	cmp.w	lr, #0
 8015d16:	da5f      	bge.n	8015dd8 <__ieee754_atan2+0x148>
 8015d18:	a13d      	add	r1, pc, #244	; (adr r1, 8015e10 <__ieee754_atan2+0x180>)
 8015d1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d1e:	e7d8      	b.n	8015cd2 <__ieee754_atan2+0x42>
 8015d20:	4542      	cmp	r2, r8
 8015d22:	d10f      	bne.n	8015d44 <__ieee754_atan2+0xb4>
 8015d24:	4293      	cmp	r3, r2
 8015d26:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8015d2a:	d107      	bne.n	8015d3c <__ieee754_atan2+0xac>
 8015d2c:	2c02      	cmp	r4, #2
 8015d2e:	d84c      	bhi.n	8015dca <__ieee754_atan2+0x13a>
 8015d30:	4b33      	ldr	r3, [pc, #204]	; (8015e00 <__ieee754_atan2+0x170>)
 8015d32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015d3a:	e7ca      	b.n	8015cd2 <__ieee754_atan2+0x42>
 8015d3c:	2c02      	cmp	r4, #2
 8015d3e:	d848      	bhi.n	8015dd2 <__ieee754_atan2+0x142>
 8015d40:	4b30      	ldr	r3, [pc, #192]	; (8015e04 <__ieee754_atan2+0x174>)
 8015d42:	e7f6      	b.n	8015d32 <__ieee754_atan2+0xa2>
 8015d44:	4543      	cmp	r3, r8
 8015d46:	d0e4      	beq.n	8015d12 <__ieee754_atan2+0x82>
 8015d48:	1a9b      	subs	r3, r3, r2
 8015d4a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015d4e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015d52:	da1e      	bge.n	8015d92 <__ieee754_atan2+0x102>
 8015d54:	2f00      	cmp	r7, #0
 8015d56:	da01      	bge.n	8015d5c <__ieee754_atan2+0xcc>
 8015d58:	323c      	adds	r2, #60	; 0x3c
 8015d5a:	db1e      	blt.n	8015d9a <__ieee754_atan2+0x10a>
 8015d5c:	4632      	mov	r2, r6
 8015d5e:	463b      	mov	r3, r7
 8015d60:	f7ea fd74 	bl	800084c <__aeabi_ddiv>
 8015d64:	ec41 0b10 	vmov	d0, r0, r1
 8015d68:	f000 fab8 	bl	80162dc <fabs>
 8015d6c:	f000 f8d0 	bl	8015f10 <atan>
 8015d70:	ec51 0b10 	vmov	r0, r1, d0
 8015d74:	2c01      	cmp	r4, #1
 8015d76:	d013      	beq.n	8015da0 <__ieee754_atan2+0x110>
 8015d78:	2c02      	cmp	r4, #2
 8015d7a:	d015      	beq.n	8015da8 <__ieee754_atan2+0x118>
 8015d7c:	2c00      	cmp	r4, #0
 8015d7e:	d0a8      	beq.n	8015cd2 <__ieee754_atan2+0x42>
 8015d80:	a317      	add	r3, pc, #92	; (adr r3, 8015de0 <__ieee754_atan2+0x150>)
 8015d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d86:	f7ea fa7f 	bl	8000288 <__aeabi_dsub>
 8015d8a:	a317      	add	r3, pc, #92	; (adr r3, 8015de8 <__ieee754_atan2+0x158>)
 8015d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d90:	e014      	b.n	8015dbc <__ieee754_atan2+0x12c>
 8015d92:	a117      	add	r1, pc, #92	; (adr r1, 8015df0 <__ieee754_atan2+0x160>)
 8015d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d98:	e7ec      	b.n	8015d74 <__ieee754_atan2+0xe4>
 8015d9a:	2000      	movs	r0, #0
 8015d9c:	2100      	movs	r1, #0
 8015d9e:	e7e9      	b.n	8015d74 <__ieee754_atan2+0xe4>
 8015da0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015da4:	4619      	mov	r1, r3
 8015da6:	e794      	b.n	8015cd2 <__ieee754_atan2+0x42>
 8015da8:	a30d      	add	r3, pc, #52	; (adr r3, 8015de0 <__ieee754_atan2+0x150>)
 8015daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dae:	f7ea fa6b 	bl	8000288 <__aeabi_dsub>
 8015db2:	4602      	mov	r2, r0
 8015db4:	460b      	mov	r3, r1
 8015db6:	a10c      	add	r1, pc, #48	; (adr r1, 8015de8 <__ieee754_atan2+0x158>)
 8015db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015dbc:	f7ea fa64 	bl	8000288 <__aeabi_dsub>
 8015dc0:	e787      	b.n	8015cd2 <__ieee754_atan2+0x42>
 8015dc2:	a109      	add	r1, pc, #36	; (adr r1, 8015de8 <__ieee754_atan2+0x158>)
 8015dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015dc8:	e783      	b.n	8015cd2 <__ieee754_atan2+0x42>
 8015dca:	a10b      	add	r1, pc, #44	; (adr r1, 8015df8 <__ieee754_atan2+0x168>)
 8015dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015dd0:	e77f      	b.n	8015cd2 <__ieee754_atan2+0x42>
 8015dd2:	2000      	movs	r0, #0
 8015dd4:	2100      	movs	r1, #0
 8015dd6:	e77c      	b.n	8015cd2 <__ieee754_atan2+0x42>
 8015dd8:	a105      	add	r1, pc, #20	; (adr r1, 8015df0 <__ieee754_atan2+0x160>)
 8015dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015dde:	e778      	b.n	8015cd2 <__ieee754_atan2+0x42>
 8015de0:	33145c07 	.word	0x33145c07
 8015de4:	3ca1a626 	.word	0x3ca1a626
 8015de8:	54442d18 	.word	0x54442d18
 8015dec:	400921fb 	.word	0x400921fb
 8015df0:	54442d18 	.word	0x54442d18
 8015df4:	3ff921fb 	.word	0x3ff921fb
 8015df8:	54442d18 	.word	0x54442d18
 8015dfc:	3fe921fb 	.word	0x3fe921fb
 8015e00:	080185b8 	.word	0x080185b8
 8015e04:	080185d0 	.word	0x080185d0
 8015e08:	54442d18 	.word	0x54442d18
 8015e0c:	c00921fb 	.word	0xc00921fb
 8015e10:	54442d18 	.word	0x54442d18
 8015e14:	bff921fb 	.word	0xbff921fb
 8015e18:	7ff00000 	.word	0x7ff00000

08015e1c <cosf>:
 8015e1c:	ee10 3a10 	vmov	r3, s0
 8015e20:	b507      	push	{r0, r1, r2, lr}
 8015e22:	4a1e      	ldr	r2, [pc, #120]	; (8015e9c <cosf+0x80>)
 8015e24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	dc06      	bgt.n	8015e3a <cosf+0x1e>
 8015e2c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8015ea0 <cosf+0x84>
 8015e30:	b003      	add	sp, #12
 8015e32:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e36:	f000 ba87 	b.w	8016348 <__kernel_cosf>
 8015e3a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015e3e:	db04      	blt.n	8015e4a <cosf+0x2e>
 8015e40:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015e44:	b003      	add	sp, #12
 8015e46:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e4a:	4668      	mov	r0, sp
 8015e4c:	f000 ff68 	bl	8016d20 <__ieee754_rem_pio2f>
 8015e50:	f000 0003 	and.w	r0, r0, #3
 8015e54:	2801      	cmp	r0, #1
 8015e56:	d009      	beq.n	8015e6c <cosf+0x50>
 8015e58:	2802      	cmp	r0, #2
 8015e5a:	d010      	beq.n	8015e7e <cosf+0x62>
 8015e5c:	b9b0      	cbnz	r0, 8015e8c <cosf+0x70>
 8015e5e:	eddd 0a01 	vldr	s1, [sp, #4]
 8015e62:	ed9d 0a00 	vldr	s0, [sp]
 8015e66:	f000 fa6f 	bl	8016348 <__kernel_cosf>
 8015e6a:	e7eb      	b.n	8015e44 <cosf+0x28>
 8015e6c:	eddd 0a01 	vldr	s1, [sp, #4]
 8015e70:	ed9d 0a00 	vldr	s0, [sp]
 8015e74:	f000 fac6 	bl	8016404 <__kernel_sinf>
 8015e78:	eeb1 0a40 	vneg.f32	s0, s0
 8015e7c:	e7e2      	b.n	8015e44 <cosf+0x28>
 8015e7e:	eddd 0a01 	vldr	s1, [sp, #4]
 8015e82:	ed9d 0a00 	vldr	s0, [sp]
 8015e86:	f000 fa5f 	bl	8016348 <__kernel_cosf>
 8015e8a:	e7f5      	b.n	8015e78 <cosf+0x5c>
 8015e8c:	eddd 0a01 	vldr	s1, [sp, #4]
 8015e90:	ed9d 0a00 	vldr	s0, [sp]
 8015e94:	2001      	movs	r0, #1
 8015e96:	f000 fab5 	bl	8016404 <__kernel_sinf>
 8015e9a:	e7d3      	b.n	8015e44 <cosf+0x28>
 8015e9c:	3f490fd8 	.word	0x3f490fd8
 8015ea0:	00000000 	.word	0x00000000

08015ea4 <sqrt>:
 8015ea4:	b538      	push	{r3, r4, r5, lr}
 8015ea6:	ed2d 8b02 	vpush	{d8}
 8015eaa:	ec55 4b10 	vmov	r4, r5, d0
 8015eae:	f000 fd57 	bl	8016960 <__ieee754_sqrt>
 8015eb2:	4622      	mov	r2, r4
 8015eb4:	462b      	mov	r3, r5
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	4629      	mov	r1, r5
 8015eba:	eeb0 8a40 	vmov.f32	s16, s0
 8015ebe:	eef0 8a60 	vmov.f32	s17, s1
 8015ec2:	f7ea fe33 	bl	8000b2c <__aeabi_dcmpun>
 8015ec6:	b990      	cbnz	r0, 8015eee <sqrt+0x4a>
 8015ec8:	2200      	movs	r2, #0
 8015eca:	2300      	movs	r3, #0
 8015ecc:	4620      	mov	r0, r4
 8015ece:	4629      	mov	r1, r5
 8015ed0:	f7ea fe04 	bl	8000adc <__aeabi_dcmplt>
 8015ed4:	b158      	cbz	r0, 8015eee <sqrt+0x4a>
 8015ed6:	f7fd f8e3 	bl	80130a0 <__errno>
 8015eda:	2321      	movs	r3, #33	; 0x21
 8015edc:	6003      	str	r3, [r0, #0]
 8015ede:	2200      	movs	r2, #0
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	4610      	mov	r0, r2
 8015ee4:	4619      	mov	r1, r3
 8015ee6:	f7ea fcb1 	bl	800084c <__aeabi_ddiv>
 8015eea:	ec41 0b18 	vmov	d8, r0, r1
 8015eee:	eeb0 0a48 	vmov.f32	s0, s16
 8015ef2:	eef0 0a68 	vmov.f32	s1, s17
 8015ef6:	ecbd 8b02 	vpop	{d8}
 8015efa:	bd38      	pop	{r3, r4, r5, pc}

08015efc <fabsf>:
 8015efc:	ee10 3a10 	vmov	r3, s0
 8015f00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015f04:	ee00 3a10 	vmov	s0, r3
 8015f08:	4770      	bx	lr
 8015f0a:	0000      	movs	r0, r0
 8015f0c:	0000      	movs	r0, r0
	...

08015f10 <atan>:
 8015f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f14:	ec55 4b10 	vmov	r4, r5, d0
 8015f18:	4bc3      	ldr	r3, [pc, #780]	; (8016228 <atan+0x318>)
 8015f1a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015f1e:	429e      	cmp	r6, r3
 8015f20:	46ab      	mov	fp, r5
 8015f22:	dd18      	ble.n	8015f56 <atan+0x46>
 8015f24:	4bc1      	ldr	r3, [pc, #772]	; (801622c <atan+0x31c>)
 8015f26:	429e      	cmp	r6, r3
 8015f28:	dc01      	bgt.n	8015f2e <atan+0x1e>
 8015f2a:	d109      	bne.n	8015f40 <atan+0x30>
 8015f2c:	b144      	cbz	r4, 8015f40 <atan+0x30>
 8015f2e:	4622      	mov	r2, r4
 8015f30:	462b      	mov	r3, r5
 8015f32:	4620      	mov	r0, r4
 8015f34:	4629      	mov	r1, r5
 8015f36:	f7ea f9a9 	bl	800028c <__adddf3>
 8015f3a:	4604      	mov	r4, r0
 8015f3c:	460d      	mov	r5, r1
 8015f3e:	e006      	b.n	8015f4e <atan+0x3e>
 8015f40:	f1bb 0f00 	cmp.w	fp, #0
 8015f44:	f300 8131 	bgt.w	80161aa <atan+0x29a>
 8015f48:	a59b      	add	r5, pc, #620	; (adr r5, 80161b8 <atan+0x2a8>)
 8015f4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015f4e:	ec45 4b10 	vmov	d0, r4, r5
 8015f52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f56:	4bb6      	ldr	r3, [pc, #728]	; (8016230 <atan+0x320>)
 8015f58:	429e      	cmp	r6, r3
 8015f5a:	dc14      	bgt.n	8015f86 <atan+0x76>
 8015f5c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8015f60:	429e      	cmp	r6, r3
 8015f62:	dc0d      	bgt.n	8015f80 <atan+0x70>
 8015f64:	a396      	add	r3, pc, #600	; (adr r3, 80161c0 <atan+0x2b0>)
 8015f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f6a:	ee10 0a10 	vmov	r0, s0
 8015f6e:	4629      	mov	r1, r5
 8015f70:	f7ea f98c 	bl	800028c <__adddf3>
 8015f74:	4baf      	ldr	r3, [pc, #700]	; (8016234 <atan+0x324>)
 8015f76:	2200      	movs	r2, #0
 8015f78:	f7ea fdce 	bl	8000b18 <__aeabi_dcmpgt>
 8015f7c:	2800      	cmp	r0, #0
 8015f7e:	d1e6      	bne.n	8015f4e <atan+0x3e>
 8015f80:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8015f84:	e02b      	b.n	8015fde <atan+0xce>
 8015f86:	f000 f9a9 	bl	80162dc <fabs>
 8015f8a:	4bab      	ldr	r3, [pc, #684]	; (8016238 <atan+0x328>)
 8015f8c:	429e      	cmp	r6, r3
 8015f8e:	ec55 4b10 	vmov	r4, r5, d0
 8015f92:	f300 80bf 	bgt.w	8016114 <atan+0x204>
 8015f96:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8015f9a:	429e      	cmp	r6, r3
 8015f9c:	f300 80a0 	bgt.w	80160e0 <atan+0x1d0>
 8015fa0:	ee10 2a10 	vmov	r2, s0
 8015fa4:	ee10 0a10 	vmov	r0, s0
 8015fa8:	462b      	mov	r3, r5
 8015faa:	4629      	mov	r1, r5
 8015fac:	f7ea f96e 	bl	800028c <__adddf3>
 8015fb0:	4ba0      	ldr	r3, [pc, #640]	; (8016234 <atan+0x324>)
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	f7ea f968 	bl	8000288 <__aeabi_dsub>
 8015fb8:	2200      	movs	r2, #0
 8015fba:	4606      	mov	r6, r0
 8015fbc:	460f      	mov	r7, r1
 8015fbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015fc2:	4620      	mov	r0, r4
 8015fc4:	4629      	mov	r1, r5
 8015fc6:	f7ea f961 	bl	800028c <__adddf3>
 8015fca:	4602      	mov	r2, r0
 8015fcc:	460b      	mov	r3, r1
 8015fce:	4630      	mov	r0, r6
 8015fd0:	4639      	mov	r1, r7
 8015fd2:	f7ea fc3b 	bl	800084c <__aeabi_ddiv>
 8015fd6:	f04f 0a00 	mov.w	sl, #0
 8015fda:	4604      	mov	r4, r0
 8015fdc:	460d      	mov	r5, r1
 8015fde:	4622      	mov	r2, r4
 8015fe0:	462b      	mov	r3, r5
 8015fe2:	4620      	mov	r0, r4
 8015fe4:	4629      	mov	r1, r5
 8015fe6:	f7ea fb07 	bl	80005f8 <__aeabi_dmul>
 8015fea:	4602      	mov	r2, r0
 8015fec:	460b      	mov	r3, r1
 8015fee:	4680      	mov	r8, r0
 8015ff0:	4689      	mov	r9, r1
 8015ff2:	f7ea fb01 	bl	80005f8 <__aeabi_dmul>
 8015ff6:	a374      	add	r3, pc, #464	; (adr r3, 80161c8 <atan+0x2b8>)
 8015ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ffc:	4606      	mov	r6, r0
 8015ffe:	460f      	mov	r7, r1
 8016000:	f7ea fafa 	bl	80005f8 <__aeabi_dmul>
 8016004:	a372      	add	r3, pc, #456	; (adr r3, 80161d0 <atan+0x2c0>)
 8016006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801600a:	f7ea f93f 	bl	800028c <__adddf3>
 801600e:	4632      	mov	r2, r6
 8016010:	463b      	mov	r3, r7
 8016012:	f7ea faf1 	bl	80005f8 <__aeabi_dmul>
 8016016:	a370      	add	r3, pc, #448	; (adr r3, 80161d8 <atan+0x2c8>)
 8016018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801601c:	f7ea f936 	bl	800028c <__adddf3>
 8016020:	4632      	mov	r2, r6
 8016022:	463b      	mov	r3, r7
 8016024:	f7ea fae8 	bl	80005f8 <__aeabi_dmul>
 8016028:	a36d      	add	r3, pc, #436	; (adr r3, 80161e0 <atan+0x2d0>)
 801602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801602e:	f7ea f92d 	bl	800028c <__adddf3>
 8016032:	4632      	mov	r2, r6
 8016034:	463b      	mov	r3, r7
 8016036:	f7ea fadf 	bl	80005f8 <__aeabi_dmul>
 801603a:	a36b      	add	r3, pc, #428	; (adr r3, 80161e8 <atan+0x2d8>)
 801603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016040:	f7ea f924 	bl	800028c <__adddf3>
 8016044:	4632      	mov	r2, r6
 8016046:	463b      	mov	r3, r7
 8016048:	f7ea fad6 	bl	80005f8 <__aeabi_dmul>
 801604c:	a368      	add	r3, pc, #416	; (adr r3, 80161f0 <atan+0x2e0>)
 801604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016052:	f7ea f91b 	bl	800028c <__adddf3>
 8016056:	4642      	mov	r2, r8
 8016058:	464b      	mov	r3, r9
 801605a:	f7ea facd 	bl	80005f8 <__aeabi_dmul>
 801605e:	a366      	add	r3, pc, #408	; (adr r3, 80161f8 <atan+0x2e8>)
 8016060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016064:	4680      	mov	r8, r0
 8016066:	4689      	mov	r9, r1
 8016068:	4630      	mov	r0, r6
 801606a:	4639      	mov	r1, r7
 801606c:	f7ea fac4 	bl	80005f8 <__aeabi_dmul>
 8016070:	a363      	add	r3, pc, #396	; (adr r3, 8016200 <atan+0x2f0>)
 8016072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016076:	f7ea f907 	bl	8000288 <__aeabi_dsub>
 801607a:	4632      	mov	r2, r6
 801607c:	463b      	mov	r3, r7
 801607e:	f7ea fabb 	bl	80005f8 <__aeabi_dmul>
 8016082:	a361      	add	r3, pc, #388	; (adr r3, 8016208 <atan+0x2f8>)
 8016084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016088:	f7ea f8fe 	bl	8000288 <__aeabi_dsub>
 801608c:	4632      	mov	r2, r6
 801608e:	463b      	mov	r3, r7
 8016090:	f7ea fab2 	bl	80005f8 <__aeabi_dmul>
 8016094:	a35e      	add	r3, pc, #376	; (adr r3, 8016210 <atan+0x300>)
 8016096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801609a:	f7ea f8f5 	bl	8000288 <__aeabi_dsub>
 801609e:	4632      	mov	r2, r6
 80160a0:	463b      	mov	r3, r7
 80160a2:	f7ea faa9 	bl	80005f8 <__aeabi_dmul>
 80160a6:	a35c      	add	r3, pc, #368	; (adr r3, 8016218 <atan+0x308>)
 80160a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ac:	f7ea f8ec 	bl	8000288 <__aeabi_dsub>
 80160b0:	4632      	mov	r2, r6
 80160b2:	463b      	mov	r3, r7
 80160b4:	f7ea faa0 	bl	80005f8 <__aeabi_dmul>
 80160b8:	4602      	mov	r2, r0
 80160ba:	460b      	mov	r3, r1
 80160bc:	4640      	mov	r0, r8
 80160be:	4649      	mov	r1, r9
 80160c0:	f7ea f8e4 	bl	800028c <__adddf3>
 80160c4:	4622      	mov	r2, r4
 80160c6:	462b      	mov	r3, r5
 80160c8:	f7ea fa96 	bl	80005f8 <__aeabi_dmul>
 80160cc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80160d0:	4602      	mov	r2, r0
 80160d2:	460b      	mov	r3, r1
 80160d4:	d14b      	bne.n	801616e <atan+0x25e>
 80160d6:	4620      	mov	r0, r4
 80160d8:	4629      	mov	r1, r5
 80160da:	f7ea f8d5 	bl	8000288 <__aeabi_dsub>
 80160de:	e72c      	b.n	8015f3a <atan+0x2a>
 80160e0:	ee10 0a10 	vmov	r0, s0
 80160e4:	4b53      	ldr	r3, [pc, #332]	; (8016234 <atan+0x324>)
 80160e6:	2200      	movs	r2, #0
 80160e8:	4629      	mov	r1, r5
 80160ea:	f7ea f8cd 	bl	8000288 <__aeabi_dsub>
 80160ee:	4b51      	ldr	r3, [pc, #324]	; (8016234 <atan+0x324>)
 80160f0:	4606      	mov	r6, r0
 80160f2:	460f      	mov	r7, r1
 80160f4:	2200      	movs	r2, #0
 80160f6:	4620      	mov	r0, r4
 80160f8:	4629      	mov	r1, r5
 80160fa:	f7ea f8c7 	bl	800028c <__adddf3>
 80160fe:	4602      	mov	r2, r0
 8016100:	460b      	mov	r3, r1
 8016102:	4630      	mov	r0, r6
 8016104:	4639      	mov	r1, r7
 8016106:	f7ea fba1 	bl	800084c <__aeabi_ddiv>
 801610a:	f04f 0a01 	mov.w	sl, #1
 801610e:	4604      	mov	r4, r0
 8016110:	460d      	mov	r5, r1
 8016112:	e764      	b.n	8015fde <atan+0xce>
 8016114:	4b49      	ldr	r3, [pc, #292]	; (801623c <atan+0x32c>)
 8016116:	429e      	cmp	r6, r3
 8016118:	da1d      	bge.n	8016156 <atan+0x246>
 801611a:	ee10 0a10 	vmov	r0, s0
 801611e:	4b48      	ldr	r3, [pc, #288]	; (8016240 <atan+0x330>)
 8016120:	2200      	movs	r2, #0
 8016122:	4629      	mov	r1, r5
 8016124:	f7ea f8b0 	bl	8000288 <__aeabi_dsub>
 8016128:	4b45      	ldr	r3, [pc, #276]	; (8016240 <atan+0x330>)
 801612a:	4606      	mov	r6, r0
 801612c:	460f      	mov	r7, r1
 801612e:	2200      	movs	r2, #0
 8016130:	4620      	mov	r0, r4
 8016132:	4629      	mov	r1, r5
 8016134:	f7ea fa60 	bl	80005f8 <__aeabi_dmul>
 8016138:	4b3e      	ldr	r3, [pc, #248]	; (8016234 <atan+0x324>)
 801613a:	2200      	movs	r2, #0
 801613c:	f7ea f8a6 	bl	800028c <__adddf3>
 8016140:	4602      	mov	r2, r0
 8016142:	460b      	mov	r3, r1
 8016144:	4630      	mov	r0, r6
 8016146:	4639      	mov	r1, r7
 8016148:	f7ea fb80 	bl	800084c <__aeabi_ddiv>
 801614c:	f04f 0a02 	mov.w	sl, #2
 8016150:	4604      	mov	r4, r0
 8016152:	460d      	mov	r5, r1
 8016154:	e743      	b.n	8015fde <atan+0xce>
 8016156:	462b      	mov	r3, r5
 8016158:	ee10 2a10 	vmov	r2, s0
 801615c:	4939      	ldr	r1, [pc, #228]	; (8016244 <atan+0x334>)
 801615e:	2000      	movs	r0, #0
 8016160:	f7ea fb74 	bl	800084c <__aeabi_ddiv>
 8016164:	f04f 0a03 	mov.w	sl, #3
 8016168:	4604      	mov	r4, r0
 801616a:	460d      	mov	r5, r1
 801616c:	e737      	b.n	8015fde <atan+0xce>
 801616e:	4b36      	ldr	r3, [pc, #216]	; (8016248 <atan+0x338>)
 8016170:	4e36      	ldr	r6, [pc, #216]	; (801624c <atan+0x33c>)
 8016172:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801617a:	f7ea f885 	bl	8000288 <__aeabi_dsub>
 801617e:	4622      	mov	r2, r4
 8016180:	462b      	mov	r3, r5
 8016182:	f7ea f881 	bl	8000288 <__aeabi_dsub>
 8016186:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801618a:	4602      	mov	r2, r0
 801618c:	460b      	mov	r3, r1
 801618e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8016192:	f7ea f879 	bl	8000288 <__aeabi_dsub>
 8016196:	f1bb 0f00 	cmp.w	fp, #0
 801619a:	4604      	mov	r4, r0
 801619c:	460d      	mov	r5, r1
 801619e:	f6bf aed6 	bge.w	8015f4e <atan+0x3e>
 80161a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80161a6:	461d      	mov	r5, r3
 80161a8:	e6d1      	b.n	8015f4e <atan+0x3e>
 80161aa:	a51d      	add	r5, pc, #116	; (adr r5, 8016220 <atan+0x310>)
 80161ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80161b0:	e6cd      	b.n	8015f4e <atan+0x3e>
 80161b2:	bf00      	nop
 80161b4:	f3af 8000 	nop.w
 80161b8:	54442d18 	.word	0x54442d18
 80161bc:	bff921fb 	.word	0xbff921fb
 80161c0:	8800759c 	.word	0x8800759c
 80161c4:	7e37e43c 	.word	0x7e37e43c
 80161c8:	e322da11 	.word	0xe322da11
 80161cc:	3f90ad3a 	.word	0x3f90ad3a
 80161d0:	24760deb 	.word	0x24760deb
 80161d4:	3fa97b4b 	.word	0x3fa97b4b
 80161d8:	a0d03d51 	.word	0xa0d03d51
 80161dc:	3fb10d66 	.word	0x3fb10d66
 80161e0:	c54c206e 	.word	0xc54c206e
 80161e4:	3fb745cd 	.word	0x3fb745cd
 80161e8:	920083ff 	.word	0x920083ff
 80161ec:	3fc24924 	.word	0x3fc24924
 80161f0:	5555550d 	.word	0x5555550d
 80161f4:	3fd55555 	.word	0x3fd55555
 80161f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80161fc:	bfa2b444 	.word	0xbfa2b444
 8016200:	52defd9a 	.word	0x52defd9a
 8016204:	3fadde2d 	.word	0x3fadde2d
 8016208:	af749a6d 	.word	0xaf749a6d
 801620c:	3fb3b0f2 	.word	0x3fb3b0f2
 8016210:	fe231671 	.word	0xfe231671
 8016214:	3fbc71c6 	.word	0x3fbc71c6
 8016218:	9998ebc4 	.word	0x9998ebc4
 801621c:	3fc99999 	.word	0x3fc99999
 8016220:	54442d18 	.word	0x54442d18
 8016224:	3ff921fb 	.word	0x3ff921fb
 8016228:	440fffff 	.word	0x440fffff
 801622c:	7ff00000 	.word	0x7ff00000
 8016230:	3fdbffff 	.word	0x3fdbffff
 8016234:	3ff00000 	.word	0x3ff00000
 8016238:	3ff2ffff 	.word	0x3ff2ffff
 801623c:	40038000 	.word	0x40038000
 8016240:	3ff80000 	.word	0x3ff80000
 8016244:	bff00000 	.word	0xbff00000
 8016248:	08018608 	.word	0x08018608
 801624c:	080185e8 	.word	0x080185e8

08016250 <sinf>:
 8016250:	ee10 3a10 	vmov	r3, s0
 8016254:	b507      	push	{r0, r1, r2, lr}
 8016256:	4a1f      	ldr	r2, [pc, #124]	; (80162d4 <sinf+0x84>)
 8016258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801625c:	4293      	cmp	r3, r2
 801625e:	dc07      	bgt.n	8016270 <sinf+0x20>
 8016260:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80162d8 <sinf+0x88>
 8016264:	2000      	movs	r0, #0
 8016266:	b003      	add	sp, #12
 8016268:	f85d eb04 	ldr.w	lr, [sp], #4
 801626c:	f000 b8ca 	b.w	8016404 <__kernel_sinf>
 8016270:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016274:	db04      	blt.n	8016280 <sinf+0x30>
 8016276:	ee30 0a40 	vsub.f32	s0, s0, s0
 801627a:	b003      	add	sp, #12
 801627c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016280:	4668      	mov	r0, sp
 8016282:	f000 fd4d 	bl	8016d20 <__ieee754_rem_pio2f>
 8016286:	f000 0003 	and.w	r0, r0, #3
 801628a:	2801      	cmp	r0, #1
 801628c:	d00a      	beq.n	80162a4 <sinf+0x54>
 801628e:	2802      	cmp	r0, #2
 8016290:	d00f      	beq.n	80162b2 <sinf+0x62>
 8016292:	b9c0      	cbnz	r0, 80162c6 <sinf+0x76>
 8016294:	eddd 0a01 	vldr	s1, [sp, #4]
 8016298:	ed9d 0a00 	vldr	s0, [sp]
 801629c:	2001      	movs	r0, #1
 801629e:	f000 f8b1 	bl	8016404 <__kernel_sinf>
 80162a2:	e7ea      	b.n	801627a <sinf+0x2a>
 80162a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80162a8:	ed9d 0a00 	vldr	s0, [sp]
 80162ac:	f000 f84c 	bl	8016348 <__kernel_cosf>
 80162b0:	e7e3      	b.n	801627a <sinf+0x2a>
 80162b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80162b6:	ed9d 0a00 	vldr	s0, [sp]
 80162ba:	2001      	movs	r0, #1
 80162bc:	f000 f8a2 	bl	8016404 <__kernel_sinf>
 80162c0:	eeb1 0a40 	vneg.f32	s0, s0
 80162c4:	e7d9      	b.n	801627a <sinf+0x2a>
 80162c6:	eddd 0a01 	vldr	s1, [sp, #4]
 80162ca:	ed9d 0a00 	vldr	s0, [sp]
 80162ce:	f000 f83b 	bl	8016348 <__kernel_cosf>
 80162d2:	e7f5      	b.n	80162c0 <sinf+0x70>
 80162d4:	3f490fd8 	.word	0x3f490fd8
 80162d8:	00000000 	.word	0x00000000

080162dc <fabs>:
 80162dc:	ec51 0b10 	vmov	r0, r1, d0
 80162e0:	ee10 2a10 	vmov	r2, s0
 80162e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80162e8:	ec43 2b10 	vmov	d0, r2, r3
 80162ec:	4770      	bx	lr
	...

080162f0 <tanf>:
 80162f0:	ee10 3a10 	vmov	r3, s0
 80162f4:	b507      	push	{r0, r1, r2, lr}
 80162f6:	4a12      	ldr	r2, [pc, #72]	; (8016340 <tanf+0x50>)
 80162f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80162fc:	4293      	cmp	r3, r2
 80162fe:	dc07      	bgt.n	8016310 <tanf+0x20>
 8016300:	eddf 0a10 	vldr	s1, [pc, #64]	; 8016344 <tanf+0x54>
 8016304:	2001      	movs	r0, #1
 8016306:	b003      	add	sp, #12
 8016308:	f85d eb04 	ldr.w	lr, [sp], #4
 801630c:	f000 b8c2 	b.w	8016494 <__kernel_tanf>
 8016310:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016314:	db04      	blt.n	8016320 <tanf+0x30>
 8016316:	ee30 0a40 	vsub.f32	s0, s0, s0
 801631a:	b003      	add	sp, #12
 801631c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016320:	4668      	mov	r0, sp
 8016322:	f000 fcfd 	bl	8016d20 <__ieee754_rem_pio2f>
 8016326:	0040      	lsls	r0, r0, #1
 8016328:	f000 0002 	and.w	r0, r0, #2
 801632c:	eddd 0a01 	vldr	s1, [sp, #4]
 8016330:	ed9d 0a00 	vldr	s0, [sp]
 8016334:	f1c0 0001 	rsb	r0, r0, #1
 8016338:	f000 f8ac 	bl	8016494 <__kernel_tanf>
 801633c:	e7ed      	b.n	801631a <tanf+0x2a>
 801633e:	bf00      	nop
 8016340:	3f490fda 	.word	0x3f490fda
 8016344:	00000000 	.word	0x00000000

08016348 <__kernel_cosf>:
 8016348:	ee10 3a10 	vmov	r3, s0
 801634c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016350:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016358:	da05      	bge.n	8016366 <__kernel_cosf+0x1e>
 801635a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801635e:	ee17 2a90 	vmov	r2, s15
 8016362:	2a00      	cmp	r2, #0
 8016364:	d03b      	beq.n	80163de <__kernel_cosf+0x96>
 8016366:	ee20 7a00 	vmul.f32	s14, s0, s0
 801636a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80163e4 <__kernel_cosf+0x9c>
 801636e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80163e8 <__kernel_cosf+0xa0>
 8016372:	4a1e      	ldr	r2, [pc, #120]	; (80163ec <__kernel_cosf+0xa4>)
 8016374:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016378:	4293      	cmp	r3, r2
 801637a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80163f0 <__kernel_cosf+0xa8>
 801637e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016382:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80163f4 <__kernel_cosf+0xac>
 8016386:	eea7 6a87 	vfma.f32	s12, s15, s14
 801638a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80163f8 <__kernel_cosf+0xb0>
 801638e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016392:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80163fc <__kernel_cosf+0xb4>
 8016396:	eea7 6a87 	vfma.f32	s12, s15, s14
 801639a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801639e:	ee26 6a07 	vmul.f32	s12, s12, s14
 80163a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80163a6:	eee7 0a06 	vfma.f32	s1, s14, s12
 80163aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80163ae:	dc04      	bgt.n	80163ba <__kernel_cosf+0x72>
 80163b0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80163b4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80163b8:	4770      	bx	lr
 80163ba:	4a11      	ldr	r2, [pc, #68]	; (8016400 <__kernel_cosf+0xb8>)
 80163bc:	4293      	cmp	r3, r2
 80163be:	bfda      	itte	le
 80163c0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80163c4:	ee07 3a10 	vmovle	s14, r3
 80163c8:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80163cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80163d0:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80163d4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80163d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80163dc:	4770      	bx	lr
 80163de:	eeb0 0a66 	vmov.f32	s0, s13
 80163e2:	4770      	bx	lr
 80163e4:	ad47d74e 	.word	0xad47d74e
 80163e8:	310f74f6 	.word	0x310f74f6
 80163ec:	3e999999 	.word	0x3e999999
 80163f0:	b493f27c 	.word	0xb493f27c
 80163f4:	37d00d01 	.word	0x37d00d01
 80163f8:	bab60b61 	.word	0xbab60b61
 80163fc:	3d2aaaab 	.word	0x3d2aaaab
 8016400:	3f480000 	.word	0x3f480000

08016404 <__kernel_sinf>:
 8016404:	ee10 3a10 	vmov	r3, s0
 8016408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801640c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016410:	da04      	bge.n	801641c <__kernel_sinf+0x18>
 8016412:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016416:	ee17 3a90 	vmov	r3, s15
 801641a:	b35b      	cbz	r3, 8016474 <__kernel_sinf+0x70>
 801641c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016420:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016478 <__kernel_sinf+0x74>
 8016424:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801647c <__kernel_sinf+0x78>
 8016428:	eea7 6a27 	vfma.f32	s12, s14, s15
 801642c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8016480 <__kernel_sinf+0x7c>
 8016430:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016434:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016484 <__kernel_sinf+0x80>
 8016438:	eea7 6a87 	vfma.f32	s12, s15, s14
 801643c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016488 <__kernel_sinf+0x84>
 8016440:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016444:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016448:	b930      	cbnz	r0, 8016458 <__kernel_sinf+0x54>
 801644a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801648c <__kernel_sinf+0x88>
 801644e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016452:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016456:	4770      	bx	lr
 8016458:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801645c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016460:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016464:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016468:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016490 <__kernel_sinf+0x8c>
 801646c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016470:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016474:	4770      	bx	lr
 8016476:	bf00      	nop
 8016478:	2f2ec9d3 	.word	0x2f2ec9d3
 801647c:	b2d72f34 	.word	0xb2d72f34
 8016480:	3638ef1b 	.word	0x3638ef1b
 8016484:	b9500d01 	.word	0xb9500d01
 8016488:	3c088889 	.word	0x3c088889
 801648c:	be2aaaab 	.word	0xbe2aaaab
 8016490:	3e2aaaab 	.word	0x3e2aaaab

08016494 <__kernel_tanf>:
 8016494:	b508      	push	{r3, lr}
 8016496:	ee10 3a10 	vmov	r3, s0
 801649a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801649e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 80164a2:	eef0 7a40 	vmov.f32	s15, s0
 80164a6:	da17      	bge.n	80164d8 <__kernel_tanf+0x44>
 80164a8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80164ac:	ee17 1a10 	vmov	r1, s14
 80164b0:	bb41      	cbnz	r1, 8016504 <__kernel_tanf+0x70>
 80164b2:	1c43      	adds	r3, r0, #1
 80164b4:	4313      	orrs	r3, r2
 80164b6:	d108      	bne.n	80164ca <__kernel_tanf+0x36>
 80164b8:	f7ff fd20 	bl	8015efc <fabsf>
 80164bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80164c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80164c4:	eeb0 0a67 	vmov.f32	s0, s15
 80164c8:	bd08      	pop	{r3, pc}
 80164ca:	2801      	cmp	r0, #1
 80164cc:	d0fa      	beq.n	80164c4 <__kernel_tanf+0x30>
 80164ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80164d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80164d6:	e7f5      	b.n	80164c4 <__kernel_tanf+0x30>
 80164d8:	494c      	ldr	r1, [pc, #304]	; (801660c <__kernel_tanf+0x178>)
 80164da:	428a      	cmp	r2, r1
 80164dc:	db12      	blt.n	8016504 <__kernel_tanf+0x70>
 80164de:	2b00      	cmp	r3, #0
 80164e0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8016610 <__kernel_tanf+0x17c>
 80164e4:	bfb8      	it	lt
 80164e6:	eef1 7a40 	vneglt.f32	s15, s0
 80164ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80164ee:	eddf 7a49 	vldr	s15, [pc, #292]	; 8016614 <__kernel_tanf+0x180>
 80164f2:	bfb8      	it	lt
 80164f4:	eef1 0a60 	vneglt.f32	s1, s1
 80164f8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80164fc:	eddf 0a46 	vldr	s1, [pc, #280]	; 8016618 <__kernel_tanf+0x184>
 8016500:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016504:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016508:	eddf 5a44 	vldr	s11, [pc, #272]	; 801661c <__kernel_tanf+0x188>
 801650c:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8016620 <__kernel_tanf+0x18c>
 8016510:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8016624 <__kernel_tanf+0x190>
 8016514:	493d      	ldr	r1, [pc, #244]	; (801660c <__kernel_tanf+0x178>)
 8016516:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801651a:	428a      	cmp	r2, r1
 801651c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016520:	eddf 5a41 	vldr	s11, [pc, #260]	; 8016628 <__kernel_tanf+0x194>
 8016524:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016528:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801662c <__kernel_tanf+0x198>
 801652c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016530:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8016630 <__kernel_tanf+0x19c>
 8016534:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016538:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8016634 <__kernel_tanf+0x1a0>
 801653c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016540:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8016638 <__kernel_tanf+0x1a4>
 8016544:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016548:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801663c <__kernel_tanf+0x1a8>
 801654c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016550:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8016640 <__kernel_tanf+0x1ac>
 8016554:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016558:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8016644 <__kernel_tanf+0x1b0>
 801655c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016560:	eddf 5a39 	vldr	s11, [pc, #228]	; 8016648 <__kernel_tanf+0x1b4>
 8016564:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016568:	eeb0 7a46 	vmov.f32	s14, s12
 801656c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016570:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8016574:	eeb0 6a60 	vmov.f32	s12, s1
 8016578:	eea7 6a05 	vfma.f32	s12, s14, s10
 801657c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801664c <__kernel_tanf+0x1b8>
 8016580:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016584:	eee5 0a07 	vfma.f32	s1, s10, s14
 8016588:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801658c:	db1d      	blt.n	80165ca <__kernel_tanf+0x136>
 801658e:	ee07 0a10 	vmov	s14, r0
 8016592:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016596:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801659a:	ee76 6a87 	vadd.f32	s13, s13, s14
 801659e:	179b      	asrs	r3, r3, #30
 80165a0:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 80165a4:	f003 0302 	and.w	r3, r3, #2
 80165a8:	f1c3 0301 	rsb	r3, r3, #1
 80165ac:	ee76 6a60 	vsub.f32	s13, s12, s1
 80165b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80165b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80165b8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80165bc:	ee07 3a90 	vmov	s15, r3
 80165c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80165c8:	e77c      	b.n	80164c4 <__kernel_tanf+0x30>
 80165ca:	2801      	cmp	r0, #1
 80165cc:	d01b      	beq.n	8016606 <__kernel_tanf+0x172>
 80165ce:	4b20      	ldr	r3, [pc, #128]	; (8016650 <__kernel_tanf+0x1bc>)
 80165d0:	ee16 2a90 	vmov	r2, s13
 80165d4:	401a      	ands	r2, r3
 80165d6:	ee05 2a90 	vmov	s11, r2
 80165da:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80165de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80165e2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80165e6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80165ea:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80165ee:	ee16 2a10 	vmov	r2, s12
 80165f2:	4013      	ands	r3, r2
 80165f4:	ee07 3a90 	vmov	s15, r3
 80165f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80165fc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016600:	eee7 7a06 	vfma.f32	s15, s14, s12
 8016604:	e75e      	b.n	80164c4 <__kernel_tanf+0x30>
 8016606:	eef0 7a66 	vmov.f32	s15, s13
 801660a:	e75b      	b.n	80164c4 <__kernel_tanf+0x30>
 801660c:	3f2ca140 	.word	0x3f2ca140
 8016610:	3f490fda 	.word	0x3f490fda
 8016614:	33222168 	.word	0x33222168
 8016618:	00000000 	.word	0x00000000
 801661c:	b79bae5f 	.word	0xb79bae5f
 8016620:	38a3f445 	.word	0x38a3f445
 8016624:	37d95384 	.word	0x37d95384
 8016628:	3a1a26c8 	.word	0x3a1a26c8
 801662c:	3b6b6916 	.word	0x3b6b6916
 8016630:	3cb327a4 	.word	0x3cb327a4
 8016634:	3e088889 	.word	0x3e088889
 8016638:	3895c07a 	.word	0x3895c07a
 801663c:	398137b9 	.word	0x398137b9
 8016640:	3abede48 	.word	0x3abede48
 8016644:	3c11371f 	.word	0x3c11371f
 8016648:	3d5d0dd1 	.word	0x3d5d0dd1
 801664c:	3eaaaaab 	.word	0x3eaaaaab
 8016650:	fffff000 	.word	0xfffff000

08016654 <__ieee754_asinf>:
 8016654:	b538      	push	{r3, r4, r5, lr}
 8016656:	ee10 5a10 	vmov	r5, s0
 801665a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801665e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016662:	ed2d 8b04 	vpush	{d8-d9}
 8016666:	d10c      	bne.n	8016682 <__ieee754_asinf+0x2e>
 8016668:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80167e0 <__ieee754_asinf+0x18c>
 801666c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80167e4 <__ieee754_asinf+0x190>
 8016670:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016674:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016678:	eeb0 0a67 	vmov.f32	s0, s15
 801667c:	ecbd 8b04 	vpop	{d8-d9}
 8016680:	bd38      	pop	{r3, r4, r5, pc}
 8016682:	dd04      	ble.n	801668e <__ieee754_asinf+0x3a>
 8016684:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016688:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801668c:	e7f6      	b.n	801667c <__ieee754_asinf+0x28>
 801668e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8016692:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8016696:	da0b      	bge.n	80166b0 <__ieee754_asinf+0x5c>
 8016698:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801669c:	da52      	bge.n	8016744 <__ieee754_asinf+0xf0>
 801669e:	eddf 7a52 	vldr	s15, [pc, #328]	; 80167e8 <__ieee754_asinf+0x194>
 80166a2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80166a6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80166aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ae:	dce5      	bgt.n	801667c <__ieee754_asinf+0x28>
 80166b0:	f7ff fc24 	bl	8015efc <fabsf>
 80166b4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80166b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80166bc:	ee20 8a27 	vmul.f32	s16, s0, s15
 80166c0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80167ec <__ieee754_asinf+0x198>
 80166c4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80167f0 <__ieee754_asinf+0x19c>
 80166c8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80167f4 <__ieee754_asinf+0x1a0>
 80166cc:	eea8 7a27 	vfma.f32	s14, s16, s15
 80166d0:	eddf 7a49 	vldr	s15, [pc, #292]	; 80167f8 <__ieee754_asinf+0x1a4>
 80166d4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80166d8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80167fc <__ieee754_asinf+0x1a8>
 80166dc:	eea7 7a88 	vfma.f32	s14, s15, s16
 80166e0:	eddf 7a47 	vldr	s15, [pc, #284]	; 8016800 <__ieee754_asinf+0x1ac>
 80166e4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80166e8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8016804 <__ieee754_asinf+0x1b0>
 80166ec:	eea7 9a88 	vfma.f32	s18, s15, s16
 80166f0:	eddf 7a45 	vldr	s15, [pc, #276]	; 8016808 <__ieee754_asinf+0x1b4>
 80166f4:	eee8 7a07 	vfma.f32	s15, s16, s14
 80166f8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801680c <__ieee754_asinf+0x1b8>
 80166fc:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016700:	eddf 7a43 	vldr	s15, [pc, #268]	; 8016810 <__ieee754_asinf+0x1bc>
 8016704:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016708:	eeb0 0a48 	vmov.f32	s0, s16
 801670c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8016710:	f000 fa00 	bl	8016b14 <__ieee754_sqrtf>
 8016714:	4b3f      	ldr	r3, [pc, #252]	; (8016814 <__ieee754_asinf+0x1c0>)
 8016716:	ee29 9a08 	vmul.f32	s18, s18, s16
 801671a:	429c      	cmp	r4, r3
 801671c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8016720:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016724:	dd3d      	ble.n	80167a2 <__ieee754_asinf+0x14e>
 8016726:	eea0 0a06 	vfma.f32	s0, s0, s12
 801672a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8016818 <__ieee754_asinf+0x1c4>
 801672e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8016732:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80167e4 <__ieee754_asinf+0x190>
 8016736:	ee30 0a67 	vsub.f32	s0, s0, s15
 801673a:	2d00      	cmp	r5, #0
 801673c:	bfd8      	it	le
 801673e:	eeb1 0a40 	vnegle.f32	s0, s0
 8016742:	e79b      	b.n	801667c <__ieee754_asinf+0x28>
 8016744:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016748:	eddf 6a29 	vldr	s13, [pc, #164]	; 80167f0 <__ieee754_asinf+0x19c>
 801674c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80167ec <__ieee754_asinf+0x198>
 8016750:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8016804 <__ieee754_asinf+0x1b0>
 8016754:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016758:	eddf 6a27 	vldr	s13, [pc, #156]	; 80167f8 <__ieee754_asinf+0x1a4>
 801675c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016760:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80167fc <__ieee754_asinf+0x1a8>
 8016764:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016768:	eddf 6a25 	vldr	s13, [pc, #148]	; 8016800 <__ieee754_asinf+0x1ac>
 801676c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016770:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80167f4 <__ieee754_asinf+0x1a0>
 8016774:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016778:	eddf 6a23 	vldr	s13, [pc, #140]	; 8016808 <__ieee754_asinf+0x1b4>
 801677c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8016780:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801680c <__ieee754_asinf+0x1b8>
 8016784:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8016788:	eddf 6a21 	vldr	s13, [pc, #132]	; 8016810 <__ieee754_asinf+0x1bc>
 801678c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016790:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016794:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8016798:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801679c:	eea0 0a27 	vfma.f32	s0, s0, s15
 80167a0:	e76c      	b.n	801667c <__ieee754_asinf+0x28>
 80167a2:	ee10 3a10 	vmov	r3, s0
 80167a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80167aa:	f023 030f 	bic.w	r3, r3, #15
 80167ae:	ee07 3a10 	vmov	s14, r3
 80167b2:	eea7 8a47 	vfms.f32	s16, s14, s14
 80167b6:	ee70 7a07 	vadd.f32	s15, s0, s14
 80167ba:	ee30 0a00 	vadd.f32	s0, s0, s0
 80167be:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80167c2:	eddf 7a07 	vldr	s15, [pc, #28]	; 80167e0 <__ieee754_asinf+0x18c>
 80167c6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80167ca:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80167ce:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801681c <__ieee754_asinf+0x1c8>
 80167d2:	eeb0 6a40 	vmov.f32	s12, s0
 80167d6:	eea7 6a66 	vfms.f32	s12, s14, s13
 80167da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80167de:	e7aa      	b.n	8016736 <__ieee754_asinf+0xe2>
 80167e0:	b33bbd2e 	.word	0xb33bbd2e
 80167e4:	3fc90fdb 	.word	0x3fc90fdb
 80167e8:	7149f2ca 	.word	0x7149f2ca
 80167ec:	3a4f7f04 	.word	0x3a4f7f04
 80167f0:	3811ef08 	.word	0x3811ef08
 80167f4:	3e2aaaab 	.word	0x3e2aaaab
 80167f8:	bd241146 	.word	0xbd241146
 80167fc:	3e4e0aa8 	.word	0x3e4e0aa8
 8016800:	bea6b090 	.word	0xbea6b090
 8016804:	3d9dc62e 	.word	0x3d9dc62e
 8016808:	bf303361 	.word	0xbf303361
 801680c:	4001572d 	.word	0x4001572d
 8016810:	c019d139 	.word	0xc019d139
 8016814:	3f799999 	.word	0x3f799999
 8016818:	333bbd2e 	.word	0x333bbd2e
 801681c:	3f490fdb 	.word	0x3f490fdb

08016820 <__ieee754_atan2f>:
 8016820:	ee10 2a90 	vmov	r2, s1
 8016824:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8016828:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801682c:	b510      	push	{r4, lr}
 801682e:	eef0 7a40 	vmov.f32	s15, s0
 8016832:	dc06      	bgt.n	8016842 <__ieee754_atan2f+0x22>
 8016834:	ee10 0a10 	vmov	r0, s0
 8016838:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801683c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016840:	dd04      	ble.n	801684c <__ieee754_atan2f+0x2c>
 8016842:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8016846:	eeb0 0a67 	vmov.f32	s0, s15
 801684a:	bd10      	pop	{r4, pc}
 801684c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8016850:	d103      	bne.n	801685a <__ieee754_atan2f+0x3a>
 8016852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016856:	f000 bb8f 	b.w	8016f78 <atanf>
 801685a:	1794      	asrs	r4, r2, #30
 801685c:	f004 0402 	and.w	r4, r4, #2
 8016860:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8016864:	b943      	cbnz	r3, 8016878 <__ieee754_atan2f+0x58>
 8016866:	2c02      	cmp	r4, #2
 8016868:	d05e      	beq.n	8016928 <__ieee754_atan2f+0x108>
 801686a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801693c <__ieee754_atan2f+0x11c>
 801686e:	2c03      	cmp	r4, #3
 8016870:	bf08      	it	eq
 8016872:	eef0 7a47 	vmoveq.f32	s15, s14
 8016876:	e7e6      	b.n	8016846 <__ieee754_atan2f+0x26>
 8016878:	b941      	cbnz	r1, 801688c <__ieee754_atan2f+0x6c>
 801687a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8016940 <__ieee754_atan2f+0x120>
 801687e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8016944 <__ieee754_atan2f+0x124>
 8016882:	2800      	cmp	r0, #0
 8016884:	bfb8      	it	lt
 8016886:	eef0 7a47 	vmovlt.f32	s15, s14
 801688a:	e7dc      	b.n	8016846 <__ieee754_atan2f+0x26>
 801688c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016890:	d110      	bne.n	80168b4 <__ieee754_atan2f+0x94>
 8016892:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016896:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801689a:	d107      	bne.n	80168ac <__ieee754_atan2f+0x8c>
 801689c:	2c02      	cmp	r4, #2
 801689e:	d846      	bhi.n	801692e <__ieee754_atan2f+0x10e>
 80168a0:	4b29      	ldr	r3, [pc, #164]	; (8016948 <__ieee754_atan2f+0x128>)
 80168a2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80168a6:	edd3 7a00 	vldr	s15, [r3]
 80168aa:	e7cc      	b.n	8016846 <__ieee754_atan2f+0x26>
 80168ac:	2c02      	cmp	r4, #2
 80168ae:	d841      	bhi.n	8016934 <__ieee754_atan2f+0x114>
 80168b0:	4b26      	ldr	r3, [pc, #152]	; (801694c <__ieee754_atan2f+0x12c>)
 80168b2:	e7f6      	b.n	80168a2 <__ieee754_atan2f+0x82>
 80168b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80168b8:	d0df      	beq.n	801687a <__ieee754_atan2f+0x5a>
 80168ba:	1a5b      	subs	r3, r3, r1
 80168bc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80168c0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80168c4:	da1a      	bge.n	80168fc <__ieee754_atan2f+0xdc>
 80168c6:	2a00      	cmp	r2, #0
 80168c8:	da01      	bge.n	80168ce <__ieee754_atan2f+0xae>
 80168ca:	313c      	adds	r1, #60	; 0x3c
 80168cc:	db19      	blt.n	8016902 <__ieee754_atan2f+0xe2>
 80168ce:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80168d2:	f7ff fb13 	bl	8015efc <fabsf>
 80168d6:	f000 fb4f 	bl	8016f78 <atanf>
 80168da:	eef0 7a40 	vmov.f32	s15, s0
 80168de:	2c01      	cmp	r4, #1
 80168e0:	d012      	beq.n	8016908 <__ieee754_atan2f+0xe8>
 80168e2:	2c02      	cmp	r4, #2
 80168e4:	d017      	beq.n	8016916 <__ieee754_atan2f+0xf6>
 80168e6:	2c00      	cmp	r4, #0
 80168e8:	d0ad      	beq.n	8016846 <__ieee754_atan2f+0x26>
 80168ea:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8016950 <__ieee754_atan2f+0x130>
 80168ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80168f2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8016954 <__ieee754_atan2f+0x134>
 80168f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80168fa:	e7a4      	b.n	8016846 <__ieee754_atan2f+0x26>
 80168fc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8016940 <__ieee754_atan2f+0x120>
 8016900:	e7ed      	b.n	80168de <__ieee754_atan2f+0xbe>
 8016902:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016958 <__ieee754_atan2f+0x138>
 8016906:	e7ea      	b.n	80168de <__ieee754_atan2f+0xbe>
 8016908:	ee17 3a90 	vmov	r3, s15
 801690c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016910:	ee07 3a90 	vmov	s15, r3
 8016914:	e797      	b.n	8016846 <__ieee754_atan2f+0x26>
 8016916:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8016950 <__ieee754_atan2f+0x130>
 801691a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801691e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8016954 <__ieee754_atan2f+0x134>
 8016922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016926:	e78e      	b.n	8016846 <__ieee754_atan2f+0x26>
 8016928:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8016954 <__ieee754_atan2f+0x134>
 801692c:	e78b      	b.n	8016846 <__ieee754_atan2f+0x26>
 801692e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801695c <__ieee754_atan2f+0x13c>
 8016932:	e788      	b.n	8016846 <__ieee754_atan2f+0x26>
 8016934:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016958 <__ieee754_atan2f+0x138>
 8016938:	e785      	b.n	8016846 <__ieee754_atan2f+0x26>
 801693a:	bf00      	nop
 801693c:	c0490fdb 	.word	0xc0490fdb
 8016940:	3fc90fdb 	.word	0x3fc90fdb
 8016944:	bfc90fdb 	.word	0xbfc90fdb
 8016948:	08018628 	.word	0x08018628
 801694c:	08018634 	.word	0x08018634
 8016950:	33bbbd2e 	.word	0x33bbbd2e
 8016954:	40490fdb 	.word	0x40490fdb
 8016958:	00000000 	.word	0x00000000
 801695c:	3f490fdb 	.word	0x3f490fdb

08016960 <__ieee754_sqrt>:
 8016960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016964:	ec55 4b10 	vmov	r4, r5, d0
 8016968:	4e67      	ldr	r6, [pc, #412]	; (8016b08 <__ieee754_sqrt+0x1a8>)
 801696a:	43ae      	bics	r6, r5
 801696c:	ee10 0a10 	vmov	r0, s0
 8016970:	ee10 2a10 	vmov	r2, s0
 8016974:	4629      	mov	r1, r5
 8016976:	462b      	mov	r3, r5
 8016978:	d10d      	bne.n	8016996 <__ieee754_sqrt+0x36>
 801697a:	f7e9 fe3d 	bl	80005f8 <__aeabi_dmul>
 801697e:	4602      	mov	r2, r0
 8016980:	460b      	mov	r3, r1
 8016982:	4620      	mov	r0, r4
 8016984:	4629      	mov	r1, r5
 8016986:	f7e9 fc81 	bl	800028c <__adddf3>
 801698a:	4604      	mov	r4, r0
 801698c:	460d      	mov	r5, r1
 801698e:	ec45 4b10 	vmov	d0, r4, r5
 8016992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016996:	2d00      	cmp	r5, #0
 8016998:	dc0b      	bgt.n	80169b2 <__ieee754_sqrt+0x52>
 801699a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801699e:	4326      	orrs	r6, r4
 80169a0:	d0f5      	beq.n	801698e <__ieee754_sqrt+0x2e>
 80169a2:	b135      	cbz	r5, 80169b2 <__ieee754_sqrt+0x52>
 80169a4:	f7e9 fc70 	bl	8000288 <__aeabi_dsub>
 80169a8:	4602      	mov	r2, r0
 80169aa:	460b      	mov	r3, r1
 80169ac:	f7e9 ff4e 	bl	800084c <__aeabi_ddiv>
 80169b0:	e7eb      	b.n	801698a <__ieee754_sqrt+0x2a>
 80169b2:	1509      	asrs	r1, r1, #20
 80169b4:	f000 808d 	beq.w	8016ad2 <__ieee754_sqrt+0x172>
 80169b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80169bc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80169c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80169c4:	07c9      	lsls	r1, r1, #31
 80169c6:	bf5c      	itt	pl
 80169c8:	005b      	lslpl	r3, r3, #1
 80169ca:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80169ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80169d2:	bf58      	it	pl
 80169d4:	0052      	lslpl	r2, r2, #1
 80169d6:	2500      	movs	r5, #0
 80169d8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80169dc:	1076      	asrs	r6, r6, #1
 80169de:	0052      	lsls	r2, r2, #1
 80169e0:	f04f 0e16 	mov.w	lr, #22
 80169e4:	46ac      	mov	ip, r5
 80169e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80169ea:	eb0c 0001 	add.w	r0, ip, r1
 80169ee:	4298      	cmp	r0, r3
 80169f0:	bfde      	ittt	le
 80169f2:	1a1b      	suble	r3, r3, r0
 80169f4:	eb00 0c01 	addle.w	ip, r0, r1
 80169f8:	186d      	addle	r5, r5, r1
 80169fa:	005b      	lsls	r3, r3, #1
 80169fc:	f1be 0e01 	subs.w	lr, lr, #1
 8016a00:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016a04:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016a08:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016a0c:	d1ed      	bne.n	80169ea <__ieee754_sqrt+0x8a>
 8016a0e:	4674      	mov	r4, lr
 8016a10:	2720      	movs	r7, #32
 8016a12:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8016a16:	4563      	cmp	r3, ip
 8016a18:	eb01 000e 	add.w	r0, r1, lr
 8016a1c:	dc02      	bgt.n	8016a24 <__ieee754_sqrt+0xc4>
 8016a1e:	d113      	bne.n	8016a48 <__ieee754_sqrt+0xe8>
 8016a20:	4290      	cmp	r0, r2
 8016a22:	d811      	bhi.n	8016a48 <__ieee754_sqrt+0xe8>
 8016a24:	2800      	cmp	r0, #0
 8016a26:	eb00 0e01 	add.w	lr, r0, r1
 8016a2a:	da57      	bge.n	8016adc <__ieee754_sqrt+0x17c>
 8016a2c:	f1be 0f00 	cmp.w	lr, #0
 8016a30:	db54      	blt.n	8016adc <__ieee754_sqrt+0x17c>
 8016a32:	f10c 0801 	add.w	r8, ip, #1
 8016a36:	eba3 030c 	sub.w	r3, r3, ip
 8016a3a:	4290      	cmp	r0, r2
 8016a3c:	bf88      	it	hi
 8016a3e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8016a42:	1a12      	subs	r2, r2, r0
 8016a44:	440c      	add	r4, r1
 8016a46:	46c4      	mov	ip, r8
 8016a48:	005b      	lsls	r3, r3, #1
 8016a4a:	3f01      	subs	r7, #1
 8016a4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016a50:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016a54:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016a58:	d1dd      	bne.n	8016a16 <__ieee754_sqrt+0xb6>
 8016a5a:	4313      	orrs	r3, r2
 8016a5c:	d01b      	beq.n	8016a96 <__ieee754_sqrt+0x136>
 8016a5e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8016b0c <__ieee754_sqrt+0x1ac>
 8016a62:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8016b10 <__ieee754_sqrt+0x1b0>
 8016a66:	e9da 0100 	ldrd	r0, r1, [sl]
 8016a6a:	e9db 2300 	ldrd	r2, r3, [fp]
 8016a6e:	f7e9 fc0b 	bl	8000288 <__aeabi_dsub>
 8016a72:	e9da 8900 	ldrd	r8, r9, [sl]
 8016a76:	4602      	mov	r2, r0
 8016a78:	460b      	mov	r3, r1
 8016a7a:	4640      	mov	r0, r8
 8016a7c:	4649      	mov	r1, r9
 8016a7e:	f7ea f837 	bl	8000af0 <__aeabi_dcmple>
 8016a82:	b140      	cbz	r0, 8016a96 <__ieee754_sqrt+0x136>
 8016a84:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8016a88:	e9da 0100 	ldrd	r0, r1, [sl]
 8016a8c:	e9db 2300 	ldrd	r2, r3, [fp]
 8016a90:	d126      	bne.n	8016ae0 <__ieee754_sqrt+0x180>
 8016a92:	3501      	adds	r5, #1
 8016a94:	463c      	mov	r4, r7
 8016a96:	106a      	asrs	r2, r5, #1
 8016a98:	0863      	lsrs	r3, r4, #1
 8016a9a:	07e9      	lsls	r1, r5, #31
 8016a9c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8016aa0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8016aa4:	bf48      	it	mi
 8016aa6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8016aaa:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8016aae:	461c      	mov	r4, r3
 8016ab0:	e76d      	b.n	801698e <__ieee754_sqrt+0x2e>
 8016ab2:	0ad3      	lsrs	r3, r2, #11
 8016ab4:	3815      	subs	r0, #21
 8016ab6:	0552      	lsls	r2, r2, #21
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d0fa      	beq.n	8016ab2 <__ieee754_sqrt+0x152>
 8016abc:	02dc      	lsls	r4, r3, #11
 8016abe:	d50a      	bpl.n	8016ad6 <__ieee754_sqrt+0x176>
 8016ac0:	f1c1 0420 	rsb	r4, r1, #32
 8016ac4:	fa22 f404 	lsr.w	r4, r2, r4
 8016ac8:	1e4d      	subs	r5, r1, #1
 8016aca:	408a      	lsls	r2, r1
 8016acc:	4323      	orrs	r3, r4
 8016ace:	1b41      	subs	r1, r0, r5
 8016ad0:	e772      	b.n	80169b8 <__ieee754_sqrt+0x58>
 8016ad2:	4608      	mov	r0, r1
 8016ad4:	e7f0      	b.n	8016ab8 <__ieee754_sqrt+0x158>
 8016ad6:	005b      	lsls	r3, r3, #1
 8016ad8:	3101      	adds	r1, #1
 8016ada:	e7ef      	b.n	8016abc <__ieee754_sqrt+0x15c>
 8016adc:	46e0      	mov	r8, ip
 8016ade:	e7aa      	b.n	8016a36 <__ieee754_sqrt+0xd6>
 8016ae0:	f7e9 fbd4 	bl	800028c <__adddf3>
 8016ae4:	e9da 8900 	ldrd	r8, r9, [sl]
 8016ae8:	4602      	mov	r2, r0
 8016aea:	460b      	mov	r3, r1
 8016aec:	4640      	mov	r0, r8
 8016aee:	4649      	mov	r1, r9
 8016af0:	f7e9 fff4 	bl	8000adc <__aeabi_dcmplt>
 8016af4:	b120      	cbz	r0, 8016b00 <__ieee754_sqrt+0x1a0>
 8016af6:	1ca0      	adds	r0, r4, #2
 8016af8:	bf08      	it	eq
 8016afa:	3501      	addeq	r5, #1
 8016afc:	3402      	adds	r4, #2
 8016afe:	e7ca      	b.n	8016a96 <__ieee754_sqrt+0x136>
 8016b00:	3401      	adds	r4, #1
 8016b02:	f024 0401 	bic.w	r4, r4, #1
 8016b06:	e7c6      	b.n	8016a96 <__ieee754_sqrt+0x136>
 8016b08:	7ff00000 	.word	0x7ff00000
 8016b0c:	200001f0 	.word	0x200001f0
 8016b10:	200001f8 	.word	0x200001f8

08016b14 <__ieee754_sqrtf>:
 8016b14:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016b18:	4770      	bx	lr
 8016b1a:	0000      	movs	r0, r0
 8016b1c:	0000      	movs	r0, r0
	...

08016b20 <ceil>:
 8016b20:	ec51 0b10 	vmov	r0, r1, d0
 8016b24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b2c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8016b30:	2e13      	cmp	r6, #19
 8016b32:	ee10 5a10 	vmov	r5, s0
 8016b36:	ee10 8a10 	vmov	r8, s0
 8016b3a:	460c      	mov	r4, r1
 8016b3c:	dc2f      	bgt.n	8016b9e <ceil+0x7e>
 8016b3e:	2e00      	cmp	r6, #0
 8016b40:	da12      	bge.n	8016b68 <ceil+0x48>
 8016b42:	a333      	add	r3, pc, #204	; (adr r3, 8016c10 <ceil+0xf0>)
 8016b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b48:	f7e9 fba0 	bl	800028c <__adddf3>
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	2300      	movs	r3, #0
 8016b50:	f7e9 ffe2 	bl	8000b18 <__aeabi_dcmpgt>
 8016b54:	b128      	cbz	r0, 8016b62 <ceil+0x42>
 8016b56:	2c00      	cmp	r4, #0
 8016b58:	db51      	blt.n	8016bfe <ceil+0xde>
 8016b5a:	432c      	orrs	r4, r5
 8016b5c:	d053      	beq.n	8016c06 <ceil+0xe6>
 8016b5e:	4c2e      	ldr	r4, [pc, #184]	; (8016c18 <ceil+0xf8>)
 8016b60:	2500      	movs	r5, #0
 8016b62:	4621      	mov	r1, r4
 8016b64:	4628      	mov	r0, r5
 8016b66:	e024      	b.n	8016bb2 <ceil+0x92>
 8016b68:	4f2c      	ldr	r7, [pc, #176]	; (8016c1c <ceil+0xfc>)
 8016b6a:	4137      	asrs	r7, r6
 8016b6c:	ea01 0307 	and.w	r3, r1, r7
 8016b70:	4303      	orrs	r3, r0
 8016b72:	d01e      	beq.n	8016bb2 <ceil+0x92>
 8016b74:	a326      	add	r3, pc, #152	; (adr r3, 8016c10 <ceil+0xf0>)
 8016b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b7a:	f7e9 fb87 	bl	800028c <__adddf3>
 8016b7e:	2200      	movs	r2, #0
 8016b80:	2300      	movs	r3, #0
 8016b82:	f7e9 ffc9 	bl	8000b18 <__aeabi_dcmpgt>
 8016b86:	2800      	cmp	r0, #0
 8016b88:	d0eb      	beq.n	8016b62 <ceil+0x42>
 8016b8a:	2c00      	cmp	r4, #0
 8016b8c:	bfc2      	ittt	gt
 8016b8e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8016b92:	4133      	asrgt	r3, r6
 8016b94:	18e4      	addgt	r4, r4, r3
 8016b96:	ea24 0407 	bic.w	r4, r4, r7
 8016b9a:	2500      	movs	r5, #0
 8016b9c:	e7e1      	b.n	8016b62 <ceil+0x42>
 8016b9e:	2e33      	cmp	r6, #51	; 0x33
 8016ba0:	dd0b      	ble.n	8016bba <ceil+0x9a>
 8016ba2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016ba6:	d104      	bne.n	8016bb2 <ceil+0x92>
 8016ba8:	ee10 2a10 	vmov	r2, s0
 8016bac:	460b      	mov	r3, r1
 8016bae:	f7e9 fb6d 	bl	800028c <__adddf3>
 8016bb2:	ec41 0b10 	vmov	d0, r0, r1
 8016bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bba:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8016bbe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016bc2:	40df      	lsrs	r7, r3
 8016bc4:	4238      	tst	r0, r7
 8016bc6:	d0f4      	beq.n	8016bb2 <ceil+0x92>
 8016bc8:	a311      	add	r3, pc, #68	; (adr r3, 8016c10 <ceil+0xf0>)
 8016bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bce:	f7e9 fb5d 	bl	800028c <__adddf3>
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	f7e9 ff9f 	bl	8000b18 <__aeabi_dcmpgt>
 8016bda:	2800      	cmp	r0, #0
 8016bdc:	d0c1      	beq.n	8016b62 <ceil+0x42>
 8016bde:	2c00      	cmp	r4, #0
 8016be0:	dd0a      	ble.n	8016bf8 <ceil+0xd8>
 8016be2:	2e14      	cmp	r6, #20
 8016be4:	d101      	bne.n	8016bea <ceil+0xca>
 8016be6:	3401      	adds	r4, #1
 8016be8:	e006      	b.n	8016bf8 <ceil+0xd8>
 8016bea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016bee:	2301      	movs	r3, #1
 8016bf0:	40b3      	lsls	r3, r6
 8016bf2:	441d      	add	r5, r3
 8016bf4:	45a8      	cmp	r8, r5
 8016bf6:	d8f6      	bhi.n	8016be6 <ceil+0xc6>
 8016bf8:	ea25 0507 	bic.w	r5, r5, r7
 8016bfc:	e7b1      	b.n	8016b62 <ceil+0x42>
 8016bfe:	2500      	movs	r5, #0
 8016c00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8016c04:	e7ad      	b.n	8016b62 <ceil+0x42>
 8016c06:	4625      	mov	r5, r4
 8016c08:	e7ab      	b.n	8016b62 <ceil+0x42>
 8016c0a:	bf00      	nop
 8016c0c:	f3af 8000 	nop.w
 8016c10:	8800759c 	.word	0x8800759c
 8016c14:	7e37e43c 	.word	0x7e37e43c
 8016c18:	3ff00000 	.word	0x3ff00000
 8016c1c:	000fffff 	.word	0x000fffff

08016c20 <floor>:
 8016c20:	ec51 0b10 	vmov	r0, r1, d0
 8016c24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c2c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8016c30:	2e13      	cmp	r6, #19
 8016c32:	ee10 5a10 	vmov	r5, s0
 8016c36:	ee10 8a10 	vmov	r8, s0
 8016c3a:	460c      	mov	r4, r1
 8016c3c:	dc31      	bgt.n	8016ca2 <floor+0x82>
 8016c3e:	2e00      	cmp	r6, #0
 8016c40:	da14      	bge.n	8016c6c <floor+0x4c>
 8016c42:	a333      	add	r3, pc, #204	; (adr r3, 8016d10 <floor+0xf0>)
 8016c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c48:	f7e9 fb20 	bl	800028c <__adddf3>
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	2300      	movs	r3, #0
 8016c50:	f7e9 ff62 	bl	8000b18 <__aeabi_dcmpgt>
 8016c54:	b138      	cbz	r0, 8016c66 <floor+0x46>
 8016c56:	2c00      	cmp	r4, #0
 8016c58:	da53      	bge.n	8016d02 <floor+0xe2>
 8016c5a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8016c5e:	4325      	orrs	r5, r4
 8016c60:	d052      	beq.n	8016d08 <floor+0xe8>
 8016c62:	4c2d      	ldr	r4, [pc, #180]	; (8016d18 <floor+0xf8>)
 8016c64:	2500      	movs	r5, #0
 8016c66:	4621      	mov	r1, r4
 8016c68:	4628      	mov	r0, r5
 8016c6a:	e024      	b.n	8016cb6 <floor+0x96>
 8016c6c:	4f2b      	ldr	r7, [pc, #172]	; (8016d1c <floor+0xfc>)
 8016c6e:	4137      	asrs	r7, r6
 8016c70:	ea01 0307 	and.w	r3, r1, r7
 8016c74:	4303      	orrs	r3, r0
 8016c76:	d01e      	beq.n	8016cb6 <floor+0x96>
 8016c78:	a325      	add	r3, pc, #148	; (adr r3, 8016d10 <floor+0xf0>)
 8016c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c7e:	f7e9 fb05 	bl	800028c <__adddf3>
 8016c82:	2200      	movs	r2, #0
 8016c84:	2300      	movs	r3, #0
 8016c86:	f7e9 ff47 	bl	8000b18 <__aeabi_dcmpgt>
 8016c8a:	2800      	cmp	r0, #0
 8016c8c:	d0eb      	beq.n	8016c66 <floor+0x46>
 8016c8e:	2c00      	cmp	r4, #0
 8016c90:	bfbe      	ittt	lt
 8016c92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8016c96:	4133      	asrlt	r3, r6
 8016c98:	18e4      	addlt	r4, r4, r3
 8016c9a:	ea24 0407 	bic.w	r4, r4, r7
 8016c9e:	2500      	movs	r5, #0
 8016ca0:	e7e1      	b.n	8016c66 <floor+0x46>
 8016ca2:	2e33      	cmp	r6, #51	; 0x33
 8016ca4:	dd0b      	ble.n	8016cbe <floor+0x9e>
 8016ca6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016caa:	d104      	bne.n	8016cb6 <floor+0x96>
 8016cac:	ee10 2a10 	vmov	r2, s0
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	f7e9 faeb 	bl	800028c <__adddf3>
 8016cb6:	ec41 0b10 	vmov	d0, r0, r1
 8016cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cbe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8016cc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016cc6:	40df      	lsrs	r7, r3
 8016cc8:	4238      	tst	r0, r7
 8016cca:	d0f4      	beq.n	8016cb6 <floor+0x96>
 8016ccc:	a310      	add	r3, pc, #64	; (adr r3, 8016d10 <floor+0xf0>)
 8016cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cd2:	f7e9 fadb 	bl	800028c <__adddf3>
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	2300      	movs	r3, #0
 8016cda:	f7e9 ff1d 	bl	8000b18 <__aeabi_dcmpgt>
 8016cde:	2800      	cmp	r0, #0
 8016ce0:	d0c1      	beq.n	8016c66 <floor+0x46>
 8016ce2:	2c00      	cmp	r4, #0
 8016ce4:	da0a      	bge.n	8016cfc <floor+0xdc>
 8016ce6:	2e14      	cmp	r6, #20
 8016ce8:	d101      	bne.n	8016cee <floor+0xce>
 8016cea:	3401      	adds	r4, #1
 8016cec:	e006      	b.n	8016cfc <floor+0xdc>
 8016cee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016cf2:	2301      	movs	r3, #1
 8016cf4:	40b3      	lsls	r3, r6
 8016cf6:	441d      	add	r5, r3
 8016cf8:	45a8      	cmp	r8, r5
 8016cfa:	d8f6      	bhi.n	8016cea <floor+0xca>
 8016cfc:	ea25 0507 	bic.w	r5, r5, r7
 8016d00:	e7b1      	b.n	8016c66 <floor+0x46>
 8016d02:	2500      	movs	r5, #0
 8016d04:	462c      	mov	r4, r5
 8016d06:	e7ae      	b.n	8016c66 <floor+0x46>
 8016d08:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8016d0c:	e7ab      	b.n	8016c66 <floor+0x46>
 8016d0e:	bf00      	nop
 8016d10:	8800759c 	.word	0x8800759c
 8016d14:	7e37e43c 	.word	0x7e37e43c
 8016d18:	bff00000 	.word	0xbff00000
 8016d1c:	000fffff 	.word	0x000fffff

08016d20 <__ieee754_rem_pio2f>:
 8016d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d22:	ee10 6a10 	vmov	r6, s0
 8016d26:	4b86      	ldr	r3, [pc, #536]	; (8016f40 <__ieee754_rem_pio2f+0x220>)
 8016d28:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016d2c:	429d      	cmp	r5, r3
 8016d2e:	b087      	sub	sp, #28
 8016d30:	4604      	mov	r4, r0
 8016d32:	dc05      	bgt.n	8016d40 <__ieee754_rem_pio2f+0x20>
 8016d34:	2300      	movs	r3, #0
 8016d36:	ed80 0a00 	vstr	s0, [r0]
 8016d3a:	6043      	str	r3, [r0, #4]
 8016d3c:	2000      	movs	r0, #0
 8016d3e:	e020      	b.n	8016d82 <__ieee754_rem_pio2f+0x62>
 8016d40:	4b80      	ldr	r3, [pc, #512]	; (8016f44 <__ieee754_rem_pio2f+0x224>)
 8016d42:	429d      	cmp	r5, r3
 8016d44:	dc38      	bgt.n	8016db8 <__ieee754_rem_pio2f+0x98>
 8016d46:	2e00      	cmp	r6, #0
 8016d48:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8016f48 <__ieee754_rem_pio2f+0x228>
 8016d4c:	4b7f      	ldr	r3, [pc, #508]	; (8016f4c <__ieee754_rem_pio2f+0x22c>)
 8016d4e:	f025 050f 	bic.w	r5, r5, #15
 8016d52:	dd18      	ble.n	8016d86 <__ieee754_rem_pio2f+0x66>
 8016d54:	429d      	cmp	r5, r3
 8016d56:	ee70 7a47 	vsub.f32	s15, s0, s14
 8016d5a:	bf09      	itett	eq
 8016d5c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8016f50 <__ieee754_rem_pio2f+0x230>
 8016d60:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8016f54 <__ieee754_rem_pio2f+0x234>
 8016d64:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8016d68:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8016f58 <__ieee754_rem_pio2f+0x238>
 8016d6c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8016d70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016d74:	edc0 6a00 	vstr	s13, [r0]
 8016d78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d7c:	edc0 7a01 	vstr	s15, [r0, #4]
 8016d80:	2001      	movs	r0, #1
 8016d82:	b007      	add	sp, #28
 8016d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d86:	429d      	cmp	r5, r3
 8016d88:	ee70 7a07 	vadd.f32	s15, s0, s14
 8016d8c:	bf09      	itett	eq
 8016d8e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8016f50 <__ieee754_rem_pio2f+0x230>
 8016d92:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8016f54 <__ieee754_rem_pio2f+0x234>
 8016d96:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8016d9a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8016f58 <__ieee754_rem_pio2f+0x238>
 8016d9e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8016da2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016da6:	edc0 6a00 	vstr	s13, [r0]
 8016daa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016dae:	edc0 7a01 	vstr	s15, [r0, #4]
 8016db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016db6:	e7e4      	b.n	8016d82 <__ieee754_rem_pio2f+0x62>
 8016db8:	4b68      	ldr	r3, [pc, #416]	; (8016f5c <__ieee754_rem_pio2f+0x23c>)
 8016dba:	429d      	cmp	r5, r3
 8016dbc:	dc71      	bgt.n	8016ea2 <__ieee754_rem_pio2f+0x182>
 8016dbe:	f7ff f89d 	bl	8015efc <fabsf>
 8016dc2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8016f60 <__ieee754_rem_pio2f+0x240>
 8016dc6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016dca:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016dce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016dd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016dd6:	ee17 0a90 	vmov	r0, s15
 8016dda:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8016f48 <__ieee754_rem_pio2f+0x228>
 8016dde:	eea7 0a67 	vfms.f32	s0, s14, s15
 8016de2:	281f      	cmp	r0, #31
 8016de4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8016f54 <__ieee754_rem_pio2f+0x234>
 8016de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016dec:	eeb1 6a47 	vneg.f32	s12, s14
 8016df0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016df4:	ee16 2a90 	vmov	r2, s13
 8016df8:	dc1c      	bgt.n	8016e34 <__ieee754_rem_pio2f+0x114>
 8016dfa:	495a      	ldr	r1, [pc, #360]	; (8016f64 <__ieee754_rem_pio2f+0x244>)
 8016dfc:	1e47      	subs	r7, r0, #1
 8016dfe:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8016e02:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8016e06:	428b      	cmp	r3, r1
 8016e08:	d014      	beq.n	8016e34 <__ieee754_rem_pio2f+0x114>
 8016e0a:	6022      	str	r2, [r4, #0]
 8016e0c:	ed94 7a00 	vldr	s14, [r4]
 8016e10:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016e14:	2e00      	cmp	r6, #0
 8016e16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016e1a:	ed84 0a01 	vstr	s0, [r4, #4]
 8016e1e:	dab0      	bge.n	8016d82 <__ieee754_rem_pio2f+0x62>
 8016e20:	eeb1 7a47 	vneg.f32	s14, s14
 8016e24:	eeb1 0a40 	vneg.f32	s0, s0
 8016e28:	ed84 7a00 	vstr	s14, [r4]
 8016e2c:	ed84 0a01 	vstr	s0, [r4, #4]
 8016e30:	4240      	negs	r0, r0
 8016e32:	e7a6      	b.n	8016d82 <__ieee754_rem_pio2f+0x62>
 8016e34:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016e38:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8016e3c:	2908      	cmp	r1, #8
 8016e3e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8016e42:	dde2      	ble.n	8016e0a <__ieee754_rem_pio2f+0xea>
 8016e44:	eddf 5a42 	vldr	s11, [pc, #264]	; 8016f50 <__ieee754_rem_pio2f+0x230>
 8016e48:	eef0 6a40 	vmov.f32	s13, s0
 8016e4c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8016e50:	ee70 7a66 	vsub.f32	s15, s0, s13
 8016e54:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016e58:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8016f58 <__ieee754_rem_pio2f+0x238>
 8016e5c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8016e60:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8016e64:	ee15 2a90 	vmov	r2, s11
 8016e68:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016e6c:	1a5b      	subs	r3, r3, r1
 8016e6e:	2b19      	cmp	r3, #25
 8016e70:	dc04      	bgt.n	8016e7c <__ieee754_rem_pio2f+0x15c>
 8016e72:	edc4 5a00 	vstr	s11, [r4]
 8016e76:	eeb0 0a66 	vmov.f32	s0, s13
 8016e7a:	e7c7      	b.n	8016e0c <__ieee754_rem_pio2f+0xec>
 8016e7c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8016f68 <__ieee754_rem_pio2f+0x248>
 8016e80:	eeb0 0a66 	vmov.f32	s0, s13
 8016e84:	eea6 0a25 	vfma.f32	s0, s12, s11
 8016e88:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8016e8c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016f6c <__ieee754_rem_pio2f+0x24c>
 8016e90:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016e94:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8016e98:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016e9c:	ed84 7a00 	vstr	s14, [r4]
 8016ea0:	e7b4      	b.n	8016e0c <__ieee754_rem_pio2f+0xec>
 8016ea2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8016ea6:	db06      	blt.n	8016eb6 <__ieee754_rem_pio2f+0x196>
 8016ea8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016eac:	edc0 7a01 	vstr	s15, [r0, #4]
 8016eb0:	edc0 7a00 	vstr	s15, [r0]
 8016eb4:	e742      	b.n	8016d3c <__ieee754_rem_pio2f+0x1c>
 8016eb6:	15ea      	asrs	r2, r5, #23
 8016eb8:	3a86      	subs	r2, #134	; 0x86
 8016eba:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8016ebe:	ee07 3a90 	vmov	s15, r3
 8016ec2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016ec6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8016f70 <__ieee754_rem_pio2f+0x250>
 8016eca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016ece:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ed2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8016ed6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016eda:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016ede:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016ee2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ee6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8016eea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016eee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ef6:	edcd 7a05 	vstr	s15, [sp, #20]
 8016efa:	d11e      	bne.n	8016f3a <__ieee754_rem_pio2f+0x21a>
 8016efc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f04:	bf14      	ite	ne
 8016f06:	2302      	movne	r3, #2
 8016f08:	2301      	moveq	r3, #1
 8016f0a:	491a      	ldr	r1, [pc, #104]	; (8016f74 <__ieee754_rem_pio2f+0x254>)
 8016f0c:	9101      	str	r1, [sp, #4]
 8016f0e:	2102      	movs	r1, #2
 8016f10:	9100      	str	r1, [sp, #0]
 8016f12:	a803      	add	r0, sp, #12
 8016f14:	4621      	mov	r1, r4
 8016f16:	f000 f903 	bl	8017120 <__kernel_rem_pio2f>
 8016f1a:	2e00      	cmp	r6, #0
 8016f1c:	f6bf af31 	bge.w	8016d82 <__ieee754_rem_pio2f+0x62>
 8016f20:	edd4 7a00 	vldr	s15, [r4]
 8016f24:	eef1 7a67 	vneg.f32	s15, s15
 8016f28:	edc4 7a00 	vstr	s15, [r4]
 8016f2c:	edd4 7a01 	vldr	s15, [r4, #4]
 8016f30:	eef1 7a67 	vneg.f32	s15, s15
 8016f34:	edc4 7a01 	vstr	s15, [r4, #4]
 8016f38:	e77a      	b.n	8016e30 <__ieee754_rem_pio2f+0x110>
 8016f3a:	2303      	movs	r3, #3
 8016f3c:	e7e5      	b.n	8016f0a <__ieee754_rem_pio2f+0x1ea>
 8016f3e:	bf00      	nop
 8016f40:	3f490fd8 	.word	0x3f490fd8
 8016f44:	4016cbe3 	.word	0x4016cbe3
 8016f48:	3fc90f80 	.word	0x3fc90f80
 8016f4c:	3fc90fd0 	.word	0x3fc90fd0
 8016f50:	37354400 	.word	0x37354400
 8016f54:	37354443 	.word	0x37354443
 8016f58:	2e85a308 	.word	0x2e85a308
 8016f5c:	43490f80 	.word	0x43490f80
 8016f60:	3f22f984 	.word	0x3f22f984
 8016f64:	08018640 	.word	0x08018640
 8016f68:	2e85a300 	.word	0x2e85a300
 8016f6c:	248d3132 	.word	0x248d3132
 8016f70:	43800000 	.word	0x43800000
 8016f74:	080186c0 	.word	0x080186c0

08016f78 <atanf>:
 8016f78:	b538      	push	{r3, r4, r5, lr}
 8016f7a:	ee10 5a10 	vmov	r5, s0
 8016f7e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8016f82:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8016f86:	eef0 7a40 	vmov.f32	s15, s0
 8016f8a:	db10      	blt.n	8016fae <atanf+0x36>
 8016f8c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016f90:	dd04      	ble.n	8016f9c <atanf+0x24>
 8016f92:	ee70 7a00 	vadd.f32	s15, s0, s0
 8016f96:	eeb0 0a67 	vmov.f32	s0, s15
 8016f9a:	bd38      	pop	{r3, r4, r5, pc}
 8016f9c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80170d4 <atanf+0x15c>
 8016fa0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80170d8 <atanf+0x160>
 8016fa4:	2d00      	cmp	r5, #0
 8016fa6:	bfd8      	it	le
 8016fa8:	eef0 7a47 	vmovle.f32	s15, s14
 8016fac:	e7f3      	b.n	8016f96 <atanf+0x1e>
 8016fae:	4b4b      	ldr	r3, [pc, #300]	; (80170dc <atanf+0x164>)
 8016fb0:	429c      	cmp	r4, r3
 8016fb2:	dc10      	bgt.n	8016fd6 <atanf+0x5e>
 8016fb4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8016fb8:	da0a      	bge.n	8016fd0 <atanf+0x58>
 8016fba:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80170e0 <atanf+0x168>
 8016fbe:	ee30 7a07 	vadd.f32	s14, s0, s14
 8016fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016fc6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fce:	dce2      	bgt.n	8016f96 <atanf+0x1e>
 8016fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fd4:	e013      	b.n	8016ffe <atanf+0x86>
 8016fd6:	f7fe ff91 	bl	8015efc <fabsf>
 8016fda:	4b42      	ldr	r3, [pc, #264]	; (80170e4 <atanf+0x16c>)
 8016fdc:	429c      	cmp	r4, r3
 8016fde:	dc4f      	bgt.n	8017080 <atanf+0x108>
 8016fe0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8016fe4:	429c      	cmp	r4, r3
 8016fe6:	dc41      	bgt.n	801706c <atanf+0xf4>
 8016fe8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016fec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016ff0:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016ffa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016ffe:	1c5a      	adds	r2, r3, #1
 8017000:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8017004:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80170e8 <atanf+0x170>
 8017008:	eddf 5a38 	vldr	s11, [pc, #224]	; 80170ec <atanf+0x174>
 801700c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80170f0 <atanf+0x178>
 8017010:	ee66 6a06 	vmul.f32	s13, s12, s12
 8017014:	eee6 5a87 	vfma.f32	s11, s13, s14
 8017018:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80170f4 <atanf+0x17c>
 801701c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017020:	eddf 5a35 	vldr	s11, [pc, #212]	; 80170f8 <atanf+0x180>
 8017024:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017028:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80170fc <atanf+0x184>
 801702c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017030:	eddf 5a33 	vldr	s11, [pc, #204]	; 8017100 <atanf+0x188>
 8017034:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017038:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8017104 <atanf+0x18c>
 801703c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8017040:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8017108 <atanf+0x190>
 8017044:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017048:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801710c <atanf+0x194>
 801704c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8017050:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8017110 <atanf+0x198>
 8017054:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017058:	ee27 7a26 	vmul.f32	s14, s14, s13
 801705c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017060:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017064:	d121      	bne.n	80170aa <atanf+0x132>
 8017066:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801706a:	e794      	b.n	8016f96 <atanf+0x1e>
 801706c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017070:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017074:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017078:	2301      	movs	r3, #1
 801707a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801707e:	e7be      	b.n	8016ffe <atanf+0x86>
 8017080:	4b24      	ldr	r3, [pc, #144]	; (8017114 <atanf+0x19c>)
 8017082:	429c      	cmp	r4, r3
 8017084:	dc0b      	bgt.n	801709e <atanf+0x126>
 8017086:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801708a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801708e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017092:	2302      	movs	r3, #2
 8017094:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801709c:	e7af      	b.n	8016ffe <atanf+0x86>
 801709e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80170a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80170a6:	2303      	movs	r3, #3
 80170a8:	e7a9      	b.n	8016ffe <atanf+0x86>
 80170aa:	4a1b      	ldr	r2, [pc, #108]	; (8017118 <atanf+0x1a0>)
 80170ac:	491b      	ldr	r1, [pc, #108]	; (801711c <atanf+0x1a4>)
 80170ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80170b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80170b6:	edd3 6a00 	vldr	s13, [r3]
 80170ba:	ee37 7a66 	vsub.f32	s14, s14, s13
 80170be:	2d00      	cmp	r5, #0
 80170c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80170c4:	edd2 7a00 	vldr	s15, [r2]
 80170c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80170cc:	bfb8      	it	lt
 80170ce:	eef1 7a67 	vneglt.f32	s15, s15
 80170d2:	e760      	b.n	8016f96 <atanf+0x1e>
 80170d4:	3fc90fdb 	.word	0x3fc90fdb
 80170d8:	bfc90fdb 	.word	0xbfc90fdb
 80170dc:	3edfffff 	.word	0x3edfffff
 80170e0:	7149f2ca 	.word	0x7149f2ca
 80170e4:	3f97ffff 	.word	0x3f97ffff
 80170e8:	3c8569d7 	.word	0x3c8569d7
 80170ec:	3d4bda59 	.word	0x3d4bda59
 80170f0:	bd6ef16b 	.word	0xbd6ef16b
 80170f4:	3d886b35 	.word	0x3d886b35
 80170f8:	3dba2e6e 	.word	0x3dba2e6e
 80170fc:	3e124925 	.word	0x3e124925
 8017100:	3eaaaaab 	.word	0x3eaaaaab
 8017104:	bd15a221 	.word	0xbd15a221
 8017108:	bd9d8795 	.word	0xbd9d8795
 801710c:	bde38e38 	.word	0xbde38e38
 8017110:	be4ccccd 	.word	0xbe4ccccd
 8017114:	401bffff 	.word	0x401bffff
 8017118:	080189d8 	.word	0x080189d8
 801711c:	080189e8 	.word	0x080189e8

08017120 <__kernel_rem_pio2f>:
 8017120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017124:	ed2d 8b04 	vpush	{d8-d9}
 8017128:	b0d9      	sub	sp, #356	; 0x164
 801712a:	4688      	mov	r8, r1
 801712c:	9002      	str	r0, [sp, #8]
 801712e:	49b8      	ldr	r1, [pc, #736]	; (8017410 <__kernel_rem_pio2f+0x2f0>)
 8017130:	9866      	ldr	r0, [sp, #408]	; 0x198
 8017132:	9301      	str	r3, [sp, #4]
 8017134:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8017138:	9901      	ldr	r1, [sp, #4]
 801713a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801713c:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8017140:	1d11      	adds	r1, r2, #4
 8017142:	db25      	blt.n	8017190 <__kernel_rem_pio2f+0x70>
 8017144:	1ed0      	subs	r0, r2, #3
 8017146:	bf48      	it	mi
 8017148:	1d10      	addmi	r0, r2, #4
 801714a:	10c0      	asrs	r0, r0, #3
 801714c:	1c45      	adds	r5, r0, #1
 801714e:	00e9      	lsls	r1, r5, #3
 8017150:	eba0 070b 	sub.w	r7, r0, fp
 8017154:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8017420 <__kernel_rem_pio2f+0x300>
 8017158:	9103      	str	r1, [sp, #12]
 801715a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801715e:	eb0a 0c0b 	add.w	ip, sl, fp
 8017162:	ae1c      	add	r6, sp, #112	; 0x70
 8017164:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8017168:	2400      	movs	r4, #0
 801716a:	4564      	cmp	r4, ip
 801716c:	dd12      	ble.n	8017194 <__kernel_rem_pio2f+0x74>
 801716e:	9901      	ldr	r1, [sp, #4]
 8017170:	ac1c      	add	r4, sp, #112	; 0x70
 8017172:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8017176:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801717a:	f04f 0c00 	mov.w	ip, #0
 801717e:	45d4      	cmp	ip, sl
 8017180:	dc27      	bgt.n	80171d2 <__kernel_rem_pio2f+0xb2>
 8017182:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017186:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8017420 <__kernel_rem_pio2f+0x300>
 801718a:	4627      	mov	r7, r4
 801718c:	2600      	movs	r6, #0
 801718e:	e016      	b.n	80171be <__kernel_rem_pio2f+0x9e>
 8017190:	2000      	movs	r0, #0
 8017192:	e7db      	b.n	801714c <__kernel_rem_pio2f+0x2c>
 8017194:	42e7      	cmn	r7, r4
 8017196:	bf5d      	ittte	pl
 8017198:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801719c:	ee07 1a90 	vmovpl	s15, r1
 80171a0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80171a4:	eef0 7a47 	vmovmi.f32	s15, s14
 80171a8:	ece6 7a01 	vstmia	r6!, {s15}
 80171ac:	3401      	adds	r4, #1
 80171ae:	e7dc      	b.n	801716a <__kernel_rem_pio2f+0x4a>
 80171b0:	ecfe 6a01 	vldmia	lr!, {s13}
 80171b4:	ed97 7a00 	vldr	s14, [r7]
 80171b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80171bc:	3601      	adds	r6, #1
 80171be:	455e      	cmp	r6, fp
 80171c0:	f1a7 0704 	sub.w	r7, r7, #4
 80171c4:	ddf4      	ble.n	80171b0 <__kernel_rem_pio2f+0x90>
 80171c6:	ece9 7a01 	vstmia	r9!, {s15}
 80171ca:	f10c 0c01 	add.w	ip, ip, #1
 80171ce:	3404      	adds	r4, #4
 80171d0:	e7d5      	b.n	801717e <__kernel_rem_pio2f+0x5e>
 80171d2:	a908      	add	r1, sp, #32
 80171d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80171d8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80171dc:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801741c <__kernel_rem_pio2f+0x2fc>
 80171e0:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8017418 <__kernel_rem_pio2f+0x2f8>
 80171e4:	9105      	str	r1, [sp, #20]
 80171e6:	9304      	str	r3, [sp, #16]
 80171e8:	4656      	mov	r6, sl
 80171ea:	00b3      	lsls	r3, r6, #2
 80171ec:	9306      	str	r3, [sp, #24]
 80171ee:	ab58      	add	r3, sp, #352	; 0x160
 80171f0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80171f4:	ac08      	add	r4, sp, #32
 80171f6:	ab44      	add	r3, sp, #272	; 0x110
 80171f8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80171fc:	46a4      	mov	ip, r4
 80171fe:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8017202:	4637      	mov	r7, r6
 8017204:	2f00      	cmp	r7, #0
 8017206:	f1a0 0004 	sub.w	r0, r0, #4
 801720a:	dc4a      	bgt.n	80172a2 <__kernel_rem_pio2f+0x182>
 801720c:	4628      	mov	r0, r5
 801720e:	9207      	str	r2, [sp, #28]
 8017210:	f000 fa3a 	bl	8017688 <scalbnf>
 8017214:	eeb0 8a40 	vmov.f32	s16, s0
 8017218:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801721c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8017220:	f000 f9f0 	bl	8017604 <floorf>
 8017224:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8017228:	eea0 8a67 	vfms.f32	s16, s0, s15
 801722c:	2d00      	cmp	r5, #0
 801722e:	9a07      	ldr	r2, [sp, #28]
 8017230:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8017234:	ee17 9a90 	vmov	r9, s15
 8017238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801723c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8017240:	dd41      	ble.n	80172c6 <__kernel_rem_pio2f+0x1a6>
 8017242:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8017246:	ab08      	add	r3, sp, #32
 8017248:	f1c5 0e08 	rsb	lr, r5, #8
 801724c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8017250:	fa47 f00e 	asr.w	r0, r7, lr
 8017254:	4481      	add	r9, r0
 8017256:	fa00 f00e 	lsl.w	r0, r0, lr
 801725a:	1a3f      	subs	r7, r7, r0
 801725c:	f1c5 0007 	rsb	r0, r5, #7
 8017260:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8017264:	4107      	asrs	r7, r0
 8017266:	2f00      	cmp	r7, #0
 8017268:	dd3c      	ble.n	80172e4 <__kernel_rem_pio2f+0x1c4>
 801726a:	f04f 0e00 	mov.w	lr, #0
 801726e:	f109 0901 	add.w	r9, r9, #1
 8017272:	4671      	mov	r1, lr
 8017274:	4576      	cmp	r6, lr
 8017276:	dc67      	bgt.n	8017348 <__kernel_rem_pio2f+0x228>
 8017278:	2d00      	cmp	r5, #0
 801727a:	dd03      	ble.n	8017284 <__kernel_rem_pio2f+0x164>
 801727c:	2d01      	cmp	r5, #1
 801727e:	d074      	beq.n	801736a <__kernel_rem_pio2f+0x24a>
 8017280:	2d02      	cmp	r5, #2
 8017282:	d07b      	beq.n	801737c <__kernel_rem_pio2f+0x25c>
 8017284:	2f02      	cmp	r7, #2
 8017286:	d12d      	bne.n	80172e4 <__kernel_rem_pio2f+0x1c4>
 8017288:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801728c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8017290:	b341      	cbz	r1, 80172e4 <__kernel_rem_pio2f+0x1c4>
 8017292:	4628      	mov	r0, r5
 8017294:	9207      	str	r2, [sp, #28]
 8017296:	f000 f9f7 	bl	8017688 <scalbnf>
 801729a:	9a07      	ldr	r2, [sp, #28]
 801729c:	ee38 8a40 	vsub.f32	s16, s16, s0
 80172a0:	e020      	b.n	80172e4 <__kernel_rem_pio2f+0x1c4>
 80172a2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80172a6:	3f01      	subs	r7, #1
 80172a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80172ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80172b0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80172b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80172b8:	ecac 0a01 	vstmia	ip!, {s0}
 80172bc:	ed90 0a00 	vldr	s0, [r0]
 80172c0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80172c4:	e79e      	b.n	8017204 <__kernel_rem_pio2f+0xe4>
 80172c6:	d105      	bne.n	80172d4 <__kernel_rem_pio2f+0x1b4>
 80172c8:	1e70      	subs	r0, r6, #1
 80172ca:	ab08      	add	r3, sp, #32
 80172cc:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80172d0:	11ff      	asrs	r7, r7, #7
 80172d2:	e7c8      	b.n	8017266 <__kernel_rem_pio2f+0x146>
 80172d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80172d8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80172dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172e0:	da30      	bge.n	8017344 <__kernel_rem_pio2f+0x224>
 80172e2:	2700      	movs	r7, #0
 80172e4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80172e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ec:	f040 809a 	bne.w	8017424 <__kernel_rem_pio2f+0x304>
 80172f0:	1e74      	subs	r4, r6, #1
 80172f2:	46a4      	mov	ip, r4
 80172f4:	2100      	movs	r1, #0
 80172f6:	45d4      	cmp	ip, sl
 80172f8:	da47      	bge.n	801738a <__kernel_rem_pio2f+0x26a>
 80172fa:	2900      	cmp	r1, #0
 80172fc:	d063      	beq.n	80173c6 <__kernel_rem_pio2f+0x2a6>
 80172fe:	ab08      	add	r3, sp, #32
 8017300:	3d08      	subs	r5, #8
 8017302:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d07f      	beq.n	801740a <__kernel_rem_pio2f+0x2ea>
 801730a:	4628      	mov	r0, r5
 801730c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017310:	f000 f9ba 	bl	8017688 <scalbnf>
 8017314:	1c63      	adds	r3, r4, #1
 8017316:	aa44      	add	r2, sp, #272	; 0x110
 8017318:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801741c <__kernel_rem_pio2f+0x2fc>
 801731c:	0099      	lsls	r1, r3, #2
 801731e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017322:	4623      	mov	r3, r4
 8017324:	2b00      	cmp	r3, #0
 8017326:	f280 80ad 	bge.w	8017484 <__kernel_rem_pio2f+0x364>
 801732a:	4623      	mov	r3, r4
 801732c:	2b00      	cmp	r3, #0
 801732e:	f2c0 80cb 	blt.w	80174c8 <__kernel_rem_pio2f+0x3a8>
 8017332:	aa44      	add	r2, sp, #272	; 0x110
 8017334:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8017338:	4e36      	ldr	r6, [pc, #216]	; (8017414 <__kernel_rem_pio2f+0x2f4>)
 801733a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8017420 <__kernel_rem_pio2f+0x300>
 801733e:	2000      	movs	r0, #0
 8017340:	1ae2      	subs	r2, r4, r3
 8017342:	e0b6      	b.n	80174b2 <__kernel_rem_pio2f+0x392>
 8017344:	2702      	movs	r7, #2
 8017346:	e790      	b.n	801726a <__kernel_rem_pio2f+0x14a>
 8017348:	6820      	ldr	r0, [r4, #0]
 801734a:	b949      	cbnz	r1, 8017360 <__kernel_rem_pio2f+0x240>
 801734c:	b118      	cbz	r0, 8017356 <__kernel_rem_pio2f+0x236>
 801734e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8017352:	6020      	str	r0, [r4, #0]
 8017354:	2001      	movs	r0, #1
 8017356:	f10e 0e01 	add.w	lr, lr, #1
 801735a:	3404      	adds	r4, #4
 801735c:	4601      	mov	r1, r0
 801735e:	e789      	b.n	8017274 <__kernel_rem_pio2f+0x154>
 8017360:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8017364:	6020      	str	r0, [r4, #0]
 8017366:	4608      	mov	r0, r1
 8017368:	e7f5      	b.n	8017356 <__kernel_rem_pio2f+0x236>
 801736a:	1e74      	subs	r4, r6, #1
 801736c:	ab08      	add	r3, sp, #32
 801736e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017372:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8017376:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801737a:	e783      	b.n	8017284 <__kernel_rem_pio2f+0x164>
 801737c:	1e74      	subs	r4, r6, #1
 801737e:	ab08      	add	r3, sp, #32
 8017380:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017384:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8017388:	e7f5      	b.n	8017376 <__kernel_rem_pio2f+0x256>
 801738a:	ab08      	add	r3, sp, #32
 801738c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8017390:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8017394:	4301      	orrs	r1, r0
 8017396:	e7ae      	b.n	80172f6 <__kernel_rem_pio2f+0x1d6>
 8017398:	3001      	adds	r0, #1
 801739a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801739e:	2f00      	cmp	r7, #0
 80173a0:	d0fa      	beq.n	8017398 <__kernel_rem_pio2f+0x278>
 80173a2:	9b06      	ldr	r3, [sp, #24]
 80173a4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80173a8:	eb0d 0403 	add.w	r4, sp, r3
 80173ac:	9b01      	ldr	r3, [sp, #4]
 80173ae:	18f7      	adds	r7, r6, r3
 80173b0:	ab1c      	add	r3, sp, #112	; 0x70
 80173b2:	f106 0c01 	add.w	ip, r6, #1
 80173b6:	3c4c      	subs	r4, #76	; 0x4c
 80173b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80173bc:	4430      	add	r0, r6
 80173be:	4560      	cmp	r0, ip
 80173c0:	da04      	bge.n	80173cc <__kernel_rem_pio2f+0x2ac>
 80173c2:	4606      	mov	r6, r0
 80173c4:	e711      	b.n	80171ea <__kernel_rem_pio2f+0xca>
 80173c6:	9c05      	ldr	r4, [sp, #20]
 80173c8:	2001      	movs	r0, #1
 80173ca:	e7e6      	b.n	801739a <__kernel_rem_pio2f+0x27a>
 80173cc:	9b04      	ldr	r3, [sp, #16]
 80173ce:	f8dd e008 	ldr.w	lr, [sp, #8]
 80173d2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80173d6:	9306      	str	r3, [sp, #24]
 80173d8:	ee07 3a90 	vmov	s15, r3
 80173dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80173e0:	2600      	movs	r6, #0
 80173e2:	ece7 7a01 	vstmia	r7!, {s15}
 80173e6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8017420 <__kernel_rem_pio2f+0x300>
 80173ea:	46b9      	mov	r9, r7
 80173ec:	455e      	cmp	r6, fp
 80173ee:	dd04      	ble.n	80173fa <__kernel_rem_pio2f+0x2da>
 80173f0:	ece4 7a01 	vstmia	r4!, {s15}
 80173f4:	f10c 0c01 	add.w	ip, ip, #1
 80173f8:	e7e1      	b.n	80173be <__kernel_rem_pio2f+0x29e>
 80173fa:	ecfe 6a01 	vldmia	lr!, {s13}
 80173fe:	ed39 7a01 	vldmdb	r9!, {s14}
 8017402:	3601      	adds	r6, #1
 8017404:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017408:	e7f0      	b.n	80173ec <__kernel_rem_pio2f+0x2cc>
 801740a:	3c01      	subs	r4, #1
 801740c:	e777      	b.n	80172fe <__kernel_rem_pio2f+0x1de>
 801740e:	bf00      	nop
 8017410:	08018a24 	.word	0x08018a24
 8017414:	080189f8 	.word	0x080189f8
 8017418:	43800000 	.word	0x43800000
 801741c:	3b800000 	.word	0x3b800000
 8017420:	00000000 	.word	0x00000000
 8017424:	9b03      	ldr	r3, [sp, #12]
 8017426:	eeb0 0a48 	vmov.f32	s0, s16
 801742a:	1a98      	subs	r0, r3, r2
 801742c:	f000 f92c 	bl	8017688 <scalbnf>
 8017430:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8017418 <__kernel_rem_pio2f+0x2f8>
 8017434:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8017438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801743c:	db19      	blt.n	8017472 <__kernel_rem_pio2f+0x352>
 801743e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801741c <__kernel_rem_pio2f+0x2fc>
 8017442:	ee60 7a27 	vmul.f32	s15, s0, s15
 8017446:	aa08      	add	r2, sp, #32
 8017448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801744c:	1c74      	adds	r4, r6, #1
 801744e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017452:	3508      	adds	r5, #8
 8017454:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801745c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017460:	ee10 3a10 	vmov	r3, s0
 8017464:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8017468:	ee17 3a90 	vmov	r3, s15
 801746c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8017470:	e74b      	b.n	801730a <__kernel_rem_pio2f+0x1ea>
 8017472:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017476:	aa08      	add	r2, sp, #32
 8017478:	ee10 3a10 	vmov	r3, s0
 801747c:	4634      	mov	r4, r6
 801747e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8017482:	e742      	b.n	801730a <__kernel_rem_pio2f+0x1ea>
 8017484:	a808      	add	r0, sp, #32
 8017486:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801748a:	9001      	str	r0, [sp, #4]
 801748c:	ee07 0a90 	vmov	s15, r0
 8017490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017494:	3b01      	subs	r3, #1
 8017496:	ee67 7a80 	vmul.f32	s15, s15, s0
 801749a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801749e:	ed62 7a01 	vstmdb	r2!, {s15}
 80174a2:	e73f      	b.n	8017324 <__kernel_rem_pio2f+0x204>
 80174a4:	ecf6 6a01 	vldmia	r6!, {s13}
 80174a8:	ecb5 7a01 	vldmia	r5!, {s14}
 80174ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 80174b0:	3001      	adds	r0, #1
 80174b2:	4550      	cmp	r0, sl
 80174b4:	dc01      	bgt.n	80174ba <__kernel_rem_pio2f+0x39a>
 80174b6:	4290      	cmp	r0, r2
 80174b8:	ddf4      	ble.n	80174a4 <__kernel_rem_pio2f+0x384>
 80174ba:	a858      	add	r0, sp, #352	; 0x160
 80174bc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80174c0:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80174c4:	3b01      	subs	r3, #1
 80174c6:	e731      	b.n	801732c <__kernel_rem_pio2f+0x20c>
 80174c8:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80174ca:	2b02      	cmp	r3, #2
 80174cc:	dc09      	bgt.n	80174e2 <__kernel_rem_pio2f+0x3c2>
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	dc2b      	bgt.n	801752a <__kernel_rem_pio2f+0x40a>
 80174d2:	d044      	beq.n	801755e <__kernel_rem_pio2f+0x43e>
 80174d4:	f009 0007 	and.w	r0, r9, #7
 80174d8:	b059      	add	sp, #356	; 0x164
 80174da:	ecbd 8b04 	vpop	{d8-d9}
 80174de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174e2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80174e4:	2b03      	cmp	r3, #3
 80174e6:	d1f5      	bne.n	80174d4 <__kernel_rem_pio2f+0x3b4>
 80174e8:	aa30      	add	r2, sp, #192	; 0xc0
 80174ea:	1f0b      	subs	r3, r1, #4
 80174ec:	4413      	add	r3, r2
 80174ee:	461a      	mov	r2, r3
 80174f0:	4620      	mov	r0, r4
 80174f2:	2800      	cmp	r0, #0
 80174f4:	f1a2 0204 	sub.w	r2, r2, #4
 80174f8:	dc52      	bgt.n	80175a0 <__kernel_rem_pio2f+0x480>
 80174fa:	4622      	mov	r2, r4
 80174fc:	2a01      	cmp	r2, #1
 80174fe:	f1a3 0304 	sub.w	r3, r3, #4
 8017502:	dc5d      	bgt.n	80175c0 <__kernel_rem_pio2f+0x4a0>
 8017504:	ab30      	add	r3, sp, #192	; 0xc0
 8017506:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8017420 <__kernel_rem_pio2f+0x300>
 801750a:	440b      	add	r3, r1
 801750c:	2c01      	cmp	r4, #1
 801750e:	dc67      	bgt.n	80175e0 <__kernel_rem_pio2f+0x4c0>
 8017510:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8017514:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8017518:	2f00      	cmp	r7, #0
 801751a:	d167      	bne.n	80175ec <__kernel_rem_pio2f+0x4cc>
 801751c:	edc8 6a00 	vstr	s13, [r8]
 8017520:	ed88 7a01 	vstr	s14, [r8, #4]
 8017524:	edc8 7a02 	vstr	s15, [r8, #8]
 8017528:	e7d4      	b.n	80174d4 <__kernel_rem_pio2f+0x3b4>
 801752a:	ab30      	add	r3, sp, #192	; 0xc0
 801752c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8017420 <__kernel_rem_pio2f+0x300>
 8017530:	440b      	add	r3, r1
 8017532:	4622      	mov	r2, r4
 8017534:	2a00      	cmp	r2, #0
 8017536:	da24      	bge.n	8017582 <__kernel_rem_pio2f+0x462>
 8017538:	b34f      	cbz	r7, 801758e <__kernel_rem_pio2f+0x46e>
 801753a:	eef1 7a47 	vneg.f32	s15, s14
 801753e:	edc8 7a00 	vstr	s15, [r8]
 8017542:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8017546:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801754a:	aa31      	add	r2, sp, #196	; 0xc4
 801754c:	2301      	movs	r3, #1
 801754e:	429c      	cmp	r4, r3
 8017550:	da20      	bge.n	8017594 <__kernel_rem_pio2f+0x474>
 8017552:	b10f      	cbz	r7, 8017558 <__kernel_rem_pio2f+0x438>
 8017554:	eef1 7a67 	vneg.f32	s15, s15
 8017558:	edc8 7a01 	vstr	s15, [r8, #4]
 801755c:	e7ba      	b.n	80174d4 <__kernel_rem_pio2f+0x3b4>
 801755e:	ab30      	add	r3, sp, #192	; 0xc0
 8017560:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8017420 <__kernel_rem_pio2f+0x300>
 8017564:	440b      	add	r3, r1
 8017566:	2c00      	cmp	r4, #0
 8017568:	da05      	bge.n	8017576 <__kernel_rem_pio2f+0x456>
 801756a:	b10f      	cbz	r7, 8017570 <__kernel_rem_pio2f+0x450>
 801756c:	eef1 7a67 	vneg.f32	s15, s15
 8017570:	edc8 7a00 	vstr	s15, [r8]
 8017574:	e7ae      	b.n	80174d4 <__kernel_rem_pio2f+0x3b4>
 8017576:	ed33 7a01 	vldmdb	r3!, {s14}
 801757a:	3c01      	subs	r4, #1
 801757c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017580:	e7f1      	b.n	8017566 <__kernel_rem_pio2f+0x446>
 8017582:	ed73 7a01 	vldmdb	r3!, {s15}
 8017586:	3a01      	subs	r2, #1
 8017588:	ee37 7a27 	vadd.f32	s14, s14, s15
 801758c:	e7d2      	b.n	8017534 <__kernel_rem_pio2f+0x414>
 801758e:	eef0 7a47 	vmov.f32	s15, s14
 8017592:	e7d4      	b.n	801753e <__kernel_rem_pio2f+0x41e>
 8017594:	ecb2 7a01 	vldmia	r2!, {s14}
 8017598:	3301      	adds	r3, #1
 801759a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801759e:	e7d6      	b.n	801754e <__kernel_rem_pio2f+0x42e>
 80175a0:	edd2 7a00 	vldr	s15, [r2]
 80175a4:	edd2 6a01 	vldr	s13, [r2, #4]
 80175a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80175ac:	3801      	subs	r0, #1
 80175ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80175b2:	ed82 7a00 	vstr	s14, [r2]
 80175b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80175ba:	edc2 7a01 	vstr	s15, [r2, #4]
 80175be:	e798      	b.n	80174f2 <__kernel_rem_pio2f+0x3d2>
 80175c0:	edd3 7a00 	vldr	s15, [r3]
 80175c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80175c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80175cc:	3a01      	subs	r2, #1
 80175ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80175d2:	ed83 7a00 	vstr	s14, [r3]
 80175d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80175da:	edc3 7a01 	vstr	s15, [r3, #4]
 80175de:	e78d      	b.n	80174fc <__kernel_rem_pio2f+0x3dc>
 80175e0:	ed33 7a01 	vldmdb	r3!, {s14}
 80175e4:	3c01      	subs	r4, #1
 80175e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80175ea:	e78f      	b.n	801750c <__kernel_rem_pio2f+0x3ec>
 80175ec:	eef1 6a66 	vneg.f32	s13, s13
 80175f0:	eeb1 7a47 	vneg.f32	s14, s14
 80175f4:	edc8 6a00 	vstr	s13, [r8]
 80175f8:	ed88 7a01 	vstr	s14, [r8, #4]
 80175fc:	eef1 7a67 	vneg.f32	s15, s15
 8017600:	e790      	b.n	8017524 <__kernel_rem_pio2f+0x404>
 8017602:	bf00      	nop

08017604 <floorf>:
 8017604:	ee10 3a10 	vmov	r3, s0
 8017608:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801760c:	3a7f      	subs	r2, #127	; 0x7f
 801760e:	2a16      	cmp	r2, #22
 8017610:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017614:	dc2a      	bgt.n	801766c <floorf+0x68>
 8017616:	2a00      	cmp	r2, #0
 8017618:	da11      	bge.n	801763e <floorf+0x3a>
 801761a:	eddf 7a18 	vldr	s15, [pc, #96]	; 801767c <floorf+0x78>
 801761e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017622:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801762a:	dd05      	ble.n	8017638 <floorf+0x34>
 801762c:	2b00      	cmp	r3, #0
 801762e:	da23      	bge.n	8017678 <floorf+0x74>
 8017630:	4a13      	ldr	r2, [pc, #76]	; (8017680 <floorf+0x7c>)
 8017632:	2900      	cmp	r1, #0
 8017634:	bf18      	it	ne
 8017636:	4613      	movne	r3, r2
 8017638:	ee00 3a10 	vmov	s0, r3
 801763c:	4770      	bx	lr
 801763e:	4911      	ldr	r1, [pc, #68]	; (8017684 <floorf+0x80>)
 8017640:	4111      	asrs	r1, r2
 8017642:	420b      	tst	r3, r1
 8017644:	d0fa      	beq.n	801763c <floorf+0x38>
 8017646:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801767c <floorf+0x78>
 801764a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801764e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017656:	ddef      	ble.n	8017638 <floorf+0x34>
 8017658:	2b00      	cmp	r3, #0
 801765a:	bfbe      	ittt	lt
 801765c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8017660:	fa40 f202 	asrlt.w	r2, r0, r2
 8017664:	189b      	addlt	r3, r3, r2
 8017666:	ea23 0301 	bic.w	r3, r3, r1
 801766a:	e7e5      	b.n	8017638 <floorf+0x34>
 801766c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017670:	d3e4      	bcc.n	801763c <floorf+0x38>
 8017672:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017676:	4770      	bx	lr
 8017678:	2300      	movs	r3, #0
 801767a:	e7dd      	b.n	8017638 <floorf+0x34>
 801767c:	7149f2ca 	.word	0x7149f2ca
 8017680:	bf800000 	.word	0xbf800000
 8017684:	007fffff 	.word	0x007fffff

08017688 <scalbnf>:
 8017688:	ee10 3a10 	vmov	r3, s0
 801768c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8017690:	d02b      	beq.n	80176ea <scalbnf+0x62>
 8017692:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017696:	d302      	bcc.n	801769e <scalbnf+0x16>
 8017698:	ee30 0a00 	vadd.f32	s0, s0, s0
 801769c:	4770      	bx	lr
 801769e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80176a2:	d123      	bne.n	80176ec <scalbnf+0x64>
 80176a4:	4b24      	ldr	r3, [pc, #144]	; (8017738 <scalbnf+0xb0>)
 80176a6:	eddf 7a25 	vldr	s15, [pc, #148]	; 801773c <scalbnf+0xb4>
 80176aa:	4298      	cmp	r0, r3
 80176ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80176b0:	db17      	blt.n	80176e2 <scalbnf+0x5a>
 80176b2:	ee10 3a10 	vmov	r3, s0
 80176b6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80176ba:	3a19      	subs	r2, #25
 80176bc:	f24c 3150 	movw	r1, #50000	; 0xc350
 80176c0:	4288      	cmp	r0, r1
 80176c2:	dd15      	ble.n	80176f0 <scalbnf+0x68>
 80176c4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8017740 <scalbnf+0xb8>
 80176c8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8017744 <scalbnf+0xbc>
 80176cc:	ee10 3a10 	vmov	r3, s0
 80176d0:	eeb0 7a67 	vmov.f32	s14, s15
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	bfb8      	it	lt
 80176d8:	eef0 7a66 	vmovlt.f32	s15, s13
 80176dc:	ee27 0a87 	vmul.f32	s0, s15, s14
 80176e0:	4770      	bx	lr
 80176e2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8017748 <scalbnf+0xc0>
 80176e6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80176ea:	4770      	bx	lr
 80176ec:	0dd2      	lsrs	r2, r2, #23
 80176ee:	e7e5      	b.n	80176bc <scalbnf+0x34>
 80176f0:	4410      	add	r0, r2
 80176f2:	28fe      	cmp	r0, #254	; 0xfe
 80176f4:	dce6      	bgt.n	80176c4 <scalbnf+0x3c>
 80176f6:	2800      	cmp	r0, #0
 80176f8:	dd06      	ble.n	8017708 <scalbnf+0x80>
 80176fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80176fe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8017702:	ee00 3a10 	vmov	s0, r3
 8017706:	4770      	bx	lr
 8017708:	f110 0f16 	cmn.w	r0, #22
 801770c:	da09      	bge.n	8017722 <scalbnf+0x9a>
 801770e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8017748 <scalbnf+0xc0>
 8017712:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801774c <scalbnf+0xc4>
 8017716:	ee10 3a10 	vmov	r3, s0
 801771a:	eeb0 7a67 	vmov.f32	s14, s15
 801771e:	2b00      	cmp	r3, #0
 8017720:	e7d9      	b.n	80176d6 <scalbnf+0x4e>
 8017722:	3019      	adds	r0, #25
 8017724:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017728:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801772c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8017750 <scalbnf+0xc8>
 8017730:	ee07 3a90 	vmov	s15, r3
 8017734:	e7d7      	b.n	80176e6 <scalbnf+0x5e>
 8017736:	bf00      	nop
 8017738:	ffff3cb0 	.word	0xffff3cb0
 801773c:	4c000000 	.word	0x4c000000
 8017740:	7149f2ca 	.word	0x7149f2ca
 8017744:	f149f2ca 	.word	0xf149f2ca
 8017748:	0da24260 	.word	0x0da24260
 801774c:	8da24260 	.word	0x8da24260
 8017750:	33000000 	.word	0x33000000

08017754 <_init>:
 8017754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017756:	bf00      	nop
 8017758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801775a:	bc08      	pop	{r3}
 801775c:	469e      	mov	lr, r3
 801775e:	4770      	bx	lr

08017760 <_fini>:
 8017760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017762:	bf00      	nop
 8017764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017766:	bc08      	pop	{r3}
 8017768:	469e      	mov	lr, r3
 801776a:	4770      	bx	lr
