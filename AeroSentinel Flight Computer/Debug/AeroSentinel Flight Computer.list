
AeroSentinel Flight Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bb20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001498  0801bcb0  0801bcb0  0002bcb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d148  0801d148  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  0801d148  0801d148  0002d148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d150  0801d150  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d150  0801d150  0002d150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d154  0801d154  0002d154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0801d158  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          000030c0  20000200  20000200  00030200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200032c0  200032c0  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .comment      00000093  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026cb6  00000000  00000000  000302c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000490a  00000000  00000000  00056f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002258  00000000  00000000  0005b888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ab2  00000000  00000000  0005dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027a9a  00000000  00000000  0005f592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000294fe  00000000  00000000  0008702c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3219  00000000  00000000  000b052a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ae9c  00000000  00000000  00193744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  0019e5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bc98 	.word	0x0801bc98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0801bc98 	.word	0x0801bc98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <UART_Transmit_Messages_BlackBox>:

extern UART_HandleTypeDef huart1;


void UART_Transmit_Messages_BlackBox(const char* str)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff f939 	bl	8000270 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <UART_Transmit_Messages_BlackBox+0x28>)
 800100a:	f00b f914 	bl	800c236 <HAL_UART_Transmit>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20002e1c 	.word	0x20002e1c

0800101c <buf_clear>:
	while(*buf++ != '\0') i++;
	return i;

}

void buf_clear(void){
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++ ){
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	e007      	b.n	8001038 <buf_clear+0x1c>
		data_buffer[i] = '\0';
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <buf_clear+0x34>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++ ){
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3301      	adds	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103e:	dbf3      	blt.n	8001028 <buf_clear+0xc>
	}
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20001ab4 	.word	0x20001ab4

08001054 <mount_sd_card>:


void mount_sd_card(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "",0);
 8001058:	2200      	movs	r2, #0
 800105a:	490a      	ldr	r1, [pc, #40]	; (8001084 <mount_sd_card+0x30>)
 800105c:	480a      	ldr	r0, [pc, #40]	; (8001088 <mount_sd_card+0x34>)
 800105e:	f00c facd 	bl	800d5fc <f_mount>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <mount_sd_card+0x38>)
 8001068:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <mount_sd_card+0x38>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <mount_sd_card+0x26>
	{
		UART_Transmit_Messages_BlackBox("Error mounting the SD Card \r\n");
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <mount_sd_card+0x3c>)
 8001074:	f7ff ffbc 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
	} else {
		UART_Transmit_Messages_BlackBox("SD Card mounted successfully! \r\n");
	}
}
 8001078:	e002      	b.n	8001080 <mount_sd_card+0x2c>
		UART_Transmit_Messages_BlackBox("SD Card mounted successfully! \r\n");
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <mount_sd_card+0x40>)
 800107c:	f7ff ffb8 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	0801bcb0 	.word	0x0801bcb0
 8001088:	20000a78 	.word	0x20000a78
 800108c:	20001ab0 	.word	0x20001ab0
 8001090:	0801bcb4 	.word	0x0801bcb4
 8001094:	0801bcd4 	.word	0x0801bcd4

08001098 <check_free_space>:

void check_free_space() {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
    f_getfree("", &fre_clust, &pfs);
 800109e:	4a37      	ldr	r2, [pc, #220]	; (800117c <check_free_space+0xe4>)
 80010a0:	4937      	ldr	r1, [pc, #220]	; (8001180 <check_free_space+0xe8>)
 80010a2:	4838      	ldr	r0, [pc, #224]	; (8001184 <check_free_space+0xec>)
 80010a4:	f00c faf0 	bl	800d688 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80010a8:	4b34      	ldr	r3, [pc, #208]	; (800117c <check_free_space+0xe4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	3b02      	subs	r3, #2
 80010b0:	4a32      	ldr	r2, [pc, #200]	; (800117c <check_free_space+0xe4>)
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	8952      	ldrh	r2, [r2, #10]
 80010b6:	fb02 f303 	mul.w	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa22 	bl	8000504 <__aeabi_ui2d>
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b30      	ldr	r3, [pc, #192]	; (8001188 <check_free_space+0xf0>)
 80010c6:	f7ff fa97 	bl	80005f8 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fd69 	bl	8000ba8 <__aeabi_d2uiz>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a2c      	ldr	r2, [pc, #176]	; (800118c <check_free_space+0xf4>)
 80010da:	6013      	str	r3, [r2, #0]
    float total_GB = (float)total / (1024.0 * 1024.0);
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <check_free_space+0xf4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001190 <check_free_space+0xf8>
 80010ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f0:	edc7 7a01 	vstr	s15, [r7, #4]
    sprintf(data_buffer, "SD CARD Total Size: \t%.2f GB\r\n", total_GB);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fa27 	bl	8000548 <__aeabi_f2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4925      	ldr	r1, [pc, #148]	; (8001194 <check_free_space+0xfc>)
 8001100:	4825      	ldr	r0, [pc, #148]	; (8001198 <check_free_space+0x100>)
 8001102:	f014 f88b 	bl	801521c <siprintf>
    UART_Transmit_Messages_BlackBox(data_buffer);
 8001106:	4824      	ldr	r0, [pc, #144]	; (8001198 <check_free_space+0x100>)
 8001108:	f7ff ff72 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
    buf_clear();
 800110c:	f7ff ff86 	bl	800101c <buf_clear>

    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <check_free_space+0xe4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	895b      	ldrh	r3, [r3, #10]
 8001116:	461a      	mov	r2, r3
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <check_free_space+0xe8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f9ef 	bl	8000504 <__aeabi_ui2d>
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <check_free_space+0xf0>)
 800112c:	f7ff fa64 	bl	80005f8 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fd36 	bl	8000ba8 <__aeabi_d2uiz>
 800113c:	4603      	mov	r3, r0
 800113e:	4a17      	ldr	r2, [pc, #92]	; (800119c <check_free_space+0x104>)
 8001140:	6013      	str	r3, [r2, #0]
    float free_space_GB = (float)free_space / (1024.0 * 1024.0);
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <check_free_space+0x104>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800114e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001190 <check_free_space+0xf8>
 8001152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001156:	edc7 7a00 	vstr	s15, [r7]
    sprintf(data_buffer, "SD CARD Free Space: \t%.2f GB\r\n", free_space_GB);
 800115a:	6838      	ldr	r0, [r7, #0]
 800115c:	f7ff f9f4 	bl	8000548 <__aeabi_f2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	490e      	ldr	r1, [pc, #56]	; (80011a0 <check_free_space+0x108>)
 8001166:	480c      	ldr	r0, [pc, #48]	; (8001198 <check_free_space+0x100>)
 8001168:	f014 f858 	bl	801521c <siprintf>
    UART_Transmit_Messages_BlackBox(data_buffer);
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <check_free_space+0x100>)
 800116e:	f7ff ff3f 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20001eb4 	.word	0x20001eb4
 8001180:	20001eb8 	.word	0x20001eb8
 8001184:	0801bcb0 	.word	0x0801bcb0
 8001188:	3fe00000 	.word	0x3fe00000
 800118c:	20001ebc 	.word	0x20001ebc
 8001190:	49800000 	.word	0x49800000
 8001194:	0801bcf8 	.word	0x0801bcf8
 8001198:	20001ab4 	.word	0x20001ab4
 800119c:	20001ec0 	.word	0x20001ec0
 80011a0:	0801bd18 	.word	0x0801bd18

080011a4 <QMC_init>:



//###############################################################################################################
uint32_t QMC_init(I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af04      	add	r7, sp, #16
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
	uint8_t array[2];
	magneto_sensor.i2c=i2c;
 80011b0:	4a33      	ldr	r2, [pc, #204]	; (8001280 <QMC_init+0xdc>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
	magneto_sensor.Control_Register=0x11;
 80011b6:	4b32      	ldr	r3, [pc, #200]	; (8001280 <QMC_init+0xdc>)
 80011b8:	2211      	movs	r2, #17
 80011ba:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 80011bc:	2301      	movs	r3, #1
 80011be:	733b      	strb	r3, [r7, #12]
	array[1]=magneto_sensor.Control_Register;
 80011c0:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <QMC_init+0xdc>)
 80011c2:	791b      	ldrb	r3, [r3, #4]
 80011c4:	737b      	strb	r3, [r7, #13]

	if(Output_Data_Rate==200)magneto_sensor.Control_Register|=0b00001100;
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	2bc8      	cmp	r3, #200	; 0xc8
 80011ca:	d107      	bne.n	80011dc <QMC_init+0x38>
 80011cc:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <QMC_init+0xdc>)
 80011ce:	791b      	ldrb	r3, [r3, #4]
 80011d0:	f043 030c 	orr.w	r3, r3, #12
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <QMC_init+0xdc>)
 80011d8:	711a      	strb	r2, [r3, #4]
 80011da:	e024      	b.n	8001226 <QMC_init+0x82>
	else if(Output_Data_Rate==100)magneto_sensor.Control_Register|=0b00001000;
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	2b64      	cmp	r3, #100	; 0x64
 80011e0:	d107      	bne.n	80011f2 <QMC_init+0x4e>
 80011e2:	4b27      	ldr	r3, [pc, #156]	; (8001280 <QMC_init+0xdc>)
 80011e4:	791b      	ldrb	r3, [r3, #4]
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <QMC_init+0xdc>)
 80011ee:	711a      	strb	r2, [r3, #4]
 80011f0:	e019      	b.n	8001226 <QMC_init+0x82>
	else if(Output_Data_Rate==50)magneto_sensor.Control_Register|=0b00000100;
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	2b32      	cmp	r3, #50	; 0x32
 80011f6:	d107      	bne.n	8001208 <QMC_init+0x64>
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <QMC_init+0xdc>)
 80011fa:	791b      	ldrb	r3, [r3, #4]
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <QMC_init+0xdc>)
 8001204:	711a      	strb	r2, [r3, #4]
 8001206:	e00e      	b.n	8001226 <QMC_init+0x82>
	else if(Output_Data_Rate==10)magneto_sensor.Control_Register|=0b00000000;
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	2b0a      	cmp	r3, #10
 800120c:	d104      	bne.n	8001218 <QMC_init+0x74>
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <QMC_init+0xdc>)
 8001210:	791a      	ldrb	r2, [r3, #4]
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <QMC_init+0xdc>)
 8001214:	711a      	strb	r2, [r3, #4]
 8001216:	e006      	b.n	8001226 <QMC_init+0x82>
	else magneto_sensor.Control_Register|=0b00001100;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <QMC_init+0xdc>)
 800121a:	791b      	ldrb	r3, [r3, #4]
 800121c:	f043 030c 	orr.w	r3, r3, #12
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <QMC_init+0xdc>)
 8001224:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <QMC_init+0xdc>)
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	2364      	movs	r3, #100	; 0x64
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2301      	movs	r3, #1
 800123a:	220b      	movs	r2, #11
 800123c:	211a      	movs	r1, #26
 800123e:	f007 ffe3 	bl	8009208 <HAL_I2C_Mem_Write>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <QMC_init+0xa8>
 8001248:	2301      	movs	r3, #1
 800124a:	e014      	b.n	8001276 <QMC_init+0xd2>
	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <QMC_init+0xdc>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	2364      	movs	r3, #100	; 0x64
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	2301      	movs	r3, #1
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	3301      	adds	r3, #1
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	2209      	movs	r2, #9
 8001264:	211a      	movs	r1, #26
 8001266:	f007 ffcf 	bl	8009208 <HAL_I2C_Mem_Write>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <QMC_init+0xd0>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <QMC_init+0xd2>

	return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20001ec4 	.word	0x20001ec4
 8001284:	00000000 	.word	0x00000000

08001288 <QMC_read>:

uint8_t QMC_read()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af04      	add	r7, sp, #16
	  magneto_sensor.datas[0]=0;
 800128e:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <QMC_read+0x138>)
 8001290:	2200      	movs	r2, #0
 8001292:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x06, 1, magneto_sensor.datas, 1, 100);
 8001294:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <QMC_read+0x138>)
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	2364      	movs	r3, #100	; 0x64
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	2301      	movs	r3, #1
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <QMC_read+0x13c>)
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2301      	movs	r3, #1
 80012a6:	2206      	movs	r2, #6
 80012a8:	211a      	movs	r1, #26
 80012aa:	f008 f8a7 	bl	80093fc <HAL_I2C_Mem_Read>

	  if((magneto_sensor.datas[0]&0x01)==1)
 80012ae:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <QMC_read+0x138>)
 80012b0:	795b      	ldrb	r3, [r3, #5]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d075      	beq.n	80013a6 <QMC_read+0x11e>
	  {
		  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x00, 1, magneto_sensor.datas, 6, 100);
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <QMC_read+0x138>)
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	2364      	movs	r3, #100	; 0x64
 80012c0:	9302      	str	r3, [sp, #8]
 80012c2:	2306      	movs	r3, #6
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <QMC_read+0x13c>)
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	2200      	movs	r2, #0
 80012ce:	211a      	movs	r1, #26
 80012d0:	f008 f894 	bl	80093fc <HAL_I2C_Mem_Read>
		  magneto_sensor.Xaxis= (magneto_sensor.datas[1]<<8) | magneto_sensor.datas[0];
 80012d4:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <QMC_read+0x138>)
 80012d6:	799b      	ldrb	r3, [r3, #6]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <QMC_read+0x138>)
 80012de:	795b      	ldrb	r3, [r3, #5]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <QMC_read+0x138>)
 80012e8:	819a      	strh	r2, [r3, #12]
		  magneto_sensor.Yaxis= (magneto_sensor.datas[3]<<8) | magneto_sensor.datas[2];
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <QMC_read+0x138>)
 80012ec:	7a1b      	ldrb	r3, [r3, #8]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <QMC_read+0x138>)
 80012f4:	79db      	ldrb	r3, [r3, #7]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <QMC_read+0x138>)
 80012fe:	81da      	strh	r2, [r3, #14]
		  magneto_sensor.Zaxis= (magneto_sensor.datas[5]<<8) | magneto_sensor.datas[4];
 8001300:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <QMC_read+0x138>)
 8001302:	7a9b      	ldrb	r3, [r3, #10]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <QMC_read+0x138>)
 800130a:	7a5b      	ldrb	r3, [r3, #9]
 800130c:	b21b      	sxth	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b21a      	sxth	r2, r3
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <QMC_read+0x138>)
 8001314:	821a      	strh	r2, [r3, #16]

		  magneto_sensor.compas=atan2f(magneto_sensor.Yaxis,magneto_sensor.Xaxis)*180.00/M_PI;
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <QMC_read+0x138>)
 8001318:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <QMC_read+0x138>)
 8001326:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800132a:	ee07 3a10 	vmov	s14, r3
 800132e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001332:	eef0 0a47 	vmov.f32	s1, s14
 8001336:	eeb0 0a67 	vmov.f32	s0, s15
 800133a:	f017 fcf1 	bl	8018d20 <atan2f>
 800133e:	ee10 3a10 	vmov	r3, s0
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f900 	bl	8000548 <__aeabi_f2d>
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <QMC_read+0x140>)
 800134e:	f7ff f953 	bl	80005f8 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	a317      	add	r3, pc, #92	; (adr r3, 80013b8 <QMC_read+0x130>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f7ff fa74 	bl	800084c <__aeabi_ddiv>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f7ff fc3c 	bl	8000be8 <__aeabi_d2f>
 8001370:	4603      	mov	r3, r0
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <QMC_read+0x138>)
 8001374:	6193      	str	r3, [r2, #24]

		  if(magneto_sensor.compas>0)
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <QMC_read+0x138>)
 8001378:	edd3 7a06 	vldr	s15, [r3, #24]
 800137c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	dd04      	ble.n	8001390 <QMC_read+0x108>
		  {
			  magneto_sensor.heading= magneto_sensor.compas;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <QMC_read+0x138>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <QMC_read+0x138>)
 800138c:	6153      	str	r3, [r2, #20]
 800138e:	e00c      	b.n	80013aa <QMC_read+0x122>
		  }
		  else
		  {
			  magneto_sensor.heading=360+magneto_sensor.compas;
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <QMC_read+0x138>)
 8001392:	edd3 7a06 	vldr	s15, [r3, #24]
 8001396:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013cc <QMC_read+0x144>
 800139a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <QMC_read+0x138>)
 80013a0:	edc3 7a05 	vstr	s15, [r3, #20]
 80013a4:	e001      	b.n	80013aa <QMC_read+0x122>
		  }
	  }
	  else
	  {
		  return 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <QMC_read+0x124>
	  }
return 0;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	f3af 8000 	nop.w
 80013b8:	54442d18 	.word	0x54442d18
 80013bc:	400921fb 	.word	0x400921fb
 80013c0:	20001ec4 	.word	0x20001ec4
 80013c4:	20001ec9 	.word	0x20001ec9
 80013c8:	40668000 	.word	0x40668000
 80013cc:	43b40000 	.word	0x43b40000

080013d0 <Transmit_Compass_Data>:
}




CompassData Transmit_Compass_Data(){
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]


		if(QMC_read() == 0)
 80013d8:	f7ff ff56 	bl	8001288 <QMC_read>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 8082 	bne.w	80014e8 <Transmit_Compass_Data+0x118>
		{
			float heading = magneto_sensor.heading;
 80013e4:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <Transmit_Compass_Data+0x150>)
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	61fb      	str	r3, [r7, #28]


	        // Calculate magDecRad based on your requirements
			double calculatedMagDecRad = heading * (M_PI / 180.0);
 80013ea:	69f8      	ldr	r0, [r7, #28]
 80013ec:	f7ff f8ac 	bl	8000548 <__aeabi_f2d>
 80013f0:	a349      	add	r3, pc, #292	; (adr r3, 8001518 <Transmit_Compass_Data+0x148>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f8ff 	bl	80005f8 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9c7 2304 	strd	r2, r3, [r7, #16]


			//Compas_Value=magneto_sensor.heading;
			//char mag_buffer[100];
			compass_data.mag_unit_x = (double)magneto_sensor.Xaxis;
 8001402:	4b47      	ldr	r3, [pc, #284]	; (8001520 <Transmit_Compass_Data+0x150>)
 8001404:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f88b 	bl	8000524 <__aeabi_i2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4944      	ldr	r1, [pc, #272]	; (8001524 <Transmit_Compass_Data+0x154>)
 8001414:	e9c1 2304 	strd	r2, r3, [r1, #16]
			compass_data.mag_unit_y = (double)magneto_sensor.Yaxis;
 8001418:	4b41      	ldr	r3, [pc, #260]	; (8001520 <Transmit_Compass_Data+0x150>)
 800141a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f880 	bl	8000524 <__aeabi_i2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	493e      	ldr	r1, [pc, #248]	; (8001524 <Transmit_Compass_Data+0x154>)
 800142a:	e9c1 2306 	strd	r2, r3, [r1, #24]
			compass_data.mag_unit_z = (double)magneto_sensor.Zaxis;
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <Transmit_Compass_Data+0x150>)
 8001430:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f875 	bl	8000524 <__aeabi_i2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4939      	ldr	r1, [pc, #228]	; (8001524 <Transmit_Compass_Data+0x154>)
 8001440:	e9c1 2308 	strd	r2, r3, [r1, #32]
			//sprintf(mag_buffer, "X=%d, Y=%d, Z=%d \r\n", magneto_sensor.Xaxis, magneto_sensor.Yaxis, magneto_sensor.Zaxis);
			//sprintf(mag_heading_buffer, "HEADING : %.1f\r\n",magneto_sensor.heading);
			//UART_Transmit_Messages_Magnetometer(mag_buffer);
			//UART_Transmit_Messages_Magnetometer(mag_heading_buffer);

	        const int numDirections = sizeof(directions) / sizeof(directions[0]);
 8001444:	2309      	movs	r3, #9
 8001446:	60fb      	str	r3, [r7, #12]
	        const char* direction = "Unknown";
 8001448:	4b37      	ldr	r3, [pc, #220]	; (8001528 <Transmit_Compass_Data+0x158>)
 800144a:	627b      	str	r3, [r7, #36]	; 0x24

	        for (int i = 0; i < numDirections; ++i) {
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
 8001450:	e02e      	b.n	80014b0 <Transmit_Compass_Data+0xe0>
	            if (heading >= directions[i].min && heading <= directions[i].max) {
 8001452:	4936      	ldr	r1, [pc, #216]	; (800152c <Transmit_Compass_Data+0x15c>)
 8001454:	6a3a      	ldr	r2, [r7, #32]
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	ed97 7a07 	vldr	s14, [r7, #28]
 8001468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	db1b      	blt.n	80014aa <Transmit_Compass_Data+0xda>
 8001472:	492e      	ldr	r1, [pc, #184]	; (800152c <Transmit_Compass_Data+0x15c>)
 8001474:	6a3a      	ldr	r2, [r7, #32]
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	3304      	adds	r3, #4
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ed97 7a07 	vldr	s14, [r7, #28]
 800148a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	d80a      	bhi.n	80014aa <Transmit_Compass_Data+0xda>
	                direction = directions[i].direction;
 8001494:	4925      	ldr	r1, [pc, #148]	; (800152c <Transmit_Compass_Data+0x15c>)
 8001496:	6a3a      	ldr	r2, [r7, #32]
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	3308      	adds	r3, #8
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
	                break;
 80014a8:	e006      	b.n	80014b8 <Transmit_Compass_Data+0xe8>
	        for (int i = 0; i < numDirections; ++i) {
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	3301      	adds	r3, #1
 80014ae:	623b      	str	r3, [r7, #32]
 80014b0:	6a3a      	ldr	r2, [r7, #32]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbcc      	blt.n	8001452 <Transmit_Compass_Data+0x82>
	            }
	        }

	        compass_data.heading = heading;
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	6013      	str	r3, [r2, #0]
	        compass_data.direction = direction;
 80014be:	4a19      	ldr	r2, [pc, #100]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	6293      	str	r3, [r2, #40]	; 0x28
	        compass_data.magDecRad = calculatedMagDecRad;
 80014c4:	4917      	ldr	r1, [pc, #92]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014ca:	e9c1 2302 	strd	r2, r3, [r1, #8]



	        return compass_data;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014d2:	461c      	mov	r4, r3
 80014d4:	4615      	mov	r5, r2
 80014d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014e6:	e012      	b.n	800150e <Transmit_Compass_Data+0x13e>

		}
		else
		{
	        compass_data.heading = 0;
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
	        compass_data.direction = "ERR";
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014f2:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <Transmit_Compass_Data+0x160>)
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28

	        return compass_data;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <Transmit_Compass_Data+0x154>)
 80014fa:	461c      	mov	r4, r3
 80014fc:	4615      	mov	r5, r2
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001506:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800150a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}

}
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bdb0      	pop	{r4, r5, r7, pc}
 8001516:	bf00      	nop
 8001518:	a2529d39 	.word	0xa2529d39
 800151c:	3f91df46 	.word	0x3f91df46
 8001520:	20001ec4 	.word	0x20001ec4
 8001524:	20001ee0 	.word	0x20001ee0
 8001528:	0801bea0 	.word	0x0801bea0
 800152c:	0801c64c 	.word	0x0801c64c
 8001530:	0801bea8 	.word	0x0801bea8

08001534 <UART_Transmit_String>:
	uint8_t all_reg_rx[8];
	struct LoRa_Handler LoraRX={0};


void UART_Transmit_String(const char* str)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7fe fe97 	bl	8000270 <strlen>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <UART_Transmit_String+0x28>)
 800154e:	f00a fe72 	bl	800c236 <HAL_UART_Transmit>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20002e1c 	.word	0x20002e1c

08001560 <printIntroTitle>:




void printIntroTitle()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    UART_Transmit_String("\r\n");
 8001564:	480e      	ldr	r0, [pc, #56]	; (80015a0 <printIntroTitle+0x40>)
 8001566:	f7ff ffe5 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 800156a:	480e      	ldr	r0, [pc, #56]	; (80015a4 <printIntroTitle+0x44>)
 800156c:	f7ff ffe2 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("*               AEROSENTINEL Flight Computer           *\r\n");
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <printIntroTitle+0x48>)
 8001572:	f7ff ffdf 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("*    A versatile flight control system for your rocket  *\r\n");
 8001576:	480d      	ldr	r0, [pc, #52]	; (80015ac <printIntroTitle+0x4c>)
 8001578:	f7ff ffdc 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <printIntroTitle+0x44>)
 800157e:	f7ff ffd9 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("               Welcome to AEROSENTINEL CLI              \r\n");
 8001582:	480b      	ldr	r0, [pc, #44]	; (80015b0 <printIntroTitle+0x50>)
 8001584:	f7ff ffd6 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <printIntroTitle+0x44>)
 800158a:	f7ff ffd3 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("\r\n");
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <printIntroTitle+0x40>)
 8001590:	f7ff ffd0 	bl	8001534 <UART_Transmit_String>
    mount_sd_card();
 8001594:	f7ff fd5e 	bl	8001054 <mount_sd_card>
    check_free_space();
 8001598:	f7ff fd7e 	bl	8001098 <check_free_space>


    //scanSingleUARTDevice(&huart1); // Checks for UART devices connected


}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	0801beac 	.word	0x0801beac
 80015a4:	0801beb0 	.word	0x0801beb0
 80015a8:	0801beec 	.word	0x0801beec
 80015ac:	0801bf28 	.word	0x0801bf28
 80015b0:	0801bf64 	.word	0x0801bf64

080015b4 <printOptions>:

void printOptions(){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
    UART_Transmit_String("\r\nChoose an option:\r\n");
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <printOptions+0x38>)
 80015ba:	f7ff ffbb 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("0 - Initialize Flight Computer\r\n");
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <printOptions+0x3c>)
 80015c0:	f7ff ffb8 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("1 - Read All Sensors\r\n");
 80015c4:	480b      	ldr	r0, [pc, #44]	; (80015f4 <printOptions+0x40>)
 80015c6:	f7ff ffb5 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("2 - Execute Kalman Filtering and Print [KO for now]\r\n");
 80015ca:	480b      	ldr	r0, [pc, #44]	; (80015f8 <printOptions+0x44>)
 80015cc:	f7ff ffb2 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("3 - Execute Pyro Test (Ignition)\r\n");
 80015d0:	480a      	ldr	r0, [pc, #40]	; (80015fc <printOptions+0x48>)
 80015d2:	f7ff ffaf 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("4 - Execute Pyro Test (Parachute)\r\n");
 80015d6:	480a      	ldr	r0, [pc, #40]	; (8001600 <printOptions+0x4c>)
 80015d8:	f7ff ffac 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("5 - Launch Procedure\r\n");
 80015dc:	4809      	ldr	r0, [pc, #36]	; (8001604 <printOptions+0x50>)
 80015de:	f7ff ffa9 	bl	8001534 <UART_Transmit_String>
    UART_Transmit_String("\r\n");
 80015e2:	4809      	ldr	r0, [pc, #36]	; (8001608 <printOptions+0x54>)
 80015e4:	f7ff ffa6 	bl	8001534 <UART_Transmit_String>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	0801bfa0 	.word	0x0801bfa0
 80015f0:	0801bfb8 	.word	0x0801bfb8
 80015f4:	0801bfdc 	.word	0x0801bfdc
 80015f8:	0801bff4 	.word	0x0801bff4
 80015fc:	0801c02c 	.word	0x0801c02c
 8001600:	0801c050 	.word	0x0801c050
 8001604:	0801c074 	.word	0x0801c074
 8001608:	0801beac 	.word	0x0801beac

0800160c <initialization_procedure>:


int32_t initialization_procedure(){
 800160c:	b580      	push	{r7, lr}
 800160e:	b0d0      	sub	sp, #320	; 0x140
 8001610:	af00      	add	r7, sp, #0


	  int32_t fc_initialization_state;


	  UART_Transmit_String("Starting initialization process.. \r\n");
 8001612:	482a      	ldr	r0, [pc, #168]	; (80016bc <initialization_procedure+0xb0>)
 8001614:	f7ff ff8e 	bl	8001534 <UART_Transmit_String>
	  int32_t imu_init_state = IMU_Initialization();
 8001618:	f000 fc18 	bl	8001e4c <IMU_Initialization>
 800161c:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	  char imu_buffer[100];

	  HAL_Delay(100);
 8001620:	2064      	movs	r0, #100	; 0x64
 8001622:	f006 fbfb 	bl	8007e1c <HAL_Delay>

	  sprintf(imu_buffer, "IMU Initialization. Code : %ld  \r\n", imu_init_state);
 8001626:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800162a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800162e:	4924      	ldr	r1, [pc, #144]	; (80016c0 <initialization_procedure+0xb4>)
 8001630:	4618      	mov	r0, r3
 8001632:	f013 fdf3 	bl	801521c <siprintf>
	  UART_Transmit_String(imu_buffer);
 8001636:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff7a 	bl	8001534 <UART_Transmit_String>

	  HAL_Delay(100);
 8001640:	2064      	movs	r0, #100	; 0x64
 8001642:	f006 fbeb 	bl	8007e1c <HAL_Delay>

	  int32_t pressure_init_state = Pressure_Init();
 8001646:	f003 fd87 	bl	8005158 <Pressure_Init>
 800164a:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	  char pressure_buffer[100];
	  sprintf(pressure_buffer, "Pressure Initialization. Code : %ld  \r\n", pressure_init_state);
 800164e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001652:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001656:	491b      	ldr	r1, [pc, #108]	; (80016c4 <initialization_procedure+0xb8>)
 8001658:	4618      	mov	r0, r3
 800165a:	f013 fddf 	bl	801521c <siprintf>
	  UART_Transmit_String(pressure_buffer);
 800165e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff66 	bl	8001534 <UART_Transmit_String>

	  HAL_Delay(100);
 8001668:	2064      	movs	r0, #100	; 0x64
 800166a:	f006 fbd7 	bl	8007e1c <HAL_Delay>

	  int32_t magnetometer_init_state = QMC_init(&hi2c1, 200);
 800166e:	21c8      	movs	r1, #200	; 0xc8
 8001670:	4815      	ldr	r0, [pc, #84]	; (80016c8 <initialization_procedure+0xbc>)
 8001672:	f7ff fd97 	bl	80011a4 <QMC_init>
 8001676:	4603      	mov	r3, r0
 8001678:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  char magneto_buffer[100];
	  sprintf(magneto_buffer, "Magnetometer Initialization. Code : %ld  \r\n", magnetometer_init_state);
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001682:	4912      	ldr	r1, [pc, #72]	; (80016cc <initialization_procedure+0xc0>)
 8001684:	4618      	mov	r0, r3
 8001686:	f013 fdc9 	bl	801521c <siprintf>
	  UART_Transmit_String(magneto_buffer);
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff51 	bl	8001534 <UART_Transmit_String>

	  HAL_Delay(100);
 8001692:	2064      	movs	r0, #100	; 0x64
 8001694:	f006 fbc2 	bl	8007e1c <HAL_Delay>




	  fc_initialization_state = imu_init_state + pressure_init_state + magnetometer_init_state;
 8001698:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800169c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80016a0:	4413      	add	r3, r2
 80016a2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80016a6:	4413      	add	r3, r2
 80016a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	  return fc_initialization_state;
 80016ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	0801c08c 	.word	0x0801c08c
 80016c0:	0801c0b4 	.word	0x0801c0b4
 80016c4:	0801c0d8 	.word	0x0801c0d8
 80016c8:	20002c24 	.word	0x20002c24
 80016cc:	0801c100 	.word	0x0801c100

080016d0 <sensors_readings>:


void sensors_readings() {
 80016d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016d4:	b0d0      	sub	sp, #320	; 0x140
 80016d6:	af0e      	add	r7, sp, #56	; 0x38
    // Call each sensor function and receive the data structures


    IMUData imu_data = IMU_Data_Read();
 80016d8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 fc7b 	bl	8001fd8 <IMU_Data_Read>
    // Format IMU data into the buffer
    sprintf(buffer, "IMU Data: \n"
            "Acceleration (X=%.3f g, Y=%.3f g, Z=%.3f g), \n"
            "Angular Rate (X=%4.2f dps, Y=%4.2f dps, Z=%4.2f dps), \n"
            "Roll=%.3f°, Pitch=%.3f°\r", // Note the '\r' to return to the beginning of the line
            imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 80016e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    sprintf(buffer, "IMU Data: \n"
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff2e 	bl	8000548 <__aeabi_f2d>
 80016ec:	e9c7 0106 	strd	r0, r1, [r7, #24]
            imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 80016f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    sprintf(buffer, "IMU Data: \n"
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff27 	bl	8000548 <__aeabi_f2d>
 80016fa:	4682      	mov	sl, r0
 80016fc:	468b      	mov	fp, r1
            imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 80016fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    sprintf(buffer, "IMU Data: \n"
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe ff20 	bl	8000548 <__aeabi_f2d>
 8001708:	e9c7 0104 	strd	r0, r1, [r7, #16]
            imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z,
 800170c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    sprintf(buffer, "IMU Data: \n"
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff19 	bl	8000548 <__aeabi_f2d>
 8001716:	e9c7 0102 	strd	r0, r1, [r7, #8]
            imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z,
 800171a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    sprintf(buffer, "IMU Data: \n"
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff12 	bl	8000548 <__aeabi_f2d>
 8001724:	e9c7 0100 	strd	r0, r1, [r7]
            imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z,
 8001728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
    sprintf(buffer, "IMU Data: \n"
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe ff0b 	bl	8000548 <__aeabi_f2d>
 8001732:	4680      	mov	r8, r0
 8001734:	4689      	mov	r9, r1
            imu_data.roll, imu_data.pitch);
 8001736:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    sprintf(buffer, "IMU Data: \n"
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff04 	bl	8000548 <__aeabi_f2d>
 8001740:	4604      	mov	r4, r0
 8001742:	460d      	mov	r5, r1
            imu_data.roll, imu_data.pitch);
 8001744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    sprintf(buffer, "IMU Data: \n"
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fefd 	bl	8000548 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	f107 0020 	add.w	r0, r7, #32
 8001756:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800175a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800175e:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001762:	ed97 7b00 	vldr	d7, [r7]
 8001766:	ed8d 7b06 	vstr	d7, [sp, #24]
 800176a:	ed97 7b02 	vldr	d7, [r7, #8]
 800176e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001772:	ed97 7b04 	vldr	d7, [r7, #16]
 8001776:	ed8d 7b02 	vstr	d7, [sp, #8]
 800177a:	e9cd ab00 	strd	sl, fp, [sp]
 800177e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001782:	4907      	ldr	r1, [pc, #28]	; (80017a0 <sensors_readings+0xd0>)
 8001784:	f013 fd4a 	bl	801521c <siprintf>
    UART_Transmit_String(buffer);
 8001788:	f107 0320 	add.w	r3, r7, #32
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fed1 	bl	8001534 <UART_Transmit_String>

    UART_Transmit_String("------------------------------------------------------ \r\n");
    // Append the separator to the file
    append_data_to_file("sensor_data.txt", "------------------------------------------------------ \r\n");
    */
}
 8001792:	bf00      	nop
 8001794:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001798:	46bd      	mov	sp, r7
 800179a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800179e:	bf00      	nop
 80017a0:	0801c12c 	.word	0x0801c12c

080017a4 <ekf_test>:


void ekf_test(){
 80017a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017a8:	b0ba      	sub	sp, #232	; 0xe8
 80017aa:	af04      	add	r7, sp, #16
	float acc[3];
	float gyr[3];
	float mag[3];
	char ekf_buffer[100];

	IMUData imu_pre_ekf = IMU_Data_Read();
 80017ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fc11 	bl	8001fd8 <IMU_Data_Read>
	CompassData mag_pre_ekf = Transmit_Compass_Data();
 80017b6:	463b      	mov	r3, r7
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fe09 	bl	80013d0 <Transmit_Compass_Data>


	acc[0] = imu_pre_ekf.acceleration_x;
 80017be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	acc[1] = imu_pre_ekf.acceleration_y;
 80017c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	acc[2] = imu_pre_ekf.acceleration_z;
 80017ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	gyr[0] = imu_pre_ekf.angular_rate_x;
 80017d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	gyr[1] = imu_pre_ekf.angular_rate_y;
 80017d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	gyr[2] = imu_pre_ekf.angular_rate_z;
 80017dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	mag[0] = mag_pre_ekf.mag_unit_x;
 80017e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f9fd 	bl	8000be8 <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	mag[1] = mag_pre_ekf.mag_unit_y;
 80017f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f9f4 	bl	8000be8 <__aeabi_d2f>
 8001800:	4603      	mov	r3, r0
 8001802:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	mag[2] = mag_pre_ekf.mag_unit_z;
 8001806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff f9eb 	bl	8000be8 <__aeabi_d2f>
 8001812:	4603      	mov	r3, r0
 8001814:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    updateEKFQuatAtt(gyr, acc, mag, 0.0f, 0.0f, (SAMPLE_TIME_EKF_MS / 1000.0f), 1.0f, &roll_deg, &pitch_deg, &yaw_deg);
 8001818:	eddf 7a48 	vldr	s15, [pc, #288]	; 800193c <ekf_test+0x198>
 800181c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001820:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001940 <ekf_test+0x19c>
 8001824:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001828:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800182c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8001830:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8001834:	4b43      	ldr	r3, [pc, #268]	; (8001944 <ekf_test+0x1a0>)
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	4b43      	ldr	r3, [pc, #268]	; (8001948 <ekf_test+0x1a4>)
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	4b43      	ldr	r3, [pc, #268]	; (800194c <ekf_test+0x1a8>)
 800183e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001842:	eeb0 1a47 	vmov.f32	s2, s14
 8001846:	eddf 0a42 	vldr	s1, [pc, #264]	; 8001950 <ekf_test+0x1ac>
 800184a:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8001950 <ekf_test+0x1ac>
 800184e:	f000 fcab 	bl	80021a8 <updateEKFQuatAtt>

	sprintf(ekf_buffer, "%f %f %f\r\n", acc[0], acc[1], acc[2]);
 8001852:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe76 	bl	8000548 <__aeabi_f2d>
 800185c:	4680      	mov	r8, r0
 800185e:	4689      	mov	r9, r1
 8001860:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe6f 	bl	8000548 <__aeabi_f2d>
 800186a:	4604      	mov	r4, r0
 800186c:	460d      	mov	r5, r1
 800186e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe68 	bl	8000548 <__aeabi_f2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001880:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001884:	e9cd 4500 	strd	r4, r5, [sp]
 8001888:	4642      	mov	r2, r8
 800188a:	464b      	mov	r3, r9
 800188c:	4931      	ldr	r1, [pc, #196]	; (8001954 <ekf_test+0x1b0>)
 800188e:	f013 fcc5 	bl	801521c <siprintf>

	UART_Transmit_String(ekf_buffer);
 8001892:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fe4c 	bl	8001534 <UART_Transmit_String>

	sprintf(ekf_buffer, "%f %f %f\r\n", gyr[0], gyr[1], gyr[2]);
 800189c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe51 	bl	8000548 <__aeabi_f2d>
 80018a6:	4680      	mov	r8, r0
 80018a8:	4689      	mov	r9, r1
 80018aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe4a 	bl	8000548 <__aeabi_f2d>
 80018b4:	4604      	mov	r4, r0
 80018b6:	460d      	mov	r5, r1
 80018b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe43 	bl	8000548 <__aeabi_f2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80018ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018ce:	e9cd 4500 	strd	r4, r5, [sp]
 80018d2:	4642      	mov	r2, r8
 80018d4:	464b      	mov	r3, r9
 80018d6:	491f      	ldr	r1, [pc, #124]	; (8001954 <ekf_test+0x1b0>)
 80018d8:	f013 fca0 	bl	801521c <siprintf>

	UART_Transmit_String(ekf_buffer);
 80018dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fe27 	bl	8001534 <UART_Transmit_String>

	sprintf(ekf_buffer, "%f %f %f\r\n", roll_deg, pitch_deg, yaw_deg);
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <ekf_test+0x1a8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe2c 	bl	8000548 <__aeabi_f2d>
 80018f0:	4680      	mov	r8, r0
 80018f2:	4689      	mov	r9, r1
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <ekf_test+0x1a4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe25 	bl	8000548 <__aeabi_f2d>
 80018fe:	4604      	mov	r4, r0
 8001900:	460d      	mov	r5, r1
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <ekf_test+0x1a0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fe1e 	bl	8000548 <__aeabi_f2d>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001914:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001918:	e9cd 4500 	strd	r4, r5, [sp]
 800191c:	4642      	mov	r2, r8
 800191e:	464b      	mov	r3, r9
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <ekf_test+0x1b0>)
 8001922:	f013 fc7b 	bl	801521c <siprintf>

	UART_Transmit_String(ekf_buffer);
 8001926:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fe02 	bl	8001534 <UART_Transmit_String>



}
 8001930:	bf00      	nop
 8001932:	37d8      	adds	r7, #216	; 0xd8
 8001934:	46bd      	mov	sp, r7
 8001936:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800193a:	bf00      	nop
 800193c:	00000064 	.word	0x00000064
 8001940:	447a0000 	.word	0x447a0000
 8001944:	20001f18 	.word	0x20001f18
 8001948:	20001f14 	.word	0x20001f14
 800194c:	20001f10 	.word	0x20001f10
 8001950:	00000000 	.word	0x00000000
 8001954:	0801c1b8 	.word	0x0801c1b8

08001958 <send_data_to_gcs>:




// Custom function to print data in the required model format
void send_data_to_gcs(int datatype, float value) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b0b6      	sub	sp, #216	; 0xd8
 800195c:	af02      	add	r7, sp, #8
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	ed87 0a00 	vstr	s0, [r7]
	// Print the data for each sensor and append to the file
	char gcs_buffer[200];


    // Print data in the specified format
    sprintf(gcs_buffer, "%d, %.2f;\r\n",
 8001964:	6838      	ldr	r0, [r7, #0]
 8001966:	f7fe fdef 	bl	8000548 <__aeabi_f2d>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	f107 0008 	add.w	r0, r7, #8
 8001972:	e9cd 2300 	strd	r2, r3, [sp]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <send_data_to_gcs+0x40>)
 800197a:	f013 fc4f 	bl	801521c <siprintf>
            datatype, value);

    UART_Transmit_String(gcs_buffer);
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fdd6 	bl	8001534 <UART_Transmit_String>

    HAL_Delay(15);
 8001988:	200f      	movs	r0, #15
 800198a:	f006 fa47 	bl	8007e1c <HAL_Delay>


}
 800198e:	bf00      	nop
 8001990:	37d0      	adds	r7, #208	; 0xd0
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	0801c1c4 	.word	0x0801c1c4

0800199c <sensors_readings_graphs>:

void sensors_readings_graphs() {
 800199c:	b580      	push	{r7, lr}
 800199e:	b098      	sub	sp, #96	; 0x60
 80019a0:	af00      	add	r7, sp, #0
    // Call each sensor function and receive the data structures
    IMUData imu_data = IMU_Data_Read();
 80019a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fb16 	bl	8001fd8 <IMU_Data_Read>
    TemperatureData temperature_data = Transmit_Temperature();
 80019ac:	f004 f80c 	bl	80059c8 <Transmit_Temperature>
 80019b0:	eef0 7a40 	vmov.f32	s15, s0
 80019b4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    PressureTempData pressure_temp_data = Transmit_Pressure_Temp_Data();
 80019b8:	f003 ff40 	bl	800583c <Transmit_Pressure_Temp_Data>
 80019bc:	eeb0 7a40 	vmov.f32	s14, s0
 80019c0:	eef0 7a60 	vmov.f32	s15, s1
 80019c4:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 80019c8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    CompassData compass_data = Transmit_Compass_Data();
 80019cc:	463b      	mov	r3, r7
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fcfe 	bl	80013d0 <Transmit_Compass_Data>


    // Print IMU data
    send_data_to_gcs(1, imu_data.acceleration_x);
 80019d4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80019d8:	eeb0 0a67 	vmov.f32	s0, s15
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff ffbb 	bl	8001958 <send_data_to_gcs>
    send_data_to_gcs(2, imu_data.acceleration_y);
 80019e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019e6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ea:	2002      	movs	r0, #2
 80019ec:	f7ff ffb4 	bl	8001958 <send_data_to_gcs>
    send_data_to_gcs(3, imu_data.acceleration_z);
 80019f0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019f4:	eeb0 0a67 	vmov.f32	s0, s15
 80019f8:	2003      	movs	r0, #3
 80019fa:	f7ff ffad 	bl	8001958 <send_data_to_gcs>
    send_data_to_gcs(4, imu_data.angular_rate_x);
 80019fe:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001a02:	eeb0 0a67 	vmov.f32	s0, s15
 8001a06:	2004      	movs	r0, #4
 8001a08:	f7ff ffa6 	bl	8001958 <send_data_to_gcs>
    send_data_to_gcs(5, imu_data.angular_rate_y);
 8001a0c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001a10:	eeb0 0a67 	vmov.f32	s0, s15
 8001a14:	2005      	movs	r0, #5
 8001a16:	f7ff ff9f 	bl	8001958 <send_data_to_gcs>
    send_data_to_gcs(6, imu_data.angular_rate_z);
 8001a1a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a22:	2006      	movs	r0, #6
 8001a24:	f7ff ff98 	bl	8001958 <send_data_to_gcs>

    //Print Roll and Pitch data
    send_data_to_gcs(7, imu_data.roll);
 8001a28:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a30:	2007      	movs	r0, #7
 8001a32:	f7ff ff91 	bl	8001958 <send_data_to_gcs>
    send_data_to_gcs(8, imu_data.pitch);
 8001a36:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3e:	2008      	movs	r0, #8
 8001a40:	f7ff ff8a 	bl	8001958 <send_data_to_gcs>

    // Print temperature data
    send_data_to_gcs(9, temperature_data.temperature_celsius / 100);
 8001a44:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001a48:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a8c <sensors_readings_graphs+0xf0>
 8001a4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a50:	eeb0 0a47 	vmov.f32	s0, s14
 8001a54:	2009      	movs	r0, #9
 8001a56:	f7ff ff7f 	bl	8001958 <send_data_to_gcs>

    // Print pressure and temperature data
    send_data_to_gcs(10, pressure_temp_data.pressure_hpa);
 8001a5a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a62:	200a      	movs	r0, #10
 8001a64:	f7ff ff78 	bl	8001958 <send_data_to_gcs>
    send_data_to_gcs(11, pressure_temp_data.temperature_celsius);
 8001a68:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	200b      	movs	r0, #11
 8001a72:	f7ff ff71 	bl	8001958 <send_data_to_gcs>

    // Print compass data
    send_data_to_gcs(12, compass_data.heading);
 8001a76:	edd7 7a00 	vldr	s15, [r7]
 8001a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7e:	200c      	movs	r0, #12
 8001a80:	f7ff ff6a 	bl	8001958 <send_data_to_gcs>
}
 8001a84:	bf00      	nop
 8001a86:	3760      	adds	r7, #96	; 0x60
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	42c80000 	.word	0x42c80000

08001a90 <handleUserCommand>:




void handleUserCommand(char command)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
	int transmission_delay = 50;
 8001a9a:	2332      	movs	r3, #50	; 0x32
 8001a9c:	617b      	str	r3, [r7, #20]

	uint32_t numIterations = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
    switch (command)
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	3b30      	subs	r3, #48	; 0x30
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	f200 8083 	bhi.w	8001bb2 <handleUserCommand+0x122>
 8001aac:	a201      	add	r2, pc, #4	; (adr r2, 8001ab4 <handleUserCommand+0x24>)
 8001aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab2:	bf00      	nop
 8001ab4:	08001acd 	.word	0x08001acd
 8001ab8:	08001af1 	.word	0x08001af1
 8001abc:	08001b17 	.word	0x08001b17
 8001ac0:	08001b45 	.word	0x08001b45
 8001ac4:	08001b81 	.word	0x08001b81
 8001ac8:	08001ba5 	.word	0x08001ba5
    {
    case '0':
    	  uint32_t initialization_state = initialization_procedure();
 8001acc:	f7ff fd9e 	bl	800160c <initialization_procedure>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60fb      	str	r3, [r7, #12]
    	  if(initialization_state != 0){
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <handleUserCommand+0x52>
    		  UART_Transmit_String("Error initializing the Flight Controller.");
 8001ada:	483b      	ldr	r0, [pc, #236]	; (8001bc8 <handleUserCommand+0x138>)
 8001adc:	f7ff fd2a 	bl	8001534 <UART_Transmit_String>
 8001ae0:	e002      	b.n	8001ae8 <handleUserCommand+0x58>
    	  } else{
    		  UART_Transmit_String("Flight Controller Initialized successfully!\r\n");
 8001ae2:	483a      	ldr	r0, [pc, #232]	; (8001bcc <handleUserCommand+0x13c>)
 8001ae4:	f7ff fd26 	bl	8001534 <UART_Transmit_String>

    	  }
    	  UART_Transmit_String("\r\n");
 8001ae8:	4839      	ldr	r0, [pc, #228]	; (8001bd0 <handleUserCommand+0x140>)
 8001aea:	f7ff fd23 	bl	8001534 <UART_Transmit_String>
    	  //calibrateSensorOffsets();
        break;
 8001aee:	e064      	b.n	8001bba <handleUserCommand+0x12a>
    case '1':
    	UART_Transmit_String("\r\n");
 8001af0:	4837      	ldr	r0, [pc, #220]	; (8001bd0 <handleUserCommand+0x140>)
 8001af2:	f7ff fd1f 	bl	8001534 <UART_Transmit_String>
    	    	numIterations = getNumberOfIterations();
 8001af6:	f000 f879 	bl	8001bec <getNumberOfIterations>
 8001afa:	6138      	str	r0, [r7, #16]
    			for (uint32_t i = 0; i < numIterations; i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	e004      	b.n	8001b0c <handleUserCommand+0x7c>
    			        {
    				sensors_readings();
 8001b02:	f7ff fde5 	bl	80016d0 <sensors_readings>
    			for (uint32_t i = 0; i < numIterations; i++)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d3f6      	bcc.n	8001b02 <handleUserCommand+0x72>
    				//HAL_Delay(transmission_delay);
    			        }
        break;
 8001b14:	e051      	b.n	8001bba <handleUserCommand+0x12a>
    case '2':
    	UART_Transmit_String("\r\n");
 8001b16:	482e      	ldr	r0, [pc, #184]	; (8001bd0 <handleUserCommand+0x140>)
 8001b18:	f7ff fd0c 	bl	8001534 <UART_Transmit_String>
    	numIterations = getNumberOfIterations();
 8001b1c:	f000 f866 	bl	8001bec <getNumberOfIterations>
 8001b20:	6138      	str	r0, [r7, #16]
		for (uint32_t i = 0; i < numIterations; i++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	e008      	b.n	8001b3a <handleUserCommand+0xaa>
		        {
			ekf_test();
 8001b28:	f7ff fe3c 	bl	80017a4 <ekf_test>
			HAL_Delay(transmission_delay);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f006 f974 	bl	8007e1c <HAL_Delay>
		for (uint32_t i = 0; i < numIterations; i++)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	3301      	adds	r3, #1
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d3f2      	bcc.n	8001b28 <handleUserCommand+0x98>
		        }
        break;
 8001b42:	e03a      	b.n	8001bba <handleUserCommand+0x12a>
    case '3':
    	UART_Transmit_String("\r\n");
 8001b44:	4822      	ldr	r0, [pc, #136]	; (8001bd0 <handleUserCommand+0x140>)
 8001b46:	f7ff fcf5 	bl	8001534 <UART_Transmit_String>
    	UART_Transmit_String("Starting Firing test (Ignition)\r\n");
 8001b4a:	4822      	ldr	r0, [pc, #136]	; (8001bd4 <handleUserCommand+0x144>)
 8001b4c:	f7ff fcf2 	bl	8001534 <UART_Transmit_String>
    	UART_Transmit_String("Arming the igniter..");
 8001b50:	4821      	ldr	r0, [pc, #132]	; (8001bd8 <handleUserCommand+0x148>)
 8001b52:	f7ff fcef 	bl	8001534 <UART_Transmit_String>
    	pyro_arm(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f003 fed8 	bl	800590c <pyro_arm>
    	UART_Transmit_String("Armed\r\n");
 8001b5c:	481f      	ldr	r0, [pc, #124]	; (8001bdc <handleUserCommand+0x14c>)
 8001b5e:	f7ff fce9 	bl	8001534 <UART_Transmit_String>
    	count_down_sequence_fire_test(5000);
 8001b62:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b66:	f000 f8d7 	bl	8001d18 <count_down_sequence_fire_test>
    	pyro_fire(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f003 feec 	bl	8005948 <pyro_fire>
    	UART_Transmit_String("Test Completed Successfully!\r\n");
 8001b70:	481b      	ldr	r0, [pc, #108]	; (8001be0 <handleUserCommand+0x150>)
 8001b72:	f7ff fcdf 	bl	8001534 <UART_Transmit_String>
    	HAL_Delay(1000);
 8001b76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b7a:	f006 f94f 	bl	8007e1c <HAL_Delay>
        break;
 8001b7e:	e01c      	b.n	8001bba <handleUserCommand+0x12a>
    case '4':
    	UART_Transmit_String("\r\n");
 8001b80:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <handleUserCommand+0x140>)
 8001b82:	f7ff fcd7 	bl	8001534 <UART_Transmit_String>
    	UART_Transmit_String("Starting Firing test (Parachute)\r\n");
 8001b86:	4817      	ldr	r0, [pc, #92]	; (8001be4 <handleUserCommand+0x154>)
 8001b88:	f7ff fcd4 	bl	8001534 <UART_Transmit_String>
    	//UART_Transmit_String("Arming the igniter..");
    	//pyro_arm(2);
    	//UART_Transmit_String("Armed\r\n");
    	count_down_sequence_fire_test(5000);
 8001b8c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b90:	f000 f8c2 	bl	8001d18 <count_down_sequence_fire_test>
    	//pyro_fire(2);
    	UART_Transmit_String("Test Completed Successfully!\r\n");
 8001b94:	4812      	ldr	r0, [pc, #72]	; (8001be0 <handleUserCommand+0x150>)
 8001b96:	f7ff fccd 	bl	8001534 <UART_Transmit_String>
    	HAL_Delay(1000);
 8001b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b9e:	f006 f93d 	bl	8007e1c <HAL_Delay>
        break;
 8001ba2:	e00a      	b.n	8001bba <handleUserCommand+0x12a>
    case '5':
    	launch_procedure(10000);
 8001ba4:	f242 7010 	movw	r0, #10000	; 0x2710
 8001ba8:	f000 f84e 	bl	8001c48 <launch_procedure>
    	while(1){
    		sensors_readings_graphs();
 8001bac:	f7ff fef6 	bl	800199c <sensors_readings_graphs>
 8001bb0:	e7fc      	b.n	8001bac <handleUserCommand+0x11c>
    	}

        break;
    default:
        UART_Transmit_String("Invalid command! Try again.\r\n");
 8001bb2:	480d      	ldr	r0, [pc, #52]	; (8001be8 <handleUserCommand+0x158>)
 8001bb4:	f7ff fcbe 	bl	8001534 <UART_Transmit_String>
        break;
 8001bb8:	bf00      	nop
    }

    printOptions();
 8001bba:	f7ff fcfb 	bl	80015b4 <printOptions>
}
 8001bbe:	bf00      	nop
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	0801c1d0 	.word	0x0801c1d0
 8001bcc:	0801c1fc 	.word	0x0801c1fc
 8001bd0:	0801beac 	.word	0x0801beac
 8001bd4:	0801c22c 	.word	0x0801c22c
 8001bd8:	0801c250 	.word	0x0801c250
 8001bdc:	0801c268 	.word	0x0801c268
 8001be0:	0801c270 	.word	0x0801c270
 8001be4:	0801c290 	.word	0x0801c290
 8001be8:	0801c2b4 	.word	0x0801c2b4

08001bec <getNumberOfIterations>:



// Function to get the number of iterations from the user
uint32_t getNumberOfIterations()
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
    char inputBuffer[10];
    char inputChar;
    int bufferIndex = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]

    // Ask for the number of iterations
    UART_Transmit_String("\r\nEnter the number of iterations[Finish the integer with '$']: ");
 8001bf6:	4812      	ldr	r0, [pc, #72]	; (8001c40 <getNumberOfIterations+0x54>)
 8001bf8:	f7ff fc9c 	bl	8001534 <UART_Transmit_String>

    // Read user input character by character until we encounter '\n'
    do
    {
        HAL_UART_Receive(&huart1, (uint8_t *)&inputChar, sizeof(inputChar), HAL_MAX_DELAY);
 8001bfc:	1cf9      	adds	r1, r7, #3
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c02:	2201      	movs	r2, #1
 8001c04:	480f      	ldr	r0, [pc, #60]	; (8001c44 <getNumberOfIterations+0x58>)
 8001c06:	f00a fba8 	bl	800c35a <HAL_UART_Receive>
        inputBuffer[bufferIndex++] = inputChar;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	617a      	str	r2, [r7, #20]
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	3318      	adds	r3, #24
 8001c14:	443b      	add	r3, r7
 8001c16:	f803 2c14 	strb.w	r2, [r3, #-20]
    } while (inputChar != '$');
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	2b24      	cmp	r3, #36	; 0x24
 8001c1e:	d1ed      	bne.n	8001bfc <getNumberOfIterations+0x10>

    // Null-terminate the input buffer
    inputBuffer[bufferIndex] = '\0';
 8001c20:	1d3a      	adds	r2, r7, #4
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	4413      	add	r3, r2
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]

    // Convert the input string to an integer using atoi
    int userInput = atoi(inputBuffer);
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f012 fc7b 	bl	8014528 <atoi>
 8001c32:	6138      	str	r0, [r7, #16]

    return userInput;
 8001c34:	693b      	ldr	r3, [r7, #16]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	0801c2d4 	.word	0x0801c2d4
 8001c44:	20002e1c 	.word	0x20002e1c

08001c48 <launch_procedure>:


void launch_procedure(int countdown_duration_ms) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

	UART_Transmit_String("Launch procedure starting.... \r\n");
 8001c50:	482d      	ldr	r0, [pc, #180]	; (8001d08 <launch_procedure+0xc0>)
 8001c52:	f7ff fc6f 	bl	8001534 <UART_Transmit_String>

    int count_down_print = countdown_duration_ms / 1000;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a2c      	ldr	r2, [pc, #176]	; (8001d0c <launch_procedure+0xc4>)
 8001c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c5e:	1192      	asrs	r2, r2, #6
 8001c60:	17db      	asrs	r3, r3, #31
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	61fb      	str	r3, [r7, #28]

    // Calculate the number of SysTick ticks required for the countdown
    uint32_t ticks_start = HAL_GetTick();
 8001c66:	f006 f8cd 	bl	8007e04 <HAL_GetTick>
 8001c6a:	61b8      	str	r0, [r7, #24]
    uint32_t ticks_end = ticks_start + countdown_duration_ms;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4413      	add	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]

    char count_down_str[5]; // Buffer to store the countdown value as a string

    // Loop until the countdown duration is over
    while (HAL_GetTick() < ticks_end) {
 8001c74:	e029      	b.n	8001cca <launch_procedure+0x82>
    	if(count_down_print <= (countdown_duration_ms / 1000)) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a24      	ldr	r2, [pc, #144]	; (8001d0c <launch_procedure+0xc4>)
 8001c7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c7e:	1192      	asrs	r2, r2, #6
 8001c80:	17db      	asrs	r3, r3, #31
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	dc1c      	bgt.n	8001cc4 <launch_procedure+0x7c>
        // Toggle the buzzer (set the GPIO pin high and then low with a delay to produce sound)
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2120      	movs	r1, #32
 8001c8e:	4820      	ldr	r0, [pc, #128]	; (8001d10 <launch_procedure+0xc8>)
 8001c90:	f006 fe14 	bl	80088bc <HAL_GPIO_WritePin>

        // Convert the countdown value to a string
        sprintf(count_down_str, "%d...", count_down_print);
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	491e      	ldr	r1, [pc, #120]	; (8001d14 <launch_procedure+0xcc>)
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f013 fabd 	bl	801521c <siprintf>

        // Transmit the countdown value via UART
        UART_Transmit_String(count_down_str);
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fc44 	bl	8001534 <UART_Transmit_String>

        HAL_Delay(200); // Delay for 200 milliseconds (adjust the value as needed)
 8001cac:	20c8      	movs	r0, #200	; 0xc8
 8001cae:	f006 f8b5 	bl	8007e1c <HAL_Delay>

        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2120      	movs	r1, #32
 8001cb6:	4816      	ldr	r0, [pc, #88]	; (8001d10 <launch_procedure+0xc8>)
 8001cb8:	f006 fe00 	bl	80088bc <HAL_GPIO_WritePin>
        HAL_Delay(800); // Delay for 800 milliseconds (adjust the value as needed)
 8001cbc:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001cc0:	f006 f8ac 	bl	8007e1c <HAL_Delay>
    	}
        count_down_print--;
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	61fb      	str	r3, [r7, #28]
    while (HAL_GetTick() < ticks_end) {
 8001cca:	f006 f89b 	bl	8007e04 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d8cf      	bhi.n	8001c76 <launch_procedure+0x2e>
    }

    pyro_arm(1);
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	f003 fe18 	bl	800590c <pyro_arm>
    // Enable the buzzer at the end of the countdown (Launching the test!!!)
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	2120      	movs	r1, #32
 8001ce0:	480b      	ldr	r0, [pc, #44]	; (8001d10 <launch_procedure+0xc8>)
 8001ce2:	f006 fdeb 	bl	80088bc <HAL_GPIO_WritePin>
    pyro_fire(1);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f003 fe2e 	bl	8005948 <pyro_fire>
    HAL_Delay(800);
 8001cec:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001cf0:	f006 f894 	bl	8007e1c <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2120      	movs	r1, #32
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <launch_procedure+0xc8>)
 8001cfa:	f006 fddf 	bl	80088bc <HAL_GPIO_WritePin>

}
 8001cfe:	bf00      	nop
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	0801c314 	.word	0x0801c314
 8001d0c:	10624dd3 	.word	0x10624dd3
 8001d10:	40020800 	.word	0x40020800
 8001d14:	0801c338 	.word	0x0801c338

08001d18 <count_down_sequence_fire_test>:


void count_down_sequence_fire_test(int countdown_duration_ms) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

    int count_down_print = countdown_duration_ms / 1000;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <count_down_sequence_fire_test+0x98>)
 8001d24:	fb82 1203 	smull	r1, r2, r2, r3
 8001d28:	1192      	asrs	r2, r2, #6
 8001d2a:	17db      	asrs	r3, r3, #31
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	61fb      	str	r3, [r7, #28]

    // Calculate the number of SysTick ticks required for the countdown
    uint32_t ticks_start = HAL_GetTick();
 8001d30:	f006 f868 	bl	8007e04 <HAL_GetTick>
 8001d34:	61b8      	str	r0, [r7, #24]
    uint32_t ticks_end = ticks_start + countdown_duration_ms;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]

    char count_down_str[5]; // Buffer to store the countdown value as a string

    // Loop until the countdown duration is over
    while (HAL_GetTick() < ticks_end) {
 8001d3e:	e01f      	b.n	8001d80 <count_down_sequence_fire_test+0x68>
        // Toggle the buzzer (set the GPIO pin high and then low with a delay to produce sound)
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001d40:	2201      	movs	r2, #1
 8001d42:	2120      	movs	r1, #32
 8001d44:	481b      	ldr	r0, [pc, #108]	; (8001db4 <count_down_sequence_fire_test+0x9c>)
 8001d46:	f006 fdb9 	bl	80088bc <HAL_GPIO_WritePin>

        // Convert the countdown value to a string
        sprintf(count_down_str, "%d...", count_down_print);
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	4919      	ldr	r1, [pc, #100]	; (8001db8 <count_down_sequence_fire_test+0xa0>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f013 fa62 	bl	801521c <siprintf>

        // Transmit the countdown value via UART
        UART_Transmit_String(count_down_str);
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fbe9 	bl	8001534 <UART_Transmit_String>

        HAL_Delay(200); // Delay for 200 milliseconds (adjust the value as needed)
 8001d62:	20c8      	movs	r0, #200	; 0xc8
 8001d64:	f006 f85a 	bl	8007e1c <HAL_Delay>

        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	4811      	ldr	r0, [pc, #68]	; (8001db4 <count_down_sequence_fire_test+0x9c>)
 8001d6e:	f006 fda5 	bl	80088bc <HAL_GPIO_WritePin>
        HAL_Delay(800); // Delay for 800 milliseconds (adjust the value as needed)
 8001d72:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001d76:	f006 f851 	bl	8007e1c <HAL_Delay>
        count_down_print--;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
    while (HAL_GetTick() < ticks_end) {
 8001d80:	f006 f840 	bl	8007e04 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d8d9      	bhi.n	8001d40 <count_down_sequence_fire_test+0x28>
    }

    // Enable the buzzer at the end of the countdown (Launching the test!!!)
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2120      	movs	r1, #32
 8001d90:	4808      	ldr	r0, [pc, #32]	; (8001db4 <count_down_sequence_fire_test+0x9c>)
 8001d92:	f006 fd93 	bl	80088bc <HAL_GPIO_WritePin>
    HAL_Delay(800);
 8001d96:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001d9a:	f006 f83f 	bl	8007e1c <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2120      	movs	r1, #32
 8001da2:	4804      	ldr	r0, [pc, #16]	; (8001db4 <count_down_sequence_fire_test+0x9c>)
 8001da4:	f006 fd8a 	bl	80088bc <HAL_GPIO_WritePin>

}
 8001da8:	bf00      	nop
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	10624dd3 	.word	0x10624dd3
 8001db4:	40020800 	.word	0x40020800
 8001db8:	0801c338 	.word	0x0801c338

08001dbc <platform_read>:
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}

// SENSOR READING FUNCTION DEFINITION
int32_t platform_read(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	460b      	mov	r3, r1
 8001dca:	72fb      	strb	r3, [r7, #11]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	813b      	strh	r3, [r7, #8]
  // Perform the I2C read operation using HAL_I2C_Mem_Read
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8001dd0:	7afb      	ldrb	r3, [r7, #11]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	2364      	movs	r3, #100	; 0x64
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	893b      	ldrh	r3, [r7, #8]
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2301      	movs	r3, #1
 8001de2:	21d6      	movs	r1, #214	; 0xd6
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f007 fb09 	bl	80093fc <HAL_I2C_Mem_Read>
 8001dea:	4603      	mov	r3, r0
 8001dec:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <platform_read+0x3c>
 8001df4:	2300      	movs	r3, #0
 8001df6:	e001      	b.n	8001dfc <platform_read+0x40>
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <platform_write>:

// SENSOR WRITING FUNCTION DEFINITION
int32_t platform_write(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af04      	add	r7, sp, #16
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	460b      	mov	r3, r1
 8001e12:	72fb      	strb	r3, [r7, #11]
 8001e14:	4613      	mov	r3, r2
 8001e16:	813b      	strh	r3, [r7, #8]
  // Perform the I2C write operation using HAL_I2C_Mem_Write
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8001e18:	7afb      	ldrb	r3, [r7, #11]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	2364      	movs	r3, #100	; 0x64
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	893b      	ldrh	r3, [r7, #8]
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	21d6      	movs	r1, #214	; 0xd6
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f007 f9eb 	bl	8009208 <HAL_I2C_Mem_Write>
 8001e32:	4603      	mov	r3, r0
 8001e34:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <platform_write+0x3c>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e001      	b.n	8001e44 <platform_write+0x40>
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <IMU_Initialization>:


// IMU INITIALIZATION FUNCTION
int32_t IMU_Initialization(){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0


	/* Initialize MEMS driver interface */
	device.write_reg = platform_write;
 8001e52:	4b57      	ldr	r3, [pc, #348]	; (8001fb0 <IMU_Initialization+0x164>)
 8001e54:	4a57      	ldr	r2, [pc, #348]	; (8001fb4 <IMU_Initialization+0x168>)
 8001e56:	601a      	str	r2, [r3, #0]
	device.read_reg = platform_read;
 8001e58:	4b55      	ldr	r3, [pc, #340]	; (8001fb0 <IMU_Initialization+0x164>)
 8001e5a:	4a57      	ldr	r2, [pc, #348]	; (8001fb8 <IMU_Initialization+0x16c>)
 8001e5c:	605a      	str	r2, [r3, #4]
	device.handle = &hi2c1;
 8001e5e:	4b54      	ldr	r3, [pc, #336]	; (8001fb0 <IMU_Initialization+0x164>)
 8001e60:	4a56      	ldr	r2, [pc, #344]	; (8001fbc <IMU_Initialization+0x170>)
 8001e62:	60da      	str	r2, [r3, #12]

	/* Check device ID */
	whoamI = 0;
 8001e64:	4b56      	ldr	r3, [pc, #344]	; (8001fc0 <IMU_Initialization+0x174>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
	lsm6ds3tr_c_device_id_get(&device, &whoamI);
 8001e6a:	4955      	ldr	r1, [pc, #340]	; (8001fc0 <IMU_Initialization+0x174>)
 8001e6c:	4850      	ldr	r0, [pc, #320]	; (8001fb0 <IMU_Initialization+0x164>)
 8001e6e:	f004 fcc5 	bl	80067fc <lsm6ds3tr_c_device_id_get>

	if ( whoamI != LSM6DS3TR_C_ID ) {
 8001e72:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <IMU_Initialization+0x174>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b6a      	cmp	r3, #106	; 0x6a
 8001e78:	d002      	beq.n	8001e80 <IMU_Initialization+0x34>
		return -1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e7e:	e092      	b.n	8001fa6 <IMU_Initialization+0x15a>
	}



	/* Restore default configuration */
	lsm6ds3tr_c_reset_set(&device, PROPERTY_ENABLE);
 8001e80:	2101      	movs	r1, #1
 8001e82:	484b      	ldr	r0, [pc, #300]	; (8001fb0 <IMU_Initialization+0x164>)
 8001e84:	f004 fccb 	bl	800681e <lsm6ds3tr_c_reset_set>

	do {
    lsm6ds3tr_c_reset_get(&device, &rst);
 8001e88:	494e      	ldr	r1, [pc, #312]	; (8001fc4 <IMU_Initialization+0x178>)
 8001e8a:	4849      	ldr	r0, [pc, #292]	; (8001fb0 <IMU_Initialization+0x164>)
 8001e8c:	f004 fced 	bl	800686a <lsm6ds3tr_c_reset_get>
	} while (rst);
 8001e90:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <IMU_Initialization+0x178>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f7      	bne.n	8001e88 <IMU_Initialization+0x3c>

	int32_t int_set,xl_fs,xl_dr,gy_fs,gy_dr,bdu,xl_fas,xl_lp,gy_bps,state;
	//int32_t dev_round_status,dev_round_mode;

	//Enabling I2C Communication
	int_set = lsm6ds3tr_c_i2c_interface_set(&device,LSM6DS3TR_C_I2C_ENABLE);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4845      	ldr	r0, [pc, #276]	; (8001fb0 <IMU_Initialization+0x164>)
 8001e9c:	f004 fdc9 	bl	8006a32 <lsm6ds3tr_c_i2c_interface_set>
 8001ea0:	6278      	str	r0, [r7, #36]	; 0x24

	  /* Enable Block Data Update */
	  bdu = lsm6ds3tr_c_block_data_update_set(&device, PROPERTY_ENABLE);
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4842      	ldr	r0, [pc, #264]	; (8001fb0 <IMU_Initialization+0x164>)
 8001ea6:	f004 fbed 	bl	8006684 <lsm6ds3tr_c_block_data_update_set>
 8001eaa:	6238      	str	r0, [r7, #32]
	  /* Set Output Data Rate */
	  xl_dr= lsm6ds3tr_c_xl_data_rate_set(&device, LSM6DS3TR_C_XL_ODR_104Hz);
 8001eac:	2104      	movs	r1, #4
 8001eae:	4840      	ldr	r0, [pc, #256]	; (8001fb0 <IMU_Initialization+0x164>)
 8001eb0:	f004 fb76 	bl	80065a0 <lsm6ds3tr_c_xl_data_rate_set>
 8001eb4:	61f8      	str	r0, [r7, #28]
	  gy_dr= lsm6ds3tr_c_gy_data_rate_set(&device, LSM6DS3TR_C_XL_ODR_104Hz);
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	483d      	ldr	r0, [pc, #244]	; (8001fb0 <IMU_Initialization+0x164>)
 8001eba:	f004 fbbd 	bl	8006638 <lsm6ds3tr_c_gy_data_rate_set>
 8001ebe:	61b8      	str	r0, [r7, #24]
	  /* Set full scale */
	  xl_fs= lsm6ds3tr_c_xl_full_scale_set(&device, LSM6DS3TR_C_2g);
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	483b      	ldr	r0, [pc, #236]	; (8001fb0 <IMU_Initialization+0x164>)
 8001ec4:	f004 fb46 	bl	8006554 <lsm6ds3tr_c_xl_full_scale_set>
 8001ec8:	6178      	str	r0, [r7, #20]
	  gy_fs= lsm6ds3tr_c_gy_full_scale_set(&device, LSM6DS3TR_C_500dps);
 8001eca:	2102      	movs	r1, #2
 8001ecc:	4838      	ldr	r0, [pc, #224]	; (8001fb0 <IMU_Initialization+0x164>)
 8001ece:	f004 fb8d 	bl	80065ec <lsm6ds3tr_c_gy_full_scale_set>
 8001ed2:	6138      	str	r0, [r7, #16]


	  /* Configure filtering chain(No aux interface) */
	  /* Accelerometer - analog filter */
	  xl_fas= lsm6ds3tr_c_xl_filter_analog_set(&device,
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	4836      	ldr	r0, [pc, #216]	; (8001fb0 <IMU_Initialization+0x164>)
 8001ed8:	f004 fce0 	bl	800689c <lsm6ds3tr_c_xl_filter_analog_set>
 8001edc:	60f8      	str	r0, [r7, #12]
	                                   LSM6DS3TR_C_XL_ANA_BW_400Hz);
	  /* Accelerometer - LPF1 path ( LPF2 not used )*/
	  //xl_lp = lsm6ds3tr_c_xl_lp1_bandwidth_set(&device, LSM6DS3TR_C_XL_LP1_ODR_DIV_4);
	  /* Accelerometer - LPF1 + LPF2 path */
	  xl_lp= lsm6ds3tr_c_xl_lp2_bandwidth_set(&device,LSM6DS3TR_C_XL_LOW_NOISE_LP_ODR_DIV_100);
 8001ede:	2111      	movs	r1, #17
 8001ee0:	4833      	ldr	r0, [pc, #204]	; (8001fb0 <IMU_Initialization+0x164>)
 8001ee2:	f004 fd01 	bl	80068e8 <lsm6ds3tr_c_xl_lp2_bandwidth_set>
 8001ee6:	60b8      	str	r0, [r7, #8]
	  /* Accelerometer - High Pass / Slope path */
	  //lsm6ds3tr_c_xl_reference_mode_set(&device, PROPERTY_DISABLE);
	  //lsm6ds3tr_c_xl_hp_bandwidth_set(&device, LSM6DS3TR_C_XL_HP_ODR_DIV_100);
	  /* Gyroscope - filtering chain */
	  gy_bps= lsm6ds3tr_c_gy_band_pass_set(&device,
 8001ee8:	21a8      	movs	r1, #168	; 0xa8
 8001eea:	4831      	ldr	r0, [pc, #196]	; (8001fb0 <IMU_Initialization+0x164>)
 8001eec:	f004 fd33 	bl	8006956 <lsm6ds3tr_c_gy_band_pass_set>
 8001ef0:	6078      	str	r0, [r7, #4]

	  //dev_round_status = lsm6ds3tr_c_rounding_on_status_set(&device,PROPERTY_ENABLE);
	  //dev_round_mode= lsm6ds3tr_c_rounding_mode_set(&device,LSM6DS3TR_C_ROUND_GY_XL);


		state = int_set + xl_fs + xl_dr + gy_fs + gy_dr + bdu + xl_fas + xl_lp + gy_bps;
 8001ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	441a      	add	r2, r3
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	441a      	add	r2, r3
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	441a      	add	r2, r3
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	441a      	add	r2, r3
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	441a      	add	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	441a      	add	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4413      	add	r3, r2
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	603b      	str	r3, [r7, #0]

		//UART_Transmit_Messages_IMU("Configuration successful. \r\n");


		  MotionFX_initialize((MFXState_t *)mfxstate);
 8001f16:	482c      	ldr	r0, [pc, #176]	; (8001fc8 <IMU_Initialization+0x17c>)
 8001f18:	f012 f822 	bl	8013f60 <MotionFX_initialize>

		  MotionFX_getKnobs(mfxstate, ipKnobs);
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <IMU_Initialization+0x180>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	4829      	ldr	r0, [pc, #164]	; (8001fc8 <IMU_Initialization+0x17c>)
 8001f24:	f012 f922 	bl	801416c <MotionFX_getKnobs>

		  ipKnobs->acc_orientation[0] = 'n';
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <IMU_Initialization+0x180>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	226e      	movs	r2, #110	; 0x6e
 8001f2e:	775a      	strb	r2, [r3, #29]
		  ipKnobs->acc_orientation[1] = 'w';
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <IMU_Initialization+0x180>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2277      	movs	r2, #119	; 0x77
 8001f36:	779a      	strb	r2, [r3, #30]
		  ipKnobs->acc_orientation[2] = 'u';
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <IMU_Initialization+0x180>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2275      	movs	r2, #117	; 0x75
 8001f3e:	77da      	strb	r2, [r3, #31]
		  ipKnobs->gyro_orientation[0] = 'n';
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <IMU_Initialization+0x180>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	226e      	movs	r2, #110	; 0x6e
 8001f46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		  ipKnobs->gyro_orientation[1] = 'w';
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <IMU_Initialization+0x180>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2277      	movs	r2, #119	; 0x77
 8001f50:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		  ipKnobs->gyro_orientation[2] = 'u';
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <IMU_Initialization+0x180>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2275      	movs	r2, #117	; 0x75
 8001f5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <IMU_Initialization+0x180>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <IMU_Initialization+0x184>)
 8001f64:	615a      	str	r2, [r3, #20]
		  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <IMU_Initialization+0x180>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <IMU_Initialization+0x188>)
 8001f6c:	619a      	str	r2, [r3, #24]

		  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <IMU_Initialization+0x180>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		  ipKnobs->LMode = 1;
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <IMU_Initialization+0x180>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	731a      	strb	r2, [r3, #12]
		  ipKnobs->modx = DECIMATION;
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <IMU_Initialization+0x180>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2201      	movs	r2, #1
 8001f86:	771a      	strb	r2, [r3, #28]

		  MotionFX_setKnobs(mfxstate, ipKnobs);
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <IMU_Initialization+0x180>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <IMU_Initialization+0x17c>)
 8001f90:	f012 f8a0 	bl	80140d4 <MotionFX_setKnobs>
		  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 8001f94:	2101      	movs	r1, #1
 8001f96:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <IMU_Initialization+0x17c>)
 8001f98:	f012 f926 	bl	80141e8 <MotionFX_enable_6X>
		  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <IMU_Initialization+0x17c>)
 8001fa0:	f012 f942 	bl	8014228 <MotionFX_enable_9X>


		return state;
 8001fa4:	683b      	ldr	r3, [r7, #0]


}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3728      	adds	r7, #40	; 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20001f2c 	.word	0x20001f2c
 8001fb4:	08001e05 	.word	0x08001e05
 8001fb8:	08001dbd 	.word	0x08001dbd
 8001fbc:	20002c24 	.word	0x20002c24
 8001fc0:	20001f2a 	.word	0x20001f2a
 8001fc4:	20001f2b 	.word	0x20001f2b
 8001fc8:	20001f8c 	.word	0x20001f8c
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	3ac88a48 	.word	0x3ac88a48
 8001fd4:	3b83126f 	.word	0x3b83126f

08001fd8 <IMU_Data_Read>:


//IMU DATA READING FUNCTION
IMUData IMU_Data_Read(){
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b0a0      	sub	sp, #128	; 0x80
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	6078      	str	r0, [r7, #4]

	int32_t reading_state, gyro_reading, acc_reading;
    MFX_input_t data_in;
    MFX_output_t data_out;
    float delta_time = TIME_ODR_104Hz;
 8001fe0:	4b6a      	ldr	r3, [pc, #424]	; (800218c <IMU_Data_Read+0x1b4>)
 8001fe2:	60bb      	str	r3, [r7, #8]
	//char test[100];


	//ACCELEROMETER RAW DATA READING
	acc_reading = lsm6ds3tr_c_acceleration_raw_get(&device,data_raw_acceleration);
 8001fe4:	496a      	ldr	r1, [pc, #424]	; (8002190 <IMU_Data_Read+0x1b8>)
 8001fe6:	486b      	ldr	r0, [pc, #428]	; (8002194 <IMU_Data_Read+0x1bc>)
 8001fe8:	f004 fbbd 	bl	8006766 <lsm6ds3tr_c_acceleration_raw_get>
 8001fec:	6778      	str	r0, [r7, #116]	; 0x74
	//GYROSCOPE
	gyro_reading = lsm6ds3tr_c_angular_rate_raw_get(&device,data_raw_angular_rate);
 8001fee:	496a      	ldr	r1, [pc, #424]	; (8002198 <IMU_Data_Read+0x1c0>)
 8001ff0:	4868      	ldr	r0, [pc, #416]	; (8002194 <IMU_Data_Read+0x1bc>)
 8001ff2:	f004 fb6d 	bl	80066d0 <lsm6ds3tr_c_angular_rate_raw_get>
 8001ff6:	6738      	str	r0, [r7, #112]	; 0x70


	reading_state = gyro_reading + acc_reading; // If 0 -> Success | Otherwise error code
 8001ff8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ffc:	4413      	add	r3, r2
 8001ffe:	66fb      	str	r3, [r7, #108]	; 0x6c



	  if (reading_state == 0){
 8002000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 8094 	bne.w	8002130 <IMU_Data_Read+0x158>

			data_in.acc[0] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[0]) * FROM_MG_TO_G);
 8002008:	4b61      	ldr	r3, [pc, #388]	; (8002190 <IMU_Data_Read+0x1b8>)
 800200a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200e:	4618      	mov	r0, r3
 8002010:	f004 fa70 	bl	80064f4 <lsm6ds3tr_c_from_fs2g_to_mg>
 8002014:	eef0 7a40 	vmov.f32	s15, s0
 8002018:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800219c <IMU_Data_Read+0x1c4>
 800201c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002020:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			data_in.acc[1] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[1]) * FROM_MG_TO_G);
 8002024:	4b5a      	ldr	r3, [pc, #360]	; (8002190 <IMU_Data_Read+0x1b8>)
 8002026:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800202a:	4618      	mov	r0, r3
 800202c:	f004 fa62 	bl	80064f4 <lsm6ds3tr_c_from_fs2g_to_mg>
 8002030:	eef0 7a40 	vmov.f32	s15, s0
 8002034:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800219c <IMU_Data_Read+0x1c4>
 8002038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800203c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			data_in.acc[2] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[2]) * FROM_MG_TO_G);
 8002040:	4b53      	ldr	r3, [pc, #332]	; (8002190 <IMU_Data_Read+0x1b8>)
 8002042:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002046:	4618      	mov	r0, r3
 8002048:	f004 fa54 	bl	80064f4 <lsm6ds3tr_c_from_fs2g_to_mg>
 800204c:	eef0 7a40 	vmov.f32	s15, s0
 8002050:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800219c <IMU_Data_Read+0x1c4>
 8002054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002058:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c


			data_in.gyro[0] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[0]) * FROM_MDPS_TO_DPS) ;
 800205c:	4b4e      	ldr	r3, [pc, #312]	; (8002198 <IMU_Data_Read+0x1c0>)
 800205e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002062:	4618      	mov	r0, r3
 8002064:	f004 fa5e 	bl	8006524 <lsm6ds3tr_c_from_fs500dps_to_mdps>
 8002068:	eef0 7a40 	vmov.f32	s15, s0
 800206c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800219c <IMU_Data_Read+0x1c4>
 8002070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002074:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			data_in.gyro[1] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[1]) * FROM_MDPS_TO_DPS) ;
 8002078:	4b47      	ldr	r3, [pc, #284]	; (8002198 <IMU_Data_Read+0x1c0>)
 800207a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800207e:	4618      	mov	r0, r3
 8002080:	f004 fa50 	bl	8006524 <lsm6ds3tr_c_from_fs500dps_to_mdps>
 8002084:	eef0 7a40 	vmov.f32	s15, s0
 8002088:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800219c <IMU_Data_Read+0x1c4>
 800208c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002090:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			data_in.gyro[2] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[2]) * FROM_MDPS_TO_DPS) ;
 8002094:	4b40      	ldr	r3, [pc, #256]	; (8002198 <IMU_Data_Read+0x1c0>)
 8002096:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800209a:	4618      	mov	r0, r3
 800209c:	f004 fa42 	bl	8006524 <lsm6ds3tr_c_from_fs500dps_to_mdps>
 80020a0:	eef0 7a40 	vmov.f32	s15, s0
 80020a4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800219c <IMU_Data_Read+0x1c4>
 80020a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ac:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


		    /* Don't set mag values because we use only acc and gyro */
		    data_in.mag[0] = 0.0f;
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	64bb      	str	r3, [r7, #72]	; 0x48
		    data_in.mag[1] = 0.0f;
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		    data_in.mag[2] = 0.0f;
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	653b      	str	r3, [r7, #80]	; 0x50



	      MotionFX_propagate(mfxstate, &data_out, &data_in, &delta_time);
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80020ca:	f107 010c 	add.w	r1, r7, #12
 80020ce:	4834      	ldr	r0, [pc, #208]	; (80021a0 <IMU_Data_Read+0x1c8>)
 80020d0:	f012 f8da 	bl	8014288 <MotionFX_propagate>
	      MotionFX_update(mfxstate, &data_out, &data_in, &delta_time, NULL);
 80020d4:	f107 0308 	add.w	r3, r7, #8
 80020d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80020dc:	f107 010c 	add.w	r1, r7, #12
 80020e0:	2000      	movs	r0, #0
 80020e2:	9000      	str	r0, [sp, #0]
 80020e4:	482e      	ldr	r0, [pc, #184]	; (80021a0 <IMU_Data_Read+0x1c8>)
 80020e6:	f012 f8bf 	bl	8014268 <MotionFX_update>

	        // Update imu_data
	        imu_data.acceleration_x = data_out.gravity[0];
 80020ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ec:	4a2d      	ldr	r2, [pc, #180]	; (80021a4 <IMU_Data_Read+0x1cc>)
 80020ee:	6013      	str	r3, [r2, #0]
	        imu_data.acceleration_y = data_out.gravity[1];
 80020f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f2:	4a2c      	ldr	r2, [pc, #176]	; (80021a4 <IMU_Data_Read+0x1cc>)
 80020f4:	6053      	str	r3, [r2, #4]
	        imu_data.acceleration_z = data_out.gravity[2];
 80020f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f8:	4a2a      	ldr	r2, [pc, #168]	; (80021a4 <IMU_Data_Read+0x1cc>)
 80020fa:	6093      	str	r3, [r2, #8]
	        imu_data.angular_rate_x = data_out.linear_acceleration[0];
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <IMU_Data_Read+0x1cc>)
 8002100:	60d3      	str	r3, [r2, #12]
	        imu_data.angular_rate_y = data_out.linear_acceleration[1];
 8002102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002104:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <IMU_Data_Read+0x1cc>)
 8002106:	6113      	str	r3, [r2, #16]
	        imu_data.angular_rate_z = data_out.linear_acceleration[2];
 8002108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210a:	4a26      	ldr	r2, [pc, #152]	; (80021a4 <IMU_Data_Read+0x1cc>)
 800210c:	6153      	str	r3, [r2, #20]
	        imu_data.pitch = data_out.rotation[1];
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4a24      	ldr	r2, [pc, #144]	; (80021a4 <IMU_Data_Read+0x1cc>)
 8002112:	61d3      	str	r3, [r2, #28]
	        imu_data.roll = data_out.rotation[2];
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	4a23      	ldr	r2, [pc, #140]	; (80021a4 <IMU_Data_Read+0x1cc>)
 8002118:	6193      	str	r3, [r2, #24]


	        return imu_data;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <IMU_Data_Read+0x1cc>)
 800211e:	461c      	mov	r4, r3
 8002120:	4615      	mov	r5, r2
 8002122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002126:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800212a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800212e:	e029      	b.n	8002184 <IMU_Data_Read+0x1ac>
	  }	else	{

		  //Error State
		  imu_data.acceleration_x = 0.0;
 8002130:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <IMU_Data_Read+0x1cc>)
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
		  imu_data.acceleration_y = 0.0;
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <IMU_Data_Read+0x1cc>)
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
		  imu_data.acceleration_z = 0.0;
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <IMU_Data_Read+0x1cc>)
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
		  imu_data.angular_rate_x = 0.0;
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <IMU_Data_Read+0x1cc>)
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
		  imu_data.angular_rate_y = 0.0;
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <IMU_Data_Read+0x1cc>)
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
		  imu_data.angular_rate_z = 0.0;
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <IMU_Data_Read+0x1cc>)
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	615a      	str	r2, [r3, #20]
		  imu_data.pitch = 0.0;
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <IMU_Data_Read+0x1cc>)
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	61da      	str	r2, [r3, #28]
		  imu_data.roll = 0.0;
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <IMU_Data_Read+0x1cc>)
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	619a      	str	r2, [r3, #24]

	        return imu_data;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <IMU_Data_Read+0x1cc>)
 8002174:	461c      	mov	r4, r3
 8002176:	4615      	mov	r5, r2
 8002178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800217a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800217c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002180:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}

}
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	3778      	adds	r7, #120	; 0x78
 8002188:	46bd      	mov	sp, r7
 800218a:	bdb0      	pop	{r4, r5, r7, pc}
 800218c:	3c1d4952 	.word	0x3c1d4952
 8002190:	20001f1c 	.word	0x20001f1c
 8002194:	20001f2c 	.word	0x20001f2c
 8002198:	20001f24 	.word	0x20001f24
 800219c:	3a83126f 	.word	0x3a83126f
 80021a0:	20001f8c 	.word	0x20001f8c
 80021a4:	20001f3c 	.word	0x20001f3c

080021a8 <updateEKFQuatAtt>:

void updateEKFQuatAtt(const float gyr_rps[3], const float acc_mps2[3], const
                      float mag_unit[3], float Va_mps, float magDecRad,
                      float T, float NdivT, float *roll_deg, float
                      *pitch_deg, float *yaw_deg)
{
 80021a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ac:	ed2d 8b02 	vpush	{d8}
 80021b0:	f5ad 6dce 	sub.w	sp, sp, #1648	; 0x670
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	f507 64ce 	add.w	r4, r7, #1648	; 0x670
 80021ba:	f2a4 644c 	subw	r4, r4, #1612	; 0x64c
 80021be:	6020      	str	r0, [r4, #0]
 80021c0:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 80021c4:	f5a0 60ca 	sub.w	r0, r0, #1616	; 0x650
 80021c8:	6001      	str	r1, [r0, #0]
 80021ca:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 80021ce:	f2a1 6154 	subw	r1, r1, #1620	; 0x654
 80021d2:	600a      	str	r2, [r1, #0]
 80021d4:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80021d8:	f5a2 62cb 	sub.w	r2, r2, #1624	; 0x658
 80021dc:	ed82 0a00 	vstr	s0, [r2]
 80021e0:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80021e4:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 80021e8:	edc2 0a00 	vstr	s1, [r2]
 80021ec:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80021f0:	f5a2 62cc 	sub.w	r2, r2, #1632	; 0x660
 80021f4:	ed82 1a00 	vstr	s2, [r2]
 80021f8:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80021fc:	f2a2 6264 	subw	r2, r2, #1636	; 0x664
 8002200:	edc2 1a00 	vstr	s3, [r2]
 8002204:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8002208:	f5a2 62cd 	sub.w	r2, r2, #1640	; 0x668
 800220c:	6013      	str	r3, [r2, #0]
  float B[36];
  float dv2[6];
  float dv3[6];

  /*  Get measurements and low-pass filter them */
  p = lpfGyr * p + (1.0 - lpfGyr) * gyr_rps[0];
 800220e:	4bd3      	ldr	r3, [pc, #844]	; (800255c <updateEKFQuatAtt+0x3b4>)
 8002210:	ed93 7a00 	vldr	s14, [r3]
 8002214:	4bd2      	ldr	r3, [pc, #840]	; (8002560 <updateEKFQuatAtt+0x3b8>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221e:	ee17 0a90 	vmov	r0, s15
 8002222:	f7fe f991 	bl	8000548 <__aeabi_f2d>
 8002226:	4604      	mov	r4, r0
 8002228:	460d      	mov	r5, r1
 800222a:	4bcc      	ldr	r3, [pc, #816]	; (800255c <updateEKFQuatAtt+0x3b4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f98a 	bl	8000548 <__aeabi_f2d>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	f04f 0000 	mov.w	r0, #0
 800223c:	49c9      	ldr	r1, [pc, #804]	; (8002564 <updateEKFQuatAtt+0x3bc>)
 800223e:	f7fe f823 	bl	8000288 <__aeabi_dsub>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4690      	mov	r8, r2
 8002248:	4699      	mov	r9, r3
 800224a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800224e:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f976 	bl	8000548 <__aeabi_f2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4640      	mov	r0, r8
 8002262:	4649      	mov	r1, r9
 8002264:	f7fe f9c8 	bl	80005f8 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f7fe f80c 	bl	800028c <__adddf3>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fcb4 	bl	8000be8 <__aeabi_d2f>
 8002280:	4603      	mov	r3, r0
 8002282:	4ab7      	ldr	r2, [pc, #732]	; (8002560 <updateEKFQuatAtt+0x3b8>)
 8002284:	6013      	str	r3, [r2, #0]
  q = lpfGyr * q + (1.0 - lpfGyr) * gyr_rps[1];
 8002286:	4bb5      	ldr	r3, [pc, #724]	; (800255c <updateEKFQuatAtt+0x3b4>)
 8002288:	ed93 7a00 	vldr	s14, [r3]
 800228c:	4bb6      	ldr	r3, [pc, #728]	; (8002568 <updateEKFQuatAtt+0x3c0>)
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002296:	ee17 0a90 	vmov	r0, s15
 800229a:	f7fe f955 	bl	8000548 <__aeabi_f2d>
 800229e:	4604      	mov	r4, r0
 80022a0:	460d      	mov	r5, r1
 80022a2:	4bae      	ldr	r3, [pc, #696]	; (800255c <updateEKFQuatAtt+0x3b4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f94e 	bl	8000548 <__aeabi_f2d>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	f04f 0000 	mov.w	r0, #0
 80022b4:	49ab      	ldr	r1, [pc, #684]	; (8002564 <updateEKFQuatAtt+0x3bc>)
 80022b6:	f7fd ffe7 	bl	8000288 <__aeabi_dsub>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4690      	mov	r8, r2
 80022c0:	4699      	mov	r9, r3
 80022c2:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80022c6:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3304      	adds	r3, #4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe f939 	bl	8000548 <__aeabi_f2d>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4640      	mov	r0, r8
 80022dc:	4649      	mov	r1, r9
 80022de:	f7fe f98b 	bl	80005f8 <__aeabi_dmul>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4620      	mov	r0, r4
 80022e8:	4629      	mov	r1, r5
 80022ea:	f7fd ffcf 	bl	800028c <__adddf3>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	f7fe fc77 	bl	8000be8 <__aeabi_d2f>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4a9a      	ldr	r2, [pc, #616]	; (8002568 <updateEKFQuatAtt+0x3c0>)
 80022fe:	6013      	str	r3, [r2, #0]
  r = lpfGyr * r + (1.0 - lpfGyr) * gyr_rps[2];
 8002300:	4b96      	ldr	r3, [pc, #600]	; (800255c <updateEKFQuatAtt+0x3b4>)
 8002302:	ed93 7a00 	vldr	s14, [r3]
 8002306:	4b99      	ldr	r3, [pc, #612]	; (800256c <updateEKFQuatAtt+0x3c4>)
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002310:	ee17 0a90 	vmov	r0, s15
 8002314:	f7fe f918 	bl	8000548 <__aeabi_f2d>
 8002318:	4604      	mov	r4, r0
 800231a:	460d      	mov	r5, r1
 800231c:	4b8f      	ldr	r3, [pc, #572]	; (800255c <updateEKFQuatAtt+0x3b4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f911 	bl	8000548 <__aeabi_f2d>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	f04f 0000 	mov.w	r0, #0
 800232e:	498d      	ldr	r1, [pc, #564]	; (8002564 <updateEKFQuatAtt+0x3bc>)
 8002330:	f7fd ffaa 	bl	8000288 <__aeabi_dsub>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4690      	mov	r8, r2
 800233a:	4699      	mov	r9, r3
 800233c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002340:	f2a3 634c 	subw	r3, r3, #1612	; 0x64c
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3308      	adds	r3, #8
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe f8fc 	bl	8000548 <__aeabi_f2d>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4640      	mov	r0, r8
 8002356:	4649      	mov	r1, r9
 8002358:	f7fe f94e 	bl	80005f8 <__aeabi_dmul>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4620      	mov	r0, r4
 8002362:	4629      	mov	r1, r5
 8002364:	f7fd ff92 	bl	800028c <__adddf3>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe fc3a 	bl	8000be8 <__aeabi_d2f>
 8002374:	4603      	mov	r3, r0
 8002376:	4a7d      	ldr	r2, [pc, #500]	; (800256c <updateEKFQuatAtt+0x3c4>)
 8002378:	6013      	str	r3, [r2, #0]
  ax = lpfAcc * ax + (1.0 - lpfAcc) * acc_mps2[0];
 800237a:	4b7d      	ldr	r3, [pc, #500]	; (8002570 <updateEKFQuatAtt+0x3c8>)
 800237c:	ed93 7a00 	vldr	s14, [r3]
 8002380:	4b7c      	ldr	r3, [pc, #496]	; (8002574 <updateEKFQuatAtt+0x3cc>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238a:	ee17 0a90 	vmov	r0, s15
 800238e:	f7fe f8db 	bl	8000548 <__aeabi_f2d>
 8002392:	4604      	mov	r4, r0
 8002394:	460d      	mov	r5, r1
 8002396:	4b76      	ldr	r3, [pc, #472]	; (8002570 <updateEKFQuatAtt+0x3c8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f8d4 	bl	8000548 <__aeabi_f2d>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	f04f 0000 	mov.w	r0, #0
 80023a8:	496e      	ldr	r1, [pc, #440]	; (8002564 <updateEKFQuatAtt+0x3bc>)
 80023aa:	f7fd ff6d 	bl	8000288 <__aeabi_dsub>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4690      	mov	r8, r2
 80023b4:	4699      	mov	r9, r3
 80023b6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80023ba:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe f8c0 	bl	8000548 <__aeabi_f2d>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4640      	mov	r0, r8
 80023ce:	4649      	mov	r1, r9
 80023d0:	f7fe f912 	bl	80005f8 <__aeabi_dmul>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4620      	mov	r0, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	f7fd ff56 	bl	800028c <__adddf3>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	f7fe fbfe 	bl	8000be8 <__aeabi_d2f>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4a61      	ldr	r2, [pc, #388]	; (8002574 <updateEKFQuatAtt+0x3cc>)
 80023f0:	6013      	str	r3, [r2, #0]
  ay = lpfAcc * ay + (1.0 - lpfAcc) * acc_mps2[1];
 80023f2:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <updateEKFQuatAtt+0x3c8>)
 80023f4:	ed93 7a00 	vldr	s14, [r3]
 80023f8:	4b5f      	ldr	r3, [pc, #380]	; (8002578 <updateEKFQuatAtt+0x3d0>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002402:	ee17 0a90 	vmov	r0, s15
 8002406:	f7fe f89f 	bl	8000548 <__aeabi_f2d>
 800240a:	4604      	mov	r4, r0
 800240c:	460d      	mov	r5, r1
 800240e:	4b58      	ldr	r3, [pc, #352]	; (8002570 <updateEKFQuatAtt+0x3c8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f898 	bl	8000548 <__aeabi_f2d>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	f04f 0000 	mov.w	r0, #0
 8002420:	4950      	ldr	r1, [pc, #320]	; (8002564 <updateEKFQuatAtt+0x3bc>)
 8002422:	f7fd ff31 	bl	8000288 <__aeabi_dsub>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4690      	mov	r8, r2
 800242c:	4699      	mov	r9, r3
 800242e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002432:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3304      	adds	r3, #4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f883 	bl	8000548 <__aeabi_f2d>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4640      	mov	r0, r8
 8002448:	4649      	mov	r1, r9
 800244a:	f7fe f8d5 	bl	80005f8 <__aeabi_dmul>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4620      	mov	r0, r4
 8002454:	4629      	mov	r1, r5
 8002456:	f7fd ff19 	bl	800028c <__adddf3>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f7fe fbc1 	bl	8000be8 <__aeabi_d2f>
 8002466:	4603      	mov	r3, r0
 8002468:	4a43      	ldr	r2, [pc, #268]	; (8002578 <updateEKFQuatAtt+0x3d0>)
 800246a:	6013      	str	r3, [r2, #0]
  az = lpfAcc * az + (1.0 - lpfAcc) * acc_mps2[2];
 800246c:	4b40      	ldr	r3, [pc, #256]	; (8002570 <updateEKFQuatAtt+0x3c8>)
 800246e:	ed93 7a00 	vldr	s14, [r3]
 8002472:	4b42      	ldr	r3, [pc, #264]	; (800257c <updateEKFQuatAtt+0x3d4>)
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247c:	ee17 0a90 	vmov	r0, s15
 8002480:	f7fe f862 	bl	8000548 <__aeabi_f2d>
 8002484:	4604      	mov	r4, r0
 8002486:	460d      	mov	r5, r1
 8002488:	4b39      	ldr	r3, [pc, #228]	; (8002570 <updateEKFQuatAtt+0x3c8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f85b 	bl	8000548 <__aeabi_f2d>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	f04f 0000 	mov.w	r0, #0
 800249a:	4932      	ldr	r1, [pc, #200]	; (8002564 <updateEKFQuatAtt+0x3bc>)
 800249c:	f7fd fef4 	bl	8000288 <__aeabi_dsub>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4690      	mov	r8, r2
 80024a6:	4699      	mov	r9, r3
 80024a8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80024ac:	f5a3 63ca 	sub.w	r3, r3, #1616	; 0x650
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3308      	adds	r3, #8
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f846 	bl	8000548 <__aeabi_f2d>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4640      	mov	r0, r8
 80024c2:	4649      	mov	r1, r9
 80024c4:	f7fe f898 	bl	80005f8 <__aeabi_dmul>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4620      	mov	r0, r4
 80024ce:	4629      	mov	r1, r5
 80024d0:	f7fd fedc 	bl	800028c <__adddf3>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	f7fe fb84 	bl	8000be8 <__aeabi_d2f>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4a26      	ldr	r2, [pc, #152]	; (800257c <updateEKFQuatAtt+0x3d4>)
 80024e4:	6013      	str	r3, [r2, #0]
  mx = lpfMag * mx + (1.0 - lpfMag) * mag_unit[0];
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <updateEKFQuatAtt+0x3d8>)
 80024e8:	ed93 7a00 	vldr	s14, [r3]
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <updateEKFQuatAtt+0x3dc>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f6:	ee17 0a90 	vmov	r0, s15
 80024fa:	f7fe f825 	bl	8000548 <__aeabi_f2d>
 80024fe:	4604      	mov	r4, r0
 8002500:	460d      	mov	r5, r1
 8002502:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <updateEKFQuatAtt+0x3d8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe f81e 	bl	8000548 <__aeabi_f2d>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	f04f 0000 	mov.w	r0, #0
 8002514:	4913      	ldr	r1, [pc, #76]	; (8002564 <updateEKFQuatAtt+0x3bc>)
 8002516:	f7fd feb7 	bl	8000288 <__aeabi_dsub>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4690      	mov	r8, r2
 8002520:	4699      	mov	r9, r3
 8002522:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002526:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe f80a 	bl	8000548 <__aeabi_f2d>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4640      	mov	r0, r8
 800253a:	4649      	mov	r1, r9
 800253c:	f7fe f85c 	bl	80005f8 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4620      	mov	r0, r4
 8002546:	4629      	mov	r1, r5
 8002548:	f7fd fea0 	bl	800028c <__adddf3>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f7fe fb48 	bl	8000be8 <__aeabi_d2f>
 8002558:	4603      	mov	r3, r0
 800255a:	e015      	b.n	8002588 <updateEKFQuatAtt+0x3e0>
 800255c:	20002934 	.word	0x20002934
 8002560:	2000290c 	.word	0x2000290c
 8002564:	3ff00000 	.word	0x3ff00000
 8002568:	20002910 	.word	0x20002910
 800256c:	20002914 	.word	0x20002914
 8002570:	20002938 	.word	0x20002938
 8002574:	20002918 	.word	0x20002918
 8002578:	2000291c 	.word	0x2000291c
 800257c:	20002920 	.word	0x20002920
 8002580:	2000293c 	.word	0x2000293c
 8002584:	20002924 	.word	0x20002924
 8002588:	4a8c      	ldr	r2, [pc, #560]	; (80027bc <updateEKFQuatAtt+0x614>)
 800258a:	6013      	str	r3, [r2, #0]
  my = lpfMag * my + (1.0 - lpfMag) * mag_unit[1];
 800258c:	4b8c      	ldr	r3, [pc, #560]	; (80027c0 <updateEKFQuatAtt+0x618>)
 800258e:	ed93 7a00 	vldr	s14, [r3]
 8002592:	4b8c      	ldr	r3, [pc, #560]	; (80027c4 <updateEKFQuatAtt+0x61c>)
 8002594:	edd3 7a00 	vldr	s15, [r3]
 8002598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259c:	ee17 0a90 	vmov	r0, s15
 80025a0:	f7fd ffd2 	bl	8000548 <__aeabi_f2d>
 80025a4:	4604      	mov	r4, r0
 80025a6:	460d      	mov	r5, r1
 80025a8:	4b85      	ldr	r3, [pc, #532]	; (80027c0 <updateEKFQuatAtt+0x618>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ffcb 	bl	8000548 <__aeabi_f2d>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	f04f 0000 	mov.w	r0, #0
 80025ba:	4983      	ldr	r1, [pc, #524]	; (80027c8 <updateEKFQuatAtt+0x620>)
 80025bc:	f7fd fe64 	bl	8000288 <__aeabi_dsub>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4690      	mov	r8, r2
 80025c6:	4699      	mov	r9, r3
 80025c8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80025cc:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3304      	adds	r3, #4
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ffb6 	bl	8000548 <__aeabi_f2d>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4640      	mov	r0, r8
 80025e2:	4649      	mov	r1, r9
 80025e4:	f7fe f808 	bl	80005f8 <__aeabi_dmul>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4620      	mov	r0, r4
 80025ee:	4629      	mov	r1, r5
 80025f0:	f7fd fe4c 	bl	800028c <__adddf3>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f7fe faf4 	bl	8000be8 <__aeabi_d2f>
 8002600:	4603      	mov	r3, r0
 8002602:	4a70      	ldr	r2, [pc, #448]	; (80027c4 <updateEKFQuatAtt+0x61c>)
 8002604:	6013      	str	r3, [r2, #0]
  mz = lpfMag * mz + (1.0 - lpfMag) * mag_unit[2];
 8002606:	4b6e      	ldr	r3, [pc, #440]	; (80027c0 <updateEKFQuatAtt+0x618>)
 8002608:	ed93 7a00 	vldr	s14, [r3]
 800260c:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <updateEKFQuatAtt+0x624>)
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002616:	ee17 0a90 	vmov	r0, s15
 800261a:	f7fd ff95 	bl	8000548 <__aeabi_f2d>
 800261e:	4604      	mov	r4, r0
 8002620:	460d      	mov	r5, r1
 8002622:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <updateEKFQuatAtt+0x618>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff8e 	bl	8000548 <__aeabi_f2d>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	f04f 0000 	mov.w	r0, #0
 8002634:	4964      	ldr	r1, [pc, #400]	; (80027c8 <updateEKFQuatAtt+0x620>)
 8002636:	f7fd fe27 	bl	8000288 <__aeabi_dsub>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4690      	mov	r8, r2
 8002640:	4699      	mov	r9, r3
 8002642:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002646:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3308      	adds	r3, #8
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd ff79 	bl	8000548 <__aeabi_f2d>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4640      	mov	r0, r8
 800265c:	4649      	mov	r1, r9
 800265e:	f7fd ffcb 	bl	80005f8 <__aeabi_dmul>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4620      	mov	r0, r4
 8002668:	4629      	mov	r1, r5
 800266a:	f7fd fe0f 	bl	800028c <__adddf3>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	f7fe fab7 	bl	8000be8 <__aeabi_d2f>
 800267a:	4603      	mov	r3, r0
 800267c:	4a53      	ldr	r2, [pc, #332]	; (80027cc <updateEKFQuatAtt+0x624>)
 800267e:	6013      	str	r3, [r2, #0]
  mnorm = sqrt((mx * mx + my * my) + mz * mz);
 8002680:	4b4e      	ldr	r3, [pc, #312]	; (80027bc <updateEKFQuatAtt+0x614>)
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	4b4d      	ldr	r3, [pc, #308]	; (80027bc <updateEKFQuatAtt+0x614>)
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002690:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <updateEKFQuatAtt+0x61c>)
 8002692:	edd3 6a00 	vldr	s13, [r3]
 8002696:	4b4b      	ldr	r3, [pc, #300]	; (80027c4 <updateEKFQuatAtt+0x61c>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a4:	4b49      	ldr	r3, [pc, #292]	; (80027cc <updateEKFQuatAtt+0x624>)
 80026a6:	edd3 6a00 	vldr	s13, [r3]
 80026aa:	4b48      	ldr	r3, [pc, #288]	; (80027cc <updateEKFQuatAtt+0x624>)
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b8:	ee17 0a90 	vmov	r0, s15
 80026bc:	f7fd ff44 	bl	8000548 <__aeabi_f2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	ec43 2b10 	vmov	d0, r2, r3
 80026c8:	f016 fe80 	bl	80193cc <sqrt>
 80026cc:	ec53 2b10 	vmov	r2, r3, d0
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f7fe fa88 	bl	8000be8 <__aeabi_d2f>
 80026d8:	4603      	mov	r3, r0
 80026da:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 80026de:	6013      	str	r3, [r2, #0]
  mx /= mnorm;
 80026e0:	4b36      	ldr	r3, [pc, #216]	; (80027bc <updateEKFQuatAtt+0x614>)
 80026e2:	edd3 6a00 	vldr	s13, [r3]
 80026e6:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80026ea:	ed93 7a00 	vldr	s14, [r3]
 80026ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f2:	4b32      	ldr	r3, [pc, #200]	; (80027bc <updateEKFQuatAtt+0x614>)
 80026f4:	edc3 7a00 	vstr	s15, [r3]
  my /= mnorm;
 80026f8:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <updateEKFQuatAtt+0x61c>)
 80026fa:	edd3 6a00 	vldr	s13, [r3]
 80026fe:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002702:	ed93 7a00 	vldr	s14, [r3]
 8002706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800270a:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <updateEKFQuatAtt+0x61c>)
 800270c:	edc3 7a00 	vstr	s15, [r3]
  mz /= mnorm;
 8002710:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <updateEKFQuatAtt+0x624>)
 8002712:	edd3 6a00 	vldr	s13, [r3]
 8002716:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800271a:	ed93 7a00 	vldr	s14, [r3]
 800271e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002722:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <updateEKFQuatAtt+0x624>)
 8002724:	edc3 7a00 	vstr	s15, [r3]
  Va = lpfVa * Va + (1.0 - lpfVa) * Va_mps;
 8002728:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <updateEKFQuatAtt+0x628>)
 800272a:	ed93 7a00 	vldr	s14, [r3]
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <updateEKFQuatAtt+0x62c>)
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002738:	ee17 0a90 	vmov	r0, s15
 800273c:	f7fd ff04 	bl	8000548 <__aeabi_f2d>
 8002740:	4604      	mov	r4, r0
 8002742:	460d      	mov	r5, r1
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <updateEKFQuatAtt+0x628>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd fefd 	bl	8000548 <__aeabi_f2d>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	f04f 0000 	mov.w	r0, #0
 8002756:	491c      	ldr	r1, [pc, #112]	; (80027c8 <updateEKFQuatAtt+0x620>)
 8002758:	f7fd fd96 	bl	8000288 <__aeabi_dsub>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4690      	mov	r8, r2
 8002762:	4699      	mov	r9, r3
 8002764:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002768:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	f7fd feeb 	bl	8000548 <__aeabi_f2d>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4640      	mov	r0, r8
 8002778:	4649      	mov	r1, r9
 800277a:	f7fd ff3d 	bl	80005f8 <__aeabi_dmul>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4620      	mov	r0, r4
 8002784:	4629      	mov	r1, r5
 8002786:	f7fd fd81 	bl	800028c <__adddf3>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	f7fe fa29 	bl	8000be8 <__aeabi_d2f>
 8002796:	4603      	mov	r3, r0
 8002798:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <updateEKFQuatAtt+0x62c>)
 800279a:	6013      	str	r3, [r2, #0]
  i0 = (int)NdivT;
 800279c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80027a0:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ac:	ee17 3a90 	vmov	r3, s15
 80027b0:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
  for (iy = 0; iy < i0; iy++) {
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 80027ba:	e16f      	b.n	8002a9c <updateEKFQuatAtt+0x8f4>
 80027bc:	20002924 	.word	0x20002924
 80027c0:	2000293c 	.word	0x2000293c
 80027c4:	20002928 	.word	0x20002928
 80027c8:	3ff00000 	.word	0x3ff00000
 80027cc:	2000292c 	.word	0x2000292c
 80027d0:	20002940 	.word	0x20002940
 80027d4:	20002930 	.word	0x20002930
    /*  Extract states */
    /*  State transition function, xdot = f(x, u) */
    /*  Update state estimate */
    a = T / NdivT;
 80027d8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80027dc:	f5a3 62cc 	sub.w	r2, r3, #1632	; 0x660
 80027e0:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80027e4:	f2a3 6364 	subw	r3, r3, #1636	; 0x664
 80027e8:	edd2 6a00 	vldr	s13, [r2]
 80027ec:	ed93 7a00 	vldr	s14, [r3]
 80027f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f4:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 80027f8:	edc3 7a00 	vstr	s15, [r3]
    mnorm = 0.5 * -x[1];
 80027fc:	4b8f      	ldr	r3, [pc, #572]	; (8002a3c <updateEKFQuatAtt+0x894>)
 80027fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002802:	eef1 7a67 	vneg.f32	s15, s15
 8002806:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800280a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800280e:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002812:	edc3 7a00 	vstr	s15, [r3]
    dv0[0] = mnorm;
 8002816:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 8002820:	6013      	str	r3, [r2, #0]
    unnamed_idx_2 = 0.5 * -x[2];
 8002822:	4b86      	ldr	r3, [pc, #536]	; (8002a3c <updateEKFQuatAtt+0x894>)
 8002824:	edd3 7a02 	vldr	s15, [r3, #8]
 8002828:	eef1 7a67 	vneg.f32	s15, s15
 800282c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002834:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8002838:	edc3 7a00 	vstr	s15, [r3]
    dv0[4] = unnamed_idx_2;
 800283c:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 8002846:	6013      	str	r3, [r2, #0]
    s = 0.5 * -x[3];
 8002848:	4b7c      	ldr	r3, [pc, #496]	; (8002a3c <updateEKFQuatAtt+0x894>)
 800284a:	edd3 7a03 	vldr	s15, [r3, #12]
 800284e:	eef1 7a67 	vneg.f32	s15, s15
 8002852:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800285e:	edc3 7a00 	vstr	s15, [r3]
    dv0[8] = s;
 8002862:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800286c:	6013      	str	r3, [r2, #0]
    dv0[1] = 0.5 * x[0];
 800286e:	4b73      	ldr	r3, [pc, #460]	; (8002a3c <updateEKFQuatAtt+0x894>)
 8002870:	edd3 7a00 	vldr	s15, [r3]
 8002874:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800287c:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8002880:	edc3 7a00 	vstr	s15, [r3]
    dv0[5] = s;
 8002884:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f207 620c 	addw	r2, r7, #1548	; 0x60c
 800288e:	6013      	str	r3, [r2, #0]
    dv0[9] = 0.5 * x[2];
 8002890:	4b6a      	ldr	r3, [pc, #424]	; (8002a3c <updateEKFQuatAtt+0x894>)
 8002892:	edd3 7a02 	vldr	s15, [r3, #8]
 8002896:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800289a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289e:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 80028a2:	edc3 7a00 	vstr	s15, [r3]
    dv0[2] = 0.5 * x[3];
 80028a6:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <updateEKFQuatAtt+0x894>)
 80028a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80028ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80028b8:	edc3 7a00 	vstr	s15, [r3]
    dv0[6] = 0.5 * x[0];
 80028bc:	4b5f      	ldr	r3, [pc, #380]	; (8002a3c <updateEKFQuatAtt+0x894>)
 80028be:	edd3 7a00 	vldr	s15, [r3]
 80028c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ca:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 80028ce:	edc3 7a00 	vstr	s15, [r3]
    dv0[10] = mnorm;
 80028d2:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 80028dc:	6013      	str	r3, [r2, #0]
    dv0[3] = unnamed_idx_2;
 80028de:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f207 6204 	addw	r2, r7, #1540	; 0x604
 80028e8:	6013      	str	r3, [r2, #0]
    dv0[7] = 0.5 * x[1];
 80028ea:	4b54      	ldr	r3, [pc, #336]	; (8002a3c <updateEKFQuatAtt+0x894>)
 80028ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80028f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f8:	f207 6314 	addw	r3, r7, #1556	; 0x614
 80028fc:	edc3 7a00 	vstr	s15, [r3]
    dv0[11] = 0.5 * x[0];
 8002900:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <updateEKFQuatAtt+0x894>)
 8002902:	edd3 7a00 	vldr	s15, [r3]
 8002906:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800290a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800290e:	f207 6324 	addw	r3, r7, #1572	; 0x624
 8002912:	edc3 7a00 	vstr	s15, [r3]
    mnorm = p - x[4];
 8002916:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <updateEKFQuatAtt+0x898>)
 8002918:	ed93 7a00 	vldr	s14, [r3]
 800291c:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <updateEKFQuatAtt+0x894>)
 800291e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002926:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800292a:	edc3 7a00 	vstr	s15, [r3]
    s = q - x[5];
 800292e:	4b45      	ldr	r3, [pc, #276]	; (8002a44 <updateEKFQuatAtt+0x89c>)
 8002930:	ed93 7a00 	vldr	s14, [r3]
 8002934:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <updateEKFQuatAtt+0x894>)
 8002936:	edd3 7a05 	vldr	s15, [r3, #20]
 800293a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293e:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8002942:	edc3 7a00 	vstr	s15, [r3]
    unnamed_idx_2 = r - x[6];
 8002946:	4b40      	ldr	r3, [pc, #256]	; (8002a48 <updateEKFQuatAtt+0x8a0>)
 8002948:	ed93 7a00 	vldr	s14, [r3]
 800294c:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <updateEKFQuatAtt+0x894>)
 800294e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002956:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800295a:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0; k < 4; k++) {
 800295e:	2300      	movs	r3, #0
 8002960:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8002964:	e04d      	b.n	8002a02 <updateEKFQuatAtt+0x85a>
      b_a[k] = a * ((dv0[k] * mnorm + dv0[k + 4] * s) + dv0[k + 8] *
 8002966:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8002970:	f107 0208 	add.w	r2, r7, #8
 8002974:	4413      	add	r3, r2
 8002976:	3b78      	subs	r3, #120	; 0x78
 8002978:	ed93 7a00 	vldr	s14, [r3]
 800297c:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002988:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800298c:	3304      	adds	r3, #4
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8002994:	f107 0208 	add.w	r2, r7, #8
 8002998:	4413      	add	r3, r2
 800299a:	3b78      	subs	r3, #120	; 0x78
 800299c:	edd3 6a00 	vldr	s13, [r3]
 80029a0:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029b0:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80029b4:	3308      	adds	r3, #8
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 80029bc:	f107 0208 	add.w	r2, r7, #8
 80029c0:	4413      	add	r3, r2
 80029c2:	3b78      	subs	r3, #120	; 0x78
 80029c4:	edd3 6a00 	vldr	s13, [r3]
 80029c8:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80029cc:	edd3 7a00 	vldr	s15, [r3]
 80029d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029d8:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80029e8:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 80029ec:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0; k < 4; k++) {
 80029f8:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80029fc:	3301      	adds	r3, #1
 80029fe:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8002a02:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	ddad      	ble.n	8002966 <updateEKFQuatAtt+0x7be>
                    unnamed_idx_2);
    }

    b_a[4] = 0.0;
 8002a0a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002a0e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
    b_a[5] = 0.0;
 8002a18:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002a1c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	615a      	str	r2, [r3, #20]
    b_a[6] = 0.0;
 8002a26:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002a2a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]
    for (k = 0; k < 7; k++) {
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8002a3a:	e026      	b.n	8002a8a <updateEKFQuatAtt+0x8e2>
 8002a3c:	20002944 	.word	0x20002944
 8002a40:	2000290c 	.word	0x2000290c
 8002a44:	20002910 	.word	0x20002910
 8002a48:	20002914 	.word	0x20002914
      x[k] += b_a[k];
 8002a4c:	4ae1      	ldr	r2, [pc, #900]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002a4e:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	ed93 7a00 	vldr	s14, [r3]
 8002a5a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002a5e:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8002a62:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	edd3 7a00 	vldr	s15, [r3]
 8002a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a72:	4ad8      	ldr	r2, [pc, #864]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002a74:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0; k < 7; k++) {
 8002a80:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8002a84:	3301      	adds	r3, #1
 8002a86:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8002a8a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	dddc      	ble.n	8002a4c <updateEKFQuatAtt+0x8a4>
  for (iy = 0; iy < i0; iy++) {
 8002a92:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8002a96:	3301      	adds	r3, #1
 8002a98:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8002a9c:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 8002aa0:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	f6ff ae97 	blt.w	80027d8 <updateEKFQuatAtt+0x630>
    }
  }

  /*  Normalise quaternion */
  mnorm = sqrt(((x[0] * x[0] + x[1] * x[1]) + x[2] * x[2]) + x[3] * x[3]);
 8002aaa:	4bca      	ldr	r3, [pc, #808]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002aac:	ed93 7a00 	vldr	s14, [r3]
 8002ab0:	4bc8      	ldr	r3, [pc, #800]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002ab2:	edd3 7a00 	vldr	s15, [r3]
 8002ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aba:	4bc6      	ldr	r3, [pc, #792]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002abc:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ac0:	4bc4      	ldr	r3, [pc, #784]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002ac2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ac6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ace:	4bc1      	ldr	r3, [pc, #772]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002ad0:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ad4:	4bbf      	ldr	r3, [pc, #764]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002ad6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ada:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ade:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae2:	4bbc      	ldr	r3, [pc, #752]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002ae4:	edd3 6a03 	vldr	s13, [r3, #12]
 8002ae8:	4bba      	ldr	r3, [pc, #744]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002aea:	edd3 7a03 	vldr	s15, [r3, #12]
 8002aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af6:	ee17 0a90 	vmov	r0, s15
 8002afa:	f7fd fd25 	bl	8000548 <__aeabi_f2d>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	ec43 2b10 	vmov	d0, r2, r3
 8002b06:	f016 fc61 	bl	80193cc <sqrt>
 8002b0a:	ec53 2b10 	vmov	r2, r3, d0
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f7fe f869 	bl	8000be8 <__aeabi_d2f>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8002b1c:	6013      	str	r3, [r2, #0]
  x[0] /= mnorm;
 8002b1e:	4bad      	ldr	r3, [pc, #692]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002b20:	edd3 6a00 	vldr	s13, [r3]
 8002b24:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002b28:	ed93 7a00 	vldr	s14, [r3]
 8002b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b30:	4ba8      	ldr	r3, [pc, #672]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002b32:	edc3 7a00 	vstr	s15, [r3]
  x[1] /= mnorm;
 8002b36:	4ba7      	ldr	r3, [pc, #668]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002b38:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b3c:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002b40:	ed93 7a00 	vldr	s14, [r3]
 8002b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b48:	4ba2      	ldr	r3, [pc, #648]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002b4a:	edc3 7a01 	vstr	s15, [r3, #4]
  x[2] /= mnorm;
 8002b4e:	4ba1      	ldr	r3, [pc, #644]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002b50:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b54:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002b58:	ed93 7a00 	vldr	s14, [r3]
 8002b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b60:	4b9c      	ldr	r3, [pc, #624]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002b62:	edc3 7a02 	vstr	s15, [r3, #8]
  x[3] /= mnorm;
 8002b66:	4b9b      	ldr	r3, [pc, #620]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002b68:	edd3 6a03 	vldr	s13, [r3, #12]
 8002b6c:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002b70:	ed93 7a00 	vldr	s14, [r3]
 8002b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b78:	4b96      	ldr	r3, [pc, #600]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002b7a:	edc3 7a03 	vstr	s15, [r3, #12]

  /*  Re-extract states */
  /*  Compute Jacobian of f, A(x, u) */
  A[0] = 0.0;
 8002b7e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002b82:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
  mnorm = p - x[4];
 8002b8c:	4b92      	ldr	r3, [pc, #584]	; (8002dd8 <updateEKFQuatAtt+0xc30>)
 8002b8e:	ed93 7a00 	vldr	s14, [r3]
 8002b92:	4b90      	ldr	r3, [pc, #576]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002b94:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9c:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002ba0:	edc3 7a00 	vstr	s15, [r3]
  A[7] = -0.5 * mnorm;
 8002ba4:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002bb8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bbc:	edc3 7a07 	vstr	s15, [r3, #28]
  unnamed_idx_2 = q - x[5];
 8002bc0:	4b86      	ldr	r3, [pc, #536]	; (8002ddc <updateEKFQuatAtt+0xc34>)
 8002bc2:	ed93 7a00 	vldr	s14, [r3]
 8002bc6:	4b83      	ldr	r3, [pc, #524]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002bc8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd0:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8002bd4:	edc3 7a00 	vstr	s15, [r3]
  s = -0.5 * unnamed_idx_2;
 8002bd8:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be8:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8002bec:	edc3 7a00 	vstr	s15, [r3]
  A[14] = s;
 8002bf0:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002bf4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bf8:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	639a      	str	r2, [r3, #56]	; 0x38
  a = r - x[6];
 8002c00:	4b77      	ldr	r3, [pc, #476]	; (8002de0 <updateEKFQuatAtt+0xc38>)
 8002c02:	ed93 7a00 	vldr	s14, [r3]
 8002c06:	4b73      	ldr	r3, [pc, #460]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002c08:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c10:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 8002c14:	edc3 7a00 	vstr	s15, [r3]
  A_tmp = -0.5 * a;
 8002c18:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c28:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8002c2c:	edc3 7a00 	vstr	s15, [r3]
  A[21] = A_tmp;
 8002c30:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002c34:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c38:	f507 62c7 	add.w	r2, r7, #1592	; 0x638
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
  A[28] = 0.5 * x[1];
 8002c40:	4b64      	ldr	r3, [pc, #400]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002c42:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c4e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002c52:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c56:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
  A[35] = 0.5 * x[2];
 8002c5a:	4b5e      	ldr	r3, [pc, #376]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002c5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c68:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002c6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c70:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
  A[42] = 0.5 * x[3];
 8002c74:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002c76:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c82:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002c86:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c8a:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
  mnorm *= 0.5;
 8002c8e:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002c92:	edd3 7a00 	vldr	s15, [r3]
 8002c96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c9e:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002ca2:	edc3 7a00 	vstr	s15, [r3]
  A[1] = mnorm;
 8002ca6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002caa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002cae:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
  A[8] = 0.0;
 8002cb6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002cba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
  a *= 0.5;
 8002cc4:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd4:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 8002cd8:	edc3 7a00 	vstr	s15, [r3]
  A[15] = a;
 8002cdc:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002ce0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ce4:	f207 623c 	addw	r2, r7, #1596	; 0x63c
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c
  A[22] = s;
 8002cec:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002cf0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002cf4:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	659a      	str	r2, [r3, #88]	; 0x58
  A[29] = -0.5 * x[0];
 8002cfc:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d0a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002d0e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d12:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
  A[36] = 0.5 * x[3];
 8002d16:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002d18:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d24:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002d28:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d2c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
  A[43] = -0.5 * x[2];
 8002d30:	4b28      	ldr	r3, [pc, #160]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002d32:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d36:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d3e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002d42:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d46:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
  s = 0.5 * unnamed_idx_2;
 8002d4a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8002d5e:	edc3 7a00 	vstr	s15, [r3]
  A[2] = s;
 8002d62:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002d66:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d6a:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	609a      	str	r2, [r3, #8]
  A[9] = A_tmp;
 8002d72:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002d76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d7a:	f507 62c7 	add.w	r2, r7, #1592	; 0x638
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24
  A[16] = 0.0;
 8002d82:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002d86:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
  A[23] = mnorm;
 8002d90:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002d94:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d98:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	65da      	str	r2, [r3, #92]	; 0x5c
  A[30] = -0.5 * x[3];
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002da2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002da6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dae:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002db2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002db6:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
  A[37] = -0.5 * x[0];
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <updateEKFQuatAtt+0xc2c>)
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002dcc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dd0:	e008      	b.n	8002de4 <updateEKFQuatAtt+0xc3c>
 8002dd2:	bf00      	nop
 8002dd4:	20002944 	.word	0x20002944
 8002dd8:	2000290c 	.word	0x2000290c
 8002ddc:	20002910 	.word	0x20002910
 8002de0:	20002914 	.word	0x20002914
 8002de4:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
  A[44] = 0.5 * x[1];
 8002de8:	4ba5      	ldr	r3, [pc, #660]	; (8003080 <updateEKFQuatAtt+0xed8>)
 8002dea:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002df2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002df6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002dfa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dfe:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
  A[3] = a;
 8002e02:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002e06:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e0a:	f207 623c 	addw	r2, r7, #1596	; 0x63c
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	60da      	str	r2, [r3, #12]
  A[10] = s;
 8002e12:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002e16:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e1a:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
  A[17] = -0.5 * (p - x[4]);
 8002e22:	4b98      	ldr	r3, [pc, #608]	; (8003084 <updateEKFQuatAtt+0xedc>)
 8002e24:	ed93 7a00 	vldr	s14, [r3]
 8002e28:	4b95      	ldr	r3, [pc, #596]	; (8003080 <updateEKFQuatAtt+0xed8>)
 8002e2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e32:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002e3e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e42:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
  A[24] = 0.0;
 8002e46:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002e4a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	661a      	str	r2, [r3, #96]	; 0x60
  A[31] = 0.5 * x[2];
 8002e54:	4b8a      	ldr	r3, [pc, #552]	; (8003080 <updateEKFQuatAtt+0xed8>)
 8002e56:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e62:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002e66:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e6a:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
  A[38] = -0.5 * x[1];
 8002e6e:	4b84      	ldr	r3, [pc, #528]	; (8003080 <updateEKFQuatAtt+0xed8>)
 8002e70:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e74:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e7c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002e80:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e84:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
  A[45] = -0.5 * x[0];
 8002e88:	4b7d      	ldr	r3, [pc, #500]	; (8003080 <updateEKFQuatAtt+0xed8>)
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e96:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002e9a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e9e:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
  for (i0 = 0; i0 < 7; i0++) {
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8002ea8:	e031      	b.n	8002f0e <updateEKFQuatAtt+0xd66>
    A[4 + 7 * i0] = 0.0;
 8002eaa:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8002eba:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
    A[5 + 7 * i0] = 0.0;
 8002ec8:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	3305      	adds	r3, #5
 8002ed4:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8002ed8:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    A[6 + 7 * i0] = 0.0;
 8002ee6:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	3306      	adds	r3, #6
 8002ef2:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8002ef6:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
  for (i0 = 0; i0 < 7; i0++) {
 8002f04:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8002f0e:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8002f12:	2b06      	cmp	r3, #6
 8002f14:	ddc9      	ble.n	8002eaa <updateEKFQuatAtt+0xd02>
  }

  /*  Update error covariance matrix */
  for (i0 = 0; i0 < 7; i0++) {
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8002f1c:	e0a6      	b.n	800306c <updateEKFQuatAtt+0xec4>
    for (k = 0; k < 7; k++) {
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8002f24:	e098      	b.n	8003058 <updateEKFQuatAtt+0xeb0>
      iy = i0 + 7 * k;
 8002f26:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 8002f34:	4413      	add	r3, r2
 8002f36:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
      dv1[iy] = 0.0;
 8002f3a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002f3e:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8002f42:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
      mnorm = 0.0;
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8002f58:	6013      	str	r3, [r2, #0]
      unnamed_idx_2 = 0.0;
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8002f62:	6013      	str	r3, [r2, #0]
      for (kBcol = 0; kBcol < 7; kBcol++) {
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 8002f6a:	e054      	b.n	8003016 <updateEKFQuatAtt+0xe6e>
        jA = i0 + 7 * kBcol;
 8002f6c:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
        mnorm += A[jA] * P[kBcol + 7 * k];
 8002f80:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002f84:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8002f88:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	ed93 7a00 	vldr	s14, [r3]
 8002f94:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	1a9a      	subs	r2, r3, r2
 8002f9e:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8002fa2:	4413      	add	r3, r2
 8002fa4:	4a38      	ldr	r2, [pc, #224]	; (8003088 <updateEKFQuatAtt+0xee0>)
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb2:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002fb6:	ed93 7a00 	vldr	s14, [r3]
 8002fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fbe:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002fc2:	edc3 7a00 	vstr	s15, [r3]
        unnamed_idx_2 += P[jA] * A[k + 7 * kBcol];
 8002fc6:	4a30      	ldr	r2, [pc, #192]	; (8003088 <updateEKFQuatAtt+0xee0>)
 8002fc8:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	ed93 7a00 	vldr	s14, [r3]
 8002fd4:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	1a9a      	subs	r2, r3, r2
 8002fde:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8002fe8:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	edd3 7a00 	vldr	s15, [r3]
 8002ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff8:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8002ffc:	ed93 7a00 	vldr	s14, [r3]
 8003000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003004:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8003008:	edc3 7a00 	vstr	s15, [r3]
      for (kBcol = 0; kBcol < 7; kBcol++) {
 800300c:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8003010:	3301      	adds	r3, #1
 8003012:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 8003016:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800301a:	2b06      	cmp	r3, #6
 800301c:	dda6      	ble.n	8002f6c <updateEKFQuatAtt+0xdc4>
      }

      dv1[iy] = unnamed_idx_2;
 800301e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003022:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8003026:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	601a      	str	r2, [r3, #0]
      b_A[iy] = mnorm;
 8003036:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800303a:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800303e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	601a      	str	r2, [r3, #0]
    for (k = 0; k < 7; k++) {
 800304e:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003052:	3301      	adds	r3, #1
 8003054:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003058:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800305c:	2b06      	cmp	r3, #6
 800305e:	f77f af62 	ble.w	8002f26 <updateEKFQuatAtt+0xd7e>
  for (i0 = 0; i0 < 7; i0++) {
 8003062:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003066:	3301      	adds	r3, #1
 8003068:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 800306c:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003070:	2b06      	cmp	r3, #6
 8003072:	f77f af54 	ble.w	8002f1e <updateEKFQuatAtt+0xd76>
    }
  }

  for (i0 = 0; i0 < 49; i0++) {
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 800307c:	e042      	b.n	8003104 <updateEKFQuatAtt+0xf5c>
 800307e:	bf00      	nop
 8003080:	20002944 	.word	0x20002944
 8003084:	2000290c 	.word	0x2000290c
 8003088:	20002960 	.word	0x20002960
    P[i0] += T * ((b_A[i0] + dv1[i0]) + Q[i0]);
 800308c:	4ad6      	ldr	r2, [pc, #856]	; (80033e8 <updateEKFQuatAtt+0x1240>)
 800308e:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	ed93 7a00 	vldr	s14, [r3]
 800309a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800309e:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 80030a2:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	edd3 6a00 	vldr	s13, [r3]
 80030ae:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80030b2:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 80030b6:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80030c6:	4ac9      	ldr	r2, [pc, #804]	; (80033ec <updateEKFQuatAtt+0x1244>)
 80030c8:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	edd3 7a00 	vldr	s15, [r3]
 80030d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80030d8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80030dc:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ec:	4abe      	ldr	r2, [pc, #760]	; (80033e8 <updateEKFQuatAtt+0x1240>)
 80030ee:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	edc3 7a00 	vstr	s15, [r3]
  for (i0 = 0; i0 < 49; i0++) {
 80030fa:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80030fe:	3301      	adds	r3, #1
 8003100:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8003104:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003108:	2b30      	cmp	r3, #48	; 0x30
 800310a:	ddbf      	ble.n	800308c <updateEKFQuatAtt+0xee4>
  }

  /*  Compute magnetic field unit vector estimate in body coordinates from */
  /*  quaternion estimates */
  smag = sin(magDecRad);
 800310c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003110:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	f7fd fa17 	bl	8000548 <__aeabi_f2d>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	ec43 2b10 	vmov	d0, r2, r3
 8003122:	f016 fbfd 	bl	8019920 <sin>
 8003126:	ec53 2b10 	vmov	r2, r3, d0
 800312a:	4610      	mov	r0, r2
 800312c:	4619      	mov	r1, r3
 800312e:	f7fd fd5b 	bl	8000be8 <__aeabi_d2f>
 8003132:	4603      	mov	r3, r0
 8003134:	f207 6234 	addw	r2, r7, #1588	; 0x634
 8003138:	6013      	str	r3, [r2, #0]
  cmag = cos(magDecRad);
 800313a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800313e:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	f7fd fa00 	bl	8000548 <__aeabi_f2d>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	ec43 2b10 	vmov	d0, r2, r3
 8003150:	f016 fb5a 	bl	8019808 <cos>
 8003154:	ec53 2b10 	vmov	r2, r3, d0
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	f7fd fd44 	bl	8000be8 <__aeabi_d2f>
 8003160:	4603      	mov	r3, r0
 8003162:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8003166:	6013      	str	r3, [r2, #0]
  /*  Note: assuming here that u = Va, v = 0, w = 0 */
  /*  Would be good to set u = Va * cos(theta), v = 0, w = Va * sin(theta) */
  /*  But need expressions for cos(theta) as quaternions... */
  /*  Output function z(x, u) = [axhat, ayhat, azhat, mxhat, myhat, mzhat] */
  /*  Jacobian of z, C(x, u)  */
  C[0] = 2.0 * g * x[2];
 8003168:	4ba1      	ldr	r3, [pc, #644]	; (80033f0 <updateEKFQuatAtt+0x1248>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f9eb 	bl	8000548 <__aeabi_f2d>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	f7fd f889 	bl	800028c <__adddf3>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4614      	mov	r4, r2
 8003180:	461d      	mov	r5, r3
 8003182:	4b9c      	ldr	r3, [pc, #624]	; (80033f4 <updateEKFQuatAtt+0x124c>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f9de 	bl	8000548 <__aeabi_f2d>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4620      	mov	r0, r4
 8003192:	4629      	mov	r1, r5
 8003194:	f7fd fa30 	bl	80005f8 <__aeabi_dmul>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4610      	mov	r0, r2
 800319e:	4619      	mov	r1, r3
 80031a0:	f7fd fd22 	bl	8000be8 <__aeabi_d2f>
 80031a4:	4602      	mov	r2, r0
 80031a6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80031aa:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80031ae:	601a      	str	r2, [r3, #0]
  mnorm = -2.0 * g * x[3];
 80031b0:	4b8f      	ldr	r3, [pc, #572]	; (80033f0 <updateEKFQuatAtt+0x1248>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd f9c7 	bl	8000548 <__aeabi_f2d>
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80031c2:	f7fd fa19 	bl	80005f8 <__aeabi_dmul>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4614      	mov	r4, r2
 80031cc:	461d      	mov	r5, r3
 80031ce:	4b89      	ldr	r3, [pc, #548]	; (80033f4 <updateEKFQuatAtt+0x124c>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f9b8 	bl	8000548 <__aeabi_f2d>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4620      	mov	r0, r4
 80031de:	4629      	mov	r1, r5
 80031e0:	f7fd fa0a 	bl	80005f8 <__aeabi_dmul>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	f7fd fcfc 	bl	8000be8 <__aeabi_d2f>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 80031f6:	6013      	str	r3, [r2, #0]
  C[6] = mnorm;
 80031f8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80031fc:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003200:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	619a      	str	r2, [r3, #24]
  C[12] = 2.0 * g * x[0];
 8003208:	4b79      	ldr	r3, [pc, #484]	; (80033f0 <updateEKFQuatAtt+0x1248>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd f99b 	bl	8000548 <__aeabi_f2d>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	f7fd f839 	bl	800028c <__adddf3>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4614      	mov	r4, r2
 8003220:	461d      	mov	r5, r3
 8003222:	4b74      	ldr	r3, [pc, #464]	; (80033f4 <updateEKFQuatAtt+0x124c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd f98e 	bl	8000548 <__aeabi_f2d>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4620      	mov	r0, r4
 8003232:	4629      	mov	r1, r5
 8003234:	f7fd f9e0 	bl	80005f8 <__aeabi_dmul>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	f7fd fcd2 	bl	8000be8 <__aeabi_d2f>
 8003244:	4602      	mov	r2, r0
 8003246:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800324a:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
  unnamed_idx_2 = -2.0 * g * x[1];
 8003250:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <updateEKFQuatAtt+0x1248>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd f977 	bl	8000548 <__aeabi_f2d>
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8003262:	f7fd f9c9 	bl	80005f8 <__aeabi_dmul>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4614      	mov	r4, r2
 800326c:	461d      	mov	r5, r3
 800326e:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <updateEKFQuatAtt+0x124c>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd f968 	bl	8000548 <__aeabi_f2d>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4620      	mov	r0, r4
 800327e:	4629      	mov	r1, r5
 8003280:	f7fd f9ba 	bl	80005f8 <__aeabi_dmul>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	f7fd fcac 	bl	8000be8 <__aeabi_d2f>
 8003290:	4603      	mov	r3, r0
 8003292:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8003296:	6013      	str	r3, [r2, #0]
  C[18] = unnamed_idx_2;
 8003298:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800329c:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80032a0:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	649a      	str	r2, [r3, #72]	; 0x48
  C[24] = 0.0;
 80032a8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80032ac:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	661a      	str	r2, [r3, #96]	; 0x60
  C[30] = 0.0;
 80032b6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80032ba:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	679a      	str	r2, [r3, #120]	; 0x78
  C[36] = 0.0;
 80032c4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80032c8:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  C[1] = unnamed_idx_2;
 80032d4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80032d8:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80032dc:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	605a      	str	r2, [r3, #4]
  C[7] = -2.0 * g * x[0];
 80032e4:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <updateEKFQuatAtt+0x1248>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f92d 	bl	8000548 <__aeabi_f2d>
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80032f6:	f7fd f97f 	bl	80005f8 <__aeabi_dmul>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4614      	mov	r4, r2
 8003300:	461d      	mov	r5, r3
 8003302:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <updateEKFQuatAtt+0x124c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd f91e 	bl	8000548 <__aeabi_f2d>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4620      	mov	r0, r4
 8003312:	4629      	mov	r1, r5
 8003314:	f7fd f970 	bl	80005f8 <__aeabi_dmul>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	f7fd fc62 	bl	8000be8 <__aeabi_d2f>
 8003324:	4602      	mov	r2, r0
 8003326:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800332a:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 800332e:	61da      	str	r2, [r3, #28]
  C[13] = mnorm;
 8003330:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003334:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003338:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	635a      	str	r2, [r3, #52]	; 0x34
  C[19] = -2.0 * g * x[2];
 8003340:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <updateEKFQuatAtt+0x1248>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd f8ff 	bl	8000548 <__aeabi_f2d>
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8003352:	f7fd f951 	bl	80005f8 <__aeabi_dmul>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4614      	mov	r4, r2
 800335c:	461d      	mov	r5, r3
 800335e:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <updateEKFQuatAtt+0x124c>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd f8f0 	bl	8000548 <__aeabi_f2d>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4620      	mov	r0, r4
 800336e:	4629      	mov	r1, r5
 8003370:	f7fd f942 	bl	80005f8 <__aeabi_dmul>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f7fd fc34 	bl	8000be8 <__aeabi_d2f>
 8003380:	4602      	mov	r2, r0
 8003382:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003386:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 800338a:	64da      	str	r2, [r3, #76]	; 0x4c
  C[25] = 0.0;
 800338c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003390:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	665a      	str	r2, [r3, #100]	; 0x64
  C[31] = 0.0;
 800339a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800339e:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	67da      	str	r2, [r3, #124]	; 0x7c
  C[37] = -Va;
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <updateEKFQuatAtt+0x1250>)
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	eef1 7a67 	vneg.f32	s15, s15
 80033b2:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80033b6:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80033ba:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
  C[2] = 0.0;
 80033be:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80033c2:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
  C[8] = 4.0 * g * x[1];
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <updateEKFQuatAtt+0x1248>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd f8b9 	bl	8000548 <__aeabi_f2d>
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <updateEKFQuatAtt+0x1254>)
 80033dc:	f7fd f90c 	bl	80005f8 <__aeabi_dmul>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4614      	mov	r4, r2
 80033e6:	e00b      	b.n	8003400 <updateEKFQuatAtt+0x1258>
 80033e8:	20002960 	.word	0x20002960
 80033ec:	20002a24 	.word	0x20002a24
 80033f0:	20002b78 	.word	0x20002b78
 80033f4:	20002944 	.word	0x20002944
 80033f8:	20002930 	.word	0x20002930
 80033fc:	40100000 	.word	0x40100000
 8003400:	461d      	mov	r5, r3
 8003402:	4bd9      	ldr	r3, [pc, #868]	; (8003768 <updateEKFQuatAtt+0x15c0>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd f89e 	bl	8000548 <__aeabi_f2d>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4620      	mov	r0, r4
 8003412:	4629      	mov	r1, r5
 8003414:	f7fd f8f0 	bl	80005f8 <__aeabi_dmul>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	f7fd fbe2 	bl	8000be8 <__aeabi_d2f>
 8003424:	4602      	mov	r2, r0
 8003426:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800342a:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 800342e:	621a      	str	r2, [r3, #32]
  C[14] = 4.0 * g * x[2];
 8003430:	4bce      	ldr	r3, [pc, #824]	; (800376c <updateEKFQuatAtt+0x15c4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd f887 	bl	8000548 <__aeabi_f2d>
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	4bcc      	ldr	r3, [pc, #816]	; (8003770 <updateEKFQuatAtt+0x15c8>)
 8003440:	f7fd f8da 	bl	80005f8 <__aeabi_dmul>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4614      	mov	r4, r2
 800344a:	461d      	mov	r5, r3
 800344c:	4bc6      	ldr	r3, [pc, #792]	; (8003768 <updateEKFQuatAtt+0x15c0>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd f879 	bl	8000548 <__aeabi_f2d>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4620      	mov	r0, r4
 800345c:	4629      	mov	r1, r5
 800345e:	f7fd f8cb 	bl	80005f8 <__aeabi_dmul>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	f7fd fbbd 	bl	8000be8 <__aeabi_d2f>
 800346e:	4602      	mov	r2, r0
 8003470:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003474:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003478:	639a      	str	r2, [r3, #56]	; 0x38
  C[20] = 0.0;
 800347a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800347e:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	651a      	str	r2, [r3, #80]	; 0x50
  C[26] = 0.0;
 8003488:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800348c:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	669a      	str	r2, [r3, #104]	; 0x68
  C[32] = Va;
 8003496:	4bb7      	ldr	r3, [pc, #732]	; (8003774 <updateEKFQuatAtt+0x15cc>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800349e:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80034a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  C[38] = 0.0;
 80034a6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80034aa:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  mnorm = 2.0 * x[3] * smag;
 80034b6:	4bac      	ldr	r3, [pc, #688]	; (8003768 <updateEKFQuatAtt+0x15c0>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd f844 	bl	8000548 <__aeabi_f2d>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	f7fc fee2 	bl	800028c <__adddf3>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4614      	mov	r4, r2
 80034ce:	461d      	mov	r5, r3
 80034d0:	f207 6334 	addw	r3, r7, #1588	; 0x634
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	f7fd f837 	bl	8000548 <__aeabi_f2d>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4620      	mov	r0, r4
 80034e0:	4629      	mov	r1, r5
 80034e2:	f7fd f889 	bl	80005f8 <__aeabi_dmul>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	f7fd fb7b 	bl	8000be8 <__aeabi_d2f>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 80034f8:	6013      	str	r3, [r2, #0]
  C[3] = mnorm;
 80034fa:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80034fe:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003502:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	60da      	str	r2, [r3, #12]
  unnamed_idx_2 = 2.0 * x[2] * smag;
 800350a:	4b97      	ldr	r3, [pc, #604]	; (8003768 <updateEKFQuatAtt+0x15c0>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd f81a 	bl	8000548 <__aeabi_f2d>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	f7fc feb8 	bl	800028c <__adddf3>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4614      	mov	r4, r2
 8003522:	461d      	mov	r5, r3
 8003524:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	f7fd f80d 	bl	8000548 <__aeabi_f2d>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4620      	mov	r0, r4
 8003534:	4629      	mov	r1, r5
 8003536:	f7fd f85f 	bl	80005f8 <__aeabi_dmul>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f7fd fb51 	bl	8000be8 <__aeabi_d2f>
 8003546:	4603      	mov	r3, r0
 8003548:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 800354c:	6013      	str	r3, [r2, #0]
  C[9] = unnamed_idx_2;
 800354e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003552:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003556:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24
  s = 2.0 * x[1] * smag;
 800355e:	4b82      	ldr	r3, [pc, #520]	; (8003768 <updateEKFQuatAtt+0x15c0>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fc fff0 	bl	8000548 <__aeabi_f2d>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	f7fc fe8e 	bl	800028c <__adddf3>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4614      	mov	r4, r2
 8003576:	461d      	mov	r5, r3
 8003578:	f207 6334 	addw	r3, r7, #1588	; 0x634
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	f7fc ffe3 	bl	8000548 <__aeabi_f2d>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4620      	mov	r0, r4
 8003588:	4629      	mov	r1, r5
 800358a:	f7fd f835 	bl	80005f8 <__aeabi_dmul>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	f7fd fb27 	bl	8000be8 <__aeabi_d2f>
 800359a:	4603      	mov	r3, r0
 800359c:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80035a0:	6013      	str	r3, [r2, #0]
  C[15] = s - 4.0 * x[2] * cmag;
 80035a2:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	f7fc ffce 	bl	8000548 <__aeabi_f2d>
 80035ac:	4604      	mov	r4, r0
 80035ae:	460d      	mov	r5, r1
 80035b0:	4b6d      	ldr	r3, [pc, #436]	; (8003768 <updateEKFQuatAtt+0x15c0>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fc ffc7 	bl	8000548 <__aeabi_f2d>
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	4b6c      	ldr	r3, [pc, #432]	; (8003770 <updateEKFQuatAtt+0x15c8>)
 80035c0:	f7fd f81a 	bl	80005f8 <__aeabi_dmul>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4690      	mov	r8, r2
 80035ca:	4699      	mov	r9, r3
 80035cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	f7fc ffb9 	bl	8000548 <__aeabi_f2d>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4640      	mov	r0, r8
 80035dc:	4649      	mov	r1, r9
 80035de:	f7fd f80b 	bl	80005f8 <__aeabi_dmul>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4620      	mov	r0, r4
 80035e8:	4629      	mov	r1, r5
 80035ea:	f7fc fe4d 	bl	8000288 <__aeabi_dsub>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	f7fd faf7 	bl	8000be8 <__aeabi_d2f>
 80035fa:	4602      	mov	r2, r0
 80035fc:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003600:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003604:	63da      	str	r2, [r3, #60]	; 0x3c
  A_tmp = 2.0 * x[0] * smag;
 8003606:	4b58      	ldr	r3, [pc, #352]	; (8003768 <updateEKFQuatAtt+0x15c0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fc ff9c 	bl	8000548 <__aeabi_f2d>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	f7fc fe3a 	bl	800028c <__adddf3>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4614      	mov	r4, r2
 800361e:	461d      	mov	r5, r3
 8003620:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	f7fc ff8f 	bl	8000548 <__aeabi_f2d>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4620      	mov	r0, r4
 8003630:	4629      	mov	r1, r5
 8003632:	f7fc ffe1 	bl	80005f8 <__aeabi_dmul>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	f7fd fad3 	bl	8000be8 <__aeabi_d2f>
 8003642:	4603      	mov	r3, r0
 8003644:	f507 62c7 	add.w	r2, r7, #1592	; 0x638
 8003648:	6013      	str	r3, [r2, #0]
  C[21] = A_tmp - 4.0 * x[3] * cmag;
 800364a:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	f7fc ff7a 	bl	8000548 <__aeabi_f2d>
 8003654:	4604      	mov	r4, r0
 8003656:	460d      	mov	r5, r1
 8003658:	4b43      	ldr	r3, [pc, #268]	; (8003768 <updateEKFQuatAtt+0x15c0>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fc ff73 	bl	8000548 <__aeabi_f2d>
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	4b42      	ldr	r3, [pc, #264]	; (8003770 <updateEKFQuatAtt+0x15c8>)
 8003668:	f7fc ffc6 	bl	80005f8 <__aeabi_dmul>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4690      	mov	r8, r2
 8003672:	4699      	mov	r9, r3
 8003674:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	f7fc ff65 	bl	8000548 <__aeabi_f2d>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4640      	mov	r0, r8
 8003684:	4649      	mov	r1, r9
 8003686:	f7fc ffb7 	bl	80005f8 <__aeabi_dmul>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4620      	mov	r0, r4
 8003690:	4629      	mov	r1, r5
 8003692:	f7fc fdf9 	bl	8000288 <__aeabi_dsub>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	f7fd faa3 	bl	8000be8 <__aeabi_d2f>
 80036a2:	4602      	mov	r2, r0
 80036a4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80036a8:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
  C[27] = 0.0;
 80036ae:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80036b2:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	66da      	str	r2, [r3, #108]	; 0x6c
  C[33] = 0.0;
 80036bc:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80036c0:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  C[39] = 0.0;
 80036cc:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80036d0:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  C[4] = -2.0 * x[3] * cmag;
 80036dc:	4b22      	ldr	r3, [pc, #136]	; (8003768 <updateEKFQuatAtt+0x15c0>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fc ff31 	bl	8000548 <__aeabi_f2d>
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80036ee:	f7fc ff83 	bl	80005f8 <__aeabi_dmul>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4614      	mov	r4, r2
 80036f8:	461d      	mov	r5, r3
 80036fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	f7fc ff22 	bl	8000548 <__aeabi_f2d>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4620      	mov	r0, r4
 800370a:	4629      	mov	r1, r5
 800370c:	f7fc ff74 	bl	80005f8 <__aeabi_dmul>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	f7fd fa66 	bl	8000be8 <__aeabi_d2f>
 800371c:	4602      	mov	r2, r0
 800371e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003722:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003726:	611a      	str	r2, [r3, #16]
  a = 2.0 * x[2] * cmag;
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <updateEKFQuatAtt+0x15c0>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4618      	mov	r0, r3
 800372e:	f7fc ff0b 	bl	8000548 <__aeabi_f2d>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	f7fc fda9 	bl	800028c <__adddf3>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4614      	mov	r4, r2
 8003740:	461d      	mov	r5, r3
 8003742:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	f7fc fefe 	bl	8000548 <__aeabi_f2d>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4620      	mov	r0, r4
 8003752:	4629      	mov	r1, r5
 8003754:	f7fc ff50 	bl	80005f8 <__aeabi_dmul>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	f7fd fa42 	bl	8000be8 <__aeabi_d2f>
 8003764:	e008      	b.n	8003778 <updateEKFQuatAtt+0x15d0>
 8003766:	bf00      	nop
 8003768:	20002944 	.word	0x20002944
 800376c:	20002b78 	.word	0x20002b78
 8003770:	40100000 	.word	0x40100000
 8003774:	20002930 	.word	0x20002930
 8003778:	4603      	mov	r3, r0
 800377a:	f207 623c 	addw	r2, r7, #1596	; 0x63c
 800377e:	6013      	str	r3, [r2, #0]
  C[10] = a - 4.0 * x[1] * smag;
 8003780:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	f7fc fedf 	bl	8000548 <__aeabi_f2d>
 800378a:	4604      	mov	r4, r0
 800378c:	460d      	mov	r5, r1
 800378e:	4bce      	ldr	r3, [pc, #824]	; (8003ac8 <updateEKFQuatAtt+0x1920>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fc fed8 	bl	8000548 <__aeabi_f2d>
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	4bcb      	ldr	r3, [pc, #812]	; (8003acc <updateEKFQuatAtt+0x1924>)
 800379e:	f7fc ff2b 	bl	80005f8 <__aeabi_dmul>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4690      	mov	r8, r2
 80037a8:	4699      	mov	r9, r3
 80037aa:	f207 6334 	addw	r3, r7, #1588	; 0x634
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	f7fc feca 	bl	8000548 <__aeabi_f2d>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4640      	mov	r0, r8
 80037ba:	4649      	mov	r1, r9
 80037bc:	f7fc ff1c 	bl	80005f8 <__aeabi_dmul>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4620      	mov	r0, r4
 80037c6:	4629      	mov	r1, r5
 80037c8:	f7fc fd5e 	bl	8000288 <__aeabi_dsub>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	f7fd fa08 	bl	8000be8 <__aeabi_d2f>
 80037d8:	4602      	mov	r2, r0
 80037da:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80037de:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
  C_tmp = 2.0 * x[1] * cmag;
 80037e4:	4bb8      	ldr	r3, [pc, #736]	; (8003ac8 <updateEKFQuatAtt+0x1920>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fc fead 	bl	8000548 <__aeabi_f2d>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	f7fc fd4b 	bl	800028c <__adddf3>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4614      	mov	r4, r2
 80037fc:	461d      	mov	r5, r3
 80037fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	f7fc fea0 	bl	8000548 <__aeabi_f2d>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4620      	mov	r0, r4
 800380e:	4629      	mov	r1, r5
 8003810:	f7fc fef2 	bl	80005f8 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4610      	mov	r0, r2
 800381a:	4619      	mov	r1, r3
 800381c:	f7fd f9e4 	bl	8000be8 <__aeabi_d2f>
 8003820:	4603      	mov	r3, r0
 8003822:	f207 622c 	addw	r2, r7, #1580	; 0x62c
 8003826:	6013      	str	r3, [r2, #0]
  C[16] = C_tmp;
 8003828:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800382c:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003830:	f207 622c 	addw	r2, r7, #1580	; 0x62c
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
  C[22] = -2.0 * x[0] * cmag - 4.0 * x[3] * smag;
 8003838:	4ba3      	ldr	r3, [pc, #652]	; (8003ac8 <updateEKFQuatAtt+0x1920>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fc fe83 	bl	8000548 <__aeabi_f2d>
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800384a:	f7fc fed5 	bl	80005f8 <__aeabi_dmul>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4614      	mov	r4, r2
 8003854:	461d      	mov	r5, r3
 8003856:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	f7fc fe74 	bl	8000548 <__aeabi_f2d>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4620      	mov	r0, r4
 8003866:	4629      	mov	r1, r5
 8003868:	f7fc fec6 	bl	80005f8 <__aeabi_dmul>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4614      	mov	r4, r2
 8003872:	461d      	mov	r5, r3
 8003874:	4b94      	ldr	r3, [pc, #592]	; (8003ac8 <updateEKFQuatAtt+0x1920>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fc fe65 	bl	8000548 <__aeabi_f2d>
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	4b92      	ldr	r3, [pc, #584]	; (8003acc <updateEKFQuatAtt+0x1924>)
 8003884:	f7fc feb8 	bl	80005f8 <__aeabi_dmul>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4690      	mov	r8, r2
 800388e:	4699      	mov	r9, r3
 8003890:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	f7fc fe57 	bl	8000548 <__aeabi_f2d>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4640      	mov	r0, r8
 80038a0:	4649      	mov	r1, r9
 80038a2:	f7fc fea9 	bl	80005f8 <__aeabi_dmul>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4620      	mov	r0, r4
 80038ac:	4629      	mov	r1, r5
 80038ae:	f7fc fceb 	bl	8000288 <__aeabi_dsub>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	f7fd f995 	bl	8000be8 <__aeabi_d2f>
 80038be:	4602      	mov	r2, r0
 80038c0:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80038c4:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80038c8:	659a      	str	r2, [r3, #88]	; 0x58
  C[28] = 0.0;
 80038ca:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80038ce:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	671a      	str	r2, [r3, #112]	; 0x70
  C[34] = 0.0;
 80038d8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80038dc:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  C[40] = 0.0;
 80038e8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80038ec:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  C[5] = a - s;
 80038f8:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 80038fc:	ed93 7a00 	vldr	s14, [r3]
 8003900:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8003904:	edd3 7a00 	vldr	s15, [r3]
 8003908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800390c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003910:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003914:	edc3 7a05 	vstr	s15, [r3, #20]
  C[11] = 2.0 * x[3] * cmag - A_tmp;
 8003918:	4b6b      	ldr	r3, [pc, #428]	; (8003ac8 <updateEKFQuatAtt+0x1920>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fc fe13 	bl	8000548 <__aeabi_f2d>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	f7fc fcb1 	bl	800028c <__adddf3>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4614      	mov	r4, r2
 8003930:	461d      	mov	r5, r3
 8003932:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	f7fc fe06 	bl	8000548 <__aeabi_f2d>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4620      	mov	r0, r4
 8003942:	4629      	mov	r1, r5
 8003944:	f7fc fe58 	bl	80005f8 <__aeabi_dmul>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4614      	mov	r4, r2
 800394e:	461d      	mov	r5, r3
 8003950:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	f7fc fdf7 	bl	8000548 <__aeabi_f2d>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4620      	mov	r0, r4
 8003960:	4629      	mov	r1, r5
 8003962:	f7fc fc91 	bl	8000288 <__aeabi_dsub>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4610      	mov	r0, r2
 800396c:	4619      	mov	r1, r3
 800396e:	f7fd f93b 	bl	8000be8 <__aeabi_d2f>
 8003972:	4602      	mov	r2, r0
 8003974:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003978:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c
  C[17] = 2.0 * x[0] * cmag + mnorm;
 800397e:	4b52      	ldr	r3, [pc, #328]	; (8003ac8 <updateEKFQuatAtt+0x1920>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fc fde0 	bl	8000548 <__aeabi_f2d>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	f7fc fc7e 	bl	800028c <__adddf3>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4614      	mov	r4, r2
 8003996:	461d      	mov	r5, r3
 8003998:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	f7fc fdd3 	bl	8000548 <__aeabi_f2d>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4620      	mov	r0, r4
 80039a8:	4629      	mov	r1, r5
 80039aa:	f7fc fe25 	bl	80005f8 <__aeabi_dmul>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4614      	mov	r4, r2
 80039b4:	461d      	mov	r5, r3
 80039b6:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	f7fc fdc4 	bl	8000548 <__aeabi_f2d>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4620      	mov	r0, r4
 80039c6:	4629      	mov	r1, r5
 80039c8:	f7fc fc60 	bl	800028c <__adddf3>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	f7fd f908 	bl	8000be8 <__aeabi_d2f>
 80039d8:	4602      	mov	r2, r0
 80039da:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80039de:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80039e2:	645a      	str	r2, [r3, #68]	; 0x44
  C[23] = C_tmp + unnamed_idx_2;
 80039e4:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 80039e8:	ed93 7a00 	vldr	s14, [r3]
 80039ec:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80039f0:	edd3 7a00 	vldr	s15, [r3]
 80039f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80039fc:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003a00:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
  C[29] = 0.0;
 8003a04:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003a08:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	675a      	str	r2, [r3, #116]	; 0x74
  C[35] = 0.0;
 8003a12:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003a16:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  C[41] = 0.0;
 8003a22:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003a26:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /*  Kalman gain */
  for (i0 = 0; i0 < 6; i0++) {
 8003a32:	2300      	movs	r3, #0
 8003a34:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8003a38:	e031      	b.n	8003a9e <updateEKFQuatAtt+0x18f6>
    for (k = 0; k < 7; k++) {
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003a40:	e024      	b.n	8003a8c <updateEKFQuatAtt+0x18e4>
      b_tmp[k + 7 * i0] = C[i0 + 6 * k];
 8003a42:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003a54:	18d0      	adds	r0, r2, r3
 8003a56:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	1a9a      	subs	r2, r3, r2
 8003a60:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003a64:	4413      	add	r3, r2
 8003a66:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8003a6a:	f5a2 7162 	sub.w	r1, r2, #904	; 0x388
 8003a6e:	0082      	lsls	r2, r0, #2
 8003a70:	440a      	add	r2, r1
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8003a78:	f5a1 6186 	sub.w	r1, r1, #1072	; 0x430
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	601a      	str	r2, [r3, #0]
    for (k = 0; k < 7; k++) {
 8003a82:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003a86:	3301      	adds	r3, #1
 8003a88:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003a8c:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	ddd6      	ble.n	8003a42 <updateEKFQuatAtt+0x189a>
  for (i0 = 0; i0 < 6; i0++) {
 8003a94:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8003a9e:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003aa2:	2b05      	cmp	r3, #5
 8003aa4:	ddc9      	ble.n	8003a3a <updateEKFQuatAtt+0x1892>
    }
  }

  for (i0 = 0; i0 < 7; i0++) {
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8003aac:	e062      	b.n	8003b74 <updateEKFQuatAtt+0x19cc>
    for (k = 0; k < 6; k++) {
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003ab4:	e055      	b.n	8003b62 <updateEKFQuatAtt+0x19ba>
      mnorm = 0.0;
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8003abe:	6013      	str	r3, [r2, #0]
      for (iy = 0; iy < 7; iy++) {
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8003ac6:	e031      	b.n	8003b2c <updateEKFQuatAtt+0x1984>
 8003ac8:	20002944 	.word	0x20002944
 8003acc:	40100000 	.word	0x40100000
        mnorm += P[i0 + 7 * iy] * b_tmp[iy + 7 * k];
 8003ad0:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	1a9a      	subs	r2, r3, r2
 8003ada:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003ade:	4413      	add	r3, r2
 8003ae0:	4ab8      	ldr	r2, [pc, #736]	; (8003dc4 <updateEKFQuatAtt+0x1c1c>)
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	ed93 7a00 	vldr	s14, [r3]
 8003aea:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8003aee:	4613      	mov	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	1a9a      	subs	r2, r3, r2
 8003af4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003af8:	4413      	add	r3, r2
 8003afa:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8003afe:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	edd3 7a00 	vldr	s15, [r3]
 8003b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0e:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003b12:	ed93 7a00 	vldr	s14, [r3]
 8003b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b1a:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003b1e:	edc3 7a00 	vstr	s15, [r3]
      for (iy = 0; iy < 7; iy++) {
 8003b22:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003b26:	3301      	adds	r3, #1
 8003b28:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8003b2c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003b30:	2b06      	cmp	r3, #6
 8003b32:	ddcd      	ble.n	8003ad0 <updateEKFQuatAtt+0x1928>
      }

      K[i0 + 7 * k] = mnorm;
 8003b34:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	1a9a      	subs	r2, r3, r2
 8003b3e:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003b42:	4413      	add	r3, r2
 8003b44:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8003b48:	f5a2 629b 	sub.w	r2, r2, #1240	; 0x4d8
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	601a      	str	r2, [r3, #0]
    for (k = 0; k < 6; k++) {
 8003b58:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003b62:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003b66:	2b05      	cmp	r3, #5
 8003b68:	dda5      	ble.n	8003ab6 <updateEKFQuatAtt+0x190e>
  for (i0 = 0; i0 < 7; i0++) {
 8003b6a:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003b6e:	3301      	adds	r3, #1
 8003b70:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8003b74:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003b78:	2b06      	cmp	r3, #6
 8003b7a:	dd98      	ble.n	8003aae <updateEKFQuatAtt+0x1906>
    }
  }

  for (i0 = 0; i0 < 6; i0++) {
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8003b82:	e0e1      	b.n	8003d48 <updateEKFQuatAtt+0x1ba0>
    for (k = 0; k < 7; k++) {
 8003b84:	2300      	movs	r3, #0
 8003b86:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003b8a:	e055      	b.n	8003c38 <updateEKFQuatAtt+0x1a90>
      mnorm = 0.0;
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8003b94:	6013      	str	r3, [r2, #0]
      for (iy = 0; iy < 7; iy++) {
 8003b96:	2300      	movs	r3, #0
 8003b98:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8003b9c:	e02f      	b.n	8003bfe <updateEKFQuatAtt+0x1a56>
        mnorm += C[i0 + 6 * iy] * P[iy + 7 * k];
 8003b9e:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	461a      	mov	r2, r3
 8003bac:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8003bb6:	f5a2 7262 	sub.w	r2, r2, #904	; 0x388
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	ed93 7a00 	vldr	s14, [r3]
 8003bc2:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	1a9a      	subs	r2, r3, r2
 8003bcc:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003bd0:	4413      	add	r3, r2
 8003bd2:	4a7c      	ldr	r2, [pc, #496]	; (8003dc4 <updateEKFQuatAtt+0x1c1c>)
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	edd3 7a00 	vldr	s15, [r3]
 8003bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be0:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003be4:	ed93 7a00 	vldr	s14, [r3]
 8003be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bec:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003bf0:	edc3 7a00 	vstr	s15, [r3]
      for (iy = 0; iy < 7; iy++) {
 8003bf4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8003bfe:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003c02:	2b06      	cmp	r3, #6
 8003c04:	ddcb      	ble.n	8003b9e <updateEKFQuatAtt+0x19f6>
      }

      b_C[i0 + 6 * k] = mnorm;
 8003c06:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	461a      	mov	r2, r3
 8003c14:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003c18:	4413      	add	r3, r2
 8003c1a:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8003c1e:	f5a2 62b1 	sub.w	r2, r2, #1416	; 0x588
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	601a      	str	r2, [r3, #0]
    for (k = 0; k < 7; k++) {
 8003c2e:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003c32:	3301      	adds	r3, #1
 8003c34:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003c38:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003c3c:	2b06      	cmp	r3, #6
 8003c3e:	dda5      	ble.n	8003b8c <updateEKFQuatAtt+0x19e4>
    }

    for (k = 0; k < 6; k++) {
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003c46:	e067      	b.n	8003d18 <updateEKFQuatAtt+0x1b70>
      mnorm = 0.0;
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8003c50:	6013      	str	r3, [r2, #0]
      for (iy = 0; iy < 7; iy++) {
 8003c52:	2300      	movs	r3, #0
 8003c54:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8003c58:	e032      	b.n	8003cc0 <updateEKFQuatAtt+0x1b18>
        mnorm += b_C[i0 + 6 * iy] * b_tmp[iy + 7 * k];
 8003c5a:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 8003c5e:	4613      	mov	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	461a      	mov	r2, r3
 8003c68:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8003c72:	f5a2 62b1 	sub.w	r2, r2, #1416	; 0x588
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	ed93 7a00 	vldr	s14, [r3]
 8003c7e:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	1a9a      	subs	r2, r3, r2
 8003c88:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8003c92:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	edd3 7a00 	vldr	s15, [r3]
 8003c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca2:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003ca6:	ed93 7a00 	vldr	s14, [r3]
 8003caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cae:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003cb2:	edc3 7a00 	vstr	s15, [r3]
      for (iy = 0; iy < 7; iy++) {
 8003cb6:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003cba:	3301      	adds	r3, #1
 8003cbc:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8003cc0:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	ddc8      	ble.n	8003c5a <updateEKFQuatAtt+0x1ab2>
      }

      iy = i0 + 6 * k;
 8003cc8:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8003ccc:	4613      	mov	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4413      	add	r3, r2
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003cda:	4413      	add	r3, r2
 8003cdc:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
      B[iy] = mnorm + R[iy];
 8003ce0:	4a39      	ldr	r2, [pc, #228]	; (8003dc8 <updateEKFQuatAtt+0x1c20>)
 8003ce2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	ed93 7a00 	vldr	s14, [r3]
 8003cee:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003cf2:	edd3 7a00 	vldr	s15, [r3]
 8003cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cfa:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003cfe:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 8003d02:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0; k < 6; k++) {
 8003d0e:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003d12:	3301      	adds	r3, #1
 8003d14:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003d18:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003d1c:	2b05      	cmp	r3, #5
 8003d1e:	dd93      	ble.n	8003c48 <updateEKFQuatAtt+0x1aa0>
    }

    ipiv[i0] = (signed char)(1 + i0);
 8003d20:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	3301      	adds	r3, #1
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	b259      	sxtb	r1, r3
 8003d2c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003d30:	f5a3 629c 	sub.w	r2, r3, #1248	; 0x4e0
 8003d34:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003d38:	4413      	add	r3, r2
 8003d3a:	460a      	mov	r2, r1
 8003d3c:	701a      	strb	r2, [r3, #0]
  for (i0 = 0; i0 < 6; i0++) {
 8003d3e:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003d42:	3301      	adds	r3, #1
 8003d44:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8003d48:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003d4c:	2b05      	cmp	r3, #5
 8003d4e:	f77f af19 	ble.w	8003b84 <updateEKFQuatAtt+0x19dc>
  }

  for (j = 0; j < 5; j++) {
 8003d52:	2300      	movs	r3, #0
 8003d54:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 8003d58:	e1b6      	b.n	80040c8 <updateEKFQuatAtt+0x1f20>
    jA = j * 7;
 8003d5a:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
    jj = j * 7;
 8003d68:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
    jp1j = jA + 2;
 8003d76:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
    n = 6 - j;
 8003d80:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8003d84:	f1c3 0306 	rsb	r3, r3, #6
 8003d88:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
    kBcol = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
    ix = jA;
 8003d92:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8003d96:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
    mnorm = fabs(B[jA]);
 8003d9a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003d9e:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 8003da2:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	edd3 7a00 	vldr	s15, [r3]
 8003dae:	eef0 7ae7 	vabs.f32	s15, s15
 8003db2:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003db6:	edc3 7a00 	vstr	s15, [r3]
    for (k = 2; k <= n; k++) {
 8003dba:	2302      	movs	r3, #2
 8003dbc:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003dc0:	e036      	b.n	8003e30 <updateEKFQuatAtt+0x1c88>
 8003dc2:	bf00      	nop
 8003dc4:	20002960 	.word	0x20002960
 8003dc8:	20002ae8 	.word	0x20002ae8
      ix++;
 8003dcc:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
      s = fabs(B[ix]);
 8003dd6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003dda:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 8003dde:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	edd3 7a00 	vldr	s15, [r3]
 8003dea:	eef0 7ae7 	vabs.f32	s15, s15
 8003dee:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8003df2:	edc3 7a00 	vstr	s15, [r3]
      if (s > mnorm) {
 8003df6:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8003dfa:	ed93 7a00 	vldr	s14, [r3]
 8003dfe:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003e02:	edd3 7a00 	vldr	s15, [r3]
 8003e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0e:	dd0a      	ble.n	8003e26 <updateEKFQuatAtt+0x1c7e>
        kBcol = k - 1;
 8003e10:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003e14:	3b01      	subs	r3, #1
 8003e16:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
        mnorm = s;
 8003e1a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8003e24:	6013      	str	r3, [r2, #0]
    for (k = 2; k <= n; k++) {
 8003e26:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003e30:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8003e34:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	ddc7      	ble.n	8003dcc <updateEKFQuatAtt+0x1c24>
      }
    }

    if (B[jj + kBcol] != 0.0) {
 8003e3c:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8003e40:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8003e44:	4413      	add	r3, r2
 8003e46:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8003e4a:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	edd3 7a00 	vldr	s15, [r3]
 8003e56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5e:	f000 8099 	beq.w	8003f94 <updateEKFQuatAtt+0x1dec>
      if (kBcol != 0) {
 8003e62:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d05a      	beq.n	8003f20 <updateEKFQuatAtt+0x1d78>
        iy = j + kBcol;
 8003e6a:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 8003e6e:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8003e72:	4413      	add	r3, r2
 8003e74:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
        ipiv[j] = (signed char)(iy + 1);
 8003e78:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	b259      	sxtb	r1, r3
 8003e84:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003e88:	f5a3 629c 	sub.w	r2, r3, #1248	; 0x4e0
 8003e8c:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8003e90:	4413      	add	r3, r2
 8003e92:	460a      	mov	r2, r1
 8003e94:	701a      	strb	r2, [r3, #0]
        ix = j;
 8003e96:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8003e9a:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
        for (k = 0; k < 6; k++) {
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003ea4:	e038      	b.n	8003f18 <updateEKFQuatAtt+0x1d70>
          mnorm = B[ix];
 8003ea6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003eaa:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 8003eae:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8003ebc:	6013      	str	r3, [r2, #0]
          B[ix] = B[iy];
 8003ebe:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003ec2:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 8003ec6:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003ed4:	f5a3 61c3 	sub.w	r1, r3, #1560	; 0x618
 8003ed8:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	601a      	str	r2, [r3, #0]
          B[iy] = mnorm;
 8003ee2:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003ee6:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 8003eea:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	601a      	str	r2, [r3, #0]
          ix += 6;
 8003efa:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8003efe:	3306      	adds	r3, #6
 8003f00:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
          iy += 6;
 8003f04:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003f08:	3306      	adds	r3, #6
 8003f0a:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
        for (k = 0; k < 6; k++) {
 8003f0e:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003f12:	3301      	adds	r3, #1
 8003f14:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8003f18:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8003f1c:	2b05      	cmp	r3, #5
 8003f1e:	ddc2      	ble.n	8003ea6 <updateEKFQuatAtt+0x1cfe>
        }
      }

      i0 = (jj - j) + 6;
 8003f20:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8003f24:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	3306      	adds	r3, #6
 8003f2c:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
      for (n = jp1j; n <= i0; n++) {
 8003f30:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8003f34:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 8003f38:	e026      	b.n	8003f88 <updateEKFQuatAtt+0x1de0>
        B[n - 1] /= B[jj];
 8003f3a:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8003f44:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	edd3 6a00 	vldr	s13, [r3]
 8003f50:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003f54:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 8003f58:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	ed93 7a00 	vldr	s14, [r3]
 8003f64:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8003f72:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	edc3 7a00 	vstr	s15, [r3]
      for (n = jp1j; n <= i0; n++) {
 8003f7e:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8003f82:	3301      	adds	r3, #1
 8003f84:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 8003f88:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8003f8c:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8003f90:	429a      	cmp	r2, r3
 8003f92:	ddd2      	ble.n	8003f3a <updateEKFQuatAtt+0x1d92>
      }
    }

    n = 4 - j;
 8003f94:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8003f98:	f1c3 0304 	rsb	r3, r3, #4
 8003f9c:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
    iy = jA + 6;
 8003fa0:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8003fa4:	3306      	adds	r3, #6
 8003fa6:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
    jA = jj;
 8003faa:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8003fae:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
    for (kBcol = 0; kBcol <= n; kBcol++) {
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 8003fb8:	e07a      	b.n	80040b0 <updateEKFQuatAtt+0x1f08>
      mnorm = B[iy];
 8003fba:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003fbe:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 8003fc2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8003fd0:	6013      	str	r3, [r2, #0]
      if (B[iy] != 0.0) {
 8003fd2:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003fd6:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 8003fda:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	edd3 7a00 	vldr	s15, [r3]
 8003fe6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fee:	d050      	beq.n	8004092 <updateEKFQuatAtt+0x1eea>
        ix = jj + 1;
 8003ff0:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
        i0 = jA + 8;
 8003ffa:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8003ffe:	3308      	adds	r3, #8
 8004000:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
        k = (jA - j) + 12;
 8004004:	f8d7 2654 	ldr.w	r2, [r7, #1620]	; 0x654
 8004008:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	330c      	adds	r3, #12
 8004010:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
        for (jp1j = i0; jp1j <= k; jp1j++) {
 8004014:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8004018:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 800401c:	e033      	b.n	8004086 <updateEKFQuatAtt+0x1ede>
          B[jp1j - 1] += B[ix] * -mnorm;
 800401e:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8004022:	3b01      	subs	r3, #1
 8004024:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8004028:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	ed93 7a00 	vldr	s14, [r3]
 8004034:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004038:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 800403c:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	edd3 6a00 	vldr	s13, [r3]
 8004048:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800404c:	edd3 7a00 	vldr	s15, [r3]
 8004050:	eef1 7a67 	vneg.f32	s15, s15
 8004054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004058:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 800405c:	3b01      	subs	r3, #1
 800405e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004062:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8004066:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	edc3 7a00 	vstr	s15, [r3]
          ix++;
 8004072:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8004076:	3301      	adds	r3, #1
 8004078:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
        for (jp1j = i0; jp1j <= k; jp1j++) {
 800407c:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8004080:	3301      	adds	r3, #1
 8004082:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8004086:	f8d7 264c 	ldr.w	r2, [r7, #1612]	; 0x64c
 800408a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800408e:	429a      	cmp	r2, r3
 8004090:	ddc5      	ble.n	800401e <updateEKFQuatAtt+0x1e76>
        }
      }

      iy += 6;
 8004092:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8004096:	3306      	adds	r3, #6
 8004098:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
      jA += 6;
 800409c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80040a0:	3306      	adds	r3, #6
 80040a2:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
    for (kBcol = 0; kBcol <= n; kBcol++) {
 80040a6:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 80040aa:	3301      	adds	r3, #1
 80040ac:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 80040b0:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 80040b4:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 80040b8:	429a      	cmp	r2, r3
 80040ba:	f77f af7e 	ble.w	8003fba <updateEKFQuatAtt+0x1e12>
  for (j = 0; j < 5; j++) {
 80040be:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80040c2:	3301      	adds	r3, #1
 80040c4:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 80040c8:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	f77f ae44 	ble.w	8003d5a <updateEKFQuatAtt+0x1bb2>
    }
  }

  for (j = 0; j < 6; j++) {
 80040d2:	2300      	movs	r3, #0
 80040d4:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 80040d8:	e0c4      	b.n	8004264 <updateEKFQuatAtt+0x20bc>
    jA = 7 * j - 1;
 80040da:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	3b01      	subs	r3, #1
 80040e6:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
    iy = 6 * j;
 80040ea:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 80040ee:	4613      	mov	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	4413      	add	r3, r2
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
    for (k = 0; k < j; k++) {
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8004100:	e061      	b.n	80041c6 <updateEKFQuatAtt+0x201e>
      kBcol = 7 * k;
 8004102:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8004106:	4613      	mov	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
      mnorm = B[k + iy];
 8004110:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8004114:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8004118:	4413      	add	r3, r2
 800411a:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 800411e:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 800412c:	6013      	str	r3, [r2, #0]
      if (mnorm != 0.0) {
 800412e:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004132:	edd3 7a00 	vldr	s15, [r3]
 8004136:	eef5 7a40 	vcmp.f32	s15, #0.0
 800413a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413e:	d03d      	beq.n	80041bc <updateEKFQuatAtt+0x2014>
        for (n = 0; n < 7; n++) {
 8004140:	2300      	movs	r3, #0
 8004142:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 8004146:	e035      	b.n	80041b4 <updateEKFQuatAtt+0x200c>
          jp1j = (n + jA) + 1;
 8004148:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 800414c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8004150:	4413      	add	r3, r2
 8004152:	3301      	adds	r3, #1
 8004154:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
          K[jp1j] -= mnorm * K[n + kBcol];
 8004158:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800415c:	f5a3 629b 	sub.w	r2, r3, #1240	; 0x4d8
 8004160:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	ed93 7a00 	vldr	s14, [r3]
 800416c:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8004170:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8004174:	4413      	add	r3, r2
 8004176:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 800417a:	f5a2 629b 	sub.w	r2, r2, #1240	; 0x4d8
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	edd3 6a00 	vldr	s13, [r3]
 8004186:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800418a:	edd3 7a00 	vldr	s15, [r3]
 800418e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004196:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800419a:	f5a3 629b 	sub.w	r2, r3, #1240	; 0x4d8
 800419e:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	edc3 7a00 	vstr	s15, [r3]
        for (n = 0; n < 7; n++) {
 80041aa:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 80041ae:	3301      	adds	r3, #1
 80041b0:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 80041b4:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 80041b8:	2b06      	cmp	r3, #6
 80041ba:	ddc5      	ble.n	8004148 <updateEKFQuatAtt+0x1fa0>
    for (k = 0; k < j; k++) {
 80041bc:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80041c0:	3301      	adds	r3, #1
 80041c2:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 80041c6:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 80041ca:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80041ce:	429a      	cmp	r2, r3
 80041d0:	db97      	blt.n	8004102 <updateEKFQuatAtt+0x1f5a>
        }
      }
    }

    mnorm = 1.0 / B[j + iy];
 80041d2:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 80041d6:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80041da:	4413      	add	r3, r2
 80041dc:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80041e0:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	ed93 7a00 	vldr	s14, [r3]
 80041ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041f4:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80041f8:	edc3 7a00 	vstr	s15, [r3]
    for (n = 0; n < 7; n++) {
 80041fc:	2300      	movs	r3, #0
 80041fe:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 8004202:	e026      	b.n	8004252 <updateEKFQuatAtt+0x20aa>
      jp1j = (n + jA) + 1;
 8004204:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8004208:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800420c:	4413      	add	r3, r2
 800420e:	3301      	adds	r3, #1
 8004210:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
      K[jp1j] *= mnorm;
 8004214:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004218:	f5a3 629b 	sub.w	r2, r3, #1240	; 0x4d8
 800421c:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	ed93 7a00 	vldr	s14, [r3]
 8004228:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800422c:	edd3 7a00 	vldr	s15, [r3]
 8004230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004234:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004238:	f5a3 629b 	sub.w	r2, r3, #1240	; 0x4d8
 800423c:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	edc3 7a00 	vstr	s15, [r3]
    for (n = 0; n < 7; n++) {
 8004248:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 800424c:	3301      	adds	r3, #1
 800424e:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 8004252:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8004256:	2b06      	cmp	r3, #6
 8004258:	ddd4      	ble.n	8004204 <updateEKFQuatAtt+0x205c>
  for (j = 0; j < 6; j++) {
 800425a:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800425e:	3301      	adds	r3, #1
 8004260:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 8004264:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8004268:	2b05      	cmp	r3, #5
 800426a:	f77f af36 	ble.w	80040da <updateEKFQuatAtt+0x1f32>
    }
  }

  for (j = 5; j >= 0; j--) {
 800426e:	2305      	movs	r3, #5
 8004270:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 8004274:	e086      	b.n	8004384 <updateEKFQuatAtt+0x21dc>
    jA = 7 * j - 1;
 8004276:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 800427a:	4613      	mov	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	3b01      	subs	r3, #1
 8004282:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
    iy = 6 * j - 1;
 8004286:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 800428a:	4613      	mov	r3, r2
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	4413      	add	r3, r2
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	3b01      	subs	r3, #1
 8004294:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
    i0 = j + 2;
 8004298:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800429c:	3302      	adds	r3, #2
 800429e:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
    for (k = i0; k < 7; k++) {
 80042a2:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80042a6:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 80042aa:	e062      	b.n	8004372 <updateEKFQuatAtt+0x21ca>
      kBcol = 7 * (k - 1);
 80042ac:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80042b0:	1e5a      	subs	r2, r3, #1
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
      mnorm = B[k + iy];
 80042bc:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 80042c0:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80042c4:	4413      	add	r3, r2
 80042c6:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80042ca:	f5a2 62c3 	sub.w	r2, r2, #1560	; 0x618
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 80042d8:	6013      	str	r3, [r2, #0]
      if (mnorm != 0.0) {
 80042da:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80042de:	edd3 7a00 	vldr	s15, [r3]
 80042e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ea:	d03d      	beq.n	8004368 <updateEKFQuatAtt+0x21c0>
        for (n = 0; n < 7; n++) {
 80042ec:	2300      	movs	r3, #0
 80042ee:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 80042f2:	e035      	b.n	8004360 <updateEKFQuatAtt+0x21b8>
          jp1j = (n + jA) + 1;
 80042f4:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 80042f8:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80042fc:	4413      	add	r3, r2
 80042fe:	3301      	adds	r3, #1
 8004300:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
          K[jp1j] -= mnorm * K[n + kBcol];
 8004304:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004308:	f5a3 629b 	sub.w	r2, r3, #1240	; 0x4d8
 800430c:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	ed93 7a00 	vldr	s14, [r3]
 8004318:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 800431c:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8004320:	4413      	add	r3, r2
 8004322:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8004326:	f5a2 629b 	sub.w	r2, r2, #1240	; 0x4d8
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	edd3 6a00 	vldr	s13, [r3]
 8004332:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004336:	edd3 7a00 	vldr	s15, [r3]
 800433a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800433e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004342:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004346:	f5a3 629b 	sub.w	r2, r3, #1240	; 0x4d8
 800434a:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	edc3 7a00 	vstr	s15, [r3]
        for (n = 0; n < 7; n++) {
 8004356:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 800435a:	3301      	adds	r3, #1
 800435c:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 8004360:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8004364:	2b06      	cmp	r3, #6
 8004366:	ddc5      	ble.n	80042f4 <updateEKFQuatAtt+0x214c>
    for (k = i0; k < 7; k++) {
 8004368:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800436c:	3301      	adds	r3, #1
 800436e:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8004372:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8004376:	2b06      	cmp	r3, #6
 8004378:	dd98      	ble.n	80042ac <updateEKFQuatAtt+0x2104>
  for (j = 5; j >= 0; j--) {
 800437a:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800437e:	3b01      	subs	r3, #1
 8004380:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 8004384:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8004388:	2b00      	cmp	r3, #0
 800438a:	f6bf af74 	bge.w	8004276 <updateEKFQuatAtt+0x20ce>
        }
      }
    }
  }

  for (iy = 4; iy >= 0; iy--) {
 800438e:	2304      	movs	r3, #4
 8004390:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8004394:	e066      	b.n	8004464 <updateEKFQuatAtt+0x22bc>
    if (ipiv[iy] != iy + 1) {
 8004396:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800439a:	f5a3 629c 	sub.w	r2, r3, #1248	; 0x4e0
 800439e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80043a2:	4413      	add	r3, r2
 80043a4:	f993 3000 	ldrsb.w	r3, [r3]
 80043a8:	461a      	mov	r2, r3
 80043aa:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80043ae:	3301      	adds	r3, #1
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d052      	beq.n	800445a <updateEKFQuatAtt+0x22b2>
      for (kBcol = 0; kBcol < 7; kBcol++) {
 80043b4:	2300      	movs	r3, #0
 80043b6:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 80043ba:	e04a      	b.n	8004452 <updateEKFQuatAtt+0x22aa>
        jA = kBcol + 7 * iy;
 80043bc:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 80043c0:	4613      	mov	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 80043ca:	4413      	add	r3, r2
 80043cc:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
        mnorm = K[jA];
 80043d0:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80043d4:	f5a3 629b 	sub.w	r2, r3, #1240	; 0x4d8
 80043d8:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 80043e6:	6013      	str	r3, [r2, #0]
        jp1j = kBcol + 7 * (ipiv[iy] - 1);
 80043e8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80043ec:	f5a3 629c 	sub.w	r2, r3, #1248	; 0x4e0
 80043f0:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80043f4:	4413      	add	r3, r2
 80043f6:	f993 3000 	ldrsb.w	r3, [r3]
 80043fa:	1e5a      	subs	r2, r3, #1
 80043fc:	4613      	mov	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	f8d7 2658 	ldr.w	r2, [r7, #1624]	; 0x658
 8004406:	4413      	add	r3, r2
 8004408:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
        K[jA] = K[jp1j];
 800440c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004410:	f5a3 629b 	sub.w	r2, r3, #1240	; 0x4d8
 8004414:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004422:	f5a3 619b 	sub.w	r1, r3, #1240	; 0x4d8
 8004426:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	601a      	str	r2, [r3, #0]
        K[jp1j] = mnorm;
 8004430:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004434:	f5a3 629b 	sub.w	r2, r3, #1240	; 0x4d8
 8004438:	f8d7 364c 	ldr.w	r3, [r7, #1612]	; 0x64c
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8004444:	6812      	ldr	r2, [r2, #0]
 8004446:	601a      	str	r2, [r3, #0]
      for (kBcol = 0; kBcol < 7; kBcol++) {
 8004448:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800444c:	3301      	adds	r3, #1
 800444e:	f8c7 3658 	str.w	r3, [r7, #1624]	; 0x658
 8004452:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 8004456:	2b06      	cmp	r3, #6
 8004458:	ddb0      	ble.n	80043bc <updateEKFQuatAtt+0x2214>
  for (iy = 4; iy >= 0; iy--) {
 800445a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800445e:	3b01      	subs	r3, #1
 8004460:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8004464:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8004468:	2b00      	cmp	r3, #0
 800446a:	da94      	bge.n	8004396 <updateEKFQuatAtt+0x21ee>
      }
    }
  }

  /*  Update error covariance matrix */
  memset(&A[0], 0, 49U * sizeof(float));
 800446c:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8004470:	22c4      	movs	r2, #196	; 0xc4
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f011 fe53 	bl	8016120 <memset>
  for (k = 0; k < 7; k++) {
 800447a:	2300      	movs	r3, #0
 800447c:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8004480:	e010      	b.n	80044a4 <updateEKFQuatAtt+0x22fc>
    A[k + 7 * k] = 1.0;
 8004482:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 800448c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004498:	601a      	str	r2, [r3, #0]
  for (k = 0; k < 7; k++) {
 800449a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800449e:	3301      	adds	r3, #1
 80044a0:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 80044a4:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80044a8:	2b06      	cmp	r3, #6
 80044aa:	ddea      	ble.n	8004482 <updateEKFQuatAtt+0x22da>
  }

  for (i0 = 0; i0 < 7; i0++) {
 80044ac:	2300      	movs	r3, #0
 80044ae:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 80044b2:	e0cf      	b.n	8004654 <updateEKFQuatAtt+0x24ac>
    for (k = 0; k < 7; k++) {
 80044b4:	2300      	movs	r3, #0
 80044b6:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 80044ba:	e068      	b.n	800458e <updateEKFQuatAtt+0x23e6>
      mnorm = 0.0;
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 80044c4:	6013      	str	r3, [r2, #0]
      for (iy = 0; iy < 6; iy++) {
 80044c6:	2300      	movs	r3, #0
 80044c8:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 80044cc:	e032      	b.n	8004534 <updateEKFQuatAtt+0x238c>
        mnorm += K[i0 + 7 * iy] * C[iy + 6 * k];
 80044ce:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 80044d2:	4613      	mov	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	1a9a      	subs	r2, r3, r2
 80044d8:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80044dc:	4413      	add	r3, r2
 80044de:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80044e2:	f5a2 629b 	sub.w	r2, r2, #1240	; 0x4d8
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	ed93 7a00 	vldr	s14, [r3]
 80044ee:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 80044f2:	4613      	mov	r3, r2
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	4413      	add	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	461a      	mov	r2, r3
 80044fc:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8004500:	4413      	add	r3, r2
 8004502:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8004506:	f5a2 7262 	sub.w	r2, r2, #904	; 0x388
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	edd3 7a00 	vldr	s15, [r3]
 8004512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004516:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800451a:	ed93 7a00 	vldr	s14, [r3]
 800451e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004522:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004526:	edc3 7a00 	vstr	s15, [r3]
      for (iy = 0; iy < 6; iy++) {
 800452a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800452e:	3301      	adds	r3, #1
 8004530:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8004534:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8004538:	2b05      	cmp	r3, #5
 800453a:	ddc8      	ble.n	80044ce <updateEKFQuatAtt+0x2326>
      }

      iy = i0 + 7 * k;
 800453c:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8004540:	4613      	mov	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	f8d7 2668 	ldr.w	r2, [r7, #1640]	; 0x668
 800454a:	4413      	add	r3, r2
 800454c:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
      b_A[iy] = A[iy] - mnorm;
 8004550:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004554:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 8004558:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	ed93 7a00 	vldr	s14, [r3]
 8004564:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004568:	edd3 7a00 	vldr	s15, [r3]
 800456c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004570:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004574:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8004578:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0; k < 7; k++) {
 8004584:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8004588:	3301      	adds	r3, #1
 800458a:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 800458e:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8004592:	2b06      	cmp	r3, #6
 8004594:	dd92      	ble.n	80044bc <updateEKFQuatAtt+0x2314>
    }

    for (k = 0; k < 7; k++) {
 8004596:	2300      	movs	r3, #0
 8004598:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 800459c:	e051      	b.n	8004642 <updateEKFQuatAtt+0x249a>
      mnorm = 0.0;
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 80045a6:	6013      	str	r3, [r2, #0]
      for (iy = 0; iy < 7; iy++) {
 80045a8:	2300      	movs	r3, #0
 80045aa:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 80045ae:	e02d      	b.n	800460c <updateEKFQuatAtt+0x2464>
        mnorm += b_A[i0 + 7 * iy] * P[iy + 7 * k];
 80045b0:	f8d7 2664 	ldr.w	r2, [r7, #1636]	; 0x664
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	1a9a      	subs	r2, r3, r2
 80045ba:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80045be:	4413      	add	r3, r2
 80045c0:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80045c4:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	ed93 7a00 	vldr	s14, [r3]
 80045d0:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	1a9a      	subs	r2, r3, r2
 80045da:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80045de:	4413      	add	r3, r2
 80045e0:	4ad3      	ldr	r2, [pc, #844]	; (8004930 <updateEKFQuatAtt+0x2788>)
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	edd3 7a00 	vldr	s15, [r3]
 80045ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ee:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80045f2:	ed93 7a00 	vldr	s14, [r3]
 80045f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045fa:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80045fe:	edc3 7a00 	vstr	s15, [r3]
      for (iy = 0; iy < 7; iy++) {
 8004602:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8004606:	3301      	adds	r3, #1
 8004608:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 800460c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8004610:	2b06      	cmp	r3, #6
 8004612:	ddcd      	ble.n	80045b0 <updateEKFQuatAtt+0x2408>
      }

      A[i0 + 7 * k] = mnorm;
 8004614:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	1a9a      	subs	r2, r3, r2
 800461e:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8004622:	4413      	add	r3, r2
 8004624:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8004628:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	601a      	str	r2, [r3, #0]
    for (k = 0; k < 7; k++) {
 8004638:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800463c:	3301      	adds	r3, #1
 800463e:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8004642:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8004646:	2b06      	cmp	r3, #6
 8004648:	dda9      	ble.n	800459e <updateEKFQuatAtt+0x23f6>
  for (i0 = 0; i0 < 7; i0++) {
 800464a:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800464e:	3301      	adds	r3, #1
 8004650:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8004654:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8004658:	2b06      	cmp	r3, #6
 800465a:	f77f af2b 	ble.w	80044b4 <updateEKFQuatAtt+0x230c>
    }
  }

  memcpy(&P[0], &A[0], 49U * sizeof(float));
 800465e:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8004662:	22c4      	movs	r2, #196	; 0xc4
 8004664:	4619      	mov	r1, r3
 8004666:	48b2      	ldr	r0, [pc, #712]	; (8004930 <updateEKFQuatAtt+0x2788>)
 8004668:	f011 fd92 	bl	8016190 <memcpy>

  /*  Update state estimate using measurements (accelerometer and */
  /*  magnetometer) */
  dv2[0] = ax;
 800466c:	4bb1      	ldr	r3, [pc, #708]	; (8004934 <updateEKFQuatAtt+0x278c>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004674:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8004678:	601a      	str	r2, [r3, #0]
  dv2[1] = ay;
 800467a:	4baf      	ldr	r3, [pc, #700]	; (8004938 <updateEKFQuatAtt+0x2790>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004682:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8004686:	605a      	str	r2, [r3, #4]
  dv2[2] = az;
 8004688:	4bac      	ldr	r3, [pc, #688]	; (800493c <updateEKFQuatAtt+0x2794>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004690:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8004694:	609a      	str	r2, [r3, #8]
  dv2[3] = mx;
 8004696:	4baa      	ldr	r3, [pc, #680]	; (8004940 <updateEKFQuatAtt+0x2798>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800469e:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 80046a2:	60da      	str	r2, [r3, #12]
  dv2[4] = my;
 80046a4:	4ba7      	ldr	r3, [pc, #668]	; (8004944 <updateEKFQuatAtt+0x279c>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80046ac:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 80046b0:	611a      	str	r2, [r3, #16]
  dv2[5] = mz;
 80046b2:	4ba5      	ldr	r3, [pc, #660]	; (8004948 <updateEKFQuatAtt+0x27a0>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80046ba:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 80046be:	615a      	str	r2, [r3, #20]
  dv3[0] = -2.0 * g * (x[1] * x[3] - x[2] * x[0]);
 80046c0:	4ba2      	ldr	r3, [pc, #648]	; (800494c <updateEKFQuatAtt+0x27a4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fb ff3f 	bl	8000548 <__aeabi_f2d>
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80046d2:	f7fb ff91 	bl	80005f8 <__aeabi_dmul>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4614      	mov	r4, r2
 80046dc:	461d      	mov	r5, r3
 80046de:	4b9c      	ldr	r3, [pc, #624]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 80046e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80046e4:	4b9a      	ldr	r3, [pc, #616]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 80046e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80046ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046ee:	4b98      	ldr	r3, [pc, #608]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 80046f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80046f4:	4b96      	ldr	r3, [pc, #600]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 80046f6:	edd3 7a00 	vldr	s15, [r3]
 80046fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004702:	ee17 0a90 	vmov	r0, s15
 8004706:	f7fb ff1f 	bl	8000548 <__aeabi_f2d>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4620      	mov	r0, r4
 8004710:	4629      	mov	r1, r5
 8004712:	f7fb ff71 	bl	80005f8 <__aeabi_dmul>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4610      	mov	r0, r2
 800471c:	4619      	mov	r1, r3
 800471e:	f7fc fa63 	bl	8000be8 <__aeabi_d2f>
 8004722:	4602      	mov	r2, r0
 8004724:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004728:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 800472c:	601a      	str	r2, [r3, #0]
  dv3[1] = Va * (r - x[6]) - 2.0 * g * (x[2] * x[3] + x[1] * x[0]);
 800472e:	4b89      	ldr	r3, [pc, #548]	; (8004954 <updateEKFQuatAtt+0x27ac>)
 8004730:	ed93 7a00 	vldr	s14, [r3]
 8004734:	4b86      	ldr	r3, [pc, #536]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 8004736:	edd3 7a06 	vldr	s15, [r3, #24]
 800473a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800473e:	4b86      	ldr	r3, [pc, #536]	; (8004958 <updateEKFQuatAtt+0x27b0>)
 8004740:	edd3 7a00 	vldr	s15, [r3]
 8004744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004748:	ee17 0a90 	vmov	r0, s15
 800474c:	f7fb fefc 	bl	8000548 <__aeabi_f2d>
 8004750:	4604      	mov	r4, r0
 8004752:	460d      	mov	r5, r1
 8004754:	4b7d      	ldr	r3, [pc, #500]	; (800494c <updateEKFQuatAtt+0x27a4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fb fef5 	bl	8000548 <__aeabi_f2d>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	f7fb fd93 	bl	800028c <__adddf3>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4690      	mov	r8, r2
 800476c:	4699      	mov	r9, r3
 800476e:	4b78      	ldr	r3, [pc, #480]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 8004770:	ed93 7a02 	vldr	s14, [r3, #8]
 8004774:	4b76      	ldr	r3, [pc, #472]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 8004776:	edd3 7a03 	vldr	s15, [r3, #12]
 800477a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800477e:	4b74      	ldr	r3, [pc, #464]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 8004780:	edd3 6a01 	vldr	s13, [r3, #4]
 8004784:	4b72      	ldr	r3, [pc, #456]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 8004786:	edd3 7a00 	vldr	s15, [r3]
 800478a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800478e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004792:	ee17 0a90 	vmov	r0, s15
 8004796:	f7fb fed7 	bl	8000548 <__aeabi_f2d>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4640      	mov	r0, r8
 80047a0:	4649      	mov	r1, r9
 80047a2:	f7fb ff29 	bl	80005f8 <__aeabi_dmul>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4620      	mov	r0, r4
 80047ac:	4629      	mov	r1, r5
 80047ae:	f7fb fd6b 	bl	8000288 <__aeabi_dsub>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4610      	mov	r0, r2
 80047b8:	4619      	mov	r1, r3
 80047ba:	f7fc fa15 	bl	8000be8 <__aeabi_d2f>
 80047be:	4602      	mov	r2, r0
 80047c0:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80047c4:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 80047c8:	605a      	str	r2, [r3, #4]
  dv3[2] = -Va * (q - x[5]) - g * (1.0 - 2.0 * (x[1] * x[1] + x[2] * x[2]));
 80047ca:	4b63      	ldr	r3, [pc, #396]	; (8004958 <updateEKFQuatAtt+0x27b0>)
 80047cc:	edd3 7a00 	vldr	s15, [r3]
 80047d0:	eeb1 7a67 	vneg.f32	s14, s15
 80047d4:	4b61      	ldr	r3, [pc, #388]	; (800495c <updateEKFQuatAtt+0x27b4>)
 80047d6:	edd3 6a00 	vldr	s13, [r3]
 80047da:	4b5d      	ldr	r3, [pc, #372]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 80047dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80047e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80047e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e8:	ee17 0a90 	vmov	r0, s15
 80047ec:	f7fb feac 	bl	8000548 <__aeabi_f2d>
 80047f0:	4604      	mov	r4, r0
 80047f2:	460d      	mov	r5, r1
 80047f4:	4b55      	ldr	r3, [pc, #340]	; (800494c <updateEKFQuatAtt+0x27a4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fb fea5 	bl	8000548 <__aeabi_f2d>
 80047fe:	4680      	mov	r8, r0
 8004800:	4689      	mov	r9, r1
 8004802:	4b53      	ldr	r3, [pc, #332]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 8004804:	ed93 7a01 	vldr	s14, [r3, #4]
 8004808:	4b51      	ldr	r3, [pc, #324]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 800480a:	edd3 7a01 	vldr	s15, [r3, #4]
 800480e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004812:	4b4f      	ldr	r3, [pc, #316]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 8004814:	edd3 6a02 	vldr	s13, [r3, #8]
 8004818:	4b4d      	ldr	r3, [pc, #308]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 800481a:	edd3 7a02 	vldr	s15, [r3, #8]
 800481e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004826:	ee17 0a90 	vmov	r0, s15
 800482a:	f7fb fe8d 	bl	8000548 <__aeabi_f2d>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	f7fb fd2b 	bl	800028c <__adddf3>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	f04f 0000 	mov.w	r0, #0
 800483e:	4948      	ldr	r1, [pc, #288]	; (8004960 <updateEKFQuatAtt+0x27b8>)
 8004840:	f7fb fd22 	bl	8000288 <__aeabi_dsub>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4640      	mov	r0, r8
 800484a:	4649      	mov	r1, r9
 800484c:	f7fb fed4 	bl	80005f8 <__aeabi_dmul>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4620      	mov	r0, r4
 8004856:	4629      	mov	r1, r5
 8004858:	f7fb fd16 	bl	8000288 <__aeabi_dsub>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
 8004864:	f7fc f9c0 	bl	8000be8 <__aeabi_d2f>
 8004868:	4602      	mov	r2, r0
 800486a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800486e:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8004872:	609a      	str	r2, [r3, #8]
  mnorm = 2.0 * x[0] * x[3];
 8004874:	4b36      	ldr	r3, [pc, #216]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f7fb fe65 	bl	8000548 <__aeabi_f2d>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	f7fb fd03 	bl	800028c <__adddf3>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4614      	mov	r4, r2
 800488c:	461d      	mov	r5, r3
 800488e:	4b30      	ldr	r3, [pc, #192]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fb fe58 	bl	8000548 <__aeabi_f2d>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4620      	mov	r0, r4
 800489e:	4629      	mov	r1, r5
 80048a0:	f7fb feaa 	bl	80005f8 <__aeabi_dmul>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4610      	mov	r0, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	f7fc f99c 	bl	8000be8 <__aeabi_d2f>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 80048b6:	6013      	str	r3, [r2, #0]
  unnamed_idx_2 = 2.0 * x[1] * x[2];
 80048b8:	4b25      	ldr	r3, [pc, #148]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fb fe43 	bl	8000548 <__aeabi_f2d>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	f7fb fce1 	bl	800028c <__adddf3>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4614      	mov	r4, r2
 80048d0:	461d      	mov	r5, r3
 80048d2:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fb fe36 	bl	8000548 <__aeabi_f2d>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4620      	mov	r0, r4
 80048e2:	4629      	mov	r1, r5
 80048e4:	f7fb fe88 	bl	80005f8 <__aeabi_dmul>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4610      	mov	r0, r2
 80048ee:	4619      	mov	r1, r3
 80048f0:	f7fc f97a 	bl	8000be8 <__aeabi_d2f>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 80048fa:	6013      	str	r3, [r2, #0]
  s = 2.0 * x[3] * x[3];
 80048fc:	4b14      	ldr	r3, [pc, #80]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4618      	mov	r0, r3
 8004902:	f7fb fe21 	bl	8000548 <__aeabi_f2d>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	f7fb fcbf 	bl	800028c <__adddf3>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4614      	mov	r4, r2
 8004914:	461d      	mov	r5, r3
 8004916:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <updateEKFQuatAtt+0x27a8>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fb fe14 	bl	8000548 <__aeabi_f2d>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4620      	mov	r0, r4
 8004926:	4629      	mov	r1, r5
 8004928:	f7fb fe66 	bl	80005f8 <__aeabi_dmul>
 800492c:	4602      	mov	r2, r0
 800492e:	e019      	b.n	8004964 <updateEKFQuatAtt+0x27bc>
 8004930:	20002960 	.word	0x20002960
 8004934:	20002918 	.word	0x20002918
 8004938:	2000291c 	.word	0x2000291c
 800493c:	20002920 	.word	0x20002920
 8004940:	20002924 	.word	0x20002924
 8004944:	20002928 	.word	0x20002928
 8004948:	2000292c 	.word	0x2000292c
 800494c:	20002b78 	.word	0x20002b78
 8004950:	20002944 	.word	0x20002944
 8004954:	20002914 	.word	0x20002914
 8004958:	20002930 	.word	0x20002930
 800495c:	20002910 	.word	0x20002910
 8004960:	3ff00000 	.word	0x3ff00000
 8004964:	460b      	mov	r3, r1
 8004966:	4610      	mov	r0, r2
 8004968:	4619      	mov	r1, r3
 800496a:	f7fc f93d 	bl	8000be8 <__aeabi_d2f>
 800496e:	4603      	mov	r3, r0
 8004970:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8004974:	6013      	str	r3, [r2, #0]
  dv3[3] = smag * (mnorm + unnamed_idx_2) - cmag * ((2.0 * x[2] * x[2] + s) -
 8004976:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800497a:	ed93 7a00 	vldr	s14, [r3]
 800497e:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8004982:	edd3 7a00 	vldr	s15, [r3]
 8004986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800498a:	f207 6334 	addw	r3, r7, #1588	; 0x634
 800498e:	edd3 7a00 	vldr	s15, [r3]
 8004992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004996:	ee17 0a90 	vmov	r0, s15
 800499a:	f7fb fdd5 	bl	8000548 <__aeabi_f2d>
 800499e:	4604      	mov	r4, r0
 80049a0:	460d      	mov	r5, r1
 80049a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	f7fb fdce 	bl	8000548 <__aeabi_f2d>
 80049ac:	4680      	mov	r8, r0
 80049ae:	4689      	mov	r9, r1
 80049b0:	4bc6      	ldr	r3, [pc, #792]	; (8004ccc <updateEKFQuatAtt+0x2b24>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fb fdc7 	bl	8000548 <__aeabi_f2d>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	f7fb fc65 	bl	800028c <__adddf3>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4692      	mov	sl, r2
 80049c8:	469b      	mov	fp, r3
 80049ca:	4bc0      	ldr	r3, [pc, #768]	; (8004ccc <updateEKFQuatAtt+0x2b24>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fb fdba 	bl	8000548 <__aeabi_f2d>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4650      	mov	r0, sl
 80049da:	4659      	mov	r1, fp
 80049dc:	f7fb fe0c 	bl	80005f8 <__aeabi_dmul>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4692      	mov	sl, r2
 80049e6:	469b      	mov	fp, r3
 80049e8:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	f7fb fdab 	bl	8000548 <__aeabi_f2d>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4650      	mov	r0, sl
 80049f8:	4659      	mov	r1, fp
 80049fa:	f7fb fc47 	bl	800028c <__adddf3>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	4bb1      	ldr	r3, [pc, #708]	; (8004cd0 <updateEKFQuatAtt+0x2b28>)
 8004a0c:	f7fb fc3c 	bl	8000288 <__aeabi_dsub>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4640      	mov	r0, r8
 8004a16:	4649      	mov	r1, r9
 8004a18:	f7fb fdee 	bl	80005f8 <__aeabi_dmul>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4620      	mov	r0, r4
 8004a22:	4629      	mov	r1, r5
 8004a24:	f7fb fc30 	bl	8000288 <__aeabi_dsub>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4619      	mov	r1, r3
 8004a30:	f7fc f8da 	bl	8000be8 <__aeabi_d2f>
 8004a34:	4602      	mov	r2, r0
 8004a36:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004a3a:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8004a3e:	60da      	str	r2, [r3, #12]
    1.0);
  dv3[4] = -cmag * (mnorm - unnamed_idx_2) - smag * ((2.0 * x[1] * x[1] + s) -
 8004a40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8004a44:	edd3 7a00 	vldr	s15, [r3]
 8004a48:	eeb1 7a67 	vneg.f32	s14, s15
 8004a4c:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004a50:	edd3 6a00 	vldr	s13, [r3]
 8004a54:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8004a58:	edd3 7a00 	vldr	s15, [r3]
 8004a5c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a64:	ee17 0a90 	vmov	r0, s15
 8004a68:	f7fb fd6e 	bl	8000548 <__aeabi_f2d>
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	460d      	mov	r5, r1
 8004a70:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	f7fb fd67 	bl	8000548 <__aeabi_f2d>
 8004a7a:	4680      	mov	r8, r0
 8004a7c:	4689      	mov	r9, r1
 8004a7e:	4b93      	ldr	r3, [pc, #588]	; (8004ccc <updateEKFQuatAtt+0x2b24>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fb fd60 	bl	8000548 <__aeabi_f2d>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	f7fb fbfe 	bl	800028c <__adddf3>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4692      	mov	sl, r2
 8004a96:	469b      	mov	fp, r3
 8004a98:	4b8c      	ldr	r3, [pc, #560]	; (8004ccc <updateEKFQuatAtt+0x2b24>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fb fd53 	bl	8000548 <__aeabi_f2d>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4650      	mov	r0, sl
 8004aa8:	4659      	mov	r1, fp
 8004aaa:	f7fb fda5 	bl	80005f8 <__aeabi_dmul>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4692      	mov	sl, r2
 8004ab4:	469b      	mov	fp, r3
 8004ab6:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	f7fb fd44 	bl	8000548 <__aeabi_f2d>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4650      	mov	r0, sl
 8004ac6:	4659      	mov	r1, fp
 8004ac8:	f7fb fbe0 	bl	800028c <__adddf3>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	4b7d      	ldr	r3, [pc, #500]	; (8004cd0 <updateEKFQuatAtt+0x2b28>)
 8004ada:	f7fb fbd5 	bl	8000288 <__aeabi_dsub>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	f7fb fd87 	bl	80005f8 <__aeabi_dmul>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4620      	mov	r0, r4
 8004af0:	4629      	mov	r1, r5
 8004af2:	f7fb fbc9 	bl	8000288 <__aeabi_dsub>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4610      	mov	r0, r2
 8004afc:	4619      	mov	r1, r3
 8004afe:	f7fc f873 	bl	8000be8 <__aeabi_d2f>
 8004b02:	4602      	mov	r2, r0
 8004b04:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004b08:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8004b0c:	611a      	str	r2, [r3, #16]
    1.0);
  dv3[5] = cmag * (2.0 * x[0] * x[2] + 2.0 * x[1] * x[3]) - smag * (2.0 * x[0] *
 8004b0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	f7fb fd18 	bl	8000548 <__aeabi_f2d>
 8004b18:	4604      	mov	r4, r0
 8004b1a:	460d      	mov	r5, r1
 8004b1c:	4b6b      	ldr	r3, [pc, #428]	; (8004ccc <updateEKFQuatAtt+0x2b24>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fb fd11 	bl	8000548 <__aeabi_f2d>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	f7fb fbaf 	bl	800028c <__adddf3>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4690      	mov	r8, r2
 8004b34:	4699      	mov	r9, r3
 8004b36:	4b65      	ldr	r3, [pc, #404]	; (8004ccc <updateEKFQuatAtt+0x2b24>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fb fd04 	bl	8000548 <__aeabi_f2d>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4640      	mov	r0, r8
 8004b46:	4649      	mov	r1, r9
 8004b48:	f7fb fd56 	bl	80005f8 <__aeabi_dmul>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4690      	mov	r8, r2
 8004b52:	4699      	mov	r9, r3
 8004b54:	4b5d      	ldr	r3, [pc, #372]	; (8004ccc <updateEKFQuatAtt+0x2b24>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fb fcf5 	bl	8000548 <__aeabi_f2d>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	f7fb fb93 	bl	800028c <__adddf3>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4692      	mov	sl, r2
 8004b6c:	469b      	mov	fp, r3
 8004b6e:	4b57      	ldr	r3, [pc, #348]	; (8004ccc <updateEKFQuatAtt+0x2b24>)
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fb fce8 	bl	8000548 <__aeabi_f2d>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4650      	mov	r0, sl
 8004b7e:	4659      	mov	r1, fp
 8004b80:	f7fb fd3a 	bl	80005f8 <__aeabi_dmul>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4640      	mov	r0, r8
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	f7fb fb7e 	bl	800028c <__adddf3>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4620      	mov	r0, r4
 8004b96:	4629      	mov	r1, r5
 8004b98:	f7fb fd2e 	bl	80005f8 <__aeabi_dmul>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4690      	mov	r8, r2
 8004ba2:	4699      	mov	r9, r3
 8004ba4:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	f7fb fccd 	bl	8000548 <__aeabi_f2d>
 8004bae:	4604      	mov	r4, r0
 8004bb0:	460d      	mov	r5, r1
 8004bb2:	4b46      	ldr	r3, [pc, #280]	; (8004ccc <updateEKFQuatAtt+0x2b24>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fb fcc6 	bl	8000548 <__aeabi_f2d>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	f7fb fb64 	bl	800028c <__adddf3>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4692      	mov	sl, r2
 8004bca:	469b      	mov	fp, r3
    x[1] - 2.0 * x[2] * x[3]);
 8004bcc:	4b3f      	ldr	r3, [pc, #252]	; (8004ccc <updateEKFQuatAtt+0x2b24>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fb fcb9 	bl	8000548 <__aeabi_f2d>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
  dv3[5] = cmag * (2.0 * x[0] * x[2] + 2.0 * x[1] * x[3]) - smag * (2.0 * x[0] *
 8004bda:	4650      	mov	r0, sl
 8004bdc:	4659      	mov	r1, fp
 8004bde:	f7fb fd0b 	bl	80005f8 <__aeabi_dmul>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4692      	mov	sl, r2
 8004be8:	469b      	mov	fp, r3
    x[1] - 2.0 * x[2] * x[3]);
 8004bea:	4b38      	ldr	r3, [pc, #224]	; (8004ccc <updateEKFQuatAtt+0x2b24>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fb fcaa 	bl	8000548 <__aeabi_f2d>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	f7fb fb48 	bl	800028c <__adddf3>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	e9c7 2300 	strd	r2, r3, [r7]
 8004c04:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <updateEKFQuatAtt+0x2b24>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fb fc9d 	bl	8000548 <__aeabi_f2d>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c16:	f7fb fcef 	bl	80005f8 <__aeabi_dmul>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4650      	mov	r0, sl
 8004c20:	4659      	mov	r1, fp
 8004c22:	f7fb fb31 	bl	8000288 <__aeabi_dsub>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
  dv3[5] = cmag * (2.0 * x[0] * x[2] + 2.0 * x[1] * x[3]) - smag * (2.0 * x[0] *
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	f7fb fce3 	bl	80005f8 <__aeabi_dmul>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4640      	mov	r0, r8
 8004c38:	4649      	mov	r1, r9
 8004c3a:	f7fb fb25 	bl	8000288 <__aeabi_dsub>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	f7fb ffcf 	bl	8000be8 <__aeabi_d2f>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004c50:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8004c54:	615a      	str	r2, [r3, #20]
  for (i0 = 0; i0 < 6; i0++) {
 8004c56:	2300      	movs	r3, #0
 8004c58:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8004c5c:	e024      	b.n	8004ca8 <updateEKFQuatAtt+0x2b00>
    dv2[i0] -= dv3[i0];
 8004c5e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004c62:	f5a3 62c6 	sub.w	r2, r3, #1584	; 0x630
 8004c66:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	ed93 7a00 	vldr	s14, [r3]
 8004c72:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004c76:	f5a3 62c9 	sub.w	r2, r3, #1608	; 0x648
 8004c7a:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	edd3 7a00 	vldr	s15, [r3]
 8004c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c8a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004c8e:	f5a3 62c6 	sub.w	r2, r3, #1584	; 0x630
 8004c92:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	edc3 7a00 	vstr	s15, [r3]
  for (i0 = 0; i0 < 6; i0++) {
 8004c9e:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8004ca8:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8004cac:	2b05      	cmp	r3, #5
 8004cae:	ddd6      	ble.n	8004c5e <updateEKFQuatAtt+0x2ab6>
  }

  for (i0 = 0; i0 < 7; i0++) {
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8004cb6:	e055      	b.n	8004d64 <updateEKFQuatAtt+0x2bbc>
    mnorm = 0.0;
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8004cc0:	6013      	str	r3, [r2, #0]
    for (k = 0; k < 6; k++) {
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8004cc8:	e02f      	b.n	8004d2a <updateEKFQuatAtt+0x2b82>
 8004cca:	bf00      	nop
 8004ccc:	20002944 	.word	0x20002944
 8004cd0:	3ff00000 	.word	0x3ff00000
      mnorm += K[i0 + 7 * k] * dv2[k];
 8004cd4:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8004cd8:	4613      	mov	r3, r2
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	1a9a      	subs	r2, r3, r2
 8004cde:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8004ce8:	f5a2 629b 	sub.w	r2, r2, #1240	; 0x4d8
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	ed93 7a00 	vldr	s14, [r3]
 8004cf4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004cf8:	f5a3 62c6 	sub.w	r2, r3, #1584	; 0x630
 8004cfc:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	edd3 7a00 	vldr	s15, [r3]
 8004d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0c:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004d10:	ed93 7a00 	vldr	s14, [r3]
 8004d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d18:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004d1c:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0; k < 6; k++) {
 8004d20:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8004d24:	3301      	adds	r3, #1
 8004d26:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8004d2a:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	ddd0      	ble.n	8004cd4 <updateEKFQuatAtt+0x2b2c>
    }

    x[i0] += mnorm;
 8004d32:	4adf      	ldr	r2, [pc, #892]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004d34:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	ed93 7a00 	vldr	s14, [r3]
 8004d40:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004d44:	edd3 7a00 	vldr	s15, [r3]
 8004d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d4c:	4ad8      	ldr	r2, [pc, #864]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004d4e:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	edc3 7a00 	vstr	s15, [r3]
  for (i0 = 0; i0 < 7; i0++) {
 8004d5a:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8004d5e:	3301      	adds	r3, #1
 8004d60:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8004d64:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 8004d68:	2b06      	cmp	r3, #6
 8004d6a:	dda5      	ble.n	8004cb8 <updateEKFQuatAtt+0x2b10>
  }

  /*  Normalise quaternion */
  mnorm = sqrt(((x[0] * x[0] + x[1] * x[1]) + x[2] * x[2]) + x[3] * x[3]);
 8004d6c:	4bd0      	ldr	r3, [pc, #832]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004d6e:	ed93 7a00 	vldr	s14, [r3]
 8004d72:	4bcf      	ldr	r3, [pc, #828]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004d74:	edd3 7a00 	vldr	s15, [r3]
 8004d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d7c:	4bcc      	ldr	r3, [pc, #816]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004d7e:	edd3 6a01 	vldr	s13, [r3, #4]
 8004d82:	4bcb      	ldr	r3, [pc, #812]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004d84:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d90:	4bc7      	ldr	r3, [pc, #796]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004d92:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d96:	4bc6      	ldr	r3, [pc, #792]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004d98:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004da0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004da4:	4bc2      	ldr	r3, [pc, #776]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004da6:	edd3 6a03 	vldr	s13, [r3, #12]
 8004daa:	4bc1      	ldr	r3, [pc, #772]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004dac:	edd3 7a03 	vldr	s15, [r3, #12]
 8004db0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004db8:	ee17 0a90 	vmov	r0, s15
 8004dbc:	f7fb fbc4 	bl	8000548 <__aeabi_f2d>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	ec43 2b10 	vmov	d0, r2, r3
 8004dc8:	f014 fb00 	bl	80193cc <sqrt>
 8004dcc:	ec53 2b10 	vmov	r2, r3, d0
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	f7fb ff08 	bl	8000be8 <__aeabi_d2f>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 8004dde:	6013      	str	r3, [r2, #0]
  x[0] /= mnorm;
 8004de0:	4bb3      	ldr	r3, [pc, #716]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004de2:	edd3 6a00 	vldr	s13, [r3]
 8004de6:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004dea:	ed93 7a00 	vldr	s14, [r3]
 8004dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004df2:	4baf      	ldr	r3, [pc, #700]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004df4:	edc3 7a00 	vstr	s15, [r3]
  x[1] /= mnorm;
 8004df8:	4bad      	ldr	r3, [pc, #692]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004dfa:	edd3 6a01 	vldr	s13, [r3, #4]
 8004dfe:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004e02:	ed93 7a00 	vldr	s14, [r3]
 8004e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0a:	4ba9      	ldr	r3, [pc, #676]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004e0c:	edc3 7a01 	vstr	s15, [r3, #4]
  x[2] /= mnorm;
 8004e10:	4ba7      	ldr	r3, [pc, #668]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004e12:	edd3 6a02 	vldr	s13, [r3, #8]
 8004e16:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004e1a:	ed93 7a00 	vldr	s14, [r3]
 8004e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e22:	4ba3      	ldr	r3, [pc, #652]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004e24:	edc3 7a02 	vstr	s15, [r3, #8]
  x[3] /= mnorm;
 8004e28:	4ba1      	ldr	r3, [pc, #644]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004e2a:	edd3 6a03 	vldr	s13, [r3, #12]
 8004e2e:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004e32:	ed93 7a00 	vldr	s14, [r3]
 8004e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3a:	4b9d      	ldr	r3, [pc, #628]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004e3c:	edc3 7a03 	vstr	s15, [r3, #12]

  /*  Re-extract states */
  /*  Store state estimates */
  mnorm = x[0] * x[0];
 8004e40:	4b9b      	ldr	r3, [pc, #620]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004e42:	ed93 7a00 	vldr	s14, [r3]
 8004e46:	4b9a      	ldr	r3, [pc, #616]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004e48:	edd3 7a00 	vldr	s15, [r3]
 8004e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e50:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004e54:	edc3 7a00 	vstr	s15, [r3]
  unnamed_idx_2 = x[1] * x[1];
 8004e58:	4b95      	ldr	r3, [pc, #596]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004e5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e5e:	4b94      	ldr	r3, [pc, #592]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e68:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8004e6c:	edc3 7a00 	vstr	s15, [r3]
  s = x[2] * x[2];
 8004e70:	4b8f      	ldr	r3, [pc, #572]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004e72:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e76:	4b8e      	ldr	r3, [pc, #568]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004e78:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e80:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8004e84:	edc3 7a00 	vstr	s15, [r3]
  a = x[3] * x[3];
 8004e88:	4b89      	ldr	r3, [pc, #548]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004e8a:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e8e:	4b88      	ldr	r3, [pc, #544]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004e90:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e98:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 8004e9c:	edc3 7a00 	vstr	s15, [r3]
  *roll_deg = atan2(2.0 * (x[0] * x[1] + x[2] * x[3]), ((mnorm + a) -
 8004ea0:	4b83      	ldr	r3, [pc, #524]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004ea2:	ed93 7a00 	vldr	s14, [r3]
 8004ea6:	4b82      	ldr	r3, [pc, #520]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004ea8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004eb0:	4b7f      	ldr	r3, [pc, #508]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004eb2:	edd3 6a02 	vldr	s13, [r3, #8]
 8004eb6:	4b7e      	ldr	r3, [pc, #504]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004eb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ec4:	ee17 0a90 	vmov	r0, s15
 8004ec8:	f7fb fb3e 	bl	8000548 <__aeabi_f2d>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	f7fb f9dc 	bl	800028c <__adddf3>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	ec43 2b18 	vmov	d8, r2, r3
 8004edc:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004ee0:	ed93 7a00 	vldr	s14, [r3]
 8004ee4:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 8004ee8:	edd3 7a00 	vldr	s15, [r3]
 8004eec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ef0:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8004ef4:	edd3 7a00 	vldr	s15, [r3]
 8004ef8:	ee37 7a67 	vsub.f32	s14, s14, s15
    unnamed_idx_2) - s) * 180.0 / 3.1415926535897931;
 8004efc:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8004f00:	edd3 7a00 	vldr	s15, [r3]
 8004f04:	ee77 7a67 	vsub.f32	s15, s14, s15
  *roll_deg = atan2(2.0 * (x[0] * x[1] + x[2] * x[3]), ((mnorm + a) -
 8004f08:	ee17 0a90 	vmov	r0, s15
 8004f0c:	f7fb fb1c 	bl	8000548 <__aeabi_f2d>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	ec43 2b11 	vmov	d1, r2, r3
 8004f18:	eeb0 0a48 	vmov.f32	s0, s16
 8004f1c:	eef0 0a68 	vmov.f32	s1, s17
 8004f20:	f013 ff34 	bl	8018d8c <atan2>
 8004f24:	ec51 0b10 	vmov	r0, r1, d0
    unnamed_idx_2) - s) * 180.0 / 3.1415926535897931;
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	4b61      	ldr	r3, [pc, #388]	; (80050b4 <updateEKFQuatAtt+0x2f0c>)
 8004f2e:	f7fb fb63 	bl	80005f8 <__aeabi_dmul>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4610      	mov	r0, r2
 8004f38:	4619      	mov	r1, r3
 8004f3a:	a35b      	add	r3, pc, #364	; (adr r3, 80050a8 <updateEKFQuatAtt+0x2f00>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f7fb fc84 	bl	800084c <__aeabi_ddiv>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f7fb fe4c 	bl	8000be8 <__aeabi_d2f>
 8004f50:	4602      	mov	r2, r0
  *roll_deg = atan2(2.0 * (x[0] * x[1] + x[2] * x[3]), ((mnorm + a) -
 8004f52:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004f56:	f5a3 63cd 	sub.w	r3, r3, #1640	; 0x668
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	601a      	str	r2, [r3, #0]
  *pitch_deg = asin(2.0 * (x[0] * x[2] - x[1] * x[3])) * 180.0 /
 8004f5e:	4b54      	ldr	r3, [pc, #336]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004f60:	ed93 7a00 	vldr	s14, [r3]
 8004f64:	4b52      	ldr	r3, [pc, #328]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004f66:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f6e:	4b50      	ldr	r3, [pc, #320]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004f70:	edd3 6a01 	vldr	s13, [r3, #4]
 8004f74:	4b4e      	ldr	r3, [pc, #312]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004f76:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f82:	ee17 0a90 	vmov	r0, s15
 8004f86:	f7fb fadf 	bl	8000548 <__aeabi_f2d>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	f7fb f97d 	bl	800028c <__adddf3>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	ec43 2b17 	vmov	d7, r2, r3
 8004f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f9e:	eef0 0a67 	vmov.f32	s1, s15
 8004fa2:	f013 febf 	bl	8018d24 <asin>
 8004fa6:	ec51 0b10 	vmov	r0, r1, d0
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	4b41      	ldr	r3, [pc, #260]	; (80050b4 <updateEKFQuatAtt+0x2f0c>)
 8004fb0:	f7fb fb22 	bl	80005f8 <__aeabi_dmul>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4610      	mov	r0, r2
 8004fba:	4619      	mov	r1, r3
 8004fbc:	a33a      	add	r3, pc, #232	; (adr r3, 80050a8 <updateEKFQuatAtt+0x2f00>)
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f7fb fc43 	bl	800084c <__aeabi_ddiv>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4610      	mov	r0, r2
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f7fb fe0b 	bl	8000be8 <__aeabi_d2f>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8004fd8:	601a      	str	r2, [r3, #0]
    3.1415926535897931;
  *yaw_deg = atan2(2.0 * (x[0] * x[3] + x[1] * x[2]), ((mnorm + unnamed_idx_2) -
 8004fda:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004fdc:	ed93 7a00 	vldr	s14, [r3]
 8004fe0:	4b33      	ldr	r3, [pc, #204]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004fe2:	edd3 7a03 	vldr	s15, [r3, #12]
 8004fe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fea:	4b31      	ldr	r3, [pc, #196]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004fec:	edd3 6a01 	vldr	s13, [r3, #4]
 8004ff0:	4b2f      	ldr	r3, [pc, #188]	; (80050b0 <updateEKFQuatAtt+0x2f08>)
 8004ff2:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ffe:	ee17 0a90 	vmov	r0, s15
 8005002:	f7fb faa1 	bl	8000548 <__aeabi_f2d>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	f7fb f93f 	bl	800028c <__adddf3>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	ec43 2b18 	vmov	d8, r2, r3
 8005016:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800501a:	ed93 7a00 	vldr	s14, [r3]
 800501e:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005022:	edd3 7a00 	vldr	s15, [r3]
 8005026:	ee37 7a27 	vadd.f32	s14, s14, s15
 800502a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800502e:	edd3 7a00 	vldr	s15, [r3]
 8005032:	ee37 7a67 	vsub.f32	s14, s14, s15
    s) - a) * 180.0 / 3.1415926535897931;
 8005036:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 800503a:	edd3 7a00 	vldr	s15, [r3]
 800503e:	ee77 7a67 	vsub.f32	s15, s14, s15
  *yaw_deg = atan2(2.0 * (x[0] * x[3] + x[1] * x[2]), ((mnorm + unnamed_idx_2) -
 8005042:	ee17 0a90 	vmov	r0, s15
 8005046:	f7fb fa7f 	bl	8000548 <__aeabi_f2d>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	ec43 2b11 	vmov	d1, r2, r3
 8005052:	eeb0 0a48 	vmov.f32	s0, s16
 8005056:	eef0 0a68 	vmov.f32	s1, s17
 800505a:	f013 fe97 	bl	8018d8c <atan2>
 800505e:	ec51 0b10 	vmov	r0, r1, d0
    s) - a) * 180.0 / 3.1415926535897931;
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <updateEKFQuatAtt+0x2f0c>)
 8005068:	f7fb fac6 	bl	80005f8 <__aeabi_dmul>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	a30c      	add	r3, pc, #48	; (adr r3, 80050a8 <updateEKFQuatAtt+0x2f00>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f7fb fbe7 	bl	800084c <__aeabi_ddiv>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4610      	mov	r0, r2
 8005084:	4619      	mov	r1, r3
 8005086:	f7fb fdaf 	bl	8000be8 <__aeabi_d2f>
 800508a:	4602      	mov	r2, r0
  *yaw_deg = atan2(2.0 * (x[0] * x[3] + x[1] * x[2]), ((mnorm + unnamed_idx_2) -
 800508c:	f8d7 369c 	ldr.w	r3, [r7, #1692]	; 0x69c
 8005090:	601a      	str	r2, [r3, #0]
}
 8005092:	bf00      	nop
 8005094:	f507 67ce 	add.w	r7, r7, #1648	; 0x670
 8005098:	46bd      	mov	sp, r7
 800509a:	ecbd 8b02 	vpop	{d8}
 800509e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a2:	bf00      	nop
 80050a4:	f3af 8000 	nop.w
 80050a8:	54442d18 	.word	0x54442d18
 80050ac:	400921fb 	.word	0x400921fb
 80050b0:	20002944 	.word	0x20002944
 80050b4:	40668000 	.word	0x40668000

080050b8 <dps310_i2c_read>:
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}



int8_t dps310_i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af04      	add	r7, sp, #16
 80050be:	603a      	str	r2, [r7, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	71fb      	strb	r3, [r7, #7]
 80050c6:	460b      	mov	r3, r1
 80050c8:	71bb      	strb	r3, [r7, #6]
 80050ca:	4613      	mov	r3, r2
 80050cc:	80bb      	strh	r3, [r7, #4]


	  // Perform the I2C read operation using HAL_I2C_Mem_Read
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 80050ce:	79fb      	ldrb	r3, [r7, #7]
 80050d0:	b299      	uxth	r1, r3
 80050d2:	79bb      	ldrb	r3, [r7, #6]
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	2364      	movs	r3, #100	; 0x64
 80050d8:	9302      	str	r3, [sp, #8]
 80050da:	88bb      	ldrh	r3, [r7, #4]
 80050dc:	9301      	str	r3, [sp, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	2301      	movs	r3, #1
 80050e4:	4807      	ldr	r0, [pc, #28]	; (8005104 <dps310_i2c_read+0x4c>)
 80050e6:	f004 f989 	bl	80093fc <HAL_I2C_Mem_Read>
 80050ea:	4603      	mov	r3, r0
 80050ec:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <dps310_i2c_read+0x40>
 80050f4:	2300      	movs	r3, #0
 80050f6:	e001      	b.n	80050fc <dps310_i2c_read+0x44>
 80050f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff


}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20002c24 	.word	0x20002c24

08005108 <dps310_i2c_write>:

int8_t dps310_i2c_write(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af04      	add	r7, sp, #16
 800510e:	603a      	str	r2, [r7, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	4603      	mov	r3, r0
 8005114:	71fb      	strb	r3, [r7, #7]
 8005116:	460b      	mov	r3, r1
 8005118:	71bb      	strb	r3, [r7, #6]
 800511a:	4613      	mov	r3, r2
 800511c:	80bb      	strh	r3, [r7, #4]

	  // Perform the I2C write operation using HAL_I2C_Mem_Write
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	b299      	uxth	r1, r3
 8005122:	79bb      	ldrb	r3, [r7, #6]
 8005124:	b29a      	uxth	r2, r3
 8005126:	2364      	movs	r3, #100	; 0x64
 8005128:	9302      	str	r3, [sp, #8]
 800512a:	88bb      	ldrh	r3, [r7, #4]
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	2301      	movs	r3, #1
 8005134:	4807      	ldr	r0, [pc, #28]	; (8005154 <dps310_i2c_write+0x4c>)
 8005136:	f004 f867 	bl	8009208 <HAL_I2C_Mem_Write>
 800513a:	4603      	mov	r3, r0
 800513c:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <dps310_i2c_write+0x40>
 8005144:	2300      	movs	r3, #0
 8005146:	e001      	b.n	800514c <dps310_i2c_write+0x44>
 8005148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20002c24 	.word	0x20002c24

08005158 <Pressure_Init>:



int32_t Pressure_Init(){
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0

    int16_t ret;

    ret = product_id_check();
 800515e:	f000 fb21 	bl	80057a4 <product_id_check>
 8005162:	4603      	mov	r3, r0
 8005164:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 8005166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <Pressure_Init+0x1c>
 800516e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005172:	e011      	b.n	8005198 <Pressure_Init+0x40>

    dps310_configure_temperature(
 8005174:	2000      	movs	r0, #0
 8005176:	f000 f8b1 	bl	80052dc <dps310_configure_temperature>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_TMP_CFG_TMP_PRC_SINGLE);

    dps310_configure_pressure(
 800517a:	2001      	movs	r0, #1
 800517c:	f000 f8da 	bl	8005334 <dps310_configure_pressure>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_PRS_CFG_PM_PRC_2_TIMES);

    ret = read_coefs();
 8005180:	f000 f80e 	bl	80051a0 <read_coefs>
 8005184:	4603      	mov	r3, r0
 8005186:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 8005188:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <Pressure_Init+0x3e>
 8005190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005194:	e000      	b.n	8005198 <Pressure_Init+0x40>

    return 0;
 8005196:	2300      	movs	r3, #0

}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <read_coefs>:

int16_t dps310_reset() {
    return write_byte_to_reg(DPS310_RESET_REG, DPS310_RESET_SOFT_RST_VALUE);
}

int16_t read_coefs() {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[18];

    ret = wait_for_reg_value(
 80051a6:	2280      	movs	r2, #128	; 0x80
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	2008      	movs	r0, #8
 80051ac:	f000 fa3e 	bl	800562c <wait_for_reg_value>
 80051b0:	4603      	mov	r3, r0
 80051b2:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE);

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_COEF_REG, buff, 18);
 80051b4:	1d3a      	adds	r2, r7, #4
 80051b6:	2312      	movs	r3, #18
 80051b8:	2110      	movs	r1, #16
 80051ba:	20ee      	movs	r0, #238	; 0xee
 80051bc:	f7ff ff7c 	bl	80050b8 <dps310_i2c_read>
 80051c0:	4603      	mov	r3, r0
 80051c2:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 80051c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <read_coefs+0x32>
 80051cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051d0:	e07d      	b.n	80052ce <read_coefs+0x12e>

    g_coefs.c0 = get_two_complement_of(
            ((uint16_t) buff[0] << 4u) | (((uint16_t) buff[1] >> 4u) & 0x0Fu),
 80051d2:	793b      	ldrb	r3, [r7, #4]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	461a      	mov	r2, r3
 80051d8:	797b      	ldrb	r3, [r7, #5]
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	4313      	orrs	r3, r2
    g_coefs.c0 = get_two_complement_of(
 80051e4:	210c      	movs	r1, #12
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fab8 	bl	800575c <get_two_complement_of>
 80051ec:	4603      	mov	r3, r0
 80051ee:	b21a      	sxth	r2, r3
 80051f0:	4b39      	ldr	r3, [pc, #228]	; (80052d8 <read_coefs+0x138>)
 80051f2:	801a      	strh	r2, [r3, #0]
            12);

    g_coefs.c1 = get_two_complement_of(
            ((((uint16_t) buff[1] & 0x0Fu) << 8u) | (uint16_t) buff[2]),
 80051f4:	797b      	ldrb	r3, [r7, #5]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80051fc:	79ba      	ldrb	r2, [r7, #6]
 80051fe:	4313      	orrs	r3, r2
    g_coefs.c1 = get_two_complement_of(
 8005200:	210c      	movs	r1, #12
 8005202:	4618      	mov	r0, r3
 8005204:	f000 faaa 	bl	800575c <get_two_complement_of>
 8005208:	4603      	mov	r3, r0
 800520a:	b21a      	sxth	r2, r3
 800520c:	4b32      	ldr	r3, [pc, #200]	; (80052d8 <read_coefs+0x138>)
 800520e:	805a      	strh	r2, [r3, #2]
            12);

    g_coefs.c00 = get_two_complement_of(
            ((uint32_t) buff[3] << 12u) | ((uint32_t) buff[4] << 4u) | (((uint32_t) buff[5] >> 4u) & 0x0Fu),
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	031a      	lsls	r2, r3, #12
 8005214:	7a3b      	ldrb	r3, [r7, #8]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	431a      	orrs	r2, r3
 800521a:	7a7b      	ldrb	r3, [r7, #9]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	b2db      	uxtb	r3, r3
 8005220:	f003 030f 	and.w	r3, r3, #15
    g_coefs.c00 = get_two_complement_of(
 8005224:	4313      	orrs	r3, r2
 8005226:	2114      	movs	r1, #20
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fa97 	bl	800575c <get_two_complement_of>
 800522e:	4603      	mov	r3, r0
 8005230:	4a29      	ldr	r2, [pc, #164]	; (80052d8 <read_coefs+0x138>)
 8005232:	6053      	str	r3, [r2, #4]
            20);

    g_coefs.c10 = get_two_complement_of(
            (((uint32_t) buff[5] & 0x0Fu) << 16u) | ((uint32_t) buff[6] << 8u) | (uint32_t) buff[7],
 8005234:	7a7b      	ldrb	r3, [r7, #9]
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800523c:	7abb      	ldrb	r3, [r7, #10]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	4313      	orrs	r3, r2
 8005242:	7afa      	ldrb	r2, [r7, #11]
    g_coefs.c10 = get_two_complement_of(
 8005244:	4313      	orrs	r3, r2
 8005246:	2114      	movs	r1, #20
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fa87 	bl	800575c <get_two_complement_of>
 800524e:	4603      	mov	r3, r0
 8005250:	4a21      	ldr	r2, [pc, #132]	; (80052d8 <read_coefs+0x138>)
 8005252:	6093      	str	r3, [r2, #8]
            20);

    g_coefs.c01 = get_two_complement_of(
            ((uint16_t) buff[8] << 8u) | (uint16_t) buff[9],
 8005254:	7b3b      	ldrb	r3, [r7, #12]
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	7b7a      	ldrb	r2, [r7, #13]
 800525a:	4313      	orrs	r3, r2
    g_coefs.c01 = get_two_complement_of(
 800525c:	2110      	movs	r1, #16
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fa7c 	bl	800575c <get_two_complement_of>
 8005264:	4603      	mov	r3, r0
 8005266:	b21a      	sxth	r2, r3
 8005268:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <read_coefs+0x138>)
 800526a:	819a      	strh	r2, [r3, #12]
            16);

    g_coefs.c11 = get_two_complement_of(
            ((uint16_t) buff[10] << 8u) | (uint16_t) buff[11],
 800526c:	7bbb      	ldrb	r3, [r7, #14]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	4313      	orrs	r3, r2
    g_coefs.c11 = get_two_complement_of(
 8005274:	2110      	movs	r1, #16
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fa70 	bl	800575c <get_two_complement_of>
 800527c:	4603      	mov	r3, r0
 800527e:	b21a      	sxth	r2, r3
 8005280:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <read_coefs+0x138>)
 8005282:	81da      	strh	r2, [r3, #14]
            16);

    g_coefs.c20 = get_two_complement_of(
            ((uint16_t) buff[12] << 8u) | (uint16_t) buff[13],
 8005284:	7c3b      	ldrb	r3, [r7, #16]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	7c7a      	ldrb	r2, [r7, #17]
 800528a:	4313      	orrs	r3, r2
    g_coefs.c20 = get_two_complement_of(
 800528c:	2110      	movs	r1, #16
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fa64 	bl	800575c <get_two_complement_of>
 8005294:	4603      	mov	r3, r0
 8005296:	b21a      	sxth	r2, r3
 8005298:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <read_coefs+0x138>)
 800529a:	821a      	strh	r2, [r3, #16]
            16);

    g_coefs.c21 = get_two_complement_of(
            ((uint16_t) buff[14] << 8u) | (uint16_t) buff[15],
 800529c:	7cbb      	ldrb	r3, [r7, #18]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	7cfa      	ldrb	r2, [r7, #19]
 80052a2:	4313      	orrs	r3, r2
    g_coefs.c21 = get_two_complement_of(
 80052a4:	2110      	movs	r1, #16
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fa58 	bl	800575c <get_two_complement_of>
 80052ac:	4603      	mov	r3, r0
 80052ae:	b21a      	sxth	r2, r3
 80052b0:	4b09      	ldr	r3, [pc, #36]	; (80052d8 <read_coefs+0x138>)
 80052b2:	825a      	strh	r2, [r3, #18]
            16);

    g_coefs.c30 = get_two_complement_of(
            ((uint16_t) buff[16] << 8u) | (uint16_t) buff[17],
 80052b4:	7d3b      	ldrb	r3, [r7, #20]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	7d7a      	ldrb	r2, [r7, #21]
 80052ba:	4313      	orrs	r3, r2
    g_coefs.c30 = get_two_complement_of(
 80052bc:	2110      	movs	r1, #16
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fa4c 	bl	800575c <get_two_complement_of>
 80052c4:	4603      	mov	r3, r0
 80052c6:	b21a      	sxth	r2, r3
 80052c8:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <read_coefs+0x138>)
 80052ca:	829a      	strh	r2, [r3, #20]
            16);

    return DPS310_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20002b7c 	.word	0x20002b7c

080052dc <dps310_configure_temperature>:

int16_t dps310_configure_temperature(uint8_t data) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	71fb      	strb	r3, [r7, #7]
    int16_t ret;
    uint8_t temperature_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 80052e6:	2380      	movs	r3, #128	; 0x80
 80052e8:	737b      	strb	r3, [r7, #13]

    ret = get_temperature_sensor(&temperature_sensor);
 80052ea:	f107 030d 	add.w	r3, r7, #13
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fa7e 	bl	80057f0 <get_temperature_sensor>
 80052f4:	4603      	mov	r3, r0
 80052f6:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 80052f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <dps310_configure_temperature+0x2a>
 8005300:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005304:	e00f      	b.n	8005326 <dps310_configure_temperature+0x4a>

    g_temperature_rate = DPS310_TMP_CFG_TMP_RATE_MASK & data;
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800530c:	b2da      	uxtb	r2, r3
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <dps310_configure_temperature+0x54>)
 8005310:	701a      	strb	r2, [r3, #0]
    data |= temperature_sensor;
 8005312:	7b7a      	ldrb	r2, [r7, #13]
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	4313      	orrs	r3, r2
 8005318:	71fb      	strb	r3, [r7, #7]

    return write_byte_to_reg(DPS310_TMP_CFG_REG, data);
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	4619      	mov	r1, r3
 800531e:	2007      	movs	r0, #7
 8005320:	f000 f820 	bl	8005364 <write_byte_to_reg>
 8005324:	4603      	mov	r3, r0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20002b95 	.word	0x20002b95

08005334 <dps310_configure_pressure>:

int16_t dps310_configure_pressure(uint8_t data) {
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]
    g_pressure_rate = DPS310_PRS_CFG_PM_RATE_MASK & data;
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005344:	b2da      	uxtb	r2, r3
 8005346:	4b06      	ldr	r3, [pc, #24]	; (8005360 <dps310_configure_pressure+0x2c>)
 8005348:	701a      	strb	r2, [r3, #0]
    return write_byte_to_reg(DPS310_PRS_CFG_REG, data);
 800534a:	79fb      	ldrb	r3, [r7, #7]
 800534c:	4619      	mov	r1, r3
 800534e:	2006      	movs	r0, #6
 8005350:	f000 f808 	bl	8005364 <write_byte_to_reg>
 8005354:	4603      	mov	r3, r0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20002b94 	.word	0x20002b94

08005364 <write_byte_to_reg>:

int16_t write_byte_to_reg(uint8_t reg_addr, uint8_t data) {
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	460a      	mov	r2, r1
 800536e:	71fb      	strb	r3, [r7, #7]
 8005370:	4613      	mov	r3, r2
 8005372:	71bb      	strb	r3, [r7, #6]
    int16_t ret;
    uint8_t buff[1];

    buff[0] = data;
 8005374:	79bb      	ldrb	r3, [r7, #6]
 8005376:	733b      	strb	r3, [r7, #12]
    ret = dps310_i2c_write(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 8005378:	f107 020c 	add.w	r2, r7, #12
 800537c:	79f9      	ldrb	r1, [r7, #7]
 800537e:	2301      	movs	r3, #1
 8005380:	20ee      	movs	r0, #238	; 0xee
 8005382:	f7ff fec1 	bl	8005108 <dps310_i2c_write>
 8005386:	4603      	mov	r3, r0
 8005388:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 800538a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <write_byte_to_reg+0x34>
 8005392:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005396:	e000      	b.n	800539a <write_byte_to_reg+0x36>

    return DPS310_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <read_temperature>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t read_temperature(float *p_temperature) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_TMP);
 80053ac:	2102      	movs	r1, #2
 80053ae:	2008      	movs	r0, #8
 80053b0:	f7ff ffd8 	bl	8005364 <write_byte_to_reg>
 80053b4:	4603      	mov	r3, r0
 80053b6:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 80053b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <read_temperature+0x22>
 80053c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80053c4:	e066      	b.n	8005494 <read_temperature+0xf0>

    ret = wait_for_reg_value(
 80053c6:	2267      	movs	r2, #103	; 0x67
 80053c8:	2160      	movs	r1, #96	; 0x60
 80053ca:	2008      	movs	r0, #8
 80053cc:	f000 f92e 	bl	800562c <wait_for_reg_value>
 80053d0:	4603      	mov	r3, r0
 80053d2:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 80053d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <read_temperature+0x3e>
 80053dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80053e0:	e058      	b.n	8005494 <read_temperature+0xf0>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_B2_REG, buff, 3);
 80053e2:	f107 020c 	add.w	r2, r7, #12
 80053e6:	2303      	movs	r3, #3
 80053e8:	2103      	movs	r1, #3
 80053ea:	20ee      	movs	r0, #238	; 0xee
 80053ec:	f7ff fe64 	bl	80050b8 <dps310_i2c_read>
 80053f0:	4603      	mov	r3, r0
 80053f2:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 80053f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <read_temperature+0x5e>
 80053fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005400:	e048      	b.n	8005494 <read_temperature+0xf0>

    int32_t temp_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 8005402:	7b3b      	ldrb	r3, [r7, #12]
 8005404:	041a      	lsls	r2, r3, #16
 8005406:	7b7b      	ldrb	r3, [r7, #13]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	4313      	orrs	r3, r2
 800540c:	7bba      	ldrb	r2, [r7, #14]
    int32_t temp_raw = get_two_complement_of(
 800540e:	4313      	orrs	r3, r2
 8005410:	2118      	movs	r1, #24
 8005412:	4618      	mov	r0, r3
 8005414:	f000 f9a2 	bl	800575c <get_two_complement_of>
 8005418:	6138      	str	r0, [r7, #16]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_temperature_rate, &factor);
 800541a:	4b20      	ldr	r3, [pc, #128]	; (800549c <read_temperature+0xf8>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	f107 0208 	add.w	r2, r7, #8
 8005422:	4611      	mov	r1, r2
 8005424:	4618      	mov	r0, r3
 8005426:	f000 f940 	bl	80056aa <get_scale_factor_for>
 800542a:	4603      	mov	r3, r0
 800542c:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 800542e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <read_temperature+0x98>
 8005436:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800543a:	e02b      	b.n	8005494 <read_temperature+0xf0>

    g_last_temp_raw_sc = (float) temp_raw / factor;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	ee07 3a90 	vmov	s15, r3
 800544c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005454:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <read_temperature+0xfc>)
 8005456:	edc3 7a00 	vstr	s15, [r3]
    *p_temperature = (float) g_coefs.c0 * 0.5f + (float) g_coefs.c1 * g_last_temp_raw_sc;
 800545a:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <read_temperature+0x100>)
 800545c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005460:	ee07 3a90 	vmov	s15, r3
 8005464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005468:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800546c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005470:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <read_temperature+0x100>)
 8005472:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800547e:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <read_temperature+0xfc>)
 8005480:	edd3 7a00 	vldr	s15, [r3]
 8005484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20002b95 	.word	0x20002b95
 80054a0:	20002b98 	.word	0x20002b98
 80054a4:	20002b7c 	.word	0x20002b7c

080054a8 <read_pressure>:

int16_t read_pressure(float *p_pressure) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_PRS);
 80054b0:	2101      	movs	r1, #1
 80054b2:	2008      	movs	r0, #8
 80054b4:	f7ff ff56 	bl	8005364 <write_byte_to_reg>
 80054b8:	4603      	mov	r3, r0
 80054ba:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 80054bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <read_pressure+0x22>
 80054c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80054c8:	e0a4      	b.n	8005614 <read_pressure+0x16c>

    ret = wait_for_reg_value(
 80054ca:	2257      	movs	r2, #87	; 0x57
 80054cc:	2150      	movs	r1, #80	; 0x50
 80054ce:	2008      	movs	r0, #8
 80054d0:	f000 f8ac 	bl	800562c <wait_for_reg_value>
 80054d4:	4603      	mov	r3, r0
 80054d6:	83fb      	strh	r3, [r7, #30]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 80054d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <read_pressure+0x3e>
 80054e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80054e4:	e096      	b.n	8005614 <read_pressure+0x16c>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PSR_B2_REG, buff, 3);
 80054e6:	f107 0210 	add.w	r2, r7, #16
 80054ea:	2303      	movs	r3, #3
 80054ec:	2100      	movs	r1, #0
 80054ee:	20ee      	movs	r0, #238	; 0xee
 80054f0:	f7ff fde2 	bl	80050b8 <dps310_i2c_read>
 80054f4:	4603      	mov	r3, r0
 80054f6:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 80054f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <read_pressure+0x5e>
 8005500:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005504:	e086      	b.n	8005614 <read_pressure+0x16c>

    int32_t pressure_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 8005506:	7c3b      	ldrb	r3, [r7, #16]
 8005508:	041a      	lsls	r2, r3, #16
 800550a:	7c7b      	ldrb	r3, [r7, #17]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	4313      	orrs	r3, r2
 8005510:	7cba      	ldrb	r2, [r7, #18]
    int32_t pressure_raw = get_two_complement_of(
 8005512:	4313      	orrs	r3, r2
 8005514:	2118      	movs	r1, #24
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f920 	bl	800575c <get_two_complement_of>
 800551c:	61b8      	str	r0, [r7, #24]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_pressure_rate, &factor);
 800551e:	4b3f      	ldr	r3, [pc, #252]	; (800561c <read_pressure+0x174>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	f107 020c 	add.w	r2, r7, #12
 8005526:	4611      	mov	r1, r2
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f8be 	bl	80056aa <get_scale_factor_for>
 800552e:	4603      	mov	r3, r0
 8005530:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 8005532:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <read_pressure+0x98>
 800553a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800553e:	e069      	b.n	8005614 <read_pressure+0x16c>

    float pressure_raw_sc = (float) pressure_raw / factor;
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	ee07 3a90 	vmov	s15, r3
 8005550:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005558:	edc7 7a05 	vstr	s15, [r7, #20]

    // *0.01f -> Convert compensated pressure measurement from Pa to hPa
    *p_pressure = (g_coefs.c00 +
 800555c:	4b30      	ldr	r3, [pc, #192]	; (8005620 <read_pressure+0x178>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	ee07 3a90 	vmov	s15, r3
 8005564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 8005568:	4b2d      	ldr	r3, [pc, #180]	; (8005620 <read_pressure+0x178>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	ee07 3a90 	vmov	s15, r3
 8005570:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005574:	4b2a      	ldr	r3, [pc, #168]	; (8005620 <read_pressure+0x178>)
 8005576:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8005582:	4b27      	ldr	r3, [pc, #156]	; (8005620 <read_pressure+0x178>)
 8005584:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005588:	ee07 3a90 	vmov	s15, r3
 800558c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8005590:	edd7 7a05 	vldr	s15, [r7, #20]
 8005594:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005598:	ee36 6a27 	vadd.f32	s12, s12, s15
 800559c:	edd7 7a05 	vldr	s15, [r7, #20]
 80055a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80055a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80055a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80055ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
    *p_pressure = (g_coefs.c00 +
 80055b0:	ee37 7a27 	vadd.f32	s14, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 80055b4:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <read_pressure+0x178>)
 80055b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80055c2:	4b17      	ldr	r3, [pc, #92]	; (8005620 <read_pressure+0x178>)
 80055c4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80055d0:	4b13      	ldr	r3, [pc, #76]	; (8005620 <read_pressure+0x178>)
 80055d2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80055de:	edd7 7a05 	vldr	s15, [r7, #20]
 80055e2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80055e6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80055ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80055ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80055f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80055f6:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <read_pressure+0x17c>)
 80055f8:	edd3 7a00 	vldr	s15, [r3]
 80055fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 8005600:	ee77 7a27 	vadd.f32	s15, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 8005604:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005628 <read_pressure+0x180>
 8005608:	ee67 7a87 	vmul.f32	s15, s15, s14
    *p_pressure = (g_coefs.c00 +
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20002b94 	.word	0x20002b94
 8005620:	20002b7c 	.word	0x20002b7c
 8005624:	20002b98 	.word	0x20002b98
 8005628:	3c23d70a 	.word	0x3c23d70a

0800562c <wait_for_reg_value>:

int16_t wait_for_reg_value(uint8_t reg_addr, uint8_t reg_value, uint8_t mask) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	71fb      	strb	r3, [r7, #7]
 8005636:	460b      	mov	r3, r1
 8005638:	71bb      	strb	r3, [r7, #6]
 800563a:	4613      	mov	r3, r2
 800563c:	717b      	strb	r3, [r7, #5]
    int16_t ret;
    uint8_t buff[1];
    uint16_t attempts = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	81fb      	strh	r3, [r7, #14]

    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 8005642:	e024      	b.n	800568e <wait_for_reg_value+0x62>
        attempts++;
 8005644:	89fb      	ldrh	r3, [r7, #14]
 8005646:	3301      	adds	r3, #1
 8005648:	81fb      	strh	r3, [r7, #14]

        ret = dps310_i2c_read(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 800564a:	f107 0208 	add.w	r2, r7, #8
 800564e:	79f9      	ldrb	r1, [r7, #7]
 8005650:	2301      	movs	r3, #1
 8005652:	20ee      	movs	r0, #238	; 0xee
 8005654:	f7ff fd30 	bl	80050b8 <dps310_i2c_read>
 8005658:	4603      	mov	r3, r0
 800565a:	81bb      	strh	r3, [r7, #12]
        if (ret != DPS310_OK) return ret;
 800565c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <wait_for_reg_value+0x3e>
 8005664:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005668:	e01b      	b.n	80056a2 <wait_for_reg_value+0x76>

        bool b_is_expected_value = ((buff[0] & mask) == reg_value);
 800566a:	7a3a      	ldrb	r2, [r7, #8]
 800566c:	797b      	ldrb	r3, [r7, #5]
 800566e:	4013      	ands	r3, r2
 8005670:	b2db      	uxtb	r3, r3
 8005672:	79ba      	ldrb	r2, [r7, #6]
 8005674:	429a      	cmp	r2, r3
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	72fb      	strb	r3, [r7, #11]
        if (b_is_expected_value) return DPS310_OK;
 800567e:	7afb      	ldrb	r3, [r7, #11]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <wait_for_reg_value+0x5c>
 8005684:	2300      	movs	r3, #0
 8005686:	e00c      	b.n	80056a2 <wait_for_reg_value+0x76>

        HAL_Delay(10);
 8005688:	200a      	movs	r0, #10
 800568a:	f002 fbc7 	bl	8007e1c <HAL_Delay>
    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 800568e:	89fb      	ldrh	r3, [r7, #14]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d9d7      	bls.n	8005644 <wait_for_reg_value+0x18>
    }

    if (attempts == DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 8005694:	89fb      	ldrh	r3, [r7, #14]
 8005696:	2b03      	cmp	r3, #3
 8005698:	d102      	bne.n	80056a0 <wait_for_reg_value+0x74>
        return DPS310_WAIT_TIMEOUT_ERROR;
 800569a:	f06f 0303 	mvn.w	r3, #3
 800569e:	e000      	b.n	80056a2 <wait_for_reg_value+0x76>
    }

    return DPS310_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <get_scale_factor_for>:

int16_t get_scale_factor_for(uint8_t rate, uint32_t *p_factor) {
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	4603      	mov	r3, r0
 80056b2:	6039      	str	r1, [r7, #0]
 80056b4:	71fb      	strb	r3, [r7, #7]
    uint32_t ret = DPS310_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]

    switch (rate) {
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	2b70      	cmp	r3, #112	; 0x70
 80056be:	d03d      	beq.n	800573c <get_scale_factor_for+0x92>
 80056c0:	2b70      	cmp	r3, #112	; 0x70
 80056c2:	dc40      	bgt.n	8005746 <get_scale_factor_for+0x9c>
 80056c4:	2b60      	cmp	r3, #96	; 0x60
 80056c6:	d034      	beq.n	8005732 <get_scale_factor_for+0x88>
 80056c8:	2b60      	cmp	r3, #96	; 0x60
 80056ca:	dc3c      	bgt.n	8005746 <get_scale_factor_for+0x9c>
 80056cc:	2b50      	cmp	r3, #80	; 0x50
 80056ce:	d02b      	beq.n	8005728 <get_scale_factor_for+0x7e>
 80056d0:	2b50      	cmp	r3, #80	; 0x50
 80056d2:	dc38      	bgt.n	8005746 <get_scale_factor_for+0x9c>
 80056d4:	2b40      	cmp	r3, #64	; 0x40
 80056d6:	d022      	beq.n	800571e <get_scale_factor_for+0x74>
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	dc34      	bgt.n	8005746 <get_scale_factor_for+0x9c>
 80056dc:	2b30      	cmp	r3, #48	; 0x30
 80056de:	d019      	beq.n	8005714 <get_scale_factor_for+0x6a>
 80056e0:	2b30      	cmp	r3, #48	; 0x30
 80056e2:	dc30      	bgt.n	8005746 <get_scale_factor_for+0x9c>
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d010      	beq.n	800570a <get_scale_factor_for+0x60>
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	dc2c      	bgt.n	8005746 <get_scale_factor_for+0x9c>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <get_scale_factor_for+0x4c>
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d005      	beq.n	8005700 <get_scale_factor_for+0x56>
 80056f4:	e027      	b.n	8005746 <get_scale_factor_for+0x9c>
        case DPS310_CFG_RATE_1_MEAS:
            *p_factor = 524288;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80056fc:	601a      	str	r2, [r3, #0]
            break;
 80056fe:	e025      	b.n	800574c <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_2_MEAS:
            *p_factor = 1572864;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005706:	601a      	str	r2, [r3, #0]
            break;
 8005708:	e020      	b.n	800574c <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_4_MEAS:
            *p_factor = 3670016;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8005710:	601a      	str	r2, [r3, #0]
            break;
 8005712:	e01b      	b.n	800574c <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_8_MEAS:
            *p_factor = 7864320;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800571a:	601a      	str	r2, [r3, #0]
            break;
 800571c:	e016      	b.n	800574c <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_16_MEAS:
            *p_factor = 253952;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 8005724:	601a      	str	r2, [r3, #0]
            break;
 8005726:	e011      	b.n	800574c <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_32_MEAS:
            *p_factor = 516096;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 800572e:	601a      	str	r2, [r3, #0]
            break;
 8005730:	e00c      	b.n	800574c <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_64_MEAS:
            *p_factor = 1040384;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 8005738:	601a      	str	r2, [r3, #0]
            break;
 800573a:	e007      	b.n	800574c <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_128_MEAS:
            *p_factor = 2088960;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8005742:	601a      	str	r2, [r3, #0]
            break;
 8005744:	e002      	b.n	800574c <get_scale_factor_for+0xa2>
        default:
            ret = DPS310_UNKNOWN_RATE_ERROR;
 8005746:	f06f 0304 	mvn.w	r3, #4
 800574a:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	b21b      	sxth	r3, r3
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <get_two_complement_of>:

int32_t get_two_complement_of(uint32_t value, uint8_t length) {
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
    int32_t ret = value;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	60fb      	str	r3, [r7, #12]
    bool b_is_negative = value & (1u << (length - 1u));
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	3b01      	subs	r3, #1
 8005770:	2201      	movs	r2, #1
 8005772:	409a      	lsls	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4013      	ands	r3, r2
 8005778:	2b00      	cmp	r3, #0
 800577a:	bf14      	ite	ne
 800577c:	2301      	movne	r3, #1
 800577e:	2300      	moveq	r3, #0
 8005780:	72fb      	strb	r3, [r7, #11]

    if (b_is_negative) {
 8005782:	7afb      	ldrb	r3, [r7, #11]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d006      	beq.n	8005796 <get_two_complement_of+0x3a>
        ret -= ((uint32_t) 1 << length);
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	78fb      	ldrb	r3, [r7, #3]
 800578c:	2101      	movs	r1, #1
 800578e:	fa01 f303 	lsl.w	r3, r1, r3
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8005796:	68fb      	ldr	r3, [r7, #12]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <product_id_check>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t product_id_check() {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PRODUCT_ID_REG, buff, 1);
 80057aa:	1d3a      	adds	r2, r7, #4
 80057ac:	2301      	movs	r3, #1
 80057ae:	210d      	movs	r1, #13
 80057b0:	20ee      	movs	r0, #238	; 0xee
 80057b2:	f7ff fc81 	bl	80050b8 <dps310_i2c_read>
 80057b6:	4603      	mov	r3, r0
 80057b8:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 80057ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <product_id_check+0x24>
 80057c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057c6:	e00f      	b.n	80057e8 <product_id_check+0x44>

    bool b_is_product_id_valid = buff[0] == DPS310_PRODUCT_ID_VALUE;
 80057c8:	793b      	ldrb	r3, [r7, #4]
 80057ca:	2b10      	cmp	r3, #16
 80057cc:	bf0c      	ite	eq
 80057ce:	2301      	moveq	r3, #1
 80057d0:	2300      	movne	r3, #0
 80057d2:	717b      	strb	r3, [r7, #5]
    if (!b_is_product_id_valid) return DPS310_PRODUCT_ID_ERROR;
 80057d4:	797b      	ldrb	r3, [r7, #5]
 80057d6:	f083 0301 	eor.w	r3, r3, #1
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <product_id_check+0x42>
 80057e0:	f06f 0301 	mvn.w	r3, #1
 80057e4:	e000      	b.n	80057e8 <product_id_check+0x44>

    return DPS310_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <get_temperature_sensor>:

int16_t get_temperature_sensor(uint8_t *p_sensor) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
    uint16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_COEF_SRCE, buff, 1);
 80057f8:	f107 020c 	add.w	r2, r7, #12
 80057fc:	2301      	movs	r3, #1
 80057fe:	2128      	movs	r1, #40	; 0x28
 8005800:	20ee      	movs	r0, #238	; 0xee
 8005802:	f7ff fc59 	bl	80050b8 <dps310_i2c_read>
 8005806:	4603      	mov	r3, r0
 8005808:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 800580a:	89fb      	ldrh	r3, [r7, #14]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <get_temperature_sensor+0x26>
 8005810:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005814:	e00e      	b.n	8005834 <get_temperature_sensor+0x44>

    uint8_t value = buff[0] & DPS310_TMP_COEF_SRCE_MASK;
 8005816:	7b3b      	ldrb	r3, [r7, #12]
 8005818:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800581c:	737b      	strb	r3, [r7, #13]

    if (value) {
 800581e:	7b7b      	ldrb	r3, [r7, #13]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <get_temperature_sensor+0x3c>
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2280      	movs	r2, #128	; 0x80
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	e002      	b.n	8005832 <get_temperature_sensor+0x42>
    } else {
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_INTERNAL;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	701a      	strb	r2, [r3, #0]
    }

    return DPS310_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <Transmit_Pressure_Temp_Data>:


PressureTempData Transmit_Pressure_Temp_Data(){
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0


	  pressure_read_state = read_pressure(&pressure_value);
 8005842:	4822      	ldr	r0, [pc, #136]	; (80058cc <Transmit_Pressure_Temp_Data+0x90>)
 8005844:	f7ff fe30 	bl	80054a8 <read_pressure>
 8005848:	4603      	mov	r3, r0
 800584a:	461a      	mov	r2, r3
 800584c:	4b20      	ldr	r3, [pc, #128]	; (80058d0 <Transmit_Pressure_Temp_Data+0x94>)
 800584e:	801a      	strh	r2, [r3, #0]
	  temperature_p_state = read_temperature(&temperature_p_value);
 8005850:	4820      	ldr	r0, [pc, #128]	; (80058d4 <Transmit_Pressure_Temp_Data+0x98>)
 8005852:	f7ff fda7 	bl	80053a4 <read_temperature>
 8005856:	4603      	mov	r3, r0
 8005858:	461a      	mov	r2, r3
 800585a:	4b1f      	ldr	r3, [pc, #124]	; (80058d8 <Transmit_Pressure_Temp_Data+0x9c>)
 800585c:	801a      	strh	r2, [r3, #0]

	  if(pressure_read_state == 0 && temperature_p_state == 0){
 800585e:	4b1c      	ldr	r3, [pc, #112]	; (80058d0 <Transmit_Pressure_Temp_Data+0x94>)
 8005860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d114      	bne.n	8005892 <Transmit_Pressure_Temp_Data+0x56>
 8005868:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <Transmit_Pressure_Temp_Data+0x9c>)
 800586a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10f      	bne.n	8005892 <Transmit_Pressure_Temp_Data+0x56>
		    pressure_temp_data.pressure_hpa = pressure_value;
 8005872:	4b16      	ldr	r3, [pc, #88]	; (80058cc <Transmit_Pressure_Temp_Data+0x90>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a19      	ldr	r2, [pc, #100]	; (80058dc <Transmit_Pressure_Temp_Data+0xa0>)
 8005878:	6013      	str	r3, [r2, #0]
		    pressure_temp_data.temperature_celsius = temperature_p_value;
 800587a:	4b16      	ldr	r3, [pc, #88]	; (80058d4 <Transmit_Pressure_Temp_Data+0x98>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a17      	ldr	r2, [pc, #92]	; (80058dc <Transmit_Pressure_Temp_Data+0xa0>)
 8005880:	6053      	str	r3, [r2, #4]

		    return pressure_temp_data;
 8005882:	4a16      	ldr	r2, [pc, #88]	; (80058dc <Transmit_Pressure_Temp_Data+0xa0>)
 8005884:	f107 0308 	add.w	r3, r7, #8
 8005888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800588c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005890:	e00e      	b.n	80058b0 <Transmit_Pressure_Temp_Data+0x74>
	  } else {
		    pressure_temp_data.pressure_hpa = 0;
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <Transmit_Pressure_Temp_Data+0xa0>)
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
		    pressure_temp_data.temperature_celsius = 0;
 800589a:	4b10      	ldr	r3, [pc, #64]	; (80058dc <Transmit_Pressure_Temp_Data+0xa0>)
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	605a      	str	r2, [r3, #4]

		    return pressure_temp_data;
 80058a2:	4a0e      	ldr	r2, [pc, #56]	; (80058dc <Transmit_Pressure_Temp_Data+0xa0>)
 80058a4:	f107 0308 	add.w	r3, r7, #8
 80058a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058ac:	e883 0003 	stmia.w	r3, {r0, r1}
	  }


}
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	ee07 2a10 	vmov	s14, r2
 80058b8:	ee07 3a90 	vmov	s15, r3
 80058bc:	eeb0 0a47 	vmov.f32	s0, s14
 80058c0:	eef0 0a67 	vmov.f32	s1, s15
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20002b9c 	.word	0x20002b9c
 80058d0:	20002ba4 	.word	0x20002ba4
 80058d4:	20002ba0 	.word	0x20002ba0
 80058d8:	20002ba6 	.word	0x20002ba6
 80058dc:	20002ba8 	.word	0x20002ba8

080058e0 <UART_Transmit_Pyro>:
 */

#include "pyro.h"

void UART_Transmit_Pyro(const char* str)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7fa fcc1 	bl	8000270 <strlen>
 80058ee:	4603      	mov	r3, r0
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4803      	ldr	r0, [pc, #12]	; (8005908 <UART_Transmit_Pyro+0x28>)
 80058fa:	f006 fc9c 	bl	800c236 <HAL_UART_Transmit>
}
 80058fe:	bf00      	nop
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20002e1c 	.word	0x20002e1c

0800590c <pyro_arm>:

// Function to arm the pyro charge
void pyro_arm(int pyroSlot) {
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
    if (pyroSlot == 1) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d105      	bne.n	8005926 <pyro_arm+0x1a>
        // Arm Pyro 1 (set the GPIO pin low)
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_RESET);
 800591a:	2200      	movs	r2, #0
 800591c:	2140      	movs	r1, #64	; 0x40
 800591e:	4808      	ldr	r0, [pc, #32]	; (8005940 <pyro_arm+0x34>)
 8005920:	f002 ffcc 	bl	80088bc <HAL_GPIO_WritePin>
    } else if (pyroSlot == 2) {
        // Arm Pyro 2 (set the GPIO pin low)
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
    }
}
 8005924:	e007      	b.n	8005936 <pyro_arm+0x2a>
    } else if (pyroSlot == 2) {
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d104      	bne.n	8005936 <pyro_arm+0x2a>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
 800592c:	2200      	movs	r2, #0
 800592e:	2101      	movs	r1, #1
 8005930:	4804      	ldr	r0, [pc, #16]	; (8005944 <pyro_arm+0x38>)
 8005932:	f002 ffc3 	bl	80088bc <HAL_GPIO_WritePin>
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40020400 	.word	0x40020400
 8005944:	40020000 	.word	0x40020000

08005948 <pyro_fire>:

// Function to fire the pyro charge
void pyro_fire(int pyroSlot) {
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
    if (pyroSlot == 1) {
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d114      	bne.n	8005980 <pyro_fire+0x38>
        // Fire Pyro 1 (set the GPIO pin high)
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_SET);
 8005956:	2201      	movs	r2, #1
 8005958:	2140      	movs	r1, #64	; 0x40
 800595a:	4817      	ldr	r0, [pc, #92]	; (80059b8 <pyro_fire+0x70>)
 800595c:	f002 ffae 	bl	80088bc <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Ignition..");
 8005960:	4816      	ldr	r0, [pc, #88]	; (80059bc <pyro_fire+0x74>)
 8005962:	f7ff ffbd 	bl	80058e0 <UART_Transmit_Pyro>
        HAL_Delay(PYRO_IGNITION_TIME);
 8005966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800596a:	f002 fa57 	bl	8007e1c <HAL_Delay>
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_RESET);
 800596e:	2200      	movs	r2, #0
 8005970:	2140      	movs	r1, #64	; 0x40
 8005972:	4811      	ldr	r0, [pc, #68]	; (80059b8 <pyro_fire+0x70>)
 8005974:	f002 ffa2 	bl	80088bc <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Finished.\r\n");
 8005978:	4811      	ldr	r0, [pc, #68]	; (80059c0 <pyro_fire+0x78>)
 800597a:	f7ff ffb1 	bl	80058e0 <UART_Transmit_Pyro>
        UART_Transmit_Pyro("Ignition..");
        HAL_Delay(PYRO_IGNITION_TIME);
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
        UART_Transmit_Pyro("Finished.\r\n");
    }
}
 800597e:	e016      	b.n	80059ae <pyro_fire+0x66>
    } else if (pyroSlot == 2) {
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d113      	bne.n	80059ae <pyro_fire+0x66>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_SET);
 8005986:	2201      	movs	r2, #1
 8005988:	2101      	movs	r1, #1
 800598a:	480e      	ldr	r0, [pc, #56]	; (80059c4 <pyro_fire+0x7c>)
 800598c:	f002 ff96 	bl	80088bc <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Ignition..");
 8005990:	480a      	ldr	r0, [pc, #40]	; (80059bc <pyro_fire+0x74>)
 8005992:	f7ff ffa5 	bl	80058e0 <UART_Transmit_Pyro>
        HAL_Delay(PYRO_IGNITION_TIME);
 8005996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800599a:	f002 fa3f 	bl	8007e1c <HAL_Delay>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
 800599e:	2200      	movs	r2, #0
 80059a0:	2101      	movs	r1, #1
 80059a2:	4808      	ldr	r0, [pc, #32]	; (80059c4 <pyro_fire+0x7c>)
 80059a4:	f002 ff8a 	bl	80088bc <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Finished.\r\n");
 80059a8:	4805      	ldr	r0, [pc, #20]	; (80059c0 <pyro_fire+0x78>)
 80059aa:	f7ff ff99 	bl	80058e0 <UART_Transmit_Pyro>
}
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40020400 	.word	0x40020400
 80059bc:	0801c55c 	.word	0x0801c55c
 80059c0:	0801c568 	.word	0x0801c568
 80059c4:	40020000 	.word	0x40020000

080059c8 <Transmit_Temperature>:
{
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}


TemperatureData Transmit_Temperature(){
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af02      	add	r7, sp, #8


	buffer[0] = TEMP_READ_ADDRESS;
 80059ce:	4b40      	ldr	r3, [pc, #256]	; (8005ad0 <Transmit_Temperature+0x108>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
	//UART_Transmit_String("Reading temperature..\r\n");
	ret = HAL_I2C_Master_Transmit(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,1,HAL_MAX_DELAY);
 80059d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	2301      	movs	r3, #1
 80059dc:	4a3c      	ldr	r2, [pc, #240]	; (8005ad0 <Transmit_Temperature+0x108>)
 80059de:	2190      	movs	r1, #144	; 0x90
 80059e0:	483c      	ldr	r0, [pc, #240]	; (8005ad4 <Transmit_Temperature+0x10c>)
 80059e2:	f003 f8ed 	bl	8008bc0 <HAL_I2C_Master_Transmit>
 80059e6:	4603      	mov	r3, r0
 80059e8:	461a      	mov	r2, r3
 80059ea:	4b3b      	ldr	r3, [pc, #236]	; (8005ad8 <Transmit_Temperature+0x110>)
 80059ec:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK){
 80059ee:	4b3a      	ldr	r3, [pc, #232]	; (8005ad8 <Transmit_Temperature+0x110>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d006      	beq.n	8005a04 <Transmit_Temperature+0x3c>
		UART_Transmit_String("Error communicating with Temperature sensor");
 80059f6:	4839      	ldr	r0, [pc, #228]	; (8005adc <Transmit_Temperature+0x114>)
 80059f8:	f7fb fd9c 	bl	8001534 <UART_Transmit_String>
		UART_Transmit_String("\r\n");
 80059fc:	4838      	ldr	r0, [pc, #224]	; (8005ae0 <Transmit_Temperature+0x118>)
 80059fe:	f7fb fd99 	bl	8001534 <UART_Transmit_String>
 8005a02:	e059      	b.n	8005ab8 <Transmit_Temperature+0xf0>
	} else{
		ret = HAL_I2C_Master_Receive(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,2,HAL_MAX_DELAY);
 8005a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	4a30      	ldr	r2, [pc, #192]	; (8005ad0 <Transmit_Temperature+0x108>)
 8005a0e:	2190      	movs	r1, #144	; 0x90
 8005a10:	4830      	ldr	r0, [pc, #192]	; (8005ad4 <Transmit_Temperature+0x10c>)
 8005a12:	f003 f9d3 	bl	8008dbc <HAL_I2C_Master_Receive>
 8005a16:	4603      	mov	r3, r0
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4b2f      	ldr	r3, [pc, #188]	; (8005ad8 <Transmit_Temperature+0x110>)
 8005a1c:	701a      	strb	r2, [r3, #0]
		if (ret != HAL_OK){
 8005a1e:	4b2e      	ldr	r3, [pc, #184]	; (8005ad8 <Transmit_Temperature+0x110>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d006      	beq.n	8005a34 <Transmit_Temperature+0x6c>
			UART_Transmit_String("Error receiving data from Temperature sensor");
 8005a26:	482f      	ldr	r0, [pc, #188]	; (8005ae4 <Transmit_Temperature+0x11c>)
 8005a28:	f7fb fd84 	bl	8001534 <UART_Transmit_String>
			UART_Transmit_String("\r\n");
 8005a2c:	482c      	ldr	r0, [pc, #176]	; (8005ae0 <Transmit_Temperature+0x118>)
 8005a2e:	f7fb fd81 	bl	8001534 <UART_Transmit_String>
 8005a32:	e041      	b.n	8005ab8 <Transmit_Temperature+0xf0>
		} else {
			//Combine the bytes
			val = ((int16_t)buffer[0] << 4) | (buffer[1] >> 4);
 8005a34:	4b26      	ldr	r3, [pc, #152]	; (8005ad0 <Transmit_Temperature+0x108>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	b21a      	sxth	r2, r3
 8005a3c:	4b24      	ldr	r3, [pc, #144]	; (8005ad0 <Transmit_Temperature+0x108>)
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	b21b      	sxth	r3, r3
 8005a46:	4313      	orrs	r3, r2
 8005a48:	b21a      	sxth	r2, r3
 8005a4a:	4b27      	ldr	r3, [pc, #156]	; (8005ae8 <Transmit_Temperature+0x120>)
 8005a4c:	801a      	strh	r2, [r3, #0]

			//Convert to 2's complement (temperature can be negative)
			if(val > 0x7FF){
 8005a4e:	4b26      	ldr	r3, [pc, #152]	; (8005ae8 <Transmit_Temperature+0x120>)
 8005a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a58:	db09      	blt.n	8005a6e <Transmit_Temperature+0xa6>
				val |= 0xF000;
 8005a5a:	4b23      	ldr	r3, [pc, #140]	; (8005ae8 <Transmit_Temperature+0x120>)
 8005a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a60:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8005a64:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8005a68:	b21a      	sxth	r2, r3
 8005a6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ae8 <Transmit_Temperature+0x120>)
 8005a6c:	801a      	strh	r2, [r3, #0]
			}

			//Convert to float temperature value (Celsius)
			temp_c = val * 0.0625; // 0.0625 can be retreived into the datasheet
 8005a6e:	4b1e      	ldr	r3, [pc, #120]	; (8005ae8 <Transmit_Temperature+0x120>)
 8005a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fa fd55 	bl	8000524 <__aeabi_i2d>
 8005a7a:	f04f 0200 	mov.w	r2, #0
 8005a7e:	4b1b      	ldr	r3, [pc, #108]	; (8005aec <Transmit_Temperature+0x124>)
 8005a80:	f7fa fdba 	bl	80005f8 <__aeabi_dmul>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	f7fb f8ac 	bl	8000be8 <__aeabi_d2f>
 8005a90:	4603      	mov	r3, r0
 8005a92:	4a17      	ldr	r2, [pc, #92]	; (8005af0 <Transmit_Temperature+0x128>)
 8005a94:	6013      	str	r3, [r2, #0]

			//Convert to temperature to decimal format
			temp_c *= 100;
 8005a96:	4b16      	ldr	r3, [pc, #88]	; (8005af0 <Transmit_Temperature+0x128>)
 8005a98:	edd3 7a00 	vldr	s15, [r3]
 8005a9c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005af4 <Transmit_Temperature+0x12c>
 8005aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aa4:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <Transmit_Temperature+0x128>)
 8005aa6:	edc3 7a00 	vstr	s15, [r3]

			temperature_data.temperature_celsius = temp_c;
 8005aaa:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <Transmit_Temperature+0x128>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a12      	ldr	r2, [pc, #72]	; (8005af8 <Transmit_Temperature+0x130>)
 8005ab0:	6013      	str	r3, [r2, #0]

			return temperature_data;
 8005ab2:	4b11      	ldr	r3, [pc, #68]	; (8005af8 <Transmit_Temperature+0x130>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	e004      	b.n	8005ac2 <Transmit_Temperature+0xfa>

		}
	}

	//Error State
	temperature_data.temperature_celsius = -100.00;
 8005ab8:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <Transmit_Temperature+0x130>)
 8005aba:	4a10      	ldr	r2, [pc, #64]	; (8005afc <Transmit_Temperature+0x134>)
 8005abc:	601a      	str	r2, [r3, #0]
	return temperature_data;
 8005abe:	4b0e      	ldr	r3, [pc, #56]	; (8005af8 <Transmit_Temperature+0x130>)
 8005ac0:	681b      	ldr	r3, [r3, #0]

}
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20002bb4 	.word	0x20002bb4
 8005ad4:	20002c24 	.word	0x20002c24
 8005ad8:	20002bb0 	.word	0x20002bb0
 8005adc:	0801c574 	.word	0x0801c574
 8005ae0:	0801c5a0 	.word	0x0801c5a0
 8005ae4:	0801c5a4 	.word	0x0801c5a4
 8005ae8:	20002bc0 	.word	0x20002bc0
 8005aec:	3fb00000 	.word	0x3fb00000
 8005af0:	20002bc4 	.word	0x20002bc4
 8005af4:	42c80000 	.word	0x42c80000
 8005af8:	20002bc8 	.word	0x20002bc8
 8005afc:	c2c80000 	.word	0xc2c80000

08005b00 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8005b04:	2200      	movs	r2, #0
 8005b06:	2110      	movs	r1, #16
 8005b08:	4803      	ldr	r0, [pc, #12]	; (8005b18 <SELECT+0x18>)
 8005b0a:	f002 fed7 	bl	80088bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005b0e:	2001      	movs	r0, #1
 8005b10:	f002 f984 	bl	8007e1c <HAL_Delay>
}
 8005b14:	bf00      	nop
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40020000 	.word	0x40020000

08005b1c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8005b20:	2201      	movs	r2, #1
 8005b22:	2110      	movs	r1, #16
 8005b24:	4803      	ldr	r0, [pc, #12]	; (8005b34 <DESELECT+0x18>)
 8005b26:	f002 fec9 	bl	80088bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	f002 f976 	bl	8007e1c <HAL_Delay>
}
 8005b30:	bf00      	nop
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40020000 	.word	0x40020000

08005b38 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005b42:	bf00      	nop
 8005b44:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <SPI_TxByte+0x30>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d1f8      	bne.n	8005b44 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8005b52:	1df9      	adds	r1, r7, #7
 8005b54:	2364      	movs	r3, #100	; 0x64
 8005b56:	2201      	movs	r2, #1
 8005b58:	4803      	ldr	r0, [pc, #12]	; (8005b68 <SPI_TxByte+0x30>)
 8005b5a:	f005 f9de 	bl	800af1a <HAL_SPI_Transmit>
}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20002cec 	.word	0x20002cec

08005b6c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005b78:	bf00      	nop
 8005b7a:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <SPI_TxBuffer+0x30>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d1f8      	bne.n	8005b7a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8005b88:	887a      	ldrh	r2, [r7, #2]
 8005b8a:	2364      	movs	r3, #100	; 0x64
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4803      	ldr	r0, [pc, #12]	; (8005b9c <SPI_TxBuffer+0x30>)
 8005b90:	f005 f9c3 	bl	800af1a <HAL_SPI_Transmit>
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20002cec 	.word	0x20002cec

08005ba0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8005ba6:	23ff      	movs	r3, #255	; 0xff
 8005ba8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005baa:	bf00      	nop
 8005bac:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <SPI_RxByte+0x34>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d1f8      	bne.n	8005bac <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005bba:	1dba      	adds	r2, r7, #6
 8005bbc:	1df9      	adds	r1, r7, #7
 8005bbe:	2364      	movs	r3, #100	; 0x64
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4803      	ldr	r0, [pc, #12]	; (8005bd4 <SPI_RxByte+0x34>)
 8005bc6:	f005 fae4 	bl	800b192 <HAL_SPI_TransmitReceive>

	return data;
 8005bca:	79bb      	ldrb	r3, [r7, #6]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20002cec 	.word	0x20002cec

08005bd8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8005be0:	f7ff ffde 	bl	8005ba0 <SPI_RxByte>
 8005be4:	4603      	mov	r3, r0
 8005be6:	461a      	mov	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	701a      	strb	r2, [r3, #0]
}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <SD_ReadyWait+0x30>)
 8005bfc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005c00:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8005c02:	f7ff ffcd 	bl	8005ba0 <SPI_RxByte>
 8005c06:	4603      	mov	r3, r0
 8005c08:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	2bff      	cmp	r3, #255	; 0xff
 8005c0e:	d003      	beq.n	8005c18 <SD_ReadyWait+0x24>
 8005c10:	4b04      	ldr	r3, [pc, #16]	; (8005c24 <SD_ReadyWait+0x30>)
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f4      	bne.n	8005c02 <SD_ReadyWait+0xe>

	return res;
 8005c18:	79fb      	ldrb	r3, [r7, #7]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20002bce 	.word	0x20002bce

08005c28 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8005c2e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005c32:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8005c34:	f7ff ff72 	bl	8005b1c <DESELECT>
	for(int i = 0; i < 10; i++)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60bb      	str	r3, [r7, #8]
 8005c3c:	e005      	b.n	8005c4a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8005c3e:	20ff      	movs	r0, #255	; 0xff
 8005c40:	f7ff ff7a 	bl	8005b38 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	3301      	adds	r3, #1
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b09      	cmp	r3, #9
 8005c4e:	ddf6      	ble.n	8005c3e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8005c50:	f7ff ff56 	bl	8005b00 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8005c54:	2340      	movs	r3, #64	; 0x40
 8005c56:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8005c68:	2395      	movs	r3, #149	; 0x95
 8005c6a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	2106      	movs	r1, #6
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff ff7b 	bl	8005b6c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8005c76:	e002      	b.n	8005c7e <SD_PowerOn+0x56>
	{
		cnt--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8005c7e:	f7ff ff8f 	bl	8005ba0 <SPI_RxByte>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d002      	beq.n	8005c8e <SD_PowerOn+0x66>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f4      	bne.n	8005c78 <SD_PowerOn+0x50>
	}

	DESELECT();
 8005c8e:	f7ff ff45 	bl	8005b1c <DESELECT>
	SPI_TxByte(0XFF);
 8005c92:	20ff      	movs	r0, #255	; 0xff
 8005c94:	f7ff ff50 	bl	8005b38 <SPI_TxByte>

	PowerFlag = 1;
 8005c98:	4b03      	ldr	r3, [pc, #12]	; (8005ca8 <SD_PowerOn+0x80>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	701a      	strb	r2, [r3, #0]
}
 8005c9e:	bf00      	nop
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20002bd1 	.word	0x20002bd1

08005cac <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8005cb0:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <SD_PowerOff+0x14>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
}
 8005cb6:	bf00      	nop
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20002bd1 	.word	0x20002bd1

08005cc4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
	return PowerFlag;
 8005cc8:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <SD_CheckPower+0x14>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20002bd1 	.word	0x20002bd1

08005cdc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8005ce6:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <SD_RxDataBlock+0x58>)
 8005ce8:	22c8      	movs	r2, #200	; 0xc8
 8005cea:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8005cec:	f7ff ff58 	bl	8005ba0 <SPI_RxByte>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	2bff      	cmp	r3, #255	; 0xff
 8005cf8:	d103      	bne.n	8005d02 <SD_RxDataBlock+0x26>
 8005cfa:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <SD_RxDataBlock+0x58>)
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1f4      	bne.n	8005cec <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	2bfe      	cmp	r3, #254	; 0xfe
 8005d06:	d001      	beq.n	8005d0c <SD_RxDataBlock+0x30>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e00f      	b.n	8005d2c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff ff60 	bl	8005bd8 <SPI_RxBytePtr>
	} while(len--);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	1e5a      	subs	r2, r3, #1
 8005d1c:	603a      	str	r2, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f4      	bne.n	8005d0c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8005d22:	f7ff ff3d 	bl	8005ba0 <SPI_RxByte>
	SPI_RxByte();
 8005d26:	f7ff ff3b 	bl	8005ba0 <SPI_RxByte>

	return TRUE;
 8005d2a:	2301      	movs	r3, #1
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20002bcc 	.word	0x20002bcc

08005d38 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8005d48:	f7ff ff54 	bl	8005bf4 <SD_ReadyWait>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2bff      	cmp	r3, #255	; 0xff
 8005d50:	d001      	beq.n	8005d56 <SD_TxDataBlock+0x1e>
 8005d52:	2300      	movs	r3, #0
 8005d54:	e02f      	b.n	8005db6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff feed 	bl	8005b38 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	2bfd      	cmp	r3, #253	; 0xfd
 8005d62:	d020      	beq.n	8005da6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8005d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff feff 	bl	8005b6c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8005d6e:	f7ff ff17 	bl	8005ba0 <SPI_RxByte>
		SPI_RxByte();
 8005d72:	f7ff ff15 	bl	8005ba0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8005d76:	e00b      	b.n	8005d90 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8005d78:	f7ff ff12 	bl	8005ba0 <SPI_RxByte>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	2b05      	cmp	r3, #5
 8005d88:	d006      	beq.n	8005d98 <SD_TxDataBlock+0x60>
			i++;
 8005d8a:	7bbb      	ldrb	r3, [r7, #14]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8005d90:	7bbb      	ldrb	r3, [r7, #14]
 8005d92:	2b40      	cmp	r3, #64	; 0x40
 8005d94:	d9f0      	bls.n	8005d78 <SD_TxDataBlock+0x40>
 8005d96:	e000      	b.n	8005d9a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8005d98:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8005d9a:	bf00      	nop
 8005d9c:	f7ff ff00 	bl	8005ba0 <SPI_RxByte>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0fa      	beq.n	8005d9c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	2b05      	cmp	r3, #5
 8005dae:	d101      	bne.n	8005db4 <SD_TxDataBlock+0x7c>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <SD_TxDataBlock+0x7e>

	return FALSE;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	6039      	str	r1, [r7, #0]
 8005dc8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8005dca:	f7ff ff13 	bl	8005bf4 <SD_ReadyWait>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2bff      	cmp	r3, #255	; 0xff
 8005dd2:	d001      	beq.n	8005dd8 <SD_SendCmd+0x1a>
 8005dd4:	23ff      	movs	r3, #255	; 0xff
 8005dd6:	e042      	b.n	8005e5e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8005dd8:	79fb      	ldrb	r3, [r7, #7]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff feac 	bl	8005b38 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	0e1b      	lsrs	r3, r3, #24
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff fea6 	bl	8005b38 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	0c1b      	lsrs	r3, r3, #16
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff fea0 	bl	8005b38 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff fe9a 	bl	8005b38 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff fe95 	bl	8005b38 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	2b40      	cmp	r3, #64	; 0x40
 8005e12:	d102      	bne.n	8005e1a <SD_SendCmd+0x5c>
 8005e14:	2395      	movs	r3, #149	; 0x95
 8005e16:	73fb      	strb	r3, [r7, #15]
 8005e18:	e007      	b.n	8005e2a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	2b48      	cmp	r3, #72	; 0x48
 8005e1e:	d102      	bne.n	8005e26 <SD_SendCmd+0x68>
 8005e20:	2387      	movs	r3, #135	; 0x87
 8005e22:	73fb      	strb	r3, [r7, #15]
 8005e24:	e001      	b.n	8005e2a <SD_SendCmd+0x6c>
	else crc = 1;
 8005e26:	2301      	movs	r3, #1
 8005e28:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff fe83 	bl	8005b38 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	2b4c      	cmp	r3, #76	; 0x4c
 8005e36:	d101      	bne.n	8005e3c <SD_SendCmd+0x7e>
 8005e38:	f7ff feb2 	bl	8005ba0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8005e3c:	230a      	movs	r3, #10
 8005e3e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8005e40:	f7ff feae 	bl	8005ba0 <SPI_RxByte>
 8005e44:	4603      	mov	r3, r0
 8005e46:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8005e48:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	da05      	bge.n	8005e5c <SD_SendCmd+0x9e>
 8005e50:	7bbb      	ldrb	r3, [r7, #14]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	73bb      	strb	r3, [r7, #14]
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1f1      	bne.n	8005e40 <SD_SendCmd+0x82>

	return res;
 8005e5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8005e68:	b590      	push	{r4, r7, lr}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <SD_disk_initialize+0x14>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0d1      	b.n	8006020 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8005e7c:	4b6a      	ldr	r3, [pc, #424]	; (8006028 <SD_disk_initialize+0x1c0>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <SD_disk_initialize+0x2a>
 8005e8a:	4b67      	ldr	r3, [pc, #412]	; (8006028 <SD_disk_initialize+0x1c0>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	e0c6      	b.n	8006020 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8005e92:	f7ff fec9 	bl	8005c28 <SD_PowerOn>

	/* slave select */
	SELECT();
 8005e96:	f7ff fe33 	bl	8005b00 <SELECT>

	/* check disk type */
	type = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	2040      	movs	r0, #64	; 0x40
 8005ea2:	f7ff ff8c 	bl	8005dbe <SD_SendCmd>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	f040 80a1 	bne.w	8005ff0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8005eae:	4b5f      	ldr	r3, [pc, #380]	; (800602c <SD_disk_initialize+0x1c4>)
 8005eb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005eb4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8005eb6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005eba:	2048      	movs	r0, #72	; 0x48
 8005ebc:	f7ff ff7f 	bl	8005dbe <SD_SendCmd>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d155      	bne.n	8005f72 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	73fb      	strb	r3, [r7, #15]
 8005eca:	e00c      	b.n	8005ee6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8005ecc:	7bfc      	ldrb	r4, [r7, #15]
 8005ece:	f7ff fe67 	bl	8005ba0 <SPI_RxByte>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f104 0310 	add.w	r3, r4, #16
 8005eda:	443b      	add	r3, r7
 8005edc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	73fb      	strb	r3, [r7, #15]
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d9ef      	bls.n	8005ecc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8005eec:	7abb      	ldrb	r3, [r7, #10]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d17e      	bne.n	8005ff0 <SD_disk_initialize+0x188>
 8005ef2:	7afb      	ldrb	r3, [r7, #11]
 8005ef4:	2baa      	cmp	r3, #170	; 0xaa
 8005ef6:	d17b      	bne.n	8005ff0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005ef8:	2100      	movs	r1, #0
 8005efa:	2077      	movs	r0, #119	; 0x77
 8005efc:	f7ff ff5f 	bl	8005dbe <SD_SendCmd>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d807      	bhi.n	8005f16 <SD_disk_initialize+0xae>
 8005f06:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005f0a:	2069      	movs	r0, #105	; 0x69
 8005f0c:	f7ff ff57 	bl	8005dbe <SD_SendCmd>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d004      	beq.n	8005f20 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8005f16:	4b45      	ldr	r3, [pc, #276]	; (800602c <SD_disk_initialize+0x1c4>)
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1ec      	bne.n	8005ef8 <SD_disk_initialize+0x90>
 8005f1e:	e000      	b.n	8005f22 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005f20:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8005f22:	4b42      	ldr	r3, [pc, #264]	; (800602c <SD_disk_initialize+0x1c4>)
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d062      	beq.n	8005ff0 <SD_disk_initialize+0x188>
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	207a      	movs	r0, #122	; 0x7a
 8005f2e:	f7ff ff46 	bl	8005dbe <SD_SendCmd>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d15b      	bne.n	8005ff0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	73fb      	strb	r3, [r7, #15]
 8005f3c:	e00c      	b.n	8005f58 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8005f3e:	7bfc      	ldrb	r4, [r7, #15]
 8005f40:	f7ff fe2e 	bl	8005ba0 <SPI_RxByte>
 8005f44:	4603      	mov	r3, r0
 8005f46:	461a      	mov	r2, r3
 8005f48:	f104 0310 	add.w	r3, r4, #16
 8005f4c:	443b      	add	r3, r7
 8005f4e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	3301      	adds	r3, #1
 8005f56:	73fb      	strb	r3, [r7, #15]
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d9ef      	bls.n	8005f3e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8005f5e:	7a3b      	ldrb	r3, [r7, #8]
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <SD_disk_initialize+0x104>
 8005f68:	230c      	movs	r3, #12
 8005f6a:	e000      	b.n	8005f6e <SD_disk_initialize+0x106>
 8005f6c:	2304      	movs	r3, #4
 8005f6e:	73bb      	strb	r3, [r7, #14]
 8005f70:	e03e      	b.n	8005ff0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8005f72:	2100      	movs	r1, #0
 8005f74:	2077      	movs	r0, #119	; 0x77
 8005f76:	f7ff ff22 	bl	8005dbe <SD_SendCmd>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d808      	bhi.n	8005f92 <SD_disk_initialize+0x12a>
 8005f80:	2100      	movs	r1, #0
 8005f82:	2069      	movs	r0, #105	; 0x69
 8005f84:	f7ff ff1b 	bl	8005dbe <SD_SendCmd>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d801      	bhi.n	8005f92 <SD_disk_initialize+0x12a>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e000      	b.n	8005f94 <SD_disk_initialize+0x12c>
 8005f92:	2301      	movs	r3, #1
 8005f94:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d10e      	bne.n	8005fba <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	2077      	movs	r0, #119	; 0x77
 8005fa0:	f7ff ff0d 	bl	8005dbe <SD_SendCmd>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d80e      	bhi.n	8005fc8 <SD_disk_initialize+0x160>
 8005faa:	2100      	movs	r1, #0
 8005fac:	2069      	movs	r0, #105	; 0x69
 8005fae:	f7ff ff06 	bl	8005dbe <SD_SendCmd>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d107      	bne.n	8005fc8 <SD_disk_initialize+0x160>
 8005fb8:	e00c      	b.n	8005fd4 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005fba:	2100      	movs	r1, #0
 8005fbc:	2041      	movs	r0, #65	; 0x41
 8005fbe:	f7ff fefe 	bl	8005dbe <SD_SendCmd>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d004      	beq.n	8005fd2 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8005fc8:	4b18      	ldr	r3, [pc, #96]	; (800602c <SD_disk_initialize+0x1c4>)
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e2      	bne.n	8005f96 <SD_disk_initialize+0x12e>
 8005fd0:	e000      	b.n	8005fd4 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8005fd2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8005fd4:	4b15      	ldr	r3, [pc, #84]	; (800602c <SD_disk_initialize+0x1c4>)
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d007      	beq.n	8005fec <SD_disk_initialize+0x184>
 8005fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fe0:	2050      	movs	r0, #80	; 0x50
 8005fe2:	f7ff feec 	bl	8005dbe <SD_SendCmd>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <SD_disk_initialize+0x188>
 8005fec:	2300      	movs	r3, #0
 8005fee:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8005ff0:	4a0f      	ldr	r2, [pc, #60]	; (8006030 <SD_disk_initialize+0x1c8>)
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8005ff6:	f7ff fd91 	bl	8005b1c <DESELECT>
	SPI_RxByte();
 8005ffa:	f7ff fdd1 	bl	8005ba0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8005ffe:	7bbb      	ldrb	r3, [r7, #14]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d008      	beq.n	8006016 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8006004:	4b08      	ldr	r3, [pc, #32]	; (8006028 <SD_disk_initialize+0x1c0>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	b2db      	uxtb	r3, r3
 800600a:	f023 0301 	bic.w	r3, r3, #1
 800600e:	b2da      	uxtb	r2, r3
 8006010:	4b05      	ldr	r3, [pc, #20]	; (8006028 <SD_disk_initialize+0x1c0>)
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	e001      	b.n	800601a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8006016:	f7ff fe49 	bl	8005cac <SD_PowerOff>
	}

	return Stat;
 800601a:	4b03      	ldr	r3, [pc, #12]	; (8006028 <SD_disk_initialize+0x1c0>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	b2db      	uxtb	r3, r3
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	bd90      	pop	{r4, r7, pc}
 8006028:	20000004 	.word	0x20000004
 800602c:	20002bcc 	.word	0x20002bcc
 8006030:	20002bd0 	.word	0x20002bd0

08006034 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	4603      	mov	r3, r0
 800603c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800603e:	79fb      	ldrb	r3, [r7, #7]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <SD_disk_status+0x14>
 8006044:	2301      	movs	r3, #1
 8006046:	e002      	b.n	800604e <SD_disk_status+0x1a>
	return Stat;
 8006048:	4b04      	ldr	r3, [pc, #16]	; (800605c <SD_disk_status+0x28>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	b2db      	uxtb	r3, r3
}
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	20000004 	.word	0x20000004

08006060 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	4603      	mov	r3, r0
 800606e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d102      	bne.n	800607c <SD_disk_read+0x1c>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <SD_disk_read+0x20>
 800607c:	2304      	movs	r3, #4
 800607e:	e051      	b.n	8006124 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006080:	4b2a      	ldr	r3, [pc, #168]	; (800612c <SD_disk_read+0xcc>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <SD_disk_read+0x32>
 800608e:	2303      	movs	r3, #3
 8006090:	e048      	b.n	8006124 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8006092:	4b27      	ldr	r3, [pc, #156]	; (8006130 <SD_disk_read+0xd0>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b00      	cmp	r3, #0
 800609c:	d102      	bne.n	80060a4 <SD_disk_read+0x44>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	025b      	lsls	r3, r3, #9
 80060a2:	607b      	str	r3, [r7, #4]

	SELECT();
 80060a4:	f7ff fd2c 	bl	8005b00 <SELECT>

	if (count == 1)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d111      	bne.n	80060d2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	2051      	movs	r0, #81	; 0x51
 80060b2:	f7ff fe84 	bl	8005dbe <SD_SendCmd>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d129      	bne.n	8006110 <SD_disk_read+0xb0>
 80060bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060c0:	68b8      	ldr	r0, [r7, #8]
 80060c2:	f7ff fe0b 	bl	8005cdc <SD_RxDataBlock>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d021      	beq.n	8006110 <SD_disk_read+0xb0>
 80060cc:	2300      	movs	r3, #0
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	e01e      	b.n	8006110 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	2052      	movs	r0, #82	; 0x52
 80060d6:	f7ff fe72 	bl	8005dbe <SD_SendCmd>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d117      	bne.n	8006110 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80060e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060e4:	68b8      	ldr	r0, [r7, #8]
 80060e6:	f7ff fdf9 	bl	8005cdc <SD_RxDataBlock>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <SD_disk_read+0xa6>
				buff += 512;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80060f6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	603b      	str	r3, [r7, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1ed      	bne.n	80060e0 <SD_disk_read+0x80>
 8006104:	e000      	b.n	8006108 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8006106:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8006108:	2100      	movs	r1, #0
 800610a:	204c      	movs	r0, #76	; 0x4c
 800610c:	f7ff fe57 	bl	8005dbe <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8006110:	f7ff fd04 	bl	8005b1c <DESELECT>
	SPI_RxByte();
 8006114:	f7ff fd44 	bl	8005ba0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	bf14      	ite	ne
 800611e:	2301      	movne	r3, #1
 8006120:	2300      	moveq	r3, #0
 8006122:	b2db      	uxtb	r3, r3
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000004 	.word	0x20000004
 8006130:	20002bd0 	.word	0x20002bd0

08006134 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	607a      	str	r2, [r7, #4]
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	4603      	mov	r3, r0
 8006142:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d102      	bne.n	8006150 <SD_disk_write+0x1c>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <SD_disk_write+0x20>
 8006150:	2304      	movs	r3, #4
 8006152:	e06b      	b.n	800622c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006154:	4b37      	ldr	r3, [pc, #220]	; (8006234 <SD_disk_write+0x100>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	b2db      	uxtb	r3, r3
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <SD_disk_write+0x32>
 8006162:	2303      	movs	r3, #3
 8006164:	e062      	b.n	800622c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8006166:	4b33      	ldr	r3, [pc, #204]	; (8006234 <SD_disk_write+0x100>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <SD_disk_write+0x44>
 8006174:	2302      	movs	r3, #2
 8006176:	e059      	b.n	800622c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8006178:	4b2f      	ldr	r3, [pc, #188]	; (8006238 <SD_disk_write+0x104>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d102      	bne.n	800618a <SD_disk_write+0x56>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	025b      	lsls	r3, r3, #9
 8006188:	607b      	str	r3, [r7, #4]

	SELECT();
 800618a:	f7ff fcb9 	bl	8005b00 <SELECT>

	if (count == 1)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d110      	bne.n	80061b6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	2058      	movs	r0, #88	; 0x58
 8006198:	f7ff fe11 	bl	8005dbe <SD_SendCmd>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d13a      	bne.n	8006218 <SD_disk_write+0xe4>
 80061a2:	21fe      	movs	r1, #254	; 0xfe
 80061a4:	68b8      	ldr	r0, [r7, #8]
 80061a6:	f7ff fdc7 	bl	8005d38 <SD_TxDataBlock>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d033      	beq.n	8006218 <SD_disk_write+0xe4>
			count = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	e030      	b.n	8006218 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80061b6:	4b20      	ldr	r3, [pc, #128]	; (8006238 <SD_disk_write+0x104>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d007      	beq.n	80061d2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80061c2:	2100      	movs	r1, #0
 80061c4:	2077      	movs	r0, #119	; 0x77
 80061c6:	f7ff fdfa 	bl	8005dbe <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	2057      	movs	r0, #87	; 0x57
 80061ce:	f7ff fdf6 	bl	8005dbe <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80061d2:	6879      	ldr	r1, [r7, #4]
 80061d4:	2059      	movs	r0, #89	; 0x59
 80061d6:	f7ff fdf2 	bl	8005dbe <SD_SendCmd>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d11b      	bne.n	8006218 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80061e0:	21fc      	movs	r1, #252	; 0xfc
 80061e2:	68b8      	ldr	r0, [r7, #8]
 80061e4:	f7ff fda8 	bl	8005d38 <SD_TxDataBlock>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <SD_disk_write+0xd0>
				buff += 512;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80061f4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	603b      	str	r3, [r7, #0]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1ee      	bne.n	80061e0 <SD_disk_write+0xac>
 8006202:	e000      	b.n	8006206 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8006204:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8006206:	21fd      	movs	r1, #253	; 0xfd
 8006208:	2000      	movs	r0, #0
 800620a:	f7ff fd95 	bl	8005d38 <SD_TxDataBlock>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <SD_disk_write+0xe4>
			{
				count = 1;
 8006214:	2301      	movs	r3, #1
 8006216:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8006218:	f7ff fc80 	bl	8005b1c <DESELECT>
	SPI_RxByte();
 800621c:	f7ff fcc0 	bl	8005ba0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	bf14      	ite	ne
 8006226:	2301      	movne	r3, #1
 8006228:	2300      	moveq	r3, #0
 800622a:	b2db      	uxtb	r3, r3
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20000004 	.word	0x20000004
 8006238:	20002bd0 	.word	0x20002bd0

0800623c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800623c:	b590      	push	{r4, r7, lr}
 800623e:	b08b      	sub	sp, #44	; 0x2c
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	603a      	str	r2, [r7, #0]
 8006246:	71fb      	strb	r3, [r7, #7]
 8006248:	460b      	mov	r3, r1
 800624a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <SD_disk_ioctl+0x1e>
 8006256:	2304      	movs	r3, #4
 8006258:	e115      	b.n	8006486 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8006260:	79bb      	ldrb	r3, [r7, #6]
 8006262:	2b05      	cmp	r3, #5
 8006264:	d124      	bne.n	80062b0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b02      	cmp	r3, #2
 800626c:	d012      	beq.n	8006294 <SD_disk_ioctl+0x58>
 800626e:	2b02      	cmp	r3, #2
 8006270:	dc1a      	bgt.n	80062a8 <SD_disk_ioctl+0x6c>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <SD_disk_ioctl+0x40>
 8006276:	2b01      	cmp	r3, #1
 8006278:	d006      	beq.n	8006288 <SD_disk_ioctl+0x4c>
 800627a:	e015      	b.n	80062a8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800627c:	f7ff fd16 	bl	8005cac <SD_PowerOff>
			res = RES_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006286:	e0fc      	b.n	8006482 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8006288:	f7ff fcce 	bl	8005c28 <SD_PowerOn>
			res = RES_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006292:	e0f6      	b.n	8006482 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	1c5c      	adds	r4, r3, #1
 8006298:	f7ff fd14 	bl	8005cc4 <SD_CheckPower>
 800629c:	4603      	mov	r3, r0
 800629e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80062a6:	e0ec      	b.n	8006482 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80062a8:	2304      	movs	r3, #4
 80062aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062ae:	e0e8      	b.n	8006482 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80062b0:	4b77      	ldr	r3, [pc, #476]	; (8006490 <SD_disk_ioctl+0x254>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <SD_disk_ioctl+0x86>
 80062be:	2303      	movs	r3, #3
 80062c0:	e0e1      	b.n	8006486 <SD_disk_ioctl+0x24a>

		SELECT();
 80062c2:	f7ff fc1d 	bl	8005b00 <SELECT>

		switch (ctrl)
 80062c6:	79bb      	ldrb	r3, [r7, #6]
 80062c8:	2b0d      	cmp	r3, #13
 80062ca:	f200 80cb 	bhi.w	8006464 <SD_disk_ioctl+0x228>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <SD_disk_ioctl+0x98>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080063cf 	.word	0x080063cf
 80062d8:	0800630d 	.word	0x0800630d
 80062dc:	080063bf 	.word	0x080063bf
 80062e0:	08006465 	.word	0x08006465
 80062e4:	08006465 	.word	0x08006465
 80062e8:	08006465 	.word	0x08006465
 80062ec:	08006465 	.word	0x08006465
 80062f0:	08006465 	.word	0x08006465
 80062f4:	08006465 	.word	0x08006465
 80062f8:	08006465 	.word	0x08006465
 80062fc:	08006465 	.word	0x08006465
 8006300:	080063e1 	.word	0x080063e1
 8006304:	08006405 	.word	0x08006405
 8006308:	08006429 	.word	0x08006429
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800630c:	2100      	movs	r1, #0
 800630e:	2049      	movs	r0, #73	; 0x49
 8006310:	f7ff fd55 	bl	8005dbe <SD_SendCmd>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	f040 80a8 	bne.w	800646c <SD_disk_ioctl+0x230>
 800631c:	f107 030c 	add.w	r3, r7, #12
 8006320:	2110      	movs	r1, #16
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fcda 	bl	8005cdc <SD_RxDataBlock>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 809e 	beq.w	800646c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8006330:	7b3b      	ldrb	r3, [r7, #12]
 8006332:	099b      	lsrs	r3, r3, #6
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b01      	cmp	r3, #1
 8006338:	d10e      	bne.n	8006358 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800633a:	7d7b      	ldrb	r3, [r7, #21]
 800633c:	b29a      	uxth	r2, r3
 800633e:	7d3b      	ldrb	r3, [r7, #20]
 8006340:	b29b      	uxth	r3, r3
 8006342:	021b      	lsls	r3, r3, #8
 8006344:	b29b      	uxth	r3, r3
 8006346:	4413      	add	r3, r2
 8006348:	b29b      	uxth	r3, r3
 800634a:	3301      	adds	r3, #1
 800634c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800634e:	8bfb      	ldrh	r3, [r7, #30]
 8006350:	029a      	lsls	r2, r3, #10
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	e02e      	b.n	80063b6 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006358:	7c7b      	ldrb	r3, [r7, #17]
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	b2da      	uxtb	r2, r3
 8006360:	7dbb      	ldrb	r3, [r7, #22]
 8006362:	09db      	lsrs	r3, r3, #7
 8006364:	b2db      	uxtb	r3, r3
 8006366:	4413      	add	r3, r2
 8006368:	b2da      	uxtb	r2, r3
 800636a:	7d7b      	ldrb	r3, [r7, #21]
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	b2db      	uxtb	r3, r3
 8006370:	f003 0306 	and.w	r3, r3, #6
 8006374:	b2db      	uxtb	r3, r3
 8006376:	4413      	add	r3, r2
 8006378:	b2db      	uxtb	r3, r3
 800637a:	3302      	adds	r3, #2
 800637c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8006380:	7d3b      	ldrb	r3, [r7, #20]
 8006382:	099b      	lsrs	r3, r3, #6
 8006384:	b2db      	uxtb	r3, r3
 8006386:	b29a      	uxth	r2, r3
 8006388:	7cfb      	ldrb	r3, [r7, #19]
 800638a:	b29b      	uxth	r3, r3
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	b29b      	uxth	r3, r3
 8006390:	4413      	add	r3, r2
 8006392:	b29a      	uxth	r2, r3
 8006394:	7cbb      	ldrb	r3, [r7, #18]
 8006396:	029b      	lsls	r3, r3, #10
 8006398:	b29b      	uxth	r3, r3
 800639a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800639e:	b29b      	uxth	r3, r3
 80063a0:	4413      	add	r3, r2
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3301      	adds	r3, #1
 80063a6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80063a8:	8bfa      	ldrh	r2, [r7, #30]
 80063aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063ae:	3b09      	subs	r3, #9
 80063b0:	409a      	lsls	r2, r3
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80063bc:	e056      	b.n	800646c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063c4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80063cc:	e055      	b.n	800647a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80063ce:	f7ff fc11 	bl	8005bf4 <SD_ReadyWait>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2bff      	cmp	r3, #255	; 0xff
 80063d6:	d14b      	bne.n	8006470 <SD_disk_ioctl+0x234>
 80063d8:	2300      	movs	r3, #0
 80063da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80063de:	e047      	b.n	8006470 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80063e0:	2100      	movs	r1, #0
 80063e2:	2049      	movs	r0, #73	; 0x49
 80063e4:	f7ff fceb 	bl	8005dbe <SD_SendCmd>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d142      	bne.n	8006474 <SD_disk_ioctl+0x238>
 80063ee:	2110      	movs	r1, #16
 80063f0:	6a38      	ldr	r0, [r7, #32]
 80063f2:	f7ff fc73 	bl	8005cdc <SD_RxDataBlock>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d03b      	beq.n	8006474 <SD_disk_ioctl+0x238>
 80063fc:	2300      	movs	r3, #0
 80063fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006402:	e037      	b.n	8006474 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8006404:	2100      	movs	r1, #0
 8006406:	204a      	movs	r0, #74	; 0x4a
 8006408:	f7ff fcd9 	bl	8005dbe <SD_SendCmd>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d132      	bne.n	8006478 <SD_disk_ioctl+0x23c>
 8006412:	2110      	movs	r1, #16
 8006414:	6a38      	ldr	r0, [r7, #32]
 8006416:	f7ff fc61 	bl	8005cdc <SD_RxDataBlock>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d02b      	beq.n	8006478 <SD_disk_ioctl+0x23c>
 8006420:	2300      	movs	r3, #0
 8006422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006426:	e027      	b.n	8006478 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8006428:	2100      	movs	r1, #0
 800642a:	207a      	movs	r0, #122	; 0x7a
 800642c:	f7ff fcc7 	bl	8005dbe <SD_SendCmd>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d116      	bne.n	8006464 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8006436:	2300      	movs	r3, #0
 8006438:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800643c:	e00b      	b.n	8006456 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800643e:	6a3c      	ldr	r4, [r7, #32]
 8006440:	1c63      	adds	r3, r4, #1
 8006442:	623b      	str	r3, [r7, #32]
 8006444:	f7ff fbac 	bl	8005ba0 <SPI_RxByte>
 8006448:	4603      	mov	r3, r0
 800644a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800644c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006450:	3301      	adds	r3, #1
 8006452:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006456:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800645a:	2b03      	cmp	r3, #3
 800645c:	d9ef      	bls.n	800643e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8006464:	2304      	movs	r3, #4
 8006466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800646a:	e006      	b.n	800647a <SD_disk_ioctl+0x23e>
			break;
 800646c:	bf00      	nop
 800646e:	e004      	b.n	800647a <SD_disk_ioctl+0x23e>
			break;
 8006470:	bf00      	nop
 8006472:	e002      	b.n	800647a <SD_disk_ioctl+0x23e>
			break;
 8006474:	bf00      	nop
 8006476:	e000      	b.n	800647a <SD_disk_ioctl+0x23e>
			break;
 8006478:	bf00      	nop
		}

		DESELECT();
 800647a:	f7ff fb4f 	bl	8005b1c <DESELECT>
		SPI_RxByte();
 800647e:	f7ff fb8f 	bl	8005ba0 <SPI_RxByte>
	}

	return res;
 8006482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006486:	4618      	mov	r0, r3
 8006488:	372c      	adds	r7, #44	; 0x2c
 800648a:	46bd      	mov	sp, r7
 800648c:	bd90      	pop	{r4, r7, pc}
 800648e:	bf00      	nop
 8006490:	20000004 	.word	0x20000004

08006494 <lsm6ds3tr_c_read_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8006494:	b590      	push	{r4, r7, lr}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	461a      	mov	r2, r3
 80064a0:	460b      	mov	r3, r1
 80064a2:	72fb      	strb	r3, [r7, #11]
 80064a4:	4613      	mov	r3, r2
 80064a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685c      	ldr	r4, [r3, #4]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68d8      	ldr	r0, [r3, #12]
 80064b0:	893b      	ldrh	r3, [r7, #8]
 80064b2:	7af9      	ldrb	r1, [r7, #11]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	47a0      	blx	r4
 80064b8:	6178      	str	r0, [r7, #20]

  return ret;
 80064ba:	697b      	ldr	r3, [r7, #20]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd90      	pop	{r4, r7, pc}

080064c4 <lsm6ds3tr_c_write_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 80064c4:	b590      	push	{r4, r7, lr}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	461a      	mov	r2, r3
 80064d0:	460b      	mov	r3, r1
 80064d2:	72fb      	strb	r3, [r7, #11]
 80064d4:	4613      	mov	r3, r2
 80064d6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681c      	ldr	r4, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	68d8      	ldr	r0, [r3, #12]
 80064e0:	893b      	ldrh	r3, [r7, #8]
 80064e2:	7af9      	ldrb	r1, [r7, #11]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	47a0      	blx	r4
 80064e8:	6178      	str	r0, [r7, #20]

  return ret;
 80064ea:	697b      	ldr	r3, [r7, #20]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	371c      	adds	r7, #28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd90      	pop	{r4, r7, pc}

080064f4 <lsm6ds3tr_c_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6ds3tr_c_from_fs2g_to_mg(int16_t lsb)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	4603      	mov	r3, r0
 80064fc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 80064fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800650a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006520 <lsm6ds3tr_c_from_fs2g_to_mg+0x2c>
 800650e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006512:	eeb0 0a67 	vmov.f32	s0, s15
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	3d79db23 	.word	0x3d79db23

08006524 <lsm6ds3tr_c_from_fs500dps_to_mdps>:
{
  return ((float_t)lsb * 8.750f);
}

float_t lsm6ds3tr_c_from_fs500dps_to_mdps(int16_t lsb)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 17.50f);
 800652e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800653a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006550 <lsm6ds3tr_c_from_fs500dps_to_mdps+0x2c>
 800653e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006542:	eeb0 0a67 	vmov.f32	s0, s15
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	418c0000 	.word	0x418c0000

08006554 <lsm6ds3tr_c_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_xl_t val)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8006560:	f107 0208 	add.w	r2, r7, #8
 8006564:	2301      	movs	r3, #1
 8006566:	2110      	movs	r1, #16
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff ff93 	bl	8006494 <lsm6ds3tr_c_read_reg>
 800656e:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10f      	bne.n	8006596 <lsm6ds3tr_c_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	f003 0303 	and.w	r3, r3, #3
 800657c:	b2da      	uxtb	r2, r3
 800657e:	7a3b      	ldrb	r3, [r7, #8]
 8006580:	f362 0383 	bfi	r3, r2, #2, #2
 8006584:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8006586:	f107 0208 	add.w	r2, r7, #8
 800658a:	2301      	movs	r3, #1
 800658c:	2110      	movs	r1, #16
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff ff98 	bl	80064c4 <lsm6ds3tr_c_write_reg>
 8006594:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006596:	68fb      	ldr	r3, [r7, #12]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <lsm6ds3tr_c_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_xl_t val)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 80065ac:	f107 0208 	add.w	r2, r7, #8
 80065b0:	2301      	movs	r3, #1
 80065b2:	2110      	movs	r1, #16
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff ff6d 	bl	8006494 <lsm6ds3tr_c_read_reg>
 80065ba:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10f      	bne.n	80065e2 <lsm6ds3tr_c_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	7a3b      	ldrb	r3, [r7, #8]
 80065cc:	f362 1307 	bfi	r3, r2, #4, #4
 80065d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 80065d2:	f107 0208 	add.w	r2, r7, #8
 80065d6:	2301      	movs	r3, #1
 80065d8:	2110      	movs	r1, #16
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff ff72 	bl	80064c4 <lsm6ds3tr_c_write_reg>
 80065e0:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80065e2:	68fb      	ldr	r3, [r7, #12]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <lsm6ds3tr_c_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_g_t val)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 80065f8:	f107 0208 	add.w	r2, r7, #8
 80065fc:	2301      	movs	r3, #1
 80065fe:	2111      	movs	r1, #17
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff ff47 	bl	8006494 <lsm6ds3tr_c_read_reg>
 8006606:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10f      	bne.n	800662e <lsm6ds3tr_c_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	b2da      	uxtb	r2, r3
 8006616:	7a3b      	ldrb	r3, [r7, #8]
 8006618:	f362 0343 	bfi	r3, r2, #1, #3
 800661c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 800661e:	f107 0208 	add.w	r2, r7, #8
 8006622:	2301      	movs	r3, #1
 8006624:	2111      	movs	r1, #17
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff ff4c 	bl	80064c4 <lsm6ds3tr_c_write_reg>
 800662c:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 800662e:	68fb      	ldr	r3, [r7, #12]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <lsm6ds3tr_c_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_g_t val)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8006644:	f107 0208 	add.w	r2, r7, #8
 8006648:	2301      	movs	r3, #1
 800664a:	2111      	movs	r1, #17
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff ff21 	bl	8006494 <lsm6ds3tr_c_read_reg>
 8006652:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10f      	bne.n	800667a <lsm6ds3tr_c_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	b2da      	uxtb	r2, r3
 8006662:	7a3b      	ldrb	r3, [r7, #8]
 8006664:	f362 1307 	bfi	r3, r2, #4, #4
 8006668:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 800666a:	f107 0208 	add.w	r2, r7, #8
 800666e:	2301      	movs	r3, #1
 8006670:	2111      	movs	r1, #17
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff ff26 	bl	80064c4 <lsm6ds3tr_c_write_reg>
 8006678:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 800667a:	68fb      	ldr	r3, [r7, #12]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <lsm6ds3tr_c_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_block_data_update_set(stmdev_ctx_t *ctx,
                                          uint8_t val)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8006690:	f107 0208 	add.w	r2, r7, #8
 8006694:	2301      	movs	r3, #1
 8006696:	2112      	movs	r1, #18
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff fefb 	bl	8006494 <lsm6ds3tr_c_read_reg>
 800669e:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10f      	bne.n	80066c6 <lsm6ds3tr_c_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	7a3b      	ldrb	r3, [r7, #8]
 80066b0:	f362 1386 	bfi	r3, r2, #6, #1
 80066b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 80066b6:	f107 0208 	add.w	r2, r7, #8
 80066ba:	2301      	movs	r3, #1
 80066bc:	2112      	movs	r1, #18
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff ff00 	bl	80064c4 <lsm6ds3tr_c_write_reg>
 80066c4:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80066c6:	68fb      	ldr	r3, [r7, #12]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <lsm6ds3tr_c_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_G, buff, 6);
 80066da:	f107 020c 	add.w	r2, r7, #12
 80066de:	2306      	movs	r3, #6
 80066e0:	2122      	movs	r1, #34	; 0x22
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff fed6 	bl	8006494 <lsm6ds3tr_c_read_reg>
 80066e8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80066ea:	7b7b      	ldrb	r3, [r7, #13]
 80066ec:	b21a      	sxth	r2, r3
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	7b3b      	ldrb	r3, [r7, #12]
 8006700:	b29b      	uxth	r3, r3
 8006702:	4413      	add	r3, r2
 8006704:	b29b      	uxth	r3, r3
 8006706:	b21a      	sxth	r2, r3
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800670c:	7bfa      	ldrb	r2, [r7, #15]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	3302      	adds	r3, #2
 8006712:	b212      	sxth	r2, r2
 8006714:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	3302      	adds	r3, #2
 800671a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800671e:	b29b      	uxth	r3, r3
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	b29a      	uxth	r2, r3
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	b29b      	uxth	r3, r3
 8006728:	4413      	add	r3, r2
 800672a:	b29a      	uxth	r2, r3
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	3302      	adds	r3, #2
 8006730:	b212      	sxth	r2, r2
 8006732:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006734:	7c7a      	ldrb	r2, [r7, #17]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	3304      	adds	r3, #4
 800673a:	b212      	sxth	r2, r2
 800673c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	3304      	adds	r3, #4
 8006742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006746:	b29b      	uxth	r3, r3
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	b29a      	uxth	r2, r3
 800674c:	7c3b      	ldrb	r3, [r7, #16]
 800674e:	b29b      	uxth	r3, r3
 8006750:	4413      	add	r3, r2
 8006752:	b29a      	uxth	r2, r3
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	3304      	adds	r3, #4
 8006758:	b212      	sxth	r2, r2
 800675a:	801a      	strh	r2, [r3, #0]

  return ret;
 800675c:	697b      	ldr	r3, [r7, #20]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <lsm6ds3tr_c_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_acceleration_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b086      	sub	sp, #24
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_XL, buff, 6);
 8006770:	f107 020c 	add.w	r2, r7, #12
 8006774:	2306      	movs	r3, #6
 8006776:	2128      	movs	r1, #40	; 0x28
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff fe8b 	bl	8006494 <lsm6ds3tr_c_read_reg>
 800677e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006780:	7b7b      	ldrb	r3, [r7, #13]
 8006782:	b21a      	sxth	r2, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800678e:	b29b      	uxth	r3, r3
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	b29a      	uxth	r2, r3
 8006794:	7b3b      	ldrb	r3, [r7, #12]
 8006796:	b29b      	uxth	r3, r3
 8006798:	4413      	add	r3, r2
 800679a:	b29b      	uxth	r3, r3
 800679c:	b21a      	sxth	r2, r3
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80067a2:	7bfa      	ldrb	r2, [r7, #15]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	3302      	adds	r3, #2
 80067a8:	b212      	sxth	r2, r2
 80067aa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	3302      	adds	r3, #2
 80067b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	4413      	add	r3, r2
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	3302      	adds	r3, #2
 80067c6:	b212      	sxth	r2, r2
 80067c8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80067ca:	7c7a      	ldrb	r2, [r7, #17]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	3304      	adds	r3, #4
 80067d0:	b212      	sxth	r2, r2
 80067d2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	3304      	adds	r3, #4
 80067d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	7c3b      	ldrb	r3, [r7, #16]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	4413      	add	r3, r2
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	3304      	adds	r3, #4
 80067ee:	b212      	sxth	r2, r2
 80067f0:	801a      	strh	r2, [r3, #0]

  return ret;
 80067f2:	697b      	ldr	r3, [r7, #20]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <lsm6ds3tr_c_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_WHO_AM_I, buff, 1);
 8006806:	2301      	movs	r3, #1
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	210f      	movs	r1, #15
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff fe41 	bl	8006494 <lsm6ds3tr_c_read_reg>
 8006812:	60f8      	str	r0, [r7, #12]

  return ret;
 8006814:	68fb      	ldr	r3, [r7, #12]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <lsm6ds3tr_c_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	460b      	mov	r3, r1
 8006828:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 800682a:	f107 0208 	add.w	r2, r7, #8
 800682e:	2301      	movs	r3, #1
 8006830:	2112      	movs	r1, #18
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff fe2e 	bl	8006494 <lsm6ds3tr_c_read_reg>
 8006838:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10f      	bne.n	8006860 <lsm6ds3tr_c_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	b2da      	uxtb	r2, r3
 8006848:	7a3b      	ldrb	r3, [r7, #8]
 800684a:	f362 0300 	bfi	r3, r2, #0, #1
 800684e:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8006850:	f107 0208 	add.w	r2, r7, #8
 8006854:	2301      	movs	r3, #1
 8006856:	2112      	movs	r1, #18
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff fe33 	bl	80064c4 <lsm6ds3tr_c_write_reg>
 800685e:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8006860:	68fb      	ldr	r3, [r7, #12]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <lsm6ds3tr_c_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8006874:	f107 0208 	add.w	r2, r7, #8
 8006878:	2301      	movs	r3, #1
 800687a:	2112      	movs	r1, #18
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff fe09 	bl	8006494 <lsm6ds3tr_c_read_reg>
 8006882:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 8006884:	7a3b      	ldrb	r3, [r7, #8]
 8006886:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800688a:	b2db      	uxtb	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	701a      	strb	r2, [r3, #0]

  return ret;
 8006892:	68fb      	ldr	r3, [r7, #12]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <lsm6ds3tr_c_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_filter_analog_set(stmdev_ctx_t *ctx,
                                         lsm6ds3tr_c_bw0_xl_t val)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 80068a8:	f107 0208 	add.w	r2, r7, #8
 80068ac:	2301      	movs	r3, #1
 80068ae:	2110      	movs	r1, #16
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff fdef 	bl	8006494 <lsm6ds3tr_c_read_reg>
 80068b6:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10f      	bne.n	80068de <lsm6ds3tr_c_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	7a3b      	ldrb	r3, [r7, #8]
 80068c8:	f362 0300 	bfi	r3, r2, #0, #1
 80068cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 80068ce:	f107 0208 	add.w	r2, r7, #8
 80068d2:	2301      	movs	r3, #1
 80068d4:	2110      	movs	r1, #16
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff fdf4 	bl	80064c4 <lsm6ds3tr_c_write_reg>
 80068dc:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80068de:	68fb      	ldr	r3, [r7, #12]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <lsm6ds3tr_c_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                         lsm6ds3tr_c_input_composite_t val)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 80068f4:	f107 0208 	add.w	r2, r7, #8
 80068f8:	2301      	movs	r3, #1
 80068fa:	2117      	movs	r1, #23
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff fdc9 	bl	8006494 <lsm6ds3tr_c_read_reg>
 8006902:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d120      	bne.n	800694c <lsm6ds3tr_c_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	091b      	lsrs	r3, r3, #4
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	b2da      	uxtb	r2, r3
 8006914:	7a3b      	ldrb	r3, [r7, #8]
 8006916:	f362 03c3 	bfi	r3, r2, #3, #1
 800691a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	b2da      	uxtb	r2, r3
 8006924:	7a3b      	ldrb	r3, [r7, #8]
 8006926:	f362 1346 	bfi	r3, r2, #5, #2
 800692a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 800692c:	7a3b      	ldrb	r3, [r7, #8]
 800692e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006932:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8006934:	7a3b      	ldrb	r3, [r7, #8]
 8006936:	f36f 0382 	bfc	r3, #2, #1
 800693a:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 800693c:	f107 0208 	add.w	r2, r7, #8
 8006940:	2301      	movs	r3, #1
 8006942:	2117      	movs	r1, #23
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff fdbd 	bl	80064c4 <lsm6ds3tr_c_write_reg>
 800694a:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 800694c:	68fb      	ldr	r3, [r7, #12]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <lsm6ds3tr_c_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_band_pass_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_lpf1_sel_g_t val)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b086      	sub	sp, #24
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	460b      	mov	r3, r1
 8006960:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl4_c_t ctrl4_c;
  lsm6ds3tr_c_ctrl6_c_t ctrl6_c;
  lsm6ds3tr_c_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 8006962:	f107 0208 	add.w	r2, r7, #8
 8006966:	2301      	movs	r3, #1
 8006968:	2116      	movs	r1, #22
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff fd92 	bl	8006494 <lsm6ds3tr_c_read_reg>
 8006970:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl7_g, 1);

  if (ret == 0)
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d157      	bne.n	8006a28 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	091b      	lsrs	r3, r3, #4
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	b2da      	uxtb	r2, r3
 8006982:	7a3b      	ldrb	r3, [r7, #8]
 8006984:	f362 1305 	bfi	r3, r2, #4, #2
 8006988:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	09db      	lsrs	r3, r3, #7
 800698e:	b2db      	uxtb	r3, r3
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	b2da      	uxtb	r2, r3
 8006996:	7a3b      	ldrb	r3, [r7, #8]
 8006998:	f362 1386 	bfi	r3, r2, #6, #1
 800699c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 800699e:	f107 0208 	add.w	r2, r7, #8
 80069a2:	2301      	movs	r3, #1
 80069a4:	2116      	movs	r1, #22
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff fd8c 	bl	80064c4 <lsm6ds3tr_c_write_reg>
 80069ac:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl7_g, 1);

    if (ret == 0)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d139      	bne.n	8006a28 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
    {
      ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 80069b4:	f107 020c 	add.w	r2, r7, #12
 80069b8:	2301      	movs	r3, #1
 80069ba:	2115      	movs	r1, #21
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff fd69 	bl	8006494 <lsm6ds3tr_c_read_reg>
 80069c2:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl6_c, 1);

      if (ret == 0)
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d12e      	bne.n	8006a28 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 80069ca:	78fb      	ldrb	r3, [r7, #3]
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	7b3b      	ldrb	r3, [r7, #12]
 80069d4:	f362 0301 	bfi	r3, r2, #0, #2
 80069d8:	733b      	strb	r3, [r7, #12]
        ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 80069da:	f107 020c 	add.w	r2, r7, #12
 80069de:	2301      	movs	r3, #1
 80069e0:	2115      	movs	r1, #21
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff fd6e 	bl	80064c4 <lsm6ds3tr_c_write_reg>
 80069e8:	6178      	str	r0, [r7, #20]
                                    (uint8_t *)&ctrl6_c, 1);

        if (ret == 0)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d11b      	bne.n	8006a28 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
        {
          ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 80069f0:	f107 0210 	add.w	r2, r7, #16
 80069f4:	2301      	movs	r3, #1
 80069f6:	2113      	movs	r1, #19
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7ff fd4b 	bl	8006494 <lsm6ds3tr_c_read_reg>
 80069fe:	6178      	str	r0, [r7, #20]
                                     (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d110      	bne.n	8006a28 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8006a06:	78fb      	ldrb	r3, [r7, #3]
 8006a08:	08db      	lsrs	r3, r3, #3
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	7c3b      	ldrb	r3, [r7, #16]
 8006a12:	f362 0341 	bfi	r3, r2, #1, #1
 8006a16:	743b      	strb	r3, [r7, #16]
            ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8006a18:	f107 0210 	add.w	r2, r7, #16
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	2113      	movs	r1, #19
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff fd4f 	bl	80064c4 <lsm6ds3tr_c_write_reg>
 8006a26:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8006a28:	697b      	ldr	r3, [r7, #20]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <lsm6ds3tr_c_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_i2c_interface_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_i2c_disable_t val)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8006a3e:	f107 0208 	add.w	r2, r7, #8
 8006a42:	2301      	movs	r3, #1
 8006a44:	2113      	movs	r1, #19
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff fd24 	bl	8006494 <lsm6ds3tr_c_read_reg>
 8006a4c:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl4_c, 1);

  if (ret == 0)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10f      	bne.n	8006a74 <lsm6ds3tr_c_i2c_interface_set+0x42>
  {
    ctrl4_c.i2c_disable = (uint8_t)val;
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	7a3b      	ldrb	r3, [r7, #8]
 8006a5e:	f362 0382 	bfi	r3, r2, #2, #1
 8006a62:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8006a64:	f107 0208 	add.w	r2, r7, #8
 8006a68:	2301      	movs	r3, #1
 8006a6a:	2113      	movs	r1, #19
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff fd29 	bl	80064c4 <lsm6ds3tr_c_write_reg>
 8006a72:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl4_c, 1);
  }

  return ret;
 8006a74:	68fb      	ldr	r3, [r7, #12]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006a86:	f001 f957 	bl	8007d38 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006a8a:	f000 f84f 	bl	8006b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006a8e:	f000 fbaf 	bl	80071f0 <MX_GPIO_Init>
  MX_ADC3_Init();
 8006a92:	f000 f8b9 	bl	8006c08 <MX_ADC3_Init>
  MX_I2C1_Init();
 8006a96:	f000 f91d 	bl	8006cd4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8006a9a:	f000 f949 	bl	8006d30 <MX_I2C2_Init>
  MX_SPI1_Init();
 8006a9e:	f000 f99b 	bl	8006dd8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8006aa2:	f000 faf5 	bl	8007090 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006aa6:	f000 fb1d 	bl	80070e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8006aaa:	f000 fb45 	bl	8007138 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8006aae:	f000 fb6d 	bl	800718c <MX_USART6_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8006ab2:	f000 fb95 	bl	80071e0 <MX_USB_OTG_FS_USB_Init>
  MX_TIM2_Init();
 8006ab6:	f000 f9c5 	bl	8006e44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8006aba:	f000 fa0f 	bl	8006edc <MX_TIM3_Init>
  MX_TIM5_Init();
 8006abe:	f000 fa99 	bl	8006ff4 <MX_TIM5_Init>
  MX_FATFS_Init();
 8006ac2:	f005 ffcf 	bl	800ca64 <MX_FATFS_Init>
  MX_RTC_Init();
 8006ac6:	f000 f961 	bl	8006d8c <MX_RTC_Init>
  MX_CRC_Init();
 8006aca:	f000 f8ef 	bl	8006cac <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin, GPIO_PIN_SET); // LED_ON Pin enabled
 8006ace:	2201      	movs	r2, #1
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	4812      	ldr	r0, [pc, #72]	; (8006b1c <main+0x9c>)
 8006ad4:	f001 fef2 	bl	80088bc <HAL_GPIO_WritePin>



  //INITIALIZATION SECTOR

  printIntroTitle();
 8006ad8:	f7fa fd42 	bl	8001560 <printIntroTitle>
  printOptions();
 8006adc:	f7fa fd6a 	bl	80015b4 <printOptions>
	  // Usage : screen /dev/tty.usbserial-1120 (OR tty.usbserial-1130)  115200
	  //MENU SECTOR ------------------------------------------------------------------------


	  char userInput;
	  UART_Transmit_String("\r\nChoice: ");
 8006ae0:	480f      	ldr	r0, [pc, #60]	; (8006b20 <main+0xa0>)
 8006ae2:	f7fa fd27 	bl	8001534 <UART_Transmit_String>
	         HAL_UART_Receive(&huart1, (uint8_t *)&userInput, sizeof(userInput), HAL_MAX_DELAY);
 8006ae6:	1df9      	adds	r1, r7, #7
 8006ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aec:	2201      	movs	r2, #1
 8006aee:	480d      	ldr	r0, [pc, #52]	; (8006b24 <main+0xa4>)
 8006af0:	f005 fc33 	bl	800c35a <HAL_UART_Receive>

	         switch (userInput)
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	2b0a      	cmp	r3, #10
 8006af8:	d002      	beq.n	8006b00 <main+0x80>
 8006afa:	2b0d      	cmp	r3, #13
 8006afc:	d104      	bne.n	8006b08 <main+0x88>
	         {
	         case '\r': // Ignore carriage return characters
	             break;
 8006afe:	e008      	b.n	8006b12 <main+0x92>
	         case '\n': // Process command on new line (Enter pressed)
	             UART_Transmit_String("\r\n"); // Move to a new line after the command
 8006b00:	4809      	ldr	r0, [pc, #36]	; (8006b28 <main+0xa8>)
 8006b02:	f7fa fd17 	bl	8001534 <UART_Transmit_String>
	             break;
 8006b06:	e004      	b.n	8006b12 <main+0x92>
	         default:
	             handleUserCommand(userInput);
 8006b08:	79fb      	ldrb	r3, [r7, #7]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fa ffc0 	bl	8001a90 <handleUserCommand>
	             break;
 8006b10:	bf00      	nop
	         }

	         HAL_Delay(100);
 8006b12:	2064      	movs	r0, #100	; 0x64
 8006b14:	f001 f982 	bl	8007e1c <HAL_Delay>
  {
 8006b18:	e7e2      	b.n	8006ae0 <main+0x60>
 8006b1a:	bf00      	nop
 8006b1c:	40020400 	.word	0x40020400
 8006b20:	0801c5dc 	.word	0x0801c5dc
 8006b24:	20002e1c 	.word	0x20002e1c
 8006b28:	0801c5e8 	.word	0x0801c5e8

08006b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b094      	sub	sp, #80	; 0x50
 8006b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b32:	f107 0320 	add.w	r3, r7, #32
 8006b36:	2230      	movs	r2, #48	; 0x30
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f00f faf0 	bl	8016120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b40:	f107 030c 	add.w	r3, r7, #12
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	605a      	str	r2, [r3, #4]
 8006b4a:	609a      	str	r2, [r3, #8]
 8006b4c:	60da      	str	r2, [r3, #12]
 8006b4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b50:	2300      	movs	r3, #0
 8006b52:	60bb      	str	r3, [r7, #8]
 8006b54:	4b2a      	ldr	r3, [pc, #168]	; (8006c00 <SystemClock_Config+0xd4>)
 8006b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b58:	4a29      	ldr	r2, [pc, #164]	; (8006c00 <SystemClock_Config+0xd4>)
 8006b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8006b60:	4b27      	ldr	r3, [pc, #156]	; (8006c00 <SystemClock_Config+0xd4>)
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b68:	60bb      	str	r3, [r7, #8]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	607b      	str	r3, [r7, #4]
 8006b70:	4b24      	ldr	r3, [pc, #144]	; (8006c04 <SystemClock_Config+0xd8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a23      	ldr	r2, [pc, #140]	; (8006c04 <SystemClock_Config+0xd8>)
 8006b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	4b21      	ldr	r3, [pc, #132]	; (8006c04 <SystemClock_Config+0xd8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b84:	607b      	str	r3, [r7, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8006b88:	230b      	movs	r3, #11
 8006b8a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006b92:	2301      	movs	r3, #1
 8006b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006b96:	2310      	movs	r3, #16
 8006b98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006ba2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8006ba8:	230f      	movs	r3, #15
 8006baa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8006bac:	2390      	movs	r3, #144	; 0x90
 8006bae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8006bb4:	2305      	movs	r3, #5
 8006bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bb8:	f107 0320 	add.w	r3, r7, #32
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f003 faef 	bl	800a1a0 <HAL_RCC_OscConfig>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8006bc8:	f000 fc04 	bl	80073d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006bcc:	230f      	movs	r3, #15
 8006bce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006be0:	f107 030c 	add.w	r3, r7, #12
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f003 fd52 	bl	800a690 <HAL_RCC_ClockConfig>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8006bf2:	f000 fbef 	bl	80073d4 <Error_Handler>
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	3750      	adds	r7, #80	; 0x50
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40023800 	.word	0x40023800
 8006c04:	40007000 	.word	0x40007000

08006c08 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006c0e:	463b      	mov	r3, r7
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	605a      	str	r2, [r3, #4]
 8006c16:	609a      	str	r2, [r3, #8]
 8006c18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8006c1a:	4b21      	ldr	r3, [pc, #132]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c1c:	4a21      	ldr	r2, [pc, #132]	; (8006ca4 <MX_ADC3_Init+0x9c>)
 8006c1e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8006c20:	4b1f      	ldr	r3, [pc, #124]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8006c26:	4b1e      	ldr	r3, [pc, #120]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8006c2c:	4b1c      	ldr	r3, [pc, #112]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8006c32:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8006c38:	4b19      	ldr	r3, [pc, #100]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006c40:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006c46:	4b16      	ldr	r3, [pc, #88]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c48:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <MX_ADC3_Init+0xa0>)
 8006c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006c4c:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8006c52:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006c60:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8006c66:	480e      	ldr	r0, [pc, #56]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c68:	f001 f8fc 	bl	8007e64 <HAL_ADC_Init>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8006c72:	f000 fbaf 	bl	80073d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006c76:	230c      	movs	r3, #12
 8006c78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8006c82:	463b      	mov	r3, r7
 8006c84:	4619      	mov	r1, r3
 8006c86:	4806      	ldr	r0, [pc, #24]	; (8006ca0 <MX_ADC3_Init+0x98>)
 8006c88:	f001 f930 	bl	8007eec <HAL_ADC_ConfigChannel>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8006c92:	f000 fb9f 	bl	80073d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8006c96:	bf00      	nop
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20002bd4 	.word	0x20002bd4
 8006ca4:	40012200 	.word	0x40012200
 8006ca8:	0f000001 	.word	0x0f000001

08006cac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8006cb0:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <MX_CRC_Init+0x20>)
 8006cb2:	4a07      	ldr	r2, [pc, #28]	; (8006cd0 <MX_CRC_Init+0x24>)
 8006cb4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006cb6:	4805      	ldr	r0, [pc, #20]	; (8006ccc <MX_CRC_Init+0x20>)
 8006cb8:	f001 fc47 	bl	800854a <HAL_CRC_Init>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8006cc2:	f000 fb87 	bl	80073d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8006cc6:	bf00      	nop
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20002c1c 	.word	0x20002c1c
 8006cd0:	40023000 	.word	0x40023000

08006cd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006cd8:	4b12      	ldr	r3, [pc, #72]	; (8006d24 <MX_I2C1_Init+0x50>)
 8006cda:	4a13      	ldr	r2, [pc, #76]	; (8006d28 <MX_I2C1_Init+0x54>)
 8006cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006cde:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <MX_I2C1_Init+0x50>)
 8006ce0:	4a12      	ldr	r2, [pc, #72]	; (8006d2c <MX_I2C1_Init+0x58>)
 8006ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006ce4:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <MX_I2C1_Init+0x50>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006cea:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <MX_I2C1_Init+0x50>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006cf0:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <MX_I2C1_Init+0x50>)
 8006cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006cf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006cf8:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <MX_I2C1_Init+0x50>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006cfe:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <MX_I2C1_Init+0x50>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006d04:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <MX_I2C1_Init+0x50>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006d0a:	4b06      	ldr	r3, [pc, #24]	; (8006d24 <MX_I2C1_Init+0x50>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006d10:	4804      	ldr	r0, [pc, #16]	; (8006d24 <MX_I2C1_Init+0x50>)
 8006d12:	f001 fe11 	bl	8008938 <HAL_I2C_Init>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006d1c:	f000 fb5a 	bl	80073d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006d20:	bf00      	nop
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20002c24 	.word	0x20002c24
 8006d28:	40005400 	.word	0x40005400
 8006d2c:	000186a0 	.word	0x000186a0

08006d30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006d34:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <MX_I2C2_Init+0x50>)
 8006d36:	4a13      	ldr	r2, [pc, #76]	; (8006d84 <MX_I2C2_Init+0x54>)
 8006d38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006d3a:	4b11      	ldr	r3, [pc, #68]	; (8006d80 <MX_I2C2_Init+0x50>)
 8006d3c:	4a12      	ldr	r2, [pc, #72]	; (8006d88 <MX_I2C2_Init+0x58>)
 8006d3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006d40:	4b0f      	ldr	r3, [pc, #60]	; (8006d80 <MX_I2C2_Init+0x50>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006d46:	4b0e      	ldr	r3, [pc, #56]	; (8006d80 <MX_I2C2_Init+0x50>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006d4c:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <MX_I2C2_Init+0x50>)
 8006d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006d52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006d54:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <MX_I2C2_Init+0x50>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006d5a:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <MX_I2C2_Init+0x50>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006d60:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <MX_I2C2_Init+0x50>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006d66:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <MX_I2C2_Init+0x50>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006d6c:	4804      	ldr	r0, [pc, #16]	; (8006d80 <MX_I2C2_Init+0x50>)
 8006d6e:	f001 fde3 	bl	8008938 <HAL_I2C_Init>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006d78:	f000 fb2c 	bl	80073d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006d7c:	bf00      	nop
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20002c78 	.word	0x20002c78
 8006d84:	40005800 	.word	0x40005800
 8006d88:	000186a0 	.word	0x000186a0

08006d8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006d90:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <MX_RTC_Init+0x44>)
 8006d92:	4a10      	ldr	r2, [pc, #64]	; (8006dd4 <MX_RTC_Init+0x48>)
 8006d94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006d96:	4b0e      	ldr	r3, [pc, #56]	; (8006dd0 <MX_RTC_Init+0x44>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <MX_RTC_Init+0x44>)
 8006d9e:	227f      	movs	r2, #127	; 0x7f
 8006da0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8006da2:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <MX_RTC_Init+0x44>)
 8006da4:	22ff      	movs	r2, #255	; 0xff
 8006da6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006da8:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <MX_RTC_Init+0x44>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006dae:	4b08      	ldr	r3, [pc, #32]	; (8006dd0 <MX_RTC_Init+0x44>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006db4:	4b06      	ldr	r3, [pc, #24]	; (8006dd0 <MX_RTC_Init+0x44>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006dba:	4805      	ldr	r0, [pc, #20]	; (8006dd0 <MX_RTC_Init+0x44>)
 8006dbc:	f003 ff2a 	bl	800ac14 <HAL_RTC_Init>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8006dc6:	f000 fb05 	bl	80073d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006dca:	bf00      	nop
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20002ccc 	.word	0x20002ccc
 8006dd4:	40002800 	.word	0x40002800

08006dd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006ddc:	4b17      	ldr	r3, [pc, #92]	; (8006e3c <MX_SPI1_Init+0x64>)
 8006dde:	4a18      	ldr	r2, [pc, #96]	; (8006e40 <MX_SPI1_Init+0x68>)
 8006de0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006de2:	4b16      	ldr	r3, [pc, #88]	; (8006e3c <MX_SPI1_Init+0x64>)
 8006de4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006de8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006dea:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <MX_SPI1_Init+0x64>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006df0:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <MX_SPI1_Init+0x64>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006df6:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <MX_SPI1_Init+0x64>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006dfc:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <MX_SPI1_Init+0x64>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006e02:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <MX_SPI1_Init+0x64>)
 8006e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8006e0a:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <MX_SPI1_Init+0x64>)
 8006e0c:	2230      	movs	r2, #48	; 0x30
 8006e0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006e10:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <MX_SPI1_Init+0x64>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006e16:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <MX_SPI1_Init+0x64>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e1c:	4b07      	ldr	r3, [pc, #28]	; (8006e3c <MX_SPI1_Init+0x64>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006e22:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <MX_SPI1_Init+0x64>)
 8006e24:	220a      	movs	r2, #10
 8006e26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006e28:	4804      	ldr	r0, [pc, #16]	; (8006e3c <MX_SPI1_Init+0x64>)
 8006e2a:	f003 ffed 	bl	800ae08 <HAL_SPI_Init>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006e34:	f000 face 	bl	80073d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006e38:	bf00      	nop
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20002cec 	.word	0x20002cec
 8006e40:	40013000 	.word	0x40013000

08006e44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006e4a:	f107 0308 	add.w	r3, r7, #8
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	605a      	str	r2, [r3, #4]
 8006e54:	609a      	str	r2, [r3, #8]
 8006e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e58:	463b      	mov	r3, r7
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006e60:	4b1d      	ldr	r3, [pc, #116]	; (8006ed8 <MX_TIM2_Init+0x94>)
 8006e62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006e68:	4b1b      	ldr	r3, [pc, #108]	; (8006ed8 <MX_TIM2_Init+0x94>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e6e:	4b1a      	ldr	r3, [pc, #104]	; (8006ed8 <MX_TIM2_Init+0x94>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8006e74:	4b18      	ldr	r3, [pc, #96]	; (8006ed8 <MX_TIM2_Init+0x94>)
 8006e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e7c:	4b16      	ldr	r3, [pc, #88]	; (8006ed8 <MX_TIM2_Init+0x94>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e82:	4b15      	ldr	r3, [pc, #84]	; (8006ed8 <MX_TIM2_Init+0x94>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006e88:	4813      	ldr	r0, [pc, #76]	; (8006ed8 <MX_TIM2_Init+0x94>)
 8006e8a:	f004 fbef 	bl	800b66c <HAL_TIM_Base_Init>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8006e94:	f000 fa9e 	bl	80073d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006e9e:	f107 0308 	add.w	r3, r7, #8
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	480c      	ldr	r0, [pc, #48]	; (8006ed8 <MX_TIM2_Init+0x94>)
 8006ea6:	f004 fd4b 	bl	800b940 <HAL_TIM_ConfigClockSource>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006eb0:	f000 fa90 	bl	80073d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006ebc:	463b      	mov	r3, r7
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4805      	ldr	r0, [pc, #20]	; (8006ed8 <MX_TIM2_Init+0x94>)
 8006ec2:	f005 f8ef 	bl	800c0a4 <HAL_TIMEx_MasterConfigSynchronization>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006ecc:	f000 fa82 	bl	80073d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006ed0:	bf00      	nop
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	20002d44 	.word	0x20002d44

08006edc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08e      	sub	sp, #56	; 0x38
 8006ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	605a      	str	r2, [r3, #4]
 8006eec:	609a      	str	r2, [r3, #8]
 8006eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ef0:	f107 0320 	add.w	r3, r7, #32
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006efa:	1d3b      	adds	r3, r7, #4
 8006efc:	2200      	movs	r2, #0
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	605a      	str	r2, [r3, #4]
 8006f02:	609a      	str	r2, [r3, #8]
 8006f04:	60da      	str	r2, [r3, #12]
 8006f06:	611a      	str	r2, [r3, #16]
 8006f08:	615a      	str	r2, [r3, #20]
 8006f0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006f0c:	4b37      	ldr	r3, [pc, #220]	; (8006fec <MX_TIM3_Init+0x110>)
 8006f0e:	4a38      	ldr	r2, [pc, #224]	; (8006ff0 <MX_TIM3_Init+0x114>)
 8006f10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006f12:	4b36      	ldr	r3, [pc, #216]	; (8006fec <MX_TIM3_Init+0x110>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f18:	4b34      	ldr	r3, [pc, #208]	; (8006fec <MX_TIM3_Init+0x110>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006f1e:	4b33      	ldr	r3, [pc, #204]	; (8006fec <MX_TIM3_Init+0x110>)
 8006f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f26:	4b31      	ldr	r3, [pc, #196]	; (8006fec <MX_TIM3_Init+0x110>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f2c:	4b2f      	ldr	r3, [pc, #188]	; (8006fec <MX_TIM3_Init+0x110>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006f32:	482e      	ldr	r0, [pc, #184]	; (8006fec <MX_TIM3_Init+0x110>)
 8006f34:	f004 fb9a 	bl	800b66c <HAL_TIM_Base_Init>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8006f3e:	f000 fa49 	bl	80073d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4827      	ldr	r0, [pc, #156]	; (8006fec <MX_TIM3_Init+0x110>)
 8006f50:	f004 fcf6 	bl	800b940 <HAL_TIM_ConfigClockSource>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8006f5a:	f000 fa3b 	bl	80073d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006f5e:	4823      	ldr	r0, [pc, #140]	; (8006fec <MX_TIM3_Init+0x110>)
 8006f60:	f004 fbd3 	bl	800b70a <HAL_TIM_PWM_Init>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8006f6a:	f000 fa33 	bl	80073d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006f76:	f107 0320 	add.w	r3, r7, #32
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	481b      	ldr	r0, [pc, #108]	; (8006fec <MX_TIM3_Init+0x110>)
 8006f7e:	f005 f891 	bl	800c0a4 <HAL_TIMEx_MasterConfigSynchronization>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8006f88:	f000 fa24 	bl	80073d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006f8c:	2360      	movs	r3, #96	; 0x60
 8006f8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006f9c:	1d3b      	adds	r3, r7, #4
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4812      	ldr	r0, [pc, #72]	; (8006fec <MX_TIM3_Init+0x110>)
 8006fa4:	f004 fc0a 	bl	800b7bc <HAL_TIM_PWM_ConfigChannel>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8006fae:	f000 fa11 	bl	80073d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006fb2:	1d3b      	adds	r3, r7, #4
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	480c      	ldr	r0, [pc, #48]	; (8006fec <MX_TIM3_Init+0x110>)
 8006fba:	f004 fbff 	bl	800b7bc <HAL_TIM_PWM_ConfigChannel>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8006fc4:	f000 fa06 	bl	80073d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006fc8:	1d3b      	adds	r3, r7, #4
 8006fca:	220c      	movs	r2, #12
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4807      	ldr	r0, [pc, #28]	; (8006fec <MX_TIM3_Init+0x110>)
 8006fd0:	f004 fbf4 	bl	800b7bc <HAL_TIM_PWM_ConfigChannel>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8006fda:	f000 f9fb 	bl	80073d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006fde:	4803      	ldr	r0, [pc, #12]	; (8006fec <MX_TIM3_Init+0x110>)
 8006fe0:	f000 fbc8 	bl	8007774 <HAL_TIM_MspPostInit>

}
 8006fe4:	bf00      	nop
 8006fe6:	3738      	adds	r7, #56	; 0x38
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20002d8c 	.word	0x20002d8c
 8006ff0:	40000400 	.word	0x40000400

08006ff4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006ffa:	f107 0308 	add.w	r3, r7, #8
 8006ffe:	2200      	movs	r2, #0
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	605a      	str	r2, [r3, #4]
 8007004:	609a      	str	r2, [r3, #8]
 8007006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007008:	463b      	mov	r3, r7
 800700a:	2200      	movs	r2, #0
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8007010:	4b1d      	ldr	r3, [pc, #116]	; (8007088 <MX_TIM5_Init+0x94>)
 8007012:	4a1e      	ldr	r2, [pc, #120]	; (800708c <MX_TIM5_Init+0x98>)
 8007014:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007016:	4b1c      	ldr	r3, [pc, #112]	; (8007088 <MX_TIM5_Init+0x94>)
 8007018:	2200      	movs	r2, #0
 800701a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800701c:	4b1a      	ldr	r3, [pc, #104]	; (8007088 <MX_TIM5_Init+0x94>)
 800701e:	2200      	movs	r2, #0
 8007020:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8007022:	4b19      	ldr	r3, [pc, #100]	; (8007088 <MX_TIM5_Init+0x94>)
 8007024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007028:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800702a:	4b17      	ldr	r3, [pc, #92]	; (8007088 <MX_TIM5_Init+0x94>)
 800702c:	2200      	movs	r2, #0
 800702e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007030:	4b15      	ldr	r3, [pc, #84]	; (8007088 <MX_TIM5_Init+0x94>)
 8007032:	2200      	movs	r2, #0
 8007034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007036:	4814      	ldr	r0, [pc, #80]	; (8007088 <MX_TIM5_Init+0x94>)
 8007038:	f004 fb18 	bl	800b66c <HAL_TIM_Base_Init>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8007042:	f000 f9c7 	bl	80073d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800704a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800704c:	f107 0308 	add.w	r3, r7, #8
 8007050:	4619      	mov	r1, r3
 8007052:	480d      	ldr	r0, [pc, #52]	; (8007088 <MX_TIM5_Init+0x94>)
 8007054:	f004 fc74 	bl	800b940 <HAL_TIM_ConfigClockSource>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800705e:	f000 f9b9 	bl	80073d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007062:	2300      	movs	r3, #0
 8007064:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007066:	2300      	movs	r3, #0
 8007068:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800706a:	463b      	mov	r3, r7
 800706c:	4619      	mov	r1, r3
 800706e:	4806      	ldr	r0, [pc, #24]	; (8007088 <MX_TIM5_Init+0x94>)
 8007070:	f005 f818 	bl	800c0a4 <HAL_TIMEx_MasterConfigSynchronization>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800707a:	f000 f9ab 	bl	80073d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800707e:	bf00      	nop
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20002dd4 	.word	0x20002dd4
 800708c:	40000c00 	.word	0x40000c00

08007090 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007094:	4b11      	ldr	r3, [pc, #68]	; (80070dc <MX_USART1_UART_Init+0x4c>)
 8007096:	4a12      	ldr	r2, [pc, #72]	; (80070e0 <MX_USART1_UART_Init+0x50>)
 8007098:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800709a:	4b10      	ldr	r3, [pc, #64]	; (80070dc <MX_USART1_UART_Init+0x4c>)
 800709c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80070a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80070a2:	4b0e      	ldr	r3, [pc, #56]	; (80070dc <MX_USART1_UART_Init+0x4c>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80070a8:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <MX_USART1_UART_Init+0x4c>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80070ae:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <MX_USART1_UART_Init+0x4c>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80070b4:	4b09      	ldr	r3, [pc, #36]	; (80070dc <MX_USART1_UART_Init+0x4c>)
 80070b6:	220c      	movs	r2, #12
 80070b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80070ba:	4b08      	ldr	r3, [pc, #32]	; (80070dc <MX_USART1_UART_Init+0x4c>)
 80070bc:	2200      	movs	r2, #0
 80070be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80070c0:	4b06      	ldr	r3, [pc, #24]	; (80070dc <MX_USART1_UART_Init+0x4c>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80070c6:	4805      	ldr	r0, [pc, #20]	; (80070dc <MX_USART1_UART_Init+0x4c>)
 80070c8:	f005 f868 	bl	800c19c <HAL_UART_Init>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80070d2:	f000 f97f 	bl	80073d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80070d6:	bf00      	nop
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20002e1c 	.word	0x20002e1c
 80070e0:	40011000 	.word	0x40011000

080070e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80070e8:	4b11      	ldr	r3, [pc, #68]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 80070ea:	4a12      	ldr	r2, [pc, #72]	; (8007134 <MX_USART2_UART_Init+0x50>)
 80070ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80070ee:	4b10      	ldr	r3, [pc, #64]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 80070f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80070f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80070f6:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80070fc:	4b0c      	ldr	r3, [pc, #48]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 80070fe:	2200      	movs	r2, #0
 8007100:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007102:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 8007104:	2200      	movs	r2, #0
 8007106:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 800710a:	220c      	movs	r2, #12
 800710c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800710e:	4b08      	ldr	r3, [pc, #32]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 8007110:	2200      	movs	r2, #0
 8007112:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007114:	4b06      	ldr	r3, [pc, #24]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 8007116:	2200      	movs	r2, #0
 8007118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800711a:	4805      	ldr	r0, [pc, #20]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 800711c:	f005 f83e 	bl	800c19c <HAL_UART_Init>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007126:	f000 f955 	bl	80073d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800712a:	bf00      	nop
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20002e60 	.word	0x20002e60
 8007134:	40004400 	.word	0x40004400

08007138 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800713c:	4b11      	ldr	r3, [pc, #68]	; (8007184 <MX_USART3_UART_Init+0x4c>)
 800713e:	4a12      	ldr	r2, [pc, #72]	; (8007188 <MX_USART3_UART_Init+0x50>)
 8007140:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007142:	4b10      	ldr	r3, [pc, #64]	; (8007184 <MX_USART3_UART_Init+0x4c>)
 8007144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007148:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800714a:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <MX_USART3_UART_Init+0x4c>)
 800714c:	2200      	movs	r2, #0
 800714e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007150:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <MX_USART3_UART_Init+0x4c>)
 8007152:	2200      	movs	r2, #0
 8007154:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007156:	4b0b      	ldr	r3, [pc, #44]	; (8007184 <MX_USART3_UART_Init+0x4c>)
 8007158:	2200      	movs	r2, #0
 800715a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800715c:	4b09      	ldr	r3, [pc, #36]	; (8007184 <MX_USART3_UART_Init+0x4c>)
 800715e:	220c      	movs	r2, #12
 8007160:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007162:	4b08      	ldr	r3, [pc, #32]	; (8007184 <MX_USART3_UART_Init+0x4c>)
 8007164:	2200      	movs	r2, #0
 8007166:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <MX_USART3_UART_Init+0x4c>)
 800716a:	2200      	movs	r2, #0
 800716c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800716e:	4805      	ldr	r0, [pc, #20]	; (8007184 <MX_USART3_UART_Init+0x4c>)
 8007170:	f005 f814 	bl	800c19c <HAL_UART_Init>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800717a:	f000 f92b 	bl	80073d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800717e:	bf00      	nop
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20002ea4 	.word	0x20002ea4
 8007188:	40004800 	.word	0x40004800

0800718c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8007190:	4b11      	ldr	r3, [pc, #68]	; (80071d8 <MX_USART6_UART_Init+0x4c>)
 8007192:	4a12      	ldr	r2, [pc, #72]	; (80071dc <MX_USART6_UART_Init+0x50>)
 8007194:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8007196:	4b10      	ldr	r3, [pc, #64]	; (80071d8 <MX_USART6_UART_Init+0x4c>)
 8007198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800719c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800719e:	4b0e      	ldr	r3, [pc, #56]	; (80071d8 <MX_USART6_UART_Init+0x4c>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80071a4:	4b0c      	ldr	r3, [pc, #48]	; (80071d8 <MX_USART6_UART_Init+0x4c>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80071aa:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <MX_USART6_UART_Init+0x4c>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80071b0:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <MX_USART6_UART_Init+0x4c>)
 80071b2:	220c      	movs	r2, #12
 80071b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80071b6:	4b08      	ldr	r3, [pc, #32]	; (80071d8 <MX_USART6_UART_Init+0x4c>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80071bc:	4b06      	ldr	r3, [pc, #24]	; (80071d8 <MX_USART6_UART_Init+0x4c>)
 80071be:	2200      	movs	r2, #0
 80071c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80071c2:	4805      	ldr	r0, [pc, #20]	; (80071d8 <MX_USART6_UART_Init+0x4c>)
 80071c4:	f004 ffea 	bl	800c19c <HAL_UART_Init>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80071ce:	f000 f901 	bl	80073d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80071d2:	bf00      	nop
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20002ee8 	.word	0x20002ee8
 80071dc:	40011400 	.word	0x40011400

080071e0 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80071e0:	b480      	push	{r7}
 80071e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80071e4:	bf00      	nop
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
	...

080071f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	; 0x28
 80071f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071f6:	f107 0314 	add.w	r3, r7, #20
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	605a      	str	r2, [r3, #4]
 8007200:	609a      	str	r2, [r3, #8]
 8007202:	60da      	str	r2, [r3, #12]
 8007204:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007206:	2300      	movs	r3, #0
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	4b6e      	ldr	r3, [pc, #440]	; (80073c4 <MX_GPIO_Init+0x1d4>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	4a6d      	ldr	r2, [pc, #436]	; (80073c4 <MX_GPIO_Init+0x1d4>)
 8007210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007214:	6313      	str	r3, [r2, #48]	; 0x30
 8007216:	4b6b      	ldr	r3, [pc, #428]	; (80073c4 <MX_GPIO_Init+0x1d4>)
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721e:	613b      	str	r3, [r7, #16]
 8007220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	4b67      	ldr	r3, [pc, #412]	; (80073c4 <MX_GPIO_Init+0x1d4>)
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	4a66      	ldr	r2, [pc, #408]	; (80073c4 <MX_GPIO_Init+0x1d4>)
 800722c:	f043 0304 	orr.w	r3, r3, #4
 8007230:	6313      	str	r3, [r2, #48]	; 0x30
 8007232:	4b64      	ldr	r3, [pc, #400]	; (80073c4 <MX_GPIO_Init+0x1d4>)
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	f003 0304 	and.w	r3, r3, #4
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800723e:	2300      	movs	r3, #0
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	4b60      	ldr	r3, [pc, #384]	; (80073c4 <MX_GPIO_Init+0x1d4>)
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	4a5f      	ldr	r2, [pc, #380]	; (80073c4 <MX_GPIO_Init+0x1d4>)
 8007248:	f043 0301 	orr.w	r3, r3, #1
 800724c:	6313      	str	r3, [r2, #48]	; 0x30
 800724e:	4b5d      	ldr	r3, [pc, #372]	; (80073c4 <MX_GPIO_Init+0x1d4>)
 8007250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	60bb      	str	r3, [r7, #8]
 8007258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800725a:	2300      	movs	r3, #0
 800725c:	607b      	str	r3, [r7, #4]
 800725e:	4b59      	ldr	r3, [pc, #356]	; (80073c4 <MX_GPIO_Init+0x1d4>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007262:	4a58      	ldr	r2, [pc, #352]	; (80073c4 <MX_GPIO_Init+0x1d4>)
 8007264:	f043 0302 	orr.w	r3, r3, #2
 8007268:	6313      	str	r3, [r2, #48]	; 0x30
 800726a:	4b56      	ldr	r3, [pc, #344]	; (80073c4 <MX_GPIO_Init+0x1d4>)
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	607b      	str	r3, [r7, #4]
 8007274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 8007276:	2200      	movs	r2, #0
 8007278:	f248 0103 	movw	r1, #32771	; 0x8003
 800727c:	4852      	ldr	r0, [pc, #328]	; (80073c8 <MX_GPIO_Init+0x1d8>)
 800727e:	f001 fb1d 	bl	80088bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007282:	2201      	movs	r2, #1
 8007284:	2110      	movs	r1, #16
 8007286:	4850      	ldr	r0, [pc, #320]	; (80073c8 <MX_GPIO_Init+0x1d8>)
 8007288:	f001 fb18 	bl	80088bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800728c:	2200      	movs	r2, #0
 800728e:	2120      	movs	r1, #32
 8007290:	484e      	ldr	r0, [pc, #312]	; (80073cc <MX_GPIO_Init+0x1dc>)
 8007292:	f001 fb13 	bl	80088bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 8007296:	2200      	movs	r2, #0
 8007298:	2147      	movs	r1, #71	; 0x47
 800729a:	484d      	ldr	r0, [pc, #308]	; (80073d0 <MX_GPIO_Init+0x1e0>)
 800729c:	f001 fb0e 	bl	80088bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80072a0:	2313      	movs	r3, #19
 80072a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072a4:	2303      	movs	r3, #3
 80072a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a8:	2300      	movs	r3, #0
 80072aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072ac:	f107 0314 	add.w	r3, r7, #20
 80072b0:	4619      	mov	r1, r3
 80072b2:	4846      	ldr	r0, [pc, #280]	; (80073cc <MX_GPIO_Init+0x1dc>)
 80072b4:	f001 f966 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 80072b8:	f248 0303 	movw	r3, #32771	; 0x8003
 80072bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072be:	2301      	movs	r3, #1
 80072c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072c6:	2300      	movs	r3, #0
 80072c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072ca:	f107 0314 	add.w	r3, r7, #20
 80072ce:	4619      	mov	r1, r3
 80072d0:	483d      	ldr	r0, [pc, #244]	; (80073c8 <MX_GPIO_Init+0x1d8>)
 80072d2:	f001 f957 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80072d6:	2310      	movs	r3, #16
 80072d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072da:	2301      	movs	r3, #1
 80072dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072de:	2300      	movs	r3, #0
 80072e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80072e2:	2301      	movs	r3, #1
 80072e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072e6:	f107 0314 	add.w	r3, r7, #20
 80072ea:	4619      	mov	r1, r3
 80072ec:	4836      	ldr	r0, [pc, #216]	; (80073c8 <MX_GPIO_Init+0x1d8>)
 80072ee:	f001 f949 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80072f2:	2320      	movs	r3, #32
 80072f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072f6:	2301      	movs	r3, #1
 80072f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072fe:	2300      	movs	r3, #0
 8007300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8007302:	f107 0314 	add.w	r3, r7, #20
 8007306:	4619      	mov	r1, r3
 8007308:	4830      	ldr	r0, [pc, #192]	; (80073cc <MX_GPIO_Init+0x1dc>)
 800730a:	f001 f93b 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ON_Pin PB1 PB2 PB6 */
  GPIO_InitStruct.Pin = LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 800730e:	2347      	movs	r3, #71	; 0x47
 8007310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007312:	2301      	movs	r3, #1
 8007314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007316:	2300      	movs	r3, #0
 8007318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800731a:	2300      	movs	r3, #0
 800731c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800731e:	f107 0314 	add.w	r3, r7, #20
 8007322:	4619      	mov	r1, r3
 8007324:	482a      	ldr	r0, [pc, #168]	; (80073d0 <MX_GPIO_Init+0x1e0>)
 8007326:	f001 f92d 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800732a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800732e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007330:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007336:	2300      	movs	r3, #0
 8007338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800733a:	f107 0314 	add.w	r3, r7, #20
 800733e:	4619      	mov	r1, r3
 8007340:	4823      	ldr	r0, [pc, #140]	; (80073d0 <MX_GPIO_Init+0x1e0>)
 8007342:	f001 f91f 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800734a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800734c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007352:	2300      	movs	r3, #0
 8007354:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007356:	f107 0314 	add.w	r3, r7, #20
 800735a:	4619      	mov	r1, r3
 800735c:	481a      	ldr	r0, [pc, #104]	; (80073c8 <MX_GPIO_Init+0x1d8>)
 800735e:	f001 f911 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007362:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007368:	2302      	movs	r3, #2
 800736a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800736c:	2300      	movs	r3, #0
 800736e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007370:	2303      	movs	r3, #3
 8007372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007374:	230a      	movs	r3, #10
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007378:	f107 0314 	add.w	r3, r7, #20
 800737c:	4619      	mov	r1, r3
 800737e:	4812      	ldr	r0, [pc, #72]	; (80073c8 <MX_GPIO_Init+0x1d8>)
 8007380:	f001 f900 	bl	8008584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007384:	2310      	movs	r3, #16
 8007386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007388:	2300      	movs	r3, #0
 800738a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800738c:	2300      	movs	r3, #0
 800738e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007390:	f107 0314 	add.w	r3, r7, #20
 8007394:	4619      	mov	r1, r3
 8007396:	480e      	ldr	r0, [pc, #56]	; (80073d0 <MX_GPIO_Init+0x1e0>)
 8007398:	f001 f8f4 	bl	8008584 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800739c:	2200      	movs	r2, #0
 800739e:	2100      	movs	r1, #0
 80073a0:	2017      	movs	r0, #23
 80073a2:	f001 f89c 	bl	80084de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80073a6:	2017      	movs	r0, #23
 80073a8:	f001 f8b5 	bl	8008516 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80073ac:	2200      	movs	r2, #0
 80073ae:	2100      	movs	r1, #0
 80073b0:	2028      	movs	r0, #40	; 0x28
 80073b2:	f001 f894 	bl	80084de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80073b6:	2028      	movs	r0, #40	; 0x28
 80073b8:	f001 f8ad 	bl	8008516 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80073bc:	bf00      	nop
 80073be:	3728      	adds	r7, #40	; 0x28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	40023800 	.word	0x40023800
 80073c8:	40020000 	.word	0x40020000
 80073cc:	40020800 	.word	0x40020800
 80073d0:	40020400 	.word	0x40020400

080073d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80073d8:	b672      	cpsid	i
}
 80073da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80073dc:	e7fe      	b.n	80073dc <Error_Handler+0x8>
	...

080073e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073e6:	2300      	movs	r3, #0
 80073e8:	607b      	str	r3, [r7, #4]
 80073ea:	4b10      	ldr	r3, [pc, #64]	; (800742c <HAL_MspInit+0x4c>)
 80073ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ee:	4a0f      	ldr	r2, [pc, #60]	; (800742c <HAL_MspInit+0x4c>)
 80073f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073f4:	6453      	str	r3, [r2, #68]	; 0x44
 80073f6:	4b0d      	ldr	r3, [pc, #52]	; (800742c <HAL_MspInit+0x4c>)
 80073f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073fe:	607b      	str	r3, [r7, #4]
 8007400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007402:	2300      	movs	r3, #0
 8007404:	603b      	str	r3, [r7, #0]
 8007406:	4b09      	ldr	r3, [pc, #36]	; (800742c <HAL_MspInit+0x4c>)
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	4a08      	ldr	r2, [pc, #32]	; (800742c <HAL_MspInit+0x4c>)
 800740c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007410:	6413      	str	r3, [r2, #64]	; 0x40
 8007412:	4b06      	ldr	r3, [pc, #24]	; (800742c <HAL_MspInit+0x4c>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40023800 	.word	0x40023800

08007430 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08a      	sub	sp, #40	; 0x28
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007438:	f107 0314 	add.w	r3, r7, #20
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	605a      	str	r2, [r3, #4]
 8007442:	609a      	str	r2, [r3, #8]
 8007444:	60da      	str	r2, [r3, #12]
 8007446:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a17      	ldr	r2, [pc, #92]	; (80074ac <HAL_ADC_MspInit+0x7c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d127      	bne.n	80074a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8007452:	2300      	movs	r3, #0
 8007454:	613b      	str	r3, [r7, #16]
 8007456:	4b16      	ldr	r3, [pc, #88]	; (80074b0 <HAL_ADC_MspInit+0x80>)
 8007458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745a:	4a15      	ldr	r2, [pc, #84]	; (80074b0 <HAL_ADC_MspInit+0x80>)
 800745c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007460:	6453      	str	r3, [r2, #68]	; 0x44
 8007462:	4b13      	ldr	r3, [pc, #76]	; (80074b0 <HAL_ADC_MspInit+0x80>)
 8007464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800746a:	613b      	str	r3, [r7, #16]
 800746c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	4b0f      	ldr	r3, [pc, #60]	; (80074b0 <HAL_ADC_MspInit+0x80>)
 8007474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007476:	4a0e      	ldr	r2, [pc, #56]	; (80074b0 <HAL_ADC_MspInit+0x80>)
 8007478:	f043 0304 	orr.w	r3, r3, #4
 800747c:	6313      	str	r3, [r2, #48]	; 0x30
 800747e:	4b0c      	ldr	r3, [pc, #48]	; (80074b0 <HAL_ADC_MspInit+0x80>)
 8007480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007482:	f003 0304 	and.w	r3, r3, #4
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800748a:	230c      	movs	r3, #12
 800748c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800748e:	2303      	movs	r3, #3
 8007490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007492:	2300      	movs	r3, #0
 8007494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007496:	f107 0314 	add.w	r3, r7, #20
 800749a:	4619      	mov	r1, r3
 800749c:	4805      	ldr	r0, [pc, #20]	; (80074b4 <HAL_ADC_MspInit+0x84>)
 800749e:	f001 f871 	bl	8008584 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80074a2:	bf00      	nop
 80074a4:	3728      	adds	r7, #40	; 0x28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	40012200 	.word	0x40012200
 80074b0:	40023800 	.word	0x40023800
 80074b4:	40020800 	.word	0x40020800

080074b8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a0b      	ldr	r2, [pc, #44]	; (80074f4 <HAL_CRC_MspInit+0x3c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d10d      	bne.n	80074e6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80074ca:	2300      	movs	r3, #0
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <HAL_CRC_MspInit+0x40>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	4a09      	ldr	r2, [pc, #36]	; (80074f8 <HAL_CRC_MspInit+0x40>)
 80074d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074d8:	6313      	str	r3, [r2, #48]	; 0x30
 80074da:	4b07      	ldr	r3, [pc, #28]	; (80074f8 <HAL_CRC_MspInit+0x40>)
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40023000 	.word	0x40023000
 80074f8:	40023800 	.word	0x40023800

080074fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08c      	sub	sp, #48	; 0x30
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007504:	f107 031c 	add.w	r3, r7, #28
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	605a      	str	r2, [r3, #4]
 800750e:	609a      	str	r2, [r3, #8]
 8007510:	60da      	str	r2, [r3, #12]
 8007512:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a33      	ldr	r2, [pc, #204]	; (80075e8 <HAL_I2C_MspInit+0xec>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d12d      	bne.n	800757a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800751e:	2300      	movs	r3, #0
 8007520:	61bb      	str	r3, [r7, #24]
 8007522:	4b32      	ldr	r3, [pc, #200]	; (80075ec <HAL_I2C_MspInit+0xf0>)
 8007524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007526:	4a31      	ldr	r2, [pc, #196]	; (80075ec <HAL_I2C_MspInit+0xf0>)
 8007528:	f043 0302 	orr.w	r3, r3, #2
 800752c:	6313      	str	r3, [r2, #48]	; 0x30
 800752e:	4b2f      	ldr	r3, [pc, #188]	; (80075ec <HAL_I2C_MspInit+0xf0>)
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	61bb      	str	r3, [r7, #24]
 8007538:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800753a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800753e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007540:	2312      	movs	r3, #18
 8007542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007544:	2300      	movs	r3, #0
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007548:	2303      	movs	r3, #3
 800754a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800754c:	2304      	movs	r3, #4
 800754e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007550:	f107 031c 	add.w	r3, r7, #28
 8007554:	4619      	mov	r1, r3
 8007556:	4826      	ldr	r0, [pc, #152]	; (80075f0 <HAL_I2C_MspInit+0xf4>)
 8007558:	f001 f814 	bl	8008584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800755c:	2300      	movs	r3, #0
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	4b22      	ldr	r3, [pc, #136]	; (80075ec <HAL_I2C_MspInit+0xf0>)
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	4a21      	ldr	r2, [pc, #132]	; (80075ec <HAL_I2C_MspInit+0xf0>)
 8007566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800756a:	6413      	str	r3, [r2, #64]	; 0x40
 800756c:	4b1f      	ldr	r3, [pc, #124]	; (80075ec <HAL_I2C_MspInit+0xf0>)
 800756e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007574:	617b      	str	r3, [r7, #20]
 8007576:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007578:	e031      	b.n	80075de <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a1d      	ldr	r2, [pc, #116]	; (80075f4 <HAL_I2C_MspInit+0xf8>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d12c      	bne.n	80075de <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	4b18      	ldr	r3, [pc, #96]	; (80075ec <HAL_I2C_MspInit+0xf0>)
 800758a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758c:	4a17      	ldr	r2, [pc, #92]	; (80075ec <HAL_I2C_MspInit+0xf0>)
 800758e:	f043 0302 	orr.w	r3, r3, #2
 8007592:	6313      	str	r3, [r2, #48]	; 0x30
 8007594:	4b15      	ldr	r3, [pc, #84]	; (80075ec <HAL_I2C_MspInit+0xf0>)
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	613b      	str	r3, [r7, #16]
 800759e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80075a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80075a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075a6:	2312      	movs	r3, #18
 80075a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075ae:	2303      	movs	r3, #3
 80075b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80075b2:	2304      	movs	r3, #4
 80075b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075b6:	f107 031c 	add.w	r3, r7, #28
 80075ba:	4619      	mov	r1, r3
 80075bc:	480c      	ldr	r0, [pc, #48]	; (80075f0 <HAL_I2C_MspInit+0xf4>)
 80075be:	f000 ffe1 	bl	8008584 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	4b09      	ldr	r3, [pc, #36]	; (80075ec <HAL_I2C_MspInit+0xf0>)
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	4a08      	ldr	r2, [pc, #32]	; (80075ec <HAL_I2C_MspInit+0xf0>)
 80075cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80075d0:	6413      	str	r3, [r2, #64]	; 0x40
 80075d2:	4b06      	ldr	r3, [pc, #24]	; (80075ec <HAL_I2C_MspInit+0xf0>)
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
}
 80075de:	bf00      	nop
 80075e0:	3730      	adds	r7, #48	; 0x30
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	40005400 	.word	0x40005400
 80075ec:	40023800 	.word	0x40023800
 80075f0:	40020400 	.word	0x40020400
 80075f4:	40005800 	.word	0x40005800

080075f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007600:	f107 0308 	add.w	r3, r7, #8
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	605a      	str	r2, [r3, #4]
 800760a:	609a      	str	r2, [r3, #8]
 800760c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a0c      	ldr	r2, [pc, #48]	; (8007644 <HAL_RTC_MspInit+0x4c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d111      	bne.n	800763c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007618:	2302      	movs	r3, #2
 800761a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800761c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007620:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007622:	f107 0308 	add.w	r3, r7, #8
 8007626:	4618      	mov	r0, r3
 8007628:	f003 fa12 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8007632:	f7ff fecf 	bl	80073d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007636:	4b04      	ldr	r3, [pc, #16]	; (8007648 <HAL_RTC_MspInit+0x50>)
 8007638:	2201      	movs	r2, #1
 800763a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800763c:	bf00      	nop
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	40002800 	.word	0x40002800
 8007648:	42470e3c 	.word	0x42470e3c

0800764c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	; 0x28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007654:	f107 0314 	add.w	r3, r7, #20
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	605a      	str	r2, [r3, #4]
 800765e:	609a      	str	r2, [r3, #8]
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a19      	ldr	r2, [pc, #100]	; (80076d0 <HAL_SPI_MspInit+0x84>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d12b      	bne.n	80076c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800766e:	2300      	movs	r3, #0
 8007670:	613b      	str	r3, [r7, #16]
 8007672:	4b18      	ldr	r3, [pc, #96]	; (80076d4 <HAL_SPI_MspInit+0x88>)
 8007674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007676:	4a17      	ldr	r2, [pc, #92]	; (80076d4 <HAL_SPI_MspInit+0x88>)
 8007678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800767c:	6453      	str	r3, [r2, #68]	; 0x44
 800767e:	4b15      	ldr	r3, [pc, #84]	; (80076d4 <HAL_SPI_MspInit+0x88>)
 8007680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007686:	613b      	str	r3, [r7, #16]
 8007688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <HAL_SPI_MspInit+0x88>)
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	4a10      	ldr	r2, [pc, #64]	; (80076d4 <HAL_SPI_MspInit+0x88>)
 8007694:	f043 0301 	orr.w	r3, r3, #1
 8007698:	6313      	str	r3, [r2, #48]	; 0x30
 800769a:	4b0e      	ldr	r3, [pc, #56]	; (80076d4 <HAL_SPI_MspInit+0x88>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	60fb      	str	r3, [r7, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80076a6:	23e0      	movs	r3, #224	; 0xe0
 80076a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076aa:	2302      	movs	r3, #2
 80076ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076b2:	2303      	movs	r3, #3
 80076b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80076b6:	2305      	movs	r3, #5
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076ba:	f107 0314 	add.w	r3, r7, #20
 80076be:	4619      	mov	r1, r3
 80076c0:	4805      	ldr	r0, [pc, #20]	; (80076d8 <HAL_SPI_MspInit+0x8c>)
 80076c2:	f000 ff5f 	bl	8008584 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80076c6:	bf00      	nop
 80076c8:	3728      	adds	r7, #40	; 0x28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	40013000 	.word	0x40013000
 80076d4:	40023800 	.word	0x40023800
 80076d8:	40020000 	.word	0x40020000

080076dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ec:	d10e      	bne.n	800770c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80076ee:	2300      	movs	r3, #0
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	4b1d      	ldr	r3, [pc, #116]	; (8007768 <HAL_TIM_Base_MspInit+0x8c>)
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	4a1c      	ldr	r2, [pc, #112]	; (8007768 <HAL_TIM_Base_MspInit+0x8c>)
 80076f8:	f043 0301 	orr.w	r3, r3, #1
 80076fc:	6413      	str	r3, [r2, #64]	; 0x40
 80076fe:	4b1a      	ldr	r3, [pc, #104]	; (8007768 <HAL_TIM_Base_MspInit+0x8c>)
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800770a:	e026      	b.n	800775a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a16      	ldr	r2, [pc, #88]	; (800776c <HAL_TIM_Base_MspInit+0x90>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d10e      	bne.n	8007734 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	4b13      	ldr	r3, [pc, #76]	; (8007768 <HAL_TIM_Base_MspInit+0x8c>)
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	4a12      	ldr	r2, [pc, #72]	; (8007768 <HAL_TIM_Base_MspInit+0x8c>)
 8007720:	f043 0302 	orr.w	r3, r3, #2
 8007724:	6413      	str	r3, [r2, #64]	; 0x40
 8007726:	4b10      	ldr	r3, [pc, #64]	; (8007768 <HAL_TIM_Base_MspInit+0x8c>)
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	693b      	ldr	r3, [r7, #16]
}
 8007732:	e012      	b.n	800775a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a0d      	ldr	r2, [pc, #52]	; (8007770 <HAL_TIM_Base_MspInit+0x94>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d10d      	bne.n	800775a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
 8007742:	4b09      	ldr	r3, [pc, #36]	; (8007768 <HAL_TIM_Base_MspInit+0x8c>)
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	4a08      	ldr	r2, [pc, #32]	; (8007768 <HAL_TIM_Base_MspInit+0x8c>)
 8007748:	f043 0308 	orr.w	r3, r3, #8
 800774c:	6413      	str	r3, [r2, #64]	; 0x40
 800774e:	4b06      	ldr	r3, [pc, #24]	; (8007768 <HAL_TIM_Base_MspInit+0x8c>)
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	68fb      	ldr	r3, [r7, #12]
}
 800775a:	bf00      	nop
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40023800 	.word	0x40023800
 800776c:	40000400 	.word	0x40000400
 8007770:	40000c00 	.word	0x40000c00

08007774 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08a      	sub	sp, #40	; 0x28
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800777c:	f107 0314 	add.w	r3, r7, #20
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	605a      	str	r2, [r3, #4]
 8007786:	609a      	str	r2, [r3, #8]
 8007788:	60da      	str	r2, [r3, #12]
 800778a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a21      	ldr	r2, [pc, #132]	; (8007818 <HAL_TIM_MspPostInit+0xa4>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d13c      	bne.n	8007810 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007796:	2300      	movs	r3, #0
 8007798:	613b      	str	r3, [r7, #16]
 800779a:	4b20      	ldr	r3, [pc, #128]	; (800781c <HAL_TIM_MspPostInit+0xa8>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	4a1f      	ldr	r2, [pc, #124]	; (800781c <HAL_TIM_MspPostInit+0xa8>)
 80077a0:	f043 0304 	orr.w	r3, r3, #4
 80077a4:	6313      	str	r3, [r2, #48]	; 0x30
 80077a6:	4b1d      	ldr	r3, [pc, #116]	; (800781c <HAL_TIM_MspPostInit+0xa8>)
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	613b      	str	r3, [r7, #16]
 80077b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	4b19      	ldr	r3, [pc, #100]	; (800781c <HAL_TIM_MspPostInit+0xa8>)
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	4a18      	ldr	r2, [pc, #96]	; (800781c <HAL_TIM_MspPostInit+0xa8>)
 80077bc:	f043 0302 	orr.w	r3, r3, #2
 80077c0:	6313      	str	r3, [r2, #48]	; 0x30
 80077c2:	4b16      	ldr	r3, [pc, #88]	; (800781c <HAL_TIM_MspPostInit+0xa8>)
 80077c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80077ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80077d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077d4:	2302      	movs	r3, #2
 80077d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d8:	2300      	movs	r3, #0
 80077da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077dc:	2300      	movs	r3, #0
 80077de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80077e0:	2302      	movs	r3, #2
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077e4:	f107 0314 	add.w	r3, r7, #20
 80077e8:	4619      	mov	r1, r3
 80077ea:	480d      	ldr	r0, [pc, #52]	; (8007820 <HAL_TIM_MspPostInit+0xac>)
 80077ec:	f000 feca 	bl	8008584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80077f0:	2320      	movs	r3, #32
 80077f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077f4:	2302      	movs	r3, #2
 80077f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077fc:	2300      	movs	r3, #0
 80077fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007800:	2302      	movs	r3, #2
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007804:	f107 0314 	add.w	r3, r7, #20
 8007808:	4619      	mov	r1, r3
 800780a:	4806      	ldr	r0, [pc, #24]	; (8007824 <HAL_TIM_MspPostInit+0xb0>)
 800780c:	f000 feba 	bl	8008584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007810:	bf00      	nop
 8007812:	3728      	adds	r7, #40	; 0x28
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	40000400 	.word	0x40000400
 800781c:	40023800 	.word	0x40023800
 8007820:	40020800 	.word	0x40020800
 8007824:	40020400 	.word	0x40020400

08007828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b090      	sub	sp, #64	; 0x40
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	605a      	str	r2, [r3, #4]
 800783a:	609a      	str	r2, [r3, #8]
 800783c:	60da      	str	r2, [r3, #12]
 800783e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a74      	ldr	r2, [pc, #464]	; (8007a18 <HAL_UART_MspInit+0x1f0>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d14b      	bne.n	80078e2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800784a:	2300      	movs	r3, #0
 800784c:	62bb      	str	r3, [r7, #40]	; 0x28
 800784e:	4b73      	ldr	r3, [pc, #460]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 8007850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007852:	4a72      	ldr	r2, [pc, #456]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 8007854:	f043 0310 	orr.w	r3, r3, #16
 8007858:	6453      	str	r3, [r2, #68]	; 0x44
 800785a:	4b70      	ldr	r3, [pc, #448]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 800785c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785e:	f003 0310 	and.w	r3, r3, #16
 8007862:	62bb      	str	r3, [r7, #40]	; 0x28
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007866:	2300      	movs	r3, #0
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
 800786a:	4b6c      	ldr	r3, [pc, #432]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 800786c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786e:	4a6b      	ldr	r2, [pc, #428]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 8007870:	f043 0301 	orr.w	r3, r3, #1
 8007874:	6313      	str	r3, [r2, #48]	; 0x30
 8007876:	4b69      	ldr	r3, [pc, #420]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 8007878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007882:	2300      	movs	r3, #0
 8007884:	623b      	str	r3, [r7, #32]
 8007886:	4b65      	ldr	r3, [pc, #404]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	4a64      	ldr	r2, [pc, #400]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 800788c:	f043 0302 	orr.w	r3, r3, #2
 8007890:	6313      	str	r3, [r2, #48]	; 0x30
 8007892:	4b62      	ldr	r3, [pc, #392]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 8007894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	623b      	str	r3, [r7, #32]
 800789c:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800789e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078a4:	2302      	movs	r3, #2
 80078a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a8:	2300      	movs	r3, #0
 80078aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078ac:	2303      	movs	r3, #3
 80078ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80078b0:	2307      	movs	r3, #7
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078b8:	4619      	mov	r1, r3
 80078ba:	4859      	ldr	r0, [pc, #356]	; (8007a20 <HAL_UART_MspInit+0x1f8>)
 80078bc:	f000 fe62 	bl	8008584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80078c0:	2380      	movs	r3, #128	; 0x80
 80078c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078c4:	2302      	movs	r3, #2
 80078c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c8:	2300      	movs	r3, #0
 80078ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078cc:	2303      	movs	r3, #3
 80078ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80078d0:	2307      	movs	r3, #7
 80078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078d8:	4619      	mov	r1, r3
 80078da:	4852      	ldr	r0, [pc, #328]	; (8007a24 <HAL_UART_MspInit+0x1fc>)
 80078dc:	f000 fe52 	bl	8008584 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80078e0:	e095      	b.n	8007a0e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a50      	ldr	r2, [pc, #320]	; (8007a28 <HAL_UART_MspInit+0x200>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d12c      	bne.n	8007946 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80078ec:	2300      	movs	r3, #0
 80078ee:	61fb      	str	r3, [r7, #28]
 80078f0:	4b4a      	ldr	r3, [pc, #296]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 80078f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f4:	4a49      	ldr	r2, [pc, #292]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 80078f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078fa:	6413      	str	r3, [r2, #64]	; 0x40
 80078fc:	4b47      	ldr	r3, [pc, #284]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007904:	61fb      	str	r3, [r7, #28]
 8007906:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007908:	2300      	movs	r3, #0
 800790a:	61bb      	str	r3, [r7, #24]
 800790c:	4b43      	ldr	r3, [pc, #268]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 800790e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007910:	4a42      	ldr	r2, [pc, #264]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 8007912:	f043 0301 	orr.w	r3, r3, #1
 8007916:	6313      	str	r3, [r2, #48]	; 0x30
 8007918:	4b40      	ldr	r3, [pc, #256]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	61bb      	str	r3, [r7, #24]
 8007922:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007924:	230c      	movs	r3, #12
 8007926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007928:	2302      	movs	r3, #2
 800792a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792c:	2300      	movs	r3, #0
 800792e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007930:	2303      	movs	r3, #3
 8007932:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007934:	2307      	movs	r3, #7
 8007936:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800793c:	4619      	mov	r1, r3
 800793e:	4838      	ldr	r0, [pc, #224]	; (8007a20 <HAL_UART_MspInit+0x1f8>)
 8007940:	f000 fe20 	bl	8008584 <HAL_GPIO_Init>
}
 8007944:	e063      	b.n	8007a0e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART3)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a38      	ldr	r2, [pc, #224]	; (8007a2c <HAL_UART_MspInit+0x204>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d12d      	bne.n	80079ac <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]
 8007954:	4b31      	ldr	r3, [pc, #196]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	4a30      	ldr	r2, [pc, #192]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 800795a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800795e:	6413      	str	r3, [r2, #64]	; 0x40
 8007960:	4b2e      	ldr	r3, [pc, #184]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 8007962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800796c:	2300      	movs	r3, #0
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	4b2a      	ldr	r3, [pc, #168]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	4a29      	ldr	r2, [pc, #164]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 8007976:	f043 0304 	orr.w	r3, r3, #4
 800797a:	6313      	str	r3, [r2, #48]	; 0x30
 800797c:	4b27      	ldr	r3, [pc, #156]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	613b      	str	r3, [r7, #16]
 8007986:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007988:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800798c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800798e:	2302      	movs	r3, #2
 8007990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007992:	2300      	movs	r3, #0
 8007994:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007996:	2303      	movs	r3, #3
 8007998:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800799a:	2307      	movs	r3, #7
 800799c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800799e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079a2:	4619      	mov	r1, r3
 80079a4:	4822      	ldr	r0, [pc, #136]	; (8007a30 <HAL_UART_MspInit+0x208>)
 80079a6:	f000 fded 	bl	8008584 <HAL_GPIO_Init>
}
 80079aa:	e030      	b.n	8007a0e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART6)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a20      	ldr	r2, [pc, #128]	; (8007a34 <HAL_UART_MspInit+0x20c>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d12b      	bne.n	8007a0e <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART6_CLK_ENABLE();
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	4b18      	ldr	r3, [pc, #96]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 80079bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079be:	4a17      	ldr	r2, [pc, #92]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 80079c0:	f043 0320 	orr.w	r3, r3, #32
 80079c4:	6453      	str	r3, [r2, #68]	; 0x44
 80079c6:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 80079c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80079d2:	2300      	movs	r3, #0
 80079d4:	60bb      	str	r3, [r7, #8]
 80079d6:	4b11      	ldr	r3, [pc, #68]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	4a10      	ldr	r2, [pc, #64]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 80079dc:	f043 0304 	orr.w	r3, r3, #4
 80079e0:	6313      	str	r3, [r2, #48]	; 0x30
 80079e2:	4b0e      	ldr	r3, [pc, #56]	; (8007a1c <HAL_UART_MspInit+0x1f4>)
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	f003 0304 	and.w	r3, r3, #4
 80079ea:	60bb      	str	r3, [r7, #8]
 80079ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80079ee:	23c0      	movs	r3, #192	; 0xc0
 80079f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079f2:	2302      	movs	r3, #2
 80079f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079fa:	2303      	movs	r3, #3
 80079fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80079fe:	2308      	movs	r3, #8
 8007a00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007a06:	4619      	mov	r1, r3
 8007a08:	4809      	ldr	r0, [pc, #36]	; (8007a30 <HAL_UART_MspInit+0x208>)
 8007a0a:	f000 fdbb 	bl	8008584 <HAL_GPIO_Init>
}
 8007a0e:	bf00      	nop
 8007a10:	3740      	adds	r7, #64	; 0x40
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	40011000 	.word	0x40011000
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	40020000 	.word	0x40020000
 8007a24:	40020400 	.word	0x40020400
 8007a28:	40004400 	.word	0x40004400
 8007a2c:	40004800 	.word	0x40004800
 8007a30:	40020800 	.word	0x40020800
 8007a34:	40011400 	.word	0x40011400

08007a38 <SDTimer_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007a3c:	4b0e      	ldr	r3, [pc, #56]	; (8007a78 <SDTimer_Handler+0x40>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d006      	beq.n	8007a54 <SDTimer_Handler+0x1c>
    Timer1--;
 8007a46:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <SDTimer_Handler+0x40>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <SDTimer_Handler+0x40>)
 8007a52:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8007a54:	4b09      	ldr	r3, [pc, #36]	; (8007a7c <SDTimer_Handler+0x44>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d006      	beq.n	8007a6c <SDTimer_Handler+0x34>
    Timer2--;
 8007a5e:	4b07      	ldr	r3, [pc, #28]	; (8007a7c <SDTimer_Handler+0x44>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	3b01      	subs	r3, #1
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	4b04      	ldr	r3, [pc, #16]	; (8007a7c <SDTimer_Handler+0x44>)
 8007a6a:	701a      	strb	r2, [r3, #0]
}
 8007a6c:	bf00      	nop
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	20002bcc 	.word	0x20002bcc
 8007a7c:	20002bce 	.word	0x20002bce

08007a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007a84:	e7fe      	b.n	8007a84 <NMI_Handler+0x4>

08007a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a86:	b480      	push	{r7}
 8007a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a8a:	e7fe      	b.n	8007a8a <HardFault_Handler+0x4>

08007a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a90:	e7fe      	b.n	8007a90 <MemManage_Handler+0x4>

08007a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a92:	b480      	push	{r7}
 8007a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a96:	e7fe      	b.n	8007a96 <BusFault_Handler+0x4>

08007a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a9c:	e7fe      	b.n	8007a9c <UsageFault_Handler+0x4>

08007a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007aa2:	bf00      	nop
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007ab0:	bf00      	nop
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007aba:	b480      	push	{r7}
 8007abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007abe:	bf00      	nop
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8007acc:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <SysTick_Handler+0x30>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	4b08      	ldr	r3, [pc, #32]	; (8007af8 <SysTick_Handler+0x30>)
 8007ad8:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8007ada:	4b07      	ldr	r3, [pc, #28]	; (8007af8 <SysTick_Handler+0x30>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b09      	cmp	r3, #9
 8007ae2:	d904      	bls.n	8007aee <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8007ae4:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <SysTick_Handler+0x30>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8007aea:	f7ff ffa5 	bl	8007a38 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007aee:	f000 f975 	bl	8007ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007af2:	bf00      	nop
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20002f2c 	.word	0x20002f2c

08007afc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8007b00:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007b04:	f000 fef4 	bl	80088f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007b08:	bf00      	nop
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8007b10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007b14:	f000 feec 	bl	80088f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007b18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007b1c:	f000 fee8 	bl	80088f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8007b20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007b24:	f000 fee4 	bl	80088f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007b28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007b2c:	f000 fee0 	bl	80088f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007b30:	bf00      	nop
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
  return 1;
 8007b38:	2301      	movs	r3, #1
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <_kill>:

int _kill(int pid, int sig)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007b4e:	f00e faf3 	bl	8016138 <__errno>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2216      	movs	r2, #22
 8007b56:	601a      	str	r2, [r3, #0]
  return -1;
 8007b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <_exit>:

void _exit (int status)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007b6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7ff ffe7 	bl	8007b44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007b76:	e7fe      	b.n	8007b76 <_exit+0x12>

08007b78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b84:	2300      	movs	r3, #0
 8007b86:	617b      	str	r3, [r7, #20]
 8007b88:	e00a      	b.n	8007ba0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007b8a:	f3af 8000 	nop.w
 8007b8e:	4601      	mov	r1, r0
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	60ba      	str	r2, [r7, #8]
 8007b96:	b2ca      	uxtb	r2, r1
 8007b98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	dbf0      	blt.n	8007b8a <_read+0x12>
  }

  return len;
 8007ba8:	687b      	ldr	r3, [r7, #4]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b086      	sub	sp, #24
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	e009      	b.n	8007bd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	60ba      	str	r2, [r7, #8]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	dbf1      	blt.n	8007bc4 <_write+0x12>
  }
  return len;
 8007be0:	687b      	ldr	r3, [r7, #4]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <_close>:

int _close(int file)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007c12:	605a      	str	r2, [r3, #4]
  return 0;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <_isatty>:

int _isatty(int file)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007c2a:	2301      	movs	r3, #1
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
	...

08007c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007c5c:	4a14      	ldr	r2, [pc, #80]	; (8007cb0 <_sbrk+0x5c>)
 8007c5e:	4b15      	ldr	r3, [pc, #84]	; (8007cb4 <_sbrk+0x60>)
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007c68:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <_sbrk+0x64>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d102      	bne.n	8007c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007c70:	4b11      	ldr	r3, [pc, #68]	; (8007cb8 <_sbrk+0x64>)
 8007c72:	4a12      	ldr	r2, [pc, #72]	; (8007cbc <_sbrk+0x68>)
 8007c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007c76:	4b10      	ldr	r3, [pc, #64]	; (8007cb8 <_sbrk+0x64>)
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d207      	bcs.n	8007c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007c84:	f00e fa58 	bl	8016138 <__errno>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	220c      	movs	r2, #12
 8007c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c92:	e009      	b.n	8007ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007c94:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <_sbrk+0x64>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007c9a:	4b07      	ldr	r3, [pc, #28]	; (8007cb8 <_sbrk+0x64>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	4a05      	ldr	r2, [pc, #20]	; (8007cb8 <_sbrk+0x64>)
 8007ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20020000 	.word	0x20020000
 8007cb4:	00000400 	.word	0x00000400
 8007cb8:	20002f30 	.word	0x20002f30
 8007cbc:	200032c0 	.word	0x200032c0

08007cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007cc4:	4b06      	ldr	r3, [pc, #24]	; (8007ce0 <SystemInit+0x20>)
 8007cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cca:	4a05      	ldr	r2, [pc, #20]	; (8007ce0 <SystemInit+0x20>)
 8007ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007cd4:	bf00      	nop
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	e000ed00 	.word	0xe000ed00

08007ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007d1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007ce8:	480d      	ldr	r0, [pc, #52]	; (8007d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007cea:	490e      	ldr	r1, [pc, #56]	; (8007d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007cec:	4a0e      	ldr	r2, [pc, #56]	; (8007d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007cf0:	e002      	b.n	8007cf8 <LoopCopyDataInit>

08007cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007cf6:	3304      	adds	r3, #4

08007cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007cfc:	d3f9      	bcc.n	8007cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007cfe:	4a0b      	ldr	r2, [pc, #44]	; (8007d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007d00:	4c0b      	ldr	r4, [pc, #44]	; (8007d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007d04:	e001      	b.n	8007d0a <LoopFillZerobss>

08007d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007d08:	3204      	adds	r2, #4

08007d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007d0c:	d3fb      	bcc.n	8007d06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007d0e:	f7ff ffd7 	bl	8007cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d12:	f00e fa17 	bl	8016144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007d16:	f7fe feb3 	bl	8006a80 <main>
  bx  lr    
 8007d1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d24:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8007d28:	0801d158 	.word	0x0801d158
  ldr r2, =_sbss
 8007d2c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8007d30:	200032c0 	.word	0x200032c0

08007d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007d34:	e7fe      	b.n	8007d34 <ADC_IRQHandler>
	...

08007d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d3c:	4b0e      	ldr	r3, [pc, #56]	; (8007d78 <HAL_Init+0x40>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a0d      	ldr	r2, [pc, #52]	; (8007d78 <HAL_Init+0x40>)
 8007d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007d48:	4b0b      	ldr	r3, [pc, #44]	; (8007d78 <HAL_Init+0x40>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a0a      	ldr	r2, [pc, #40]	; (8007d78 <HAL_Init+0x40>)
 8007d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d54:	4b08      	ldr	r3, [pc, #32]	; (8007d78 <HAL_Init+0x40>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a07      	ldr	r2, [pc, #28]	; (8007d78 <HAL_Init+0x40>)
 8007d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d60:	2003      	movs	r0, #3
 8007d62:	f000 fbb1 	bl	80084c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007d66:	200f      	movs	r0, #15
 8007d68:	f000 f808 	bl	8007d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007d6c:	f7ff fb38 	bl	80073e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	40023c00 	.word	0x40023c00

08007d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007d84:	4b12      	ldr	r3, [pc, #72]	; (8007dd0 <HAL_InitTick+0x54>)
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <HAL_InitTick+0x58>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fbc9 	bl	8008532 <HAL_SYSTICK_Config>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e00e      	b.n	8007dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b0f      	cmp	r3, #15
 8007dae:	d80a      	bhi.n	8007dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007db0:	2200      	movs	r2, #0
 8007db2:	6879      	ldr	r1, [r7, #4]
 8007db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007db8:	f000 fb91 	bl	80084de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007dbc:	4a06      	ldr	r2, [pc, #24]	; (8007dd8 <HAL_InitTick+0x5c>)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e000      	b.n	8007dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20000008 	.word	0x20000008
 8007dd4:	20000010 	.word	0x20000010
 8007dd8:	2000000c 	.word	0x2000000c

08007ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007de0:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <HAL_IncTick+0x20>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	4b06      	ldr	r3, [pc, #24]	; (8007e00 <HAL_IncTick+0x24>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4413      	add	r3, r2
 8007dec:	4a04      	ldr	r2, [pc, #16]	; (8007e00 <HAL_IncTick+0x24>)
 8007dee:	6013      	str	r3, [r2, #0]
}
 8007df0:	bf00      	nop
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	20000010 	.word	0x20000010
 8007e00:	20002f34 	.word	0x20002f34

08007e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0
  return uwTick;
 8007e08:	4b03      	ldr	r3, [pc, #12]	; (8007e18 <HAL_GetTick+0x14>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	20002f34 	.word	0x20002f34

08007e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e24:	f7ff ffee 	bl	8007e04 <HAL_GetTick>
 8007e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e34:	d005      	beq.n	8007e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e36:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <HAL_Delay+0x44>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4413      	add	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007e42:	bf00      	nop
 8007e44:	f7ff ffde 	bl	8007e04 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d8f7      	bhi.n	8007e44 <HAL_Delay+0x28>
  {
  }
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000010 	.word	0x20000010

08007e64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e033      	b.n	8007ee2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d109      	bne.n	8007e96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fad4 	bl	8007430 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9a:	f003 0310 	and.w	r3, r3, #16
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d118      	bne.n	8007ed4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007eaa:	f023 0302 	bic.w	r3, r3, #2
 8007eae:	f043 0202 	orr.w	r2, r3, #2
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f93a 	bl	8008130 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec6:	f023 0303 	bic.w	r3, r3, #3
 8007eca:	f043 0201 	orr.w	r2, r3, #1
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8007ed2:	e001      	b.n	8007ed8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
	...

08007eec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d101      	bne.n	8007f08 <HAL_ADC_ConfigChannel+0x1c>
 8007f04:	2302      	movs	r3, #2
 8007f06:	e105      	b.n	8008114 <HAL_ADC_ConfigChannel+0x228>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b09      	cmp	r3, #9
 8007f16:	d925      	bls.n	8007f64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68d9      	ldr	r1, [r3, #12]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	4613      	mov	r3, r2
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	4413      	add	r3, r2
 8007f2c:	3b1e      	subs	r3, #30
 8007f2e:	2207      	movs	r2, #7
 8007f30:	fa02 f303 	lsl.w	r3, r2, r3
 8007f34:	43da      	mvns	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	400a      	ands	r2, r1
 8007f3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68d9      	ldr	r1, [r3, #12]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	4618      	mov	r0, r3
 8007f50:	4603      	mov	r3, r0
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	4403      	add	r3, r0
 8007f56:	3b1e      	subs	r3, #30
 8007f58:	409a      	lsls	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	60da      	str	r2, [r3, #12]
 8007f62:	e022      	b.n	8007faa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6919      	ldr	r1, [r3, #16]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	461a      	mov	r2, r3
 8007f72:	4613      	mov	r3, r2
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	4413      	add	r3, r2
 8007f78:	2207      	movs	r2, #7
 8007f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7e:	43da      	mvns	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	400a      	ands	r2, r1
 8007f86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6919      	ldr	r1, [r3, #16]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	4618      	mov	r0, r3
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	4403      	add	r3, r0
 8007fa0:	409a      	lsls	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	2b06      	cmp	r3, #6
 8007fb0:	d824      	bhi.n	8007ffc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	3b05      	subs	r3, #5
 8007fc4:	221f      	movs	r2, #31
 8007fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fca:	43da      	mvns	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	400a      	ands	r2, r1
 8007fd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	3b05      	subs	r3, #5
 8007fee:	fa00 f203 	lsl.w	r2, r0, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8007ffa:	e04c      	b.n	8008096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	2b0c      	cmp	r3, #12
 8008002:	d824      	bhi.n	800804e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	3b23      	subs	r3, #35	; 0x23
 8008016:	221f      	movs	r2, #31
 8008018:	fa02 f303 	lsl.w	r3, r2, r3
 800801c:	43da      	mvns	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	400a      	ands	r2, r1
 8008024:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	4618      	mov	r0, r3
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	4613      	mov	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	3b23      	subs	r3, #35	; 0x23
 8008040:	fa00 f203 	lsl.w	r2, r0, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	631a      	str	r2, [r3, #48]	; 0x30
 800804c:	e023      	b.n	8008096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	4613      	mov	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	3b41      	subs	r3, #65	; 0x41
 8008060:	221f      	movs	r2, #31
 8008062:	fa02 f303 	lsl.w	r3, r2, r3
 8008066:	43da      	mvns	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	400a      	ands	r2, r1
 800806e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	b29b      	uxth	r3, r3
 800807c:	4618      	mov	r0, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	3b41      	subs	r3, #65	; 0x41
 800808a:	fa00 f203 	lsl.w	r2, r0, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008096:	4b22      	ldr	r3, [pc, #136]	; (8008120 <HAL_ADC_ConfigChannel+0x234>)
 8008098:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a21      	ldr	r2, [pc, #132]	; (8008124 <HAL_ADC_ConfigChannel+0x238>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d109      	bne.n	80080b8 <HAL_ADC_ConfigChannel+0x1cc>
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b12      	cmp	r3, #18
 80080aa:	d105      	bne.n	80080b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a19      	ldr	r2, [pc, #100]	; (8008124 <HAL_ADC_ConfigChannel+0x238>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d123      	bne.n	800810a <HAL_ADC_ConfigChannel+0x21e>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b10      	cmp	r3, #16
 80080c8:	d003      	beq.n	80080d2 <HAL_ADC_ConfigChannel+0x1e6>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b11      	cmp	r3, #17
 80080d0:	d11b      	bne.n	800810a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b10      	cmp	r3, #16
 80080e4:	d111      	bne.n	800810a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80080e6:	4b10      	ldr	r3, [pc, #64]	; (8008128 <HAL_ADC_ConfigChannel+0x23c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a10      	ldr	r2, [pc, #64]	; (800812c <HAL_ADC_ConfigChannel+0x240>)
 80080ec:	fba2 2303 	umull	r2, r3, r2, r3
 80080f0:	0c9a      	lsrs	r2, r3, #18
 80080f2:	4613      	mov	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	005b      	lsls	r3, r3, #1
 80080fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80080fc:	e002      	b.n	8008104 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	3b01      	subs	r3, #1
 8008102:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1f9      	bne.n	80080fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	40012300 	.word	0x40012300
 8008124:	40012000 	.word	0x40012000
 8008128:	20000008 	.word	0x20000008
 800812c:	431bde83 	.word	0x431bde83

08008130 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008138:	4b79      	ldr	r3, [pc, #484]	; (8008320 <ADC_Init+0x1f0>)
 800813a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	431a      	orrs	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008164:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6859      	ldr	r1, [r3, #4]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	021a      	lsls	r2, r3, #8
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6859      	ldr	r1, [r3, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689a      	ldr	r2, [r3, #8]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689a      	ldr	r2, [r3, #8]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6899      	ldr	r1, [r3, #8]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c2:	4a58      	ldr	r2, [pc, #352]	; (8008324 <ADC_Init+0x1f4>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d022      	beq.n	800820e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689a      	ldr	r2, [r3, #8]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80081d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6899      	ldr	r1, [r3, #8]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80081f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6899      	ldr	r1, [r3, #8]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	609a      	str	r2, [r3, #8]
 800820c:	e00f      	b.n	800822e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800821c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689a      	ldr	r2, [r3, #8]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800822c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 0202 	bic.w	r2, r2, #2
 800823c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6899      	ldr	r1, [r3, #8]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	7e1b      	ldrb	r3, [r3, #24]
 8008248:	005a      	lsls	r2, r3, #1
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d01b      	beq.n	8008294 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800826a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800827a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6859      	ldr	r1, [r3, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	3b01      	subs	r3, #1
 8008288:	035a      	lsls	r2, r3, #13
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	605a      	str	r2, [r3, #4]
 8008292:	e007      	b.n	80082a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685a      	ldr	r2, [r3, #4]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80082b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	3b01      	subs	r3, #1
 80082c0:	051a      	lsls	r2, r3, #20
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80082d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6899      	ldr	r1, [r3, #8]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082e6:	025a      	lsls	r2, r3, #9
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689a      	ldr	r2, [r3, #8]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6899      	ldr	r1, [r3, #8]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	029a      	lsls	r2, r3, #10
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	609a      	str	r2, [r3, #8]
}
 8008314:	bf00      	nop
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	40012300 	.word	0x40012300
 8008324:	0f000001 	.word	0x0f000001

08008328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f003 0307 	and.w	r3, r3, #7
 8008336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008338:	4b0c      	ldr	r3, [pc, #48]	; (800836c <__NVIC_SetPriorityGrouping+0x44>)
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008344:	4013      	ands	r3, r2
 8008346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800835a:	4a04      	ldr	r2, [pc, #16]	; (800836c <__NVIC_SetPriorityGrouping+0x44>)
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	60d3      	str	r3, [r2, #12]
}
 8008360:	bf00      	nop
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	e000ed00 	.word	0xe000ed00

08008370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008374:	4b04      	ldr	r3, [pc, #16]	; (8008388 <__NVIC_GetPriorityGrouping+0x18>)
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	0a1b      	lsrs	r3, r3, #8
 800837a:	f003 0307 	and.w	r3, r3, #7
}
 800837e:	4618      	mov	r0, r3
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	e000ed00 	.word	0xe000ed00

0800838c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800839a:	2b00      	cmp	r3, #0
 800839c:	db0b      	blt.n	80083b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	f003 021f 	and.w	r2, r3, #31
 80083a4:	4907      	ldr	r1, [pc, #28]	; (80083c4 <__NVIC_EnableIRQ+0x38>)
 80083a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083aa:	095b      	lsrs	r3, r3, #5
 80083ac:	2001      	movs	r0, #1
 80083ae:	fa00 f202 	lsl.w	r2, r0, r2
 80083b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	e000e100 	.word	0xe000e100

080083c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	6039      	str	r1, [r7, #0]
 80083d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	db0a      	blt.n	80083f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	490c      	ldr	r1, [pc, #48]	; (8008414 <__NVIC_SetPriority+0x4c>)
 80083e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083e6:	0112      	lsls	r2, r2, #4
 80083e8:	b2d2      	uxtb	r2, r2
 80083ea:	440b      	add	r3, r1
 80083ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80083f0:	e00a      	b.n	8008408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	4908      	ldr	r1, [pc, #32]	; (8008418 <__NVIC_SetPriority+0x50>)
 80083f8:	79fb      	ldrb	r3, [r7, #7]
 80083fa:	f003 030f 	and.w	r3, r3, #15
 80083fe:	3b04      	subs	r3, #4
 8008400:	0112      	lsls	r2, r2, #4
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	440b      	add	r3, r1
 8008406:	761a      	strb	r2, [r3, #24]
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	e000e100 	.word	0xe000e100
 8008418:	e000ed00 	.word	0xe000ed00

0800841c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800841c:	b480      	push	{r7}
 800841e:	b089      	sub	sp, #36	; 0x24
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f003 0307 	and.w	r3, r3, #7
 800842e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	f1c3 0307 	rsb	r3, r3, #7
 8008436:	2b04      	cmp	r3, #4
 8008438:	bf28      	it	cs
 800843a:	2304      	movcs	r3, #4
 800843c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	3304      	adds	r3, #4
 8008442:	2b06      	cmp	r3, #6
 8008444:	d902      	bls.n	800844c <NVIC_EncodePriority+0x30>
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	3b03      	subs	r3, #3
 800844a:	e000      	b.n	800844e <NVIC_EncodePriority+0x32>
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	fa02 f303 	lsl.w	r3, r2, r3
 800845a:	43da      	mvns	r2, r3
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	401a      	ands	r2, r3
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	fa01 f303 	lsl.w	r3, r1, r3
 800846e:	43d9      	mvns	r1, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008474:	4313      	orrs	r3, r2
         );
}
 8008476:	4618      	mov	r0, r3
 8008478:	3724      	adds	r7, #36	; 0x24
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
	...

08008484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3b01      	subs	r3, #1
 8008490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008494:	d301      	bcc.n	800849a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008496:	2301      	movs	r3, #1
 8008498:	e00f      	b.n	80084ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800849a:	4a0a      	ldr	r2, [pc, #40]	; (80084c4 <SysTick_Config+0x40>)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3b01      	subs	r3, #1
 80084a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80084a2:	210f      	movs	r1, #15
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084a8:	f7ff ff8e 	bl	80083c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084ac:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <SysTick_Config+0x40>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084b2:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <SysTick_Config+0x40>)
 80084b4:	2207      	movs	r2, #7
 80084b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	e000e010 	.word	0xe000e010

080084c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff ff29 	bl	8008328 <__NVIC_SetPriorityGrouping>
}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80084de:	b580      	push	{r7, lr}
 80084e0:	b086      	sub	sp, #24
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	4603      	mov	r3, r0
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	607a      	str	r2, [r7, #4]
 80084ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80084f0:	f7ff ff3e 	bl	8008370 <__NVIC_GetPriorityGrouping>
 80084f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	68b9      	ldr	r1, [r7, #8]
 80084fa:	6978      	ldr	r0, [r7, #20]
 80084fc:	f7ff ff8e 	bl	800841c <NVIC_EncodePriority>
 8008500:	4602      	mov	r2, r0
 8008502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008506:	4611      	mov	r1, r2
 8008508:	4618      	mov	r0, r3
 800850a:	f7ff ff5d 	bl	80083c8 <__NVIC_SetPriority>
}
 800850e:	bf00      	nop
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	4603      	mov	r3, r0
 800851e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff ff31 	bl	800838c <__NVIC_EnableIRQ>
}
 800852a:	bf00      	nop
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff ffa2 	bl	8008484 <SysTick_Config>
 8008540:	4603      	mov	r3, r0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e00e      	b.n	800857a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	795b      	ldrb	r3, [r3, #5]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d105      	bne.n	8008572 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7fe ffa3 	bl	80074b8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
	...

08008584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008584:	b480      	push	{r7}
 8008586:	b089      	sub	sp, #36	; 0x24
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800858e:	2300      	movs	r3, #0
 8008590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008592:	2300      	movs	r3, #0
 8008594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008596:	2300      	movs	r3, #0
 8008598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800859a:	2300      	movs	r3, #0
 800859c:	61fb      	str	r3, [r7, #28]
 800859e:	e16b      	b.n	8008878 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80085a0:	2201      	movs	r2, #1
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	fa02 f303 	lsl.w	r3, r2, r3
 80085a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	4013      	ands	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	f040 815a 	bne.w	8008872 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d005      	beq.n	80085d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d130      	bne.n	8008638 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	2203      	movs	r2, #3
 80085e2:	fa02 f303 	lsl.w	r3, r2, r3
 80085e6:	43db      	mvns	r3, r3
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	4013      	ands	r3, r2
 80085ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	fa02 f303 	lsl.w	r3, r2, r3
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800860c:	2201      	movs	r2, #1
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	fa02 f303 	lsl.w	r3, r2, r3
 8008614:	43db      	mvns	r3, r3
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	4013      	ands	r3, r2
 800861a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	091b      	lsrs	r3, r3, #4
 8008622:	f003 0201 	and.w	r2, r3, #1
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	fa02 f303 	lsl.w	r3, r2, r3
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	4313      	orrs	r3, r2
 8008630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f003 0303 	and.w	r3, r3, #3
 8008640:	2b03      	cmp	r3, #3
 8008642:	d017      	beq.n	8008674 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	2203      	movs	r2, #3
 8008650:	fa02 f303 	lsl.w	r3, r2, r3
 8008654:	43db      	mvns	r3, r3
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	4013      	ands	r3, r2
 800865a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	fa02 f303 	lsl.w	r3, r2, r3
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	4313      	orrs	r3, r2
 800866c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f003 0303 	and.w	r3, r3, #3
 800867c:	2b02      	cmp	r3, #2
 800867e:	d123      	bne.n	80086c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	08da      	lsrs	r2, r3, #3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3208      	adds	r2, #8
 8008688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	f003 0307 	and.w	r3, r3, #7
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	220f      	movs	r2, #15
 8008698:	fa02 f303 	lsl.w	r3, r2, r3
 800869c:	43db      	mvns	r3, r3
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	4013      	ands	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	691a      	ldr	r2, [r3, #16]
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	08da      	lsrs	r2, r3, #3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3208      	adds	r2, #8
 80086c2:	69b9      	ldr	r1, [r7, #24]
 80086c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	2203      	movs	r2, #3
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	43db      	mvns	r3, r3
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	4013      	ands	r3, r2
 80086de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f003 0203 	and.w	r2, r3, #3
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	005b      	lsls	r3, r3, #1
 80086ec:	fa02 f303 	lsl.w	r3, r2, r3
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 80b4 	beq.w	8008872 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]
 800870e:	4b60      	ldr	r3, [pc, #384]	; (8008890 <HAL_GPIO_Init+0x30c>)
 8008710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008712:	4a5f      	ldr	r2, [pc, #380]	; (8008890 <HAL_GPIO_Init+0x30c>)
 8008714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008718:	6453      	str	r3, [r2, #68]	; 0x44
 800871a:	4b5d      	ldr	r3, [pc, #372]	; (8008890 <HAL_GPIO_Init+0x30c>)
 800871c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008722:	60fb      	str	r3, [r7, #12]
 8008724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008726:	4a5b      	ldr	r2, [pc, #364]	; (8008894 <HAL_GPIO_Init+0x310>)
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	089b      	lsrs	r3, r3, #2
 800872c:	3302      	adds	r3, #2
 800872e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	220f      	movs	r2, #15
 800873e:	fa02 f303 	lsl.w	r3, r2, r3
 8008742:	43db      	mvns	r3, r3
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	4013      	ands	r3, r2
 8008748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a52      	ldr	r2, [pc, #328]	; (8008898 <HAL_GPIO_Init+0x314>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d02b      	beq.n	80087aa <HAL_GPIO_Init+0x226>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a51      	ldr	r2, [pc, #324]	; (800889c <HAL_GPIO_Init+0x318>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d025      	beq.n	80087a6 <HAL_GPIO_Init+0x222>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a50      	ldr	r2, [pc, #320]	; (80088a0 <HAL_GPIO_Init+0x31c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d01f      	beq.n	80087a2 <HAL_GPIO_Init+0x21e>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a4f      	ldr	r2, [pc, #316]	; (80088a4 <HAL_GPIO_Init+0x320>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d019      	beq.n	800879e <HAL_GPIO_Init+0x21a>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a4e      	ldr	r2, [pc, #312]	; (80088a8 <HAL_GPIO_Init+0x324>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d013      	beq.n	800879a <HAL_GPIO_Init+0x216>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a4d      	ldr	r2, [pc, #308]	; (80088ac <HAL_GPIO_Init+0x328>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00d      	beq.n	8008796 <HAL_GPIO_Init+0x212>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a4c      	ldr	r2, [pc, #304]	; (80088b0 <HAL_GPIO_Init+0x32c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d007      	beq.n	8008792 <HAL_GPIO_Init+0x20e>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a4b      	ldr	r2, [pc, #300]	; (80088b4 <HAL_GPIO_Init+0x330>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d101      	bne.n	800878e <HAL_GPIO_Init+0x20a>
 800878a:	2307      	movs	r3, #7
 800878c:	e00e      	b.n	80087ac <HAL_GPIO_Init+0x228>
 800878e:	2308      	movs	r3, #8
 8008790:	e00c      	b.n	80087ac <HAL_GPIO_Init+0x228>
 8008792:	2306      	movs	r3, #6
 8008794:	e00a      	b.n	80087ac <HAL_GPIO_Init+0x228>
 8008796:	2305      	movs	r3, #5
 8008798:	e008      	b.n	80087ac <HAL_GPIO_Init+0x228>
 800879a:	2304      	movs	r3, #4
 800879c:	e006      	b.n	80087ac <HAL_GPIO_Init+0x228>
 800879e:	2303      	movs	r3, #3
 80087a0:	e004      	b.n	80087ac <HAL_GPIO_Init+0x228>
 80087a2:	2302      	movs	r3, #2
 80087a4:	e002      	b.n	80087ac <HAL_GPIO_Init+0x228>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <HAL_GPIO_Init+0x228>
 80087aa:	2300      	movs	r3, #0
 80087ac:	69fa      	ldr	r2, [r7, #28]
 80087ae:	f002 0203 	and.w	r2, r2, #3
 80087b2:	0092      	lsls	r2, r2, #2
 80087b4:	4093      	lsls	r3, r2
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087bc:	4935      	ldr	r1, [pc, #212]	; (8008894 <HAL_GPIO_Init+0x310>)
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	089b      	lsrs	r3, r3, #2
 80087c2:	3302      	adds	r3, #2
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80087ca:	4b3b      	ldr	r3, [pc, #236]	; (80088b8 <HAL_GPIO_Init+0x334>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	43db      	mvns	r3, r3
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	4013      	ands	r3, r2
 80087d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80087e6:	69ba      	ldr	r2, [r7, #24]
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80087ee:	4a32      	ldr	r2, [pc, #200]	; (80088b8 <HAL_GPIO_Init+0x334>)
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80087f4:	4b30      	ldr	r3, [pc, #192]	; (80088b8 <HAL_GPIO_Init+0x334>)
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	43db      	mvns	r3, r3
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	4013      	ands	r3, r2
 8008802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	4313      	orrs	r3, r2
 8008816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008818:	4a27      	ldr	r2, [pc, #156]	; (80088b8 <HAL_GPIO_Init+0x334>)
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800881e:	4b26      	ldr	r3, [pc, #152]	; (80088b8 <HAL_GPIO_Init+0x334>)
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	43db      	mvns	r3, r3
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	4013      	ands	r3, r2
 800882c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	4313      	orrs	r3, r2
 8008840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008842:	4a1d      	ldr	r2, [pc, #116]	; (80088b8 <HAL_GPIO_Init+0x334>)
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008848:	4b1b      	ldr	r3, [pc, #108]	; (80088b8 <HAL_GPIO_Init+0x334>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	43db      	mvns	r3, r3
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	4013      	ands	r3, r2
 8008856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	4313      	orrs	r3, r2
 800886a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800886c:	4a12      	ldr	r2, [pc, #72]	; (80088b8 <HAL_GPIO_Init+0x334>)
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	3301      	adds	r3, #1
 8008876:	61fb      	str	r3, [r7, #28]
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	2b0f      	cmp	r3, #15
 800887c:	f67f ae90 	bls.w	80085a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008880:	bf00      	nop
 8008882:	bf00      	nop
 8008884:	3724      	adds	r7, #36	; 0x24
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	40023800 	.word	0x40023800
 8008894:	40013800 	.word	0x40013800
 8008898:	40020000 	.word	0x40020000
 800889c:	40020400 	.word	0x40020400
 80088a0:	40020800 	.word	0x40020800
 80088a4:	40020c00 	.word	0x40020c00
 80088a8:	40021000 	.word	0x40021000
 80088ac:	40021400 	.word	0x40021400
 80088b0:	40021800 	.word	0x40021800
 80088b4:	40021c00 	.word	0x40021c00
 80088b8:	40013c00 	.word	0x40013c00

080088bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	807b      	strh	r3, [r7, #2]
 80088c8:	4613      	mov	r3, r2
 80088ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088cc:	787b      	ldrb	r3, [r7, #1]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80088d2:	887a      	ldrh	r2, [r7, #2]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80088d8:	e003      	b.n	80088e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80088da:	887b      	ldrh	r3, [r7, #2]
 80088dc:	041a      	lsls	r2, r3, #16
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	619a      	str	r2, [r3, #24]
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
	...

080088f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	4603      	mov	r3, r0
 80088f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80088fa:	4b08      	ldr	r3, [pc, #32]	; (800891c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80088fc:	695a      	ldr	r2, [r3, #20]
 80088fe:	88fb      	ldrh	r3, [r7, #6]
 8008900:	4013      	ands	r3, r2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d006      	beq.n	8008914 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008906:	4a05      	ldr	r2, [pc, #20]	; (800891c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008908:	88fb      	ldrh	r3, [r7, #6]
 800890a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800890c:	88fb      	ldrh	r3, [r7, #6]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 f806 	bl	8008920 <HAL_GPIO_EXTI_Callback>
  }
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	40013c00 	.word	0x40013c00

08008920 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	4603      	mov	r3, r0
 8008928:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
	...

08008938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e12b      	b.n	8008ba2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7fe fdcc 	bl	80074fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2224      	movs	r2, #36	; 0x24
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0201 	bic.w	r2, r2, #1
 800897a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800898a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800899a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800899c:	f002 f830 	bl	800aa00 <HAL_RCC_GetPCLK1Freq>
 80089a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	4a81      	ldr	r2, [pc, #516]	; (8008bac <HAL_I2C_Init+0x274>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d807      	bhi.n	80089bc <HAL_I2C_Init+0x84>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4a80      	ldr	r2, [pc, #512]	; (8008bb0 <HAL_I2C_Init+0x278>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	bf94      	ite	ls
 80089b4:	2301      	movls	r3, #1
 80089b6:	2300      	movhi	r3, #0
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	e006      	b.n	80089ca <HAL_I2C_Init+0x92>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4a7d      	ldr	r2, [pc, #500]	; (8008bb4 <HAL_I2C_Init+0x27c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	bf94      	ite	ls
 80089c4:	2301      	movls	r3, #1
 80089c6:	2300      	movhi	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e0e7      	b.n	8008ba2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	4a78      	ldr	r2, [pc, #480]	; (8008bb8 <HAL_I2C_Init+0x280>)
 80089d6:	fba2 2303 	umull	r2, r3, r2, r3
 80089da:	0c9b      	lsrs	r3, r3, #18
 80089dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6a1b      	ldr	r3, [r3, #32]
 80089f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	4a6a      	ldr	r2, [pc, #424]	; (8008bac <HAL_I2C_Init+0x274>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d802      	bhi.n	8008a0c <HAL_I2C_Init+0xd4>
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	e009      	b.n	8008a20 <HAL_I2C_Init+0xe8>
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008a12:	fb02 f303 	mul.w	r3, r2, r3
 8008a16:	4a69      	ldr	r2, [pc, #420]	; (8008bbc <HAL_I2C_Init+0x284>)
 8008a18:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1c:	099b      	lsrs	r3, r3, #6
 8008a1e:	3301      	adds	r3, #1
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	6812      	ldr	r2, [r2, #0]
 8008a24:	430b      	orrs	r3, r1
 8008a26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008a32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	495c      	ldr	r1, [pc, #368]	; (8008bac <HAL_I2C_Init+0x274>)
 8008a3c:	428b      	cmp	r3, r1
 8008a3e:	d819      	bhi.n	8008a74 <HAL_I2C_Init+0x13c>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	1e59      	subs	r1, r3, #1
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a4e:	1c59      	adds	r1, r3, #1
 8008a50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a54:	400b      	ands	r3, r1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <HAL_I2C_Init+0x138>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	1e59      	subs	r1, r3, #1
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a68:	3301      	adds	r3, #1
 8008a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a6e:	e051      	b.n	8008b14 <HAL_I2C_Init+0x1dc>
 8008a70:	2304      	movs	r3, #4
 8008a72:	e04f      	b.n	8008b14 <HAL_I2C_Init+0x1dc>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d111      	bne.n	8008aa0 <HAL_I2C_Init+0x168>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	1e58      	subs	r0, r3, #1
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6859      	ldr	r1, [r3, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	005b      	lsls	r3, r3, #1
 8008a88:	440b      	add	r3, r1
 8008a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a8e:	3301      	adds	r3, #1
 8008a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	bf0c      	ite	eq
 8008a98:	2301      	moveq	r3, #1
 8008a9a:	2300      	movne	r3, #0
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	e012      	b.n	8008ac6 <HAL_I2C_Init+0x18e>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	1e58      	subs	r0, r3, #1
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6859      	ldr	r1, [r3, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	440b      	add	r3, r1
 8008aae:	0099      	lsls	r1, r3, #2
 8008ab0:	440b      	add	r3, r1
 8008ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	bf0c      	ite	eq
 8008ac0:	2301      	moveq	r3, #1
 8008ac2:	2300      	movne	r3, #0
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <HAL_I2C_Init+0x196>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e022      	b.n	8008b14 <HAL_I2C_Init+0x1dc>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10e      	bne.n	8008af4 <HAL_I2C_Init+0x1bc>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	1e58      	subs	r0, r3, #1
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6859      	ldr	r1, [r3, #4]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	440b      	add	r3, r1
 8008ae4:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ae8:	3301      	adds	r3, #1
 8008aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008af2:	e00f      	b.n	8008b14 <HAL_I2C_Init+0x1dc>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	1e58      	subs	r0, r3, #1
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6859      	ldr	r1, [r3, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	440b      	add	r3, r1
 8008b02:	0099      	lsls	r1, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b14:	6879      	ldr	r1, [r7, #4]
 8008b16:	6809      	ldr	r1, [r1, #0]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	69da      	ldr	r2, [r3, #28]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008b42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6911      	ldr	r1, [r2, #16]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	68d2      	ldr	r2, [r2, #12]
 8008b4e:	4311      	orrs	r1, r2
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	6812      	ldr	r2, [r2, #0]
 8008b54:	430b      	orrs	r3, r1
 8008b56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	695a      	ldr	r2, [r3, #20]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f042 0201 	orr.w	r2, r2, #1
 8008b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2220      	movs	r2, #32
 8008b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	000186a0 	.word	0x000186a0
 8008bb0:	001e847f 	.word	0x001e847f
 8008bb4:	003d08ff 	.word	0x003d08ff
 8008bb8:	431bde83 	.word	0x431bde83
 8008bbc:	10624dd3 	.word	0x10624dd3

08008bc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	607a      	str	r2, [r7, #4]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	460b      	mov	r3, r1
 8008bce:	817b      	strh	r3, [r7, #10]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008bd4:	f7ff f916 	bl	8007e04 <HAL_GetTick>
 8008bd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	f040 80e0 	bne.w	8008da8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	2319      	movs	r3, #25
 8008bee:	2201      	movs	r2, #1
 8008bf0:	4970      	ldr	r1, [pc, #448]	; (8008db4 <HAL_I2C_Master_Transmit+0x1f4>)
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f001 f8f6 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008bfe:	2302      	movs	r3, #2
 8008c00:	e0d3      	b.n	8008daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d101      	bne.n	8008c10 <HAL_I2C_Master_Transmit+0x50>
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	e0cc      	b.n	8008daa <HAL_I2C_Master_Transmit+0x1ea>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d007      	beq.n	8008c36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f042 0201 	orr.w	r2, r2, #1
 8008c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2221      	movs	r2, #33	; 0x21
 8008c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2210      	movs	r2, #16
 8008c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	893a      	ldrh	r2, [r7, #8]
 8008c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	4a50      	ldr	r2, [pc, #320]	; (8008db8 <HAL_I2C_Master_Transmit+0x1f8>)
 8008c76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008c78:	8979      	ldrh	r1, [r7, #10]
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	6a3a      	ldr	r2, [r7, #32]
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 fde2 	bl	8009848 <I2C_MasterRequestWrite>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e08d      	b.n	8008daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c8e:	2300      	movs	r3, #0
 8008c90:	613b      	str	r3, [r7, #16]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	613b      	str	r3, [r7, #16]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	613b      	str	r3, [r7, #16]
 8008ca2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008ca4:	e066      	b.n	8008d74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	6a39      	ldr	r1, [r7, #32]
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f001 f970 	bl	8009f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00d      	beq.n	8008cd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	d107      	bne.n	8008cce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ccc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e06b      	b.n	8008daa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	781a      	ldrb	r2, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	1c5a      	adds	r2, r3, #1
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	2b04      	cmp	r3, #4
 8008d0e:	d11b      	bne.n	8008d48 <HAL_I2C_Master_Transmit+0x188>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d017      	beq.n	8008d48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	781a      	ldrb	r2, [r3, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d28:	1c5a      	adds	r2, r3, #1
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	3b01      	subs	r3, #1
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d40:	3b01      	subs	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	6a39      	ldr	r1, [r7, #32]
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f001 f960 	bl	800a012 <I2C_WaitOnBTFFlagUntilTimeout>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00d      	beq.n	8008d74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	d107      	bne.n	8008d70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e01a      	b.n	8008daa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d194      	bne.n	8008ca6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	e000      	b.n	8008daa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008da8:	2302      	movs	r3, #2
  }
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	00100002 	.word	0x00100002
 8008db8:	ffff0000 	.word	0xffff0000

08008dbc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08c      	sub	sp, #48	; 0x30
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	607a      	str	r2, [r7, #4]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	460b      	mov	r3, r1
 8008dca:	817b      	strh	r3, [r7, #10]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008dd0:	f7ff f818 	bl	8007e04 <HAL_GetTick>
 8008dd4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	f040 820b 	bne.w	80091fa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	2319      	movs	r3, #25
 8008dea:	2201      	movs	r2, #1
 8008dec:	497c      	ldr	r1, [pc, #496]	; (8008fe0 <HAL_I2C_Master_Receive+0x224>)
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f000 fff8 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	e1fe      	b.n	80091fc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d101      	bne.n	8008e0c <HAL_I2C_Master_Receive+0x50>
 8008e08:	2302      	movs	r3, #2
 8008e0a:	e1f7      	b.n	80091fc <HAL_I2C_Master_Receive+0x440>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d007      	beq.n	8008e32 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f042 0201 	orr.w	r2, r2, #1
 8008e30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2222      	movs	r2, #34	; 0x22
 8008e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2210      	movs	r2, #16
 8008e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	893a      	ldrh	r2, [r7, #8]
 8008e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4a5c      	ldr	r2, [pc, #368]	; (8008fe4 <HAL_I2C_Master_Receive+0x228>)
 8008e72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008e74:	8979      	ldrh	r1, [r7, #10]
 8008e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 fd66 	bl	800994c <I2C_MasterRequestRead>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e1b8      	b.n	80091fc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d113      	bne.n	8008eba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e92:	2300      	movs	r3, #0
 8008e94:	623b      	str	r3, [r7, #32]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	623b      	str	r3, [r7, #32]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	623b      	str	r3, [r7, #32]
 8008ea6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	e18c      	b.n	80091d4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d11b      	bne.n	8008efa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ed0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61fb      	str	r3, [r7, #28]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	61fb      	str	r3, [r7, #28]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	61fb      	str	r3, [r7, #28]
 8008ee6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	e16c      	b.n	80091d4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d11b      	bne.n	8008f3a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f22:	2300      	movs	r3, #0
 8008f24:	61bb      	str	r3, [r7, #24]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	61bb      	str	r3, [r7, #24]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	61bb      	str	r3, [r7, #24]
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	e14c      	b.n	80091d4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	617b      	str	r3, [r7, #20]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008f60:	e138      	b.n	80091d4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	f200 80f1 	bhi.w	800914e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d123      	bne.n	8008fbc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f001 f88b 	bl	800a094 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e139      	b.n	80091fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	691a      	ldr	r2, [r3, #16]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	b2d2      	uxtb	r2, r2
 8008f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fba:	e10b      	b.n	80091d4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d14e      	bne.n	8009062 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	2200      	movs	r2, #0
 8008fcc:	4906      	ldr	r1, [pc, #24]	; (8008fe8 <HAL_I2C_Master_Receive+0x22c>)
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 ff08 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d008      	beq.n	8008fec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e10e      	b.n	80091fc <HAL_I2C_Master_Receive+0x440>
 8008fde:	bf00      	nop
 8008fe0:	00100002 	.word	0x00100002
 8008fe4:	ffff0000 	.word	0xffff0000
 8008fe8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	691a      	ldr	r2, [r3, #16]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	b2d2      	uxtb	r2, r2
 8009008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	1c5a      	adds	r2, r3, #1
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009018:	3b01      	subs	r3, #1
 800901a:	b29a      	uxth	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009024:	b29b      	uxth	r3, r3
 8009026:	3b01      	subs	r3, #1
 8009028:	b29a      	uxth	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	691a      	ldr	r2, [r3, #16]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	b2d2      	uxtb	r2, r2
 800903a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800904a:	3b01      	subs	r3, #1
 800904c:	b29a      	uxth	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009056:	b29b      	uxth	r3, r3
 8009058:	3b01      	subs	r3, #1
 800905a:	b29a      	uxth	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009060:	e0b8      	b.n	80091d4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	2200      	movs	r2, #0
 800906a:	4966      	ldr	r1, [pc, #408]	; (8009204 <HAL_I2C_Master_Receive+0x448>)
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 feb9 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e0bf      	b.n	80091fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800908a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	691a      	ldr	r2, [r3, #16]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	b2d2      	uxtb	r2, r2
 8009098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a8:	3b01      	subs	r3, #1
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	3b01      	subs	r3, #1
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c4:	2200      	movs	r2, #0
 80090c6:	494f      	ldr	r1, [pc, #316]	; (8009204 <HAL_I2C_Master_Receive+0x448>)
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 fe8b 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e091      	b.n	80091fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	691a      	ldr	r2, [r3, #16]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f2:	b2d2      	uxtb	r2, r2
 80090f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009104:	3b01      	subs	r3, #1
 8009106:	b29a      	uxth	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009110:	b29b      	uxth	r3, r3
 8009112:	3b01      	subs	r3, #1
 8009114:	b29a      	uxth	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	691a      	ldr	r2, [r3, #16]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	b2d2      	uxtb	r2, r2
 8009126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	1c5a      	adds	r2, r3, #1
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009136:	3b01      	subs	r3, #1
 8009138:	b29a      	uxth	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009142:	b29b      	uxth	r3, r3
 8009144:	3b01      	subs	r3, #1
 8009146:	b29a      	uxth	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800914c:	e042      	b.n	80091d4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800914e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009150:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 ff9e 	bl	800a094 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e04c      	b.n	80091fc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	691a      	ldr	r2, [r3, #16]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	b2d2      	uxtb	r2, r2
 800916e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009174:	1c5a      	adds	r2, r3, #1
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800917e:	3b01      	subs	r3, #1
 8009180:	b29a      	uxth	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800918a:	b29b      	uxth	r3, r3
 800918c:	3b01      	subs	r3, #1
 800918e:	b29a      	uxth	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	f003 0304 	and.w	r3, r3, #4
 800919e:	2b04      	cmp	r3, #4
 80091a0:	d118      	bne.n	80091d4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	691a      	ldr	r2, [r3, #16]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ac:	b2d2      	uxtb	r2, r2
 80091ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	1c5a      	adds	r2, r3, #1
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091be:	3b01      	subs	r3, #1
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	3b01      	subs	r3, #1
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f47f aec2 	bne.w	8008f62 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	e000      	b.n	80091fc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80091fa:	2302      	movs	r3, #2
  }
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3728      	adds	r7, #40	; 0x28
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	00010004 	.word	0x00010004

08009208 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af02      	add	r7, sp, #8
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	4608      	mov	r0, r1
 8009212:	4611      	mov	r1, r2
 8009214:	461a      	mov	r2, r3
 8009216:	4603      	mov	r3, r0
 8009218:	817b      	strh	r3, [r7, #10]
 800921a:	460b      	mov	r3, r1
 800921c:	813b      	strh	r3, [r7, #8]
 800921e:	4613      	mov	r3, r2
 8009220:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009222:	f7fe fdef 	bl	8007e04 <HAL_GetTick>
 8009226:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b20      	cmp	r3, #32
 8009232:	f040 80d9 	bne.w	80093e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	2319      	movs	r3, #25
 800923c:	2201      	movs	r2, #1
 800923e:	496d      	ldr	r1, [pc, #436]	; (80093f4 <HAL_I2C_Mem_Write+0x1ec>)
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 fdcf 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800924c:	2302      	movs	r3, #2
 800924e:	e0cc      	b.n	80093ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009256:	2b01      	cmp	r3, #1
 8009258:	d101      	bne.n	800925e <HAL_I2C_Mem_Write+0x56>
 800925a:	2302      	movs	r3, #2
 800925c:	e0c5      	b.n	80093ea <HAL_I2C_Mem_Write+0x1e2>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0301 	and.w	r3, r3, #1
 8009270:	2b01      	cmp	r3, #1
 8009272:	d007      	beq.n	8009284 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f042 0201 	orr.w	r2, r2, #1
 8009282:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009292:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2221      	movs	r2, #33	; 0x21
 8009298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2240      	movs	r2, #64	; 0x40
 80092a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a3a      	ldr	r2, [r7, #32]
 80092ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4a4d      	ldr	r2, [pc, #308]	; (80093f8 <HAL_I2C_Mem_Write+0x1f0>)
 80092c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092c6:	88f8      	ldrh	r0, [r7, #6]
 80092c8:	893a      	ldrh	r2, [r7, #8]
 80092ca:	8979      	ldrh	r1, [r7, #10]
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	4603      	mov	r3, r0
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f000 fc06 	bl	8009ae8 <I2C_RequestMemoryWrite>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d052      	beq.n	8009388 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e081      	b.n	80093ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 fe50 	bl	8009f90 <I2C_WaitOnTXEFlagUntilTimeout>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00d      	beq.n	8009312 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	d107      	bne.n	800930e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800930c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e06b      	b.n	80093ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009316:	781a      	ldrb	r2, [r3, #0]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800932c:	3b01      	subs	r3, #1
 800932e:	b29a      	uxth	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009338:	b29b      	uxth	r3, r3
 800933a:	3b01      	subs	r3, #1
 800933c:	b29a      	uxth	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b04      	cmp	r3, #4
 800934e:	d11b      	bne.n	8009388 <HAL_I2C_Mem_Write+0x180>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009354:	2b00      	cmp	r3, #0
 8009356:	d017      	beq.n	8009388 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	781a      	ldrb	r2, [r3, #0]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009372:	3b01      	subs	r3, #1
 8009374:	b29a      	uxth	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800937e:	b29b      	uxth	r3, r3
 8009380:	3b01      	subs	r3, #1
 8009382:	b29a      	uxth	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1aa      	bne.n	80092e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 fe3c 	bl	800a012 <I2C_WaitOnBTFFlagUntilTimeout>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00d      	beq.n	80093bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a4:	2b04      	cmp	r3, #4
 80093a6:	d107      	bne.n	80093b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e016      	b.n	80093ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	e000      	b.n	80093ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80093e8:	2302      	movs	r3, #2
  }
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3718      	adds	r7, #24
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	00100002 	.word	0x00100002
 80093f8:	ffff0000 	.word	0xffff0000

080093fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b08c      	sub	sp, #48	; 0x30
 8009400:	af02      	add	r7, sp, #8
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	4608      	mov	r0, r1
 8009406:	4611      	mov	r1, r2
 8009408:	461a      	mov	r2, r3
 800940a:	4603      	mov	r3, r0
 800940c:	817b      	strh	r3, [r7, #10]
 800940e:	460b      	mov	r3, r1
 8009410:	813b      	strh	r3, [r7, #8]
 8009412:	4613      	mov	r3, r2
 8009414:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009416:	f7fe fcf5 	bl	8007e04 <HAL_GetTick>
 800941a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b20      	cmp	r3, #32
 8009426:	f040 8208 	bne.w	800983a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	2319      	movs	r3, #25
 8009430:	2201      	movs	r2, #1
 8009432:	497b      	ldr	r1, [pc, #492]	; (8009620 <HAL_I2C_Mem_Read+0x224>)
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 fcd5 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009440:	2302      	movs	r3, #2
 8009442:	e1fb      	b.n	800983c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800944a:	2b01      	cmp	r3, #1
 800944c:	d101      	bne.n	8009452 <HAL_I2C_Mem_Read+0x56>
 800944e:	2302      	movs	r3, #2
 8009450:	e1f4      	b.n	800983c <HAL_I2C_Mem_Read+0x440>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	2b01      	cmp	r3, #1
 8009466:	d007      	beq.n	8009478 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f042 0201 	orr.w	r2, r2, #1
 8009476:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009486:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2222      	movs	r2, #34	; 0x22
 800948c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2240      	movs	r2, #64	; 0x40
 8009494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80094a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	4a5b      	ldr	r2, [pc, #364]	; (8009624 <HAL_I2C_Mem_Read+0x228>)
 80094b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80094ba:	88f8      	ldrh	r0, [r7, #6]
 80094bc:	893a      	ldrh	r2, [r7, #8]
 80094be:	8979      	ldrh	r1, [r7, #10]
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	9301      	str	r3, [sp, #4]
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	4603      	mov	r3, r0
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 fba2 	bl	8009c14 <I2C_RequestMemoryRead>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e1b0      	b.n	800983c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d113      	bne.n	800950a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094e2:	2300      	movs	r3, #0
 80094e4:	623b      	str	r3, [r7, #32]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	623b      	str	r3, [r7, #32]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	623b      	str	r3, [r7, #32]
 80094f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	e184      	b.n	8009814 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950e:	2b01      	cmp	r3, #1
 8009510:	d11b      	bne.n	800954a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009520:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009522:	2300      	movs	r3, #0
 8009524:	61fb      	str	r3, [r7, #28]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	61fb      	str	r3, [r7, #28]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	61fb      	str	r3, [r7, #28]
 8009536:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	e164      	b.n	8009814 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800954e:	2b02      	cmp	r3, #2
 8009550:	d11b      	bne.n	800958a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009560:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009570:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009572:	2300      	movs	r3, #0
 8009574:	61bb      	str	r3, [r7, #24]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	695b      	ldr	r3, [r3, #20]
 800957c:	61bb      	str	r3, [r7, #24]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	61bb      	str	r3, [r7, #24]
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	e144      	b.n	8009814 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800958a:	2300      	movs	r3, #0
 800958c:	617b      	str	r3, [r7, #20]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	617b      	str	r3, [r7, #20]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	617b      	str	r3, [r7, #20]
 800959e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80095a0:	e138      	b.n	8009814 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	f200 80f1 	bhi.w	800978e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d123      	bne.n	80095fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f000 fd6b 	bl	800a094 <I2C_WaitOnRXNEFlagUntilTimeout>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e139      	b.n	800983c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	691a      	ldr	r2, [r3, #16]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	b2d2      	uxtb	r2, r2
 80095d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e4:	3b01      	subs	r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	3b01      	subs	r3, #1
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095fa:	e10b      	b.n	8009814 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009600:	2b02      	cmp	r3, #2
 8009602:	d14e      	bne.n	80096a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	2200      	movs	r2, #0
 800960c:	4906      	ldr	r1, [pc, #24]	; (8009628 <HAL_I2C_Mem_Read+0x22c>)
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 fbe8 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d008      	beq.n	800962c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e10e      	b.n	800983c <HAL_I2C_Mem_Read+0x440>
 800961e:	bf00      	nop
 8009620:	00100002 	.word	0x00100002
 8009624:	ffff0000 	.word	0xffff0000
 8009628:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800963a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	691a      	ldr	r2, [r3, #16]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	b2d2      	uxtb	r2, r2
 8009648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	1c5a      	adds	r2, r3, #1
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009658:	3b01      	subs	r3, #1
 800965a:	b29a      	uxth	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009664:	b29b      	uxth	r3, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	b29a      	uxth	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	691a      	ldr	r2, [r3, #16]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009678:	b2d2      	uxtb	r2, r2
 800967a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800968a:	3b01      	subs	r3, #1
 800968c:	b29a      	uxth	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009696:	b29b      	uxth	r3, r3
 8009698:	3b01      	subs	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096a0:	e0b8      	b.n	8009814 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a8:	2200      	movs	r2, #0
 80096aa:	4966      	ldr	r1, [pc, #408]	; (8009844 <HAL_I2C_Mem_Read+0x448>)
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 fb99 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e0bf      	b.n	800983c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	691a      	ldr	r2, [r3, #16]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d6:	b2d2      	uxtb	r2, r2
 80096d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	1c5a      	adds	r2, r3, #1
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096e8:	3b01      	subs	r3, #1
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	3b01      	subs	r3, #1
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009704:	2200      	movs	r2, #0
 8009706:	494f      	ldr	r1, [pc, #316]	; (8009844 <HAL_I2C_Mem_Read+0x448>)
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 fb6b 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e091      	b.n	800983c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	691a      	ldr	r2, [r3, #16]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009732:	b2d2      	uxtb	r2, r2
 8009734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009744:	3b01      	subs	r3, #1
 8009746:	b29a      	uxth	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009750:	b29b      	uxth	r3, r3
 8009752:	3b01      	subs	r3, #1
 8009754:	b29a      	uxth	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	691a      	ldr	r2, [r3, #16]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009764:	b2d2      	uxtb	r2, r2
 8009766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009776:	3b01      	subs	r3, #1
 8009778:	b29a      	uxth	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009782:	b29b      	uxth	r3, r3
 8009784:	3b01      	subs	r3, #1
 8009786:	b29a      	uxth	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800978c:	e042      	b.n	8009814 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800978e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009790:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f000 fc7e 	bl	800a094 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e04c      	b.n	800983c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	691a      	ldr	r2, [r3, #16]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ac:	b2d2      	uxtb	r2, r2
 80097ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b4:	1c5a      	adds	r2, r3, #1
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	3b01      	subs	r3, #1
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	f003 0304 	and.w	r3, r3, #4
 80097de:	2b04      	cmp	r3, #4
 80097e0:	d118      	bne.n	8009814 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	691a      	ldr	r2, [r3, #16]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	b2d2      	uxtb	r2, r2
 80097ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	1c5a      	adds	r2, r3, #1
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097fe:	3b01      	subs	r3, #1
 8009800:	b29a      	uxth	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800980a:	b29b      	uxth	r3, r3
 800980c:	3b01      	subs	r3, #1
 800980e:	b29a      	uxth	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009818:	2b00      	cmp	r3, #0
 800981a:	f47f aec2 	bne.w	80095a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2220      	movs	r2, #32
 8009822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	e000      	b.n	800983c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800983a:	2302      	movs	r3, #2
  }
}
 800983c:	4618      	mov	r0, r3
 800983e:	3728      	adds	r7, #40	; 0x28
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	00010004 	.word	0x00010004

08009848 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af02      	add	r7, sp, #8
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	607a      	str	r2, [r7, #4]
 8009852:	603b      	str	r3, [r7, #0]
 8009854:	460b      	mov	r3, r1
 8009856:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2b08      	cmp	r3, #8
 8009862:	d006      	beq.n	8009872 <I2C_MasterRequestWrite+0x2a>
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d003      	beq.n	8009872 <I2C_MasterRequestWrite+0x2a>
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009870:	d108      	bne.n	8009884 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	e00b      	b.n	800989c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009888:	2b12      	cmp	r3, #18
 800988a:	d107      	bne.n	800989c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800989a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 fa9b 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00d      	beq.n	80098d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098c2:	d103      	bne.n	80098cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e035      	b.n	800993c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098d8:	d108      	bne.n	80098ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098da:	897b      	ldrh	r3, [r7, #10]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	461a      	mov	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098e8:	611a      	str	r2, [r3, #16]
 80098ea:	e01b      	b.n	8009924 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80098ec:	897b      	ldrh	r3, [r7, #10]
 80098ee:	11db      	asrs	r3, r3, #7
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	f003 0306 	and.w	r3, r3, #6
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	f063 030f 	orn	r3, r3, #15
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	490e      	ldr	r1, [pc, #56]	; (8009944 <I2C_MasterRequestWrite+0xfc>)
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 fac1 	bl	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e010      	b.n	800993c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800991a:	897b      	ldrh	r3, [r7, #10]
 800991c:	b2da      	uxtb	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	4907      	ldr	r1, [pc, #28]	; (8009948 <I2C_MasterRequestWrite+0x100>)
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f000 fab1 	bl	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d001      	beq.n	800993a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e000      	b.n	800993c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	00010008 	.word	0x00010008
 8009948:	00010002 	.word	0x00010002

0800994c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b088      	sub	sp, #32
 8009950:	af02      	add	r7, sp, #8
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	607a      	str	r2, [r7, #4]
 8009956:	603b      	str	r3, [r7, #0]
 8009958:	460b      	mov	r3, r1
 800995a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009960:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009970:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	2b08      	cmp	r3, #8
 8009976:	d006      	beq.n	8009986 <I2C_MasterRequestRead+0x3a>
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d003      	beq.n	8009986 <I2C_MasterRequestRead+0x3a>
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009984:	d108      	bne.n	8009998 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	e00b      	b.n	80099b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999c:	2b11      	cmp	r3, #17
 800999e:	d107      	bne.n	80099b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 fa11 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00d      	beq.n	80099e4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099d6:	d103      	bne.n	80099e0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099e0:	2303      	movs	r3, #3
 80099e2:	e079      	b.n	8009ad8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099ec:	d108      	bne.n	8009a00 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80099ee:	897b      	ldrh	r3, [r7, #10]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	f043 0301 	orr.w	r3, r3, #1
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	611a      	str	r2, [r3, #16]
 80099fe:	e05f      	b.n	8009ac0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009a00:	897b      	ldrh	r3, [r7, #10]
 8009a02:	11db      	asrs	r3, r3, #7
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	f003 0306 	and.w	r3, r3, #6
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	f063 030f 	orn	r3, r3, #15
 8009a10:	b2da      	uxtb	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	4930      	ldr	r1, [pc, #192]	; (8009ae0 <I2C_MasterRequestRead+0x194>)
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 fa37 	bl	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e054      	b.n	8009ad8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009a2e:	897b      	ldrh	r3, [r7, #10]
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	4929      	ldr	r1, [pc, #164]	; (8009ae4 <I2C_MasterRequestRead+0x198>)
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 fa27 	bl	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e044      	b.n	8009ad8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a4e:	2300      	movs	r3, #0
 8009a50:	613b      	str	r3, [r7, #16]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	613b      	str	r3, [r7, #16]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	613b      	str	r3, [r7, #16]
 8009a62:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a72:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f000 f9af 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00d      	beq.n	8009aa8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a9a:	d103      	bne.n	8009aa4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aa2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e017      	b.n	8009ad8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009aa8:	897b      	ldrh	r3, [r7, #10]
 8009aaa:	11db      	asrs	r3, r3, #7
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	f003 0306 	and.w	r3, r3, #6
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	f063 030e 	orn	r3, r3, #14
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	4907      	ldr	r1, [pc, #28]	; (8009ae4 <I2C_MasterRequestRead+0x198>)
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 f9e3 	bl	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e000      	b.n	8009ad8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	00010008 	.word	0x00010008
 8009ae4:	00010002 	.word	0x00010002

08009ae8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b088      	sub	sp, #32
 8009aec:	af02      	add	r7, sp, #8
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	4608      	mov	r0, r1
 8009af2:	4611      	mov	r1, r2
 8009af4:	461a      	mov	r2, r3
 8009af6:	4603      	mov	r3, r0
 8009af8:	817b      	strh	r3, [r7, #10]
 8009afa:	460b      	mov	r3, r1
 8009afc:	813b      	strh	r3, [r7, #8]
 8009afe:	4613      	mov	r3, r2
 8009b00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 f960 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00d      	beq.n	8009b46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b38:	d103      	bne.n	8009b42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e05f      	b.n	8009c06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b46:	897b      	ldrh	r3, [r7, #10]
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b58:	6a3a      	ldr	r2, [r7, #32]
 8009b5a:	492d      	ldr	r1, [pc, #180]	; (8009c10 <I2C_RequestMemoryWrite+0x128>)
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 f998 	bl	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e04c      	b.n	8009c06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	617b      	str	r3, [r7, #20]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	617b      	str	r3, [r7, #20]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	617b      	str	r3, [r7, #20]
 8009b80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b84:	6a39      	ldr	r1, [r7, #32]
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f000 fa02 	bl	8009f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00d      	beq.n	8009bae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b96:	2b04      	cmp	r3, #4
 8009b98:	d107      	bne.n	8009baa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ba8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e02b      	b.n	8009c06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009bae:	88fb      	ldrh	r3, [r7, #6]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d105      	bne.n	8009bc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bb4:	893b      	ldrh	r3, [r7, #8]
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	611a      	str	r2, [r3, #16]
 8009bbe:	e021      	b.n	8009c04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009bc0:	893b      	ldrh	r3, [r7, #8]
 8009bc2:	0a1b      	lsrs	r3, r3, #8
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bd0:	6a39      	ldr	r1, [r7, #32]
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f000 f9dc 	bl	8009f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00d      	beq.n	8009bfa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be2:	2b04      	cmp	r3, #4
 8009be4:	d107      	bne.n	8009bf6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e005      	b.n	8009c06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bfa:	893b      	ldrh	r3, [r7, #8]
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	00010002 	.word	0x00010002

08009c14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b088      	sub	sp, #32
 8009c18:	af02      	add	r7, sp, #8
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	4611      	mov	r1, r2
 8009c20:	461a      	mov	r2, r3
 8009c22:	4603      	mov	r3, r0
 8009c24:	817b      	strh	r3, [r7, #10]
 8009c26:	460b      	mov	r3, r1
 8009c28:	813b      	strh	r3, [r7, #8]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f8c2 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00d      	beq.n	8009c82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c74:	d103      	bne.n	8009c7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e0aa      	b.n	8009dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009c82:	897b      	ldrh	r3, [r7, #10]
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	461a      	mov	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009c90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	6a3a      	ldr	r2, [r7, #32]
 8009c96:	4952      	ldr	r1, [pc, #328]	; (8009de0 <I2C_RequestMemoryRead+0x1cc>)
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 f8fa 	bl	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e097      	b.n	8009dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ca8:	2300      	movs	r3, #0
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	617b      	str	r3, [r7, #20]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cc0:	6a39      	ldr	r1, [r7, #32]
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f000 f964 	bl	8009f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00d      	beq.n	8009cea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd2:	2b04      	cmp	r3, #4
 8009cd4:	d107      	bne.n	8009ce6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ce4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e076      	b.n	8009dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cea:	88fb      	ldrh	r3, [r7, #6]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d105      	bne.n	8009cfc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009cf0:	893b      	ldrh	r3, [r7, #8]
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	611a      	str	r2, [r3, #16]
 8009cfa:	e021      	b.n	8009d40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009cfc:	893b      	ldrh	r3, [r7, #8]
 8009cfe:	0a1b      	lsrs	r3, r3, #8
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	b2da      	uxtb	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d0c:	6a39      	ldr	r1, [r7, #32]
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 f93e 	bl	8009f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00d      	beq.n	8009d36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1e:	2b04      	cmp	r3, #4
 8009d20:	d107      	bne.n	8009d32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e050      	b.n	8009dd8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d36:	893b      	ldrh	r3, [r7, #8]
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d42:	6a39      	ldr	r1, [r7, #32]
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f000 f923 	bl	8009f90 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00d      	beq.n	8009d6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d54:	2b04      	cmp	r3, #4
 8009d56:	d107      	bne.n	8009d68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e035      	b.n	8009dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f000 f82b 	bl	8009de4 <I2C_WaitOnFlagUntilTimeout>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00d      	beq.n	8009db0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009da2:	d103      	bne.n	8009dac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009daa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e013      	b.n	8009dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009db0:	897b      	ldrh	r3, [r7, #10]
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	f043 0301 	orr.w	r3, r3, #1
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc2:	6a3a      	ldr	r2, [r7, #32]
 8009dc4:	4906      	ldr	r1, [pc, #24]	; (8009de0 <I2C_RequestMemoryRead+0x1cc>)
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f000 f863 	bl	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e000      	b.n	8009dd8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3718      	adds	r7, #24
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	00010002 	.word	0x00010002

08009de4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	4613      	mov	r3, r2
 8009df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009df4:	e025      	b.n	8009e42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dfc:	d021      	beq.n	8009e42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dfe:	f7fe f801 	bl	8007e04 <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d302      	bcc.n	8009e14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d116      	bne.n	8009e42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	f043 0220 	orr.w	r2, r3, #32
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e023      	b.n	8009e8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	0c1b      	lsrs	r3, r3, #16
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d10d      	bne.n	8009e68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	695b      	ldr	r3, [r3, #20]
 8009e52:	43da      	mvns	r2, r3
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	4013      	ands	r3, r2
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bf0c      	ite	eq
 8009e5e:	2301      	moveq	r3, #1
 8009e60:	2300      	movne	r3, #0
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	461a      	mov	r2, r3
 8009e66:	e00c      	b.n	8009e82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	43da      	mvns	r2, r3
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	4013      	ands	r3, r2
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	bf0c      	ite	eq
 8009e7a:	2301      	moveq	r3, #1
 8009e7c:	2300      	movne	r3, #0
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	461a      	mov	r2, r3
 8009e82:	79fb      	ldrb	r3, [r7, #7]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d0b6      	beq.n	8009df6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b084      	sub	sp, #16
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	60f8      	str	r0, [r7, #12]
 8009e9a:	60b9      	str	r1, [r7, #8]
 8009e9c:	607a      	str	r2, [r7, #4]
 8009e9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ea0:	e051      	b.n	8009f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	695b      	ldr	r3, [r3, #20]
 8009ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eb0:	d123      	bne.n	8009efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ec0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009eca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee6:	f043 0204 	orr.w	r2, r3, #4
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e046      	b.n	8009f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f00:	d021      	beq.n	8009f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f02:	f7fd ff7f 	bl	8007e04 <HAL_GetTick>
 8009f06:	4602      	mov	r2, r0
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d302      	bcc.n	8009f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d116      	bne.n	8009f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2220      	movs	r2, #32
 8009f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f32:	f043 0220 	orr.w	r2, r3, #32
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e020      	b.n	8009f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	0c1b      	lsrs	r3, r3, #16
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d10c      	bne.n	8009f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	43da      	mvns	r2, r3
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	bf14      	ite	ne
 8009f62:	2301      	movne	r3, #1
 8009f64:	2300      	moveq	r3, #0
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	e00b      	b.n	8009f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	43da      	mvns	r2, r3
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	4013      	ands	r3, r2
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	bf14      	ite	ne
 8009f7c:	2301      	movne	r3, #1
 8009f7e:	2300      	moveq	r3, #0
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d18d      	bne.n	8009ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f9c:	e02d      	b.n	8009ffa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f000 f8ce 	bl	800a140 <I2C_IsAcknowledgeFailed>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e02d      	b.n	800a00a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fb4:	d021      	beq.n	8009ffa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fb6:	f7fd ff25 	bl	8007e04 <HAL_GetTick>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d302      	bcc.n	8009fcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d116      	bne.n	8009ffa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2220      	movs	r2, #32
 8009fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe6:	f043 0220 	orr.w	r2, r3, #32
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e007      	b.n	800a00a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	695b      	ldr	r3, [r3, #20]
 800a000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a004:	2b80      	cmp	r3, #128	; 0x80
 800a006:	d1ca      	bne.n	8009f9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	60f8      	str	r0, [r7, #12]
 800a01a:	60b9      	str	r1, [r7, #8]
 800a01c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a01e:	e02d      	b.n	800a07c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 f88d 	bl	800a140 <I2C_IsAcknowledgeFailed>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e02d      	b.n	800a08c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a036:	d021      	beq.n	800a07c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a038:	f7fd fee4 	bl	8007e04 <HAL_GetTick>
 800a03c:	4602      	mov	r2, r0
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	429a      	cmp	r2, r3
 800a046:	d302      	bcc.n	800a04e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d116      	bne.n	800a07c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2220      	movs	r2, #32
 800a058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a068:	f043 0220 	orr.w	r2, r3, #32
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e007      	b.n	800a08c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	f003 0304 	and.w	r3, r3, #4
 800a086:	2b04      	cmp	r3, #4
 800a088:	d1ca      	bne.n	800a020 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0a0:	e042      	b.n	800a128 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	695b      	ldr	r3, [r3, #20]
 800a0a8:	f003 0310 	and.w	r3, r3, #16
 800a0ac:	2b10      	cmp	r3, #16
 800a0ae:	d119      	bne.n	800a0e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f06f 0210 	mvn.w	r2, #16
 800a0b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2220      	movs	r2, #32
 800a0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e029      	b.n	800a138 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0e4:	f7fd fe8e 	bl	8007e04 <HAL_GetTick>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d302      	bcc.n	800a0fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d116      	bne.n	800a128 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2220      	movs	r2, #32
 800a104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a114:	f043 0220 	orr.w	r2, r3, #32
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e007      	b.n	800a138 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a132:	2b40      	cmp	r3, #64	; 0x40
 800a134:	d1b5      	bne.n	800a0a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a156:	d11b      	bne.n	800a190 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a160:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2220      	movs	r2, #32
 800a16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17c:	f043 0204 	orr.w	r2, r3, #4
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e000      	b.n	800a192 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
	...

0800a1a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e267      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d075      	beq.n	800a2aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a1be:	4b88      	ldr	r3, [pc, #544]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	f003 030c 	and.w	r3, r3, #12
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d00c      	beq.n	800a1e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1ca:	4b85      	ldr	r3, [pc, #532]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a1d2:	2b08      	cmp	r3, #8
 800a1d4:	d112      	bne.n	800a1fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1d6:	4b82      	ldr	r3, [pc, #520]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1e2:	d10b      	bne.n	800a1fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1e4:	4b7e      	ldr	r3, [pc, #504]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d05b      	beq.n	800a2a8 <HAL_RCC_OscConfig+0x108>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d157      	bne.n	800a2a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e242      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a204:	d106      	bne.n	800a214 <HAL_RCC_OscConfig+0x74>
 800a206:	4b76      	ldr	r3, [pc, #472]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a75      	ldr	r2, [pc, #468]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a20c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a210:	6013      	str	r3, [r2, #0]
 800a212:	e01d      	b.n	800a250 <HAL_RCC_OscConfig+0xb0>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a21c:	d10c      	bne.n	800a238 <HAL_RCC_OscConfig+0x98>
 800a21e:	4b70      	ldr	r3, [pc, #448]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a6f      	ldr	r2, [pc, #444]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a228:	6013      	str	r3, [r2, #0]
 800a22a:	4b6d      	ldr	r3, [pc, #436]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a6c      	ldr	r2, [pc, #432]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a234:	6013      	str	r3, [r2, #0]
 800a236:	e00b      	b.n	800a250 <HAL_RCC_OscConfig+0xb0>
 800a238:	4b69      	ldr	r3, [pc, #420]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a68      	ldr	r2, [pc, #416]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a23e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a242:	6013      	str	r3, [r2, #0]
 800a244:	4b66      	ldr	r3, [pc, #408]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a65      	ldr	r2, [pc, #404]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a24a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a24e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d013      	beq.n	800a280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a258:	f7fd fdd4 	bl	8007e04 <HAL_GetTick>
 800a25c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a25e:	e008      	b.n	800a272 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a260:	f7fd fdd0 	bl	8007e04 <HAL_GetTick>
 800a264:	4602      	mov	r2, r0
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	2b64      	cmp	r3, #100	; 0x64
 800a26c:	d901      	bls.n	800a272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e207      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a272:	4b5b      	ldr	r3, [pc, #364]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0f0      	beq.n	800a260 <HAL_RCC_OscConfig+0xc0>
 800a27e:	e014      	b.n	800a2aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a280:	f7fd fdc0 	bl	8007e04 <HAL_GetTick>
 800a284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a286:	e008      	b.n	800a29a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a288:	f7fd fdbc 	bl	8007e04 <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	2b64      	cmp	r3, #100	; 0x64
 800a294:	d901      	bls.n	800a29a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a296:	2303      	movs	r3, #3
 800a298:	e1f3      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a29a:	4b51      	ldr	r3, [pc, #324]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1f0      	bne.n	800a288 <HAL_RCC_OscConfig+0xe8>
 800a2a6:	e000      	b.n	800a2aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 0302 	and.w	r3, r3, #2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d063      	beq.n	800a37e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a2b6:	4b4a      	ldr	r3, [pc, #296]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	f003 030c 	and.w	r3, r3, #12
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00b      	beq.n	800a2da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2c2:	4b47      	ldr	r3, [pc, #284]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a2ca:	2b08      	cmp	r3, #8
 800a2cc:	d11c      	bne.n	800a308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2ce:	4b44      	ldr	r3, [pc, #272]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d116      	bne.n	800a308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2da:	4b41      	ldr	r3, [pc, #260]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0302 	and.w	r3, r3, #2
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d005      	beq.n	800a2f2 <HAL_RCC_OscConfig+0x152>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d001      	beq.n	800a2f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e1c7      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2f2:	4b3b      	ldr	r3, [pc, #236]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	00db      	lsls	r3, r3, #3
 800a300:	4937      	ldr	r1, [pc, #220]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a302:	4313      	orrs	r3, r2
 800a304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a306:	e03a      	b.n	800a37e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d020      	beq.n	800a352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a310:	4b34      	ldr	r3, [pc, #208]	; (800a3e4 <HAL_RCC_OscConfig+0x244>)
 800a312:	2201      	movs	r2, #1
 800a314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a316:	f7fd fd75 	bl	8007e04 <HAL_GetTick>
 800a31a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a31c:	e008      	b.n	800a330 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a31e:	f7fd fd71 	bl	8007e04 <HAL_GetTick>
 800a322:	4602      	mov	r2, r0
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d901      	bls.n	800a330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e1a8      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a330:	4b2b      	ldr	r3, [pc, #172]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 0302 	and.w	r3, r3, #2
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d0f0      	beq.n	800a31e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a33c:	4b28      	ldr	r3, [pc, #160]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	00db      	lsls	r3, r3, #3
 800a34a:	4925      	ldr	r1, [pc, #148]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a34c:	4313      	orrs	r3, r2
 800a34e:	600b      	str	r3, [r1, #0]
 800a350:	e015      	b.n	800a37e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a352:	4b24      	ldr	r3, [pc, #144]	; (800a3e4 <HAL_RCC_OscConfig+0x244>)
 800a354:	2200      	movs	r2, #0
 800a356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a358:	f7fd fd54 	bl	8007e04 <HAL_GetTick>
 800a35c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a35e:	e008      	b.n	800a372 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a360:	f7fd fd50 	bl	8007e04 <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d901      	bls.n	800a372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e187      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a372:	4b1b      	ldr	r3, [pc, #108]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0302 	and.w	r3, r3, #2
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1f0      	bne.n	800a360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 0308 	and.w	r3, r3, #8
 800a386:	2b00      	cmp	r3, #0
 800a388:	d036      	beq.n	800a3f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d016      	beq.n	800a3c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a392:	4b15      	ldr	r3, [pc, #84]	; (800a3e8 <HAL_RCC_OscConfig+0x248>)
 800a394:	2201      	movs	r2, #1
 800a396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a398:	f7fd fd34 	bl	8007e04 <HAL_GetTick>
 800a39c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a39e:	e008      	b.n	800a3b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a3a0:	f7fd fd30 	bl	8007e04 <HAL_GetTick>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d901      	bls.n	800a3b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e167      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3b2:	4b0b      	ldr	r3, [pc, #44]	; (800a3e0 <HAL_RCC_OscConfig+0x240>)
 800a3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3b6:	f003 0302 	and.w	r3, r3, #2
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d0f0      	beq.n	800a3a0 <HAL_RCC_OscConfig+0x200>
 800a3be:	e01b      	b.n	800a3f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3c0:	4b09      	ldr	r3, [pc, #36]	; (800a3e8 <HAL_RCC_OscConfig+0x248>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3c6:	f7fd fd1d 	bl	8007e04 <HAL_GetTick>
 800a3ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3cc:	e00e      	b.n	800a3ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a3ce:	f7fd fd19 	bl	8007e04 <HAL_GetTick>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d907      	bls.n	800a3ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	e150      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
 800a3e0:	40023800 	.word	0x40023800
 800a3e4:	42470000 	.word	0x42470000
 800a3e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3ec:	4b88      	ldr	r3, [pc, #544]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a3ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3f0:	f003 0302 	and.w	r3, r3, #2
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1ea      	bne.n	800a3ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 8097 	beq.w	800a534 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a406:	2300      	movs	r3, #0
 800a408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a40a:	4b81      	ldr	r3, [pc, #516]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10f      	bne.n	800a436 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a416:	2300      	movs	r3, #0
 800a418:	60bb      	str	r3, [r7, #8]
 800a41a:	4b7d      	ldr	r3, [pc, #500]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41e:	4a7c      	ldr	r2, [pc, #496]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a424:	6413      	str	r3, [r2, #64]	; 0x40
 800a426:	4b7a      	ldr	r3, [pc, #488]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a42e:	60bb      	str	r3, [r7, #8]
 800a430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a432:	2301      	movs	r3, #1
 800a434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a436:	4b77      	ldr	r3, [pc, #476]	; (800a614 <HAL_RCC_OscConfig+0x474>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d118      	bne.n	800a474 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a442:	4b74      	ldr	r3, [pc, #464]	; (800a614 <HAL_RCC_OscConfig+0x474>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a73      	ldr	r2, [pc, #460]	; (800a614 <HAL_RCC_OscConfig+0x474>)
 800a448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a44c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a44e:	f7fd fcd9 	bl	8007e04 <HAL_GetTick>
 800a452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a454:	e008      	b.n	800a468 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a456:	f7fd fcd5 	bl	8007e04 <HAL_GetTick>
 800a45a:	4602      	mov	r2, r0
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	2b02      	cmp	r3, #2
 800a462:	d901      	bls.n	800a468 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a464:	2303      	movs	r3, #3
 800a466:	e10c      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a468:	4b6a      	ldr	r3, [pc, #424]	; (800a614 <HAL_RCC_OscConfig+0x474>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a470:	2b00      	cmp	r3, #0
 800a472:	d0f0      	beq.n	800a456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d106      	bne.n	800a48a <HAL_RCC_OscConfig+0x2ea>
 800a47c:	4b64      	ldr	r3, [pc, #400]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a47e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a480:	4a63      	ldr	r2, [pc, #396]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a482:	f043 0301 	orr.w	r3, r3, #1
 800a486:	6713      	str	r3, [r2, #112]	; 0x70
 800a488:	e01c      	b.n	800a4c4 <HAL_RCC_OscConfig+0x324>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	2b05      	cmp	r3, #5
 800a490:	d10c      	bne.n	800a4ac <HAL_RCC_OscConfig+0x30c>
 800a492:	4b5f      	ldr	r3, [pc, #380]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a496:	4a5e      	ldr	r2, [pc, #376]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a498:	f043 0304 	orr.w	r3, r3, #4
 800a49c:	6713      	str	r3, [r2, #112]	; 0x70
 800a49e:	4b5c      	ldr	r3, [pc, #368]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a2:	4a5b      	ldr	r2, [pc, #364]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a4a4:	f043 0301 	orr.w	r3, r3, #1
 800a4a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a4aa:	e00b      	b.n	800a4c4 <HAL_RCC_OscConfig+0x324>
 800a4ac:	4b58      	ldr	r3, [pc, #352]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b0:	4a57      	ldr	r2, [pc, #348]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a4b2:	f023 0301 	bic.w	r3, r3, #1
 800a4b6:	6713      	str	r3, [r2, #112]	; 0x70
 800a4b8:	4b55      	ldr	r3, [pc, #340]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4bc:	4a54      	ldr	r2, [pc, #336]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a4be:	f023 0304 	bic.w	r3, r3, #4
 800a4c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d015      	beq.n	800a4f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4cc:	f7fd fc9a 	bl	8007e04 <HAL_GetTick>
 800a4d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4d2:	e00a      	b.n	800a4ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4d4:	f7fd fc96 	bl	8007e04 <HAL_GetTick>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d901      	bls.n	800a4ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	e0cb      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4ea:	4b49      	ldr	r3, [pc, #292]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ee:	f003 0302 	and.w	r3, r3, #2
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d0ee      	beq.n	800a4d4 <HAL_RCC_OscConfig+0x334>
 800a4f6:	e014      	b.n	800a522 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4f8:	f7fd fc84 	bl	8007e04 <HAL_GetTick>
 800a4fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4fe:	e00a      	b.n	800a516 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a500:	f7fd fc80 	bl	8007e04 <HAL_GetTick>
 800a504:	4602      	mov	r2, r0
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a50e:	4293      	cmp	r3, r2
 800a510:	d901      	bls.n	800a516 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	e0b5      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a516:	4b3e      	ldr	r3, [pc, #248]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a51a:	f003 0302 	and.w	r3, r3, #2
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1ee      	bne.n	800a500 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a522:	7dfb      	ldrb	r3, [r7, #23]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d105      	bne.n	800a534 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a528:	4b39      	ldr	r3, [pc, #228]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52c:	4a38      	ldr	r2, [pc, #224]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a52e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a532:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f000 80a1 	beq.w	800a680 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a53e:	4b34      	ldr	r3, [pc, #208]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f003 030c 	and.w	r3, r3, #12
 800a546:	2b08      	cmp	r3, #8
 800a548:	d05c      	beq.n	800a604 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d141      	bne.n	800a5d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a552:	4b31      	ldr	r3, [pc, #196]	; (800a618 <HAL_RCC_OscConfig+0x478>)
 800a554:	2200      	movs	r2, #0
 800a556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a558:	f7fd fc54 	bl	8007e04 <HAL_GetTick>
 800a55c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a55e:	e008      	b.n	800a572 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a560:	f7fd fc50 	bl	8007e04 <HAL_GetTick>
 800a564:	4602      	mov	r2, r0
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d901      	bls.n	800a572 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a56e:	2303      	movs	r3, #3
 800a570:	e087      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a572:	4b27      	ldr	r3, [pc, #156]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1f0      	bne.n	800a560 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	69da      	ldr	r2, [r3, #28]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	431a      	orrs	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	019b      	lsls	r3, r3, #6
 800a58e:	431a      	orrs	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a594:	085b      	lsrs	r3, r3, #1
 800a596:	3b01      	subs	r3, #1
 800a598:	041b      	lsls	r3, r3, #16
 800a59a:	431a      	orrs	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a0:	061b      	lsls	r3, r3, #24
 800a5a2:	491b      	ldr	r1, [pc, #108]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5a8:	4b1b      	ldr	r3, [pc, #108]	; (800a618 <HAL_RCC_OscConfig+0x478>)
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5ae:	f7fd fc29 	bl	8007e04 <HAL_GetTick>
 800a5b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5b4:	e008      	b.n	800a5c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5b6:	f7fd fc25 	bl	8007e04 <HAL_GetTick>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d901      	bls.n	800a5c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e05c      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5c8:	4b11      	ldr	r3, [pc, #68]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d0f0      	beq.n	800a5b6 <HAL_RCC_OscConfig+0x416>
 800a5d4:	e054      	b.n	800a680 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5d6:	4b10      	ldr	r3, [pc, #64]	; (800a618 <HAL_RCC_OscConfig+0x478>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5dc:	f7fd fc12 	bl	8007e04 <HAL_GetTick>
 800a5e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5e2:	e008      	b.n	800a5f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5e4:	f7fd fc0e 	bl	8007e04 <HAL_GetTick>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d901      	bls.n	800a5f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e045      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5f6:	4b06      	ldr	r3, [pc, #24]	; (800a610 <HAL_RCC_OscConfig+0x470>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1f0      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x444>
 800a602:	e03d      	b.n	800a680 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d107      	bne.n	800a61c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e038      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
 800a610:	40023800 	.word	0x40023800
 800a614:	40007000 	.word	0x40007000
 800a618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a61c:	4b1b      	ldr	r3, [pc, #108]	; (800a68c <HAL_RCC_OscConfig+0x4ec>)
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	699b      	ldr	r3, [r3, #24]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d028      	beq.n	800a67c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a634:	429a      	cmp	r2, r3
 800a636:	d121      	bne.n	800a67c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a642:	429a      	cmp	r2, r3
 800a644:	d11a      	bne.n	800a67c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a64c:	4013      	ands	r3, r2
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a654:	4293      	cmp	r3, r2
 800a656:	d111      	bne.n	800a67c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a662:	085b      	lsrs	r3, r3, #1
 800a664:	3b01      	subs	r3, #1
 800a666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a668:	429a      	cmp	r2, r3
 800a66a:	d107      	bne.n	800a67c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a678:	429a      	cmp	r2, r3
 800a67a:	d001      	beq.n	800a680 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e000      	b.n	800a682 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3718      	adds	r7, #24
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	40023800 	.word	0x40023800

0800a690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d101      	bne.n	800a6a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e0cc      	b.n	800a83e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a6a4:	4b68      	ldr	r3, [pc, #416]	; (800a848 <HAL_RCC_ClockConfig+0x1b8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 0307 	and.w	r3, r3, #7
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d90c      	bls.n	800a6cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6b2:	4b65      	ldr	r3, [pc, #404]	; (800a848 <HAL_RCC_ClockConfig+0x1b8>)
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	b2d2      	uxtb	r2, r2
 800a6b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6ba:	4b63      	ldr	r3, [pc, #396]	; (800a848 <HAL_RCC_ClockConfig+0x1b8>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 0307 	and.w	r3, r3, #7
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d001      	beq.n	800a6cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e0b8      	b.n	800a83e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 0302 	and.w	r3, r3, #2
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d020      	beq.n	800a71a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 0304 	and.w	r3, r3, #4
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d005      	beq.n	800a6f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a6e4:	4b59      	ldr	r3, [pc, #356]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	4a58      	ldr	r2, [pc, #352]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a6ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a6ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d005      	beq.n	800a708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a6fc:	4b53      	ldr	r3, [pc, #332]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	4a52      	ldr	r2, [pc, #328]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a708:	4b50      	ldr	r3, [pc, #320]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	494d      	ldr	r1, [pc, #308]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a716:	4313      	orrs	r3, r2
 800a718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0301 	and.w	r3, r3, #1
 800a722:	2b00      	cmp	r3, #0
 800a724:	d044      	beq.n	800a7b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d107      	bne.n	800a73e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a72e:	4b47      	ldr	r3, [pc, #284]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a736:	2b00      	cmp	r3, #0
 800a738:	d119      	bne.n	800a76e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e07f      	b.n	800a83e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	2b02      	cmp	r3, #2
 800a744:	d003      	beq.n	800a74e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a74a:	2b03      	cmp	r3, #3
 800a74c:	d107      	bne.n	800a75e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a74e:	4b3f      	ldr	r3, [pc, #252]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d109      	bne.n	800a76e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e06f      	b.n	800a83e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a75e:	4b3b      	ldr	r3, [pc, #236]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 0302 	and.w	r3, r3, #2
 800a766:	2b00      	cmp	r3, #0
 800a768:	d101      	bne.n	800a76e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	e067      	b.n	800a83e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a76e:	4b37      	ldr	r3, [pc, #220]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	f023 0203 	bic.w	r2, r3, #3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	4934      	ldr	r1, [pc, #208]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a77c:	4313      	orrs	r3, r2
 800a77e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a780:	f7fd fb40 	bl	8007e04 <HAL_GetTick>
 800a784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a786:	e00a      	b.n	800a79e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a788:	f7fd fb3c 	bl	8007e04 <HAL_GetTick>
 800a78c:	4602      	mov	r2, r0
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	f241 3288 	movw	r2, #5000	; 0x1388
 800a796:	4293      	cmp	r3, r2
 800a798:	d901      	bls.n	800a79e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e04f      	b.n	800a83e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a79e:	4b2b      	ldr	r3, [pc, #172]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	f003 020c 	and.w	r2, r3, #12
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d1eb      	bne.n	800a788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a7b0:	4b25      	ldr	r3, [pc, #148]	; (800a848 <HAL_RCC_ClockConfig+0x1b8>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 0307 	and.w	r3, r3, #7
 800a7b8:	683a      	ldr	r2, [r7, #0]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d20c      	bcs.n	800a7d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7be:	4b22      	ldr	r3, [pc, #136]	; (800a848 <HAL_RCC_ClockConfig+0x1b8>)
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	b2d2      	uxtb	r2, r2
 800a7c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7c6:	4b20      	ldr	r3, [pc, #128]	; (800a848 <HAL_RCC_ClockConfig+0x1b8>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0307 	and.w	r3, r3, #7
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d001      	beq.n	800a7d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e032      	b.n	800a83e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 0304 	and.w	r3, r3, #4
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d008      	beq.n	800a7f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7e4:	4b19      	ldr	r3, [pc, #100]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	4916      	ldr	r1, [pc, #88]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 0308 	and.w	r3, r3, #8
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d009      	beq.n	800a816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a802:	4b12      	ldr	r3, [pc, #72]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	490e      	ldr	r1, [pc, #56]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a812:	4313      	orrs	r3, r2
 800a814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a816:	f000 f821 	bl	800a85c <HAL_RCC_GetSysClockFreq>
 800a81a:	4602      	mov	r2, r0
 800a81c:	4b0b      	ldr	r3, [pc, #44]	; (800a84c <HAL_RCC_ClockConfig+0x1bc>)
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	091b      	lsrs	r3, r3, #4
 800a822:	f003 030f 	and.w	r3, r3, #15
 800a826:	490a      	ldr	r1, [pc, #40]	; (800a850 <HAL_RCC_ClockConfig+0x1c0>)
 800a828:	5ccb      	ldrb	r3, [r1, r3]
 800a82a:	fa22 f303 	lsr.w	r3, r2, r3
 800a82e:	4a09      	ldr	r2, [pc, #36]	; (800a854 <HAL_RCC_ClockConfig+0x1c4>)
 800a830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a832:	4b09      	ldr	r3, [pc, #36]	; (800a858 <HAL_RCC_ClockConfig+0x1c8>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4618      	mov	r0, r3
 800a838:	f7fd faa0 	bl	8007d7c <HAL_InitTick>

  return HAL_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	40023c00 	.word	0x40023c00
 800a84c:	40023800 	.word	0x40023800
 800a850:	0801c6b8 	.word	0x0801c6b8
 800a854:	20000008 	.word	0x20000008
 800a858:	2000000c 	.word	0x2000000c

0800a85c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a85c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a860:	b090      	sub	sp, #64	; 0x40
 800a862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a864:	2300      	movs	r3, #0
 800a866:	637b      	str	r3, [r7, #52]	; 0x34
 800a868:	2300      	movs	r3, #0
 800a86a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a86c:	2300      	movs	r3, #0
 800a86e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800a870:	2300      	movs	r3, #0
 800a872:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a874:	4b59      	ldr	r3, [pc, #356]	; (800a9dc <HAL_RCC_GetSysClockFreq+0x180>)
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	f003 030c 	and.w	r3, r3, #12
 800a87c:	2b08      	cmp	r3, #8
 800a87e:	d00d      	beq.n	800a89c <HAL_RCC_GetSysClockFreq+0x40>
 800a880:	2b08      	cmp	r3, #8
 800a882:	f200 80a1 	bhi.w	800a9c8 <HAL_RCC_GetSysClockFreq+0x16c>
 800a886:	2b00      	cmp	r3, #0
 800a888:	d002      	beq.n	800a890 <HAL_RCC_GetSysClockFreq+0x34>
 800a88a:	2b04      	cmp	r3, #4
 800a88c:	d003      	beq.n	800a896 <HAL_RCC_GetSysClockFreq+0x3a>
 800a88e:	e09b      	b.n	800a9c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a890:	4b53      	ldr	r3, [pc, #332]	; (800a9e0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a892:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800a894:	e09b      	b.n	800a9ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a896:	4b53      	ldr	r3, [pc, #332]	; (800a9e4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a898:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a89a:	e098      	b.n	800a9ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a89c:	4b4f      	ldr	r3, [pc, #316]	; (800a9dc <HAL_RCC_GetSysClockFreq+0x180>)
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a8a6:	4b4d      	ldr	r3, [pc, #308]	; (800a9dc <HAL_RCC_GetSysClockFreq+0x180>)
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d028      	beq.n	800a904 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8b2:	4b4a      	ldr	r3, [pc, #296]	; (800a9dc <HAL_RCC_GetSysClockFreq+0x180>)
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	099b      	lsrs	r3, r3, #6
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	623b      	str	r3, [r7, #32]
 800a8bc:	627a      	str	r2, [r7, #36]	; 0x24
 800a8be:	6a3b      	ldr	r3, [r7, #32]
 800a8c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	4b47      	ldr	r3, [pc, #284]	; (800a9e4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a8c8:	fb03 f201 	mul.w	r2, r3, r1
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	fb00 f303 	mul.w	r3, r0, r3
 800a8d2:	4413      	add	r3, r2
 800a8d4:	4a43      	ldr	r2, [pc, #268]	; (800a9e4 <HAL_RCC_GetSysClockFreq+0x188>)
 800a8d6:	fba0 1202 	umull	r1, r2, r0, r2
 800a8da:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a8dc:	460a      	mov	r2, r1
 800a8de:	62ba      	str	r2, [r7, #40]	; 0x28
 800a8e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8e2:	4413      	add	r3, r2
 800a8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	61bb      	str	r3, [r7, #24]
 800a8ec:	61fa      	str	r2, [r7, #28]
 800a8ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a8f6:	f7f6 f9c7 	bl	8000c88 <__aeabi_uldivmod>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4613      	mov	r3, r2
 800a900:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a902:	e053      	b.n	800a9ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a904:	4b35      	ldr	r3, [pc, #212]	; (800a9dc <HAL_RCC_GetSysClockFreq+0x180>)
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	099b      	lsrs	r3, r3, #6
 800a90a:	2200      	movs	r2, #0
 800a90c:	613b      	str	r3, [r7, #16]
 800a90e:	617a      	str	r2, [r7, #20]
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a916:	f04f 0b00 	mov.w	fp, #0
 800a91a:	4652      	mov	r2, sl
 800a91c:	465b      	mov	r3, fp
 800a91e:	f04f 0000 	mov.w	r0, #0
 800a922:	f04f 0100 	mov.w	r1, #0
 800a926:	0159      	lsls	r1, r3, #5
 800a928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a92c:	0150      	lsls	r0, r2, #5
 800a92e:	4602      	mov	r2, r0
 800a930:	460b      	mov	r3, r1
 800a932:	ebb2 080a 	subs.w	r8, r2, sl
 800a936:	eb63 090b 	sbc.w	r9, r3, fp
 800a93a:	f04f 0200 	mov.w	r2, #0
 800a93e:	f04f 0300 	mov.w	r3, #0
 800a942:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a946:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a94a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a94e:	ebb2 0408 	subs.w	r4, r2, r8
 800a952:	eb63 0509 	sbc.w	r5, r3, r9
 800a956:	f04f 0200 	mov.w	r2, #0
 800a95a:	f04f 0300 	mov.w	r3, #0
 800a95e:	00eb      	lsls	r3, r5, #3
 800a960:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a964:	00e2      	lsls	r2, r4, #3
 800a966:	4614      	mov	r4, r2
 800a968:	461d      	mov	r5, r3
 800a96a:	eb14 030a 	adds.w	r3, r4, sl
 800a96e:	603b      	str	r3, [r7, #0]
 800a970:	eb45 030b 	adc.w	r3, r5, fp
 800a974:	607b      	str	r3, [r7, #4]
 800a976:	f04f 0200 	mov.w	r2, #0
 800a97a:	f04f 0300 	mov.w	r3, #0
 800a97e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a982:	4629      	mov	r1, r5
 800a984:	028b      	lsls	r3, r1, #10
 800a986:	4621      	mov	r1, r4
 800a988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a98c:	4621      	mov	r1, r4
 800a98e:	028a      	lsls	r2, r1, #10
 800a990:	4610      	mov	r0, r2
 800a992:	4619      	mov	r1, r3
 800a994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a996:	2200      	movs	r2, #0
 800a998:	60bb      	str	r3, [r7, #8]
 800a99a:	60fa      	str	r2, [r7, #12]
 800a99c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9a0:	f7f6 f972 	bl	8000c88 <__aeabi_uldivmod>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a9ac:	4b0b      	ldr	r3, [pc, #44]	; (800a9dc <HAL_RCC_GetSysClockFreq+0x180>)
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	0c1b      	lsrs	r3, r3, #16
 800a9b2:	f003 0303 	and.w	r3, r3, #3
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	005b      	lsls	r3, r3, #1
 800a9ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800a9bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a9c6:	e002      	b.n	800a9ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a9c8:	4b05      	ldr	r3, [pc, #20]	; (800a9e0 <HAL_RCC_GetSysClockFreq+0x184>)
 800a9ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a9cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3740      	adds	r7, #64	; 0x40
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9da:	bf00      	nop
 800a9dc:	40023800 	.word	0x40023800
 800a9e0:	00f42400 	.word	0x00f42400
 800a9e4:	017d7840 	.word	0x017d7840

0800a9e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a9ec:	4b03      	ldr	r3, [pc, #12]	; (800a9fc <HAL_RCC_GetHCLKFreq+0x14>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	20000008 	.word	0x20000008

0800aa00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aa04:	f7ff fff0 	bl	800a9e8 <HAL_RCC_GetHCLKFreq>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	4b05      	ldr	r3, [pc, #20]	; (800aa20 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	0a9b      	lsrs	r3, r3, #10
 800aa10:	f003 0307 	and.w	r3, r3, #7
 800aa14:	4903      	ldr	r1, [pc, #12]	; (800aa24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa16:	5ccb      	ldrb	r3, [r1, r3]
 800aa18:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	40023800 	.word	0x40023800
 800aa24:	0801c6c8 	.word	0x0801c6c8

0800aa28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aa2c:	f7ff ffdc 	bl	800a9e8 <HAL_RCC_GetHCLKFreq>
 800aa30:	4602      	mov	r2, r0
 800aa32:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	0b5b      	lsrs	r3, r3, #13
 800aa38:	f003 0307 	and.w	r3, r3, #7
 800aa3c:	4903      	ldr	r1, [pc, #12]	; (800aa4c <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa3e:	5ccb      	ldrb	r3, [r1, r3]
 800aa40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	40023800 	.word	0x40023800
 800aa4c:	0801c6c8 	.word	0x0801c6c8

0800aa50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d105      	bne.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d035      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800aa78:	4b62      	ldr	r3, [pc, #392]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aa7e:	f7fd f9c1 	bl	8007e04 <HAL_GetTick>
 800aa82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aa84:	e008      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800aa86:	f7fd f9bd 	bl	8007e04 <HAL_GetTick>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d901      	bls.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e0b0      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aa98:	4b5b      	ldr	r3, [pc, #364]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1f0      	bne.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	019a      	lsls	r2, r3, #6
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	071b      	lsls	r3, r3, #28
 800aab0:	4955      	ldr	r1, [pc, #340]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aab2:	4313      	orrs	r3, r2
 800aab4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800aab8:	4b52      	ldr	r3, [pc, #328]	; (800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800aaba:	2201      	movs	r2, #1
 800aabc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aabe:	f7fd f9a1 	bl	8007e04 <HAL_GetTick>
 800aac2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aac4:	e008      	b.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800aac6:	f7fd f99d 	bl	8007e04 <HAL_GetTick>
 800aaca:	4602      	mov	r2, r0
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d901      	bls.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e090      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aad8:	4b4b      	ldr	r3, [pc, #300]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d0f0      	beq.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 0302 	and.w	r3, r3, #2
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 8083 	beq.w	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60fb      	str	r3, [r7, #12]
 800aaf6:	4b44      	ldr	r3, [pc, #272]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aaf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafa:	4a43      	ldr	r2, [pc, #268]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aafc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab00:	6413      	str	r3, [r2, #64]	; 0x40
 800ab02:	4b41      	ldr	r3, [pc, #260]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ab0e:	4b3f      	ldr	r3, [pc, #252]	; (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a3e      	ldr	r2, [pc, #248]	; (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ab14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ab1a:	f7fd f973 	bl	8007e04 <HAL_GetTick>
 800ab1e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ab20:	e008      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ab22:	f7fd f96f 	bl	8007e04 <HAL_GetTick>
 800ab26:	4602      	mov	r2, r0
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d901      	bls.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e062      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ab34:	4b35      	ldr	r3, [pc, #212]	; (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d0f0      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ab40:	4b31      	ldr	r3, [pc, #196]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab48:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d02f      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d028      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab5e:	4b2a      	ldr	r3, [pc, #168]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab66:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ab68:	4b29      	ldr	r3, [pc, #164]	; (800ac10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ab6e:	4b28      	ldr	r3, [pc, #160]	; (800ac10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ab74:	4a24      	ldr	r2, [pc, #144]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ab7a:	4b23      	ldr	r3, [pc, #140]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d114      	bne.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ab86:	f7fd f93d 	bl	8007e04 <HAL_GetTick>
 800ab8a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab8c:	e00a      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab8e:	f7fd f939 	bl	8007e04 <HAL_GetTick>
 800ab92:	4602      	mov	r2, r0
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d901      	bls.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e02a      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aba4:	4b18      	ldr	r3, [pc, #96]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba8:	f003 0302 	and.w	r3, r3, #2
 800abac:	2b00      	cmp	r3, #0
 800abae:	d0ee      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abbc:	d10d      	bne.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800abbe:	4b12      	ldr	r3, [pc, #72]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800abce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abd2:	490d      	ldr	r1, [pc, #52]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800abd4:	4313      	orrs	r3, r2
 800abd6:	608b      	str	r3, [r1, #8]
 800abd8:	e005      	b.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800abda:	4b0b      	ldr	r3, [pc, #44]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	4a0a      	ldr	r2, [pc, #40]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800abe0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800abe4:	6093      	str	r3, [r2, #8]
 800abe6:	4b08      	ldr	r3, [pc, #32]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800abe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abf2:	4905      	ldr	r1, [pc, #20]	; (800ac08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800abf4:	4313      	orrs	r3, r2
 800abf6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3718      	adds	r7, #24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	42470068 	.word	0x42470068
 800ac08:	40023800 	.word	0x40023800
 800ac0c:	40007000 	.word	0x40007000
 800ac10:	42470e40 	.word	0x42470e40

0800ac14 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	e066      	b.n	800acf8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	7f5b      	ldrb	r3, [r3, #29]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d105      	bne.n	800ac40 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7fc fcdc 	bl	80075f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2202      	movs	r2, #2
 800ac44:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	22ca      	movs	r2, #202	; 0xca
 800ac4c:	625a      	str	r2, [r3, #36]	; 0x24
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2253      	movs	r2, #83	; 0x53
 800ac54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f87a 	bl	800ad50 <RTC_EnterInitMode>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800ac60:	7bfb      	ldrb	r3, [r7, #15]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d12c      	bne.n	800acc0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	6812      	ldr	r2, [r2, #0]
 800ac70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac78:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	6899      	ldr	r1, [r3, #8]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685a      	ldr	r2, [r3, #4]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	430a      	orrs	r2, r1
 800ac96:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	68d2      	ldr	r2, [r2, #12]
 800aca0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6919      	ldr	r1, [r3, #16]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	041a      	lsls	r2, r3, #16
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	430a      	orrs	r2, r1
 800acb4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f881 	bl	800adbe <RTC_ExitInitMode>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d113      	bne.n	800acee <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800acd4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	699a      	ldr	r2, [r3, #24]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	430a      	orrs	r2, r1
 800ace6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	22ff      	movs	r2, #255	; 0xff
 800acf4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800acf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68da      	ldr	r2, [r3, #12]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ad1a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ad1c:	f7fd f872 	bl	8007e04 <HAL_GetTick>
 800ad20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ad22:	e009      	b.n	800ad38 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ad24:	f7fd f86e 	bl	8007e04 <HAL_GetTick>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad32:	d901      	bls.n	800ad38 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e007      	b.n	800ad48 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	f003 0320 	and.w	r3, r3, #32
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d0ee      	beq.n	800ad24 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d122      	bne.n	800adb4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68da      	ldr	r2, [r3, #12]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ad7c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ad7e:	f7fd f841 	bl	8007e04 <HAL_GetTick>
 800ad82:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ad84:	e00c      	b.n	800ada0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ad86:	f7fd f83d 	bl	8007e04 <HAL_GetTick>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad94:	d904      	bls.n	800ada0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2204      	movs	r2, #4
 800ad9a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d102      	bne.n	800adb4 <RTC_EnterInitMode+0x64>
 800adae:	7bfb      	ldrb	r3, [r7, #15]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d1e8      	bne.n	800ad86 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68da      	ldr	r2, [r3, #12]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800add8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	f003 0320 	and.w	r3, r3, #32
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10a      	bne.n	800adfe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff ff89 	bl	800ad00 <HAL_RTC_WaitForSynchro>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d004      	beq.n	800adfe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2204      	movs	r2, #4
 800adf8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e07b      	b.n	800af12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d108      	bne.n	800ae34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae2a:	d009      	beq.n	800ae40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	61da      	str	r2, [r3, #28]
 800ae32:	e005      	b.n	800ae40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d106      	bne.n	800ae60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7fc fbf6 	bl	800764c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2202      	movs	r2, #2
 800ae64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ae88:	431a      	orrs	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae92:	431a      	orrs	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	f003 0302 	and.w	r3, r3, #2
 800ae9c:	431a      	orrs	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	f003 0301 	and.w	r3, r3, #1
 800aea6:	431a      	orrs	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	699b      	ldr	r3, [r3, #24]
 800aeac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aeb0:	431a      	orrs	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	69db      	ldr	r3, [r3, #28]
 800aeb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aeba:	431a      	orrs	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a1b      	ldr	r3, [r3, #32]
 800aec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aec4:	ea42 0103 	orr.w	r1, r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aecc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	430a      	orrs	r2, r1
 800aed6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	0c1b      	lsrs	r3, r3, #16
 800aede:	f003 0104 	and.w	r1, r3, #4
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee6:	f003 0210 	and.w	r2, r3, #16
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	430a      	orrs	r2, r1
 800aef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	69da      	ldr	r2, [r3, #28]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b088      	sub	sp, #32
 800af1e:	af00      	add	r7, sp, #0
 800af20:	60f8      	str	r0, [r7, #12]
 800af22:	60b9      	str	r1, [r7, #8]
 800af24:	603b      	str	r3, [r7, #0]
 800af26:	4613      	mov	r3, r2
 800af28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800af34:	2b01      	cmp	r3, #1
 800af36:	d101      	bne.n	800af3c <HAL_SPI_Transmit+0x22>
 800af38:	2302      	movs	r3, #2
 800af3a:	e126      	b.n	800b18a <HAL_SPI_Transmit+0x270>
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af44:	f7fc ff5e 	bl	8007e04 <HAL_GetTick>
 800af48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800af4a:	88fb      	ldrh	r3, [r7, #6]
 800af4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b01      	cmp	r3, #1
 800af58:	d002      	beq.n	800af60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800af5a:	2302      	movs	r3, #2
 800af5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800af5e:	e10b      	b.n	800b178 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d002      	beq.n	800af6c <HAL_SPI_Transmit+0x52>
 800af66:	88fb      	ldrh	r3, [r7, #6]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d102      	bne.n	800af72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800af70:	e102      	b.n	800b178 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2203      	movs	r2, #3
 800af76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	88fa      	ldrh	r2, [r7, #6]
 800af8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	88fa      	ldrh	r2, [r7, #6]
 800af90:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2200      	movs	r2, #0
 800afa8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afb8:	d10f      	bne.n	800afda <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe4:	2b40      	cmp	r3, #64	; 0x40
 800afe6:	d007      	beq.n	800aff8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b000:	d14b      	bne.n	800b09a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d002      	beq.n	800b010 <HAL_SPI_Transmit+0xf6>
 800b00a:	8afb      	ldrh	r3, [r7, #22]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d13e      	bne.n	800b08e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b014:	881a      	ldrh	r2, [r3, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b020:	1c9a      	adds	r2, r3, #2
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	3b01      	subs	r3, #1
 800b02e:	b29a      	uxth	r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b034:	e02b      	b.n	800b08e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f003 0302 	and.w	r3, r3, #2
 800b040:	2b02      	cmp	r3, #2
 800b042:	d112      	bne.n	800b06a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b048:	881a      	ldrh	r2, [r3, #0]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b054:	1c9a      	adds	r2, r3, #2
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b05e:	b29b      	uxth	r3, r3
 800b060:	3b01      	subs	r3, #1
 800b062:	b29a      	uxth	r2, r3
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	86da      	strh	r2, [r3, #54]	; 0x36
 800b068:	e011      	b.n	800b08e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b06a:	f7fc fecb 	bl	8007e04 <HAL_GetTick>
 800b06e:	4602      	mov	r2, r0
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	683a      	ldr	r2, [r7, #0]
 800b076:	429a      	cmp	r2, r3
 800b078:	d803      	bhi.n	800b082 <HAL_SPI_Transmit+0x168>
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b080:	d102      	bne.n	800b088 <HAL_SPI_Transmit+0x16e>
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d102      	bne.n	800b08e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b088:	2303      	movs	r3, #3
 800b08a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b08c:	e074      	b.n	800b178 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b092:	b29b      	uxth	r3, r3
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1ce      	bne.n	800b036 <HAL_SPI_Transmit+0x11c>
 800b098:	e04c      	b.n	800b134 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d002      	beq.n	800b0a8 <HAL_SPI_Transmit+0x18e>
 800b0a2:	8afb      	ldrh	r3, [r7, #22]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d140      	bne.n	800b12a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	330c      	adds	r3, #12
 800b0b2:	7812      	ldrb	r2, [r2, #0]
 800b0b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ba:	1c5a      	adds	r2, r3, #1
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b0ce:	e02c      	b.n	800b12a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	f003 0302 	and.w	r3, r3, #2
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d113      	bne.n	800b106 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	330c      	adds	r3, #12
 800b0e8:	7812      	ldrb	r2, [r2, #0]
 800b0ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f0:	1c5a      	adds	r2, r3, #1
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	86da      	strh	r2, [r3, #54]	; 0x36
 800b104:	e011      	b.n	800b12a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b106:	f7fc fe7d 	bl	8007e04 <HAL_GetTick>
 800b10a:	4602      	mov	r2, r0
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	683a      	ldr	r2, [r7, #0]
 800b112:	429a      	cmp	r2, r3
 800b114:	d803      	bhi.n	800b11e <HAL_SPI_Transmit+0x204>
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b11c:	d102      	bne.n	800b124 <HAL_SPI_Transmit+0x20a>
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d102      	bne.n	800b12a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b128:	e026      	b.n	800b178 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b12e:	b29b      	uxth	r3, r3
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1cd      	bne.n	800b0d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f000 fa55 	bl	800b5e8 <SPI_EndRxTxTransaction>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d002      	beq.n	800b14a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2220      	movs	r2, #32
 800b148:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10a      	bne.n	800b168 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b152:	2300      	movs	r3, #0
 800b154:	613b      	str	r3, [r7, #16]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	613b      	str	r3, [r7, #16]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	613b      	str	r3, [r7, #16]
 800b166:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d002      	beq.n	800b176 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	77fb      	strb	r3, [r7, #31]
 800b174:	e000      	b.n	800b178 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b176:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b188:	7ffb      	ldrb	r3, [r7, #31]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3720      	adds	r7, #32
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b08c      	sub	sp, #48	; 0x30
 800b196:	af00      	add	r7, sp, #0
 800b198:	60f8      	str	r0, [r7, #12]
 800b19a:	60b9      	str	r1, [r7, #8]
 800b19c:	607a      	str	r2, [r7, #4]
 800b19e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d101      	bne.n	800b1b8 <HAL_SPI_TransmitReceive+0x26>
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	e18a      	b.n	800b4ce <HAL_SPI_TransmitReceive+0x33c>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1c0:	f7fc fe20 	bl	8007e04 <HAL_GetTick>
 800b1c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b1d6:	887b      	ldrh	r3, [r7, #2]
 800b1d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b1da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d00f      	beq.n	800b202 <HAL_SPI_TransmitReceive+0x70>
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1e8:	d107      	bne.n	800b1fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d103      	bne.n	800b1fa <HAL_SPI_TransmitReceive+0x68>
 800b1f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1f6:	2b04      	cmp	r3, #4
 800b1f8:	d003      	beq.n	800b202 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b200:	e15b      	b.n	800b4ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d005      	beq.n	800b214 <HAL_SPI_TransmitReceive+0x82>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d002      	beq.n	800b214 <HAL_SPI_TransmitReceive+0x82>
 800b20e:	887b      	ldrh	r3, [r7, #2]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d103      	bne.n	800b21c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b21a:	e14e      	b.n	800b4ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b222:	b2db      	uxtb	r3, r3
 800b224:	2b04      	cmp	r3, #4
 800b226:	d003      	beq.n	800b230 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2205      	movs	r2, #5
 800b22c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2200      	movs	r2, #0
 800b234:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	887a      	ldrh	r2, [r7, #2]
 800b240:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	887a      	ldrh	r2, [r7, #2]
 800b246:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	68ba      	ldr	r2, [r7, #8]
 800b24c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	887a      	ldrh	r2, [r7, #2]
 800b252:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	887a      	ldrh	r2, [r7, #2]
 800b258:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2200      	movs	r2, #0
 800b25e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b270:	2b40      	cmp	r3, #64	; 0x40
 800b272:	d007      	beq.n	800b284 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b28c:	d178      	bne.n	800b380 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d002      	beq.n	800b29c <HAL_SPI_TransmitReceive+0x10a>
 800b296:	8b7b      	ldrh	r3, [r7, #26]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d166      	bne.n	800b36a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a0:	881a      	ldrh	r2, [r3, #0]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ac:	1c9a      	adds	r2, r3, #2
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b2c0:	e053      	b.n	800b36a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	f003 0302 	and.w	r3, r3, #2
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d11b      	bne.n	800b308 <HAL_SPI_TransmitReceive+0x176>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d016      	beq.n	800b308 <HAL_SPI_TransmitReceive+0x176>
 800b2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d113      	bne.n	800b308 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e4:	881a      	ldrh	r2, [r3, #0]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f0:	1c9a      	adds	r2, r3, #2
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b304:	2300      	movs	r3, #0
 800b306:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	f003 0301 	and.w	r3, r3, #1
 800b312:	2b01      	cmp	r3, #1
 800b314:	d119      	bne.n	800b34a <HAL_SPI_TransmitReceive+0x1b8>
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d014      	beq.n	800b34a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68da      	ldr	r2, [r3, #12]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b32a:	b292      	uxth	r2, r2
 800b32c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b332:	1c9a      	adds	r2, r3, #2
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	3b01      	subs	r3, #1
 800b340:	b29a      	uxth	r2, r3
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b346:	2301      	movs	r3, #1
 800b348:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b34a:	f7fc fd5b 	bl	8007e04 <HAL_GetTick>
 800b34e:	4602      	mov	r2, r0
 800b350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b356:	429a      	cmp	r2, r3
 800b358:	d807      	bhi.n	800b36a <HAL_SPI_TransmitReceive+0x1d8>
 800b35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b360:	d003      	beq.n	800b36a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b362:	2303      	movs	r3, #3
 800b364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b368:	e0a7      	b.n	800b4ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b36e:	b29b      	uxth	r3, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1a6      	bne.n	800b2c2 <HAL_SPI_TransmitReceive+0x130>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b378:	b29b      	uxth	r3, r3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1a1      	bne.n	800b2c2 <HAL_SPI_TransmitReceive+0x130>
 800b37e:	e07c      	b.n	800b47a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <HAL_SPI_TransmitReceive+0x1fc>
 800b388:	8b7b      	ldrh	r3, [r7, #26]
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d16b      	bne.n	800b466 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	330c      	adds	r3, #12
 800b398:	7812      	ldrb	r2, [r2, #0]
 800b39a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a0:	1c5a      	adds	r2, r3, #1
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b3b4:	e057      	b.n	800b466 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	f003 0302 	and.w	r3, r3, #2
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d11c      	bne.n	800b3fe <HAL_SPI_TransmitReceive+0x26c>
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d017      	beq.n	800b3fe <HAL_SPI_TransmitReceive+0x26c>
 800b3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d114      	bne.n	800b3fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	330c      	adds	r3, #12
 800b3de:	7812      	ldrb	r2, [r2, #0]
 800b3e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e6:	1c5a      	adds	r2, r3, #1
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	b29a      	uxth	r2, r3
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	f003 0301 	and.w	r3, r3, #1
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d119      	bne.n	800b440 <HAL_SPI_TransmitReceive+0x2ae>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b410:	b29b      	uxth	r3, r3
 800b412:	2b00      	cmp	r3, #0
 800b414:	d014      	beq.n	800b440 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	68da      	ldr	r2, [r3, #12]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b420:	b2d2      	uxtb	r2, r2
 800b422:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b428:	1c5a      	adds	r2, r3, #1
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b432:	b29b      	uxth	r3, r3
 800b434:	3b01      	subs	r3, #1
 800b436:	b29a      	uxth	r2, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b43c:	2301      	movs	r3, #1
 800b43e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b440:	f7fc fce0 	bl	8007e04 <HAL_GetTick>
 800b444:	4602      	mov	r2, r0
 800b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d803      	bhi.n	800b458 <HAL_SPI_TransmitReceive+0x2c6>
 800b450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b456:	d102      	bne.n	800b45e <HAL_SPI_TransmitReceive+0x2cc>
 800b458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d103      	bne.n	800b466 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b45e:	2303      	movs	r3, #3
 800b460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b464:	e029      	b.n	800b4ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1a2      	bne.n	800b3b6 <HAL_SPI_TransmitReceive+0x224>
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b474:	b29b      	uxth	r3, r3
 800b476:	2b00      	cmp	r3, #0
 800b478:	d19d      	bne.n	800b3b6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b47a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b47c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f000 f8b2 	bl	800b5e8 <SPI_EndRxTxTransaction>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d006      	beq.n	800b498 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2220      	movs	r2, #32
 800b494:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b496:	e010      	b.n	800b4ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10b      	bne.n	800b4b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	617b      	str	r3, [r7, #20]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	617b      	str	r3, [r7, #20]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	617b      	str	r3, [r7, #20]
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	e000      	b.n	800b4ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b4b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b4ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3730      	adds	r7, #48	; 0x30
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
	...

0800b4d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b088      	sub	sp, #32
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	603b      	str	r3, [r7, #0]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b4e8:	f7fc fc8c 	bl	8007e04 <HAL_GetTick>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f0:	1a9b      	subs	r3, r3, r2
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b4f8:	f7fc fc84 	bl	8007e04 <HAL_GetTick>
 800b4fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b4fe:	4b39      	ldr	r3, [pc, #228]	; (800b5e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	015b      	lsls	r3, r3, #5
 800b504:	0d1b      	lsrs	r3, r3, #20
 800b506:	69fa      	ldr	r2, [r7, #28]
 800b508:	fb02 f303 	mul.w	r3, r2, r3
 800b50c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b50e:	e054      	b.n	800b5ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b516:	d050      	beq.n	800b5ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b518:	f7fc fc74 	bl	8007e04 <HAL_GetTick>
 800b51c:	4602      	mov	r2, r0
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	69fa      	ldr	r2, [r7, #28]
 800b524:	429a      	cmp	r2, r3
 800b526:	d902      	bls.n	800b52e <SPI_WaitFlagStateUntilTimeout+0x56>
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d13d      	bne.n	800b5aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b53c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b546:	d111      	bne.n	800b56c <SPI_WaitFlagStateUntilTimeout+0x94>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b550:	d004      	beq.n	800b55c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b55a:	d107      	bne.n	800b56c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b56a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b574:	d10f      	bne.n	800b596 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b594:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	e017      	b.n	800b5da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d101      	bne.n	800b5b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	689a      	ldr	r2, [r3, #8]
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	4013      	ands	r3, r2
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	bf0c      	ite	eq
 800b5ca:	2301      	moveq	r3, #1
 800b5cc:	2300      	movne	r3, #0
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	79fb      	ldrb	r3, [r7, #7]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d19b      	bne.n	800b510 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3720      	adds	r7, #32
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	20000008 	.word	0x20000008

0800b5e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af02      	add	r7, sp, #8
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b5f4:	4b1b      	ldr	r3, [pc, #108]	; (800b664 <SPI_EndRxTxTransaction+0x7c>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a1b      	ldr	r2, [pc, #108]	; (800b668 <SPI_EndRxTxTransaction+0x80>)
 800b5fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b5fe:	0d5b      	lsrs	r3, r3, #21
 800b600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b604:	fb02 f303 	mul.w	r3, r2, r3
 800b608:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b612:	d112      	bne.n	800b63a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	2200      	movs	r2, #0
 800b61c:	2180      	movs	r1, #128	; 0x80
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f7ff ff5a 	bl	800b4d8 <SPI_WaitFlagStateUntilTimeout>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d016      	beq.n	800b658 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b62e:	f043 0220 	orr.w	r2, r3, #32
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b636:	2303      	movs	r3, #3
 800b638:	e00f      	b.n	800b65a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00a      	beq.n	800b656 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	3b01      	subs	r3, #1
 800b644:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b650:	2b80      	cmp	r3, #128	; 0x80
 800b652:	d0f2      	beq.n	800b63a <SPI_EndRxTxTransaction+0x52>
 800b654:	e000      	b.n	800b658 <SPI_EndRxTxTransaction+0x70>
        break;
 800b656:	bf00      	nop
  }

  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3718      	adds	r7, #24
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	20000008 	.word	0x20000008
 800b668:	165e9f81 	.word	0x165e9f81

0800b66c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d101      	bne.n	800b67e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	e041      	b.n	800b702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b00      	cmp	r3, #0
 800b688:	d106      	bne.n	800b698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7fc f822 	bl	80076dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2202      	movs	r2, #2
 800b69c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	3304      	adds	r3, #4
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	f000 fa10 	bl	800bad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b082      	sub	sp, #8
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d101      	bne.n	800b71c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b718:	2301      	movs	r3, #1
 800b71a:	e041      	b.n	800b7a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b722:	b2db      	uxtb	r3, r3
 800b724:	2b00      	cmp	r3, #0
 800b726:	d106      	bne.n	800b736 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 f839 	bl	800b7a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2202      	movs	r2, #2
 800b73a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	3304      	adds	r3, #4
 800b746:	4619      	mov	r1, r3
 800b748:	4610      	mov	r0, r2
 800b74a:	f000 f9c1 	bl	800bad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2201      	movs	r2, #1
 800b762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2201      	movs	r2, #1
 800b78a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2201      	movs	r2, #1
 800b792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d101      	bne.n	800b7da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	e0ae      	b.n	800b938 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2b0c      	cmp	r3, #12
 800b7e6:	f200 809f 	bhi.w	800b928 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b7ea:	a201      	add	r2, pc, #4	; (adr r2, 800b7f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f0:	0800b825 	.word	0x0800b825
 800b7f4:	0800b929 	.word	0x0800b929
 800b7f8:	0800b929 	.word	0x0800b929
 800b7fc:	0800b929 	.word	0x0800b929
 800b800:	0800b865 	.word	0x0800b865
 800b804:	0800b929 	.word	0x0800b929
 800b808:	0800b929 	.word	0x0800b929
 800b80c:	0800b929 	.word	0x0800b929
 800b810:	0800b8a7 	.word	0x0800b8a7
 800b814:	0800b929 	.word	0x0800b929
 800b818:	0800b929 	.word	0x0800b929
 800b81c:	0800b929 	.word	0x0800b929
 800b820:	0800b8e7 	.word	0x0800b8e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68b9      	ldr	r1, [r7, #8]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f000 f9f0 	bl	800bc10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	699a      	ldr	r2, [r3, #24]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f042 0208 	orr.w	r2, r2, #8
 800b83e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	699a      	ldr	r2, [r3, #24]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f022 0204 	bic.w	r2, r2, #4
 800b84e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	6999      	ldr	r1, [r3, #24]
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	691a      	ldr	r2, [r3, #16]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	430a      	orrs	r2, r1
 800b860:	619a      	str	r2, [r3, #24]
      break;
 800b862:	e064      	b.n	800b92e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68b9      	ldr	r1, [r7, #8]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 fa40 	bl	800bcf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	699a      	ldr	r2, [r3, #24]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b87e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	699a      	ldr	r2, [r3, #24]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b88e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6999      	ldr	r1, [r3, #24]
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	691b      	ldr	r3, [r3, #16]
 800b89a:	021a      	lsls	r2, r3, #8
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	430a      	orrs	r2, r1
 800b8a2:	619a      	str	r2, [r3, #24]
      break;
 800b8a4:	e043      	b.n	800b92e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68b9      	ldr	r1, [r7, #8]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f000 fa95 	bl	800bddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	69da      	ldr	r2, [r3, #28]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f042 0208 	orr.w	r2, r2, #8
 800b8c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	69da      	ldr	r2, [r3, #28]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f022 0204 	bic.w	r2, r2, #4
 800b8d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	69d9      	ldr	r1, [r3, #28]
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	691a      	ldr	r2, [r3, #16]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	430a      	orrs	r2, r1
 800b8e2:	61da      	str	r2, [r3, #28]
      break;
 800b8e4:	e023      	b.n	800b92e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68b9      	ldr	r1, [r7, #8]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 fae9 	bl	800bec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	69da      	ldr	r2, [r3, #28]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	69da      	ldr	r2, [r3, #28]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	69d9      	ldr	r1, [r3, #28]
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	021a      	lsls	r2, r3, #8
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	430a      	orrs	r2, r1
 800b924:	61da      	str	r2, [r3, #28]
      break;
 800b926:	e002      	b.n	800b92e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b928:	2301      	movs	r3, #1
 800b92a:	75fb      	strb	r3, [r7, #23]
      break;
 800b92c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b936:	7dfb      	ldrb	r3, [r7, #23]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3718      	adds	r7, #24
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b94a:	2300      	movs	r3, #0
 800b94c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b954:	2b01      	cmp	r3, #1
 800b956:	d101      	bne.n	800b95c <HAL_TIM_ConfigClockSource+0x1c>
 800b958:	2302      	movs	r3, #2
 800b95a:	e0b4      	b.n	800bac6 <HAL_TIM_ConfigClockSource+0x186>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2202      	movs	r2, #2
 800b968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b97a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b982:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b994:	d03e      	beq.n	800ba14 <HAL_TIM_ConfigClockSource+0xd4>
 800b996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b99a:	f200 8087 	bhi.w	800baac <HAL_TIM_ConfigClockSource+0x16c>
 800b99e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9a2:	f000 8086 	beq.w	800bab2 <HAL_TIM_ConfigClockSource+0x172>
 800b9a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9aa:	d87f      	bhi.n	800baac <HAL_TIM_ConfigClockSource+0x16c>
 800b9ac:	2b70      	cmp	r3, #112	; 0x70
 800b9ae:	d01a      	beq.n	800b9e6 <HAL_TIM_ConfigClockSource+0xa6>
 800b9b0:	2b70      	cmp	r3, #112	; 0x70
 800b9b2:	d87b      	bhi.n	800baac <HAL_TIM_ConfigClockSource+0x16c>
 800b9b4:	2b60      	cmp	r3, #96	; 0x60
 800b9b6:	d050      	beq.n	800ba5a <HAL_TIM_ConfigClockSource+0x11a>
 800b9b8:	2b60      	cmp	r3, #96	; 0x60
 800b9ba:	d877      	bhi.n	800baac <HAL_TIM_ConfigClockSource+0x16c>
 800b9bc:	2b50      	cmp	r3, #80	; 0x50
 800b9be:	d03c      	beq.n	800ba3a <HAL_TIM_ConfigClockSource+0xfa>
 800b9c0:	2b50      	cmp	r3, #80	; 0x50
 800b9c2:	d873      	bhi.n	800baac <HAL_TIM_ConfigClockSource+0x16c>
 800b9c4:	2b40      	cmp	r3, #64	; 0x40
 800b9c6:	d058      	beq.n	800ba7a <HAL_TIM_ConfigClockSource+0x13a>
 800b9c8:	2b40      	cmp	r3, #64	; 0x40
 800b9ca:	d86f      	bhi.n	800baac <HAL_TIM_ConfigClockSource+0x16c>
 800b9cc:	2b30      	cmp	r3, #48	; 0x30
 800b9ce:	d064      	beq.n	800ba9a <HAL_TIM_ConfigClockSource+0x15a>
 800b9d0:	2b30      	cmp	r3, #48	; 0x30
 800b9d2:	d86b      	bhi.n	800baac <HAL_TIM_ConfigClockSource+0x16c>
 800b9d4:	2b20      	cmp	r3, #32
 800b9d6:	d060      	beq.n	800ba9a <HAL_TIM_ConfigClockSource+0x15a>
 800b9d8:	2b20      	cmp	r3, #32
 800b9da:	d867      	bhi.n	800baac <HAL_TIM_ConfigClockSource+0x16c>
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d05c      	beq.n	800ba9a <HAL_TIM_ConfigClockSource+0x15a>
 800b9e0:	2b10      	cmp	r3, #16
 800b9e2:	d05a      	beq.n	800ba9a <HAL_TIM_ConfigClockSource+0x15a>
 800b9e4:	e062      	b.n	800baac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6818      	ldr	r0, [r3, #0]
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	6899      	ldr	r1, [r3, #8]
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	685a      	ldr	r2, [r3, #4]
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	f000 fb35 	bl	800c064 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ba08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	609a      	str	r2, [r3, #8]
      break;
 800ba12:	e04f      	b.n	800bab4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6818      	ldr	r0, [r3, #0]
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	6899      	ldr	r1, [r3, #8]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	685a      	ldr	r2, [r3, #4]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	f000 fb1e 	bl	800c064 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	689a      	ldr	r2, [r3, #8]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba36:	609a      	str	r2, [r3, #8]
      break;
 800ba38:	e03c      	b.n	800bab4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6818      	ldr	r0, [r3, #0]
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	6859      	ldr	r1, [r3, #4]
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	461a      	mov	r2, r3
 800ba48:	f000 fa92 	bl	800bf70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2150      	movs	r1, #80	; 0x50
 800ba52:	4618      	mov	r0, r3
 800ba54:	f000 faeb 	bl	800c02e <TIM_ITRx_SetConfig>
      break;
 800ba58:	e02c      	b.n	800bab4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6818      	ldr	r0, [r3, #0]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	6859      	ldr	r1, [r3, #4]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	461a      	mov	r2, r3
 800ba68:	f000 fab1 	bl	800bfce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2160      	movs	r1, #96	; 0x60
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 fadb 	bl	800c02e <TIM_ITRx_SetConfig>
      break;
 800ba78:	e01c      	b.n	800bab4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6818      	ldr	r0, [r3, #0]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	6859      	ldr	r1, [r3, #4]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	461a      	mov	r2, r3
 800ba88:	f000 fa72 	bl	800bf70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2140      	movs	r1, #64	; 0x40
 800ba92:	4618      	mov	r0, r3
 800ba94:	f000 facb 	bl	800c02e <TIM_ITRx_SetConfig>
      break;
 800ba98:	e00c      	b.n	800bab4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4619      	mov	r1, r3
 800baa4:	4610      	mov	r0, r2
 800baa6:	f000 fac2 	bl	800c02e <TIM_ITRx_SetConfig>
      break;
 800baaa:	e003      	b.n	800bab4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	73fb      	strb	r3, [r7, #15]
      break;
 800bab0:	e000      	b.n	800bab4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bab2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
	...

0800bad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4a40      	ldr	r2, [pc, #256]	; (800bbe4 <TIM_Base_SetConfig+0x114>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d013      	beq.n	800bb10 <TIM_Base_SetConfig+0x40>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baee:	d00f      	beq.n	800bb10 <TIM_Base_SetConfig+0x40>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a3d      	ldr	r2, [pc, #244]	; (800bbe8 <TIM_Base_SetConfig+0x118>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d00b      	beq.n	800bb10 <TIM_Base_SetConfig+0x40>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a3c      	ldr	r2, [pc, #240]	; (800bbec <TIM_Base_SetConfig+0x11c>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d007      	beq.n	800bb10 <TIM_Base_SetConfig+0x40>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a3b      	ldr	r2, [pc, #236]	; (800bbf0 <TIM_Base_SetConfig+0x120>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d003      	beq.n	800bb10 <TIM_Base_SetConfig+0x40>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a3a      	ldr	r2, [pc, #232]	; (800bbf4 <TIM_Base_SetConfig+0x124>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d108      	bne.n	800bb22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a2f      	ldr	r2, [pc, #188]	; (800bbe4 <TIM_Base_SetConfig+0x114>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d02b      	beq.n	800bb82 <TIM_Base_SetConfig+0xb2>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb30:	d027      	beq.n	800bb82 <TIM_Base_SetConfig+0xb2>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4a2c      	ldr	r2, [pc, #176]	; (800bbe8 <TIM_Base_SetConfig+0x118>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d023      	beq.n	800bb82 <TIM_Base_SetConfig+0xb2>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a2b      	ldr	r2, [pc, #172]	; (800bbec <TIM_Base_SetConfig+0x11c>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d01f      	beq.n	800bb82 <TIM_Base_SetConfig+0xb2>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a2a      	ldr	r2, [pc, #168]	; (800bbf0 <TIM_Base_SetConfig+0x120>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d01b      	beq.n	800bb82 <TIM_Base_SetConfig+0xb2>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a29      	ldr	r2, [pc, #164]	; (800bbf4 <TIM_Base_SetConfig+0x124>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d017      	beq.n	800bb82 <TIM_Base_SetConfig+0xb2>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a28      	ldr	r2, [pc, #160]	; (800bbf8 <TIM_Base_SetConfig+0x128>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d013      	beq.n	800bb82 <TIM_Base_SetConfig+0xb2>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a27      	ldr	r2, [pc, #156]	; (800bbfc <TIM_Base_SetConfig+0x12c>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d00f      	beq.n	800bb82 <TIM_Base_SetConfig+0xb2>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a26      	ldr	r2, [pc, #152]	; (800bc00 <TIM_Base_SetConfig+0x130>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d00b      	beq.n	800bb82 <TIM_Base_SetConfig+0xb2>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a25      	ldr	r2, [pc, #148]	; (800bc04 <TIM_Base_SetConfig+0x134>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d007      	beq.n	800bb82 <TIM_Base_SetConfig+0xb2>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a24      	ldr	r2, [pc, #144]	; (800bc08 <TIM_Base_SetConfig+0x138>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d003      	beq.n	800bb82 <TIM_Base_SetConfig+0xb2>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4a23      	ldr	r2, [pc, #140]	; (800bc0c <TIM_Base_SetConfig+0x13c>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d108      	bne.n	800bb94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	689a      	ldr	r2, [r3, #8]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	4a0a      	ldr	r2, [pc, #40]	; (800bbe4 <TIM_Base_SetConfig+0x114>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d003      	beq.n	800bbc8 <TIM_Base_SetConfig+0xf8>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4a0c      	ldr	r2, [pc, #48]	; (800bbf4 <TIM_Base_SetConfig+0x124>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d103      	bne.n	800bbd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	691a      	ldr	r2, [r3, #16]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	615a      	str	r2, [r3, #20]
}
 800bbd6:	bf00      	nop
 800bbd8:	3714      	adds	r7, #20
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	40010000 	.word	0x40010000
 800bbe8:	40000400 	.word	0x40000400
 800bbec:	40000800 	.word	0x40000800
 800bbf0:	40000c00 	.word	0x40000c00
 800bbf4:	40010400 	.word	0x40010400
 800bbf8:	40014000 	.word	0x40014000
 800bbfc:	40014400 	.word	0x40014400
 800bc00:	40014800 	.word	0x40014800
 800bc04:	40001800 	.word	0x40001800
 800bc08:	40001c00 	.word	0x40001c00
 800bc0c:	40002000 	.word	0x40002000

0800bc10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b087      	sub	sp, #28
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6a1b      	ldr	r3, [r3, #32]
 800bc1e:	f023 0201 	bic.w	r2, r3, #1
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a1b      	ldr	r3, [r3, #32]
 800bc2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f023 0303 	bic.w	r3, r3, #3
 800bc46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f023 0302 	bic.w	r3, r3, #2
 800bc58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4a20      	ldr	r2, [pc, #128]	; (800bce8 <TIM_OC1_SetConfig+0xd8>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d003      	beq.n	800bc74 <TIM_OC1_SetConfig+0x64>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a1f      	ldr	r2, [pc, #124]	; (800bcec <TIM_OC1_SetConfig+0xdc>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d10c      	bne.n	800bc8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	f023 0308 	bic.w	r3, r3, #8
 800bc7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	4313      	orrs	r3, r2
 800bc84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	f023 0304 	bic.w	r3, r3, #4
 800bc8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4a15      	ldr	r2, [pc, #84]	; (800bce8 <TIM_OC1_SetConfig+0xd8>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d003      	beq.n	800bc9e <TIM_OC1_SetConfig+0x8e>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4a14      	ldr	r2, [pc, #80]	; (800bcec <TIM_OC1_SetConfig+0xdc>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d111      	bne.n	800bcc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bcac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	695b      	ldr	r3, [r3, #20]
 800bcb2:	693a      	ldr	r2, [r7, #16]
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	699b      	ldr	r3, [r3, #24]
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	697a      	ldr	r2, [r7, #20]
 800bcda:	621a      	str	r2, [r3, #32]
}
 800bcdc:	bf00      	nop
 800bcde:	371c      	adds	r7, #28
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	40010000 	.word	0x40010000
 800bcec:	40010400 	.word	0x40010400

0800bcf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b087      	sub	sp, #28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a1b      	ldr	r3, [r3, #32]
 800bcfe:	f023 0210 	bic.w	r2, r3, #16
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a1b      	ldr	r3, [r3, #32]
 800bd0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	699b      	ldr	r3, [r3, #24]
 800bd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	021b      	lsls	r3, r3, #8
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	4313      	orrs	r3, r2
 800bd32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f023 0320 	bic.w	r3, r3, #32
 800bd3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	011b      	lsls	r3, r3, #4
 800bd42:	697a      	ldr	r2, [r7, #20]
 800bd44:	4313      	orrs	r3, r2
 800bd46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4a22      	ldr	r2, [pc, #136]	; (800bdd4 <TIM_OC2_SetConfig+0xe4>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d003      	beq.n	800bd58 <TIM_OC2_SetConfig+0x68>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4a21      	ldr	r2, [pc, #132]	; (800bdd8 <TIM_OC2_SetConfig+0xe8>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d10d      	bne.n	800bd74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	011b      	lsls	r3, r3, #4
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	4a17      	ldr	r2, [pc, #92]	; (800bdd4 <TIM_OC2_SetConfig+0xe4>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d003      	beq.n	800bd84 <TIM_OC2_SetConfig+0x94>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4a16      	ldr	r2, [pc, #88]	; (800bdd8 <TIM_OC2_SetConfig+0xe8>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d113      	bne.n	800bdac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	695b      	ldr	r3, [r3, #20]
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	693a      	ldr	r2, [r7, #16]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	621a      	str	r2, [r3, #32]
}
 800bdc6:	bf00      	nop
 800bdc8:	371c      	adds	r7, #28
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	40010000 	.word	0x40010000
 800bdd8:	40010400 	.word	0x40010400

0800bddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b087      	sub	sp, #28
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6a1b      	ldr	r3, [r3, #32]
 800bdea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	69db      	ldr	r3, [r3, #28]
 800be02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f023 0303 	bic.w	r3, r3, #3
 800be12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	021b      	lsls	r3, r3, #8
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	4313      	orrs	r3, r2
 800be30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a21      	ldr	r2, [pc, #132]	; (800bebc <TIM_OC3_SetConfig+0xe0>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d003      	beq.n	800be42 <TIM_OC3_SetConfig+0x66>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a20      	ldr	r2, [pc, #128]	; (800bec0 <TIM_OC3_SetConfig+0xe4>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d10d      	bne.n	800be5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	021b      	lsls	r3, r3, #8
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	4313      	orrs	r3, r2
 800be54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800be5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a16      	ldr	r2, [pc, #88]	; (800bebc <TIM_OC3_SetConfig+0xe0>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d003      	beq.n	800be6e <TIM_OC3_SetConfig+0x92>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a15      	ldr	r2, [pc, #84]	; (800bec0 <TIM_OC3_SetConfig+0xe4>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d113      	bne.n	800be96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	695b      	ldr	r3, [r3, #20]
 800be82:	011b      	lsls	r3, r3, #4
 800be84:	693a      	ldr	r2, [r7, #16]
 800be86:	4313      	orrs	r3, r2
 800be88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	011b      	lsls	r3, r3, #4
 800be90:	693a      	ldr	r2, [r7, #16]
 800be92:	4313      	orrs	r3, r2
 800be94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	685a      	ldr	r2, [r3, #4]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	697a      	ldr	r2, [r7, #20]
 800beae:	621a      	str	r2, [r3, #32]
}
 800beb0:	bf00      	nop
 800beb2:	371c      	adds	r7, #28
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr
 800bebc:	40010000 	.word	0x40010000
 800bec0:	40010400 	.word	0x40010400

0800bec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b087      	sub	sp, #28
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a1b      	ldr	r3, [r3, #32]
 800bed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a1b      	ldr	r3, [r3, #32]
 800bede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	69db      	ldr	r3, [r3, #28]
 800beea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800befa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	021b      	lsls	r3, r3, #8
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	031b      	lsls	r3, r3, #12
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a12      	ldr	r2, [pc, #72]	; (800bf68 <TIM_OC4_SetConfig+0xa4>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d003      	beq.n	800bf2c <TIM_OC4_SetConfig+0x68>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a11      	ldr	r2, [pc, #68]	; (800bf6c <TIM_OC4_SetConfig+0xa8>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d109      	bne.n	800bf40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	695b      	ldr	r3, [r3, #20]
 800bf38:	019b      	lsls	r3, r3, #6
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	685a      	ldr	r2, [r3, #4]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	693a      	ldr	r2, [r7, #16]
 800bf58:	621a      	str	r2, [r3, #32]
}
 800bf5a:	bf00      	nop
 800bf5c:	371c      	adds	r7, #28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	40010000 	.word	0x40010000
 800bf6c:	40010400 	.word	0x40010400

0800bf70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b087      	sub	sp, #28
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6a1b      	ldr	r3, [r3, #32]
 800bf80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	f023 0201 	bic.w	r2, r3, #1
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	699b      	ldr	r3, [r3, #24]
 800bf92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	011b      	lsls	r3, r3, #4
 800bfa0:	693a      	ldr	r2, [r7, #16]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	f023 030a 	bic.w	r3, r3, #10
 800bfac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	693a      	ldr	r2, [r7, #16]
 800bfba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	621a      	str	r2, [r3, #32]
}
 800bfc2:	bf00      	nop
 800bfc4:	371c      	adds	r7, #28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b087      	sub	sp, #28
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	60f8      	str	r0, [r7, #12]
 800bfd6:	60b9      	str	r1, [r7, #8]
 800bfd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6a1b      	ldr	r3, [r3, #32]
 800bfde:	f023 0210 	bic.w	r2, r3, #16
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6a1b      	ldr	r3, [r3, #32]
 800bff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bff8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	031b      	lsls	r3, r3, #12
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	4313      	orrs	r3, r2
 800c002:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c00a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	011b      	lsls	r3, r3, #4
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	4313      	orrs	r3, r2
 800c014:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	697a      	ldr	r2, [r7, #20]
 800c01a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	693a      	ldr	r2, [r7, #16]
 800c020:	621a      	str	r2, [r3, #32]
}
 800c022:	bf00      	nop
 800c024:	371c      	adds	r7, #28
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr

0800c02e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c02e:	b480      	push	{r7}
 800c030:	b085      	sub	sp, #20
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
 800c036:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c044:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c046:	683a      	ldr	r2, [r7, #0]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	f043 0307 	orr.w	r3, r3, #7
 800c050:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	609a      	str	r2, [r3, #8]
}
 800c058:	bf00      	nop
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c064:	b480      	push	{r7}
 800c066:	b087      	sub	sp, #28
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
 800c070:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c07e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	021a      	lsls	r2, r3, #8
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	431a      	orrs	r2, r3
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	697a      	ldr	r2, [r7, #20]
 800c08e:	4313      	orrs	r3, r2
 800c090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	609a      	str	r2, [r3, #8]
}
 800c098:	bf00      	nop
 800c09a:	371c      	adds	r7, #28
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d101      	bne.n	800c0bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	e05a      	b.n	800c172 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a21      	ldr	r2, [pc, #132]	; (800c180 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d022      	beq.n	800c146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c108:	d01d      	beq.n	800c146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a1d      	ldr	r2, [pc, #116]	; (800c184 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d018      	beq.n	800c146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a1b      	ldr	r2, [pc, #108]	; (800c188 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d013      	beq.n	800c146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a1a      	ldr	r2, [pc, #104]	; (800c18c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d00e      	beq.n	800c146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a18      	ldr	r2, [pc, #96]	; (800c190 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d009      	beq.n	800c146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a17      	ldr	r2, [pc, #92]	; (800c194 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d004      	beq.n	800c146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a15      	ldr	r2, [pc, #84]	; (800c198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d10c      	bne.n	800c160 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c14c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	4313      	orrs	r3, r2
 800c156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2201      	movs	r2, #1
 800c164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	3714      	adds	r7, #20
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop
 800c180:	40010000 	.word	0x40010000
 800c184:	40000400 	.word	0x40000400
 800c188:	40000800 	.word	0x40000800
 800c18c:	40000c00 	.word	0x40000c00
 800c190:	40010400 	.word	0x40010400
 800c194:	40014000 	.word	0x40014000
 800c198:	40001800 	.word	0x40001800

0800c19c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d101      	bne.n	800c1ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e03f      	b.n	800c22e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d106      	bne.n	800c1c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f7fb fb30 	bl	8007828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2224      	movs	r2, #36	; 0x24
 800c1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68da      	ldr	r2, [r3, #12]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 f9cb 	bl	800c57c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	691a      	ldr	r2, [r3, #16]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c1f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	695a      	ldr	r2, [r3, #20]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c204:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68da      	ldr	r2, [r3, #12]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c214:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2220      	movs	r2, #32
 800c220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2220      	movs	r2, #32
 800c228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b08a      	sub	sp, #40	; 0x28
 800c23a:	af02      	add	r7, sp, #8
 800c23c:	60f8      	str	r0, [r7, #12]
 800c23e:	60b9      	str	r1, [r7, #8]
 800c240:	603b      	str	r3, [r7, #0]
 800c242:	4613      	mov	r3, r2
 800c244:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c246:	2300      	movs	r3, #0
 800c248:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c250:	b2db      	uxtb	r3, r3
 800c252:	2b20      	cmp	r3, #32
 800c254:	d17c      	bne.n	800c350 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <HAL_UART_Transmit+0x2c>
 800c25c:	88fb      	ldrh	r3, [r7, #6]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	e075      	b.n	800c352 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d101      	bne.n	800c274 <HAL_UART_Transmit+0x3e>
 800c270:	2302      	movs	r3, #2
 800c272:	e06e      	b.n	800c352 <HAL_UART_Transmit+0x11c>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2221      	movs	r2, #33	; 0x21
 800c286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c28a:	f7fb fdbb 	bl	8007e04 <HAL_GetTick>
 800c28e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	88fa      	ldrh	r2, [r7, #6]
 800c294:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	88fa      	ldrh	r2, [r7, #6]
 800c29a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2a4:	d108      	bne.n	800c2b8 <HAL_UART_Transmit+0x82>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d104      	bne.n	800c2b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	61bb      	str	r3, [r7, #24]
 800c2b6:	e003      	b.n	800c2c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c2c8:	e02a      	b.n	800c320 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	2180      	movs	r1, #128	; 0x80
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f000 f8e2 	bl	800c49e <UART_WaitOnFlagUntilTimeout>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d001      	beq.n	800c2e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	e036      	b.n	800c352 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d10b      	bne.n	800c302 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	881b      	ldrh	r3, [r3, #0]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	3302      	adds	r3, #2
 800c2fe:	61bb      	str	r3, [r7, #24]
 800c300:	e007      	b.n	800c312 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	781a      	ldrb	r2, [r3, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	3301      	adds	r3, #1
 800c310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c316:	b29b      	uxth	r3, r3
 800c318:	3b01      	subs	r3, #1
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c324:	b29b      	uxth	r3, r3
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1cf      	bne.n	800c2ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2200      	movs	r2, #0
 800c332:	2140      	movs	r1, #64	; 0x40
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f000 f8b2 	bl	800c49e <UART_WaitOnFlagUntilTimeout>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d001      	beq.n	800c344 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c340:	2303      	movs	r3, #3
 800c342:	e006      	b.n	800c352 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2220      	movs	r2, #32
 800c348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c34c:	2300      	movs	r3, #0
 800c34e:	e000      	b.n	800c352 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c350:	2302      	movs	r3, #2
  }
}
 800c352:	4618      	mov	r0, r3
 800c354:	3720      	adds	r7, #32
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b08a      	sub	sp, #40	; 0x28
 800c35e:	af02      	add	r7, sp, #8
 800c360:	60f8      	str	r0, [r7, #12]
 800c362:	60b9      	str	r1, [r7, #8]
 800c364:	603b      	str	r3, [r7, #0]
 800c366:	4613      	mov	r3, r2
 800c368:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c36a:	2300      	movs	r3, #0
 800c36c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c374:	b2db      	uxtb	r3, r3
 800c376:	2b20      	cmp	r3, #32
 800c378:	f040 808c 	bne.w	800c494 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d002      	beq.n	800c388 <HAL_UART_Receive+0x2e>
 800c382:	88fb      	ldrh	r3, [r7, #6]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d101      	bne.n	800c38c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800c388:	2301      	movs	r3, #1
 800c38a:	e084      	b.n	800c496 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c392:	2b01      	cmp	r3, #1
 800c394:	d101      	bne.n	800c39a <HAL_UART_Receive+0x40>
 800c396:	2302      	movs	r3, #2
 800c398:	e07d      	b.n	800c496 <HAL_UART_Receive+0x13c>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2201      	movs	r2, #1
 800c39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2222      	movs	r2, #34	; 0x22
 800c3ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c3b6:	f7fb fd25 	bl	8007e04 <HAL_GetTick>
 800c3ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	88fa      	ldrh	r2, [r7, #6]
 800c3c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	88fa      	ldrh	r2, [r7, #6]
 800c3c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3d0:	d108      	bne.n	800c3e4 <HAL_UART_Receive+0x8a>
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d104      	bne.n	800c3e4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	61bb      	str	r3, [r7, #24]
 800c3e2:	e003      	b.n	800c3ec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800c3f4:	e043      	b.n	800c47e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2120      	movs	r1, #32
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f000 f84c 	bl	800c49e <UART_WaitOnFlagUntilTimeout>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800c40c:	2303      	movs	r3, #3
 800c40e:	e042      	b.n	800c496 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10c      	bne.n	800c430 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c422:	b29a      	uxth	r2, r3
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	3302      	adds	r3, #2
 800c42c:	61bb      	str	r3, [r7, #24]
 800c42e:	e01f      	b.n	800c470 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c438:	d007      	beq.n	800c44a <HAL_UART_Receive+0xf0>
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10a      	bne.n	800c458 <HAL_UART_Receive+0xfe>
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d106      	bne.n	800c458 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	b2da      	uxtb	r2, r3
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	701a      	strb	r2, [r3, #0]
 800c456:	e008      	b.n	800c46a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c464:	b2da      	uxtb	r2, r3
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	3301      	adds	r3, #1
 800c46e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c474:	b29b      	uxth	r3, r3
 800c476:	3b01      	subs	r3, #1
 800c478:	b29a      	uxth	r2, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c482:	b29b      	uxth	r3, r3
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1b6      	bne.n	800c3f6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2220      	movs	r2, #32
 800c48c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800c490:	2300      	movs	r3, #0
 800c492:	e000      	b.n	800c496 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800c494:	2302      	movs	r3, #2
  }
}
 800c496:	4618      	mov	r0, r3
 800c498:	3720      	adds	r7, #32
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b090      	sub	sp, #64	; 0x40
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	60f8      	str	r0, [r7, #12]
 800c4a6:	60b9      	str	r1, [r7, #8]
 800c4a8:	603b      	str	r3, [r7, #0]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4ae:	e050      	b.n	800c552 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4b6:	d04c      	beq.n	800c552 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c4b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d007      	beq.n	800c4ce <UART_WaitOnFlagUntilTimeout+0x30>
 800c4be:	f7fb fca1 	bl	8007e04 <HAL_GetTick>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	1ad3      	subs	r3, r2, r3
 800c4c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d241      	bcs.n	800c552 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	330c      	adds	r3, #12
 800c4d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d8:	e853 3f00 	ldrex	r3, [r3]
 800c4dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	330c      	adds	r3, #12
 800c4ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4ee:	637a      	str	r2, [r7, #52]	; 0x34
 800c4f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4f6:	e841 2300 	strex	r3, r2, [r1]
 800c4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1e5      	bne.n	800c4ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	3314      	adds	r3, #20
 800c508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	e853 3f00 	ldrex	r3, [r3]
 800c510:	613b      	str	r3, [r7, #16]
   return(result);
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	f023 0301 	bic.w	r3, r3, #1
 800c518:	63bb      	str	r3, [r7, #56]	; 0x38
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	3314      	adds	r3, #20
 800c520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c522:	623a      	str	r2, [r7, #32]
 800c524:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c526:	69f9      	ldr	r1, [r7, #28]
 800c528:	6a3a      	ldr	r2, [r7, #32]
 800c52a:	e841 2300 	strex	r3, r2, [r1]
 800c52e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1e5      	bne.n	800c502 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2220      	movs	r2, #32
 800c53a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2220      	movs	r2, #32
 800c542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c54e:	2303      	movs	r3, #3
 800c550:	e00f      	b.n	800c572 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	4013      	ands	r3, r2
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	429a      	cmp	r2, r3
 800c560:	bf0c      	ite	eq
 800c562:	2301      	moveq	r3, #1
 800c564:	2300      	movne	r3, #0
 800c566:	b2db      	uxtb	r3, r3
 800c568:	461a      	mov	r2, r3
 800c56a:	79fb      	ldrb	r3, [r7, #7]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d09f      	beq.n	800c4b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	3740      	adds	r7, #64	; 0x40
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
	...

0800c57c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c57c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c580:	b0c0      	sub	sp, #256	; 0x100
 800c582:	af00      	add	r7, sp, #0
 800c584:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	691b      	ldr	r3, [r3, #16]
 800c590:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c598:	68d9      	ldr	r1, [r3, #12]
 800c59a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	ea40 0301 	orr.w	r3, r0, r1
 800c5a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c5a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5aa:	689a      	ldr	r2, [r3, #8]
 800c5ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	431a      	orrs	r2, r3
 800c5b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5b8:	695b      	ldr	r3, [r3, #20]
 800c5ba:	431a      	orrs	r2, r3
 800c5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5c0:	69db      	ldr	r3, [r3, #28]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c5c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c5d4:	f021 010c 	bic.w	r1, r1, #12
 800c5d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c5e2:	430b      	orrs	r3, r1
 800c5e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c5e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	695b      	ldr	r3, [r3, #20]
 800c5ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c5f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5f6:	6999      	ldr	r1, [r3, #24]
 800c5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	ea40 0301 	orr.w	r3, r0, r1
 800c602:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	4b8f      	ldr	r3, [pc, #572]	; (800c848 <UART_SetConfig+0x2cc>)
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d005      	beq.n	800c61c <UART_SetConfig+0xa0>
 800c610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	4b8d      	ldr	r3, [pc, #564]	; (800c84c <UART_SetConfig+0x2d0>)
 800c618:	429a      	cmp	r2, r3
 800c61a:	d104      	bne.n	800c626 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c61c:	f7fe fa04 	bl	800aa28 <HAL_RCC_GetPCLK2Freq>
 800c620:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c624:	e003      	b.n	800c62e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c626:	f7fe f9eb 	bl	800aa00 <HAL_RCC_GetPCLK1Freq>
 800c62a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c62e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c632:	69db      	ldr	r3, [r3, #28]
 800c634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c638:	f040 810c 	bne.w	800c854 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c63c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c640:	2200      	movs	r2, #0
 800c642:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c646:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c64a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c64e:	4622      	mov	r2, r4
 800c650:	462b      	mov	r3, r5
 800c652:	1891      	adds	r1, r2, r2
 800c654:	65b9      	str	r1, [r7, #88]	; 0x58
 800c656:	415b      	adcs	r3, r3
 800c658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c65a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c65e:	4621      	mov	r1, r4
 800c660:	eb12 0801 	adds.w	r8, r2, r1
 800c664:	4629      	mov	r1, r5
 800c666:	eb43 0901 	adc.w	r9, r3, r1
 800c66a:	f04f 0200 	mov.w	r2, #0
 800c66e:	f04f 0300 	mov.w	r3, #0
 800c672:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c676:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c67a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c67e:	4690      	mov	r8, r2
 800c680:	4699      	mov	r9, r3
 800c682:	4623      	mov	r3, r4
 800c684:	eb18 0303 	adds.w	r3, r8, r3
 800c688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c68c:	462b      	mov	r3, r5
 800c68e:	eb49 0303 	adc.w	r3, r9, r3
 800c692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c6a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c6a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	18db      	adds	r3, r3, r3
 800c6ae:	653b      	str	r3, [r7, #80]	; 0x50
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	eb42 0303 	adc.w	r3, r2, r3
 800c6b6:	657b      	str	r3, [r7, #84]	; 0x54
 800c6b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c6bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c6c0:	f7f4 fae2 	bl	8000c88 <__aeabi_uldivmod>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4b61      	ldr	r3, [pc, #388]	; (800c850 <UART_SetConfig+0x2d4>)
 800c6ca:	fba3 2302 	umull	r2, r3, r3, r2
 800c6ce:	095b      	lsrs	r3, r3, #5
 800c6d0:	011c      	lsls	r4, r3, #4
 800c6d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c6dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c6e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c6e4:	4642      	mov	r2, r8
 800c6e6:	464b      	mov	r3, r9
 800c6e8:	1891      	adds	r1, r2, r2
 800c6ea:	64b9      	str	r1, [r7, #72]	; 0x48
 800c6ec:	415b      	adcs	r3, r3
 800c6ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c6f4:	4641      	mov	r1, r8
 800c6f6:	eb12 0a01 	adds.w	sl, r2, r1
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	eb43 0b01 	adc.w	fp, r3, r1
 800c700:	f04f 0200 	mov.w	r2, #0
 800c704:	f04f 0300 	mov.w	r3, #0
 800c708:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c70c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c714:	4692      	mov	sl, r2
 800c716:	469b      	mov	fp, r3
 800c718:	4643      	mov	r3, r8
 800c71a:	eb1a 0303 	adds.w	r3, sl, r3
 800c71e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c722:	464b      	mov	r3, r9
 800c724:	eb4b 0303 	adc.w	r3, fp, r3
 800c728:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c72c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c738:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c73c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c740:	460b      	mov	r3, r1
 800c742:	18db      	adds	r3, r3, r3
 800c744:	643b      	str	r3, [r7, #64]	; 0x40
 800c746:	4613      	mov	r3, r2
 800c748:	eb42 0303 	adc.w	r3, r2, r3
 800c74c:	647b      	str	r3, [r7, #68]	; 0x44
 800c74e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c752:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c756:	f7f4 fa97 	bl	8000c88 <__aeabi_uldivmod>
 800c75a:	4602      	mov	r2, r0
 800c75c:	460b      	mov	r3, r1
 800c75e:	4611      	mov	r1, r2
 800c760:	4b3b      	ldr	r3, [pc, #236]	; (800c850 <UART_SetConfig+0x2d4>)
 800c762:	fba3 2301 	umull	r2, r3, r3, r1
 800c766:	095b      	lsrs	r3, r3, #5
 800c768:	2264      	movs	r2, #100	; 0x64
 800c76a:	fb02 f303 	mul.w	r3, r2, r3
 800c76e:	1acb      	subs	r3, r1, r3
 800c770:	00db      	lsls	r3, r3, #3
 800c772:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c776:	4b36      	ldr	r3, [pc, #216]	; (800c850 <UART_SetConfig+0x2d4>)
 800c778:	fba3 2302 	umull	r2, r3, r3, r2
 800c77c:	095b      	lsrs	r3, r3, #5
 800c77e:	005b      	lsls	r3, r3, #1
 800c780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c784:	441c      	add	r4, r3
 800c786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c78a:	2200      	movs	r2, #0
 800c78c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c790:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c794:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c798:	4642      	mov	r2, r8
 800c79a:	464b      	mov	r3, r9
 800c79c:	1891      	adds	r1, r2, r2
 800c79e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c7a0:	415b      	adcs	r3, r3
 800c7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c7a8:	4641      	mov	r1, r8
 800c7aa:	1851      	adds	r1, r2, r1
 800c7ac:	6339      	str	r1, [r7, #48]	; 0x30
 800c7ae:	4649      	mov	r1, r9
 800c7b0:	414b      	adcs	r3, r1
 800c7b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c7b4:	f04f 0200 	mov.w	r2, #0
 800c7b8:	f04f 0300 	mov.w	r3, #0
 800c7bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c7c0:	4659      	mov	r1, fp
 800c7c2:	00cb      	lsls	r3, r1, #3
 800c7c4:	4651      	mov	r1, sl
 800c7c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c7ca:	4651      	mov	r1, sl
 800c7cc:	00ca      	lsls	r2, r1, #3
 800c7ce:	4610      	mov	r0, r2
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	4642      	mov	r2, r8
 800c7d6:	189b      	adds	r3, r3, r2
 800c7d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c7dc:	464b      	mov	r3, r9
 800c7de:	460a      	mov	r2, r1
 800c7e0:	eb42 0303 	adc.w	r3, r2, r3
 800c7e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c7e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c7f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c7f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	18db      	adds	r3, r3, r3
 800c800:	62bb      	str	r3, [r7, #40]	; 0x28
 800c802:	4613      	mov	r3, r2
 800c804:	eb42 0303 	adc.w	r3, r2, r3
 800c808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c80a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c80e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c812:	f7f4 fa39 	bl	8000c88 <__aeabi_uldivmod>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	4b0d      	ldr	r3, [pc, #52]	; (800c850 <UART_SetConfig+0x2d4>)
 800c81c:	fba3 1302 	umull	r1, r3, r3, r2
 800c820:	095b      	lsrs	r3, r3, #5
 800c822:	2164      	movs	r1, #100	; 0x64
 800c824:	fb01 f303 	mul.w	r3, r1, r3
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	00db      	lsls	r3, r3, #3
 800c82c:	3332      	adds	r3, #50	; 0x32
 800c82e:	4a08      	ldr	r2, [pc, #32]	; (800c850 <UART_SetConfig+0x2d4>)
 800c830:	fba2 2303 	umull	r2, r3, r2, r3
 800c834:	095b      	lsrs	r3, r3, #5
 800c836:	f003 0207 	and.w	r2, r3, #7
 800c83a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4422      	add	r2, r4
 800c842:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c844:	e106      	b.n	800ca54 <UART_SetConfig+0x4d8>
 800c846:	bf00      	nop
 800c848:	40011000 	.word	0x40011000
 800c84c:	40011400 	.word	0x40011400
 800c850:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c858:	2200      	movs	r2, #0
 800c85a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c85e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c862:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c866:	4642      	mov	r2, r8
 800c868:	464b      	mov	r3, r9
 800c86a:	1891      	adds	r1, r2, r2
 800c86c:	6239      	str	r1, [r7, #32]
 800c86e:	415b      	adcs	r3, r3
 800c870:	627b      	str	r3, [r7, #36]	; 0x24
 800c872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c876:	4641      	mov	r1, r8
 800c878:	1854      	adds	r4, r2, r1
 800c87a:	4649      	mov	r1, r9
 800c87c:	eb43 0501 	adc.w	r5, r3, r1
 800c880:	f04f 0200 	mov.w	r2, #0
 800c884:	f04f 0300 	mov.w	r3, #0
 800c888:	00eb      	lsls	r3, r5, #3
 800c88a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c88e:	00e2      	lsls	r2, r4, #3
 800c890:	4614      	mov	r4, r2
 800c892:	461d      	mov	r5, r3
 800c894:	4643      	mov	r3, r8
 800c896:	18e3      	adds	r3, r4, r3
 800c898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c89c:	464b      	mov	r3, r9
 800c89e:	eb45 0303 	adc.w	r3, r5, r3
 800c8a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c8a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c8b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c8b6:	f04f 0200 	mov.w	r2, #0
 800c8ba:	f04f 0300 	mov.w	r3, #0
 800c8be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	008b      	lsls	r3, r1, #2
 800c8c6:	4621      	mov	r1, r4
 800c8c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c8cc:	4621      	mov	r1, r4
 800c8ce:	008a      	lsls	r2, r1, #2
 800c8d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c8d4:	f7f4 f9d8 	bl	8000c88 <__aeabi_uldivmod>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	4b60      	ldr	r3, [pc, #384]	; (800ca60 <UART_SetConfig+0x4e4>)
 800c8de:	fba3 2302 	umull	r2, r3, r3, r2
 800c8e2:	095b      	lsrs	r3, r3, #5
 800c8e4:	011c      	lsls	r4, r3, #4
 800c8e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c8f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c8f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c8f8:	4642      	mov	r2, r8
 800c8fa:	464b      	mov	r3, r9
 800c8fc:	1891      	adds	r1, r2, r2
 800c8fe:	61b9      	str	r1, [r7, #24]
 800c900:	415b      	adcs	r3, r3
 800c902:	61fb      	str	r3, [r7, #28]
 800c904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c908:	4641      	mov	r1, r8
 800c90a:	1851      	adds	r1, r2, r1
 800c90c:	6139      	str	r1, [r7, #16]
 800c90e:	4649      	mov	r1, r9
 800c910:	414b      	adcs	r3, r1
 800c912:	617b      	str	r3, [r7, #20]
 800c914:	f04f 0200 	mov.w	r2, #0
 800c918:	f04f 0300 	mov.w	r3, #0
 800c91c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c920:	4659      	mov	r1, fp
 800c922:	00cb      	lsls	r3, r1, #3
 800c924:	4651      	mov	r1, sl
 800c926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c92a:	4651      	mov	r1, sl
 800c92c:	00ca      	lsls	r2, r1, #3
 800c92e:	4610      	mov	r0, r2
 800c930:	4619      	mov	r1, r3
 800c932:	4603      	mov	r3, r0
 800c934:	4642      	mov	r2, r8
 800c936:	189b      	adds	r3, r3, r2
 800c938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c93c:	464b      	mov	r3, r9
 800c93e:	460a      	mov	r2, r1
 800c940:	eb42 0303 	adc.w	r3, r2, r3
 800c944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	67bb      	str	r3, [r7, #120]	; 0x78
 800c952:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c954:	f04f 0200 	mov.w	r2, #0
 800c958:	f04f 0300 	mov.w	r3, #0
 800c95c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c960:	4649      	mov	r1, r9
 800c962:	008b      	lsls	r3, r1, #2
 800c964:	4641      	mov	r1, r8
 800c966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c96a:	4641      	mov	r1, r8
 800c96c:	008a      	lsls	r2, r1, #2
 800c96e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c972:	f7f4 f989 	bl	8000c88 <__aeabi_uldivmod>
 800c976:	4602      	mov	r2, r0
 800c978:	460b      	mov	r3, r1
 800c97a:	4611      	mov	r1, r2
 800c97c:	4b38      	ldr	r3, [pc, #224]	; (800ca60 <UART_SetConfig+0x4e4>)
 800c97e:	fba3 2301 	umull	r2, r3, r3, r1
 800c982:	095b      	lsrs	r3, r3, #5
 800c984:	2264      	movs	r2, #100	; 0x64
 800c986:	fb02 f303 	mul.w	r3, r2, r3
 800c98a:	1acb      	subs	r3, r1, r3
 800c98c:	011b      	lsls	r3, r3, #4
 800c98e:	3332      	adds	r3, #50	; 0x32
 800c990:	4a33      	ldr	r2, [pc, #204]	; (800ca60 <UART_SetConfig+0x4e4>)
 800c992:	fba2 2303 	umull	r2, r3, r2, r3
 800c996:	095b      	lsrs	r3, r3, #5
 800c998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c99c:	441c      	add	r4, r3
 800c99e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	673b      	str	r3, [r7, #112]	; 0x70
 800c9a6:	677a      	str	r2, [r7, #116]	; 0x74
 800c9a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c9ac:	4642      	mov	r2, r8
 800c9ae:	464b      	mov	r3, r9
 800c9b0:	1891      	adds	r1, r2, r2
 800c9b2:	60b9      	str	r1, [r7, #8]
 800c9b4:	415b      	adcs	r3, r3
 800c9b6:	60fb      	str	r3, [r7, #12]
 800c9b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c9bc:	4641      	mov	r1, r8
 800c9be:	1851      	adds	r1, r2, r1
 800c9c0:	6039      	str	r1, [r7, #0]
 800c9c2:	4649      	mov	r1, r9
 800c9c4:	414b      	adcs	r3, r1
 800c9c6:	607b      	str	r3, [r7, #4]
 800c9c8:	f04f 0200 	mov.w	r2, #0
 800c9cc:	f04f 0300 	mov.w	r3, #0
 800c9d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c9d4:	4659      	mov	r1, fp
 800c9d6:	00cb      	lsls	r3, r1, #3
 800c9d8:	4651      	mov	r1, sl
 800c9da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c9de:	4651      	mov	r1, sl
 800c9e0:	00ca      	lsls	r2, r1, #3
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	4642      	mov	r2, r8
 800c9ea:	189b      	adds	r3, r3, r2
 800c9ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9ee:	464b      	mov	r3, r9
 800c9f0:	460a      	mov	r2, r1
 800c9f2:	eb42 0303 	adc.w	r3, r2, r3
 800c9f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c9f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	663b      	str	r3, [r7, #96]	; 0x60
 800ca02:	667a      	str	r2, [r7, #100]	; 0x64
 800ca04:	f04f 0200 	mov.w	r2, #0
 800ca08:	f04f 0300 	mov.w	r3, #0
 800ca0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ca10:	4649      	mov	r1, r9
 800ca12:	008b      	lsls	r3, r1, #2
 800ca14:	4641      	mov	r1, r8
 800ca16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca1a:	4641      	mov	r1, r8
 800ca1c:	008a      	lsls	r2, r1, #2
 800ca1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ca22:	f7f4 f931 	bl	8000c88 <__aeabi_uldivmod>
 800ca26:	4602      	mov	r2, r0
 800ca28:	460b      	mov	r3, r1
 800ca2a:	4b0d      	ldr	r3, [pc, #52]	; (800ca60 <UART_SetConfig+0x4e4>)
 800ca2c:	fba3 1302 	umull	r1, r3, r3, r2
 800ca30:	095b      	lsrs	r3, r3, #5
 800ca32:	2164      	movs	r1, #100	; 0x64
 800ca34:	fb01 f303 	mul.w	r3, r1, r3
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	011b      	lsls	r3, r3, #4
 800ca3c:	3332      	adds	r3, #50	; 0x32
 800ca3e:	4a08      	ldr	r2, [pc, #32]	; (800ca60 <UART_SetConfig+0x4e4>)
 800ca40:	fba2 2303 	umull	r2, r3, r2, r3
 800ca44:	095b      	lsrs	r3, r3, #5
 800ca46:	f003 020f 	and.w	r2, r3, #15
 800ca4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4422      	add	r2, r4
 800ca52:	609a      	str	r2, [r3, #8]
}
 800ca54:	bf00      	nop
 800ca56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca60:	51eb851f 	.word	0x51eb851f

0800ca64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ca68:	4904      	ldr	r1, [pc, #16]	; (800ca7c <MX_FATFS_Init+0x18>)
 800ca6a:	4805      	ldr	r0, [pc, #20]	; (800ca80 <MX_FATFS_Init+0x1c>)
 800ca6c:	f000 ff0e 	bl	800d88c <FATFS_LinkDriver>
 800ca70:	4603      	mov	r3, r0
 800ca72:	461a      	mov	r2, r3
 800ca74:	4b03      	ldr	r3, [pc, #12]	; (800ca84 <MX_FATFS_Init+0x20>)
 800ca76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ca78:	bf00      	nop
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	20002f3c 	.word	0x20002f3c
 800ca80:	20000014 	.word	0x20000014
 800ca84:	20002f38 	.word	0x20002f38

0800ca88 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	4603      	mov	r3, r0
 800ca90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800ca92:	79fb      	ldrb	r3, [r7, #7]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7f9 f9e7 	bl	8005e68 <SD_disk_initialize>
 800ca9a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	4603      	mov	r3, r0
 800caac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800caae:	79fb      	ldrb	r3, [r7, #7]
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7f9 fabf 	bl	8006034 <SD_disk_status>
 800cab6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60b9      	str	r1, [r7, #8]
 800cac8:	607a      	str	r2, [r7, #4]
 800caca:	603b      	str	r3, [r7, #0]
 800cacc:	4603      	mov	r3, r0
 800cace:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800cad0:	7bf8      	ldrb	r0, [r7, #15]
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	68b9      	ldr	r1, [r7, #8]
 800cad8:	f7f9 fac2 	bl	8006060 <SD_disk_read>
 800cadc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
 800caf0:	603b      	str	r3, [r7, #0]
 800caf2:	4603      	mov	r3, r0
 800caf4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800caf6:	7bf8      	ldrb	r0, [r7, #15]
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	68b9      	ldr	r1, [r7, #8]
 800cafe:	f7f9 fb19 	bl	8006134 <SD_disk_write>
 800cb02:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	4603      	mov	r3, r0
 800cb14:	603a      	str	r2, [r7, #0]
 800cb16:	71fb      	strb	r3, [r7, #7]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800cb1c:	79b9      	ldrb	r1, [r7, #6]
 800cb1e:	79fb      	ldrb	r3, [r7, #7]
 800cb20:	683a      	ldr	r2, [r7, #0]
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7f9 fb8a 	bl	800623c <SD_disk_ioctl>
 800cb28:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
	...

0800cb34 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cb3e:	79fb      	ldrb	r3, [r7, #7]
 800cb40:	4a08      	ldr	r2, [pc, #32]	; (800cb64 <disk_status+0x30>)
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	79fa      	ldrb	r2, [r7, #7]
 800cb4c:	4905      	ldr	r1, [pc, #20]	; (800cb64 <disk_status+0x30>)
 800cb4e:	440a      	add	r2, r1
 800cb50:	7a12      	ldrb	r2, [r2, #8]
 800cb52:	4610      	mov	r0, r2
 800cb54:	4798      	blx	r3
 800cb56:	4603      	mov	r3, r0
 800cb58:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cb5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	20003168 	.word	0x20003168

0800cb68 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	4603      	mov	r3, r0
 800cb70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cb76:	79fb      	ldrb	r3, [r7, #7]
 800cb78:	4a0d      	ldr	r2, [pc, #52]	; (800cbb0 <disk_initialize+0x48>)
 800cb7a:	5cd3      	ldrb	r3, [r2, r3]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d111      	bne.n	800cba4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cb80:	79fb      	ldrb	r3, [r7, #7]
 800cb82:	4a0b      	ldr	r2, [pc, #44]	; (800cbb0 <disk_initialize+0x48>)
 800cb84:	2101      	movs	r1, #1
 800cb86:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cb88:	79fb      	ldrb	r3, [r7, #7]
 800cb8a:	4a09      	ldr	r2, [pc, #36]	; (800cbb0 <disk_initialize+0x48>)
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	4413      	add	r3, r2
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	79fa      	ldrb	r2, [r7, #7]
 800cb96:	4906      	ldr	r1, [pc, #24]	; (800cbb0 <disk_initialize+0x48>)
 800cb98:	440a      	add	r2, r1
 800cb9a:	7a12      	ldrb	r2, [r2, #8]
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	4798      	blx	r3
 800cba0:	4603      	mov	r3, r0
 800cba2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	20003168 	.word	0x20003168

0800cbb4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cbb4:	b590      	push	{r4, r7, lr}
 800cbb6:	b087      	sub	sp, #28
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60b9      	str	r1, [r7, #8]
 800cbbc:	607a      	str	r2, [r7, #4]
 800cbbe:	603b      	str	r3, [r7, #0]
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
 800cbc6:	4a0a      	ldr	r2, [pc, #40]	; (800cbf0 <disk_read+0x3c>)
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	689c      	ldr	r4, [r3, #8]
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
 800cbd2:	4a07      	ldr	r2, [pc, #28]	; (800cbf0 <disk_read+0x3c>)
 800cbd4:	4413      	add	r3, r2
 800cbd6:	7a18      	ldrb	r0, [r3, #8]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	68b9      	ldr	r1, [r7, #8]
 800cbde:	47a0      	blx	r4
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	75fb      	strb	r3, [r7, #23]
  return res;
 800cbe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	371c      	adds	r7, #28
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd90      	pop	{r4, r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20003168 	.word	0x20003168

0800cbf4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cbf4:	b590      	push	{r4, r7, lr}
 800cbf6:	b087      	sub	sp, #28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60b9      	str	r1, [r7, #8]
 800cbfc:	607a      	str	r2, [r7, #4]
 800cbfe:	603b      	str	r3, [r7, #0]
 800cc00:	4603      	mov	r3, r0
 800cc02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cc04:	7bfb      	ldrb	r3, [r7, #15]
 800cc06:	4a0a      	ldr	r2, [pc, #40]	; (800cc30 <disk_write+0x3c>)
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	4413      	add	r3, r2
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	68dc      	ldr	r4, [r3, #12]
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
 800cc12:	4a07      	ldr	r2, [pc, #28]	; (800cc30 <disk_write+0x3c>)
 800cc14:	4413      	add	r3, r2
 800cc16:	7a18      	ldrb	r0, [r3, #8]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	68b9      	ldr	r1, [r7, #8]
 800cc1e:	47a0      	blx	r4
 800cc20:	4603      	mov	r3, r0
 800cc22:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc24:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	371c      	adds	r7, #28
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd90      	pop	{r4, r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	20003168 	.word	0x20003168

0800cc34 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	603a      	str	r2, [r7, #0]
 800cc3e:	71fb      	strb	r3, [r7, #7]
 800cc40:	460b      	mov	r3, r1
 800cc42:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cc44:	79fb      	ldrb	r3, [r7, #7]
 800cc46:	4a09      	ldr	r2, [pc, #36]	; (800cc6c <disk_ioctl+0x38>)
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	4413      	add	r3, r2
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	691b      	ldr	r3, [r3, #16]
 800cc50:	79fa      	ldrb	r2, [r7, #7]
 800cc52:	4906      	ldr	r1, [pc, #24]	; (800cc6c <disk_ioctl+0x38>)
 800cc54:	440a      	add	r2, r1
 800cc56:	7a10      	ldrb	r0, [r2, #8]
 800cc58:	79b9      	ldrb	r1, [r7, #6]
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	4798      	blx	r3
 800cc5e:	4603      	mov	r3, r0
 800cc60:	73fb      	strb	r3, [r7, #15]
  return res;
 800cc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3710      	adds	r7, #16
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	20003168 	.word	0x20003168

0800cc70 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cc80:	89fb      	ldrh	r3, [r7, #14]
 800cc82:	021b      	lsls	r3, r3, #8
 800cc84:	b21a      	sxth	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	b21b      	sxth	r3, r3
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	b21b      	sxth	r3, r3
 800cc90:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cc92:	89fb      	ldrh	r3, [r7, #14]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	3303      	adds	r3, #3
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	021b      	lsls	r3, r3, #8
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	3202      	adds	r2, #2
 800ccb8:	7812      	ldrb	r2, [r2, #0]
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	021b      	lsls	r3, r3, #8
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	3201      	adds	r2, #1
 800ccc6:	7812      	ldrb	r2, [r2, #0]
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	021b      	lsls	r3, r3, #8
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	7812      	ldrb	r2, [r2, #0]
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	60fb      	str	r3, [r7, #12]
	return rv;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3714      	adds	r7, #20
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr
	...

0800cce8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	60fb      	str	r3, [r7, #12]
 800ccf4:	e010      	b.n	800cd18 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ccf6:	4a0d      	ldr	r2, [pc, #52]	; (800cd2c <clear_lock+0x44>)
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	011b      	lsls	r3, r3, #4
 800ccfc:	4413      	add	r3, r2
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d105      	bne.n	800cd12 <clear_lock+0x2a>
 800cd06:	4a09      	ldr	r2, [pc, #36]	; (800cd2c <clear_lock+0x44>)
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	011b      	lsls	r3, r3, #4
 800cd0c:	4413      	add	r3, r2
 800cd0e:	2200      	movs	r2, #0
 800cd10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	3301      	adds	r3, #1
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d9eb      	bls.n	800ccf6 <clear_lock+0xe>
	}
}
 800cd1e:	bf00      	nop
 800cd20:	bf00      	nop
 800cd22:	3714      	adds	r7, #20
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr
 800cd2c:	20002f48 	.word	0x20002f48

0800cd30 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	78db      	ldrb	r3, [r3, #3]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d034      	beq.n	800cdae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd48:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	7858      	ldrb	r0, [r3, #1]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cd54:	2301      	movs	r3, #1
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	f7ff ff4c 	bl	800cbf4 <disk_write>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d002      	beq.n	800cd68 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cd62:	2301      	movs	r3, #1
 800cd64:	73fb      	strb	r3, [r7, #15]
 800cd66:	e022      	b.n	800cdae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd72:	697a      	ldr	r2, [r7, #20]
 800cd74:	1ad2      	subs	r2, r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6a1b      	ldr	r3, [r3, #32]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d217      	bcs.n	800cdae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	789b      	ldrb	r3, [r3, #2]
 800cd82:	613b      	str	r3, [r7, #16]
 800cd84:	e010      	b.n	800cda8 <sync_window+0x78>
					wsect += fs->fsize;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6a1b      	ldr	r3, [r3, #32]
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	7858      	ldrb	r0, [r3, #1]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	697a      	ldr	r2, [r7, #20]
 800cd9e:	f7ff ff29 	bl	800cbf4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	3b01      	subs	r3, #1
 800cda6:	613b      	str	r3, [r7, #16]
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d8eb      	bhi.n	800cd86 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cdae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3718      	adds	r7, #24
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d01b      	beq.n	800ce08 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f7ff ffad 	bl	800cd30 <sync_window>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cdda:	7bfb      	ldrb	r3, [r7, #15]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d113      	bne.n	800ce08 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	7858      	ldrb	r0, [r3, #1]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cdea:	2301      	movs	r3, #1
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	f7ff fee1 	bl	800cbb4 <disk_read>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d004      	beq.n	800ce02 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cdf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cdfc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ce08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b086      	sub	sp, #24
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
 800ce1a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d904      	bls.n	800ce32 <get_fat+0x20>
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	69db      	ldr	r3, [r3, #28]
 800ce2c:	683a      	ldr	r2, [r7, #0]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d302      	bcc.n	800ce38 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ce32:	2301      	movs	r3, #1
 800ce34:	617b      	str	r3, [r7, #20]
 800ce36:	e0bb      	b.n	800cfb0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ce38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce3c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	2b03      	cmp	r3, #3
 800ce44:	f000 8083 	beq.w	800cf4e <get_fat+0x13c>
 800ce48:	2b03      	cmp	r3, #3
 800ce4a:	f300 80a7 	bgt.w	800cf9c <get_fat+0x18a>
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d002      	beq.n	800ce58 <get_fat+0x46>
 800ce52:	2b02      	cmp	r3, #2
 800ce54:	d056      	beq.n	800cf04 <get_fat+0xf2>
 800ce56:	e0a1      	b.n	800cf9c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	60fb      	str	r3, [r7, #12]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	085b      	lsrs	r3, r3, #1
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	4413      	add	r3, r2
 800ce64:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	899b      	ldrh	r3, [r3, #12]
 800ce6e:	4619      	mov	r1, r3
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce76:	4413      	add	r3, r2
 800ce78:	4619      	mov	r1, r3
 800ce7a:	6938      	ldr	r0, [r7, #16]
 800ce7c:	f7ff ff9c 	bl	800cdb8 <move_window>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	f040 808d 	bne.w	800cfa2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	1c5a      	adds	r2, r3, #1
 800ce8c:	60fa      	str	r2, [r7, #12]
 800ce8e:	693a      	ldr	r2, [r7, #16]
 800ce90:	8992      	ldrh	r2, [r2, #12]
 800ce92:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce96:	fb01 f202 	mul.w	r2, r1, r2
 800ce9a:	1a9b      	subs	r3, r3, r2
 800ce9c:	693a      	ldr	r2, [r7, #16]
 800ce9e:	4413      	add	r3, r2
 800cea0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cea4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	899b      	ldrh	r3, [r3, #12]
 800ceae:	4619      	mov	r1, r3
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ceb6:	4413      	add	r3, r2
 800ceb8:	4619      	mov	r1, r3
 800ceba:	6938      	ldr	r0, [r7, #16]
 800cebc:	f7ff ff7c 	bl	800cdb8 <move_window>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d16f      	bne.n	800cfa6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	899b      	ldrh	r3, [r3, #12]
 800ceca:	461a      	mov	r2, r3
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	fbb3 f1f2 	udiv	r1, r3, r2
 800ced2:	fb01 f202 	mul.w	r2, r1, r2
 800ced6:	1a9b      	subs	r3, r3, r2
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	4413      	add	r3, r2
 800cedc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cee0:	021b      	lsls	r3, r3, #8
 800cee2:	461a      	mov	r2, r3
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	f003 0301 	and.w	r3, r3, #1
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d002      	beq.n	800cefa <get_fat+0xe8>
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	091b      	lsrs	r3, r3, #4
 800cef8:	e002      	b.n	800cf00 <get_fat+0xee>
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf00:	617b      	str	r3, [r7, #20]
			break;
 800cf02:	e055      	b.n	800cfb0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	899b      	ldrh	r3, [r3, #12]
 800cf0c:	085b      	lsrs	r3, r3, #1
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	4619      	mov	r1, r3
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf18:	4413      	add	r3, r2
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	6938      	ldr	r0, [r7, #16]
 800cf1e:	f7ff ff4b 	bl	800cdb8 <move_window>
 800cf22:	4603      	mov	r3, r0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d140      	bne.n	800cfaa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	693a      	ldr	r2, [r7, #16]
 800cf34:	8992      	ldrh	r2, [r2, #12]
 800cf36:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf3a:	fb00 f202 	mul.w	r2, r0, r2
 800cf3e:	1a9b      	subs	r3, r3, r2
 800cf40:	440b      	add	r3, r1
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7ff fe94 	bl	800cc70 <ld_word>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	617b      	str	r3, [r7, #20]
			break;
 800cf4c:	e030      	b.n	800cfb0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	899b      	ldrh	r3, [r3, #12]
 800cf56:	089b      	lsrs	r3, r3, #2
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf62:	4413      	add	r3, r2
 800cf64:	4619      	mov	r1, r3
 800cf66:	6938      	ldr	r0, [r7, #16]
 800cf68:	f7ff ff26 	bl	800cdb8 <move_window>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d11d      	bne.n	800cfae <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	693a      	ldr	r2, [r7, #16]
 800cf7e:	8992      	ldrh	r2, [r2, #12]
 800cf80:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf84:	fb00 f202 	mul.w	r2, r0, r2
 800cf88:	1a9b      	subs	r3, r3, r2
 800cf8a:	440b      	add	r3, r1
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7ff fe87 	bl	800cca0 <ld_dword>
 800cf92:	4603      	mov	r3, r0
 800cf94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cf98:	617b      	str	r3, [r7, #20]
			break;
 800cf9a:	e009      	b.n	800cfb0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	617b      	str	r3, [r7, #20]
 800cfa0:	e006      	b.n	800cfb0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfa2:	bf00      	nop
 800cfa4:	e004      	b.n	800cfb0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfa6:	bf00      	nop
 800cfa8:	e002      	b.n	800cfb0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cfaa:	bf00      	nop
 800cfac:	e000      	b.n	800cfb0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cfae:	bf00      	nop
		}
	}

	return val;
 800cfb0:	697b      	ldr	r3, [r7, #20]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3718      	adds	r7, #24
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cfba:	b480      	push	{r7}
 800cfbc:	b087      	sub	sp, #28
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cfc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfc6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d031      	beq.n	800d034 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	617b      	str	r3, [r7, #20]
 800cfd6:	e002      	b.n	800cfde <get_ldnumber+0x24>
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	617b      	str	r3, [r7, #20]
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	2b1f      	cmp	r3, #31
 800cfe4:	d903      	bls.n	800cfee <get_ldnumber+0x34>
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	2b3a      	cmp	r3, #58	; 0x3a
 800cfec:	d1f4      	bne.n	800cfd8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	2b3a      	cmp	r3, #58	; 0x3a
 800cff4:	d11c      	bne.n	800d030 <get_ldnumber+0x76>
			tp = *path;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	1c5a      	adds	r2, r3, #1
 800d000:	60fa      	str	r2, [r7, #12]
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	3b30      	subs	r3, #48	; 0x30
 800d006:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	2b09      	cmp	r3, #9
 800d00c:	d80e      	bhi.n	800d02c <get_ldnumber+0x72>
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	429a      	cmp	r2, r3
 800d014:	d10a      	bne.n	800d02c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d107      	bne.n	800d02c <get_ldnumber+0x72>
					vol = (int)i;
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	3301      	adds	r3, #1
 800d024:	617b      	str	r3, [r7, #20]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	697a      	ldr	r2, [r7, #20]
 800d02a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	e002      	b.n	800d036 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d030:	2300      	movs	r3, #0
 800d032:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d034:	693b      	ldr	r3, [r7, #16]
}
 800d036:	4618      	mov	r0, r3
 800d038:	371c      	adds	r7, #28
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
	...

0800d044 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	70da      	strb	r2, [r3, #3]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d05a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f7ff feaa 	bl	800cdb8 <move_window>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <check_fs+0x2a>
 800d06a:	2304      	movs	r3, #4
 800d06c:	e038      	b.n	800d0e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	3338      	adds	r3, #56	; 0x38
 800d072:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d076:	4618      	mov	r0, r3
 800d078:	f7ff fdfa 	bl	800cc70 <ld_word>
 800d07c:	4603      	mov	r3, r0
 800d07e:	461a      	mov	r2, r3
 800d080:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d084:	429a      	cmp	r2, r3
 800d086:	d001      	beq.n	800d08c <check_fs+0x48>
 800d088:	2303      	movs	r3, #3
 800d08a:	e029      	b.n	800d0e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d092:	2be9      	cmp	r3, #233	; 0xe9
 800d094:	d009      	beq.n	800d0aa <check_fs+0x66>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d09c:	2beb      	cmp	r3, #235	; 0xeb
 800d09e:	d11e      	bne.n	800d0de <check_fs+0x9a>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d0a6:	2b90      	cmp	r3, #144	; 0x90
 800d0a8:	d119      	bne.n	800d0de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	3338      	adds	r3, #56	; 0x38
 800d0ae:	3336      	adds	r3, #54	; 0x36
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7ff fdf5 	bl	800cca0 <ld_dword>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d0bc:	4a0a      	ldr	r2, [pc, #40]	; (800d0e8 <check_fs+0xa4>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d101      	bne.n	800d0c6 <check_fs+0x82>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	e00c      	b.n	800d0e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	3338      	adds	r3, #56	; 0x38
 800d0ca:	3352      	adds	r3, #82	; 0x52
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7ff fde7 	bl	800cca0 <ld_dword>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	4a05      	ldr	r2, [pc, #20]	; (800d0ec <check_fs+0xa8>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d101      	bne.n	800d0de <check_fs+0x9a>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	e000      	b.n	800d0e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d0de:	2302      	movs	r3, #2
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	00544146 	.word	0x00544146
 800d0ec:	33544146 	.word	0x33544146

0800d0f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b096      	sub	sp, #88	; 0x58
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	2200      	movs	r2, #0
 800d102:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	f7ff ff58 	bl	800cfba <get_ldnumber>
 800d10a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d10c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d10e:	2b00      	cmp	r3, #0
 800d110:	da01      	bge.n	800d116 <find_volume+0x26>
 800d112:	230b      	movs	r3, #11
 800d114:	e265      	b.n	800d5e2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d116:	4a9f      	ldr	r2, [pc, #636]	; (800d394 <find_volume+0x2a4>)
 800d118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d11e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d122:	2b00      	cmp	r3, #0
 800d124:	d101      	bne.n	800d12a <find_volume+0x3a>
 800d126:	230c      	movs	r3, #12
 800d128:	e25b      	b.n	800d5e2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d12e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d130:	79fb      	ldrb	r3, [r7, #7]
 800d132:	f023 0301 	bic.w	r3, r3, #1
 800d136:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d01a      	beq.n	800d176 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d142:	785b      	ldrb	r3, [r3, #1]
 800d144:	4618      	mov	r0, r3
 800d146:	f7ff fcf5 	bl	800cb34 <disk_status>
 800d14a:	4603      	mov	r3, r0
 800d14c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d150:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d154:	f003 0301 	and.w	r3, r3, #1
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10c      	bne.n	800d176 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d15c:	79fb      	ldrb	r3, [r7, #7]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d007      	beq.n	800d172 <find_volume+0x82>
 800d162:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d166:	f003 0304 	and.w	r3, r3, #4
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d001      	beq.n	800d172 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d16e:	230a      	movs	r3, #10
 800d170:	e237      	b.n	800d5e2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800d172:	2300      	movs	r3, #0
 800d174:	e235      	b.n	800d5e2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d178:	2200      	movs	r2, #0
 800d17a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d17e:	b2da      	uxtb	r2, r3
 800d180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d182:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d186:	785b      	ldrb	r3, [r3, #1]
 800d188:	4618      	mov	r0, r3
 800d18a:	f7ff fced 	bl	800cb68 <disk_initialize>
 800d18e:	4603      	mov	r3, r0
 800d190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d198:	f003 0301 	and.w	r3, r3, #1
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d1a0:	2303      	movs	r3, #3
 800d1a2:	e21e      	b.n	800d5e2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d1a4:	79fb      	ldrb	r3, [r7, #7]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d007      	beq.n	800d1ba <find_volume+0xca>
 800d1aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1ae:	f003 0304 	and.w	r3, r3, #4
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d001      	beq.n	800d1ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d1b6:	230a      	movs	r3, #10
 800d1b8:	e213      	b.n	800d5e2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1bc:	7858      	ldrb	r0, [r3, #1]
 800d1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c0:	330c      	adds	r3, #12
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	2102      	movs	r1, #2
 800d1c6:	f7ff fd35 	bl	800cc34 <disk_ioctl>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d001      	beq.n	800d1d4 <find_volume+0xe4>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e206      	b.n	800d5e2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d6:	899b      	ldrh	r3, [r3, #12]
 800d1d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1dc:	d80d      	bhi.n	800d1fa <find_volume+0x10a>
 800d1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e0:	899b      	ldrh	r3, [r3, #12]
 800d1e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1e6:	d308      	bcc.n	800d1fa <find_volume+0x10a>
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ea:	899b      	ldrh	r3, [r3, #12]
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f0:	899b      	ldrh	r3, [r3, #12]
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	4013      	ands	r3, r2
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d001      	beq.n	800d1fe <find_volume+0x10e>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e1f1      	b.n	800d5e2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d202:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d206:	f7ff ff1d 	bl	800d044 <check_fs>
 800d20a:	4603      	mov	r3, r0
 800d20c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d210:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d214:	2b02      	cmp	r3, #2
 800d216:	d149      	bne.n	800d2ac <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d218:	2300      	movs	r3, #0
 800d21a:	643b      	str	r3, [r7, #64]	; 0x40
 800d21c:	e01e      	b.n	800d25c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d220:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d226:	011b      	lsls	r3, r3, #4
 800d228:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d22c:	4413      	add	r3, r2
 800d22e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d232:	3304      	adds	r3, #4
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d006      	beq.n	800d248 <find_volume+0x158>
 800d23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23c:	3308      	adds	r3, #8
 800d23e:	4618      	mov	r0, r3
 800d240:	f7ff fd2e 	bl	800cca0 <ld_dword>
 800d244:	4602      	mov	r2, r0
 800d246:	e000      	b.n	800d24a <find_volume+0x15a>
 800d248:	2200      	movs	r2, #0
 800d24a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	3358      	adds	r3, #88	; 0x58
 800d250:	443b      	add	r3, r7
 800d252:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d258:	3301      	adds	r3, #1
 800d25a:	643b      	str	r3, [r7, #64]	; 0x40
 800d25c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d25e:	2b03      	cmp	r3, #3
 800d260:	d9dd      	bls.n	800d21e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d262:	2300      	movs	r3, #0
 800d264:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d002      	beq.n	800d272 <find_volume+0x182>
 800d26c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d26e:	3b01      	subs	r3, #1
 800d270:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	3358      	adds	r3, #88	; 0x58
 800d278:	443b      	add	r3, r7
 800d27a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d27e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d282:	2b00      	cmp	r3, #0
 800d284:	d005      	beq.n	800d292 <find_volume+0x1a2>
 800d286:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d28a:	f7ff fedb 	bl	800d044 <check_fs>
 800d28e:	4603      	mov	r3, r0
 800d290:	e000      	b.n	800d294 <find_volume+0x1a4>
 800d292:	2303      	movs	r3, #3
 800d294:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d298:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d905      	bls.n	800d2ac <find_volume+0x1bc>
 800d2a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	643b      	str	r3, [r7, #64]	; 0x40
 800d2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2a8:	2b03      	cmp	r3, #3
 800d2aa:	d9e2      	bls.n	800d272 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d2ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2b0:	2b04      	cmp	r3, #4
 800d2b2:	d101      	bne.n	800d2b8 <find_volume+0x1c8>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e194      	b.n	800d5e2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d2b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d901      	bls.n	800d2c4 <find_volume+0x1d4>
 800d2c0:	230d      	movs	r3, #13
 800d2c2:	e18e      	b.n	800d5e2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c6:	3338      	adds	r3, #56	; 0x38
 800d2c8:	330b      	adds	r3, #11
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7ff fcd0 	bl	800cc70 <ld_word>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d6:	899b      	ldrh	r3, [r3, #12]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d001      	beq.n	800d2e0 <find_volume+0x1f0>
 800d2dc:	230d      	movs	r3, #13
 800d2de:	e180      	b.n	800d5e2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e2:	3338      	adds	r3, #56	; 0x38
 800d2e4:	3316      	adds	r3, #22
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7ff fcc2 	bl	800cc70 <ld_word>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d2f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d106      	bne.n	800d304 <find_volume+0x214>
 800d2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f8:	3338      	adds	r3, #56	; 0x38
 800d2fa:	3324      	adds	r3, #36	; 0x24
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7ff fccf 	bl	800cca0 <ld_dword>
 800d302:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d308:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d312:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d316:	789b      	ldrb	r3, [r3, #2]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d005      	beq.n	800d328 <find_volume+0x238>
 800d31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31e:	789b      	ldrb	r3, [r3, #2]
 800d320:	2b02      	cmp	r3, #2
 800d322:	d001      	beq.n	800d328 <find_volume+0x238>
 800d324:	230d      	movs	r3, #13
 800d326:	e15c      	b.n	800d5e2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32a:	789b      	ldrb	r3, [r3, #2]
 800d32c:	461a      	mov	r2, r3
 800d32e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d330:	fb02 f303 	mul.w	r3, r2, r3
 800d334:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d33c:	b29a      	uxth	r2, r3
 800d33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d340:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d344:	895b      	ldrh	r3, [r3, #10]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d008      	beq.n	800d35c <find_volume+0x26c>
 800d34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34c:	895b      	ldrh	r3, [r3, #10]
 800d34e:	461a      	mov	r2, r3
 800d350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d352:	895b      	ldrh	r3, [r3, #10]
 800d354:	3b01      	subs	r3, #1
 800d356:	4013      	ands	r3, r2
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d001      	beq.n	800d360 <find_volume+0x270>
 800d35c:	230d      	movs	r3, #13
 800d35e:	e140      	b.n	800d5e2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d362:	3338      	adds	r3, #56	; 0x38
 800d364:	3311      	adds	r3, #17
 800d366:	4618      	mov	r0, r3
 800d368:	f7ff fc82 	bl	800cc70 <ld_word>
 800d36c:	4603      	mov	r3, r0
 800d36e:	461a      	mov	r2, r3
 800d370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d372:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d376:	891b      	ldrh	r3, [r3, #8]
 800d378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d37a:	8992      	ldrh	r2, [r2, #12]
 800d37c:	0952      	lsrs	r2, r2, #5
 800d37e:	b292      	uxth	r2, r2
 800d380:	fbb3 f1f2 	udiv	r1, r3, r2
 800d384:	fb01 f202 	mul.w	r2, r1, r2
 800d388:	1a9b      	subs	r3, r3, r2
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d003      	beq.n	800d398 <find_volume+0x2a8>
 800d390:	230d      	movs	r3, #13
 800d392:	e126      	b.n	800d5e2 <find_volume+0x4f2>
 800d394:	20002f40 	.word	0x20002f40

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39a:	3338      	adds	r3, #56	; 0x38
 800d39c:	3313      	adds	r3, #19
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7ff fc66 	bl	800cc70 <ld_word>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d3a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d106      	bne.n	800d3bc <find_volume+0x2cc>
 800d3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b0:	3338      	adds	r3, #56	; 0x38
 800d3b2:	3320      	adds	r3, #32
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7ff fc73 	bl	800cca0 <ld_dword>
 800d3ba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3be:	3338      	adds	r3, #56	; 0x38
 800d3c0:	330e      	adds	r3, #14
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7ff fc54 	bl	800cc70 <ld_word>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d3cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d101      	bne.n	800d3d6 <find_volume+0x2e6>
 800d3d2:	230d      	movs	r3, #13
 800d3d4:	e105      	b.n	800d5e2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d3d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d3d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3da:	4413      	add	r3, r2
 800d3dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3de:	8911      	ldrh	r1, [r2, #8]
 800d3e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3e2:	8992      	ldrh	r2, [r2, #12]
 800d3e4:	0952      	lsrs	r2, r2, #5
 800d3e6:	b292      	uxth	r2, r2
 800d3e8:	fbb1 f2f2 	udiv	r2, r1, r2
 800d3ec:	b292      	uxth	r2, r2
 800d3ee:	4413      	add	r3, r2
 800d3f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d3f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d201      	bcs.n	800d3fe <find_volume+0x30e>
 800d3fa:	230d      	movs	r3, #13
 800d3fc:	e0f1      	b.n	800d5e2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d3fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d402:	1ad3      	subs	r3, r2, r3
 800d404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d406:	8952      	ldrh	r2, [r2, #10]
 800d408:	fbb3 f3f2 	udiv	r3, r3, r2
 800d40c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d410:	2b00      	cmp	r3, #0
 800d412:	d101      	bne.n	800d418 <find_volume+0x328>
 800d414:	230d      	movs	r3, #13
 800d416:	e0e4      	b.n	800d5e2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800d418:	2303      	movs	r3, #3
 800d41a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d420:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d424:	4293      	cmp	r3, r2
 800d426:	d802      	bhi.n	800d42e <find_volume+0x33e>
 800d428:	2302      	movs	r3, #2
 800d42a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d430:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d434:	4293      	cmp	r3, r2
 800d436:	d802      	bhi.n	800d43e <find_volume+0x34e>
 800d438:	2301      	movs	r3, #1
 800d43a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d440:	1c9a      	adds	r2, r3, #2
 800d442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d444:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d448:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d44a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d44c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d44e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d450:	441a      	add	r2, r3
 800d452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d454:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d456:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45a:	441a      	add	r2, r3
 800d45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d460:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d464:	2b03      	cmp	r3, #3
 800d466:	d11e      	bne.n	800d4a6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46a:	3338      	adds	r3, #56	; 0x38
 800d46c:	332a      	adds	r3, #42	; 0x2a
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff fbfe 	bl	800cc70 <ld_word>
 800d474:	4603      	mov	r3, r0
 800d476:	2b00      	cmp	r3, #0
 800d478:	d001      	beq.n	800d47e <find_volume+0x38e>
 800d47a:	230d      	movs	r3, #13
 800d47c:	e0b1      	b.n	800d5e2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d480:	891b      	ldrh	r3, [r3, #8]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d001      	beq.n	800d48a <find_volume+0x39a>
 800d486:	230d      	movs	r3, #13
 800d488:	e0ab      	b.n	800d5e2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48c:	3338      	adds	r3, #56	; 0x38
 800d48e:	332c      	adds	r3, #44	; 0x2c
 800d490:	4618      	mov	r0, r3
 800d492:	f7ff fc05 	bl	800cca0 <ld_dword>
 800d496:	4602      	mov	r2, r0
 800d498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49e:	69db      	ldr	r3, [r3, #28]
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	647b      	str	r3, [r7, #68]	; 0x44
 800d4a4:	e01f      	b.n	800d4e6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a8:	891b      	ldrh	r3, [r3, #8]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <find_volume+0x3c2>
 800d4ae:	230d      	movs	r3, #13
 800d4b0:	e097      	b.n	800d5e2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d4b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4b8:	441a      	add	r2, r3
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4bc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d4be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	d103      	bne.n	800d4ce <find_volume+0x3de>
 800d4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c8:	69db      	ldr	r3, [r3, #28]
 800d4ca:	005b      	lsls	r3, r3, #1
 800d4cc:	e00a      	b.n	800d4e4 <find_volume+0x3f4>
 800d4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d0:	69da      	ldr	r2, [r3, #28]
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	005b      	lsls	r3, r3, #1
 800d4d6:	4413      	add	r3, r2
 800d4d8:	085a      	lsrs	r2, r3, #1
 800d4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4dc:	69db      	ldr	r3, [r3, #28]
 800d4de:	f003 0301 	and.w	r3, r3, #1
 800d4e2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d4e4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e8:	6a1a      	ldr	r2, [r3, #32]
 800d4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ec:	899b      	ldrh	r3, [r3, #12]
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4f2:	440b      	add	r3, r1
 800d4f4:	3b01      	subs	r3, #1
 800d4f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4f8:	8989      	ldrh	r1, [r1, #12]
 800d4fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d201      	bcs.n	800d506 <find_volume+0x416>
 800d502:	230d      	movs	r3, #13
 800d504:	e06d      	b.n	800d5e2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d50c:	619a      	str	r2, [r3, #24]
 800d50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d510:	699a      	ldr	r2, [r3, #24]
 800d512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d514:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d518:	2280      	movs	r2, #128	; 0x80
 800d51a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d51c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d520:	2b03      	cmp	r3, #3
 800d522:	d149      	bne.n	800d5b8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d526:	3338      	adds	r3, #56	; 0x38
 800d528:	3330      	adds	r3, #48	; 0x30
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7ff fba0 	bl	800cc70 <ld_word>
 800d530:	4603      	mov	r3, r0
 800d532:	2b01      	cmp	r3, #1
 800d534:	d140      	bne.n	800d5b8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d538:	3301      	adds	r3, #1
 800d53a:	4619      	mov	r1, r3
 800d53c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d53e:	f7ff fc3b 	bl	800cdb8 <move_window>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d137      	bne.n	800d5b8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54a:	2200      	movs	r2, #0
 800d54c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d550:	3338      	adds	r3, #56	; 0x38
 800d552:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d556:	4618      	mov	r0, r3
 800d558:	f7ff fb8a 	bl	800cc70 <ld_word>
 800d55c:	4603      	mov	r3, r0
 800d55e:	461a      	mov	r2, r3
 800d560:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d564:	429a      	cmp	r2, r3
 800d566:	d127      	bne.n	800d5b8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56a:	3338      	adds	r3, #56	; 0x38
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7ff fb97 	bl	800cca0 <ld_dword>
 800d572:	4603      	mov	r3, r0
 800d574:	4a1d      	ldr	r2, [pc, #116]	; (800d5ec <find_volume+0x4fc>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d11e      	bne.n	800d5b8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57c:	3338      	adds	r3, #56	; 0x38
 800d57e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d582:	4618      	mov	r0, r3
 800d584:	f7ff fb8c 	bl	800cca0 <ld_dword>
 800d588:	4603      	mov	r3, r0
 800d58a:	4a19      	ldr	r2, [pc, #100]	; (800d5f0 <find_volume+0x500>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d113      	bne.n	800d5b8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d592:	3338      	adds	r3, #56	; 0x38
 800d594:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff fb81 	bl	800cca0 <ld_dword>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a6:	3338      	adds	r3, #56	; 0x38
 800d5a8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7ff fb77 	bl	800cca0 <ld_dword>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d5be:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d5c0:	4b0c      	ldr	r3, [pc, #48]	; (800d5f4 <find_volume+0x504>)
 800d5c2:	881b      	ldrh	r3, [r3, #0]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	4b0a      	ldr	r3, [pc, #40]	; (800d5f4 <find_volume+0x504>)
 800d5ca:	801a      	strh	r2, [r3, #0]
 800d5cc:	4b09      	ldr	r3, [pc, #36]	; (800d5f4 <find_volume+0x504>)
 800d5ce:	881a      	ldrh	r2, [r3, #0]
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d6:	4a08      	ldr	r2, [pc, #32]	; (800d5f8 <find_volume+0x508>)
 800d5d8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d5da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5dc:	f7ff fb84 	bl	800cce8 <clear_lock>
#endif
	return FR_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3758      	adds	r7, #88	; 0x58
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	41615252 	.word	0x41615252
 800d5f0:	61417272 	.word	0x61417272
 800d5f4:	20002f44 	.word	0x20002f44
 800d5f8:	20002f68 	.word	0x20002f68

0800d5fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b088      	sub	sp, #32
 800d600:	af00      	add	r7, sp, #0
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	4613      	mov	r3, r2
 800d608:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d60e:	f107 0310 	add.w	r3, r7, #16
 800d612:	4618      	mov	r0, r3
 800d614:	f7ff fcd1 	bl	800cfba <get_ldnumber>
 800d618:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d61a:	69fb      	ldr	r3, [r7, #28]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	da01      	bge.n	800d624 <f_mount+0x28>
 800d620:	230b      	movs	r3, #11
 800d622:	e02b      	b.n	800d67c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d624:	4a17      	ldr	r2, [pc, #92]	; (800d684 <f_mount+0x88>)
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d62c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d005      	beq.n	800d640 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d634:	69b8      	ldr	r0, [r7, #24]
 800d636:	f7ff fb57 	bl	800cce8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	2200      	movs	r2, #0
 800d63e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d002      	beq.n	800d64c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2200      	movs	r2, #0
 800d64a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	490d      	ldr	r1, [pc, #52]	; (800d684 <f_mount+0x88>)
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d002      	beq.n	800d662 <f_mount+0x66>
 800d65c:	79fb      	ldrb	r3, [r7, #7]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d001      	beq.n	800d666 <f_mount+0x6a>
 800d662:	2300      	movs	r3, #0
 800d664:	e00a      	b.n	800d67c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d666:	f107 010c 	add.w	r1, r7, #12
 800d66a:	f107 0308 	add.w	r3, r7, #8
 800d66e:	2200      	movs	r2, #0
 800d670:	4618      	mov	r0, r3
 800d672:	f7ff fd3d 	bl	800d0f0 <find_volume>
 800d676:	4603      	mov	r3, r0
 800d678:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3720      	adds	r7, #32
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	20002f40 	.word	0x20002f40

0800d688 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b092      	sub	sp, #72	; 0x48
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d694:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d698:	f107 030c 	add.w	r3, r7, #12
 800d69c:	2200      	movs	r2, #0
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7ff fd26 	bl	800d0f0 <find_volume>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d6aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	f040 8099 	bne.w	800d7e6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d6b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6bc:	699a      	ldr	r2, [r3, #24]
 800d6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c0:	69db      	ldr	r3, [r3, #28]
 800d6c2:	3b02      	subs	r3, #2
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d804      	bhi.n	800d6d2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ca:	699a      	ldr	r2, [r3, #24]
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	601a      	str	r2, [r3, #0]
 800d6d0:	e089      	b.n	800d7e6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d128      	bne.n	800d730 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d6de:	2302      	movs	r3, #2
 800d6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d6e6:	f107 0314 	add.w	r3, r7, #20
 800d6ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7ff fb90 	bl	800ce12 <get_fat>
 800d6f2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6fa:	d103      	bne.n	800d704 <f_getfree+0x7c>
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d702:	e063      	b.n	800d7cc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d706:	2b01      	cmp	r3, #1
 800d708:	d103      	bne.n	800d712 <f_getfree+0x8a>
 800d70a:	2302      	movs	r3, #2
 800d70c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d710:	e05c      	b.n	800d7cc <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d714:	2b00      	cmp	r3, #0
 800d716:	d102      	bne.n	800d71e <f_getfree+0x96>
 800d718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d71a:	3301      	adds	r3, #1
 800d71c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d720:	3301      	adds	r3, #1
 800d722:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d726:	69db      	ldr	r3, [r3, #28]
 800d728:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d3db      	bcc.n	800d6e6 <f_getfree+0x5e>
 800d72e:	e04d      	b.n	800d7cc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d732:	69db      	ldr	r3, [r3, #28]
 800d734:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d73a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d73c:	2300      	movs	r3, #0
 800d73e:	637b      	str	r3, [r7, #52]	; 0x34
 800d740:	2300      	movs	r3, #0
 800d742:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d746:	2b00      	cmp	r3, #0
 800d748:	d113      	bne.n	800d772 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d74a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74e:	1c5a      	adds	r2, r3, #1
 800d750:	63ba      	str	r2, [r7, #56]	; 0x38
 800d752:	4619      	mov	r1, r3
 800d754:	f7ff fb30 	bl	800cdb8 <move_window>
 800d758:	4603      	mov	r3, r0
 800d75a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800d75e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d762:	2b00      	cmp	r3, #0
 800d764:	d131      	bne.n	800d7ca <f_getfree+0x142>
							p = fs->win;
 800d766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d768:	3338      	adds	r3, #56	; 0x38
 800d76a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800d76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76e:	899b      	ldrh	r3, [r3, #12]
 800d770:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	2b02      	cmp	r3, #2
 800d778:	d10f      	bne.n	800d79a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d77a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d77c:	f7ff fa78 	bl	800cc70 <ld_word>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d102      	bne.n	800d78c <f_getfree+0x104>
 800d786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d788:	3301      	adds	r3, #1
 800d78a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78e:	3302      	adds	r3, #2
 800d790:	633b      	str	r3, [r7, #48]	; 0x30
 800d792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d794:	3b02      	subs	r3, #2
 800d796:	637b      	str	r3, [r7, #52]	; 0x34
 800d798:	e010      	b.n	800d7bc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d79a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d79c:	f7ff fa80 	bl	800cca0 <ld_dword>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d102      	bne.n	800d7b0 <f_getfree+0x128>
 800d7aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b2:	3304      	adds	r3, #4
 800d7b4:	633b      	str	r3, [r7, #48]	; 0x30
 800d7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7b8:	3b04      	subs	r3, #4
 800d7ba:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d1bd      	bne.n	800d744 <f_getfree+0xbc>
 800d7c8:	e000      	b.n	800d7cc <f_getfree+0x144>
							if (res != FR_OK) break;
 800d7ca:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7d0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7d6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7da:	791a      	ldrb	r2, [r3, #4]
 800d7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7de:	f042 0201 	orr.w	r2, r2, #1
 800d7e2:	b2d2      	uxtb	r2, r2
 800d7e4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d7e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3748      	adds	r7, #72	; 0x48
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
	...

0800d7f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b087      	sub	sp, #28
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	4613      	mov	r3, r2
 800d800:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d802:	2301      	movs	r3, #1
 800d804:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d806:	2300      	movs	r3, #0
 800d808:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d80a:	4b1f      	ldr	r3, [pc, #124]	; (800d888 <FATFS_LinkDriverEx+0x94>)
 800d80c:	7a5b      	ldrb	r3, [r3, #9]
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	2b00      	cmp	r3, #0
 800d812:	d131      	bne.n	800d878 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d814:	4b1c      	ldr	r3, [pc, #112]	; (800d888 <FATFS_LinkDriverEx+0x94>)
 800d816:	7a5b      	ldrb	r3, [r3, #9]
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	461a      	mov	r2, r3
 800d81c:	4b1a      	ldr	r3, [pc, #104]	; (800d888 <FATFS_LinkDriverEx+0x94>)
 800d81e:	2100      	movs	r1, #0
 800d820:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d822:	4b19      	ldr	r3, [pc, #100]	; (800d888 <FATFS_LinkDriverEx+0x94>)
 800d824:	7a5b      	ldrb	r3, [r3, #9]
 800d826:	b2db      	uxtb	r3, r3
 800d828:	4a17      	ldr	r2, [pc, #92]	; (800d888 <FATFS_LinkDriverEx+0x94>)
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4413      	add	r3, r2
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d832:	4b15      	ldr	r3, [pc, #84]	; (800d888 <FATFS_LinkDriverEx+0x94>)
 800d834:	7a5b      	ldrb	r3, [r3, #9]
 800d836:	b2db      	uxtb	r3, r3
 800d838:	461a      	mov	r2, r3
 800d83a:	4b13      	ldr	r3, [pc, #76]	; (800d888 <FATFS_LinkDriverEx+0x94>)
 800d83c:	4413      	add	r3, r2
 800d83e:	79fa      	ldrb	r2, [r7, #7]
 800d840:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d842:	4b11      	ldr	r3, [pc, #68]	; (800d888 <FATFS_LinkDriverEx+0x94>)
 800d844:	7a5b      	ldrb	r3, [r3, #9]
 800d846:	b2db      	uxtb	r3, r3
 800d848:	1c5a      	adds	r2, r3, #1
 800d84a:	b2d1      	uxtb	r1, r2
 800d84c:	4a0e      	ldr	r2, [pc, #56]	; (800d888 <FATFS_LinkDriverEx+0x94>)
 800d84e:	7251      	strb	r1, [r2, #9]
 800d850:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d852:	7dbb      	ldrb	r3, [r7, #22]
 800d854:	3330      	adds	r3, #48	; 0x30
 800d856:	b2da      	uxtb	r2, r3
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	3301      	adds	r3, #1
 800d860:	223a      	movs	r2, #58	; 0x3a
 800d862:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	3302      	adds	r3, #2
 800d868:	222f      	movs	r2, #47	; 0x2f
 800d86a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	3303      	adds	r3, #3
 800d870:	2200      	movs	r2, #0
 800d872:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d874:	2300      	movs	r3, #0
 800d876:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d878:	7dfb      	ldrb	r3, [r7, #23]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	371c      	adds	r7, #28
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr
 800d886:	bf00      	nop
 800d888:	20003168 	.word	0x20003168

0800d88c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d896:	2200      	movs	r2, #0
 800d898:	6839      	ldr	r1, [r7, #0]
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f7ff ffaa 	bl	800d7f4 <FATFS_LinkDriverEx>
 800d8a0:	4603      	mov	r3, r0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
	...

0800d8ac <DataHist_parameters>:
 800d8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d8b2:	f8dd c018 	ldr.w	ip, [sp, #24]
 800d8b6:	7020      	strb	r0, [r4, #0]
 800d8b8:	6808      	ldr	r0, [r1, #0]
 800d8ba:	6060      	str	r0, [r4, #4]
 800d8bc:	6848      	ldr	r0, [r1, #4]
 800d8be:	60a0      	str	r0, [r4, #8]
 800d8c0:	6888      	ldr	r0, [r1, #8]
 800d8c2:	60e0      	str	r0, [r4, #12]
 800d8c4:	68c8      	ldr	r0, [r1, #12]
 800d8c6:	6120      	str	r0, [r4, #16]
 800d8c8:	6908      	ldr	r0, [r1, #16]
 800d8ca:	6160      	str	r0, [r4, #20]
 800d8cc:	6948      	ldr	r0, [r1, #20]
 800d8ce:	61a0      	str	r0, [r4, #24]
 800d8d0:	6988      	ldr	r0, [r1, #24]
 800d8d2:	61e0      	str	r0, [r4, #28]
 800d8d4:	69c8      	ldr	r0, [r1, #28]
 800d8d6:	6220      	str	r0, [r4, #32]
 800d8d8:	6a09      	ldr	r1, [r1, #32]
 800d8da:	6261      	str	r1, [r4, #36]	; 0x24
 800d8dc:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 800d8e0:	8811      	ldrh	r1, [r2, #0]
 800d8e2:	edd2 7a01 	vldr	s15, [r2, #4]
 800d8e6:	8521      	strh	r1, [r4, #40]	; 0x28
 800d8e8:	f102 0e80 	add.w	lr, r2, #128	; 0x80
 800d8ec:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800d8f0:	2700      	movs	r7, #0
 800d8f2:	f1ae 0278 	sub.w	r2, lr, #120	; 0x78
 800d8f6:	4641      	mov	r1, r8
 800d8f8:	f852 0b04 	ldr.w	r0, [r2], #4
 800d8fc:	f841 0b04 	str.w	r0, [r1], #4
 800d900:	4572      	cmp	r2, lr
 800d902:	d1f9      	bne.n	800d8f8 <DataHist_parameters+0x4c>
 800d904:	371e      	adds	r7, #30
 800d906:	2f5a      	cmp	r7, #90	; 0x5a
 800d908:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800d90c:	f102 0e78 	add.w	lr, r2, #120	; 0x78
 800d910:	d1ef      	bne.n	800d8f2 <DataHist_parameters+0x46>
 800d912:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
 800d916:	881a      	ldrh	r2, [r3, #0]
 800d918:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800d91c:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800d920:	f103 0e80 	add.w	lr, r3, #128	; 0x80
 800d924:	f504 77d0 	add.w	r7, r4, #416	; 0x1a0
 800d928:	2000      	movs	r0, #0
 800d92a:	f1ae 0378 	sub.w	r3, lr, #120	; 0x78
 800d92e:	463a      	mov	r2, r7
 800d930:	f853 1b04 	ldr.w	r1, [r3], #4
 800d934:	f842 1b04 	str.w	r1, [r2], #4
 800d938:	4573      	cmp	r3, lr
 800d93a:	d1f9      	bne.n	800d930 <DataHist_parameters+0x84>
 800d93c:	301e      	adds	r0, #30
 800d93e:	285a      	cmp	r0, #90	; 0x5a
 800d940:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800d944:	f103 0e78 	add.w	lr, r3, #120	; 0x78
 800d948:	d1ef      	bne.n	800d92a <DataHist_parameters+0x7e>
 800d94a:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800d94e:	f8bc 3000 	ldrh.w	r3, [ip]
 800d952:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800d956:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800d95a:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 800d95e:	f504 7e44 	add.w	lr, r4, #784	; 0x310
 800d962:	2000      	movs	r0, #0
 800d964:	f1ac 0378 	sub.w	r3, ip, #120	; 0x78
 800d968:	4672      	mov	r2, lr
 800d96a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d96e:	f842 1b04 	str.w	r1, [r2], #4
 800d972:	4563      	cmp	r3, ip
 800d974:	d1f9      	bne.n	800d96a <DataHist_parameters+0xbe>
 800d976:	301e      	adds	r0, #30
 800d978:	285a      	cmp	r0, #90	; 0x5a
 800d97a:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800d97e:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 800d982:	d1ef      	bne.n	800d964 <DataHist_parameters+0xb8>
 800d984:	f8c4 730c 	str.w	r7, [r4, #780]	; 0x30c
 800d988:	8833      	ldrh	r3, [r6, #0]
 800d98a:	6877      	ldr	r7, [r6, #4]
 800d98c:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800d990:	f106 0080 	add.w	r0, r6, #128	; 0x80
 800d994:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
 800d998:	2600      	movs	r6, #0
 800d99a:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800d99e:	4662      	mov	r2, ip
 800d9a0:	f853 1b04 	ldr.w	r1, [r3], #4
 800d9a4:	f842 1b04 	str.w	r1, [r2], #4
 800d9a8:	4283      	cmp	r3, r0
 800d9aa:	d1f9      	bne.n	800d9a0 <DataHist_parameters+0xf4>
 800d9ac:	361e      	adds	r6, #30
 800d9ae:	2e5a      	cmp	r6, #90	; 0x5a
 800d9b0:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800d9b4:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d9b8:	d1ef      	bne.n	800d99a <DataHist_parameters+0xee>
 800d9ba:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800d9be:	69aa      	ldr	r2, [r5, #24]
 800d9c0:	605f      	str	r7, [r3, #4]
 800d9c2:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800d9c6:	7829      	ldrb	r1, [r5, #0]
 800d9c8:	f884 15e8 	strb.w	r1, [r4, #1512]	; 0x5e8
 800d9cc:	619a      	str	r2, [r3, #24]
 800d9ce:	6869      	ldr	r1, [r5, #4]
 800d9d0:	6059      	str	r1, [r3, #4]
 800d9d2:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800d9d6:	68a9      	ldr	r1, [r5, #8]
 800d9d8:	6011      	str	r1, [r2, #0]
 800d9da:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800d9de:	68e9      	ldr	r1, [r5, #12]
 800d9e0:	6011      	str	r1, [r2, #0]
 800d9e2:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800d9e6:	6929      	ldr	r1, [r5, #16]
 800d9e8:	6011      	str	r1, [r2, #0]
 800d9ea:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800d9ee:	6969      	ldr	r1, [r5, #20]
 800d9f0:	6011      	str	r1, [r2, #0]
 800d9f2:	69e9      	ldr	r1, [r5, #28]
 800d9f4:	61d9      	str	r1, [r3, #28]
 800d9f6:	f504 62c1 	add.w	r2, r4, #1544	; 0x608
 800d9fa:	6a2b      	ldr	r3, [r5, #32]
 800d9fc:	6013      	str	r3, [r2, #0]
 800d9fe:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800da02:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800da04:	601a      	str	r2, [r3, #0]
 800da06:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800da0a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800da0c:	601a      	str	r2, [r3, #0]
 800da0e:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800da12:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800da14:	6023      	str	r3, [r4, #0]
 800da16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da1a:	bf00      	nop

0800da1c <rotVect>:
 800da1c:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800da20:	ed92 7a01 	vldr	s14, [r2, #4]
 800da24:	ed92 6a00 	vldr	s12, [r2]
 800da28:	ee07 3a90 	vmov	s15, r3
 800da2c:	f991 3000 	ldrsb.w	r3, [r1]
 800da30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da34:	ee06 3a90 	vmov	s13, r3
 800da38:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da3c:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800da40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800da44:	ee07 3a10 	vmov	s14, r3
 800da48:	eee6 7a86 	vfma.f32	s15, s13, s12
 800da4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800da50:	edd2 6a02 	vldr	s13, [r2, #8]
 800da54:	eee7 7a26 	vfma.f32	s15, s14, s13
 800da58:	edc0 7a00 	vstr	s15, [r0]
 800da5c:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800da60:	ed92 7a01 	vldr	s14, [r2, #4]
 800da64:	ed92 6a00 	vldr	s12, [r2]
 800da68:	ee07 3a90 	vmov	s15, r3
 800da6c:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800da70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da74:	ee06 3a90 	vmov	s13, r3
 800da78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da7c:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800da80:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800da84:	ee07 3a10 	vmov	s14, r3
 800da88:	eee6 7a86 	vfma.f32	s15, s13, s12
 800da8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800da90:	edd2 6a02 	vldr	s13, [r2, #8]
 800da94:	eee7 7a26 	vfma.f32	s15, s14, s13
 800da98:	edc0 7a01 	vstr	s15, [r0, #4]
 800da9c:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800daa0:	ed92 7a01 	vldr	s14, [r2, #4]
 800daa4:	ed92 6a00 	vldr	s12, [r2]
 800daa8:	ee07 3a90 	vmov	s15, r3
 800daac:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800dab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dab4:	ee06 3a90 	vmov	s13, r3
 800dab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dabc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800dac0:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800dac4:	eee6 7a86 	vfma.f32	s15, s13, s12
 800dac8:	ee07 3a10 	vmov	s14, r3
 800dacc:	edd2 6a02 	vldr	s13, [r2, #8]
 800dad0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dad4:	eee7 7a26 	vfma.f32	s15, s14, s13
 800dad8:	edc0 7a02 	vstr	s15, [r0, #8]
 800dadc:	4770      	bx	lr
 800dade:	bf00      	nop

0800dae0 <findAxis>:
 800dae0:	f990 3000 	ldrsb.w	r3, [r0]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d027      	beq.n	800db38 <findAxis+0x58>
 800dae8:	3301      	adds	r3, #1
 800daea:	d00e      	beq.n	800db0a <findAxis+0x2a>
 800daec:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d053      	beq.n	800db9c <findAxis+0xbc>
 800daf4:	3301      	adds	r3, #1
 800daf6:	d048      	beq.n	800db8a <findAxis+0xaa>
 800daf8:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d053      	beq.n	800dba8 <findAxis+0xc8>
 800db00:	3301      	adds	r3, #1
 800db02:	d104      	bne.n	800db0e <findAxis+0x2e>
 800db04:	2364      	movs	r3, #100	; 0x64
 800db06:	700b      	strb	r3, [r1, #0]
 800db08:	e001      	b.n	800db0e <findAxis+0x2e>
 800db0a:	2377      	movs	r3, #119	; 0x77
 800db0c:	700b      	strb	r3, [r1, #0]
 800db0e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800db12:	2b01      	cmp	r3, #1
 800db14:	d016      	beq.n	800db44 <findAxis+0x64>
 800db16:	3301      	adds	r3, #1
 800db18:	d02e      	beq.n	800db78 <findAxis+0x98>
 800db1a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d039      	beq.n	800db96 <findAxis+0xb6>
 800db22:	3301      	adds	r3, #1
 800db24:	d034      	beq.n	800db90 <findAxis+0xb0>
 800db26:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d03f      	beq.n	800dbae <findAxis+0xce>
 800db2e:	3301      	adds	r3, #1
 800db30:	d10a      	bne.n	800db48 <findAxis+0x68>
 800db32:	2364      	movs	r3, #100	; 0x64
 800db34:	704b      	strb	r3, [r1, #1]
 800db36:	e007      	b.n	800db48 <findAxis+0x68>
 800db38:	2365      	movs	r3, #101	; 0x65
 800db3a:	700b      	strb	r3, [r1, #0]
 800db3c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800db40:	2b01      	cmp	r3, #1
 800db42:	d1e8      	bne.n	800db16 <findAxis+0x36>
 800db44:	2365      	movs	r3, #101	; 0x65
 800db46:	704b      	strb	r3, [r1, #1]
 800db48:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d010      	beq.n	800db72 <findAxis+0x92>
 800db50:	3301      	adds	r3, #1
 800db52:	d014      	beq.n	800db7e <findAxis+0x9e>
 800db54:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d022      	beq.n	800dba2 <findAxis+0xc2>
 800db5c:	3301      	adds	r3, #1
 800db5e:	d011      	beq.n	800db84 <findAxis+0xa4>
 800db60:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800db64:	2b01      	cmp	r3, #1
 800db66:	d025      	beq.n	800dbb4 <findAxis+0xd4>
 800db68:	3301      	adds	r3, #1
 800db6a:	bf04      	itt	eq
 800db6c:	2364      	moveq	r3, #100	; 0x64
 800db6e:	708b      	strbeq	r3, [r1, #2]
 800db70:	4770      	bx	lr
 800db72:	2365      	movs	r3, #101	; 0x65
 800db74:	708b      	strb	r3, [r1, #2]
 800db76:	4770      	bx	lr
 800db78:	2377      	movs	r3, #119	; 0x77
 800db7a:	704b      	strb	r3, [r1, #1]
 800db7c:	e7e4      	b.n	800db48 <findAxis+0x68>
 800db7e:	2377      	movs	r3, #119	; 0x77
 800db80:	708b      	strb	r3, [r1, #2]
 800db82:	4770      	bx	lr
 800db84:	2373      	movs	r3, #115	; 0x73
 800db86:	708b      	strb	r3, [r1, #2]
 800db88:	4770      	bx	lr
 800db8a:	2373      	movs	r3, #115	; 0x73
 800db8c:	700b      	strb	r3, [r1, #0]
 800db8e:	e7be      	b.n	800db0e <findAxis+0x2e>
 800db90:	2373      	movs	r3, #115	; 0x73
 800db92:	704b      	strb	r3, [r1, #1]
 800db94:	e7d8      	b.n	800db48 <findAxis+0x68>
 800db96:	236e      	movs	r3, #110	; 0x6e
 800db98:	704b      	strb	r3, [r1, #1]
 800db9a:	e7d5      	b.n	800db48 <findAxis+0x68>
 800db9c:	236e      	movs	r3, #110	; 0x6e
 800db9e:	700b      	strb	r3, [r1, #0]
 800dba0:	e7b5      	b.n	800db0e <findAxis+0x2e>
 800dba2:	236e      	movs	r3, #110	; 0x6e
 800dba4:	708b      	strb	r3, [r1, #2]
 800dba6:	4770      	bx	lr
 800dba8:	2375      	movs	r3, #117	; 0x75
 800dbaa:	700b      	strb	r3, [r1, #0]
 800dbac:	e7af      	b.n	800db0e <findAxis+0x2e>
 800dbae:	2375      	movs	r3, #117	; 0x75
 800dbb0:	704b      	strb	r3, [r1, #1]
 800dbb2:	e7c9      	b.n	800db48 <findAxis+0x68>
 800dbb4:	2375      	movs	r3, #117	; 0x75
 800dbb6:	708b      	strb	r3, [r1, #2]
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop
 800dbbc:	0000      	movs	r0, r0
	...

0800dbc0 <findDirection>:
 800dbc0:	b5d0      	push	{r4, r6, r7, lr}
 800dbc2:	ed2d 8b04 	vpush	{d8-d9}
 800dbc6:	eef0 8ac0 	vabs.f32	s17, s0
 800dbca:	eeb0 8ae0 	vabs.f32	s16, s1
 800dbce:	eef4 8ac8 	vcmpe.f32	s17, s16
 800dbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd6:	4604      	mov	r4, r0
 800dbd8:	eeb0 9ac1 	vabs.f32	s18, s2
 800dbdc:	dd36      	ble.n	800dc4c <findDirection+0x8c>
 800dbde:	eef4 8ac9 	vcmpe.f32	s17, s18
 800dbe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbe6:	dd31      	ble.n	800dc4c <findDirection+0x8c>
 800dbe8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf0:	ee18 0a90 	vmov	r0, s17
 800dbf4:	f340 8094 	ble.w	800dd20 <findDirection+0x160>
 800dbf8:	f7f2 fca6 	bl	8000548 <__aeabi_f2d>
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	ee18 0a10 	vmov	r0, s16
 800dc02:	460f      	mov	r7, r1
 800dc04:	f7f2 fca0 	bl	8000548 <__aeabi_f2d>
 800dc08:	a387      	add	r3, pc, #540	; (adr r3, 800de28 <findDirection+0x268>)
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	f7f2 fcf3 	bl	80005f8 <__aeabi_dmul>
 800dc12:	4602      	mov	r2, r0
 800dc14:	460b      	mov	r3, r1
 800dc16:	4630      	mov	r0, r6
 800dc18:	4639      	mov	r1, r7
 800dc1a:	f7f2 ff7d 	bl	8000b18 <__aeabi_dcmpgt>
 800dc1e:	b188      	cbz	r0, 800dc44 <findDirection+0x84>
 800dc20:	ee19 0a10 	vmov	r0, s18
 800dc24:	f7f2 fc90 	bl	8000548 <__aeabi_f2d>
 800dc28:	a37f      	add	r3, pc, #508	; (adr r3, 800de28 <findDirection+0x268>)
 800dc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2e:	f7f2 fce3 	bl	80005f8 <__aeabi_dmul>
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	4630      	mov	r0, r6
 800dc38:	4639      	mov	r1, r7
 800dc3a:	f7f2 ff6d 	bl	8000b18 <__aeabi_dcmpgt>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	bf18      	it	ne
 800dc42:	2404      	movne	r4, #4
 800dc44:	ecbd 8b04 	vpop	{d8-d9}
 800dc48:	4620      	mov	r0, r4
 800dc4a:	bdd0      	pop	{r4, r6, r7, pc}
 800dc4c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800dc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc54:	dd32      	ble.n	800dcbc <findDirection+0xfc>
 800dc56:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800dc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc5e:	ee18 0a10 	vmov	r0, s16
 800dc62:	f340 8086 	ble.w	800dd72 <findDirection+0x1b2>
 800dc66:	f7f2 fc6f 	bl	8000548 <__aeabi_f2d>
 800dc6a:	4606      	mov	r6, r0
 800dc6c:	ee18 0a90 	vmov	r0, s17
 800dc70:	460f      	mov	r7, r1
 800dc72:	f7f2 fc69 	bl	8000548 <__aeabi_f2d>
 800dc76:	a36c      	add	r3, pc, #432	; (adr r3, 800de28 <findDirection+0x268>)
 800dc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7c:	f7f2 fcbc 	bl	80005f8 <__aeabi_dmul>
 800dc80:	4602      	mov	r2, r0
 800dc82:	460b      	mov	r3, r1
 800dc84:	4630      	mov	r0, r6
 800dc86:	4639      	mov	r1, r7
 800dc88:	f7f2 ff46 	bl	8000b18 <__aeabi_dcmpgt>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	d0d9      	beq.n	800dc44 <findDirection+0x84>
 800dc90:	ee19 0a10 	vmov	r0, s18
 800dc94:	f7f2 fc58 	bl	8000548 <__aeabi_f2d>
 800dc98:	a363      	add	r3, pc, #396	; (adr r3, 800de28 <findDirection+0x268>)
 800dc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9e:	f7f2 fcab 	bl	80005f8 <__aeabi_dmul>
 800dca2:	4602      	mov	r2, r0
 800dca4:	460b      	mov	r3, r1
 800dca6:	4630      	mov	r0, r6
 800dca8:	4639      	mov	r1, r7
 800dcaa:	f7f2 ff35 	bl	8000b18 <__aeabi_dcmpgt>
 800dcae:	ecbd 8b04 	vpop	{d8-d9}
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	bf18      	it	ne
 800dcb6:	2401      	movne	r4, #1
 800dcb8:	4620      	mov	r0, r4
 800dcba:	bdd0      	pop	{r4, r6, r7, pc}
 800dcbc:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800dcc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc4:	ee19 0a10 	vmov	r0, s18
 800dcc8:	dd7f      	ble.n	800ddca <findDirection+0x20a>
 800dcca:	f7f2 fc3d 	bl	8000548 <__aeabi_f2d>
 800dcce:	4606      	mov	r6, r0
 800dcd0:	ee18 0a10 	vmov	r0, s16
 800dcd4:	460f      	mov	r7, r1
 800dcd6:	f7f2 fc37 	bl	8000548 <__aeabi_f2d>
 800dcda:	a353      	add	r3, pc, #332	; (adr r3, 800de28 <findDirection+0x268>)
 800dcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce0:	f7f2 fc8a 	bl	80005f8 <__aeabi_dmul>
 800dce4:	4602      	mov	r2, r0
 800dce6:	460b      	mov	r3, r1
 800dce8:	4630      	mov	r0, r6
 800dcea:	4639      	mov	r1, r7
 800dcec:	f7f2 ff14 	bl	8000b18 <__aeabi_dcmpgt>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d0a7      	beq.n	800dc44 <findDirection+0x84>
 800dcf4:	ee18 0a90 	vmov	r0, s17
 800dcf8:	f7f2 fc26 	bl	8000548 <__aeabi_f2d>
 800dcfc:	a34a      	add	r3, pc, #296	; (adr r3, 800de28 <findDirection+0x268>)
 800dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd02:	f7f2 fc79 	bl	80005f8 <__aeabi_dmul>
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	4639      	mov	r1, r7
 800dd0e:	f7f2 ff03 	bl	8000b18 <__aeabi_dcmpgt>
 800dd12:	ecbd 8b04 	vpop	{d8-d9}
 800dd16:	2800      	cmp	r0, #0
 800dd18:	bf18      	it	ne
 800dd1a:	2400      	movne	r4, #0
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	bdd0      	pop	{r4, r6, r7, pc}
 800dd20:	f7f2 fc12 	bl	8000548 <__aeabi_f2d>
 800dd24:	4606      	mov	r6, r0
 800dd26:	ee18 0a10 	vmov	r0, s16
 800dd2a:	460f      	mov	r7, r1
 800dd2c:	f7f2 fc0c 	bl	8000548 <__aeabi_f2d>
 800dd30:	a33d      	add	r3, pc, #244	; (adr r3, 800de28 <findDirection+0x268>)
 800dd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd36:	f7f2 fc5f 	bl	80005f8 <__aeabi_dmul>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	4630      	mov	r0, r6
 800dd40:	4639      	mov	r1, r7
 800dd42:	f7f2 fee9 	bl	8000b18 <__aeabi_dcmpgt>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	f43f af7c 	beq.w	800dc44 <findDirection+0x84>
 800dd4c:	ee19 0a10 	vmov	r0, s18
 800dd50:	f7f2 fbfa 	bl	8000548 <__aeabi_f2d>
 800dd54:	a334      	add	r3, pc, #208	; (adr r3, 800de28 <findDirection+0x268>)
 800dd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5a:	f7f2 fc4d 	bl	80005f8 <__aeabi_dmul>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	460b      	mov	r3, r1
 800dd62:	4630      	mov	r0, r6
 800dd64:	4639      	mov	r1, r7
 800dd66:	f7f2 fed7 	bl	8000b18 <__aeabi_dcmpgt>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	bf18      	it	ne
 800dd6e:	2405      	movne	r4, #5
 800dd70:	e768      	b.n	800dc44 <findDirection+0x84>
 800dd72:	f7f2 fbe9 	bl	8000548 <__aeabi_f2d>
 800dd76:	4606      	mov	r6, r0
 800dd78:	ee18 0a90 	vmov	r0, s17
 800dd7c:	460f      	mov	r7, r1
 800dd7e:	f7f2 fbe3 	bl	8000548 <__aeabi_f2d>
 800dd82:	a329      	add	r3, pc, #164	; (adr r3, 800de28 <findDirection+0x268>)
 800dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd88:	f7f2 fc36 	bl	80005f8 <__aeabi_dmul>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4630      	mov	r0, r6
 800dd92:	4639      	mov	r1, r7
 800dd94:	f7f2 fec0 	bl	8000b18 <__aeabi_dcmpgt>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	f43f af53 	beq.w	800dc44 <findDirection+0x84>
 800dd9e:	ee19 0a10 	vmov	r0, s18
 800dda2:	f7f2 fbd1 	bl	8000548 <__aeabi_f2d>
 800dda6:	a320      	add	r3, pc, #128	; (adr r3, 800de28 <findDirection+0x268>)
 800dda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddac:	f7f2 fc24 	bl	80005f8 <__aeabi_dmul>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	4639      	mov	r1, r7
 800ddb8:	f7f2 feae 	bl	8000b18 <__aeabi_dcmpgt>
 800ddbc:	ecbd 8b04 	vpop	{d8-d9}
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	bf18      	it	ne
 800ddc4:	2403      	movne	r4, #3
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	bdd0      	pop	{r4, r6, r7, pc}
 800ddca:	f7f2 fbbd 	bl	8000548 <__aeabi_f2d>
 800ddce:	4606      	mov	r6, r0
 800ddd0:	ee18 0a10 	vmov	r0, s16
 800ddd4:	460f      	mov	r7, r1
 800ddd6:	f7f2 fbb7 	bl	8000548 <__aeabi_f2d>
 800ddda:	a313      	add	r3, pc, #76	; (adr r3, 800de28 <findDirection+0x268>)
 800dddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde0:	f7f2 fc0a 	bl	80005f8 <__aeabi_dmul>
 800dde4:	4602      	mov	r2, r0
 800dde6:	460b      	mov	r3, r1
 800dde8:	4630      	mov	r0, r6
 800ddea:	4639      	mov	r1, r7
 800ddec:	f7f2 fe94 	bl	8000b18 <__aeabi_dcmpgt>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	f43f af27 	beq.w	800dc44 <findDirection+0x84>
 800ddf6:	ee18 0a90 	vmov	r0, s17
 800ddfa:	f7f2 fba5 	bl	8000548 <__aeabi_f2d>
 800ddfe:	a30a      	add	r3, pc, #40	; (adr r3, 800de28 <findDirection+0x268>)
 800de00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de04:	f7f2 fbf8 	bl	80005f8 <__aeabi_dmul>
 800de08:	4602      	mov	r2, r0
 800de0a:	460b      	mov	r3, r1
 800de0c:	4630      	mov	r0, r6
 800de0e:	4639      	mov	r1, r7
 800de10:	f7f2 fe82 	bl	8000b18 <__aeabi_dcmpgt>
 800de14:	ecbd 8b04 	vpop	{d8-d9}
 800de18:	2800      	cmp	r0, #0
 800de1a:	bf18      	it	ne
 800de1c:	2402      	movne	r4, #2
 800de1e:	4620      	mov	r0, r4
 800de20:	bdd0      	pop	{r4, r6, r7, pc}
 800de22:	bf00      	nop
 800de24:	f3af 8000 	nop.w
 800de28:	e0000000 	.word	0xe0000000
 800de2c:	3ff6b851 	.word	0x3ff6b851

0800de30 <updateOrientation>:
 800de30:	2300      	movs	r3, #0
 800de32:	6003      	str	r3, [r0, #0]
 800de34:	6043      	str	r3, [r0, #4]
 800de36:	7203      	strb	r3, [r0, #8]
 800de38:	f891 c000 	ldrb.w	ip, [r1]
 800de3c:	784a      	ldrb	r2, [r1, #1]
 800de3e:	f1ac 0342 	sub.w	r3, ip, #66	; 0x42
 800de42:	2b17      	cmp	r3, #23
 800de44:	bf98      	it	ls
 800de46:	f10c 0c20 	addls.w	ip, ip, #32
 800de4a:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800de4e:	bf98      	it	ls
 800de50:	fa5f fc8c 	uxtbls.w	ip, ip
 800de54:	2b17      	cmp	r3, #23
 800de56:	788b      	ldrb	r3, [r1, #2]
 800de58:	bf98      	it	ls
 800de5a:	3220      	addls	r2, #32
 800de5c:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800de60:	bf98      	it	ls
 800de62:	b2d2      	uxtbls	r2, r2
 800de64:	2917      	cmp	r1, #23
 800de66:	bf98      	it	ls
 800de68:	3320      	addls	r3, #32
 800de6a:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 800de6e:	bf98      	it	ls
 800de70:	b2db      	uxtbls	r3, r3
 800de72:	f1bc 0f13 	cmp.w	ip, #19
 800de76:	d80d      	bhi.n	800de94 <updateOrientation+0x64>
 800de78:	e8df f00c 	tbb	[pc, ip]
 800de7c:	0c0c0a32 	.word	0x0c0c0a32
 800de80:	0c0c0c0c 	.word	0x0c0c0c0c
 800de84:	0c350c0c 	.word	0x0c350c0c
 800de88:	380c0c0c 	.word	0x380c0c0c
 800de8c:	3e0c3b0c 	.word	0x3e0c3b0c
 800de90:	2101      	movs	r1, #1
 800de92:	7001      	strb	r1, [r0, #0]
 800de94:	3a64      	subs	r2, #100	; 0x64
 800de96:	2a13      	cmp	r2, #19
 800de98:	d80d      	bhi.n	800deb6 <updateOrientation+0x86>
 800de9a:	e8df f002 	tbb	[pc, r2]
 800de9e:	0a30      	.short	0x0a30
 800dea0:	0c0c0c0c 	.word	0x0c0c0c0c
 800dea4:	0c0c0c0c 	.word	0x0c0c0c0c
 800dea8:	0c0c0c33 	.word	0x0c0c0c33
 800deac:	390c360c 	.word	0x390c360c
 800deb0:	3c0c      	.short	0x3c0c
 800deb2:	2201      	movs	r2, #1
 800deb4:	7042      	strb	r2, [r0, #1]
 800deb6:	3b64      	subs	r3, #100	; 0x64
 800deb8:	2b13      	cmp	r3, #19
 800deba:	d80d      	bhi.n	800ded8 <updateOrientation+0xa8>
 800debc:	e8df f003 	tbb	[pc, r3]
 800dec0:	0c0c2e0a 	.word	0x0c0c2e0a
 800dec4:	0c0c0c0c 	.word	0x0c0c0c0c
 800dec8:	0c310c0c 	.word	0x0c310c0c
 800decc:	340c0c0c 	.word	0x340c0c0c
 800ded0:	0d0c370c 	.word	0x0d0c370c
 800ded4:	23ff      	movs	r3, #255	; 0xff
 800ded6:	7203      	strb	r3, [r0, #8]
 800ded8:	4770      	bx	lr
 800deda:	23ff      	movs	r3, #255	; 0xff
 800dedc:	7083      	strb	r3, [r0, #2]
 800dede:	4770      	bx	lr
 800dee0:	21ff      	movs	r1, #255	; 0xff
 800dee2:	7181      	strb	r1, [r0, #6]
 800dee4:	e7d6      	b.n	800de94 <updateOrientation+0x64>
 800dee6:	2101      	movs	r1, #1
 800dee8:	70c1      	strb	r1, [r0, #3]
 800deea:	e7d3      	b.n	800de94 <updateOrientation+0x64>
 800deec:	21ff      	movs	r1, #255	; 0xff
 800deee:	70c1      	strb	r1, [r0, #3]
 800def0:	e7d0      	b.n	800de94 <updateOrientation+0x64>
 800def2:	2101      	movs	r1, #1
 800def4:	7181      	strb	r1, [r0, #6]
 800def6:	e7cd      	b.n	800de94 <updateOrientation+0x64>
 800def8:	21ff      	movs	r1, #255	; 0xff
 800defa:	7001      	strb	r1, [r0, #0]
 800defc:	e7ca      	b.n	800de94 <updateOrientation+0x64>
 800defe:	22ff      	movs	r2, #255	; 0xff
 800df00:	71c2      	strb	r2, [r0, #7]
 800df02:	e7d8      	b.n	800deb6 <updateOrientation+0x86>
 800df04:	2201      	movs	r2, #1
 800df06:	7102      	strb	r2, [r0, #4]
 800df08:	e7d5      	b.n	800deb6 <updateOrientation+0x86>
 800df0a:	22ff      	movs	r2, #255	; 0xff
 800df0c:	7102      	strb	r2, [r0, #4]
 800df0e:	e7d2      	b.n	800deb6 <updateOrientation+0x86>
 800df10:	2201      	movs	r2, #1
 800df12:	71c2      	strb	r2, [r0, #7]
 800df14:	e7cf      	b.n	800deb6 <updateOrientation+0x86>
 800df16:	22ff      	movs	r2, #255	; 0xff
 800df18:	7042      	strb	r2, [r0, #1]
 800df1a:	e7cc      	b.n	800deb6 <updateOrientation+0x86>
 800df1c:	2301      	movs	r3, #1
 800df1e:	7083      	strb	r3, [r0, #2]
 800df20:	4770      	bx	lr
 800df22:	2301      	movs	r3, #1
 800df24:	7143      	strb	r3, [r0, #5]
 800df26:	4770      	bx	lr
 800df28:	23ff      	movs	r3, #255	; 0xff
 800df2a:	7143      	strb	r3, [r0, #5]
 800df2c:	4770      	bx	lr
 800df2e:	2301      	movs	r3, #1
 800df30:	7203      	strb	r3, [r0, #8]
 800df32:	4770      	bx	lr

0800df34 <qmult>:
 800df34:	ed91 2a03 	vldr	s4, [r1, #12]
 800df38:	ed90 3a01 	vldr	s6, [r0, #4]
 800df3c:	edd0 5a02 	vldr	s11, [r0, #8]
 800df40:	edd1 4a01 	vldr	s9, [r1, #4]
 800df44:	ed90 4a00 	vldr	s8, [r0]
 800df48:	ed91 5a02 	vldr	s10, [r1, #8]
 800df4c:	edd1 3a00 	vldr	s7, [r1]
 800df50:	edd0 2a03 	vldr	s5, [r0, #12]
 800df54:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800df58:	ee62 6a03 	vmul.f32	s13, s4, s6
 800df5c:	ee22 7a25 	vmul.f32	s14, s4, s11
 800df60:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800df64:	eea4 6a02 	vfma.f32	s12, s8, s4
 800df68:	eee4 6a05 	vfma.f32	s13, s8, s10
 800df6c:	eea3 7a23 	vfma.f32	s14, s6, s7
 800df70:	eee4 7a63 	vfms.f32	s15, s8, s7
 800df74:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800df78:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800df7c:	eea5 7a22 	vfma.f32	s14, s10, s5
 800df80:	eee2 7a22 	vfma.f32	s15, s4, s5
 800df84:	eea3 6a45 	vfms.f32	s12, s6, s10
 800df88:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800df8c:	eea4 7a64 	vfms.f32	s14, s8, s9
 800df90:	eee5 7a65 	vfms.f32	s15, s10, s11
 800df94:	ed82 6a00 	vstr	s12, [r2]
 800df98:	edc2 6a01 	vstr	s13, [r2, #4]
 800df9c:	ed82 7a02 	vstr	s14, [r2, #8]
 800dfa0:	edc2 7a03 	vstr	s15, [r2, #12]
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop

0800dfa8 <dataDerivative5>:
 800dfa8:	ed90 7a01 	vldr	s14, [r0, #4]
 800dfac:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 800dfb0:	edd0 6a04 	vldr	s13, [r0, #16]
 800dfb4:	ed90 6a00 	vldr	s12, [r0]
 800dfb8:	ed90 4a02 	vldr	s8, [r0, #8]
 800dfbc:	edd0 4a09 	vldr	s9, [r0, #36]	; 0x24
 800dfc0:	eeb8 5a00 	vmov.f32	s10, #128	; 0xc0000000 -2.0
 800dfc4:	eee7 7a05 	vfma.f32	s15, s14, s10
 800dfc8:	ed90 7a03 	vldr	s14, [r0, #12]
 800dfcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dfd0:	edd0 6a0b 	vldr	s13, [r0, #44]	; 0x2c
 800dfd4:	ee96 7a05 	vfnms.f32	s14, s12, s10
 800dfd8:	eee4 6a05 	vfma.f32	s13, s8, s10
 800dfdc:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 800dfe0:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
 800dfe4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800dfe8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800dfec:	ee37 7a24 	vadd.f32	s14, s14, s9
 800dff0:	eeb0 6a66 	vmov.f32	s12, s13
 800dff4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800e030 <dataDerivative5+0x88>
 800dff8:	eea5 7a25 	vfma.f32	s14, s10, s11
 800dffc:	ee60 6a26 	vmul.f32	s13, s0, s13
 800e000:	ed90 5a05 	vldr	s10, [r0, #20]
 800e004:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e008:	ee36 6a45 	vsub.f32	s12, s12, s10
 800e00c:	ed90 5a0e 	vldr	s10, [r0, #56]	; 0x38
 800e010:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e014:	eea5 6a25 	vfma.f32	s12, s10, s11
 800e018:	ee27 0aa7 	vmul.f32	s0, s15, s15
 800e01c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e020:	eea7 0a07 	vfma.f32	s0, s14, s14
 800e024:	eea6 0aa6 	vfma.f32	s0, s13, s13
 800e028:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	3dcccccd 	.word	0x3dcccccd

0800e034 <b_dcm2q>:
 800e034:	ed90 5a08 	vldr	s10, [r0, #32]
 800e038:	edd0 7a00 	vldr	s15, [r0]
 800e03c:	edd0 6a04 	vldr	s13, [r0, #16]
 800e040:	ee37 7a85 	vadd.f32	s14, s15, s10
 800e044:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800e048:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e04c:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800e050:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800e054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e058:	bfc5      	ittet	gt
 800e05a:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800e05e:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800e062:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800e170 <b_dcm2q+0x13c>
 800e066:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800e06a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800e06e:	ee35 6a47 	vsub.f32	s12, s10, s14
 800e072:	ee35 7a07 	vadd.f32	s14, s10, s14
 800e076:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800e07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e07e:	bfc5      	ittet	gt
 800e080:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800e084:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800e088:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800e170 <b_dcm2q+0x13c>
 800e08c:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800e090:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800e094:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800e098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e09c:	dd5b      	ble.n	800e156 <b_dcm2q+0x122>
 800e09e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800e0a2:	ee37 7a24 	vadd.f32	s14, s14, s9
 800e0a6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800e0aa:	eef1 4ac7 	vsqrt.f32	s9, s14
 800e0ae:	ee64 4a84 	vmul.f32	s9, s9, s8
 800e0b2:	ee76 6a85 	vadd.f32	s13, s13, s10
 800e0b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e0ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e0be:	edd0 6a07 	vldr	s13, [r0, #28]
 800e0c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ca:	bf85      	ittet	hi
 800e0cc:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800e0d0:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800e0d4:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800e170 <b_dcm2q+0x13c>
 800e0d8:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800e0dc:	edd0 7a05 	vldr	s15, [r0, #20]
 800e0e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e0e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ec:	d43c      	bmi.n	800e168 <b_dcm2q+0x134>
 800e0ee:	bfd8      	it	le
 800e0f0:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800e0f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e0f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0fc:	ed81 7a00 	vstr	s14, [r1]
 800e100:	edd0 7a06 	vldr	s15, [r0, #24]
 800e104:	ed90 7a02 	vldr	s14, [r0, #8]
 800e108:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e10c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e114:	d425      	bmi.n	800e162 <b_dcm2q+0x12e>
 800e116:	bfd8      	it	le
 800e118:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800e11c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e120:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800e124:	edc1 5a01 	vstr	s11, [r1, #4]
 800e128:	edd0 7a01 	vldr	s15, [r0, #4]
 800e12c:	ed90 7a03 	vldr	s14, [r0, #12]
 800e130:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e13c:	d40e      	bmi.n	800e15c <b_dcm2q+0x128>
 800e13e:	bfd8      	it	le
 800e140:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800e144:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e148:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e14c:	edc1 4a03 	vstr	s9, [r1, #12]
 800e150:	ed81 6a02 	vstr	s12, [r1, #8]
 800e154:	4770      	bx	lr
 800e156:	eddf 4a06 	vldr	s9, [pc, #24]	; 800e170 <b_dcm2q+0x13c>
 800e15a:	e7aa      	b.n	800e0b2 <b_dcm2q+0x7e>
 800e15c:	eeb1 6a46 	vneg.f32	s12, s12
 800e160:	e7f0      	b.n	800e144 <b_dcm2q+0x110>
 800e162:	eef1 5a65 	vneg.f32	s11, s11
 800e166:	e7d9      	b.n	800e11c <b_dcm2q+0xe8>
 800e168:	eeb1 7a47 	vneg.f32	s14, s14
 800e16c:	e7c2      	b.n	800e0f4 <b_dcm2q+0xc0>
 800e16e:	bf00      	nop
 800e170:	00000000 	.word	0x00000000

0800e174 <getRotationMatrix>:
 800e174:	b538      	push	{r3, r4, r5, lr}
 800e176:	4613      	mov	r3, r2
 800e178:	4605      	mov	r5, r0
 800e17a:	460c      	mov	r4, r1
 800e17c:	4618      	mov	r0, r3
 800e17e:	2224      	movs	r2, #36	; 0x24
 800e180:	2100      	movs	r1, #0
 800e182:	f007 ffcd 	bl	8016120 <memset>
 800e186:	edd5 5a00 	vldr	s11, [r5]
 800e18a:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800e2b0 <getRotationMatrix+0x13c>
 800e18e:	edc0 5a02 	vstr	s11, [r0, #8]
 800e192:	edd5 4a01 	vldr	s9, [r5, #4]
 800e196:	edc0 4a05 	vstr	s9, [r0, #20]
 800e19a:	ed95 5a02 	vldr	s10, [r5, #8]
 800e19e:	ed80 5a08 	vstr	s10, [r0, #32]
 800e1a2:	ed94 4a02 	vldr	s8, [r4, #8]
 800e1a6:	edd4 3a01 	vldr	s7, [r4, #4]
 800e1aa:	ed94 6a00 	vldr	s12, [r4]
 800e1ae:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 800e1b2:	ee65 7ae3 	vnmul.f32	s15, s11, s7
 800e1b6:	eee3 6a85 	vfma.f32	s13, s7, s10
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	eee6 7a24 	vfma.f32	s15, s12, s9
 800e1c0:	ee25 7a46 	vnmul.f32	s14, s10, s12
 800e1c4:	eeb0 6ae6 	vabs.f32	s12, s13
 800e1c8:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800e1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d0:	eea4 7a25 	vfma.f32	s14, s8, s11
 800e1d4:	bfdc      	itt	le
 800e1d6:	ee86 4a83 	vdivle.f32	s8, s13, s6
 800e1da:	eeb0 6a43 	vmovle.f32	s12, s6
 800e1de:	eef0 3ac7 	vabs.f32	s7, s14
 800e1e2:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800e1e6:	bfd4      	ite	le
 800e1e8:	ee24 4a04 	vmulle.f32	s8, s8, s8
 800e1ec:	eeb7 4a00 	vmovgt.f32	s8, #112	; 0x3f800000  1.0
 800e1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f4:	ed80 7a03 	vstr	s14, [r0, #12]
 800e1f8:	edc0 7a06 	vstr	s15, [r0, #24]
 800e1fc:	d43f      	bmi.n	800e27e <getRotationMatrix+0x10a>
 800e1fe:	eec7 3a06 	vdiv.f32	s7, s14, s12
 800e202:	eea3 4aa3 	vfma.f32	s8, s7, s7
 800e206:	eeb0 3a44 	vmov.f32	s6, s8
 800e20a:	eeb0 4ae7 	vabs.f32	s8, s15
 800e20e:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800e212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e216:	d543      	bpl.n	800e2a0 <getRotationMatrix+0x12c>
 800e218:	eec6 2a04 	vdiv.f32	s5, s12, s8
 800e21c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800e220:	ee62 2aa2 	vmul.f32	s5, s5, s5
 800e224:	eeb0 6a44 	vmov.f32	s12, s8
 800e228:	eee3 3a22 	vfma.f32	s7, s6, s5
 800e22c:	eeb1 4ae3 	vsqrt.f32	s8, s7
 800e230:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800e234:	ee24 6a06 	vmul.f32	s12, s8, s12
 800e238:	ee83 4a86 	vdiv.f32	s8, s7, s12
 800e23c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800e240:	ee67 7a84 	vmul.f32	s15, s15, s8
 800e244:	ee66 6a84 	vmul.f32	s13, s13, s8
 800e248:	ee65 3a47 	vnmul.f32	s7, s10, s14
 800e24c:	ee25 4ae7 	vnmul.f32	s8, s11, s15
 800e250:	ee24 6ae6 	vnmul.f32	s12, s9, s13
 800e254:	eee7 3aa4 	vfma.f32	s7, s15, s9
 800e258:	eef0 4a44 	vmov.f32	s9, s8
 800e25c:	eee6 4a85 	vfma.f32	s9, s13, s10
 800e260:	eea7 6a25 	vfma.f32	s12, s14, s11
 800e264:	edc3 6a00 	vstr	s13, [r3]
 800e268:	ed83 7a03 	vstr	s14, [r3, #12]
 800e26c:	edc3 7a06 	vstr	s15, [r3, #24]
 800e270:	edc3 3a01 	vstr	s7, [r3, #4]
 800e274:	edc3 4a04 	vstr	s9, [r3, #16]
 800e278:	ed83 6a07 	vstr	s12, [r3, #28]
 800e27c:	bd38      	pop	{r3, r4, r5, pc}
 800e27e:	eec6 2a23 	vdiv.f32	s5, s12, s7
 800e282:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800e286:	ee62 2aa2 	vmul.f32	s5, s5, s5
 800e28a:	eeb0 6a63 	vmov.f32	s12, s7
 800e28e:	eea4 3a22 	vfma.f32	s6, s8, s5
 800e292:	eeb0 4ae7 	vabs.f32	s8, s15
 800e296:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800e29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e29e:	d4bb      	bmi.n	800e218 <getRotationMatrix+0xa4>
 800e2a0:	ee87 4a86 	vdiv.f32	s8, s15, s12
 800e2a4:	eef0 3a43 	vmov.f32	s7, s6
 800e2a8:	eee4 3a04 	vfma.f32	s7, s8, s8
 800e2ac:	e7be      	b.n	800e22c <getRotationMatrix+0xb8>
 800e2ae:	bf00      	nop
 800e2b0:	00000000 	.word	0x00000000

0800e2b4 <kf_update>:
 800e2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b8:	ed2d 8b10 	vpush	{d8-d15}
 800e2bc:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 800e2c0:	3901      	subs	r1, #1
 800e2c2:	f8dd 4490 	ldr.w	r4, [sp, #1168]	; 0x490
 800e2c6:	9303      	str	r3, [sp, #12]
 800e2c8:	ed94 2a00 	vldr	s4, [r4]
 800e2cc:	edd4 2a01 	vldr	s5, [r4, #4]
 800e2d0:	ed94 3a02 	vldr	s6, [r4, #8]
 800e2d4:	edd4 3a03 	vldr	s7, [r4, #12]
 800e2d8:	ed94 4a04 	vldr	s8, [r4, #16]
 800e2dc:	edd4 4a05 	vldr	s9, [r4, #20]
 800e2e0:	ed94 5a06 	vldr	s10, [r4, #24]
 800e2e4:	edd4 5a07 	vldr	s11, [r4, #28]
 800e2e8:	ed94 6a08 	vldr	s12, [r4, #32]
 800e2ec:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 800e2f0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800e2f4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800e2f8:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 800e36c <kf_update+0xb8>
 800e2fc:	9104      	str	r1, [sp, #16]
 800e2fe:	ab0b      	add	r3, sp, #44	; 0x2c
 800e300:	ee22 2a02 	vmul.f32	s4, s4, s4
 800e304:	ee62 2aa2 	vmul.f32	s5, s5, s5
 800e308:	ee23 3a03 	vmul.f32	s6, s6, s6
 800e30c:	ee63 3aa3 	vmul.f32	s7, s7, s7
 800e310:	ee24 4a04 	vmul.f32	s8, s8, s8
 800e314:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800e318:	ee25 5a05 	vmul.f32	s10, s10, s10
 800e31c:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800e320:	ee26 6a06 	vmul.f32	s12, s12, s12
 800e324:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800e328:	ee27 7a07 	vmul.f32	s14, s14, s14
 800e32c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e330:	9302      	str	r3, [sp, #8]
 800e332:	2300      	movs	r3, #0
 800e334:	4606      	mov	r6, r0
 800e336:	9200      	str	r2, [sp, #0]
 800e338:	ed8d 2a0b 	vstr	s4, [sp, #44]	; 0x2c
 800e33c:	edcd 2a0c 	vstr	s5, [sp, #48]	; 0x30
 800e340:	ed8d 3a0d 	vstr	s6, [sp, #52]	; 0x34
 800e344:	edcd 3a0e 	vstr	s7, [sp, #56]	; 0x38
 800e348:	ed8d 4a0f 	vstr	s8, [sp, #60]	; 0x3c
 800e34c:	edcd 4a10 	vstr	s9, [sp, #64]	; 0x40
 800e350:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44
 800e354:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 800e358:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 800e35c:	edcd 6a14 	vstr	s13, [sp, #80]	; 0x50
 800e360:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800e364:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800e368:	9301      	str	r3, [sp, #4]
 800e36a:	e010      	b.n	800e38e <kf_update+0xda>
 800e36c:	00000000 	.word	0x00000000
 800e370:	9a00      	ldr	r2, [sp, #0]
 800e372:	9b01      	ldr	r3, [sp, #4]
 800e374:	3204      	adds	r2, #4
 800e376:	9200      	str	r2, [sp, #0]
 800e378:	9a02      	ldr	r2, [sp, #8]
 800e37a:	3204      	adds	r2, #4
 800e37c:	9202      	str	r2, [sp, #8]
 800e37e:	9a03      	ldr	r2, [sp, #12]
 800e380:	3301      	adds	r3, #1
 800e382:	3204      	adds	r2, #4
 800e384:	2b0c      	cmp	r3, #12
 800e386:	9301      	str	r3, [sp, #4]
 800e388:	9203      	str	r2, [sp, #12]
 800e38a:	f000 857b 	beq.w	800ee84 <kf_update+0xbd0>
 800e38e:	9a04      	ldr	r2, [sp, #16]
 800e390:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e394:	9204      	str	r2, [sp, #16]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d0ea      	beq.n	800e370 <kf_update+0xbc>
 800e39a:	9a03      	ldr	r2, [sp, #12]
 800e39c:	ed8d 8a17 	vstr	s16, [sp, #92]	; 0x5c
 800e3a0:	f106 0328 	add.w	r3, r6, #40	; 0x28
 800e3a4:	ac17      	add	r4, sp, #92	; 0x5c
 800e3a6:	edd2 da00 	vldr	s27, [r2]
 800e3aa:	ed92 ea0c 	vldr	s28, [r2, #48]	; 0x30
 800e3ae:	edd2 ea18 	vldr	s29, [r2, #96]	; 0x60
 800e3b2:	ed92 fa24 	vldr	s30, [r2, #144]	; 0x90
 800e3b6:	edd2 fa30 	vldr	s31, [r2, #192]	; 0xc0
 800e3ba:	edd2 6a3c 	vldr	s13, [r2, #240]	; 0xf0
 800e3be:	ed92 6a48 	vldr	s12, [r2, #288]	; 0x120
 800e3c2:	edd2 5a54 	vldr	s11, [r2, #336]	; 0x150
 800e3c6:	ed92 5a60 	vldr	s10, [r2, #384]	; 0x180
 800e3ca:	9305      	str	r3, [sp, #20]
 800e3cc:	ed8d 8a18 	vstr	s16, [sp, #96]	; 0x60
 800e3d0:	ed8d 8a19 	vstr	s16, [sp, #100]	; 0x64
 800e3d4:	ed8d 8a1a 	vstr	s16, [sp, #104]	; 0x68
 800e3d8:	ed8d 8a1b 	vstr	s16, [sp, #108]	; 0x6c
 800e3dc:	ed8d 8a1c 	vstr	s16, [sp, #112]	; 0x70
 800e3e0:	ed8d 8a1d 	vstr	s16, [sp, #116]	; 0x74
 800e3e4:	ed8d 8a1e 	vstr	s16, [sp, #120]	; 0x78
 800e3e8:	ed8d 8a1f 	vstr	s16, [sp, #124]	; 0x7c
 800e3ec:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 800e3f0:	4622      	mov	r2, r4
 800e3f2:	ecb3 7a01 	vldmia	r3!, {s14}
 800e3f6:	ecf2 7a01 	vldmia	r2!, {s15}
 800e3fa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e402:	d006      	beq.n	800e412 <kf_update+0x15e>
 800e404:	eef5 da40 	vcmp.f32	s27, #0.0
 800e408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40c:	bf18      	it	ne
 800e40e:	eee7 7a2d 	vfmane.f32	s15, s14, s27
 800e412:	ed93 7a08 	vldr	s14, [r3, #32]
 800e416:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e41e:	d006      	beq.n	800e42e <kf_update+0x17a>
 800e420:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800e424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e428:	bf18      	it	ne
 800e42a:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800e42e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800e432:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e43a:	d006      	beq.n	800e44a <kf_update+0x196>
 800e43c:	eef5 ea40 	vcmp.f32	s29, #0.0
 800e440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e444:	bf18      	it	ne
 800e446:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800e44a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800e44e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e456:	d006      	beq.n	800e466 <kf_update+0x1b2>
 800e458:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800e45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e460:	bf18      	it	ne
 800e462:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800e466:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800e46a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e472:	d006      	beq.n	800e482 <kf_update+0x1ce>
 800e474:	eef5 fa40 	vcmp.f32	s31, #0.0
 800e478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47c:	bf18      	it	ne
 800e47e:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800e482:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800e486:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e48e:	d006      	beq.n	800e49e <kf_update+0x1ea>
 800e490:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e498:	bf18      	it	ne
 800e49a:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800e49e:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800e4a2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4aa:	d006      	beq.n	800e4ba <kf_update+0x206>
 800e4ac:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b4:	bf18      	it	ne
 800e4b6:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800e4ba:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800e4be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c6:	d006      	beq.n	800e4d6 <kf_update+0x222>
 800e4c8:	eef5 5a40 	vcmp.f32	s11, #0.0
 800e4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d0:	bf18      	it	ne
 800e4d2:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800e4d6:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800e4da:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e2:	d006      	beq.n	800e4f2 <kf_update+0x23e>
 800e4e4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800e4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ec:	bf18      	it	ne
 800e4ee:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800e4f2:	4299      	cmp	r1, r3
 800e4f4:	ed42 7a01 	vstr	s15, [r2, #-4]
 800e4f8:	f47f af7b 	bne.w	800e3f2 <kf_update+0x13e>
 800e4fc:	eef5 da40 	vcmp.f32	s27, #0.0
 800e500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e504:	eddd ba17 	vldr	s23, [sp, #92]	; 0x5c
 800e508:	f040 8492 	bne.w	800ee30 <kf_update+0xb7c>
 800e50c:	eef0 7a6d 	vmov.f32	s15, s27
 800e510:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800e514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e518:	ed9d ca18 	vldr	s24, [sp, #96]	; 0x60
 800e51c:	d006      	beq.n	800e52c <kf_update+0x278>
 800e51e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800e522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e526:	bf18      	it	ne
 800e528:	eeec 7a0e 	vfmane.f32	s15, s24, s28
 800e52c:	eef5 ea40 	vcmp.f32	s29, #0.0
 800e530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e534:	ed9d aa19 	vldr	s20, [sp, #100]	; 0x64
 800e538:	d006      	beq.n	800e548 <kf_update+0x294>
 800e53a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800e53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e542:	bf18      	it	ne
 800e544:	eeea 7a2e 	vfmane.f32	s15, s20, s29
 800e548:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800e54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e550:	ed9d da1a 	vldr	s26, [sp, #104]	; 0x68
 800e554:	d006      	beq.n	800e564 <kf_update+0x2b0>
 800e556:	eeb5 da40 	vcmp.f32	s26, #0.0
 800e55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e55e:	bf18      	it	ne
 800e560:	eeed 7a0f 	vfmane.f32	s15, s26, s30
 800e564:	eef5 fa40 	vcmp.f32	s31, #0.0
 800e568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e56c:	eddd ca1b 	vldr	s25, [sp, #108]	; 0x6c
 800e570:	d006      	beq.n	800e580 <kf_update+0x2cc>
 800e572:	eef5 ca40 	vcmp.f32	s25, #0.0
 800e576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e57a:	bf18      	it	ne
 800e57c:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800e580:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e588:	ed9d ba1c 	vldr	s22, [sp, #112]	; 0x70
 800e58c:	d006      	beq.n	800e59c <kf_update+0x2e8>
 800e58e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800e592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e596:	bf18      	it	ne
 800e598:	eeeb 7a26 	vfmane.f32	s15, s22, s13
 800e59c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5a4:	eddd aa1d 	vldr	s21, [sp, #116]	; 0x74
 800e5a8:	d006      	beq.n	800e5b8 <kf_update+0x304>
 800e5aa:	eef5 aa40 	vcmp.f32	s21, #0.0
 800e5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b2:	bf18      	it	ne
 800e5b4:	eeea 7a86 	vfmane.f32	s15, s21, s12
 800e5b8:	eef5 5a40 	vcmp.f32	s11, #0.0
 800e5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5c0:	eddd 9a1e 	vldr	s19, [sp, #120]	; 0x78
 800e5c4:	d006      	beq.n	800e5d4 <kf_update+0x320>
 800e5c6:	eef5 9a40 	vcmp.f32	s19, #0.0
 800e5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ce:	bf18      	it	ne
 800e5d0:	eee9 7aa5 	vfmane.f32	s15, s19, s11
 800e5d4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800e5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5dc:	ed9d 9a1f 	vldr	s18, [sp, #124]	; 0x7c
 800e5e0:	d006      	beq.n	800e5f0 <kf_update+0x33c>
 800e5e2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ea:	bf18      	it	ne
 800e5ec:	eee9 7a05 	vfmane.f32	s15, s18, s10
 800e5f0:	9b02      	ldr	r3, [sp, #8]
 800e5f2:	ed93 7a00 	vldr	s14, [r3]
 800e5f6:	9b01      	ldr	r3, [sp, #4]
 800e5f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e5fc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800e600:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 800e604:	2b05      	cmp	r3, #5
 800e606:	ee6b ba87 	vmul.f32	s23, s23, s14
 800e60a:	ee2c ca07 	vmul.f32	s24, s24, s14
 800e60e:	ee2a aa07 	vmul.f32	s20, s20, s14
 800e612:	ee2d da07 	vmul.f32	s26, s26, s14
 800e616:	ee67 ca2c 	vmul.f32	s25, s14, s25
 800e61a:	ee27 ba0b 	vmul.f32	s22, s14, s22
 800e61e:	ee67 aa2a 	vmul.f32	s21, s14, s21
 800e622:	ee69 9a87 	vmul.f32	s19, s19, s14
 800e626:	ee29 9a07 	vmul.f32	s18, s18, s14
 800e62a:	edcd ba17 	vstr	s23, [sp, #92]	; 0x5c
 800e62e:	ed8d ca18 	vstr	s24, [sp, #96]	; 0x60
 800e632:	ed8d aa19 	vstr	s20, [sp, #100]	; 0x64
 800e636:	ed8d da1a 	vstr	s26, [sp, #104]	; 0x68
 800e63a:	edcd ca1b 	vstr	s25, [sp, #108]	; 0x6c
 800e63e:	ed8d ba1c 	vstr	s22, [sp, #112]	; 0x70
 800e642:	edcd aa1d 	vstr	s21, [sp, #116]	; 0x74
 800e646:	edcd 9a1e 	vstr	s19, [sp, #120]	; 0x78
 800e64a:	ed8d 9a1f 	vstr	s18, [sp, #124]	; 0x7c
 800e64e:	f340 83eb 	ble.w	800ee28 <kf_update+0xb74>
 800e652:	eef5 da40 	vcmp.f32	s27, #0.0
 800e656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e65a:	f000 8456 	beq.w	800ef0a <kf_update+0xc56>
 800e65e:	edd6 7a01 	vldr	s15, [r6, #4]
 800e662:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e66a:	f040 8477 	bne.w	800ef5c <kf_update+0xca8>
 800e66e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800e672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e676:	d008      	beq.n	800e68a <kf_update+0x3d6>
 800e678:	ed96 7a02 	vldr	s14, [r6, #8]
 800e67c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e684:	bf18      	it	ne
 800e686:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800e68a:	eef5 ea40 	vcmp.f32	s29, #0.0
 800e68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e692:	d008      	beq.n	800e6a6 <kf_update+0x3f2>
 800e694:	ed96 7a03 	vldr	s14, [r6, #12]
 800e698:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6a0:	bf18      	it	ne
 800e6a2:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800e6a6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800e6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ae:	d008      	beq.n	800e6c2 <kf_update+0x40e>
 800e6b0:	ed96 7a04 	vldr	s14, [r6, #16]
 800e6b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6bc:	bf18      	it	ne
 800e6be:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800e6c2:	eef5 fa40 	vcmp.f32	s31, #0.0
 800e6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ca:	d008      	beq.n	800e6de <kf_update+0x42a>
 800e6cc:	ed96 7a05 	vldr	s14, [r6, #20]
 800e6d0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6d8:	bf18      	it	ne
 800e6da:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800e6de:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6e6:	d008      	beq.n	800e6fa <kf_update+0x446>
 800e6e8:	ed96 7a06 	vldr	s14, [r6, #24]
 800e6ec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f4:	bf18      	it	ne
 800e6f6:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800e6fa:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e702:	d008      	beq.n	800e716 <kf_update+0x462>
 800e704:	ed96 7a07 	vldr	s14, [r6, #28]
 800e708:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e710:	bf18      	it	ne
 800e712:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800e716:	eef5 5a40 	vcmp.f32	s11, #0.0
 800e71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e71e:	d008      	beq.n	800e732 <kf_update+0x47e>
 800e720:	ed96 7a08 	vldr	s14, [r6, #32]
 800e724:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e72c:	bf18      	it	ne
 800e72e:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800e732:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800e736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73a:	d008      	beq.n	800e74e <kf_update+0x49a>
 800e73c:	ed96 7a09 	vldr	s14, [r6, #36]	; 0x24
 800e740:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e748:	bf18      	it	ne
 800e74a:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800e74e:	9b00      	ldr	r3, [sp, #0]
 800e750:	edd3 8a00 	vldr	s17, [r3]
 800e754:	ee78 8ae7 	vsub.f32	s17, s17, s15
 800e758:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800e75c:	2100      	movs	r1, #0
 800e75e:	a868      	add	r0, sp, #416	; 0x1a0
 800e760:	ed8d 5a09 	vstr	s10, [sp, #36]	; 0x24
 800e764:	edcd 5a08 	vstr	s11, [sp, #32]
 800e768:	ed8d 6a07 	vstr	s12, [sp, #28]
 800e76c:	edcd 6a06 	vstr	s13, [sp, #24]
 800e770:	f007 fcd6 	bl	8016120 <memset>
 800e774:	ab68      	add	r3, sp, #416	; 0x1a0
 800e776:	ed9d 5a09 	vldr	s10, [sp, #36]	; 0x24
 800e77a:	eddd 5a08 	vldr	s11, [sp, #32]
 800e77e:	ed9d 6a07 	vldr	s12, [sp, #28]
 800e782:	eddd 6a06 	vldr	s13, [sp, #24]
 800e786:	a971      	add	r1, sp, #452	; 0x1c4
 800e788:	461a      	mov	r2, r3
 800e78a:	ecf4 7a01 	vldmia	r4!, {s15}
 800e78e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e796:	d062      	beq.n	800e85e <kf_update+0x5aa>
 800e798:	eef5 da40 	vcmp.f32	s27, #0.0
 800e79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a0:	d005      	beq.n	800e7ae <kf_update+0x4fa>
 800e7a2:	ed92 7a00 	vldr	s14, [r2]
 800e7a6:	eea7 7aad 	vfma.f32	s14, s15, s27
 800e7aa:	ed82 7a00 	vstr	s14, [r2]
 800e7ae:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800e7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b6:	d005      	beq.n	800e7c4 <kf_update+0x510>
 800e7b8:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 800e7bc:	eea7 7a8e 	vfma.f32	s14, s15, s28
 800e7c0:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 800e7c4:	eef5 ea40 	vcmp.f32	s29, #0.0
 800e7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7cc:	d005      	beq.n	800e7da <kf_update+0x526>
 800e7ce:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 800e7d2:	eea7 7aae 	vfma.f32	s14, s15, s29
 800e7d6:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 800e7da:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800e7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7e2:	d005      	beq.n	800e7f0 <kf_update+0x53c>
 800e7e4:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 800e7e8:	eea7 7a8f 	vfma.f32	s14, s15, s30
 800e7ec:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 800e7f0:	eef5 fa40 	vcmp.f32	s31, #0.0
 800e7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7f8:	d005      	beq.n	800e806 <kf_update+0x552>
 800e7fa:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 800e7fe:	eea7 7aaf 	vfma.f32	s14, s15, s31
 800e802:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 800e806:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e80e:	d005      	beq.n	800e81c <kf_update+0x568>
 800e810:	ed92 7a2d 	vldr	s14, [r2, #180]	; 0xb4
 800e814:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e818:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 800e81c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e824:	d005      	beq.n	800e832 <kf_update+0x57e>
 800e826:	ed92 7a36 	vldr	s14, [r2, #216]	; 0xd8
 800e82a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800e82e:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 800e832:	eef5 5a40 	vcmp.f32	s11, #0.0
 800e836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e83a:	d005      	beq.n	800e848 <kf_update+0x594>
 800e83c:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 800e840:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e844:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 800e848:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800e84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e850:	d005      	beq.n	800e85e <kf_update+0x5aa>
 800e852:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 800e856:	eea7 7a85 	vfma.f32	s14, s15, s10
 800e85a:	ed82 7a48 	vstr	s14, [r2, #288]	; 0x120
 800e85e:	3204      	adds	r2, #4
 800e860:	4291      	cmp	r1, r2
 800e862:	d192      	bne.n	800e78a <kf_update+0x4d6>
 800e864:	afb9      	add	r7, sp, #740	; 0x2e4
 800e866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e86a:	a868      	add	r0, sp, #416	; 0x1a0
 800e86c:	463a      	mov	r2, r7
 800e86e:	f04f 0b02 	mov.w	fp, #2
 800e872:	f04f 0e03 	mov.w	lr, #3
 800e876:	f04f 0c04 	mov.w	ip, #4
 800e87a:	f04f 0a05 	mov.w	sl, #5
 800e87e:	f04f 0906 	mov.w	r9, #6
 800e882:	f04f 0807 	mov.w	r8, #7
 800e886:	2408      	movs	r4, #8
 800e888:	2100      	movs	r1, #0
 800e88a:	9306      	str	r3, [sp, #24]
 800e88c:	e07b      	b.n	800e986 <kf_update+0x6d2>
 800e88e:	edd0 7a00 	vldr	s15, [r0]
 800e892:	ed82 8a01 	vstr	s16, [r2, #4]
 800e896:	eef1 7a67 	vneg.f32	s15, s15
 800e89a:	2901      	cmp	r1, #1
 800e89c:	edc0 7a00 	vstr	s15, [r0]
 800e8a0:	f1a4 0507 	sub.w	r5, r4, #7
 800e8a4:	f000 8110 	beq.w	800eac8 <kf_update+0x814>
 800e8a8:	ab68      	add	r3, sp, #416	; 0x1a0
 800e8aa:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800e8ae:	edd5 7a00 	vldr	s15, [r5]
 800e8b2:	ed82 8a02 	vstr	s16, [r2, #8]
 800e8b6:	eef1 7a67 	vneg.f32	s15, s15
 800e8ba:	2902      	cmp	r1, #2
 800e8bc:	edc5 7a00 	vstr	s15, [r5]
 800e8c0:	f000 80ef 	beq.w	800eaa2 <kf_update+0x7ee>
 800e8c4:	ab68      	add	r3, sp, #416	; 0x1a0
 800e8c6:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 800e8ca:	edd5 7a00 	vldr	s15, [r5]
 800e8ce:	ed82 8a03 	vstr	s16, [r2, #12]
 800e8d2:	eef1 7a67 	vneg.f32	s15, s15
 800e8d6:	2903      	cmp	r1, #3
 800e8d8:	edc5 7a00 	vstr	s15, [r5]
 800e8dc:	d176      	bne.n	800e9cc <kf_update+0x718>
 800e8de:	edd0 7a03 	vldr	s15, [r0, #12]
 800e8e2:	ed82 8a04 	vstr	s16, [r2, #16]
 800e8e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8ea:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 800e8ee:	edc0 7a03 	vstr	s15, [r0, #12]
 800e8f2:	edd5 7a00 	vldr	s15, [r5]
 800e8f6:	ed82 8a05 	vstr	s16, [r2, #20]
 800e8fa:	eef1 7a67 	vneg.f32	s15, s15
 800e8fe:	edc5 7a00 	vstr	s15, [r5]
 800e902:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 800e906:	edd5 7a00 	vldr	s15, [r5]
 800e90a:	ed82 8a06 	vstr	s16, [r2, #24]
 800e90e:	eef1 7a67 	vneg.f32	s15, s15
 800e912:	edc5 7a00 	vstr	s15, [r5]
 800e916:	ab68      	add	r3, sp, #416	; 0x1a0
 800e918:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 800e91c:	edd5 7a00 	vldr	s15, [r5]
 800e920:	ed82 8a07 	vstr	s16, [r2, #28]
 800e924:	eef1 7a67 	vneg.f32	s15, s15
 800e928:	2907      	cmp	r1, #7
 800e92a:	edc5 7a00 	vstr	s15, [r5]
 800e92e:	f040 80a4 	bne.w	800ea7a <kf_update+0x7c6>
 800e932:	edd0 7a07 	vldr	s15, [r0, #28]
 800e936:	ed82 8a08 	vstr	s16, [r2, #32]
 800e93a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e93e:	edc0 7a07 	vstr	s15, [r0, #28]
 800e942:	ab68      	add	r3, sp, #416	; 0x1a0
 800e944:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 800e948:	edd5 7a00 	vldr	s15, [r5]
 800e94c:	00a5      	lsls	r5, r4, #2
 800e94e:	eef1 7a67 	vneg.f32	s15, s15
 800e952:	ab68      	add	r3, sp, #416	; 0x1a0
 800e954:	3101      	adds	r1, #1
 800e956:	441d      	add	r5, r3
 800e958:	2909      	cmp	r1, #9
 800e95a:	edc5 7a00 	vstr	s15, [r5]
 800e95e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800e962:	f104 0409 	add.w	r4, r4, #9
 800e966:	f100 0024 	add.w	r0, r0, #36	; 0x24
 800e96a:	f108 0809 	add.w	r8, r8, #9
 800e96e:	f109 0909 	add.w	r9, r9, #9
 800e972:	f10a 0a09 	add.w	sl, sl, #9
 800e976:	f10c 0c09 	add.w	ip, ip, #9
 800e97a:	f10e 0e09 	add.w	lr, lr, #9
 800e97e:	f10b 0b09 	add.w	fp, fp, #9
 800e982:	f000 80d2 	beq.w	800eb2a <kf_update+0x876>
 800e986:	ed82 8a00 	vstr	s16, [r2]
 800e98a:	2900      	cmp	r1, #0
 800e98c:	f47f af7f 	bne.w	800e88e <kf_update+0x5da>
 800e990:	eddd 7a68 	vldr	s15, [sp, #416]	; 0x1a0
 800e994:	ed82 8a01 	vstr	s16, [r2, #4]
 800e998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e99c:	ab68      	add	r3, sp, #416	; 0x1a0
 800e99e:	1fe5      	subs	r5, r4, #7
 800e9a0:	edc0 7a00 	vstr	s15, [r0]
 800e9a4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800e9a8:	edd5 7a00 	vldr	s15, [r5]
 800e9ac:	ed82 8a02 	vstr	s16, [r2, #8]
 800e9b0:	eef1 7a67 	vneg.f32	s15, s15
 800e9b4:	edc5 7a00 	vstr	s15, [r5]
 800e9b8:	ed82 8a03 	vstr	s16, [r2, #12]
 800e9bc:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 800e9c0:	edd5 7a00 	vldr	s15, [r5]
 800e9c4:	eef1 7a67 	vneg.f32	s15, s15
 800e9c8:	edc5 7a00 	vstr	s15, [r5]
 800e9cc:	ab68      	add	r3, sp, #416	; 0x1a0
 800e9ce:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 800e9d2:	edd5 7a00 	vldr	s15, [r5]
 800e9d6:	ed82 8a04 	vstr	s16, [r2, #16]
 800e9da:	eef1 7a67 	vneg.f32	s15, s15
 800e9de:	2904      	cmp	r1, #4
 800e9e0:	edc5 7a00 	vstr	s15, [r5]
 800e9e4:	d02d      	beq.n	800ea42 <kf_update+0x78e>
 800e9e6:	ab68      	add	r3, sp, #416	; 0x1a0
 800e9e8:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 800e9ec:	edd5 7a00 	vldr	s15, [r5]
 800e9f0:	ed82 8a05 	vstr	s16, [r2, #20]
 800e9f4:	eef1 7a67 	vneg.f32	s15, s15
 800e9f8:	2905      	cmp	r1, #5
 800e9fa:	edc5 7a00 	vstr	s15, [r5]
 800e9fe:	d077      	beq.n	800eaf0 <kf_update+0x83c>
 800ea00:	ab68      	add	r3, sp, #416	; 0x1a0
 800ea02:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 800ea06:	edd5 7a00 	vldr	s15, [r5]
 800ea0a:	ed82 8a06 	vstr	s16, [r2, #24]
 800ea0e:	eef1 7a67 	vneg.f32	s15, s15
 800ea12:	2906      	cmp	r1, #6
 800ea14:	edc5 7a00 	vstr	s15, [r5]
 800ea18:	f47f af7d 	bne.w	800e916 <kf_update+0x662>
 800ea1c:	edd0 7a06 	vldr	s15, [r0, #24]
 800ea20:	ed82 8a07 	vstr	s16, [r2, #28]
 800ea24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea28:	ed82 8a08 	vstr	s16, [r2, #32]
 800ea2c:	edc0 7a06 	vstr	s15, [r0, #24]
 800ea30:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 800ea34:	edd5 7a00 	vldr	s15, [r5]
 800ea38:	eef1 7a67 	vneg.f32	s15, s15
 800ea3c:	edc5 7a00 	vstr	s15, [r5]
 800ea40:	e77f      	b.n	800e942 <kf_update+0x68e>
 800ea42:	edd0 7a04 	vldr	s15, [r0, #16]
 800ea46:	ed82 8a05 	vstr	s16, [r2, #20]
 800ea4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea4e:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 800ea52:	edc0 7a04 	vstr	s15, [r0, #16]
 800ea56:	edd5 7a00 	vldr	s15, [r5]
 800ea5a:	ed82 8a06 	vstr	s16, [r2, #24]
 800ea5e:	eef1 7a67 	vneg.f32	s15, s15
 800ea62:	edc5 7a00 	vstr	s15, [r5]
 800ea66:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 800ea6a:	edd5 7a00 	vldr	s15, [r5]
 800ea6e:	ed82 8a07 	vstr	s16, [r2, #28]
 800ea72:	eef1 7a67 	vneg.f32	s15, s15
 800ea76:	edc5 7a00 	vstr	s15, [r5]
 800ea7a:	ab68      	add	r3, sp, #416	; 0x1a0
 800ea7c:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 800ea80:	edd5 7a00 	vldr	s15, [r5]
 800ea84:	ed82 8a08 	vstr	s16, [r2, #32]
 800ea88:	eef1 7a67 	vneg.f32	s15, s15
 800ea8c:	2908      	cmp	r1, #8
 800ea8e:	edc5 7a00 	vstr	s15, [r5]
 800ea92:	f47f af56 	bne.w	800e942 <kf_update+0x68e>
 800ea96:	edd0 7a08 	vldr	s15, [r0, #32]
 800ea9a:	00a5      	lsls	r5, r4, #2
 800ea9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eaa0:	e757      	b.n	800e952 <kf_update+0x69e>
 800eaa2:	edd0 7a02 	vldr	s15, [r0, #8]
 800eaa6:	ed82 8a03 	vstr	s16, [r2, #12]
 800eaaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eaae:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 800eab2:	edc0 7a02 	vstr	s15, [r0, #8]
 800eab6:	edd5 7a00 	vldr	s15, [r5]
 800eaba:	ed82 8a04 	vstr	s16, [r2, #16]
 800eabe:	eef1 7a67 	vneg.f32	s15, s15
 800eac2:	edc5 7a00 	vstr	s15, [r5]
 800eac6:	e78e      	b.n	800e9e6 <kf_update+0x732>
 800eac8:	edd0 7a01 	vldr	s15, [r0, #4]
 800eacc:	ed82 8a02 	vstr	s16, [r2, #8]
 800ead0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ead4:	ab68      	add	r3, sp, #416	; 0x1a0
 800ead6:	ed82 8a03 	vstr	s16, [r2, #12]
 800eada:	edc0 7a01 	vstr	s15, [r0, #4]
 800eade:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 800eae2:	edd5 7a00 	vldr	s15, [r5]
 800eae6:	eef1 7a67 	vneg.f32	s15, s15
 800eaea:	edc5 7a00 	vstr	s15, [r5]
 800eaee:	e76d      	b.n	800e9cc <kf_update+0x718>
 800eaf0:	edd0 7a05 	vldr	s15, [r0, #20]
 800eaf4:	ed82 8a06 	vstr	s16, [r2, #24]
 800eaf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eafc:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 800eb00:	edc0 7a05 	vstr	s15, [r0, #20]
 800eb04:	edd5 7a00 	vldr	s15, [r5]
 800eb08:	ed82 8a07 	vstr	s16, [r2, #28]
 800eb0c:	eef1 7a67 	vneg.f32	s15, s15
 800eb10:	edc5 7a00 	vstr	s15, [r5]
 800eb14:	ed82 8a08 	vstr	s16, [r2, #32]
 800eb18:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 800eb1c:	edd5 7a00 	vldr	s15, [r5]
 800eb20:	eef1 7a67 	vneg.f32	s15, s15
 800eb24:	edc5 7a00 	vstr	s15, [r5]
 800eb28:	e70b      	b.n	800e942 <kf_update+0x68e>
 800eb2a:	9b06      	ldr	r3, [sp, #24]
 800eb2c:	2400      	movs	r4, #0
 800eb2e:	f506 70a2 	add.w	r0, r6, #324	; 0x144
 800eb32:	ecf3 3a01 	vldmia	r3!, {s7}
 800eb36:	ed93 4a08 	vldr	s8, [r3, #32]
 800eb3a:	edd3 4a11 	vldr	s9, [r3, #68]	; 0x44
 800eb3e:	ed93 5a1a 	vldr	s10, [r3, #104]	; 0x68
 800eb42:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 800eb46:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 800eb4a:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 800eb4e:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800eb52:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 800eb56:	4632      	mov	r2, r6
 800eb58:	4639      	mov	r1, r7
 800eb5a:	eef5 3a40 	vcmp.f32	s7, #0.0
 800eb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb62:	d00c      	beq.n	800eb7e <kf_update+0x8ca>
 800eb64:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
 800eb68:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800eb6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb70:	d005      	beq.n	800eb7e <kf_update+0x8ca>
 800eb72:	edd1 2a00 	vldr	s5, [r1]
 800eb76:	eee3 2a83 	vfma.f32	s5, s7, s6
 800eb7a:	edc1 2a00 	vstr	s5, [r1]
 800eb7e:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800eb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb86:	d00c      	beq.n	800eba2 <kf_update+0x8ee>
 800eb88:	ed92 3a0b 	vldr	s6, [r2, #44]	; 0x2c
 800eb8c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800eb90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb94:	d005      	beq.n	800eba2 <kf_update+0x8ee>
 800eb96:	edd1 2a00 	vldr	s5, [r1]
 800eb9a:	eee4 2a03 	vfma.f32	s5, s8, s6
 800eb9e:	edc1 2a00 	vstr	s5, [r1]
 800eba2:	eef5 4a40 	vcmp.f32	s9, #0.0
 800eba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebaa:	d00c      	beq.n	800ebc6 <kf_update+0x912>
 800ebac:	ed92 3a0c 	vldr	s6, [r2, #48]	; 0x30
 800ebb0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800ebb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb8:	d005      	beq.n	800ebc6 <kf_update+0x912>
 800ebba:	edd1 2a00 	vldr	s5, [r1]
 800ebbe:	eee4 2a83 	vfma.f32	s5, s9, s6
 800ebc2:	edc1 2a00 	vstr	s5, [r1]
 800ebc6:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ebca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebce:	d00c      	beq.n	800ebea <kf_update+0x936>
 800ebd0:	ed92 3a0d 	vldr	s6, [r2, #52]	; 0x34
 800ebd4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800ebd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebdc:	d005      	beq.n	800ebea <kf_update+0x936>
 800ebde:	edd1 2a00 	vldr	s5, [r1]
 800ebe2:	eee5 2a03 	vfma.f32	s5, s10, s6
 800ebe6:	edc1 2a00 	vstr	s5, [r1]
 800ebea:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ebee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf2:	d00c      	beq.n	800ec0e <kf_update+0x95a>
 800ebf4:	ed92 3a0e 	vldr	s6, [r2, #56]	; 0x38
 800ebf8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800ebfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec00:	d005      	beq.n	800ec0e <kf_update+0x95a>
 800ec02:	edd1 2a00 	vldr	s5, [r1]
 800ec06:	eee5 2a83 	vfma.f32	s5, s11, s6
 800ec0a:	edc1 2a00 	vstr	s5, [r1]
 800ec0e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ec12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec16:	d00c      	beq.n	800ec32 <kf_update+0x97e>
 800ec18:	ed92 3a0f 	vldr	s6, [r2, #60]	; 0x3c
 800ec1c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800ec20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec24:	d005      	beq.n	800ec32 <kf_update+0x97e>
 800ec26:	edd1 2a00 	vldr	s5, [r1]
 800ec2a:	eee6 2a03 	vfma.f32	s5, s12, s6
 800ec2e:	edc1 2a00 	vstr	s5, [r1]
 800ec32:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ec36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec3a:	d00c      	beq.n	800ec56 <kf_update+0x9a2>
 800ec3c:	ed92 3a10 	vldr	s6, [r2, #64]	; 0x40
 800ec40:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800ec44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec48:	d005      	beq.n	800ec56 <kf_update+0x9a2>
 800ec4a:	edd1 2a00 	vldr	s5, [r1]
 800ec4e:	eee6 2a83 	vfma.f32	s5, s13, s6
 800ec52:	edc1 2a00 	vstr	s5, [r1]
 800ec56:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ec5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5e:	d00c      	beq.n	800ec7a <kf_update+0x9c6>
 800ec60:	ed92 3a11 	vldr	s6, [r2, #68]	; 0x44
 800ec64:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800ec68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec6c:	d005      	beq.n	800ec7a <kf_update+0x9c6>
 800ec6e:	edd1 2a00 	vldr	s5, [r1]
 800ec72:	eee7 2a03 	vfma.f32	s5, s14, s6
 800ec76:	edc1 2a00 	vstr	s5, [r1]
 800ec7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ec7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec82:	d00c      	beq.n	800ec9e <kf_update+0x9ea>
 800ec84:	ed92 3a12 	vldr	s6, [r2, #72]	; 0x48
 800ec88:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800ec8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec90:	d005      	beq.n	800ec9e <kf_update+0x9ea>
 800ec92:	edd1 2a00 	vldr	s5, [r1]
 800ec96:	eee7 2a83 	vfma.f32	s5, s15, s6
 800ec9a:	edc1 2a00 	vstr	s5, [r1]
 800ec9e:	3224      	adds	r2, #36	; 0x24
 800eca0:	4282      	cmp	r2, r0
 800eca2:	f101 0124 	add.w	r1, r1, #36	; 0x24
 800eca6:	f47f af58 	bne.w	800eb5a <kf_update+0x8a6>
 800ecaa:	3401      	adds	r4, #1
 800ecac:	2c09      	cmp	r4, #9
 800ecae:	f107 0704 	add.w	r7, r7, #4
 800ecb2:	f47f af3e 	bne.w	800eb32 <kf_update+0x87e>
 800ecb6:	9805      	ldr	r0, [sp, #20]
 800ecb8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ecbc:	a9b9      	add	r1, sp, #740	; 0x2e4
 800ecbe:	f007 fa67 	bl	8016190 <memcpy>
 800ecc2:	eef5 ba40 	vcmp.f32	s23, #0.0
 800ecc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecca:	d05f      	beq.n	800ed8c <kf_update+0xad8>
 800eccc:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ecd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd4:	d05a      	beq.n	800ed8c <kf_update+0xad8>
 800ecd6:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800ecda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecde:	ee68 baab 	vmul.f32	s23, s17, s23
 800ece2:	f000 812c 	beq.w	800ef3e <kf_update+0xc8a>
 800ece6:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800ecea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecee:	ee2c ca28 	vmul.f32	s24, s24, s17
 800ecf2:	f000 8121 	beq.w	800ef38 <kf_update+0xc84>
 800ecf6:	eeb5 da40 	vcmp.f32	s26, #0.0
 800ecfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecfe:	ee68 7a8a 	vmul.f32	s15, s17, s20
 800ed02:	f000 8114 	beq.w	800ef2e <kf_update+0xc7a>
 800ed06:	eef5 ca40 	vcmp.f32	s25, #0.0
 800ed0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0e:	ee28 7a8d 	vmul.f32	s14, s17, s26
 800ed12:	eeb0 aa4c 	vmov.f32	s20, s24
 800ed16:	f040 812f 	bne.w	800ef78 <kf_update+0xcc4>
 800ed1a:	eef0 ca47 	vmov.f32	s25, s14
 800ed1e:	eeb0 da67 	vmov.f32	s26, s15
 800ed22:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800ed26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed2a:	d065      	beq.n	800edf8 <kf_update+0xb44>
 800ed2c:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ed30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed34:	f000 80f0 	beq.w	800ef18 <kf_update+0xc64>
 800ed38:	eef0 7a48 	vmov.f32	s15, s16
 800ed3c:	eef5 aa40 	vcmp.f32	s21, #0.0
 800ed40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed44:	ee28 7a8b 	vmul.f32	s14, s17, s22
 800ed48:	d17d      	bne.n	800ee46 <kf_update+0xb92>
 800ed4a:	eef0 aa47 	vmov.f32	s21, s14
 800ed4e:	eeb0 ba67 	vmov.f32	s22, s15
 800ed52:	eef5 9a40 	vcmp.f32	s19, #0.0
 800ed56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed5a:	f000 8082 	beq.w	800ee62 <kf_update+0xbae>
 800ed5e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ed62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed66:	f000 80da 	beq.w	800ef1e <kf_update+0xc6a>
 800ed6a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ed6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed72:	ee28 7aa9 	vmul.f32	s14, s17, s19
 800ed76:	eef0 7a48 	vmov.f32	s15, s16
 800ed7a:	f040 812a 	bne.w	800efd2 <kf_update+0xd1e>
 800ed7e:	eef0 8a49 	vmov.f32	s17, s18
 800ed82:	eef0 9a67 	vmov.f32	s19, s15
 800ed86:	eeb0 9a47 	vmov.f32	s18, s14
 800ed8a:	e086      	b.n	800ee9a <kf_update+0xbe6>
 800ed8c:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800ed90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed94:	d005      	beq.n	800eda2 <kf_update+0xaee>
 800ed96:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ed9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed9e:	f040 80f9 	bne.w	800ef94 <kf_update+0xce0>
 800eda2:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800eda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edaa:	d071      	beq.n	800ee90 <kf_update+0xbdc>
 800edac:	eef5 8a40 	vcmp.f32	s17, #0.0
 800edb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb4:	f040 8116 	bne.w	800efe4 <kf_update+0xd30>
 800edb8:	eeb0 aa68 	vmov.f32	s20, s17
 800edbc:	eef0 ba68 	vmov.f32	s23, s17
 800edc0:	eeb5 da40 	vcmp.f32	s26, #0.0
 800edc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edc8:	d007      	beq.n	800edda <kf_update+0xb26>
 800edca:	eef5 8a40 	vcmp.f32	s17, #0.0
 800edce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edd2:	f040 80c7 	bne.w	800ef64 <kf_update+0xcb0>
 800edd6:	eeb0 da68 	vmov.f32	s26, s17
 800edda:	eef5 ca40 	vcmp.f32	s25, #0.0
 800edde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede2:	d09e      	beq.n	800ed22 <kf_update+0xa6e>
 800ede4:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ede8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edec:	f040 80f7 	bne.w	800efde <kf_update+0xd2a>
 800edf0:	eeb0 ba68 	vmov.f32	s22, s17
 800edf4:	eef0 ca68 	vmov.f32	s25, s17
 800edf8:	eef5 aa40 	vcmp.f32	s21, #0.0
 800edfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee00:	d0a7      	beq.n	800ed52 <kf_update+0xa9e>
 800ee02:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ee06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee0a:	f040 80ce 	bne.w	800efaa <kf_update+0xcf6>
 800ee0e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800ee12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee16:	f000 8087 	beq.w	800ef28 <kf_update+0xc74>
 800ee1a:	eeb0 9a68 	vmov.f32	s18, s17
 800ee1e:	eef0 9a68 	vmov.f32	s19, s17
 800ee22:	eef0 aa68 	vmov.f32	s21, s17
 800ee26:	e038      	b.n	800ee9a <kf_update+0xbe6>
 800ee28:	9b00      	ldr	r3, [sp, #0]
 800ee2a:	edd3 8a00 	vldr	s17, [r3]
 800ee2e:	e493      	b.n	800e758 <kf_update+0x4a4>
 800ee30:	eef5 ba40 	vcmp.f32	s23, #0.0
 800ee34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee38:	bf14      	ite	ne
 800ee3a:	ee6b 7aad 	vmulne.f32	s15, s23, s27
 800ee3e:	eef0 7a6b 	vmoveq.f32	s15, s23
 800ee42:	f7ff bb65 	b.w	800e510 <kf_update+0x25c>
 800ee46:	eef5 9a40 	vcmp.f32	s19, #0.0
 800ee4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee4e:	eeb0 ba67 	vmov.f32	s22, s15
 800ee52:	ee68 7aaa 	vmul.f32	s15, s17, s21
 800ee56:	f040 80b2 	bne.w	800efbe <kf_update+0xd0a>
 800ee5a:	eef0 9a67 	vmov.f32	s19, s15
 800ee5e:	eef0 aa47 	vmov.f32	s21, s14
 800ee62:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ee66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6a:	d014      	beq.n	800ee96 <kf_update+0xbe2>
 800ee6c:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ee70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee74:	d04d      	beq.n	800ef12 <kf_update+0xc5e>
 800ee76:	eeb0 7a48 	vmov.f32	s14, s16
 800ee7a:	ee68 8a89 	vmul.f32	s17, s17, s18
 800ee7e:	eeb0 9a47 	vmov.f32	s18, s14
 800ee82:	e00a      	b.n	800ee9a <kf_update+0xbe6>
 800ee84:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
 800ee88:	ecbd 8b10 	vpop	{d8-d15}
 800ee8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee90:	eef0 ba4a 	vmov.f32	s23, s20
 800ee94:	e794      	b.n	800edc0 <kf_update+0xb0c>
 800ee96:	eef0 8a49 	vmov.f32	s17, s18
 800ee9a:	edd6 3a01 	vldr	s7, [r6, #4]
 800ee9e:	ed96 4a02 	vldr	s8, [r6, #8]
 800eea2:	edd6 4a03 	vldr	s9, [r6, #12]
 800eea6:	ed96 5a04 	vldr	s10, [r6, #16]
 800eeaa:	edd6 5a05 	vldr	s11, [r6, #20]
 800eeae:	ed96 6a06 	vldr	s12, [r6, #24]
 800eeb2:	edd6 6a07 	vldr	s13, [r6, #28]
 800eeb6:	ed96 7a08 	vldr	s14, [r6, #32]
 800eeba:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
 800eebe:	ee73 baab 	vadd.f32	s23, s7, s23
 800eec2:	ee34 aa0a 	vadd.f32	s20, s8, s20
 800eec6:	ee34 da8d 	vadd.f32	s26, s9, s26
 800eeca:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800eece:	ee35 ba8b 	vadd.f32	s22, s11, s22
 800eed2:	ee76 aa2a 	vadd.f32	s21, s12, s21
 800eed6:	ee76 9aa9 	vadd.f32	s19, s13, s19
 800eeda:	ee37 9a09 	vadd.f32	s18, s14, s18
 800eede:	ee77 8aa8 	vadd.f32	s17, s15, s17
 800eee2:	edc6 ba01 	vstr	s23, [r6, #4]
 800eee6:	ed86 aa02 	vstr	s20, [r6, #8]
 800eeea:	ed86 da03 	vstr	s26, [r6, #12]
 800eeee:	edc6 ca04 	vstr	s25, [r6, #16]
 800eef2:	ed86 ba05 	vstr	s22, [r6, #20]
 800eef6:	edc6 aa06 	vstr	s21, [r6, #24]
 800eefa:	edc6 9a07 	vstr	s19, [r6, #28]
 800eefe:	ed86 9a08 	vstr	s18, [r6, #32]
 800ef02:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
 800ef06:	f7ff ba33 	b.w	800e370 <kf_update+0xbc>
 800ef0a:	eef0 7a6d 	vmov.f32	s15, s27
 800ef0e:	f7ff bbae 	b.w	800e66e <kf_update+0x3ba>
 800ef12:	eeb0 9a68 	vmov.f32	s18, s17
 800ef16:	e7c0      	b.n	800ee9a <kf_update+0xbe6>
 800ef18:	eeb0 ba68 	vmov.f32	s22, s17
 800ef1c:	e76c      	b.n	800edf8 <kf_update+0xb44>
 800ef1e:	eeb0 9a68 	vmov.f32	s18, s17
 800ef22:	eef0 9a68 	vmov.f32	s19, s17
 800ef26:	e7b8      	b.n	800ee9a <kf_update+0xbe6>
 800ef28:	eef0 aa69 	vmov.f32	s21, s19
 800ef2c:	e799      	b.n	800ee62 <kf_update+0xbae>
 800ef2e:	eeb0 da67 	vmov.f32	s26, s15
 800ef32:	eeb0 aa4c 	vmov.f32	s20, s24
 800ef36:	e750      	b.n	800edda <kf_update+0xb26>
 800ef38:	eeb0 aa4c 	vmov.f32	s20, s24
 800ef3c:	e740      	b.n	800edc0 <kf_update+0xb0c>
 800ef3e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800ef42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef46:	f43f af3b 	beq.w	800edc0 <kf_update+0xb0c>
 800ef4a:	eeb5 da40 	vcmp.f32	s26, #0.0
 800ef4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef52:	ee68 7a8a 	vmul.f32	s15, s17, s20
 800ef56:	f47f aed6 	bne.w	800ed06 <kf_update+0xa52>
 800ef5a:	e7e8      	b.n	800ef2e <kf_update+0xc7a>
 800ef5c:	ee67 7aad 	vmul.f32	s15, s15, s27
 800ef60:	f7ff bb85 	b.w	800e66e <kf_update+0x3ba>
 800ef64:	eef5 ca40 	vcmp.f32	s25, #0.0
 800ef68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef6c:	ee28 7a8d 	vmul.f32	s14, s17, s26
 800ef70:	eef0 7a48 	vmov.f32	s15, s16
 800ef74:	f43f aed1 	beq.w	800ed1a <kf_update+0xa66>
 800ef78:	eeb0 da67 	vmov.f32	s26, s15
 800ef7c:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800ef80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef84:	ee68 7aac 	vmul.f32	s15, s17, s25
 800ef88:	d126      	bne.n	800efd8 <kf_update+0xd24>
 800ef8a:	eeb0 ba67 	vmov.f32	s22, s15
 800ef8e:	eef0 ca47 	vmov.f32	s25, s14
 800ef92:	e731      	b.n	800edf8 <kf_update+0xb44>
 800ef94:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800ef98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef9c:	ee2c ca28 	vmul.f32	s24, s24, s17
 800efa0:	eef0 ba48 	vmov.f32	s23, s16
 800efa4:	f47f aea7 	bne.w	800ecf6 <kf_update+0xa42>
 800efa8:	e7c6      	b.n	800ef38 <kf_update+0xc84>
 800efaa:	eef5 9a40 	vcmp.f32	s19, #0.0
 800efae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb2:	ee68 7aaa 	vmul.f32	s15, s17, s21
 800efb6:	eeb0 7a48 	vmov.f32	s14, s16
 800efba:	f43f af4e 	beq.w	800ee5a <kf_update+0xba6>
 800efbe:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800efc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc6:	eef0 aa47 	vmov.f32	s21, s14
 800efca:	ee28 7aa9 	vmul.f32	s14, s17, s19
 800efce:	f43f aed6 	beq.w	800ed7e <kf_update+0xaca>
 800efd2:	eef0 9a67 	vmov.f32	s19, s15
 800efd6:	e750      	b.n	800ee7a <kf_update+0xbc6>
 800efd8:	eef0 ca47 	vmov.f32	s25, s14
 800efdc:	e6ae      	b.n	800ed3c <kf_update+0xa88>
 800efde:	eeb0 7a48 	vmov.f32	s14, s16
 800efe2:	e7cb      	b.n	800ef7c <kf_update+0xcc8>
 800efe4:	ed9f ca06 	vldr	s24, [pc, #24]	; 800f000 <kf_update+0xd4c>
 800efe8:	eeb5 da40 	vcmp.f32	s26, #0.0
 800efec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff0:	ee68 7a8a 	vmul.f32	s15, s17, s20
 800eff4:	eef0 ba4c 	vmov.f32	s23, s24
 800eff8:	f47f ae85 	bne.w	800ed06 <kf_update+0xa52>
 800effc:	e797      	b.n	800ef2e <kf_update+0xc7a>
 800effe:	bf00      	nop
 800f000:	00000000 	.word	0x00000000

0800f004 <q2hpr>:
 800f004:	b510      	push	{r4, lr}
 800f006:	ed90 7a00 	vldr	s14, [r0]
 800f00a:	edd0 6a01 	vldr	s13, [r0, #4]
 800f00e:	edd0 7a02 	vldr	s15, [r0, #8]
 800f012:	edd0 4a03 	vldr	s9, [r0, #12]
 800f016:	ed2d 8b0a 	vpush	{d8-d12}
 800f01a:	ee27 0a26 	vmul.f32	s0, s14, s13
 800f01e:	ee27 5a27 	vmul.f32	s10, s14, s15
 800f022:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800f026:	ee67 0a07 	vmul.f32	s1, s14, s14
 800f02a:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800f02e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f032:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f036:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800f03a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800f03e:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800f042:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800f046:	ee36 ba06 	vadd.f32	s22, s12, s12
 800f04a:	ee70 aa00 	vadd.f32	s21, s0, s0
 800f04e:	ee35 ca05 	vadd.f32	s24, s10, s10
 800f052:	ee77 8a07 	vadd.f32	s17, s14, s14
 800f056:	ee75 baa5 	vadd.f32	s23, s11, s11
 800f05a:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800f05e:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800f062:	460c      	mov	r4, r1
 800f064:	bb8a      	cbnz	r2, 800f0ca <q2hpr+0xc6>
 800f066:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800f06a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800f06e:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800f072:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800f076:	f009 fe53 	bl	8018d20 <atan2f>
 800f07a:	eeb0 8a40 	vmov.f32	s16, s0
 800f07e:	ed84 8a00 	vstr	s16, [r4]
 800f082:	ee38 0aab 	vadd.f32	s0, s17, s23
 800f086:	f009 fe1f 	bl	8018cc8 <asinf>
 800f08a:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800f08e:	eef0 8a40 	vmov.f32	s17, s0
 800f092:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800f096:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800f09a:	f009 fe41 	bl	8018d20 <atan2f>
 800f09e:	eef1 8a68 	vneg.f32	s17, s17
 800f0a2:	eeb0 9a40 	vmov.f32	s18, s0
 800f0a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ae:	ed84 9a02 	vstr	s18, [r4, #8]
 800f0b2:	edc4 8a01 	vstr	s17, [r4, #4]
 800f0b6:	d505      	bpl.n	800f0c4 <q2hpr+0xc0>
 800f0b8:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800f110 <q2hpr+0x10c>
 800f0bc:	ee38 8a00 	vadd.f32	s16, s16, s0
 800f0c0:	ed84 8a00 	vstr	s16, [r4]
 800f0c4:	ecbd 8b0a 	vpop	{d8-d12}
 800f0c8:	bd10      	pop	{r4, pc}
 800f0ca:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800f0ce:	f009 fdfb 	bl	8018cc8 <asinf>
 800f0d2:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800f0d6:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800f0da:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800f0de:	eeb0 9a40 	vmov.f32	s18, s0
 800f0e2:	ee38 0aab 	vadd.f32	s0, s17, s23
 800f0e6:	f009 fe1b 	bl	8018d20 <atan2f>
 800f0ea:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800f0ee:	eef0 8a40 	vmov.f32	s17, s0
 800f0f2:	ee3a 0a88 	vadd.f32	s0, s21, s16
 800f0f6:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800f0fa:	eeb1 0a40 	vneg.f32	s0, s0
 800f0fe:	f009 fe0f 	bl	8018d20 <atan2f>
 800f102:	eef1 8a68 	vneg.f32	s17, s17
 800f106:	eeb0 8a40 	vmov.f32	s16, s0
 800f10a:	ed84 0a00 	vstr	s0, [r4]
 800f10e:	e7ca      	b.n	800f0a6 <q2hpr+0xa2>
 800f110:	40c90fdb 	.word	0x40c90fdb

0800f114 <output_update>:
 800f114:	edd0 7a01 	vldr	s15, [r0, #4]
 800f118:	edd0 5a00 	vldr	s11, [r0]
 800f11c:	edd0 6a02 	vldr	s13, [r0, #8]
 800f120:	ed90 5a03 	vldr	s10, [r0, #12]
 800f124:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12c:	ee27 7aa6 	vmul.f32	s14, s15, s13
 800f130:	eea5 6aa5 	vfma.f32	s12, s11, s11
 800f134:	4615      	mov	r5, r2
 800f136:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800f13a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f13e:	eea5 7a85 	vfma.f32	s14, s11, s10
 800f142:	460f      	mov	r7, r1
 800f144:	461e      	mov	r6, r3
 800f146:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800f14a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f14e:	ee36 6a06 	vadd.f32	s12, s12, s12
 800f152:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f156:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f15a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f15e:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f162:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800f166:	2a00      	cmp	r2, #0
 800f168:	d145      	bne.n	800f1f6 <output_update+0xe2>
 800f16a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f16e:	eeb1 7a47 	vneg.f32	s14, s14
 800f172:	ed83 7a00 	vstr	s14, [r3]
 800f176:	edc3 7a01 	vstr	s15, [r3, #4]
 800f17a:	ed83 5a02 	vstr	s10, [r3, #8]
 800f17e:	4629      	mov	r1, r5
 800f180:	4604      	mov	r4, r0
 800f182:	f7ff ff3f 	bl	800f004 <q2hpr>
 800f186:	ed95 7a01 	vldr	s14, [r5, #4]
 800f18a:	edd5 7a02 	vldr	s15, [r5, #8]
 800f18e:	edd5 6a00 	vldr	s13, [r5]
 800f192:	ed9f 6a43 	vldr	s12, [pc, #268]	; 800f2a0 <output_update+0x18c>
 800f196:	ee27 7a46 	vnmul.f32	s14, s14, s12
 800f19a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800f19e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f1a2:	ed85 7a01 	vstr	s14, [r5, #4]
 800f1a6:	edc5 6a00 	vstr	s13, [r5]
 800f1aa:	edc5 7a02 	vstr	s15, [r5, #8]
 800f1ae:	ed97 7a01 	vldr	s14, [r7, #4]
 800f1b2:	edd6 7a00 	vldr	s15, [r6]
 800f1b6:	6823      	ldr	r3, [r4, #0]
 800f1b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f1bc:	edc8 7a00 	vstr	s15, [r8]
 800f1c0:	ed97 7a00 	vldr	s14, [r7]
 800f1c4:	edd6 7a01 	vldr	s15, [r6, #4]
 800f1c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f1cc:	edc8 7a01 	vstr	s15, [r8, #4]
 800f1d0:	edd6 7a02 	vldr	s15, [r6, #8]
 800f1d4:	ed97 7a02 	vldr	s14, [r7, #8]
 800f1d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f1dc:	edc8 7a02 	vstr	s15, [r8, #8]
 800f1e0:	edd4 7a02 	vldr	s15, [r4, #8]
 800f1e4:	6862      	ldr	r2, [r4, #4]
 800f1e6:	6022      	str	r2, [r4, #0]
 800f1e8:	eef1 7a67 	vneg.f32	s15, s15
 800f1ec:	6063      	str	r3, [r4, #4]
 800f1ee:	edc4 7a02 	vstr	s15, [r4, #8]
 800f1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1f6:	2a01      	cmp	r2, #1
 800f1f8:	d015      	beq.n	800f226 <output_update+0x112>
 800f1fa:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800f2a0 <output_update+0x18c>
 800f1fe:	edd5 6a00 	vldr	s13, [r5]
 800f202:	ed95 7a01 	vldr	s14, [r5, #4]
 800f206:	edd5 7a02 	vldr	s15, [r5, #8]
 800f20a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f20e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f212:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f216:	edc5 6a00 	vstr	s13, [r5]
 800f21a:	ed85 7a01 	vstr	s14, [r5, #4]
 800f21e:	edc5 7a02 	vstr	s15, [r5, #8]
 800f222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f226:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f22a:	ee36 6a65 	vsub.f32	s12, s12, s11
 800f22e:	eeb1 7a47 	vneg.f32	s14, s14
 800f232:	edc3 7a00 	vstr	s15, [r3]
 800f236:	ed83 7a01 	vstr	s14, [r3, #4]
 800f23a:	ed83 6a02 	vstr	s12, [r3, #8]
 800f23e:	4629      	mov	r1, r5
 800f240:	f7ff fee0 	bl	800f004 <q2hpr>
 800f244:	edd5 6a00 	vldr	s13, [r5]
 800f248:	ed95 7a01 	vldr	s14, [r5, #4]
 800f24c:	edd5 7a02 	vldr	s15, [r5, #8]
 800f250:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800f2a0 <output_update+0x18c>
 800f254:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f258:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f25c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f260:	ed85 7a01 	vstr	s14, [r5, #4]
 800f264:	edc5 6a00 	vstr	s13, [r5]
 800f268:	edc5 7a02 	vstr	s15, [r5, #8]
 800f26c:	ed97 7a00 	vldr	s14, [r7]
 800f270:	edd6 7a00 	vldr	s15, [r6]
 800f274:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f278:	edc8 7a00 	vstr	s15, [r8]
 800f27c:	ed97 7a01 	vldr	s14, [r7, #4]
 800f280:	edd6 7a01 	vldr	s15, [r6, #4]
 800f284:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f288:	edc8 7a01 	vstr	s15, [r8, #4]
 800f28c:	edd6 7a02 	vldr	s15, [r6, #8]
 800f290:	ed97 7a02 	vldr	s14, [r7, #8]
 800f294:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f298:	edc8 7a02 	vstr	s15, [r8, #8]
 800f29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a0:	42652ee1 	.word	0x42652ee1
 800f2a4:	00000000 	.word	0x00000000

0800f2a8 <MFX_emptyAttitude>:
 800f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ac:	ed2d 8b02 	vpush	{d8}
 800f2b0:	4fe9      	ldr	r7, [pc, #932]	; (800f658 <MFX_emptyAttitude+0x3b0>)
 800f2b2:	eddf 8aea 	vldr	s17, [pc, #936]	; 800f65c <MFX_emptyAttitude+0x3b4>
 800f2b6:	f6ad 4dd4 	subw	sp, sp, #3284	; 0xcd4
 800f2ba:	f50d 64d7 	add.w	r4, sp, #1720	; 0x6b8
 800f2be:	f04f 0800 	mov.w	r8, #0
 800f2c2:	46bc      	mov	ip, r7
 800f2c4:	e9c4 8800 	strd	r8, r8, [r4]
 800f2c8:	f83c 3b04 	ldrh.w	r3, [ip], #4
 800f2cc:	f8c4 8008 	str.w	r8, [r4, #8]
 800f2d0:	f88d 854a 	strb.w	r8, [sp, #1354]	; 0x54a
 800f2d4:	f8ad 3548 	strh.w	r3, [sp, #1352]	; 0x548
 800f2d8:	4681      	mov	r9, r0
 800f2da:	f8dd 3548 	ldr.w	r3, [sp, #1352]	; 0x548
 800f2de:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800f2e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800f2e6:	0c1b      	lsrs	r3, r3, #16
 800f2e8:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800f2ec:	ab2b      	add	r3, sp, #172	; 0xac
 800f2ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f2f2:	ab2e      	add	r3, sp, #184	; 0xb8
 800f2f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f2f8:	ab31      	add	r3, sp, #196	; 0xc4
 800f2fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f2fe:	ab34      	add	r3, sp, #208	; 0xd0
 800f300:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f304:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f308:	ab37      	add	r3, sp, #220	; 0xdc
 800f30a:	edcd 8a08 	vstr	s17, [sp, #32]
 800f30e:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 800f312:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 800f316:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 800f31a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f31e:	ab3a      	add	r3, sp, #232	; 0xe8
 800f320:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f324:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f328:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 800f32c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f330:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f334:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f338:	f44f 75b4 	mov.w	r5, #360	; 0x168
 800f33c:	f8dc 3000 	ldr.w	r3, [ip]
 800f340:	f8ce 3000 	str.w	r3, [lr]
 800f344:	462a      	mov	r2, r5
 800f346:	4641      	mov	r1, r8
 800f348:	4620      	mov	r0, r4
 800f34a:	f006 fee9 	bl	8016120 <memset>
 800f34e:	f44f 56f0 	mov.w	r6, #7680	; 0x1e00
 800f352:	462a      	mov	r2, r5
 800f354:	4621      	mov	r1, r4
 800f356:	a840      	add	r0, sp, #256	; 0x100
 800f358:	f8ad 60f8 	strh.w	r6, [sp, #248]	; 0xf8
 800f35c:	f006 ff18 	bl	8016190 <memcpy>
 800f360:	462a      	mov	r2, r5
 800f362:	4641      	mov	r1, r8
 800f364:	4620      	mov	r0, r4
 800f366:	ed8d 8a3f 	vstr	s16, [sp, #252]	; 0xfc
 800f36a:	f006 fed9 	bl	8016120 <memset>
 800f36e:	462a      	mov	r2, r5
 800f370:	4621      	mov	r1, r4
 800f372:	a89c      	add	r0, sp, #624	; 0x270
 800f374:	f8ad 6268 	strh.w	r6, [sp, #616]	; 0x268
 800f378:	f006 ff0a 	bl	8016190 <memcpy>
 800f37c:	462a      	mov	r2, r5
 800f37e:	4641      	mov	r1, r8
 800f380:	4620      	mov	r0, r4
 800f382:	ed8d 8a9b 	vstr	s16, [sp, #620]	; 0x26c
 800f386:	f006 fecb 	bl	8016120 <memset>
 800f38a:	462a      	mov	r2, r5
 800f38c:	4621      	mov	r1, r4
 800f38e:	a8f8      	add	r0, sp, #992	; 0x3e0
 800f390:	f8ad 63d8 	strh.w	r6, [sp, #984]	; 0x3d8
 800f394:	f006 fefc 	bl	8016190 <memcpy>
 800f398:	462a      	mov	r2, r5
 800f39a:	4641      	mov	r1, r8
 800f39c:	4620      	mov	r0, r4
 800f39e:	ed8d 8af7 	vstr	s16, [sp, #988]	; 0x3dc
 800f3a2:	f006 febd 	bl	8016120 <memset>
 800f3a6:	462a      	mov	r2, r5
 800f3a8:	4621      	mov	r1, r4
 800f3aa:	f50d 60aa 	add.w	r0, sp, #1360	; 0x550
 800f3ae:	f8ad 6548 	strh.w	r6, [sp, #1352]	; 0x548
 800f3b2:	f006 feed 	bl	8016190 <memcpy>
 800f3b6:	f04f 0301 	mov.w	r3, #1
 800f3ba:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800f3be:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800f3c2:	4ba7      	ldr	r3, [pc, #668]	; (800f660 <MFX_emptyAttitude+0x3b8>)
 800f3c4:	9320      	str	r3, [sp, #128]	; 0x80
 800f3c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3c8:	ae0c      	add	r6, sp, #48	; 0x30
 800f3ca:	46b3      	mov	fp, r6
 800f3cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f3ce:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800f3d2:	e9c4 8800 	strd	r8, r8, [r4]
 800f3d6:	e9c4 8802 	strd	r8, r8, [r4, #8]
 800f3da:	f8c4 8010 	str.w	r8, [r4, #16]
 800f3de:	f10d 0c6c 	add.w	ip, sp, #108	; 0x6c
 800f3e2:	46a6      	mov	lr, r4
 800f3e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f3ec:	f50d 6aa9 	add.w	sl, sp, #1352	; 0x548
 800f3f0:	682d      	ldr	r5, [r5, #0]
 800f3f2:	f8cc 5000 	str.w	r5, [ip]
 800f3f6:	af21      	add	r7, sp, #132	; 0x84
 800f3f8:	ed8a 8a01 	vstr	s16, [sl, #4]
 800f3fc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f3fe:	ab1a      	add	r3, sp, #104	; 0x68
 800f400:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f404:	abf6      	add	r3, sp, #984	; 0x3d8
 800f406:	9300      	str	r3, [sp, #0]
 800f408:	aa3e      	add	r2, sp, #248	; 0xf8
 800f40a:	f8c7 8000 	str.w	r8, [r7]
 800f40e:	ab9a      	add	r3, sp, #616	; 0x268
 800f410:	a911      	add	r1, sp, #68	; 0x44
 800f412:	9403      	str	r4, [sp, #12]
 800f414:	2001      	movs	r0, #1
 800f416:	f7fe fa49 	bl	800d8ac <DataHist_parameters>
 800f41a:	4b92      	ldr	r3, [pc, #584]	; (800f664 <MFX_emptyAttitude+0x3bc>)
 800f41c:	f8c9 3018 	str.w	r3, [r9, #24]
 800f420:	4b91      	ldr	r3, [pc, #580]	; (800f668 <MFX_emptyAttitude+0x3c0>)
 800f422:	f8c9 301c 	str.w	r3, [r9, #28]
 800f426:	4b91      	ldr	r3, [pc, #580]	; (800f66c <MFX_emptyAttitude+0x3c4>)
 800f428:	f8c9 3020 	str.w	r3, [r9, #32]
 800f42c:	4b90      	ldr	r3, [pc, #576]	; (800f670 <MFX_emptyAttitude+0x3c8>)
 800f42e:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 800f432:	ae2b      	add	r6, sp, #172	; 0xac
 800f434:	4b8f      	ldr	r3, [pc, #572]	; (800f674 <MFX_emptyAttitude+0x3cc>)
 800f436:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 800f43a:	ce07      	ldmia	r6!, {r0, r1, r2}
 800f43c:	4b8e      	ldr	r3, [pc, #568]	; (800f678 <MFX_emptyAttitude+0x3d0>)
 800f43e:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
 800f442:	4b8e      	ldr	r3, [pc, #568]	; (800f67c <MFX_emptyAttitude+0x3d4>)
 800f444:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 800f448:	4b8d      	ldr	r3, [pc, #564]	; (800f680 <MFX_emptyAttitude+0x3d8>)
 800f44a:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 800f44e:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800f452:	f8a9 3070 	strh.w	r3, [r9, #112]	; 0x70
 800f456:	ad2e      	add	r5, sp, #184	; 0xb8
 800f458:	f89d 30aa 	ldrb.w	r3, [sp, #170]	; 0xaa
 800f45c:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800f460:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
 800f464:	f8c9 207c 	str.w	r2, [r9, #124]	; 0x7c
 800f468:	cd07      	ldmia	r5!, {r0, r1, r2}
 800f46a:	f889 3072 	strb.w	r3, [r9, #114]	; 0x72
 800f46e:	f240 1301 	movw	r3, #257	; 0x101
 800f472:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800f650 <MFX_emptyAttitude+0x3a8>
 800f476:	f8a9 3000 	strh.w	r3, [r9]
 800f47a:	f8a9 3004 	strh.w	r3, [r9, #4]
 800f47e:	4b81      	ldr	r3, [pc, #516]	; (800f684 <MFX_emptyAttitude+0x3dc>)
 800f480:	f8c9 300c 	str.w	r3, [r9, #12]
 800f484:	4b80      	ldr	r3, [pc, #512]	; (800f688 <MFX_emptyAttitude+0x3e0>)
 800f486:	f8c9 3014 	str.w	r3, [r9, #20]
 800f48a:	f509 7346 	add.w	r3, r9, #792	; 0x318
 800f48e:	9304      	str	r3, [sp, #16]
 800f490:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
 800f494:	ed89 6b16 	vstr	d6, [r9, #88]	; 0x58
 800f498:	ed89 6b18 	vstr	d6, [r9, #96]	; 0x60
 800f49c:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 800f4a0:	f8a9 8002 	strh.w	r8, [r9, #2]
 800f4a4:	ed89 8a02 	vstr	s16, [r9, #8]
 800f4a8:	ed89 8a04 	vstr	s16, [r9, #16]
 800f4ac:	ed89 6b1a 	vstr	d6, [r9, #104]	; 0x68
 800f4b0:	f8c9 1084 	str.w	r1, [r9, #132]	; 0x84
 800f4b4:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
 800f4b8:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 800f4bc:	f10d 0bd0 	add.w	fp, sp, #208	; 0xd0
 800f4c0:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
 800f4c4:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
 800f4c8:	f8c9 2094 	str.w	r2, [r9, #148]	; 0x94
 800f4cc:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800f4d0:	af37      	add	r7, sp, #220	; 0xdc
 800f4d2:	f8c9 0098 	str.w	r0, [r9, #152]	; 0x98
 800f4d6:	f8c9 109c 	str.w	r1, [r9, #156]	; 0x9c
 800f4da:	f8c9 20a0 	str.w	r2, [r9, #160]	; 0xa0
 800f4de:	cf07      	ldmia	r7!, {r0, r1, r2}
 800f4e0:	f10d 0ee8 	add.w	lr, sp, #232	; 0xe8
 800f4e4:	f8c9 00a4 	str.w	r0, [r9, #164]	; 0xa4
 800f4e8:	f8c9 10a8 	str.w	r1, [r9, #168]	; 0xa8
 800f4ec:	f8c9 20ac 	str.w	r2, [r9, #172]	; 0xac
 800f4f0:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 800f4f4:	eddf 7a65 	vldr	s15, [pc, #404]	; 800f68c <MFX_emptyAttitude+0x3e4>
 800f4f8:	ed9f 5a65 	vldr	s10, [pc, #404]	; 800f690 <MFX_emptyAttitude+0x3e8>
 800f4fc:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f694 <MFX_emptyAttitude+0x3ec>
 800f500:	f8c9 00b0 	str.w	r0, [r9, #176]	; 0xb0
 800f504:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800f508:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800f50c:	f8c9 10b4 	str.w	r1, [r9, #180]	; 0xb4
 800f510:	ed89 5a65 	vstr	s10, [r9, #404]	; 0x194
 800f514:	edc9 5a66 	vstr	s11, [r9, #408]	; 0x198
 800f518:	ed89 7a67 	vstr	s14, [r9, #412]	; 0x19c
 800f51c:	edc9 8a64 	vstr	s17, [r9, #400]	; 0x190
 800f520:	edc9 8a30 	vstr	s17, [r9, #192]	; 0xc0
 800f524:	edc9 8a4a 	vstr	s17, [r9, #296]	; 0x128
 800f528:	edc9 8a31 	vstr	s17, [r9, #196]	; 0xc4
 800f52c:	f04f 0101 	mov.w	r1, #1
 800f530:	f8c9 20b8 	str.w	r2, [r9, #184]	; 0xb8
 800f534:	edc9 8a4b 	vstr	s17, [r9, #300]	; 0x12c
 800f538:	edc9 8a32 	vstr	s17, [r9, #200]	; 0xc8
 800f53c:	edc9 8a4c 	vstr	s17, [r9, #304]	; 0x130
 800f540:	edc9 8a33 	vstr	s17, [r9, #204]	; 0xcc
 800f544:	edc9 8a4d 	vstr	s17, [r9, #308]	; 0x134
 800f548:	edc9 8a34 	vstr	s17, [r9, #208]	; 0xd0
 800f54c:	edc9 8a4e 	vstr	s17, [r9, #312]	; 0x138
 800f550:	edc9 8a35 	vstr	s17, [r9, #212]	; 0xd4
 800f554:	edc9 8a4f 	vstr	s17, [r9, #316]	; 0x13c
 800f558:	edc9 8a36 	vstr	s17, [r9, #216]	; 0xd8
 800f55c:	edc9 8a50 	vstr	s17, [r9, #320]	; 0x140
 800f560:	edc9 8a37 	vstr	s17, [r9, #220]	; 0xdc
 800f564:	edc9 8a51 	vstr	s17, [r9, #324]	; 0x144
 800f568:	edc9 8a38 	vstr	s17, [r9, #224]	; 0xe0
 800f56c:	edc9 8a52 	vstr	s17, [r9, #328]	; 0x148
 800f570:	edc9 8a39 	vstr	s17, [r9, #228]	; 0xe4
 800f574:	edc9 8a53 	vstr	s17, [r9, #332]	; 0x14c
 800f578:	edc9 8a3a 	vstr	s17, [r9, #232]	; 0xe8
 800f57c:	edc9 8a54 	vstr	s17, [r9, #336]	; 0x150
 800f580:	edc9 8a3b 	vstr	s17, [r9, #236]	; 0xec
 800f584:	edc9 8a55 	vstr	s17, [r9, #340]	; 0x154
 800f588:	edc9 8a3c 	vstr	s17, [r9, #240]	; 0xf0
 800f58c:	edc9 8a56 	vstr	s17, [r9, #344]	; 0x158
 800f590:	edc9 8a3d 	vstr	s17, [r9, #244]	; 0xf4
 800f594:	edc9 8a57 	vstr	s17, [r9, #348]	; 0x15c
 800f598:	edc9 8a3e 	vstr	s17, [r9, #248]	; 0xf8
 800f59c:	edc9 8a58 	vstr	s17, [r9, #352]	; 0x160
 800f5a0:	edc9 8a3f 	vstr	s17, [r9, #252]	; 0xfc
 800f5a4:	edc9 8a59 	vstr	s17, [r9, #356]	; 0x164
 800f5a8:	edc9 8a40 	vstr	s17, [r9, #256]	; 0x100
 800f5ac:	edc9 8a5a 	vstr	s17, [r9, #360]	; 0x168
 800f5b0:	edc9 8a41 	vstr	s17, [r9, #260]	; 0x104
 800f5b4:	edc9 8a5b 	vstr	s17, [r9, #364]	; 0x16c
 800f5b8:	f8c9 c1a0 	str.w	ip, [r9, #416]	; 0x1a0
 800f5bc:	edc9 7a75 	vstr	s15, [r9, #468]	; 0x1d4
 800f5c0:	edc9 7a7f 	vstr	s15, [r9, #508]	; 0x1fc
 800f5c4:	edc9 8a42 	vstr	s17, [r9, #264]	; 0x108
 800f5c8:	edc9 8a5c 	vstr	s17, [r9, #368]	; 0x170
 800f5cc:	edc9 8a43 	vstr	s17, [r9, #268]	; 0x10c
 800f5d0:	edc9 8a5d 	vstr	s17, [r9, #372]	; 0x174
 800f5d4:	edc9 8a44 	vstr	s17, [r9, #272]	; 0x110
 800f5d8:	edc9 8a5e 	vstr	s17, [r9, #376]	; 0x178
 800f5dc:	edc9 8a45 	vstr	s17, [r9, #276]	; 0x114
 800f5e0:	edc9 8a5f 	vstr	s17, [r9, #380]	; 0x17c
 800f5e4:	edc9 8a46 	vstr	s17, [r9, #280]	; 0x118
 800f5e8:	edc9 8a60 	vstr	s17, [r9, #384]	; 0x180
 800f5ec:	edc9 8a47 	vstr	s17, [r9, #284]	; 0x11c
 800f5f0:	edc9 8a61 	vstr	s17, [r9, #388]	; 0x184
 800f5f4:	edc9 8a48 	vstr	s17, [r9, #288]	; 0x120
 800f5f8:	edc9 8a62 	vstr	s17, [r9, #392]	; 0x188
 800f5fc:	edc9 8a49 	vstr	s17, [r9, #292]	; 0x124
 800f600:	edc9 8a63 	vstr	s17, [r9, #396]	; 0x18c
 800f604:	f889 81a4 	strb.w	r8, [r9, #420]	; 0x1a4
 800f608:	f8c9 81a6 	str.w	r8, [r9, #422]	; 0x1a6
 800f60c:	edc9 8a6c 	vstr	s17, [r9, #432]	; 0x1b0
 800f610:	edc9 8a76 	vstr	s17, [r9, #472]	; 0x1d8
 800f614:	edc9 8a77 	vstr	s17, [r9, #476]	; 0x1dc
 800f618:	edc9 8a78 	vstr	s17, [r9, #480]	; 0x1e0
 800f61c:	edc9 8a79 	vstr	s17, [r9, #484]	; 0x1e4
 800f620:	edc9 8a7a 	vstr	s17, [r9, #488]	; 0x1e8
 800f624:	edc9 8a7b 	vstr	s17, [r9, #492]	; 0x1ec
 800f628:	edc9 8a7c 	vstr	s17, [r9, #496]	; 0x1f0
 800f62c:	edc9 8a7d 	vstr	s17, [r9, #500]	; 0x1f4
 800f630:	edc9 8a6d 	vstr	s17, [r9, #436]	; 0x1b4
 800f634:	edc9 8a7e 	vstr	s17, [r9, #504]	; 0x1f8
 800f638:	edc9 8a80 	vstr	s17, [r9, #512]	; 0x200
 800f63c:	edc9 7a89 	vstr	s15, [r9, #548]	; 0x224
 800f640:	edc9 7a93 	vstr	s15, [r9, #588]	; 0x24c
 800f644:	edc9 7a9d 	vstr	s15, [r9, #628]	; 0x274
 800f648:	e026      	b.n	800f698 <MFX_emptyAttitude+0x3f0>
 800f64a:	bf00      	nop
 800f64c:	f3af 8000 	nop.w
	...
 800f658:	0801c5ec 	.word	0x0801c5ec
 800f65c:	00000000 	.word	0x00000000
 800f660:	40a00000 	.word	0x40a00000
 800f664:	3a9d4952 	.word	0x3a9d4952
 800f668:	3ac49ba6 	.word	0x3ac49ba6
 800f66c:	3b03126f 	.word	0x3b03126f
 800f670:	3a83126f 	.word	0x3a83126f
 800f674:	3f639581 	.word	0x3f639581
 800f678:	402ab021 	.word	0x402ab021
 800f67c:	3f13f7cf 	.word	0x3f13f7cf
 800f680:	3f2ac083 	.word	0x3f2ac083
 800f684:	01010100 	.word	0x01010100
 800f688:	41200000 	.word	0x41200000
 800f68c:	447a0000 	.word	0x447a0000
 800f690:	3f4ccccd 	.word	0x3f4ccccd
 800f694:	3f333333 	.word	0x3f333333
 800f698:	edc9 8a81 	vstr	s17, [r9, #516]	; 0x204
 800f69c:	edc9 8a82 	vstr	s17, [r9, #520]	; 0x208
 800f6a0:	edc9 8a83 	vstr	s17, [r9, #524]	; 0x20c
 800f6a4:	edc9 8a84 	vstr	s17, [r9, #528]	; 0x210
 800f6a8:	edc9 8a85 	vstr	s17, [r9, #532]	; 0x214
 800f6ac:	edc9 8a86 	vstr	s17, [r9, #536]	; 0x218
 800f6b0:	edc9 8a6e 	vstr	s17, [r9, #440]	; 0x1b8
 800f6b4:	edc9 8a87 	vstr	s17, [r9, #540]	; 0x21c
 800f6b8:	edc9 8a88 	vstr	s17, [r9, #544]	; 0x220
 800f6bc:	edc9 8a8a 	vstr	s17, [r9, #552]	; 0x228
 800f6c0:	edc9 8a8b 	vstr	s17, [r9, #556]	; 0x22c
 800f6c4:	edc9 8a8c 	vstr	s17, [r9, #560]	; 0x230
 800f6c8:	edc9 8a8d 	vstr	s17, [r9, #564]	; 0x234
 800f6cc:	edc9 8a8e 	vstr	s17, [r9, #568]	; 0x238
 800f6d0:	edc9 8a8f 	vstr	s17, [r9, #572]	; 0x23c
 800f6d4:	edc9 8a6f 	vstr	s17, [r9, #444]	; 0x1bc
 800f6d8:	edc9 8a90 	vstr	s17, [r9, #576]	; 0x240
 800f6dc:	edc9 8a91 	vstr	s17, [r9, #580]	; 0x244
 800f6e0:	edc9 8a92 	vstr	s17, [r9, #584]	; 0x248
 800f6e4:	edc9 8a94 	vstr	s17, [r9, #592]	; 0x250
 800f6e8:	edc9 8a95 	vstr	s17, [r9, #596]	; 0x254
 800f6ec:	edc9 8a96 	vstr	s17, [r9, #600]	; 0x258
 800f6f0:	edc9 8a97 	vstr	s17, [r9, #604]	; 0x25c
 800f6f4:	edc9 8a98 	vstr	s17, [r9, #608]	; 0x260
 800f6f8:	edc9 8a70 	vstr	s17, [r9, #448]	; 0x1c0
 800f6fc:	edc9 8a99 	vstr	s17, [r9, #612]	; 0x264
 800f700:	edc9 8a9a 	vstr	s17, [r9, #616]	; 0x268
 800f704:	edc9 8a9b 	vstr	s17, [r9, #620]	; 0x26c
 800f708:	edc9 8a9c 	vstr	s17, [r9, #624]	; 0x270
 800f70c:	edc9 8a9e 	vstr	s17, [r9, #632]	; 0x278
 800f710:	edc9 7aa7 	vstr	s15, [r9, #668]	; 0x29c
 800f714:	edc9 7ab1 	vstr	s15, [r9, #708]	; 0x2c4
 800f718:	edc9 7abb 	vstr	s15, [r9, #748]	; 0x2ec
 800f71c:	edc9 8a9f 	vstr	s17, [r9, #636]	; 0x27c
 800f720:	edc9 8aa0 	vstr	s17, [r9, #640]	; 0x280
 800f724:	edc9 8aa1 	vstr	s17, [r9, #644]	; 0x284
 800f728:	edc9 8a71 	vstr	s17, [r9, #452]	; 0x1c4
 800f72c:	edc9 8aa2 	vstr	s17, [r9, #648]	; 0x288
 800f730:	edc9 8aa3 	vstr	s17, [r9, #652]	; 0x28c
 800f734:	edc9 8aa4 	vstr	s17, [r9, #656]	; 0x290
 800f738:	edc9 8aa5 	vstr	s17, [r9, #660]	; 0x294
 800f73c:	edc9 8aa6 	vstr	s17, [r9, #664]	; 0x298
 800f740:	edc9 8aa8 	vstr	s17, [r9, #672]	; 0x2a0
 800f744:	edc9 8aa9 	vstr	s17, [r9, #676]	; 0x2a4
 800f748:	edc9 8aaa 	vstr	s17, [r9, #680]	; 0x2a8
 800f74c:	edc9 8a72 	vstr	s17, [r9, #456]	; 0x1c8
 800f750:	edc9 8aab 	vstr	s17, [r9, #684]	; 0x2ac
 800f754:	edc9 8aac 	vstr	s17, [r9, #688]	; 0x2b0
 800f758:	edc9 8aad 	vstr	s17, [r9, #692]	; 0x2b4
 800f75c:	edc9 8aae 	vstr	s17, [r9, #696]	; 0x2b8
 800f760:	edc9 8aaf 	vstr	s17, [r9, #700]	; 0x2bc
 800f764:	edc9 8ab0 	vstr	s17, [r9, #704]	; 0x2c0
 800f768:	edc9 8ab2 	vstr	s17, [r9, #712]	; 0x2c8
 800f76c:	edc9 8ab3 	vstr	s17, [r9, #716]	; 0x2cc
 800f770:	edc9 8a73 	vstr	s17, [r9, #460]	; 0x1cc
 800f774:	edc9 8ab4 	vstr	s17, [r9, #720]	; 0x2d0
 800f778:	edc9 8ab5 	vstr	s17, [r9, #724]	; 0x2d4
 800f77c:	edc9 8ab6 	vstr	s17, [r9, #728]	; 0x2d8
 800f780:	edc9 8ab7 	vstr	s17, [r9, #732]	; 0x2dc
 800f784:	edc9 8ab8 	vstr	s17, [r9, #736]	; 0x2e0
 800f788:	edc9 8ab9 	vstr	s17, [r9, #740]	; 0x2e4
 800f78c:	edc9 8aba 	vstr	s17, [r9, #744]	; 0x2e8
 800f790:	edc9 8abc 	vstr	s17, [r9, #752]	; 0x2f0
 800f794:	9a04      	ldr	r2, [sp, #16]
 800f796:	f889 11ac 	strb.w	r1, [r9, #428]	; 0x1ac
 800f79a:	edc9 8a74 	vstr	s17, [r9, #464]	; 0x1d0
 800f79e:	edc9 7ac5 	vstr	s15, [r9, #788]	; 0x314
 800f7a2:	9203      	str	r2, [sp, #12]
 800f7a4:	f50d 624a 	add.w	r2, sp, #3232	; 0xca0
 800f7a8:	9202      	str	r2, [sp, #8]
 800f7aa:	f50d 6233 	add.w	r2, sp, #2864	; 0xb30
 800f7ae:	9201      	str	r2, [sp, #4]
 800f7b0:	f50d 621c 	add.w	r2, sp, #2496	; 0x9c0
 800f7b4:	9200      	str	r2, [sp, #0]
 800f7b6:	7820      	ldrb	r0, [r4, #0]
 800f7b8:	edc9 8abd 	vstr	s17, [r9, #756]	; 0x2f4
 800f7bc:	f50d 6305 	add.w	r3, sp, #2128	; 0x850
 800f7c0:	f50d 62dc 	add.w	r2, sp, #1760	; 0x6e0
 800f7c4:	f20d 61bc 	addw	r1, sp, #1724	; 0x6bc
 800f7c8:	edc9 8abe 	vstr	s17, [r9, #760]	; 0x2f8
 800f7cc:	edc9 8abf 	vstr	s17, [r9, #764]	; 0x2fc
 800f7d0:	edc9 8ac0 	vstr	s17, [r9, #768]	; 0x300
 800f7d4:	edc9 8ac1 	vstr	s17, [r9, #772]	; 0x304
 800f7d8:	edc9 8ac2 	vstr	s17, [r9, #776]	; 0x308
 800f7dc:	edc9 8ac3 	vstr	s17, [r9, #780]	; 0x30c
 800f7e0:	edc9 8ac4 	vstr	s17, [r9, #784]	; 0x310
 800f7e4:	f7fe f862 	bl	800d8ac <DataHist_parameters>
 800f7e8:	f609 1344 	addw	r3, r9, #2372	; 0x944
 800f7ec:	f509 6216 	add.w	r2, r9, #2400	; 0x960
 800f7f0:	f609 1168 	addw	r1, r9, #2408	; 0x968
 800f7f4:	f509 6017 	add.w	r0, r9, #2416	; 0x970
 800f7f8:	f10d 0c20 	add.w	ip, sp, #32
 800f7fc:	9304      	str	r3, [sp, #16]
 800f7fe:	9205      	str	r2, [sp, #20]
 800f800:	9106      	str	r1, [sp, #24]
 800f802:	9007      	str	r0, [sp, #28]
 800f804:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f808:	f8c9 393c 	str.w	r3, [r9, #2364]	; 0x93c
 800f80c:	9b04      	ldr	r3, [sp, #16]
 800f80e:	f8c9 0930 	str.w	r0, [r9, #2352]	; 0x930
 800f812:	f8c9 1934 	str.w	r1, [r9, #2356]	; 0x934
 800f816:	f8c9 2938 	str.w	r2, [r9, #2360]	; 0x938
 800f81a:	9906      	ldr	r1, [sp, #24]
 800f81c:	9a05      	ldr	r2, [sp, #20]
 800f81e:	9807      	ldr	r0, [sp, #28]
 800f820:	f509 6b14 	add.w	fp, r9, #2368	; 0x940
 800f824:	f609 1a5c 	addw	sl, r9, #2396	; 0x95c
 800f828:	edcb 8a00 	vstr	s17, [fp]
 800f82c:	f609 1748 	addw	r7, r9, #2376	; 0x948
 800f830:	edca 8a00 	vstr	s17, [sl]
 800f834:	f609 1664 	addw	r6, r9, #2404	; 0x964
 800f838:	edc3 8a00 	vstr	s17, [r3]
 800f83c:	f609 1554 	addw	r5, r9, #2388	; 0x954
 800f840:	f609 1458 	addw	r4, r9, #2392	; 0x958
 800f844:	f609 1e6c 	addw	lr, r9, #2412	; 0x96c
 800f848:	230a      	movs	r3, #10
 800f84a:	edc2 8a00 	vstr	s17, [r2]
 800f84e:	edc7 8a00 	vstr	s17, [r7]
 800f852:	edc6 8a00 	vstr	s17, [r6]
 800f856:	f8c9 894c 	str.w	r8, [r9, #2380]	; 0x94c
 800f85a:	f8a9 8950 	strh.w	r8, [r9, #2384]	; 0x950
 800f85e:	edc5 8a00 	vstr	s17, [r5]
 800f862:	ed84 8a00 	vstr	s16, [r4]
 800f866:	edc1 8a00 	vstr	s17, [r1]
 800f86a:	edc0 8a00 	vstr	s17, [r0]
 800f86e:	edce 8a00 	vstr	s17, [lr]
 800f872:	f8c9 3974 	str.w	r3, [r9, #2420]	; 0x974
 800f876:	f889 8978 	strb.w	r8, [r9, #2424]	; 0x978
 800f87a:	f60d 4dd4 	addw	sp, sp, #3284	; 0xcd4
 800f87e:	ecbd 8b02 	vpop	{d8}
 800f882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f886:	bf00      	nop

0800f888 <iNemoEngine_API_Update>:
 800f888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f88c:	ed2d 8b10 	vpush	{d8-d15}
 800f890:	f2ad 5d94 	subw	sp, sp, #1428	; 0x594
 800f894:	eeb0 8a40 	vmov.f32	s16, s0
 800f898:	9006      	str	r0, [sp, #24]
 800f89a:	9114      	str	r1, [sp, #80]	; 0x50
 800f89c:	4614      	mov	r4, r2
 800f89e:	9324      	str	r3, [sp, #144]	; 0x90
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	f000 8222 	beq.w	800fcea <iNemoEngine_API_Update+0x462>
 800f8a6:	68e0      	ldr	r0, [r4, #12]
 800f8a8:	6921      	ldr	r1, [r4, #16]
 800f8aa:	6962      	ldr	r2, [r4, #20]
 800f8ac:	9d06      	ldr	r5, [sp, #24]
 800f8ae:	aba1      	add	r3, sp, #644	; 0x284
 800f8b0:	c307      	stmia	r3!, {r0, r1, r2}
 800f8b2:	6820      	ldr	r0, [r4, #0]
 800f8b4:	6861      	ldr	r1, [r4, #4]
 800f8b6:	68a2      	ldr	r2, [r4, #8]
 800f8b8:	ab9e      	add	r3, sp, #632	; 0x278
 800f8ba:	c307      	stmia	r3!, {r0, r1, r2}
 800f8bc:	69a0      	ldr	r0, [r4, #24]
 800f8be:	69e1      	ldr	r1, [r4, #28]
 800f8c0:	6a22      	ldr	r2, [r4, #32]
 800f8c2:	f895 4978 	ldrb.w	r4, [r5, #2424]	; 0x978
 800f8c6:	aba4      	add	r3, sp, #656	; 0x290
 800f8c8:	c307      	stmia	r3!, {r0, r1, r2}
 800f8ca:	b12c      	cbz	r4, 800f8d8 <iNemoEngine_API_Update+0x50>
 800f8cc:	f8b5 2950 	ldrh.w	r2, [r5, #2384]	; 0x950
 800f8d0:	792b      	ldrb	r3, [r5, #4]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	f082 82a5 	bcs.w	8011e22 <iNemoEngine_API_Update+0x259a>
 800f8d8:	9c06      	ldr	r4, [sp, #24]
 800f8da:	ae31      	add	r6, sp, #196	; 0xc4
 800f8dc:	f104 033a 	add.w	r3, r4, #58	; 0x3a
 800f8e0:	4619      	mov	r1, r3
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	aaa1      	add	r2, sp, #644	; 0x284
 800f8e6:	9320      	str	r3, [sp, #128]	; 0x80
 800f8e8:	ad37      	add	r5, sp, #220	; 0xdc
 800f8ea:	f7fe f897 	bl	800da1c <rotVect>
 800f8ee:	aaa4      	add	r2, sp, #656	; 0x290
 800f8f0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800f8f4:	a834      	add	r0, sp, #208	; 0xd0
 800f8f6:	f7fe f891 	bl	800da1c <rotVect>
 800f8fa:	aa9e      	add	r2, sp, #632	; 0x278
 800f8fc:	f104 0143 	add.w	r1, r4, #67	; 0x43
 800f900:	4628      	mov	r0, r5
 800f902:	f7fe f88b 	bl	800da1c <rotVect>
 800f906:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800f90a:	b923      	cbnz	r3, 800f916 <iNemoEngine_API_Update+0x8e>
 800f90c:	4b9d      	ldr	r3, [pc, #628]	; (800fb84 <iNemoEngine_API_Update+0x2fc>)
 800f90e:	606b      	str	r3, [r5, #4]
 800f910:	60ab      	str	r3, [r5, #8]
 800f912:	2300      	movs	r3, #0
 800f914:	602b      	str	r3, [r5, #0]
 800f916:	9b06      	ldr	r3, [sp, #24]
 800f918:	f8d3 794c 	ldr.w	r7, [r3, #2380]	; 0x94c
 800f91c:	2f09      	cmp	r7, #9
 800f91e:	d851      	bhi.n	800f9c4 <iNemoEngine_API_Update+0x13c>
 800f920:	edd6 aa01 	vldr	s21, [r6, #4]
 800f924:	ed96 ba00 	vldr	s22, [r6]
 800f928:	ed96 aa02 	vldr	s20, [r6, #8]
 800f92c:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 800f930:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 800f934:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 800f938:	eeea 7a0a 	vfma.f32	s15, s20, s20
 800f93c:	ee17 0a90 	vmov	r0, s15
 800f940:	f7f0 fe02 	bl	8000548 <__aeabi_f2d>
 800f944:	ec41 0b10 	vmov	d0, r0, r1
 800f948:	f009 fd40 	bl	80193cc <sqrt>
 800f94c:	ec51 0b10 	vmov	r0, r1, d0
 800f950:	f7f1 f94a 	bl	8000be8 <__aeabi_d2f>
 800f954:	ee07 0a90 	vmov	s15, r0
 800f958:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 800f95c:	ed95 9a01 	vldr	s18, [r5, #4]
 800f960:	edd5 9a00 	vldr	s19, [r5]
 800f964:	edd5 8a02 	vldr	s17, [r5, #8]
 800f968:	ee69 7a09 	vmul.f32	s15, s18, s18
 800f96c:	ee2b ba07 	vmul.f32	s22, s22, s14
 800f970:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800f974:	ee6a aa87 	vmul.f32	s21, s21, s14
 800f978:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800f97c:	ee2a aa07 	vmul.f32	s20, s20, s14
 800f980:	ee17 0a90 	vmov	r0, s15
 800f984:	ed86 ba00 	vstr	s22, [r6]
 800f988:	edc6 aa01 	vstr	s21, [r6, #4]
 800f98c:	ed86 aa02 	vstr	s20, [r6, #8]
 800f990:	f7f0 fdda 	bl	8000548 <__aeabi_f2d>
 800f994:	ec41 0b10 	vmov	d0, r0, r1
 800f998:	f009 fd18 	bl	80193cc <sqrt>
 800f99c:	ec51 0b10 	vmov	r0, r1, d0
 800f9a0:	f7f1 f922 	bl	8000be8 <__aeabi_d2f>
 800f9a4:	ee07 0a90 	vmov	s15, r0
 800f9a8:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 800f9ac:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800f9b0:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f9b4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f9b8:	edc5 9a00 	vstr	s19, [r5]
 800f9bc:	ed85 9a01 	vstr	s18, [r5, #4]
 800f9c0:	edc5 8a02 	vstr	s17, [r5, #8]
 800f9c4:	9906      	ldr	r1, [sp, #24]
 800f9c6:	790b      	ldrb	r3, [r1, #4]
 800f9c8:	f8b1 2950 	ldrh.w	r2, [r1, #2384]	; 0x950
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	f080 80f5 	bcs.w	800fbbc <iNemoEngine_API_Update+0x334>
 800f9d2:	abf8      	add	r3, sp, #992	; 0x3e0
 800f9d4:	9319      	str	r3, [sp, #100]	; 0x64
 800f9d6:	f501 6313 	add.w	r3, r1, #2352	; 0x930
 800f9da:	931c      	str	r3, [sp, #112]	; 0x70
 800f9dc:	f601 1334 	addw	r3, r1, #2356	; 0x934
 800f9e0:	931d      	str	r3, [sp, #116]	; 0x74
 800f9e2:	f601 1338 	addw	r3, r1, #2360	; 0x938
 800f9e6:	931e      	str	r3, [sp, #120]	; 0x78
 800f9e8:	eddd 9af5 	vldr	s19, [sp, #980]	; 0x3d4
 800f9ec:	f601 133c 	addw	r3, r1, #2364	; 0x93c
 800f9f0:	accc      	add	r4, sp, #816	; 0x330
 800f9f2:	931f      	str	r3, [sp, #124]	; 0x7c
 800f9f4:	460d      	mov	r5, r1
 800f9f6:	3701      	adds	r7, #1
 800f9f8:	9819      	ldr	r0, [sp, #100]	; 0x64
 800f9fa:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f9fc:	f8c5 794c 	str.w	r7, [r5, #2380]	; 0x94c
 800fa00:	aaa1      	add	r2, sp, #644	; 0x284
 800fa02:	f7fe f80b 	bl	800da1c <rotVect>
 800fa06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fa08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	60d3      	str	r3, [r2, #12]
 800fa0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	6113      	str	r3, [r2, #16]
 800fa14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	6153      	str	r3, [r2, #20]
 800fa1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	6193      	str	r3, [r2, #24]
 800fa20:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 800fa24:	9301      	str	r3, [sp, #4]
 800fa26:	4601      	mov	r1, r0
 800fa28:	f102 0328 	add.w	r3, r2, #40	; 0x28
 800fa2c:	4610      	mov	r0, r2
 800fa2e:	4615      	mov	r5, r2
 800fa30:	300c      	adds	r0, #12
 800fa32:	9300      	str	r3, [sp, #0]
 800fa34:	f102 031c 	add.w	r3, r2, #28
 800fa38:	f7ff fb6c 	bl	800f114 <output_update>
 800fa3c:	ed95 8a00 	vldr	s16, [r5]
 800fa40:	ed95 aa01 	vldr	s20, [r5, #4]
 800fa44:	eeb0 0a48 	vmov.f32	s0, s16
 800fa48:	f009 fe96 	bl	8019778 <sinf>
 800fa4c:	eeb0 9a40 	vmov.f32	s18, s0
 800fa50:	eeb0 0a48 	vmov.f32	s0, s16
 800fa54:	f009 fc76 	bl	8019344 <cosf>
 800fa58:	edd4 7a33 	vldr	s15, [r4, #204]	; 0xcc
 800fa5c:	edd4 6a3d 	vldr	s13, [r4, #244]	; 0xf4
 800fa60:	ee60 8a00 	vmul.f32	s17, s0, s0
 800fa64:	eeb0 7aca 	vabs.f32	s14, s20
 800fa68:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800fa6c:	eddf 7a46 	vldr	s15, [pc, #280]	; 800fb88 <iNemoEngine_API_Update+0x300>
 800fa70:	ee29 9a09 	vmul.f32	s18, s18, s18
 800fa74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa7c:	eee9 8a26 	vfma.f32	s17, s18, s13
 800fa80:	d579      	bpl.n	800fb76 <iNemoEngine_API_Update+0x2ee>
 800fa82:	eeb0 0a4a 	vmov.f32	s0, s20
 800fa86:	f009 ff1d 	bl	80198c4 <tanf>
 800fa8a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fa8e:	eeb0 7a69 	vmov.f32	s14, s19
 800fa92:	eea0 7a28 	vfma.f32	s14, s0, s17
 800fa96:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800fa98:	9b06      	ldr	r3, [sp, #24]
 800fa9a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800fb8c <iNemoEngine_API_Update+0x304>
 800fa9e:	4c3c      	ldr	r4, [pc, #240]	; (800fb90 <iNemoEngine_API_Update+0x308>)
 800faa0:	eef1 7ac7 	vsqrt.f32	s15, s14
 800faa4:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800fbb0 <iNemoEngine_API_Update+0x328>
 800faa8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800faac:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab4:	bf88      	it	hi
 800fab6:	eef0 7a66 	vmovhi.f32	s15, s13
 800faba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac2:	bfb8      	it	lt
 800fac4:	eef0 7a47 	vmovlt.f32	s15, s14
 800fac8:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 800facc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fad0:	bbd3      	cbnz	r3, 800fb48 <iNemoEngine_API_Update+0x2c0>
 800fad2:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 800fad6:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 800fada:	edd5 0a08 	vldr	s1, [r5, #32]
 800fade:	ed95 0a07 	vldr	s0, [r5, #28]
 800fae2:	f7fe f86d 	bl	800dbc0 <findDirection>
 800fae6:	ed95 7a03 	vldr	s14, [r5, #12]
 800faea:	edd5 6a04 	vldr	s13, [r5, #16]
 800faee:	edd5 8a05 	vldr	s17, [r5, #20]
 800faf2:	edd5 7a06 	vldr	s15, [r5, #24]
 800faf6:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0
 800fafa:	2805      	cmp	r0, #5
 800fafc:	f204 822c 	bhi.w	8013f58 <iNemoEngine_API_Update+0x46d0>
 800fb00:	e8df f010 	tbh	[pc, r0, lsl #1]
 800fb04:	11d0000a 	.word	0x11d0000a
 800fb08:	11990006 	.word	0x11990006
 800fb0c:	000a0006 	.word	0x000a0006
 800fb10:	eddf 7a20 	vldr	s15, [pc, #128]	; 800fb94 <iNemoEngine_API_Update+0x30c>
 800fb14:	ee38 8a27 	vadd.f32	s16, s16, s15
 800fb18:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fb98 <iNemoEngine_API_Update+0x310>
 800fb1c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb24:	bfa8      	it	ge
 800fb26:	ee38 8a67 	vsubge.f32	s16, s16, s15
 800fb2a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb32:	f100 80d5 	bmi.w	800fce0 <iNemoEngine_API_Update+0x458>
 800fb36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb38:	ed83 8a0d 	vstr	s16, [r3, #52]	; 0x34
 800fb3c:	f20d 5d94 	addw	sp, sp, #1428	; 0x594
 800fb40:	ecbd 8b10 	vpop	{d8-d15}
 800fb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb48:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 800fb4c:	edd5 8a05 	vldr	s17, [r5, #20]
 800fb50:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 800fb54:	edd5 0a07 	vldr	s1, [r5, #28]
 800fb58:	ed95 0a08 	vldr	s0, [r5, #32]
 800fb5c:	eeb1 1a41 	vneg.f32	s2, s2
 800fb60:	f7fe f82e 	bl	800dbc0 <findDirection>
 800fb64:	eef1 8a68 	vneg.f32	s17, s17
 800fb68:	ed95 7a04 	vldr	s14, [r5, #16]
 800fb6c:	edd5 6a03 	vldr	s13, [r5, #12]
 800fb70:	edd5 7a06 	vldr	s15, [r5, #24]
 800fb74:	e7bf      	b.n	800faf6 <iNemoEngine_API_Update+0x26e>
 800fb76:	eddf 7a09 	vldr	s15, [pc, #36]	; 800fb9c <iNemoEngine_API_Update+0x314>
 800fb7a:	eeb0 7a69 	vmov.f32	s14, s19
 800fb7e:	eea8 7aa7 	vfma.f32	s14, s17, s15
 800fb82:	e788      	b.n	800fa96 <iNemoEngine_API_Update+0x20e>
 800fb84:	3f333333 	.word	0x3f333333
 800fb88:	3fbc430e 	.word	0x3fbc430e
 800fb8c:	40490fdb 	.word	0x40490fdb
 800fb90:	2000021c 	.word	0x2000021c
 800fb94:	43340000 	.word	0x43340000
 800fb98:	43b40000 	.word	0x43b40000
 800fb9c:	42c6ab07 	.word	0x42c6ab07
 800fba0:	3c03126f 	.word	0x3c03126f
 800fba4:	3b656042 	.word	0x3b656042
 800fba8:	3e4ccccd 	.word	0x3e4ccccd
 800fbac:	3fb50481 	.word	0x3fb50481
 800fbb0:	3c8efa35 	.word	0x3c8efa35
 800fbb4:	3ed93dd9 	.word	0x3ed93dd9
 800fbb8:	42c80000 	.word	0x42c80000
 800fbbc:	ee07 3a90 	vmov	s15, r3
 800fbc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbc4:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800fba0 <iNemoEngine_API_Update+0x318>
 800fbc8:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 800fba4 <iNemoEngine_API_Update+0x31c>
 800fbcc:	ed5f ba08 	vldr	s23, [pc, #-32]	; 800fbb0 <iNemoEngine_API_Update+0x328>
 800fbd0:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800fbac <iNemoEngine_API_Update+0x324>
 800fbd4:	ed5f 4a0c 	vldr	s9, [pc, #-48]	; 800fba8 <iNemoEngine_API_Update+0x320>
 800fbd8:	ee67 7a88 	vmul.f32	s15, s15, s16
 800fbdc:	4608      	mov	r0, r1
 800fbde:	eec7 5a27 	vdiv.f32	s11, s14, s15
 800fbe2:	f601 125c 	addw	r2, r1, #2396	; 0x95c
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	2100      	movs	r1, #0
 800fbea:	f50d 7cb2 	add.w	ip, sp, #356	; 0x164
 800fbee:	ac56      	add	r4, sp, #344	; 0x158
 800fbf0:	edcd 7a07 	vstr	s15, [sp, #28]
 800fbf4:	eef1 7ae5 	vsqrt.f32	s15, s11
 800fbf8:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 800fbb4 <iNemoEngine_API_Update+0x32c>
 800fbfc:	ee86 4aa7 	vdiv.f32	s8, s13, s15
 800fc00:	ee67 6a87 	vmul.f32	s13, s15, s14
 800fc04:	ed92 7a00 	vldr	s14, [r2]
 800fc08:	f8a0 1950 	strh.w	r1, [r0, #2384]	; 0x950
 800fc0c:	6013      	str	r3, [r2, #0]
 800fc0e:	f500 6216 	add.w	r2, r0, #2400	; 0x960
 800fc12:	ee27 ea2b 	vmul.f32	s28, s14, s23
 800fc16:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
 800fc1a:	ed92 7a00 	vldr	s14, [r2]
 800fc1e:	6013      	str	r3, [r2, #0]
 800fc20:	f600 1264 	addw	r2, r0, #2404	; 0x964
 800fc24:	ee67 ea2b 	vmul.f32	s29, s14, s23
 800fc28:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
 800fc2c:	ed92 7a00 	vldr	s14, [r2]
 800fc30:	6013      	str	r3, [r2, #0]
 800fc32:	7947      	ldrb	r7, [r0, #5]
 800fc34:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
 800fc38:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800fc3c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800fc40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fc44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fc48:	9a06      	ldr	r2, [sp, #24]
 800fc4a:	f8d2 01c8 	ldr.w	r0, [r2, #456]	; 0x1c8
 800fc4e:	f8d2 11cc 	ldr.w	r1, [r2, #460]	; 0x1cc
 800fc52:	f8d2 21d0 	ldr.w	r2, [r2, #464]	; 0x1d0
 800fc56:	abd9      	add	r3, sp, #868	; 0x364
 800fc58:	2f01      	cmp	r7, #1
 800fc5a:	c307      	stmia	r3!, {r0, r1, r2}
 800fc5c:	ee27 6a86 	vmul.f32	s12, s15, s12
 800fc60:	ee67 4aa4 	vmul.f32	s9, s15, s9
 800fc64:	ee67 ba2b 	vmul.f32	s23, s14, s23
 800fc68:	f002 844a 	beq.w	8012500 <iNemoEngine_API_Update+0x2c78>
 800fc6c:	2f02      	cmp	r7, #2
 800fc6e:	f002 843c 	beq.w	80124ea <iNemoEngine_API_Update+0x2c62>
 800fc72:	2f00      	cmp	r7, #0
 800fc74:	f002 814d 	beq.w	8011f12 <iNemoEngine_API_Update+0x268a>
 800fc78:	9b06      	ldr	r3, [sp, #24]
 800fc7a:	ed5f 5a31 	vldr	s11, [pc, #-196]	; 800fbb8 <iNemoEngine_API_Update+0x330>
 800fc7e:	ed93 ba05 	vldr	s22, [r3, #20]
 800fc82:	491b      	ldr	r1, [pc, #108]	; (800fcf0 <iNemoEngine_API_Update+0x468>)
 800fc84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fc88:	ee2b ba25 	vmul.f32	s22, s22, s11
 800fc8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc90:	4618      	mov	r0, r3
 800fc92:	8842      	ldrh	r2, [r0, #2]
 800fc94:	1e53      	subs	r3, r2, #1
 800fc96:	2b12      	cmp	r3, #18
 800fc98:	d834      	bhi.n	800fd04 <iNemoEngine_API_Update+0x47c>
 800fc9a:	3201      	adds	r2, #1
 800fc9c:	b213      	sxth	r3, r2
 800fc9e:	b292      	uxth	r2, r2
 800fca0:	2a03      	cmp	r2, #3
 800fca2:	8043      	strh	r3, [r0, #2]
 800fca4:	f242 8401 	bls.w	80124aa <iNemoEngine_API_Update+0x2c22>
 800fca8:	ee07 3a10 	vmov	s14, r3
 800fcac:	eddf 5a11 	vldr	s11, [pc, #68]	; 800fcf4 <iNemoEngine_API_Update+0x46c>
 800fcb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	ee27 7a25 	vmul.f32	s14, s14, s11
 800fcba:	ee84 4a07 	vdiv.f32	s8, s8, s14
 800fcbe:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
 800fcc2:	ed8d 4a22 	vstr	s8, [sp, #136]	; 0x88
 800fcc6:	ee66 5a87 	vmul.f32	s11, s13, s14
 800fcca:	ee66 6a05 	vmul.f32	s13, s12, s10
 800fcce:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800fd00 <iNemoEngine_API_Update+0x478>
 800fcd2:	ee66 6a87 	vmul.f32	s13, s13, s14
 800fcd6:	ee24 6a86 	vmul.f32	s12, s9, s12
 800fcda:	eeb0 7a65 	vmov.f32	s14, s11
 800fcde:	e02d      	b.n	800fd3c <iNemoEngine_API_Update+0x4b4>
 800fce0:	eddf 7a05 	vldr	s15, [pc, #20]	; 800fcf8 <iNemoEngine_API_Update+0x470>
 800fce4:	ee38 8a27 	vadd.f32	s16, s16, s15
 800fce8:	e725      	b.n	800fb36 <iNemoEngine_API_Update+0x2ae>
 800fcea:	ab46      	add	r3, sp, #280	; 0x118
 800fcec:	9324      	str	r3, [sp, #144]	; 0x90
 800fcee:	e5da      	b.n	800f8a6 <iNemoEngine_API_Update+0x1e>
 800fcf0:	3a83126f 	.word	0x3a83126f
 800fcf4:	3d4ccccd 	.word	0x3d4ccccd
 800fcf8:	43b40000 	.word	0x43b40000
 800fcfc:	358637bd 	.word	0x358637bd
 800fd00:	3f333333 	.word	0x3f333333
 800fd04:	ed1f 5a03 	vldr	s10, [pc, #-12]	; 800fcfc <iNemoEngine_API_Update+0x474>
 800fd08:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800fd0c:	edd0 5a0b 	vldr	s11, [r0, #44]	; 0x2c
 800fd10:	ee37 7a05 	vadd.f32	s14, s14, s10
 800fd14:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
 800fd18:	ee84 7a07 	vdiv.f32	s14, s8, s14
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	8043      	strh	r3, [r0, #2]
 800fd20:	ee66 5aa5 	vmul.f32	s11, s13, s11
 800fd24:	ed8d 7a22 	vstr	s14, [sp, #136]	; 0x88
 800fd28:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 800fd2c:	ee26 7a87 	vmul.f32	s14, s13, s14
 800fd30:	ee66 6a05 	vmul.f32	s13, s12, s10
 800fd34:	ed1f 6a0e 	vldr	s12, [pc, #-56]	; 800fd00 <iNemoEngine_API_Update+0x478>
 800fd38:	ee24 6a86 	vmul.f32	s12, s9, s12
 800fd3c:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
 800fd40:	ee25 5a24 	vmul.f32	s10, s10, s9
 800fd44:	edcd 7a89 	vstr	s15, [sp, #548]	; 0x224
 800fd48:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 800fd4c:	edcd 7a8b 	vstr	s15, [sp, #556]	; 0x22c
 800fd50:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 800fd54:	4bdd      	ldr	r3, [pc, #884]	; (80100cc <iNemoEngine_API_Update+0x844>)
 800fd56:	9162      	str	r1, [sp, #392]	; 0x188
 800fd58:	a8f8      	add	r0, sp, #992	; 0x3e0
 800fd5a:	9163      	str	r1, [sp, #396]	; 0x18c
 800fd5c:	9164      	str	r1, [sp, #400]	; 0x190
 800fd5e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800fd62:	2100      	movs	r1, #0
 800fd64:	4605      	mov	r5, r0
 800fd66:	9367      	str	r3, [sp, #412]	; 0x19c
 800fd68:	9019      	str	r0, [sp, #100]	; 0x64
 800fd6a:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 800fd6e:	edcd 5a84 	vstr	s11, [sp, #528]	; 0x210
 800fd72:	edcd 5a85 	vstr	s11, [sp, #532]	; 0x214
 800fd76:	ed8d 7a86 	vstr	s14, [sp, #536]	; 0x218
 800fd7a:	ed8d 7a87 	vstr	s14, [sp, #540]	; 0x21c
 800fd7e:	ed8d 7a88 	vstr	s14, [sp, #544]	; 0x220
 800fd82:	edcd 6a8c 	vstr	s13, [sp, #560]	; 0x230
 800fd86:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 800fd8a:	ed8d 5a8e 	vstr	s10, [sp, #568]	; 0x238
 800fd8e:	edcd 7a5f 	vstr	s15, [sp, #380]	; 0x17c
 800fd92:	edcd 7a60 	vstr	s15, [sp, #384]	; 0x180
 800fd96:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 800fd9a:	f006 f9c1 	bl	8016120 <memset>
 800fd9e:	9b06      	ldr	r3, [sp, #24]
 800fda0:	7b5a      	ldrb	r2, [r3, #13]
 800fda2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fda6:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 800fdaa:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
 800fdae:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 800fdb2:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
 800fdb6:	f8c5 3178 	str.w	r3, [r5, #376]	; 0x178
 800fdba:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
 800fdbe:	2a00      	cmp	r2, #0
 800fdc0:	f001 8124 	beq.w	801100c <iNemoEngine_API_Update+0x1784>
 800fdc4:	ed94 8a01 	vldr	s16, [r4, #4]
 800fdc8:	edd4 8a00 	vldr	s17, [r4]
 800fdcc:	ed94 ca02 	vldr	s24, [r4, #8]
 800fdd0:	ee28 9a08 	vmul.f32	s18, s16, s16
 800fdd4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800fdd8:	eea8 9aa8 	vfma.f32	s18, s17, s17
 800fddc:	ee68 5a27 	vmul.f32	s11, s16, s15
 800fde0:	eeac 9a0c 	vfma.f32	s18, s24, s24
 800fde4:	ee6c 6a27 	vmul.f32	s13, s24, s15
 800fde8:	eef1 cac9 	vsqrt.f32	s25, s18
 800fdec:	ee3c 5a0c 	vadd.f32	s10, s24, s24
 800fdf0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800fdf4:	ee38 6aa8 	vadd.f32	s12, s17, s17
 800fdf8:	ee38 7a08 	vadd.f32	s14, s16, s16
 800fdfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fdfe:	ed94 aa04 	vldr	s20, [r4, #16]
 800fe02:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 800fe06:	eef1 7a4a 	vneg.f32	s15, s20
 800fe0a:	edd4 9a05 	vldr	s19, [r4, #20]
 800fe0e:	edd4 aa03 	vldr	s21, [r4, #12]
 800fe12:	ed83 5a01 	vstr	s10, [r3, #4]
 800fe16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fe1a:	edc3 5a02 	vstr	s11, [r3, #8]
 800fe1e:	edc3 7a05 	vstr	s15, [r3, #20]
 800fe22:	eef1 7a69 	vneg.f32	s15, s19
 800fe26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fe2a:	edc3 6a0c 	vstr	s13, [r3, #48]	; 0x30
 800fe2e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 800fe32:	eef1 7a6a 	vneg.f32	s15, s21
 800fe36:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fe3a:	ed83 6a0e 	vstr	s12, [r3, #56]	; 0x38
 800fe3e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 800fe42:	ee79 7aa9 	vadd.f32	s15, s19, s19
 800fe46:	ed83 7a18 	vstr	s14, [r3, #96]	; 0x60
 800fe4a:	edc3 7a04 	vstr	s15, [r3, #16]
 800fe4e:	ee7a 7aaa 	vadd.f32	s15, s21, s21
 800fe52:	2230      	movs	r2, #48	; 0x30
 800fe54:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 800fe58:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 800fe5c:	2100      	movs	r1, #0
 800fe5e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 800fe62:	a88f      	add	r0, sp, #572	; 0x23c
 800fe64:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 800fe68:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
 800fe6c:	933c      	str	r3, [sp, #240]	; 0xf0
 800fe6e:	f006 f957 	bl	8016120 <memset>
 800fe72:	9a06      	ldr	r2, [sp, #24]
 800fe74:	edd2 7a07 	vldr	s15, [r2, #28]
 800fe78:	ed92 da06 	vldr	s26, [r2, #24]
 800fe7c:	f892 31ac 	ldrb.w	r3, [r2, #428]	; 0x1ac
 800fe80:	ee6b 7a27 	vmul.f32	s15, s22, s15
 800fe84:	ee2b da0d 	vmul.f32	s26, s22, s26
 800fe88:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800fe8c:	edd2 7a08 	vldr	s15, [r2, #32]
 800fe90:	ee6b 7a27 	vmul.f32	s15, s22, s15
 800fe94:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	f043 8025 	bne.w	8012ee8 <iNemoEngine_API_Update+0x3660>
 800fe9e:	4613      	mov	r3, r2
 800fea0:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 800fea4:	9225      	str	r2, [sp, #148]	; 0x94
 800fea6:	f603 1244 	addw	r2, r3, #2372	; 0x944
 800feaa:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800feae:	9226      	str	r2, [sp, #152]	; 0x98
 800feb0:	9327      	str	r3, [sp, #156]	; 0x9c
 800feb2:	9a06      	ldr	r2, [sp, #24]
 800feb4:	f892 3318 	ldrb.w	r3, [r2, #792]	; 0x318
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f042 84db 	bne.w	8012874 <iNemoEngine_API_Update+0x2fec>
 800febe:	4613      	mov	r3, r2
 800fec0:	f502 6597 	add.w	r5, r2, #1208	; 0x4b8
 800fec4:	f202 47b4 	addw	r7, r2, #1204	; 0x4b4
 800fec8:	f502 66c5 	add.w	r6, r2, #1576	; 0x628
 800fecc:	f202 6824 	addw	r8, r2, #1572	; 0x624
 800fed0:	f203 7394 	addw	r3, r3, #1940	; 0x794
 800fed4:	f502 62f3 	add.w	r2, r2, #1944	; 0x798
 800fed8:	9215      	str	r2, [sp, #84]	; 0x54
 800feda:	931b      	str	r3, [sp, #108]	; 0x6c
 800fedc:	9b06      	ldr	r3, [sp, #24]
 800fede:	f503 6213 	add.w	r2, r3, #2352	; 0x930
 800fee2:	ed92 6a00 	vldr	s12, [r2]
 800fee6:	921c      	str	r2, [sp, #112]	; 0x70
 800fee8:	f603 1134 	addw	r1, r3, #2356	; 0x934
 800feec:	f603 1038 	addw	r0, r3, #2360	; 0x938
 800fef0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 800fef4:	edd3 7a00 	vldr	s15, [r3]
 800fef8:	edd1 6a00 	vldr	s13, [r1]
 800fefc:	ed90 7a00 	vldr	s14, [r0]
 800ff00:	931f      	str	r3, [sp, #124]	; 0x7c
 800ff02:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ff06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff0a:	911d      	str	r1, [sp, #116]	; 0x74
 800ff0c:	901e      	str	r0, [sp, #120]	; 0x78
 800ff0e:	ed8d 6a4e 	vstr	s12, [sp, #312]	; 0x138
 800ff12:	edcd 6a4f 	vstr	s13, [sp, #316]	; 0x13c
 800ff16:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800ff1a:	edcd 7a51 	vstr	s15, [sp, #324]	; 0x144
 800ff1e:	f04f 0300 	mov.w	r3, #0
 800ff22:	d13a      	bne.n	800ff9a <iNemoEngine_API_Update+0x712>
 800ff24:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ff28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff2c:	d135      	bne.n	800ff9a <iNemoEngine_API_Update+0x712>
 800ff2e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ff32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff36:	d130      	bne.n	800ff9a <iNemoEngine_API_Update+0x712>
 800ff38:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ff3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff40:	d12b      	bne.n	800ff9a <iNemoEngine_API_Update+0x712>
 800ff42:	9a06      	ldr	r2, [sp, #24]
 800ff44:	934e      	str	r3, [sp, #312]	; 0x138
 800ff46:	934f      	str	r3, [sp, #316]	; 0x13c
 800ff48:	9350      	str	r3, [sp, #320]	; 0x140
 800ff4a:	4b61      	ldr	r3, [pc, #388]	; (80100d0 <iNemoEngine_API_Update+0x848>)
 800ff4c:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 800ff50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ff54:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 800ff58:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 800ff5c:	9351      	str	r3, [sp, #324]	; 0x144
 800ff5e:	2100      	movs	r1, #0
 800ff60:	4613      	mov	r3, r2
 800ff62:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 800ff66:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
 800ff6a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ff6e:	f006 f8d7 	bl	8016120 <memset>
 800ff72:	9a06      	ldr	r2, [sp, #24]
 800ff74:	4b57      	ldr	r3, [pc, #348]	; (80100d4 <iNemoEngine_API_Update+0x84c>)
 800ff76:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
 800ff7a:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 800ff7e:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
 800ff82:	f8c2 324c 	str.w	r3, [r2, #588]	; 0x24c
 800ff86:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
 800ff8a:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
 800ff8e:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
 800ff92:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
 800ff96:	f8c2 3314 	str.w	r3, [r2, #788]	; 0x314
 800ff9a:	eddf 7a4f 	vldr	s15, [pc, #316]	; 80100d8 <iNemoEngine_API_Update+0x850>
 800ff9e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800ffa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa6:	f100 87e0 	bmi.w	8010f6a <iNemoEngine_API_Update+0x16e2>
 800ffaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ffae:	ee7c 6ac7 	vsub.f32	s13, s25, s14
 800ffb2:	eec7 7a2c 	vdiv.f32	s15, s14, s25
 800ffb6:	eeb0 7ae6 	vabs.f32	s14, s13
 800ffba:	eef0 6a47 	vmov.f32	s13, s14
 800ffbe:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 800ffc2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ffc6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ffca:	ed8d 7a21 	vstr	s14, [sp, #132]	; 0x84
 800ffce:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 800ffd2:	edd4 6a00 	vldr	s13, [r4]
 800ffd6:	ed94 6a01 	vldr	s12, [r4, #4]
 800ffda:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 800ffde:	eeaa 7aaa 	vfma.f32	s14, s21, s21
 800ffe2:	4628      	mov	r0, r5
 800ffe4:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800ffe8:	eea9 7aa9 	vfma.f32	s14, s19, s19
 800ffec:	ee67 6a86 	vmul.f32	s13, s15, s12
 800fff0:	ed8d 6a2d 	vstr	s12, [sp, #180]	; 0xb4
 800fff4:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80100d8 <iNemoEngine_API_Update+0x850>
 800fff8:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 800fffc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8010000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010004:	bf54      	ite	pl
 8010006:	eeb1 9ac7 	vsqrtpl.f32	s18, s14
 801000a:	ed9f 9a34 	vldrmi	s18, [pc, #208]	; 80100dc <iNemoEngine_API_Update+0x854>
 801000e:	ed94 5a02 	vldr	s10, [r4, #8]
 8010012:	edd7 3a00 	vldr	s7, [r7]
 8010016:	ed8d 5a2a 	vstr	s10, [sp, #168]	; 0xa8
 801001a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 801001e:	ee83 7a09 	vdiv.f32	s14, s6, s18
 8010022:	ee65 7a27 	vmul.f32	s15, s10, s15
 8010026:	ee2a 6a07 	vmul.f32	s12, s20, s14
 801002a:	eeb0 0a63 	vmov.f32	s0, s7
 801002e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8010032:	ed8d 6a41 	vstr	s12, [sp, #260]	; 0x104
 8010036:	ee2a 6a87 	vmul.f32	s12, s21, s14
 801003a:	ee29 7a87 	vmul.f32	s14, s19, s14
 801003e:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010042:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8010046:	eee7 6a87 	vfma.f32	s13, s15, s14
 801004a:	ed8d 7a42 	vstr	s14, [sp, #264]	; 0x108
 801004e:	edcd 5a3d 	vstr	s11, [sp, #244]	; 0xf4
 8010052:	ed8d 6a40 	vstr	s12, [sp, #256]	; 0x100
 8010056:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 801005a:	f7fd ffa5 	bl	800dfa8 <dataDerivative5>
 801005e:	edd8 fa00 	vldr	s31, [r8]
 8010062:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
 8010066:	4630      	mov	r0, r6
 8010068:	eeb0 0a6f 	vmov.f32	s0, s31
 801006c:	f7fd ff9c 	bl	800dfa8 <dataDerivative5>
 8010070:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010072:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010074:	ed93 fa00 	vldr	s30, [r3]
 8010078:	eeb0 ba40 	vmov.f32	s22, s0
 801007c:	eeb0 0a4f 	vmov.f32	s0, s30
 8010080:	f7fd ff92 	bl	800dfa8 <dataDerivative5>
 8010084:	eec3 7a23 	vdiv.f32	s15, s6, s7
 8010088:	eef0 da40 	vmov.f32	s27, s0
 801008c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010090:	ee27 8a88 	vmul.f32	s16, s15, s16
 8010094:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8010098:	eddf 7a11 	vldr	s15, [pc, #68]	; 80100e0 <iNemoEngine_API_Update+0x858>
 801009c:	eeb0 7ae8 	vabs.f32	s14, s17
 80100a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a8:	d52c      	bpl.n	8010104 <iNemoEngine_API_Update+0x87c>
 80100aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80100ae:	eef4 8ae7 	vcmpe.f32	s17, s15
 80100b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b6:	f281 8756 	bge.w	8011f66 <iNemoEngine_API_Update+0x26de>
 80100ba:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80100be:	eef4 8ac7 	vcmpe.f32	s17, s14
 80100c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c6:	f303 80bc 	bgt.w	8013242 <iNemoEngine_API_Update+0x39ba>
 80100ca:	e00b      	b.n	80100e4 <iNemoEngine_API_Update+0x85c>
 80100cc:	3a9d4952 	.word	0x3a9d4952
 80100d0:	bf666666 	.word	0xbf666666
 80100d4:	40a00000 	.word	0x40a00000
 80100d8:	3c23d70a 	.word	0x3c23d70a
 80100dc:	3dcccccd 	.word	0x3dcccccd
 80100e0:	4b000000 	.word	0x4b000000
 80100e4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80100e8:	ee17 0a90 	vmov	r0, s15
 80100ec:	f7f0 fa2c 	bl	8000548 <__aeabi_f2d>
 80100f0:	ec41 0b10 	vmov	d0, r0, r1
 80100f4:	f00a f858 	bl	801a1a8 <ceil>
 80100f8:	ec51 0b10 	vmov	r0, r1, d0
 80100fc:	f7f0 fd74 	bl	8000be8 <__aeabi_d2f>
 8010100:	ee08 0a90 	vmov	s17, r0
 8010104:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 80100e0 <iNemoEngine_API_Update+0x858>
 8010108:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 801010c:	eeb0 7ac8 	vabs.f32	s14, s16
 8010110:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010118:	d51f      	bpl.n	801015a <iNemoEngine_API_Update+0x8d2>
 801011a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801011e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010126:	f281 870c 	bge.w	8011f42 <iNemoEngine_API_Update+0x26ba>
 801012a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801012e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010136:	f303 8080 	bgt.w	801323a <iNemoEngine_API_Update+0x39b2>
 801013a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801013e:	ee17 0a90 	vmov	r0, s15
 8010142:	f7f0 fa01 	bl	8000548 <__aeabi_f2d>
 8010146:	ec41 0b10 	vmov	d0, r0, r1
 801014a:	f00a f82d 	bl	801a1a8 <ceil>
 801014e:	ec51 0b10 	vmov	r0, r1, d0
 8010152:	f7f0 fd49 	bl	8000be8 <__aeabi_d2f>
 8010156:	ee08 0a10 	vmov	s16, r0
 801015a:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 80100e0 <iNemoEngine_API_Update+0x858>
 801015e:	ed8d 8a44 	vstr	s16, [sp, #272]	; 0x110
 8010162:	eeb0 7acc 	vabs.f32	s14, s24
 8010166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801016a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016e:	d51f      	bpl.n	80101b0 <iNemoEngine_API_Update+0x928>
 8010170:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010174:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801017c:	f281 86cf 	bge.w	8011f1e <iNemoEngine_API_Update+0x2696>
 8010180:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010184:	eeb4 cac7 	vcmpe.f32	s24, s14
 8010188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801018c:	f303 8065 	bgt.w	801325a <iNemoEngine_API_Update+0x39d2>
 8010190:	ee7c 7a67 	vsub.f32	s15, s24, s15
 8010194:	ee17 0a90 	vmov	r0, s15
 8010198:	f7f0 f9d6 	bl	8000548 <__aeabi_f2d>
 801019c:	ec41 0b10 	vmov	d0, r0, r1
 80101a0:	f00a f802 	bl	801a1a8 <ceil>
 80101a4:	ec51 0b10 	vmov	r0, r1, d0
 80101a8:	f7f0 fd1e 	bl	8000be8 <__aeabi_d2f>
 80101ac:	ee0c 0a10 	vmov	s24, r0
 80101b0:	9b06      	ldr	r3, [sp, #24]
 80101b2:	ed8d ca45 	vstr	s24, [sp, #276]	; 0x114
 80101b6:	f893 04b1 	ldrb.w	r0, [r3, #1201]	; 0x4b1
 80101ba:	1e43      	subs	r3, r0, #1
 80101bc:	b25b      	sxtb	r3, r3
 80101be:	2b00      	cmp	r3, #0
 80101c0:	dd18      	ble.n	80101f4 <iNemoEngine_API_Update+0x96c>
 80101c2:	9c06      	ldr	r4, [sp, #24]
 80101c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80101c8:	1e81      	subs	r1, r0, #2
 80101ca:	009b      	lsls	r3, r3, #2
 80101cc:	b2c9      	uxtb	r1, r1
 80101ce:	f504 6294 	add.w	r2, r4, #1184	; 0x4a0
 80101d2:	441a      	add	r2, r3
 80101d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80101d8:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 80101dc:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 80101e0:	4423      	add	r3, r4
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	60da      	str	r2, [r3, #12]
 80101e6:	685a      	ldr	r2, [r3, #4]
 80101e8:	611a      	str	r2, [r3, #16]
 80101ea:	689a      	ldr	r2, [r3, #8]
 80101ec:	615a      	str	r2, [r3, #20]
 80101ee:	3b0c      	subs	r3, #12
 80101f0:	428b      	cmp	r3, r1
 80101f2:	d1f6      	bne.n	80101e2 <iNemoEngine_API_Update+0x95a>
 80101f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80101f8:	edc5 8a00 	vstr	s17, [r5]
 80101fc:	eec7 8aaf 	vdiv.f32	s17, s15, s31
 8010200:	9a06      	ldr	r2, [sp, #24]
 8010202:	f202 43bc 	addw	r3, r2, #1212	; 0x4bc
 8010206:	ed83 8a00 	vstr	s16, [r3]
 801020a:	f502 6398 	add.w	r3, r2, #1216	; 0x4c0
 801020e:	ed83 ca00 	vstr	s24, [r3]
 8010212:	f892 34b0 	ldrb.w	r3, [r2, #1200]	; 0x4b0
 8010216:	ed5f 7a4e 	vldr	s15, [pc, #-312]	; 80100e0 <iNemoEngine_API_Update+0x858>
 801021a:	ee2a 8aa8 	vmul.f32	s16, s21, s17
 801021e:	3301      	adds	r3, #1
 8010220:	b2db      	uxtb	r3, r3
 8010222:	eeb0 7ac8 	vabs.f32	s14, s16
 8010226:	4298      	cmp	r0, r3
 8010228:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801022c:	bf28      	it	cs
 801022e:	4618      	movcs	r0, r3
 8010230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010234:	ee2a ca28 	vmul.f32	s24, s20, s17
 8010238:	f882 04b0 	strb.w	r0, [r2, #1200]	; 0x4b0
 801023c:	ee69 8aa8 	vmul.f32	s17, s19, s17
 8010240:	d51f      	bpl.n	8010282 <iNemoEngine_API_Update+0x9fa>
 8010242:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010246:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801024a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801024e:	f281 87cb 	bge.w	80121e8 <iNemoEngine_API_Update+0x2960>
 8010252:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010256:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801025a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801025e:	f303 8000 	bgt.w	8013262 <iNemoEngine_API_Update+0x39da>
 8010262:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010266:	ee17 0a90 	vmov	r0, s15
 801026a:	f7f0 f96d 	bl	8000548 <__aeabi_f2d>
 801026e:	ec41 0b10 	vmov	d0, r0, r1
 8010272:	f009 ff99 	bl	801a1a8 <ceil>
 8010276:	ec51 0b10 	vmov	r0, r1, d0
 801027a:	f7f0 fcb5 	bl	8000be8 <__aeabi_d2f>
 801027e:	ee08 0a10 	vmov	s16, r0
 8010282:	ed5f 7a69 	vldr	s15, [pc, #-420]	; 80100e0 <iNemoEngine_API_Update+0x858>
 8010286:	ed8d 8a43 	vstr	s16, [sp, #268]	; 0x10c
 801028a:	eeb0 7acc 	vabs.f32	s14, s24
 801028e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010296:	d51f      	bpl.n	80102d8 <iNemoEngine_API_Update+0xa50>
 8010298:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801029c:	eeb4 cae7 	vcmpe.f32	s24, s15
 80102a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a4:	f281 878e 	bge.w	80121c4 <iNemoEngine_API_Update+0x293c>
 80102a8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80102ac:	eeb4 cac7 	vcmpe.f32	s24, s14
 80102b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102b4:	f302 87cd 	bgt.w	8013252 <iNemoEngine_API_Update+0x39ca>
 80102b8:	ee7c 7a67 	vsub.f32	s15, s24, s15
 80102bc:	ee17 0a90 	vmov	r0, s15
 80102c0:	f7f0 f942 	bl	8000548 <__aeabi_f2d>
 80102c4:	ec41 0b10 	vmov	d0, r0, r1
 80102c8:	f009 ff6e 	bl	801a1a8 <ceil>
 80102cc:	ec51 0b10 	vmov	r0, r1, d0
 80102d0:	f7f0 fc8a 	bl	8000be8 <__aeabi_d2f>
 80102d4:	ee0c 0a10 	vmov	s24, r0
 80102d8:	ed5f 7a7f 	vldr	s15, [pc, #-508]	; 80100e0 <iNemoEngine_API_Update+0x858>
 80102dc:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 80102e0:	eeb0 7ae8 	vabs.f32	s14, s17
 80102e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80102e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ec:	d51f      	bpl.n	801032e <iNemoEngine_API_Update+0xaa6>
 80102ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80102f2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80102f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102fa:	f281 8751 	bge.w	80121a0 <iNemoEngine_API_Update+0x2918>
 80102fe:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010302:	eef4 8ac7 	vcmpe.f32	s17, s14
 8010306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801030a:	f302 878e 	bgt.w	801322a <iNemoEngine_API_Update+0x39a2>
 801030e:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8010312:	ee17 0a90 	vmov	r0, s15
 8010316:	f7f0 f917 	bl	8000548 <__aeabi_f2d>
 801031a:	ec41 0b10 	vmov	d0, r0, r1
 801031e:	f009 ff43 	bl	801a1a8 <ceil>
 8010322:	ec51 0b10 	vmov	r0, r1, d0
 8010326:	f7f0 fc5f 	bl	8000be8 <__aeabi_d2f>
 801032a:	ee08 0a90 	vmov	s17, r0
 801032e:	9b06      	ldr	r3, [sp, #24]
 8010330:	edcd 8a45 	vstr	s17, [sp, #276]	; 0x114
 8010334:	f893 0621 	ldrb.w	r0, [r3, #1569]	; 0x621
 8010338:	1e43      	subs	r3, r0, #1
 801033a:	b25b      	sxtb	r3, r3
 801033c:	2b00      	cmp	r3, #0
 801033e:	dd18      	ble.n	8010372 <iNemoEngine_API_Update+0xaea>
 8010340:	9c06      	ldr	r4, [sp, #24]
 8010342:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010346:	1e81      	subs	r1, r0, #2
 8010348:	009b      	lsls	r3, r3, #2
 801034a:	b2c9      	uxtb	r1, r1
 801034c:	f504 62c2 	add.w	r2, r4, #1552	; 0x610
 8010350:	441a      	add	r2, r3
 8010352:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010356:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 801035a:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 801035e:	4423      	add	r3, r4
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	60da      	str	r2, [r3, #12]
 8010364:	685a      	ldr	r2, [r3, #4]
 8010366:	611a      	str	r2, [r3, #16]
 8010368:	689a      	ldr	r2, [r3, #8]
 801036a:	615a      	str	r2, [r3, #20]
 801036c:	3b0c      	subs	r3, #12
 801036e:	4299      	cmp	r1, r3
 8010370:	d1f6      	bne.n	8010360 <iNemoEngine_API_Update+0xad8>
 8010372:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010376:	ed86 8a00 	vstr	s16, [r6]
 801037a:	ee87 8a8f 	vdiv.f32	s16, s15, s30
 801037e:	9a06      	ldr	r2, [sp, #24]
 8010380:	f202 632c 	addw	r3, r2, #1580	; 0x62c
 8010384:	ed83 ca00 	vstr	s24, [r3]
 8010388:	f502 63c6 	add.w	r3, r2, #1584	; 0x630
 801038c:	edc3 8a00 	vstr	s17, [r3]
 8010390:	f892 3620 	ldrb.w	r3, [r2, #1568]	; 0x620
 8010394:	ed5f 7aae 	vldr	s15, [pc, #-696]	; 80100e0 <iNemoEngine_API_Update+0x858>
 8010398:	ee68 8a0e 	vmul.f32	s17, s16, s28
 801039c:	3301      	adds	r3, #1
 801039e:	b2db      	uxtb	r3, r3
 80103a0:	eeb0 7ae8 	vabs.f32	s14, s17
 80103a4:	4298      	cmp	r0, r3
 80103a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80103aa:	bf28      	it	cs
 80103ac:	4618      	movcs	r0, r3
 80103ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b2:	ee28 ca2e 	vmul.f32	s24, s16, s29
 80103b6:	f882 0620 	strb.w	r0, [r2, #1568]	; 0x620
 80103ba:	ee28 8a2b 	vmul.f32	s16, s16, s23
 80103be:	d51f      	bpl.n	8010400 <iNemoEngine_API_Update+0xb78>
 80103c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80103c4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80103c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103cc:	f281 86d6 	bge.w	801217c <iNemoEngine_API_Update+0x28f4>
 80103d0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80103d4:	eef4 8ac7 	vcmpe.f32	s17, s14
 80103d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103dc:	f302 8745 	bgt.w	801326a <iNemoEngine_API_Update+0x39e2>
 80103e0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80103e4:	ee17 0a90 	vmov	r0, s15
 80103e8:	f7f0 f8ae 	bl	8000548 <__aeabi_f2d>
 80103ec:	ec41 0b10 	vmov	d0, r0, r1
 80103f0:	f009 feda 	bl	801a1a8 <ceil>
 80103f4:	ec51 0b10 	vmov	r0, r1, d0
 80103f8:	f7f0 fbf6 	bl	8000be8 <__aeabi_d2f>
 80103fc:	ee08 0a90 	vmov	s17, r0
 8010400:	ed5f 7ac9 	vldr	s15, [pc, #-804]	; 80100e0 <iNemoEngine_API_Update+0x858>
 8010404:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 8010408:	eeb0 7acc 	vabs.f32	s14, s24
 801040c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010414:	d51f      	bpl.n	8010456 <iNemoEngine_API_Update+0xbce>
 8010416:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801041a:	eeb4 cae7 	vcmpe.f32	s24, s15
 801041e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010422:	f281 871d 	bge.w	8012260 <iNemoEngine_API_Update+0x29d8>
 8010426:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801042a:	eeb4 cac7 	vcmpe.f32	s24, s14
 801042e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010432:	f302 86fe 	bgt.w	8013232 <iNemoEngine_API_Update+0x39aa>
 8010436:	ee7c 7a67 	vsub.f32	s15, s24, s15
 801043a:	ee17 0a90 	vmov	r0, s15
 801043e:	f7f0 f883 	bl	8000548 <__aeabi_f2d>
 8010442:	ec41 0b10 	vmov	d0, r0, r1
 8010446:	f009 feaf 	bl	801a1a8 <ceil>
 801044a:	ec51 0b10 	vmov	r0, r1, d0
 801044e:	f7f0 fbcb 	bl	8000be8 <__aeabi_d2f>
 8010452:	ee0c 0a10 	vmov	s24, r0
 8010456:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 80100e0 <iNemoEngine_API_Update+0x858>
 801045a:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 801045e:	eeb0 7ac8 	vabs.f32	s14, s16
 8010462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046a:	d51f      	bpl.n	80104ac <iNemoEngine_API_Update+0xc24>
 801046c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010470:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010478:	f281 86c8 	bge.w	801220c <iNemoEngine_API_Update+0x2984>
 801047c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010480:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010488:	f302 86df 	bgt.w	801324a <iNemoEngine_API_Update+0x39c2>
 801048c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010490:	ee17 0a90 	vmov	r0, s15
 8010494:	f7f0 f858 	bl	8000548 <__aeabi_f2d>
 8010498:	ec41 0b10 	vmov	d0, r0, r1
 801049c:	f009 fe84 	bl	801a1a8 <ceil>
 80104a0:	ec51 0b10 	vmov	r0, r1, d0
 80104a4:	f7f0 fba0 	bl	8000be8 <__aeabi_d2f>
 80104a8:	ee08 0a10 	vmov	s16, r0
 80104ac:	9b06      	ldr	r3, [sp, #24]
 80104ae:	ed8d 8a45 	vstr	s16, [sp, #276]	; 0x114
 80104b2:	f893 0791 	ldrb.w	r0, [r3, #1937]	; 0x791
 80104b6:	1e43      	subs	r3, r0, #1
 80104b8:	b25b      	sxtb	r3, r3
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	dd18      	ble.n	80104f0 <iNemoEngine_API_Update+0xc68>
 80104be:	9c06      	ldr	r4, [sp, #24]
 80104c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80104c4:	1e81      	subs	r1, r0, #2
 80104c6:	009b      	lsls	r3, r3, #2
 80104c8:	b2c9      	uxtb	r1, r1
 80104ca:	f504 62f0 	add.w	r2, r4, #1920	; 0x780
 80104ce:	441a      	add	r2, r3
 80104d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80104d4:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 80104d8:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 80104dc:	4423      	add	r3, r4
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	60da      	str	r2, [r3, #12]
 80104e2:	685a      	ldr	r2, [r3, #4]
 80104e4:	611a      	str	r2, [r3, #16]
 80104e6:	689a      	ldr	r2, [r3, #8]
 80104e8:	615a      	str	r2, [r3, #20]
 80104ea:	3b0c      	subs	r3, #12
 80104ec:	428b      	cmp	r3, r1
 80104ee:	d1f6      	bne.n	80104de <iNemoEngine_API_Update+0xc56>
 80104f0:	9c06      	ldr	r4, [sp, #24]
 80104f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80104f4:	f204 729c 	addw	r2, r4, #1948	; 0x79c
 80104f8:	edc3 8a00 	vstr	s17, [r3]
 80104fc:	922e      	str	r2, [sp, #184]	; 0xb8
 80104fe:	ed82 ca00 	vstr	s24, [r2]
 8010502:	f504 62f4 	add.w	r2, r4, #1952	; 0x7a0
 8010506:	ed82 8a00 	vstr	s16, [r2]
 801050a:	f894 3790 	ldrb.w	r3, [r4, #1936]	; 0x790
 801050e:	922f      	str	r2, [sp, #188]	; 0xbc
 8010510:	3301      	adds	r3, #1
 8010512:	b2db      	uxtb	r3, r3
 8010514:	4298      	cmp	r0, r3
 8010516:	bf28      	it	cs
 8010518:	4618      	movcs	r0, r3
 801051a:	f884 0790 	strb.w	r0, [r4, #1936]	; 0x790
 801051e:	aa68      	add	r2, sp, #416	; 0x1a0
 8010520:	a93d      	add	r1, sp, #244	; 0xf4
 8010522:	a840      	add	r0, sp, #256	; 0x100
 8010524:	f7fd fe26 	bl	800e174 <getRotationMatrix>
 8010528:	4623      	mov	r3, r4
 801052a:	f504 7247 	add.w	r2, r4, #796	; 0x31c
 801052e:	9229      	str	r2, [sp, #164]	; 0xa4
 8010530:	4614      	mov	r4, r2
 8010532:	aeae      	add	r6, sp, #696	; 0x2b8
 8010534:	f503 774f 	add.w	r7, r3, #828	; 0x33c
 8010538:	6820      	ldr	r0, [r4, #0]
 801053a:	6861      	ldr	r1, [r4, #4]
 801053c:	68a2      	ldr	r2, [r4, #8]
 801053e:	68e3      	ldr	r3, [r4, #12]
 8010540:	4635      	mov	r5, r6
 8010542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010544:	3410      	adds	r4, #16
 8010546:	42bc      	cmp	r4, r7
 8010548:	462e      	mov	r6, r5
 801054a:	d1f5      	bne.n	8010538 <iNemoEngine_API_Update+0xcb0>
 801054c:	6820      	ldr	r0, [r4, #0]
 801054e:	6028      	str	r0, [r5, #0]
 8010550:	9b06      	ldr	r3, [sp, #24]
 8010552:	edd3 7ac7 	vldr	s15, [r3, #796]	; 0x31c
 8010556:	ed93 7ac8 	vldr	s14, [r3, #800]	; 0x320
 801055a:	eef0 7ae7 	vabs.f32	s15, s15
 801055e:	eeb0 7ac7 	vabs.f32	s14, s14
 8010562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801056a:	f140 8543 	bpl.w	8010ff4 <iNemoEngine_API_Update+0x176c>
 801056e:	2604      	movs	r6, #4
 8010570:	2400      	movs	r4, #0
 8010572:	eef0 7a47 	vmov.f32	s15, s14
 8010576:	f04f 0c07 	mov.w	ip, #7
 801057a:	f04f 0e06 	mov.w	lr, #6
 801057e:	2103      	movs	r1, #3
 8010580:	4630      	mov	r0, r6
 8010582:	4623      	mov	r3, r4
 8010584:	2701      	movs	r7, #1
 8010586:	9a06      	ldr	r2, [sp, #24]
 8010588:	ed92 7ac9 	vldr	s14, [r2, #804]	; 0x324
 801058c:	eeb0 7ac7 	vabs.f32	s14, s14
 8010590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010598:	f340 8525 	ble.w	8010fe6 <iNemoEngine_API_Update+0x175e>
 801059c:	f04f 0c08 	mov.w	ip, #8
 80105a0:	2104      	movs	r1, #4
 80105a2:	f04f 0906 	mov.w	r9, #6
 80105a6:	f04f 0e07 	mov.w	lr, #7
 80105aa:	f04f 0803 	mov.w	r8, #3
 80105ae:	2605      	movs	r6, #5
 80105b0:	4660      	mov	r0, ip
 80105b2:	460c      	mov	r4, r1
 80105b4:	2200      	movs	r2, #0
 80105b6:	2301      	movs	r3, #1
 80105b8:	2702      	movs	r7, #2
 80105ba:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80105bc:	442c      	add	r4, r5
 80105be:	4428      	add	r0, r5
 80105c0:	ed90 7a00 	vldr	s14, [r0]
 80105c4:	edd4 6a00 	vldr	s13, [r4]
 80105c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105cc:	a8ae      	add	r0, sp, #696	; 0x2b8
 80105ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80105d2:	acae      	add	r4, sp, #696	; 0x2b8
 80105d4:	adae      	add	r5, sp, #696	; 0x2b8
 80105d6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80105da:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80105de:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 80105e2:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80105e6:	edc0 7a00 	vstr	s15, [r0]
 80105ea:	edd5 7a00 	vldr	s15, [r5]
 80105ee:	ed94 7a00 	vldr	s14, [r4]
 80105f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80105f6:	edc4 6a00 	vstr	s13, [r4]
 80105fa:	ed90 6a00 	vldr	s12, [r0]
 80105fe:	a8ae      	add	r0, sp, #696	; 0x2b8
 8010600:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8010604:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8010608:	ed90 7a00 	vldr	s14, [r0]
 801060c:	edd5 7a00 	vldr	s15, [r5]
 8010610:	eee6 7a47 	vfms.f32	s15, s12, s14
 8010614:	00b4      	lsls	r4, r6, #2
 8010616:	9403      	str	r4, [sp, #12]
 8010618:	ea4f 048c 	mov.w	r4, ip, lsl #2
 801061c:	edc5 7a00 	vstr	s15, [r5]
 8010620:	ed90 7a00 	vldr	s14, [r0]
 8010624:	a8ae      	add	r0, sp, #696	; 0x2b8
 8010626:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801062a:	edd0 7a00 	vldr	s15, [r0]
 801062e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010632:	4626      	mov	r6, r4
 8010634:	acae      	add	r4, sp, #696	; 0x2b8
 8010636:	eb04 048e 	add.w	r4, r4, lr, lsl #2
 801063a:	edc0 7a00 	vstr	s15, [r0]
 801063e:	a8ae      	add	r0, sp, #696	; 0x2b8
 8010640:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8010644:	edd0 5a00 	vldr	s11, [r0]
 8010648:	ed94 7a00 	vldr	s14, [r4]
 801064c:	eea6 7a65 	vfms.f32	s14, s12, s11
 8010650:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8010654:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8010658:	eef0 7ae7 	vabs.f32	s15, s15
 801065c:	ed84 7a00 	vstr	s14, [r4]
 8010660:	ed90 6a00 	vldr	s12, [r0]
 8010664:	a8ae      	add	r0, sp, #696	; 0x2b8
 8010666:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 801066a:	ed90 7a00 	vldr	s14, [r0]
 801066e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8010672:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8010676:	ea4f 048e 	mov.w	r4, lr, lsl #2
 801067a:	ed80 7a00 	vstr	s14, [r0]
 801067e:	ed95 7a00 	vldr	s14, [r5]
 8010682:	eeb0 7ac7 	vabs.f32	s14, s14
 8010686:	eef4 7ac7 	vcmpe.f32	s15, s14
 801068a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801068e:	ea4f 0581 	mov.w	r5, r1, lsl #2
 8010692:	dd0b      	ble.n	80106ac <iNemoEngine_API_Update+0xe24>
 8010694:	4618      	mov	r0, r3
 8010696:	4645      	mov	r5, r8
 8010698:	4613      	mov	r3, r2
 801069a:	464c      	mov	r4, r9
 801069c:	46d4      	mov	ip, sl
 801069e:	4602      	mov	r2, r0
 80106a0:	ea4f 0881 	mov.w	r8, r1, lsl #2
 80106a4:	ea4f 098e 	mov.w	r9, lr, lsl #2
 80106a8:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 80106ac:	a9ae      	add	r1, sp, #696	; 0x2b8
 80106ae:	eb01 0008 	add.w	r0, r1, r8
 80106b2:	440d      	add	r5, r1
 80106b4:	ed90 7a00 	vldr	s14, [r0]
 80106b8:	edd5 7a00 	vldr	s15, [r5]
 80106bc:	ee87 4a27 	vdiv.f32	s8, s14, s15
 80106c0:	440c      	add	r4, r1
 80106c2:	eb01 0809 	add.w	r8, r1, r9
 80106c6:	440e      	add	r6, r1
 80106c8:	46b6      	mov	lr, r6
 80106ca:	460e      	mov	r6, r1
 80106cc:	9903      	ldr	r1, [sp, #12]
 80106ce:	4431      	add	r1, r6
 80106d0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80106d4:	ed80 4a00 	vstr	s8, [r0]
 80106d8:	ed94 7a00 	vldr	s14, [r4]
 80106dc:	edd8 7a00 	vldr	s15, [r8]
 80106e0:	eee4 7a47 	vfms.f32	s15, s8, s14
 80106e4:	a8ae      	add	r0, sp, #696	; 0x2b8
 80106e6:	edc8 7a00 	vstr	s15, [r8]
 80106ea:	edd1 2a00 	vldr	s5, [r1]
 80106ee:	ed95 7a00 	vldr	s14, [r5]
 80106f2:	ed94 1a00 	vldr	s2, [r4]
 80106f6:	edde 1a00 	vldr	s3, [lr]
 80106fa:	f50b 61b2 	add.w	r1, fp, #1424	; 0x590
 80106fe:	4469      	add	r1, sp
 8010700:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8010704:	ee83 2a87 	vdiv.f32	s4, s7, s14
 8010708:	ed91 7a00 	vldr	s14, [r1]
 801070c:	a9ae      	add	r1, sp, #696	; 0x2b8
 801070e:	448b      	add	fp, r1
 8010710:	f50c 61b2 	add.w	r1, ip, #1424	; 0x590
 8010714:	eec3 0aa7 	vdiv.f32	s1, s7, s15
 8010718:	4469      	add	r1, sp
 801071a:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 801071e:	4484      	add	ip, r0
 8010720:	4450      	add	r0, sl
 8010722:	edd1 6a00 	vldr	s13, [r1]
 8010726:	eddb 7a00 	vldr	s15, [fp]
 801072a:	ed90 0a00 	vldr	s0, [r0]
 801072e:	f50a 61b2 	add.w	r1, sl, #1424	; 0x590
 8010732:	4469      	add	r1, sp
 8010734:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8010738:	ee83 3aa7 	vdiv.f32	s6, s7, s15
 801073c:	edd1 4a00 	vldr	s9, [r1]
 8010740:	eddc 7a00 	vldr	s15, [ip]
 8010744:	eee0 4a47 	vfms.f32	s9, s0, s14
 8010748:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 801074c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8010750:	eee7 6ac7 	vfms.f32	s13, s15, s14
 8010754:	4601      	mov	r1, r0
 8010756:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 801075a:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 801075e:	eee4 4a66 	vfms.f32	s9, s8, s13
 8010762:	ed90 5a00 	vldr	s10, [r0]
 8010766:	ee60 4aa4 	vmul.f32	s9, s1, s9
 801076a:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 801076e:	eee1 6a64 	vfms.f32	s13, s2, s9
 8010772:	eea1 7ae4 	vfms.f32	s14, s3, s9
 8010776:	ee62 8a26 	vmul.f32	s17, s4, s13
 801077a:	edd1 6a00 	vldr	s13, [r1]
 801077e:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8010782:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010786:	460b      	mov	r3, r1
 8010788:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 801078c:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 8010790:	edd1 5a00 	vldr	s11, [r1]
 8010794:	ed93 8a00 	vldr	s16, [r3]
 8010798:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801079c:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 80107a0:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 80107a4:	eee7 5ac5 	vfms.f32	s11, s15, s10
 80107a8:	eea6 8ae7 	vfms.f32	s16, s13, s15
 80107ac:	ed92 6a00 	vldr	s12, [r2]
 80107b0:	edd3 7a00 	vldr	s15, [r3]
 80107b4:	eea0 6a45 	vfms.f32	s12, s0, s10
 80107b8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80107bc:	eea4 6a65 	vfms.f32	s12, s8, s11
 80107c0:	eee4 7a48 	vfms.f32	s15, s8, s16
 80107c4:	ee20 6a86 	vmul.f32	s12, s1, s12
 80107c8:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80107cc:	eee1 5a46 	vfms.f32	s11, s2, s12
 80107d0:	eea7 8ac1 	vfms.f32	s16, s15, s2
 80107d4:	eea1 5ac6 	vfms.f32	s10, s3, s12
 80107d8:	eee7 6ae1 	vfms.f32	s13, s15, s3
 80107dc:	ee62 5a25 	vmul.f32	s11, s4, s11
 80107e0:	ee28 2a02 	vmul.f32	s4, s16, s4
 80107e4:	eea2 7ae8 	vfms.f32	s14, s5, s17
 80107e8:	eee2 6a62 	vfms.f32	s13, s4, s5
 80107ec:	eea2 5ae5 	vfms.f32	s10, s5, s11
 80107f0:	ee23 7a07 	vmul.f32	s14, s6, s14
 80107f4:	ee23 5a05 	vmul.f32	s10, s6, s10
 80107f8:	ee26 3a83 	vmul.f32	s6, s13, s6
 80107fc:	ee77 6aa5 	vadd.f32	s13, s15, s11
 8010800:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 8010804:	ee77 6a66 	vsub.f32	s13, s14, s13
 8010808:	ee36 6a42 	vsub.f32	s12, s12, s4
 801080c:	eef4 6ac4 	vcmpe.f32	s13, s8
 8010810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010814:	bfc8      	it	gt
 8010816:	ee76 6aa3 	vaddgt.f32	s13, s13, s7
 801081a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801081e:	bfcc      	ite	gt
 8010820:	eeb1 4ae6 	vsqrtgt.f32	s8, s13
 8010824:	ed9f 4ad7 	vldrle	s8, [pc, #860]	; 8010b84 <iNemoEngine_API_Update+0x12fc>
 8010828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801082c:	f100 8411 	bmi.w	8011052 <iNemoEngine_API_Update+0x17ca>
 8010830:	bfd8      	it	le
 8010832:	ee24 4a06 	vmulle.f32	s8, s8, s12
 8010836:	ee77 6a87 	vadd.f32	s13, s15, s14
 801083a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801083e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8010842:	ee24 6a06 	vmul.f32	s12, s8, s12
 8010846:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 801084a:	eef4 6ac4 	vcmpe.f32	s13, s8
 801084e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010852:	bf88      	it	hi
 8010854:	eeb7 4a00 	vmovhi.f32	s8, #112	; 0x3f800000  1.0
 8010858:	ee33 3a64 	vsub.f32	s6, s6, s9
 801085c:	bf88      	it	hi
 801085e:	ee36 4a84 	vaddhi.f32	s8, s13, s8
 8010862:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 8010866:	bf8c      	ite	hi
 8010868:	eef1 6ac4 	vsqrthi.f32	s13, s8
 801086c:	eddf 6ac5 	vldrls	s13, [pc, #788]	; 8010b84 <iNemoEngine_API_Update+0x12fc>
 8010870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010874:	f100 83ea 	bmi.w	801104c <iNemoEngine_API_Update+0x17c4>
 8010878:	bfd8      	it	le
 801087a:	ee66 6a83 	vmulle.f32	s13, s13, s6
 801087e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010882:	ee38 5ac5 	vsub.f32	s10, s17, s10
 8010886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801088a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801088e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8010892:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010896:	eef4 7ac7 	vcmpe.f32	s15, s14
 801089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801089e:	bf84      	itt	hi
 80108a0:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 80108a4:	ee37 7a87 	vaddhi.f32	s14, s15, s14
 80108a8:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 80108ac:	bf8c      	ite	hi
 80108ae:	eef1 7ac7 	vsqrthi.f32	s15, s14
 80108b2:	eddf 7ab4 	vldrls	s15, [pc, #720]	; 8010b84 <iNemoEngine_API_Update+0x12fc>
 80108b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ba:	f100 83ce 	bmi.w	801105a <iNemoEngine_API_Update+0x17d2>
 80108be:	bfd8      	it	le
 80108c0:	ee67 7a85 	vmulle.f32	s15, s15, s10
 80108c4:	9b06      	ldr	r3, [sp, #24]
 80108c6:	f893 2341 	ldrb.w	r2, [r3, #833]	; 0x341
 80108ca:	1e53      	subs	r3, r2, #1
 80108cc:	b25b      	sxtb	r3, r3
 80108ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80108d8:	dd1d      	ble.n	8010916 <iNemoEngine_API_Update+0x108e>
 80108da:	9806      	ldr	r0, [sp, #24]
 80108dc:	3a02      	subs	r2, #2
 80108de:	b2d1      	uxtb	r1, r2
 80108e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80108e4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80108e8:	f1a0 010c 	sub.w	r1, r0, #12
 80108ec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80108f0:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 80108f4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80108f8:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80108fc:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 8010900:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8010904:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 8010908:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 801090c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 8010910:	3b0c      	subs	r3, #12
 8010912:	428b      	cmp	r3, r1
 8010914:	d1f0      	bne.n	80108f8 <iNemoEngine_API_Update+0x1070>
 8010916:	ed9d 7a07 	vldr	s14, [sp, #28]
 801091a:	9b06      	ldr	r3, [sp, #24]
 801091c:	9310      	str	r3, [sp, #64]	; 0x40
 801091e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010922:	ee85 7a87 	vdiv.f32	s14, s11, s14
 8010926:	aa3d      	add	r2, sp, #244	; 0xf4
 8010928:	922b      	str	r2, [sp, #172]	; 0xac
 801092a:	9212      	str	r2, [sp, #72]	; 0x48
 801092c:	f50d 7be2 	add.w	fp, sp, #452	; 0x1c4
 8010930:	f50d 7af4 	add.w	sl, sp, #488	; 0x1e8
 8010934:	ee36 6a06 	vadd.f32	s12, s12, s12
 8010938:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801093c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010940:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010944:	ee66 6a87 	vmul.f32	s13, s13, s14
 8010948:	ee67 7a87 	vmul.f32	s15, s15, s14
 801094c:	ed83 6ad2 	vstr	s12, [r3, #840]	; 0x348
 8010950:	edc3 6ad3 	vstr	s13, [r3, #844]	; 0x34c
 8010954:	edc3 7ad4 	vstr	s15, [r3, #848]	; 0x350
 8010958:	2300      	movs	r3, #0
 801095a:	930e      	str	r3, [sp, #56]	; 0x38
 801095c:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 8010960:	f1c3 0301 	rsb	r3, r3, #1
 8010964:	9328      	str	r3, [sp, #160]	; 0xa0
 8010966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010968:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801096a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 801096c:	3301      	adds	r3, #1
 801096e:	930e      	str	r3, [sp, #56]	; 0x38
 8010970:	a9ae      	add	r1, sp, #696	; 0x2b8
 8010972:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 8010976:	18e0      	adds	r0, r4, r3
 8010978:	f803 0f01 	strb.w	r0, [r3, #1]!
 801097c:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 8010980:	f841 0b04 	str.w	r0, [r1], #4
 8010984:	f20d 10e1 	addw	r0, sp, #481	; 0x1e1
 8010988:	4283      	cmp	r3, r0
 801098a:	f102 020c 	add.w	r2, r2, #12
 801098e:	d1f2      	bne.n	8010976 <iNemoEngine_API_Update+0x10ee>
 8010990:	ed9d 7aae 	vldr	s14, [sp, #696]	; 0x2b8
 8010994:	eddd 7aaf 	vldr	s15, [sp, #700]	; 0x2bc
 8010998:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801099c:	ed9d 7ab0 	vldr	s14, [sp, #704]	; 0x2c0
 80109a0:	eddd 7ab1 	vldr	s15, [sp, #708]	; 0x2c4
 80109a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a8:	bf88      	it	hi
 80109aa:	f44f 7381 	movhi.w	r3, #258	; 0x102
 80109ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80109b2:	ed9d 7ab2 	vldr	s14, [sp, #712]	; 0x2c8
 80109b6:	eddd 7ab3 	vldr	s15, [sp, #716]	; 0x2cc
 80109ba:	bf88      	it	hi
 80109bc:	f8ab 3000 	strhhi.w	r3, [fp]
 80109c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c4:	bf88      	it	hi
 80109c6:	f44f 7341 	movhi.w	r3, #772	; 0x304
 80109ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80109ce:	ed9d 7ab4 	vldr	s14, [sp, #720]	; 0x2d0
 80109d2:	eddd 7ab5 	vldr	s15, [sp, #724]	; 0x2d4
 80109d6:	bf88      	it	hi
 80109d8:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 80109dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e0:	bf88      	it	hi
 80109e2:	f240 5306 	movwhi	r3, #1286	; 0x506
 80109e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80109ea:	ed9d 7ab6 	vldr	s14, [sp, #728]	; 0x2d8
 80109ee:	eddd 7ab7 	vldr	s15, [sp, #732]	; 0x2dc
 80109f2:	bf88      	it	hi
 80109f4:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 80109f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109fc:	bf88      	it	hi
 80109fe:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 8010a02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a06:	ed9d 7ab8 	vldr	s14, [sp, #736]	; 0x2e0
 8010a0a:	eddd 7ab9 	vldr	s15, [sp, #740]	; 0x2e4
 8010a0e:	bf88      	it	hi
 8010a10:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 8010a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a18:	bf88      	it	hi
 8010a1a:	f640 130a 	movwhi	r3, #2314	; 0x90a
 8010a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a22:	ed9d 7aba 	vldr	s14, [sp, #744]	; 0x2e8
 8010a26:	eddd 7abb 	vldr	s15, [sp, #748]	; 0x2ec
 8010a2a:	bf88      	it	hi
 8010a2c:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 8010a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a34:	bf88      	it	hi
 8010a36:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 8010a3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a3e:	ed9d 7abc 	vldr	s14, [sp, #752]	; 0x2f0
 8010a42:	eddd 7abd 	vldr	s15, [sp, #756]	; 0x2f4
 8010a46:	bf88      	it	hi
 8010a48:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 8010a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a50:	bf88      	it	hi
 8010a52:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 8010a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a5a:	ed9d 7abe 	vldr	s14, [sp, #760]	; 0x2f8
 8010a5e:	eddd 7abf 	vldr	s15, [sp, #764]	; 0x2fc
 8010a62:	bf88      	it	hi
 8010a64:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 8010a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a6c:	bf88      	it	hi
 8010a6e:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 8010a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a76:	ed9d 7ac0 	vldr	s14, [sp, #768]	; 0x300
 8010a7a:	eddd 7ac1 	vldr	s15, [sp, #772]	; 0x304
 8010a7e:	bf88      	it	hi
 8010a80:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 8010a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a88:	bf88      	it	hi
 8010a8a:	f241 1312 	movwhi	r3, #4370	; 0x1112
 8010a8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a92:	ed9d 7ac2 	vldr	s14, [sp, #776]	; 0x308
 8010a96:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 8010a9a:	bf88      	it	hi
 8010a9c:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 8010aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa4:	bf88      	it	hi
 8010aa6:	f241 3314 	movwhi	r3, #4884	; 0x1314
 8010aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010aae:	bf88      	it	hi
 8010ab0:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 8010ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab8:	bf84      	itt	hi
 8010aba:	f241 5316 	movwhi	r3, #5398	; 0x1516
 8010abe:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 8010ac2:	ed9d 7ac4 	vldr	s14, [sp, #784]	; 0x310
 8010ac6:	eddd 7ac5 	vldr	s15, [sp, #788]	; 0x314
 8010aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010ace:	ed9d 7ac6 	vldr	s14, [sp, #792]	; 0x318
 8010ad2:	eddd 7ac7 	vldr	s15, [sp, #796]	; 0x31c
 8010ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ada:	bf88      	it	hi
 8010adc:	f241 7318 	movwhi	r3, #5912	; 0x1718
 8010ae0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010ae4:	ed9d 7ac8 	vldr	s14, [sp, #800]	; 0x320
 8010ae8:	eddd 7ac9 	vldr	s15, [sp, #804]	; 0x324
 8010aec:	bf88      	it	hi
 8010aee:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 8010af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af6:	bf88      	it	hi
 8010af8:	f641 131a 	movwhi	r3, #6426	; 0x191a
 8010afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b00:	ed9d 7aca 	vldr	s14, [sp, #808]	; 0x328
 8010b04:	eddd 7acb 	vldr	s15, [sp, #812]	; 0x32c
 8010b08:	bf88      	it	hi
 8010b0a:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 8010b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b12:	bf88      	it	hi
 8010b14:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 8010b18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b1c:	bf88      	it	hi
 8010b1e:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 8010b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b26:	bf84      	itt	hi
 8010b28:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 8010b2c:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 8010b30:	221e      	movs	r2, #30
 8010b32:	2101      	movs	r1, #1
 8010b34:	4650      	mov	r0, sl
 8010b36:	f005 faf3 	bl	8016120 <memset>
 8010b3a:	2304      	movs	r3, #4
 8010b3c:	930c      	str	r3, [sp, #48]	; 0x30
 8010b3e:	2302      	movs	r3, #2
 8010b40:	9307      	str	r3, [sp, #28]
 8010b42:	9a07      	ldr	r2, [sp, #28]
 8010b44:	920a      	str	r2, [sp, #40]	; 0x28
 8010b46:	4613      	mov	r3, r2
 8010b48:	0052      	lsls	r2, r2, #1
 8010b4a:	9207      	str	r2, [sp, #28]
 8010b4c:	f103 0901 	add.w	r9, r3, #1
 8010b50:	f04f 0801 	mov.w	r8, #1
 8010b54:	9b07      	ldr	r3, [sp, #28]
 8010b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b5a:	4443      	add	r3, r8
 8010b5c:	2b1f      	cmp	r3, #31
 8010b5e:	bfa8      	it	ge
 8010b60:	231f      	movge	r3, #31
 8010b62:	4642      	mov	r2, r8
 8010b64:	1a9f      	subs	r7, r3, r2
 8010b66:	2f00      	cmp	r7, #0
 8010b68:	4698      	mov	r8, r3
 8010b6a:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 8010b6e:	dd54      	ble.n	8010c1a <iNemoEngine_API_Update+0x1392>
 8010b70:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8010b74:	9304      	str	r3, [sp, #16]
 8010b76:	f1a8 0302 	sub.w	r3, r8, #2
 8010b7a:	4616      	mov	r6, r2
 8010b7c:	2400      	movs	r4, #0
 8010b7e:	9305      	str	r3, [sp, #20]
 8010b80:	e00f      	b.n	8010ba2 <iNemoEngine_API_Update+0x131a>
 8010b82:	bf00      	nop
 8010b84:	00000000 	.word	0x00000000
 8010b88:	3f333333 	.word	0x3f333333
 8010b8c:	3f4ccccd 	.word	0x3f4ccccd
 8010b90:	45f0      	cmp	r8, lr
 8010b92:	f80a 2004 	strb.w	r2, [sl, r4]
 8010b96:	f000 81f6 	beq.w	8010f86 <iNemoEngine_API_Update+0x16fe>
 8010b9a:	4665      	mov	r5, ip
 8010b9c:	3401      	adds	r4, #1
 8010b9e:	42a7      	cmp	r7, r4
 8010ba0:	dd34      	ble.n	8010c0c <iNemoEngine_API_Update+0x1384>
 8010ba2:	1e71      	subs	r1, r6, #1
 8010ba4:	a8ae      	add	r0, sp, #696	; 0x2b8
 8010ba6:	f91b 3001 	ldrsb.w	r3, [fp, r1]
 8010baa:	f91b 2005 	ldrsb.w	r2, [fp, r5]
 8010bae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8010bb2:	ed10 7a01 	vldr	s14, [r0, #-4]
 8010bb6:	a8ae      	add	r0, sp, #696	; 0x2b8
 8010bb8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8010bbc:	ed50 7a01 	vldr	s15, [r0, #-4]
 8010bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc8:	f105 0e02 	add.w	lr, r5, #2
 8010bcc:	f105 0c01 	add.w	ip, r5, #1
 8010bd0:	d8de      	bhi.n	8010b90 <iNemoEngine_API_Update+0x1308>
 8010bd2:	3601      	adds	r6, #1
 8010bd4:	454e      	cmp	r6, r9
 8010bd6:	f80a 3004 	strb.w	r3, [sl, r4]
 8010bda:	d1df      	bne.n	8010b9c <iNemoEngine_API_Update+0x1314>
 8010bdc:	1c6b      	adds	r3, r5, #1
 8010bde:	9a04      	ldr	r2, [sp, #16]
 8010be0:	9308      	str	r3, [sp, #32]
 8010be2:	1c60      	adds	r0, r4, #1
 8010be4:	4598      	cmp	r8, r3
 8010be6:	eba2 0205 	sub.w	r2, r2, r5
 8010bea:	4450      	add	r0, sl
 8010bec:	ddd6      	ble.n	8010b9c <iNemoEngine_API_Update+0x1314>
 8010bee:	eb0b 0105 	add.w	r1, fp, r5
 8010bf2:	f005 facd 	bl	8016190 <memcpy>
 8010bf6:	9a04      	ldr	r2, [sp, #16]
 8010bf8:	9b05      	ldr	r3, [sp, #20]
 8010bfa:	4414      	add	r4, r2
 8010bfc:	1b64      	subs	r4, r4, r5
 8010bfe:	1b5a      	subs	r2, r3, r5
 8010c00:	3401      	adds	r4, #1
 8010c02:	9b08      	ldr	r3, [sp, #32]
 8010c04:	42a7      	cmp	r7, r4
 8010c06:	eb02 0503 	add.w	r5, r2, r3
 8010c0a:	dcca      	bgt.n	8010ba2 <iNemoEngine_API_Update+0x131a>
 8010c0c:	9b03      	ldr	r3, [sp, #12]
 8010c0e:	1e58      	subs	r0, r3, #1
 8010c10:	463a      	mov	r2, r7
 8010c12:	4458      	add	r0, fp
 8010c14:	4651      	mov	r1, sl
 8010c16:	f005 fabb 	bl	8016190 <memcpy>
 8010c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c1c:	eb08 0903 	add.w	r9, r8, r3
 8010c20:	f1b9 0f1e 	cmp.w	r9, #30
 8010c24:	dd96      	ble.n	8010b54 <iNemoEngine_API_Update+0x12cc>
 8010c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c28:	3b01      	subs	r3, #1
 8010c2a:	930c      	str	r3, [sp, #48]	; 0x30
 8010c2c:	d189      	bne.n	8010b42 <iNemoEngine_API_Update+0x12ba>
 8010c2e:	f99b 300e 	ldrsb.w	r3, [fp, #14]
 8010c32:	aaae      	add	r2, sp, #696	; 0x2b8
 8010c34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010c38:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010c3c:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 8010c40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010c44:	ed13 7a01 	vldr	s14, [r3, #-4]
 8010c48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c50:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010c54:	bf4c      	ite	mi
 8010c56:	2201      	movmi	r2, #1
 8010c58:	2200      	movpl	r2, #0
 8010c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c5e:	bf4c      	ite	mi
 8010c60:	2301      	movmi	r3, #1
 8010c62:	2300      	movpl	r3, #0
 8010c64:	429a      	cmp	r2, r3
 8010c66:	f000 819d 	beq.w	8010fa4 <iNemoEngine_API_Update+0x171c>
 8010c6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010c6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010c72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c78:	ece3 7a01 	vstmia	r3!, {s15}
 8010c7c:	9312      	str	r3, [sp, #72]	; 0x48
 8010c7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c80:	3304      	adds	r3, #4
 8010c82:	9310      	str	r3, [sp, #64]	; 0x40
 8010c84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c86:	2b03      	cmp	r3, #3
 8010c88:	f47f ae6d 	bne.w	8010966 <iNemoEngine_API_Update+0x10de>
 8010c8c:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 8010c90:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 8010c94:	eddd 6a16 	vldr	s13, [sp, #88]	; 0x58
 8010c98:	ed1f 1a45 	vldr	s2, [pc, #-276]	; 8010b88 <iNemoEngine_API_Update+0x1300>
 8010c9c:	9a06      	ldr	r2, [sp, #24]
 8010c9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010ca2:	ee2d 1a81 	vmul.f32	s2, s27, s2
 8010ca6:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010caa:	f892 3900 	ldrb.w	r3, [r2, #2304]	; 0x900
 8010cae:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 8010cb2:	eeb0 8a67 	vmov.f32	s16, s15
 8010cb6:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 8010cba:	eea7 8aa7 	vfma.f32	s16, s15, s15
 8010cbe:	f502 6810 	add.w	r8, r2, #2304	; 0x900
 8010cc2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8010cc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010cca:	eeb1 6ac8 	vsqrt.f32	s12, s16
 8010cce:	eec7 5a0d 	vdiv.f32	s11, s14, s26
 8010cd2:	ee2b 7a27 	vmul.f32	s14, s22, s15
 8010cd6:	ee6d 7aa7 	vmul.f32	s15, s27, s15
 8010cda:	eec7 6a26 	vdiv.f32	s13, s14, s13
 8010cde:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 8010ce2:	edcd 5a52 	vstr	s11, [sp, #328]	; 0x148
 8010ce6:	ee87 5a87 	vdiv.f32	s10, s15, s14
 8010cea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010cee:	eeb0 7a41 	vmov.f32	s14, s2
 8010cf2:	eeab 7a27 	vfma.f32	s14, s22, s15
 8010cf6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8010cfa:	ed5f 7a5c 	vldr	s15, [pc, #-368]	; 8010b8c <iNemoEngine_API_Update+0x1304>
 8010cfe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d06:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 8010d0a:	ed8d 5a54 	vstr	s10, [sp, #336]	; 0x150
 8010d0e:	ed8d 6a55 	vstr	s12, [sp, #340]	; 0x154
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	f040 8159 	bne.w	8010fca <iNemoEngine_API_Update+0x1742>
 8010d18:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8010d1c:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 8010d20:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8010d24:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8010d28:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8010d2c:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 8010d30:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8010d34:	f8c8 3020 	str.w	r3, [r8, #32]
 8010d38:	edc8 7a07 	vstr	s15, [r8, #28]
 8010d3c:	f602 130c 	addw	r3, r2, #2316	; 0x90c
 8010d40:	edd3 8a00 	vldr	s17, [r3]
 8010d44:	edd2 2a02 	vldr	s5, [r2, #8]
 8010d48:	f602 1324 	addw	r3, r2, #2340	; 0x924
 8010d4c:	edd3 7a00 	vldr	s15, [r3]
 8010d50:	f602 1308 	addw	r3, r2, #2312	; 0x908
 8010d54:	ed93 7a00 	vldr	s14, [r3]
 8010d58:	f502 6312 	add.w	r3, r2, #2336	; 0x920
 8010d5c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010d60:	edd3 7a00 	vldr	s15, [r3]
 8010d64:	f502 6311 	add.w	r3, r2, #2320	; 0x910
 8010d68:	eee7 8a27 	vfma.f32	s17, s14, s15
 8010d6c:	ed93 7a00 	vldr	s14, [r3]
 8010d70:	f602 1328 	addw	r3, r2, #2344	; 0x928
 8010d74:	edd3 7a00 	vldr	s15, [r3]
 8010d78:	f602 1314 	addw	r3, r2, #2324	; 0x914
 8010d7c:	eee7 8a27 	vfma.f32	s17, s14, s15
 8010d80:	ed93 7a00 	vldr	s14, [r3]
 8010d84:	f602 132c 	addw	r3, r2, #2348	; 0x92c
 8010d88:	edd3 7a00 	vldr	s15, [r3]
 8010d8c:	f602 1304 	addw	r3, r2, #2308	; 0x904
 8010d90:	eee7 8a27 	vfma.f32	s17, s14, s15
 8010d94:	ed93 7a00 	vldr	s14, [r3]
 8010d98:	f602 131c 	addw	r3, r2, #2332	; 0x91c
 8010d9c:	edd3 7a00 	vldr	s15, [r3]
 8010da0:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8010da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da8:	eee7 8a27 	vfma.f32	s17, s14, s15
 8010dac:	f340 8158 	ble.w	8011060 <iNemoEngine_API_Update+0x17d8>
 8010db0:	edd2 7a30 	vldr	s15, [r2, #192]	; 0xc0
 8010db4:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dbc:	f101 8112 	bmi.w	8011fe4 <iNemoEngine_API_Update+0x275c>
 8010dc0:	ed92 fa31 	vldr	s30, [r2, #196]	; 0xc4
 8010dc4:	4613      	mov	r3, r2
 8010dc6:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 8010dca:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd2:	f142 8186 	bpl.w	80130e2 <iNemoEngine_API_Update+0x385a>
 8010dd6:	edd3 4a62 	vldr	s9, [r3, #392]	; 0x188
 8010dda:	eef4 4ae8 	vcmpe.f32	s9, s17
 8010dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de2:	f342 821e 	ble.w	8013222 <iNemoEngine_API_Update+0x399a>
 8010de6:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 8010dea:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8010dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df2:	f302 8555 	bgt.w	80138a0 <iNemoEngine_API_Update+0x4018>
 8010df6:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8010dfa:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e02:	f142 8565 	bpl.w	80138d0 <iNemoEngine_API_Update+0x4048>
 8010e06:	edd3 3a4d 	vldr	s7, [r3, #308]	; 0x134
 8010e0a:	ed93 4a4f 	vldr	s8, [r3, #316]	; 0x13c
 8010e0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010e12:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010e16:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8010e1a:	ee24 7a07 	vmul.f32	s14, s8, s14
 8010e1e:	ee87 ca27 	vdiv.f32	s24, s14, s15
 8010e22:	ee3c ca23 	vadd.f32	s24, s24, s7
 8010e26:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8010e2a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e32:	f2c2 8566 	blt.w	8013902 <iNemoEngine_API_Update+0x407a>
 8010e36:	9b06      	ldr	r3, [sp, #24]
 8010e38:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8010e3c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8010e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e44:	f142 87a3 	bpl.w	8013d8e <iNemoEngine_API_Update+0x4506>
 8010e48:	edd3 3a51 	vldr	s7, [r3, #324]	; 0x144
 8010e4c:	ed93 4a53 	vldr	s8, [r3, #332]	; 0x14c
 8010e50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e54:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010e58:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8010e5c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8010e60:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8010e64:	ee3c ca23 	vadd.f32	s24, s24, s7
 8010e68:	9b06      	ldr	r3, [sp, #24]
 8010e6a:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8010e6e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e76:	f2c2 8566 	blt.w	8013946 <iNemoEngine_API_Update+0x40be>
 8010e7a:	9b06      	ldr	r3, [sp, #24]
 8010e7c:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 8010e80:	eef4 8ac7 	vcmpe.f32	s17, s14
 8010e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e88:	f142 87dc 	bpl.w	8013e44 <iNemoEngine_API_Update+0x45bc>
 8010e8c:	edd3 3a55 	vldr	s7, [r3, #340]	; 0x154
 8010e90:	ed93 4a57 	vldr	s8, [r3, #348]	; 0x15c
 8010e94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e98:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010e9c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8010ea0:	ee64 7a27 	vmul.f32	s15, s8, s15
 8010ea4:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8010ea8:	ee3c ca23 	vadd.f32	s24, s24, s7
 8010eac:	9b06      	ldr	r3, [sp, #24]
 8010eae:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8010eb2:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eba:	f2c2 8566 	blt.w	801398a <iNemoEngine_API_Update+0x4102>
 8010ebe:	9b06      	ldr	r3, [sp, #24]
 8010ec0:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8010ec4:	eef4 8ac7 	vcmpe.f32	s17, s14
 8010ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ecc:	f142 87c5 	bpl.w	8013e5a <iNemoEngine_API_Update+0x45d2>
 8010ed0:	edd3 3a59 	vldr	s7, [r3, #356]	; 0x164
 8010ed4:	ed93 4a5b 	vldr	s8, [r3, #364]	; 0x16c
 8010ed8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010edc:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010ee0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8010ee4:	ee64 7a27 	vmul.f32	s15, s8, s15
 8010ee8:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8010eec:	ee3c ca23 	vadd.f32	s24, s24, s7
 8010ef0:	9b06      	ldr	r3, [sp, #24]
 8010ef2:	edd3 7a5c 	vldr	s15, [r3, #368]	; 0x170
 8010ef6:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efe:	f2c2 8566 	blt.w	80139ce <iNemoEngine_API_Update+0x4146>
 8010f02:	9b06      	ldr	r3, [sp, #24]
 8010f04:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 8010f08:	eef4 8ac7 	vcmpe.f32	s17, s14
 8010f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f10:	f142 8795 	bpl.w	8013e3e <iNemoEngine_API_Update+0x45b6>
 8010f14:	edd3 3a5d 	vldr	s7, [r3, #372]	; 0x174
 8010f18:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 8010f1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010f20:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f24:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8010f28:	ee64 7a27 	vmul.f32	s15, s8, s15
 8010f2c:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8010f30:	ee3c ca23 	vadd.f32	s24, s24, s7
 8010f34:	9b06      	ldr	r3, [sp, #24]
 8010f36:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 8010f3a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f42:	f2c0 8092 	blt.w	801106a <iNemoEngine_API_Update+0x17e2>
 8010f46:	9b06      	ldr	r3, [sp, #24]
 8010f48:	ed93 4a61 	vldr	s8, [r3, #388]	; 0x184
 8010f4c:	ed93 7a63 	vldr	s14, [r3, #396]	; 0x18c
 8010f50:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8010f54:	ee37 7a44 	vsub.f32	s14, s14, s8
 8010f58:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8010f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f60:	ee87 caa4 	vdiv.f32	s24, s15, s9
 8010f64:	ee3c ca04 	vadd.f32	s24, s24, s8
 8010f68:	e07f      	b.n	801106a <iNemoEngine_API_Update+0x17e2>
 8010f6a:	eddf 7ad2 	vldr	s15, [pc, #840]	; 80112b4 <iNemoEngine_API_Update+0x1a2c>
 8010f6e:	eddf cad2 	vldr	s25, [pc, #840]	; 80112b8 <iNemoEngine_API_Update+0x1a30>
 8010f72:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8010f76:	eddf 7ad1 	vldr	s15, [pc, #836]	; 80112bc <iNemoEngine_API_Update+0x1a34>
 8010f7a:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 8010f7e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8010f82:	f7ff b824 	b.w	800ffce <iNemoEngine_API_Update+0x746>
 8010f86:	1c60      	adds	r0, r4, #1
 8010f88:	454e      	cmp	r6, r9
 8010f8a:	4459      	add	r1, fp
 8010f8c:	4450      	add	r0, sl
 8010f8e:	4665      	mov	r5, ip
 8010f90:	f6bf ae04 	bge.w	8010b9c <iNemoEngine_API_Update+0x1314>
 8010f94:	eba9 0206 	sub.w	r2, r9, r6
 8010f98:	444c      	add	r4, r9
 8010f9a:	1ba4      	subs	r4, r4, r6
 8010f9c:	f005 f8f8 	bl	8016190 <memcpy>
 8010fa0:	464e      	mov	r6, r9
 8010fa2:	e5fb      	b.n	8010b9c <iNemoEngine_API_Update+0x1314>
 8010fa4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fac:	f43f ae5d 	beq.w	8010c6a <iNemoEngine_API_Update+0x13e2>
 8010fb0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb8:	f43f ae57 	beq.w	8010c6a <iNemoEngine_API_Update+0x13e2>
 8010fbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010fc0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010fc4:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010fc8:	e655      	b.n	8010c76 <iNemoEngine_API_Update+0x13ee>
 8010fca:	2300      	movs	r3, #0
 8010fcc:	f882 3900 	strb.w	r3, [r2, #2304]	; 0x900
 8010fd0:	edc8 7a07 	vstr	s15, [r8, #28]
 8010fd4:	edc8 7a08 	vstr	s15, [r8, #32]
 8010fd8:	edc8 7a09 	vstr	s15, [r8, #36]	; 0x24
 8010fdc:	edc8 7a0a 	vstr	s15, [r8, #40]	; 0x28
 8010fe0:	edc8 7a0b 	vstr	s15, [r8, #44]	; 0x2c
 8010fe4:	e6aa      	b.n	8010d3c <iNemoEngine_API_Update+0x14b4>
 8010fe6:	f04f 0908 	mov.w	r9, #8
 8010fea:	f04f 0805 	mov.w	r8, #5
 8010fee:	2202      	movs	r2, #2
 8010ff0:	f7ff bae3 	b.w	80105ba <iNemoEngine_API_Update+0xd32>
 8010ff4:	2104      	movs	r1, #4
 8010ff6:	2000      	movs	r0, #0
 8010ff8:	f04f 0c06 	mov.w	ip, #6
 8010ffc:	f04f 0e07 	mov.w	lr, #7
 8011000:	2603      	movs	r6, #3
 8011002:	460c      	mov	r4, r1
 8011004:	2301      	movs	r3, #1
 8011006:	4607      	mov	r7, r0
 8011008:	f7ff babd 	b.w	8010586 <iNemoEngine_API_Update+0xcfe>
 801100c:	ed9f 5aac 	vldr	s10, [pc, #688]	; 80112c0 <iNemoEngine_API_Update+0x1a38>
 8011010:	ed9f 8aac 	vldr	s16, [pc, #688]	; 80112c4 <iNemoEngine_API_Update+0x1a3c>
 8011014:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80112f4 <iNemoEngine_API_Update+0x1a6c>
 8011018:	eddf 6aab 	vldr	s13, [pc, #684]	; 80112c8 <iNemoEngine_API_Update+0x1a40>
 801101c:	ed84 5a00 	vstr	s10, [r4]
 8011020:	eef0 7a45 	vmov.f32	s15, s10
 8011024:	eeb0 6a45 	vmov.f32	s12, s10
 8011028:	eddf caa8 	vldr	s25, [pc, #672]	; 80112cc <iNemoEngine_API_Update+0x1a44>
 801102c:	ed9f 9aa8 	vldr	s18, [pc, #672]	; 80112d0 <iNemoEngine_API_Update+0x1a48>
 8011030:	ed84 8a01 	vstr	s16, [r4, #4]
 8011034:	eef0 5a66 	vmov.f32	s11, s13
 8011038:	ed84 8a02 	vstr	s16, [r4, #8]
 801103c:	eeb0 5a47 	vmov.f32	s10, s14
 8011040:	eef0 8a67 	vmov.f32	s17, s15
 8011044:	eeb0 ca48 	vmov.f32	s24, s16
 8011048:	f7fe bed8 	b.w	800fdfc <iNemoEngine_API_Update+0x574>
 801104c:	eef1 6a66 	vneg.f32	s13, s13
 8011050:	e415      	b.n	801087e <iNemoEngine_API_Update+0xff6>
 8011052:	eeb1 4a44 	vneg.f32	s8, s8
 8011056:	f7ff bbee 	b.w	8010836 <iNemoEngine_API_Update+0xfae>
 801105a:	eef1 7a67 	vneg.f32	s15, s15
 801105e:	e431      	b.n	80108c4 <iNemoEngine_API_Update+0x103c>
 8011060:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8011064:	eeb0 fa4c 	vmov.f32	s30, s24
 8011068:	4613      	mov	r3, r2
 801106a:	edd3 fa74 	vldr	s31, [r3, #464]	; 0x1d0
 801106e:	ed93 7a72 	vldr	s14, [r3, #456]	; 0x1c8
 8011072:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8011076:	eddf 4a90 	vldr	s9, [pc, #576]	; 80112b8 <iNemoEngine_API_Update+0x1a30>
 801107a:	ee7c faef 	vsub.f32	s31, s25, s31
 801107e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011082:	eef0 faef 	vabs.f32	s31, s31
 8011086:	eef0 7ae7 	vabs.f32	s15, s15
 801108a:	ee77 7aaf 	vadd.f32	s15, s15, s31
 801108e:	eef4 7ae4 	vcmpe.f32	s15, s9
 8011092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011096:	dd0a      	ble.n	80110ae <iNemoEngine_API_Update+0x1826>
 8011098:	ed9f 4a8e 	vldr	s8, [pc, #568]	; 80112d4 <iNemoEngine_API_Update+0x1a4c>
 801109c:	eef4 7ac4 	vcmpe.f32	s15, s8
 80110a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a4:	f340 8790 	ble.w	8011fc8 <iNemoEngine_API_Update+0x2740>
 80110a8:	eef1 4a04 	vmov.f32	s9, #20	; 0x40a00000  5.0
 80110ac:	e001      	b.n	80110b2 <iNemoEngine_API_Update+0x182a>
 80110ae:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80110b2:	eddd 7a21 	vldr	s15, [sp, #132]	; 0x84
 80110b6:	781c      	ldrb	r4, [r3, #0]
 80110b8:	eef4 4ae7 	vcmpe.f32	s9, s15
 80110bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c0:	bfa8      	it	ge
 80110c2:	eef0 7a64 	vmovge.f32	s15, s9
 80110c6:	edcd 7a04 	vstr	s15, [sp, #16]
 80110ca:	b1cc      	cbz	r4, 8011100 <iNemoEngine_API_Update+0x1878>
 80110cc:	785c      	ldrb	r4, [r3, #1]
 80110ce:	2c00      	cmp	r4, #0
 80110d0:	f040 8774 	bne.w	8011fbc <iNemoEngine_API_Update+0x2734>
 80110d4:	ee75 7aa6 	vadd.f32	s15, s11, s13
 80110d8:	edd3 6a05 	vldr	s13, [r3, #20]
 80110dc:	ee75 7a27 	vadd.f32	s15, s10, s15
 80110e0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80110e4:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 80110e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80110ec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80110f0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80110f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80110f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110fc:	f102 848b 	bmi.w	8013a16 <iNemoEngine_API_Update+0x418e>
 8011100:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8011104:	461a      	mov	r2, r3
 8011106:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 801110a:	ed9d 6a50 	vldr	s12, [sp, #320]	; 0x140
 801110e:	edcd 6a98 	vstr	s13, [sp, #608]	; 0x260
 8011112:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011116:	eef0 6a65 	vmov.f32	s13, s11
 801111a:	eee7 6a47 	vfms.f32	s13, s14, s14
 801111e:	2300      	movs	r3, #0
 8011120:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
 8011124:	ed9d 5a4e 	vldr	s10, [sp, #312]	; 0x138
 8011128:	eddd 4a4f 	vldr	s9, [sp, #316]	; 0x13c
 801112c:	eddd 0a51 	vldr	s1, [sp, #324]	; 0x144
 8011130:	ed8d 7a45 	vstr	s14, [sp, #276]	; 0x114
 8011134:	ee26 4a06 	vmul.f32	s8, s12, s12
 8011138:	ee25 2a05 	vmul.f32	s4, s10, s10
 801113c:	ee34 4a04 	vadd.f32	s8, s8, s8
 8011140:	eeb1 3ae6 	vsqrt.f32	s6, s13
 8011144:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 8011148:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
 801114c:	9343      	str	r3, [sp, #268]	; 0x10c
 801114e:	ee64 3a86 	vmul.f32	s7, s9, s12
 8011152:	ee25 0a24 	vmul.f32	s0, s10, s9
 8011156:	ee64 1aa4 	vmul.f32	s3, s9, s9
 801115a:	ee64 6aa0 	vmul.f32	s13, s9, s1
 801115e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8011162:	eea2 4a24 	vfma.f32	s8, s4, s9
 8011166:	ee73 3aa3 	vadd.f32	s7, s7, s7
 801116a:	ee35 1ac4 	vsub.f32	s2, s11, s8
 801116e:	ee25 4a06 	vmul.f32	s8, s10, s12
 8011172:	ee26 6a20 	vmul.f32	s12, s12, s1
 8011176:	ee71 1aa1 	vadd.f32	s3, s3, s3
 801117a:	ee30 6a06 	vadd.f32	s12, s0, s12
 801117e:	ee25 5a20 	vmul.f32	s10, s10, s1
 8011182:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011186:	eee2 1a24 	vfma.f32	s3, s4, s9
 801118a:	ee36 2a06 	vadd.f32	s4, s12, s12
 801118e:	eeb0 6a63 	vmov.f32	s12, s7
 8011192:	eea5 6a24 	vfma.f32	s12, s10, s9
 8011196:	eee5 3a64 	vfms.f32	s7, s10, s9
 801119a:	eeb0 5a66 	vmov.f32	s10, s13
 801119e:	ee7a 6aa6 	vadd.f32	s13, s21, s13
 80111a2:	ee94 5a24 	vfnms.f32	s10, s8, s9
 80111a6:	eee4 6a64 	vfms.f32	s13, s8, s9
 80111aa:	ee25 5a07 	vmul.f32	s10, s10, s14
 80111ae:	edcd 6a3d 	vstr	s13, [sp, #244]	; 0xf4
 80111b2:	edcd 6a92 	vstr	s13, [sp, #584]	; 0x248
 80111b6:	ee75 6ae1 	vsub.f32	s13, s11, s3
 80111ba:	ee79 5ae5 	vsub.f32	s11, s19, s11
 80111be:	ee66 6a87 	vmul.f32	s13, s13, s14
 80111c2:	ee75 1aa1 	vadd.f32	s3, s11, s3
 80111c6:	eee3 6a23 	vfma.f32	s13, s6, s7
 80111ca:	ee26 7a07 	vmul.f32	s14, s12, s14
 80111ce:	eddd 5a2a 	vldr	s11, [sp, #168]	; 0xa8
 80111d2:	eddd 4a2c 	vldr	s9, [sp, #176]	; 0xb0
 80111d6:	ed8d 9a99 	vstr	s18, [sp, #612]	; 0x264
 80111da:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80111de:	eea3 7a01 	vfma.f32	s14, s6, s2
 80111e2:	edcd 6a91 	vstr	s13, [sp, #580]	; 0x244
 80111e6:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 80111ea:	edcd ca9a 	vstr	s25, [sp, #616]	; 0x268
 80111ee:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80111f2:	eea3 5a02 	vfma.f32	s10, s6, s4
 80111f6:	ed8d 7a90 	vstr	s14, [sp, #576]	; 0x240
 80111fa:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8011308 <iNemoEngine_API_Update+0x1a80>
 80111fe:	ed8d 3a44 	vstr	s6, [sp, #272]	; 0x110
 8011202:	ee3a 6a46 	vsub.f32	s12, s20, s12
 8011206:	ee34 5ac5 	vsub.f32	s10, s9, s10
 801120a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011212:	ed8d 5a8f 	vstr	s10, [sp, #572]	; 0x23c
 8011216:	edcd 1a3f 	vstr	s3, [sp, #252]	; 0xfc
 801121a:	edcd 1a94 	vstr	s3, [sp, #592]	; 0x250
 801121e:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 8011222:	ed8d 6a93 	vstr	s12, [sp, #588]	; 0x24c
 8011226:	d541      	bpl.n	80112ac <iNemoEngine_API_Update+0x1a24>
 8011228:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80112d8 <iNemoEngine_API_Update+0x1a50>
 801122c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011234:	dd3a      	ble.n	80112ac <iNemoEngine_API_Update+0x1a24>
 8011236:	ee79 7a67 	vsub.f32	s15, s18, s15
 801123a:	eef0 7ae7 	vabs.f32	s15, s15
 801123e:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8011242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801124a:	dd5f      	ble.n	801130c <iNemoEngine_API_Update+0x1a84>
 801124c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011258:	f140 86a4 	bpl.w	8011fa4 <iNemoEngine_API_Update+0x271c>
 801125c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80112dc <iNemoEngine_API_Update+0x1a54>
 8011260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011268:	f141 8185 	bpl.w	8012576 <iNemoEngine_API_Update+0x2cee>
 801126c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80112ec <iNemoEngine_API_Update+0x1a64>
 8011270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011278:	f2c1 8185 	blt.w	8012586 <iNemoEngine_API_Update+0x2cfe>
 801127c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80112e0 <iNemoEngine_API_Update+0x1a58>
 8011280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011288:	f141 824e 	bpl.w	8012728 <iNemoEngine_API_Update+0x2ea0>
 801128c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80112ec <iNemoEngine_API_Update+0x1a64>
 8011290:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80112e4 <iNemoEngine_API_Update+0x1a5c>
 8011294:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80112e8 <iNemoEngine_API_Update+0x1a60>
 8011298:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801129c:	ee66 6a87 	vmul.f32	s13, s13, s14
 80112a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112a4:	eea6 7a86 	vfma.f32	s14, s13, s12
 80112a8:	f001 b977 	b.w	801259a <iNemoEngine_API_Update+0x2d12>
 80112ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80112b0:	e7c1      	b.n	8011236 <iNemoEngine_API_Update+0x19ae>
 80112b2:	bf00      	nop
 80112b4:	3ecccccc 	.word	0x3ecccccc
 80112b8:	3dcccccd 	.word	0x3dcccccd
 80112bc:	3f666666 	.word	0x3f666666
 80112c0:	00000000 	.word	0x00000000
 80112c4:	3f333333 	.word	0x3f333333
 80112c8:	bfb33333 	.word	0xbfb33333
 80112cc:	3f7d6d54 	.word	0x3f7d6d54
 80112d0:	3f7ae147 	.word	0x3f7ae147
 80112d4:	3fb77778 	.word	0x3fb77778
 80112d8:	3f4ccccd 	.word	0x3f4ccccd
 80112dc:	3ba3d70a 	.word	0x3ba3d70a
 80112e0:	3c75c28f 	.word	0x3c75c28f
 80112e4:	3f19999a 	.word	0x3f19999a
 80112e8:	43480000 	.word	0x43480000
 80112ec:	3c23d70a 	.word	0x3c23d70a
 80112f0:	3b449ba6 	.word	0x3b449ba6
 80112f4:	3fb33333 	.word	0x3fb33333
 80112f8:	3ecccccd 	.word	0x3ecccccd
 80112fc:	3f8f5c29 	.word	0x3f8f5c29
 8011300:	3f59999a 	.word	0x3f59999a
 8011304:	3e4ccccd 	.word	0x3e4ccccd
 8011308:	3f99999a 	.word	0x3f99999a
 801130c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011310:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 80112ec <iNemoEngine_API_Update+0x1a64>
 8011314:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 80112f0 <iNemoEngine_API_Update+0x1a68>
 8011318:	eeb0 7a65 	vmov.f32	s14, s11
 801131c:	eef0 6a65 	vmov.f32	s13, s11
 8011320:	ed8d 6a65 	vstr	s12, [sp, #404]	; 0x194
 8011324:	ed9d 6a04 	vldr	s12, [sp, #16]
 8011328:	ed9d 3a84 	vldr	s6, [sp, #528]	; 0x210
 801132c:	ed9d 5a83 	vldr	s10, [sp, #524]	; 0x20c
 8011330:	ed9d 2a88 	vldr	s4, [sp, #544]	; 0x220
 8011334:	eddd 4a8c 	vldr	s9, [sp, #560]	; 0x230
 8011338:	9a06      	ldr	r2, [sp, #24]
 801133a:	ed8d 4a66 	vstr	s8, [sp, #408]	; 0x198
 801133e:	ee66 3a0f 	vmul.f32	s7, s12, s30
 8011342:	ed9d 6a8d 	vldr	s12, [sp, #564]	; 0x234
 8011346:	7b13      	ldrb	r3, [r2, #12]
 8011348:	ee23 3a23 	vmul.f32	s6, s6, s7
 801134c:	ee23 5a85 	vmul.f32	s10, s7, s10
 8011350:	ed8d 3a84 	vstr	s6, [sp, #528]	; 0x210
 8011354:	ed9d 3a85 	vldr	s6, [sp, #532]	; 0x214
 8011358:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 801135c:	ee63 3a23 	vmul.f32	s7, s6, s7
 8011360:	ed9d 3a86 	vldr	s6, [sp, #536]	; 0x218
 8011364:	edcd 3a85 	vstr	s7, [sp, #532]	; 0x214
 8011368:	eddd 3a87 	vldr	s7, [sp, #540]	; 0x21c
 801136c:	ee2c 3a03 	vmul.f32	s6, s24, s6
 8011370:	ee6c 3a23 	vmul.f32	s7, s24, s7
 8011374:	ee74 4aa4 	vadd.f32	s9, s9, s9
 8011378:	ee2c ca02 	vmul.f32	s24, s24, s4
 801137c:	ee36 6a06 	vadd.f32	s12, s12, s12
 8011380:	ed9d 2a8e 	vldr	s4, [sp, #568]	; 0x238
 8011384:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 8011388:	ee64 4a87 	vmul.f32	s9, s9, s14
 801138c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8011390:	ee2f fa02 	vmul.f32	s30, s30, s4
 8011394:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 8011398:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 801139c:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 80113a0:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 80113a4:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f000 8525 	beq.w	8011df8 <iNemoEngine_API_Update+0x2570>
 80113ae:	ee27 3a03 	vmul.f32	s6, s14, s6
 80113b2:	ee67 3a23 	vmul.f32	s7, s14, s7
 80113b6:	ee27 ca0c 	vmul.f32	s24, s14, s24
 80113ba:	ed9d 2a22 	vldr	s4, [sp, #136]	; 0x88
 80113be:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 80113c2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80113c6:	4613      	mov	r3, r2
 80113c8:	ee25 2a82 	vmul.f32	s4, s11, s4
 80113cc:	7b92      	ldrb	r2, [r2, #14]
 80113ce:	7b5b      	ldrb	r3, [r3, #13]
 80113d0:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 80113d4:	ee64 5a25 	vmul.f32	s11, s8, s11
 80113d8:	ee26 6a07 	vmul.f32	s12, s12, s14
 80113dc:	edcd 5a66 	vstr	s11, [sp, #408]	; 0x198
 80113e0:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 80113e4:	ed8d 2a5f 	vstr	s4, [sp, #380]	; 0x17c
 80113e8:	ed8d 2a60 	vstr	s4, [sp, #384]	; 0x180
 80113ec:	ed8d 2a61 	vstr	s4, [sp, #388]	; 0x184
 80113f0:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 80113f4:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 80113f8:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 80113fc:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 8011400:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 8011404:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 8011408:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 801140c:	b15a      	cbz	r2, 8011426 <iNemoEngine_API_Update+0x1b9e>
 801140e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801141a:	dd04      	ble.n	8011426 <iNemoEngine_API_Update+0x1b9e>
 801141c:	2100      	movs	r1, #0
 801141e:	f8ad 10eb 	strh.w	r1, [sp, #235]	; 0xeb
 8011422:	f88d 10ed 	strb.w	r1, [sp, #237]	; 0xed
 8011426:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 801142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801142e:	dd08      	ble.n	8011442 <iNemoEngine_API_Update+0x1bba>
 8011430:	9906      	ldr	r1, [sp, #24]
 8011432:	edd1 7a64 	vldr	s15, [r1, #400]	; 0x190
 8011436:	eef4 7ae8 	vcmpe.f32	s15, s17
 801143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801143e:	f280 85a4 	bge.w	8011f8a <iNemoEngine_API_Update+0x2702>
 8011442:	b133      	cbz	r3, 8011452 <iNemoEngine_API_Update+0x1bca>
 8011444:	f240 1101 	movw	r1, #257	; 0x101
 8011448:	f8ad 10e8 	strh.w	r1, [sp, #232]	; 0xe8
 801144c:	2101      	movs	r1, #1
 801144e:	f88d 10ea 	strb.w	r1, [sp, #234]	; 0xea
 8011452:	2401      	movs	r4, #1
 8011454:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 8011458:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 801145c:	ed5f 7a5b 	vldr	s15, [pc, #-364]	; 80112f4 <iNemoEngine_API_Update+0x1a6c>
 8011460:	eef4 cae7 	vcmpe.f32	s25, s15
 8011464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011468:	dc07      	bgt.n	801147a <iNemoEngine_API_Update+0x1bf2>
 801146a:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 80112f8 <iNemoEngine_API_Update+0x1a70>
 801146e:	eef4 cae7 	vcmpe.f32	s25, s15
 8011472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011476:	f141 801d 	bpl.w	80124b4 <iNemoEngine_API_Update+0x2c2c>
 801147a:	2300      	movs	r3, #0
 801147c:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 8011480:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8011484:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8011488:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 801148c:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 80112fc <iNemoEngine_API_Update+0x1a74>
 8011490:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8011494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011498:	dc07      	bgt.n	80114aa <iNemoEngine_API_Update+0x1c22>
 801149a:	ed5f 7a67 	vldr	s15, [pc, #-412]	; 8011300 <iNemoEngine_API_Update+0x1a78>
 801149e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80114a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114a6:	f140 86ed 	bpl.w	8012284 <iNemoEngine_API_Update+0x29fc>
 80114aa:	2300      	movs	r3, #0
 80114ac:	f8ad 30eb 	strh.w	r3, [sp, #235]	; 0xeb
 80114b0:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
 80114b4:	f8ad 30f1 	strh.w	r3, [sp, #241]	; 0xf1
 80114b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80114bc:	eef4 fae7 	vcmpe.f32	s31, s15
 80114c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c4:	f340 8486 	ble.w	8011dd4 <iNemoEngine_API_Update+0x254c>
 80114c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80114cc:	ee7f 7aa7 	vadd.f32	s15, s31, s15
 80114d0:	9a06      	ldr	r2, [sp, #24]
 80114d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80114d6:	2300      	movs	r3, #0
 80114d8:	ee67 4aa4 	vmul.f32	s9, s15, s9
 80114dc:	ee27 fa8f 	vmul.f32	s30, s15, s30
 80114e0:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80114e4:	eef4 fae7 	vcmpe.f32	s31, s15
 80114e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ec:	bfc4      	itt	gt
 80114ee:	f88d 30f1 	strbgt.w	r3, [sp, #241]	; 0xf1
 80114f2:	f88d 30f3 	strbgt.w	r3, [sp, #243]	; 0xf3
 80114f6:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 80114fa:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 80114fe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8011500:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 8011504:	2b0e      	cmp	r3, #14
 8011506:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 801150a:	f340 8567 	ble.w	8011fdc <iNemoEngine_API_Update+0x2754>
 801150e:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8011512:	eeb4 dae7 	vcmpe.f32	s26, s15
 8011516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801151a:	f340 82ed 	ble.w	8011af8 <iNemoEngine_API_Update+0x2270>
 801151e:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8011522:	eef4 7acb 	vcmpe.f32	s15, s22
 8011526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801152a:	f340 82e5 	ble.w	8011af8 <iNemoEngine_API_Update+0x2270>
 801152e:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 8011532:	eef4 7aed 	vcmpe.f32	s15, s27
 8011536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801153a:	f340 82dd 	ble.w	8011af8 <iNemoEngine_API_Update+0x2270>
 801153e:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8011304 <iNemoEngine_API_Update+0x1a7c>
 8011542:	eeb0 7ace 	vabs.f32	s14, s28
 8011546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801154e:	f140 82d3 	bpl.w	8011af8 <iNemoEngine_API_Update+0x2270>
 8011552:	eeb0 7aee 	vabs.f32	s14, s29
 8011556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801155e:	f140 82cb 	bpl.w	8011af8 <iNemoEngine_API_Update+0x2270>
 8011562:	eeb0 7aeb 	vabs.f32	s14, s23
 8011566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801156e:	f140 82c3 	bpl.w	8011af8 <iNemoEngine_API_Update+0x2270>
 8011572:	ed5f 7a9b 	vldr	s15, [pc, #-620]	; 8011308 <iNemoEngine_API_Update+0x1a80>
 8011576:	eef0 aaea 	vabs.f32	s21, s21
 801157a:	eef4 aae7 	vcmpe.f32	s21, s15
 801157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011582:	f140 82b9 	bpl.w	8011af8 <iNemoEngine_API_Update+0x2270>
 8011586:	eeb0 aaca 	vabs.f32	s20, s20
 801158a:	eeb4 aae7 	vcmpe.f32	s20, s15
 801158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011592:	f140 82b1 	bpl.w	8011af8 <iNemoEngine_API_Update+0x2270>
 8011596:	eef0 9ae9 	vabs.f32	s19, s19
 801159a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115a2:	f140 82a9 	bpl.w	8011af8 <iNemoEngine_API_Update+0x2270>
 80115a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80115a8:	9806      	ldr	r0, [sp, #24]
 80115aa:	ed93 6a00 	vldr	s12, [r3]
 80115ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80115b0:	f890 11a0 	ldrb.w	r1, [r0, #416]	; 0x1a0
 80115b4:	ed93 7a00 	vldr	s14, [r3]
 80115b8:	f200 73a4 	addw	r3, r0, #1956	; 0x7a4
 80115bc:	edd3 4a00 	vldr	s9, [r3]
 80115c0:	2909      	cmp	r1, #9
 80115c2:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80115c6:	f500 63f6 	add.w	r3, r0, #1968	; 0x7b0
 80115ca:	ed93 5a00 	vldr	s10, [r3]
 80115ce:	bf8c      	ite	hi
 80115d0:	220a      	movhi	r2, #10
 80115d2:	2205      	movls	r2, #5
 80115d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115d8:	bfb4      	ite	lt
 80115da:	eef0 7a64 	vmovlt.f32	s15, s9
 80115de:	eef0 7a46 	vmovge.f32	s15, s12
 80115e2:	eef4 7ac5 	vcmpe.f32	s15, s10
 80115e6:	bf8c      	ite	hi
 80115e8:	eef0 5a64 	vmovhi.f32	s11, s9
 80115ec:	eef0 5a46 	vmovls.f32	s11, s12
 80115f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f4:	ee36 6a24 	vadd.f32	s12, s12, s9
 80115f8:	eef4 5ac5 	vcmpe.f32	s11, s10
 80115fc:	bfb8      	it	lt
 80115fe:	eef0 7a45 	vmovlt.f32	s15, s10
 8011602:	f200 73bc 	addw	r3, r0, #1980	; 0x7bc
 8011606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801160a:	bf88      	it	hi
 801160c:	eef0 5a45 	vmovhi.f32	s11, s10
 8011610:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011614:	ed93 5a00 	vldr	s10, [r3]
 8011618:	eef4 7ac5 	vcmpe.f32	s15, s10
 801161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011620:	eef4 5ac5 	vcmpe.f32	s11, s10
 8011624:	bfb8      	it	lt
 8011626:	eef0 7a45 	vmovlt.f32	s15, s10
 801162a:	f500 63f9 	add.w	r3, r0, #1992	; 0x7c8
 801162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011632:	bf88      	it	hi
 8011634:	eef0 5a45 	vmovhi.f32	s11, s10
 8011638:	ee36 6a05 	vadd.f32	s12, s12, s10
 801163c:	ed93 5a00 	vldr	s10, [r3]
 8011640:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011648:	eef4 5ac5 	vcmpe.f32	s11, s10
 801164c:	bfb8      	it	lt
 801164e:	eef0 7a45 	vmovlt.f32	s15, s10
 8011652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011656:	bf88      	it	hi
 8011658:	eef0 5a45 	vmovhi.f32	s11, s10
 801165c:	2a05      	cmp	r2, #5
 801165e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011662:	d065      	beq.n	8011730 <iNemoEngine_API_Update+0x1ea8>
 8011664:	f200 73d4 	addw	r3, r0, #2004	; 0x7d4
 8011668:	ed93 5a00 	vldr	s10, [r3]
 801166c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011674:	eef4 5ac5 	vcmpe.f32	s11, s10
 8011678:	bfb8      	it	lt
 801167a:	eef0 7a45 	vmovlt.f32	s15, s10
 801167e:	f500 63fc 	add.w	r3, r0, #2016	; 0x7e0
 8011682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011686:	bf88      	it	hi
 8011688:	eef0 5a45 	vmovhi.f32	s11, s10
 801168c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011690:	ed93 5a00 	vldr	s10, [r3]
 8011694:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801169c:	eef4 5ac5 	vcmpe.f32	s11, s10
 80116a0:	bfb8      	it	lt
 80116a2:	eef0 7a45 	vmovlt.f32	s15, s10
 80116a6:	f200 73ec 	addw	r3, r0, #2028	; 0x7ec
 80116aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ae:	bf88      	it	hi
 80116b0:	eef0 5a45 	vmovhi.f32	s11, s10
 80116b4:	ee36 6a05 	vadd.f32	s12, s12, s10
 80116b8:	ed93 5a00 	vldr	s10, [r3]
 80116bc:	eef4 7ac5 	vcmpe.f32	s15, s10
 80116c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c4:	eef4 5ac5 	vcmpe.f32	s11, s10
 80116c8:	bfb8      	it	lt
 80116ca:	eef0 7a45 	vmovlt.f32	s15, s10
 80116ce:	f500 63ff 	add.w	r3, r0, #2040	; 0x7f8
 80116d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116d6:	bf88      	it	hi
 80116d8:	eef0 5a45 	vmovhi.f32	s11, s10
 80116dc:	ee36 6a05 	vadd.f32	s12, s12, s10
 80116e0:	ed93 5a00 	vldr	s10, [r3]
 80116e4:	eef4 7ac5 	vcmpe.f32	s15, s10
 80116e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ec:	eef4 5ac5 	vcmpe.f32	s11, s10
 80116f0:	bfb8      	it	lt
 80116f2:	eef0 7a45 	vmovlt.f32	s15, s10
 80116f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116fa:	bf88      	it	hi
 80116fc:	eef0 5a45 	vmovhi.f32	s11, s10
 8011700:	2a0a      	cmp	r2, #10
 8011702:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011706:	d113      	bne.n	8011730 <iNemoEngine_API_Update+0x1ea8>
 8011708:	f600 0304 	addw	r3, r0, #2052	; 0x804
 801170c:	ed93 5a00 	vldr	s10, [r3]
 8011710:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011718:	eef4 5ac5 	vcmpe.f32	s11, s10
 801171c:	bfb8      	it	lt
 801171e:	eef0 7a45 	vmovlt.f32	s15, s10
 8011722:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801172a:	bf88      	it	hi
 801172c:	eef0 5a45 	vmovhi.f32	s11, s10
 8011730:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011734:	eddf 5aeb 	vldr	s11, [pc, #940]	; 8011ae4 <iNemoEngine_API_Update+0x225c>
 8011738:	ed9f 5aeb 	vldr	s10, [pc, #940]	; 8011ae8 <iNemoEngine_API_Update+0x2260>
 801173c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011740:	ee26 6a05 	vmul.f32	s12, s12, s10
 8011744:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801174c:	f300 81d4 	bgt.w	8011af8 <iNemoEngine_API_Update+0x2270>
 8011750:	eef0 7ac6 	vabs.f32	s15, s12
 8011754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011758:	ed9f 6ae4 	vldr	s12, [pc, #912]	; 8011aec <iNemoEngine_API_Update+0x2264>
 801175c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011764:	f300 81c8 	bgt.w	8011af8 <iNemoEngine_API_Update+0x2270>
 8011768:	9806      	ldr	r0, [sp, #24]
 801176a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801176c:	ed93 6a00 	vldr	s12, [r3]
 8011770:	f500 63f5 	add.w	r3, r0, #1960	; 0x7a8
 8011774:	edd3 4a00 	vldr	s9, [r3]
 8011778:	f200 73b4 	addw	r3, r0, #1972	; 0x7b4
 801177c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8011780:	ed93 5a00 	vldr	s10, [r3]
 8011784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011788:	bfb4      	ite	lt
 801178a:	eef0 7a64 	vmovlt.f32	s15, s9
 801178e:	eef0 7a46 	vmovge.f32	s15, s12
 8011792:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011796:	bf8c      	ite	hi
 8011798:	eef0 5a64 	vmovhi.f32	s11, s9
 801179c:	eef0 5a46 	vmovls.f32	s11, s12
 80117a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117a4:	ee36 6a24 	vadd.f32	s12, s12, s9
 80117a8:	eef4 5ac5 	vcmpe.f32	s11, s10
 80117ac:	bfb8      	it	lt
 80117ae:	eef0 7a45 	vmovlt.f32	s15, s10
 80117b2:	f500 63f8 	add.w	r3, r0, #1984	; 0x7c0
 80117b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ba:	bf88      	it	hi
 80117bc:	eef0 5a45 	vmovhi.f32	s11, s10
 80117c0:	ee36 6a05 	vadd.f32	s12, s12, s10
 80117c4:	ed93 5a00 	vldr	s10, [r3]
 80117c8:	eef4 7ac5 	vcmpe.f32	s15, s10
 80117cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117d0:	eef4 5ac5 	vcmpe.f32	s11, s10
 80117d4:	bfb8      	it	lt
 80117d6:	eef0 7a45 	vmovlt.f32	s15, s10
 80117da:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
 80117de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e2:	bf88      	it	hi
 80117e4:	eef0 5a45 	vmovhi.f32	s11, s10
 80117e8:	ee36 6a05 	vadd.f32	s12, s12, s10
 80117ec:	ed93 5a00 	vldr	s10, [r3]
 80117f0:	eef4 7ac5 	vcmpe.f32	s15, s10
 80117f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f8:	eef4 5ac5 	vcmpe.f32	s11, s10
 80117fc:	bfb8      	it	lt
 80117fe:	eef0 7a45 	vmovlt.f32	s15, s10
 8011802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011806:	bf88      	it	hi
 8011808:	eef0 5a45 	vmovhi.f32	s11, s10
 801180c:	2a05      	cmp	r2, #5
 801180e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011812:	d065      	beq.n	80118e0 <iNemoEngine_API_Update+0x2058>
 8011814:	f500 63fb 	add.w	r3, r0, #2008	; 0x7d8
 8011818:	ed93 5a00 	vldr	s10, [r3]
 801181c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011824:	eef4 5ac5 	vcmpe.f32	s11, s10
 8011828:	bfb8      	it	lt
 801182a:	eef0 7a45 	vmovlt.f32	s15, s10
 801182e:	f200 73e4 	addw	r3, r0, #2020	; 0x7e4
 8011832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011836:	bf88      	it	hi
 8011838:	eef0 5a45 	vmovhi.f32	s11, s10
 801183c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011840:	ed93 5a00 	vldr	s10, [r3]
 8011844:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801184c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8011850:	bfb8      	it	lt
 8011852:	eef0 7a45 	vmovlt.f32	s15, s10
 8011856:	f500 63fe 	add.w	r3, r0, #2032	; 0x7f0
 801185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185e:	bf88      	it	hi
 8011860:	eef0 5a45 	vmovhi.f32	s11, s10
 8011864:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011868:	ed93 5a00 	vldr	s10, [r3]
 801186c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011874:	eef4 5ac5 	vcmpe.f32	s11, s10
 8011878:	bfb8      	it	lt
 801187a:	eef0 7a45 	vmovlt.f32	s15, s10
 801187e:	f200 73fc 	addw	r3, r0, #2044	; 0x7fc
 8011882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011886:	bf88      	it	hi
 8011888:	eef0 5a45 	vmovhi.f32	s11, s10
 801188c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011890:	ed93 5a00 	vldr	s10, [r3]
 8011894:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801189c:	eef4 5ac5 	vcmpe.f32	s11, s10
 80118a0:	bfb8      	it	lt
 80118a2:	eef0 7a45 	vmovlt.f32	s15, s10
 80118a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118aa:	bf88      	it	hi
 80118ac:	eef0 5a45 	vmovhi.f32	s11, s10
 80118b0:	2a0a      	cmp	r2, #10
 80118b2:	ee36 6a05 	vadd.f32	s12, s12, s10
 80118b6:	d113      	bne.n	80118e0 <iNemoEngine_API_Update+0x2058>
 80118b8:	f600 0308 	addw	r3, r0, #2056	; 0x808
 80118bc:	ed93 5a00 	vldr	s10, [r3]
 80118c0:	eef4 7ac5 	vcmpe.f32	s15, s10
 80118c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c8:	eef4 5ac5 	vcmpe.f32	s11, s10
 80118cc:	bfb8      	it	lt
 80118ce:	eef0 7a45 	vmovlt.f32	s15, s10
 80118d2:	ee36 6a05 	vadd.f32	s12, s12, s10
 80118d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118da:	bf88      	it	hi
 80118dc:	eef0 5a45 	vmovhi.f32	s11, s10
 80118e0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80118e4:	eddf 5a7f 	vldr	s11, [pc, #508]	; 8011ae4 <iNemoEngine_API_Update+0x225c>
 80118e8:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 8011ae8 <iNemoEngine_API_Update+0x2260>
 80118ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118f0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80118f4:	eef4 7ae5 	vcmpe.f32	s15, s11
 80118f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118fc:	f300 80fc 	bgt.w	8011af8 <iNemoEngine_API_Update+0x2270>
 8011900:	eef0 7ac6 	vabs.f32	s15, s12
 8011904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011908:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8011aec <iNemoEngine_API_Update+0x2264>
 801190c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011914:	f300 80f0 	bgt.w	8011af8 <iNemoEngine_API_Update+0x2270>
 8011918:	9806      	ldr	r0, [sp, #24]
 801191a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801191c:	ed93 5a00 	vldr	s10, [r3]
 8011920:	f200 73ac 	addw	r3, r0, #1964	; 0x7ac
 8011924:	edd3 4a00 	vldr	s9, [r3]
 8011928:	f500 63f7 	add.w	r3, r0, #1976	; 0x7b8
 801192c:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8011930:	ed93 6a00 	vldr	s12, [r3]
 8011934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011938:	bfb4      	ite	lt
 801193a:	eef0 7a64 	vmovlt.f32	s15, s9
 801193e:	eef0 7a45 	vmovge.f32	s15, s10
 8011942:	bf8c      	ite	hi
 8011944:	eef0 5a64 	vmovhi.f32	s11, s9
 8011948:	eef0 5a45 	vmovls.f32	s11, s10
 801194c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011954:	ee35 5a24 	vadd.f32	s10, s10, s9
 8011958:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801195c:	bfa8      	it	ge
 801195e:	eef0 7a46 	vmovge.f32	s15, s12
 8011962:	f200 73c4 	addw	r3, r0, #1988	; 0x7c4
 8011966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801196a:	bf98      	it	ls
 801196c:	eef0 5a46 	vmovls.f32	s11, s12
 8011970:	ee76 4a05 	vadd.f32	s9, s12, s10
 8011974:	ed93 6a00 	vldr	s12, [r3]
 8011978:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011980:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8011984:	bfa8      	it	ge
 8011986:	eef0 7a46 	vmovge.f32	s15, s12
 801198a:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
 801198e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011992:	bf8c      	ite	hi
 8011994:	eeb0 5a65 	vmovhi.f32	s10, s11
 8011998:	eeb0 5a46 	vmovls.f32	s10, s12
 801199c:	edd3 5a00 	vldr	s11, [r3]
 80119a0:	eef4 5ae7 	vcmpe.f32	s11, s15
 80119a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a8:	ee36 6a24 	vadd.f32	s12, s12, s9
 80119ac:	eef4 5ac5 	vcmpe.f32	s11, s10
 80119b0:	bfa8      	it	ge
 80119b2:	eef0 7a65 	vmovge.f32	s15, s11
 80119b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ba:	ee35 6a86 	vadd.f32	s12, s11, s12
 80119be:	bf88      	it	hi
 80119c0:	eef0 5a45 	vmovhi.f32	s11, s10
 80119c4:	2a05      	cmp	r2, #5
 80119c6:	d065      	beq.n	8011a94 <iNemoEngine_API_Update+0x220c>
 80119c8:	f200 73dc 	addw	r3, r0, #2012	; 0x7dc
 80119cc:	ed93 5a00 	vldr	s10, [r3]
 80119d0:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80119d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119d8:	eeb4 5ae5 	vcmpe.f32	s10, s11
 80119dc:	bfa8      	it	ge
 80119de:	eef0 7a45 	vmovge.f32	s15, s10
 80119e2:	f500 63fd 	add.w	r3, r0, #2024	; 0x7e8
 80119e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ea:	bf98      	it	ls
 80119ec:	eef0 5a45 	vmovls.f32	s11, s10
 80119f0:	ee35 5a06 	vadd.f32	s10, s10, s12
 80119f4:	ed93 6a00 	vldr	s12, [r3]
 80119f8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80119fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a00:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8011a04:	bfa8      	it	ge
 8011a06:	eef0 7a46 	vmovge.f32	s15, s12
 8011a0a:	f200 73f4 	addw	r3, r0, #2036	; 0x7f4
 8011a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a12:	bf98      	it	ls
 8011a14:	eef0 5a46 	vmovls.f32	s11, s12
 8011a18:	ee36 5a05 	vadd.f32	s10, s12, s10
 8011a1c:	ed93 6a00 	vldr	s12, [r3]
 8011a20:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a28:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8011a2c:	bfa8      	it	ge
 8011a2e:	eef0 7a46 	vmovge.f32	s15, s12
 8011a32:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8011a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a3a:	bf98      	it	ls
 8011a3c:	eef0 5a46 	vmovls.f32	s11, s12
 8011a40:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011a44:	ed93 5a00 	vldr	s10, [r3]
 8011a48:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8011a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a50:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8011a54:	bfa8      	it	ge
 8011a56:	eef0 7a45 	vmovge.f32	s15, s10
 8011a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a5e:	bf98      	it	ls
 8011a60:	eef0 5a45 	vmovls.f32	s11, s10
 8011a64:	2a0a      	cmp	r2, #10
 8011a66:	ee35 6a06 	vadd.f32	s12, s10, s12
 8011a6a:	d113      	bne.n	8011a94 <iNemoEngine_API_Update+0x220c>
 8011a6c:	f600 030c 	addw	r3, r0, #2060	; 0x80c
 8011a70:	ed93 5a00 	vldr	s10, [r3]
 8011a74:	eef4 7ac5 	vcmpe.f32	s15, s10
 8011a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a7c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8011a80:	bfb8      	it	lt
 8011a82:	eef0 7a45 	vmovlt.f32	s15, s10
 8011a86:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a8e:	bf88      	it	hi
 8011a90:	eef0 5a45 	vmovhi.f32	s11, s10
 8011a94:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011a98:	eddf 5a12 	vldr	s11, [pc, #72]	; 8011ae4 <iNemoEngine_API_Update+0x225c>
 8011a9c:	ed9f 5a12 	vldr	s10, [pc, #72]	; 8011ae8 <iNemoEngine_API_Update+0x2260>
 8011aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011aa4:	ee26 6a05 	vmul.f32	s12, s12, s10
 8011aa8:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab0:	dc22      	bgt.n	8011af8 <iNemoEngine_API_Update+0x2270>
 8011ab2:	eef0 7ac6 	vabs.f32	s15, s12
 8011ab6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011aba:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8011aec <iNemoEngine_API_Update+0x2264>
 8011abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ac6:	dc17      	bgt.n	8011af8 <iNemoEngine_API_Update+0x2270>
 8011ac8:	9b06      	ldr	r3, [sp, #24]
 8011aca:	795b      	ldrb	r3, [r3, #5]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	f002 8117 	beq.w	8013d00 <iNemoEngine_API_Update+0x4478>
 8011ad2:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8011ad6:	2a01      	cmp	r2, #1
 8011ad8:	f001 87d1 	beq.w	8013a7e <iNemoEngine_API_Update+0x41f6>
 8011adc:	f04f 0901 	mov.w	r9, #1
 8011ae0:	f000 bc0b 	b.w	80122fa <iNemoEngine_API_Update+0x2a72>
 8011ae4:	3be56041 	.word	0x3be56041
 8011ae8:	3dcccccd 	.word	0x3dcccccd
 8011aec:	3e333333 	.word	0x3e333333
 8011af0:	42480000 	.word	0x42480000
 8011af4:	00000000 	.word	0x00000000
 8011af8:	9b06      	ldr	r3, [sp, #24]
 8011afa:	795b      	ldrb	r3, [r3, #5]
 8011afc:	f04f 0900 	mov.w	r9, #0
 8011b00:	f8ad 90ee 	strh.w	r9, [sp, #238]	; 0xee
 8011b04:	f88d 90f0 	strb.w	r9, [sp, #240]	; 0xf0
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	f040 83f1 	bne.w	80122f0 <iNemoEngine_API_Update+0x2a68>
 8011b0e:	9906      	ldr	r1, [sp, #24]
 8011b10:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 8011b14:	9295      	str	r2, [sp, #596]	; 0x254
 8011b16:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 8011b1a:	9296      	str	r2, [sp, #600]	; 0x258
 8011b1c:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 8011b20:	9297      	str	r2, [sp, #604]	; 0x25c
 8011b22:	2200      	movs	r2, #0
 8011b24:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8011b28:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8011b2c:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8011b30:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8011b34:	704a      	strb	r2, [r1, #1]
 8011b36:	ed5f 7a12 	vldr	s15, [pc, #-72]	; 8011af0 <iNemoEngine_API_Update+0x2268>
 8011b3a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b42:	f2c0 8138 	blt.w	8011db6 <iNemoEngine_API_Update+0x252e>
 8011b46:	9906      	ldr	r1, [sp, #24]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8011b4e:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8011b52:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d125      	bne.n	8011ba6 <iNemoEngine_API_Update+0x231e>
 8011b5a:	eddd 4a86 	vldr	s9, [sp, #536]	; 0x218
 8011b5e:	ed9d 6a5f 	vldr	s12, [sp, #380]	; 0x17c
 8011b62:	ed9d 5a87 	vldr	s10, [sp, #540]	; 0x21c
 8011b66:	ed9d 7a60 	vldr	s14, [sp, #384]	; 0x180
 8011b6a:	eddd 5a88 	vldr	s11, [sp, #544]	; 0x220
 8011b6e:	eddd 7a61 	vldr	s15, [sp, #388]	; 0x184
 8011b72:	eeb6 4a08 	vmov.f32	s8, #104	; 0x3f400000  0.750
 8011b76:	ee64 4a84 	vmul.f32	s9, s9, s8
 8011b7a:	ee36 6a06 	vadd.f32	s12, s12, s12
 8011b7e:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011b82:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011b86:	ee65 5a84 	vmul.f32	s11, s11, s8
 8011b8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011b8e:	edcd 4a86 	vstr	s9, [sp, #536]	; 0x218
 8011b92:	ed8d 6a5f 	vstr	s12, [sp, #380]	; 0x17c
 8011b96:	ed8d 5a87 	vstr	s10, [sp, #540]	; 0x21c
 8011b9a:	ed8d 7a60 	vstr	s14, [sp, #384]	; 0x180
 8011b9e:	edcd 5a88 	vstr	s11, [sp, #544]	; 0x220
 8011ba2:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 8011ba6:	9c06      	ldr	r4, [sp, #24]
 8011ba8:	ed9d 6a60 	vldr	s12, [sp, #384]	; 0x180
 8011bac:	ed94 2a7f 	vldr	s4, [r4, #508]	; 0x1fc
 8011bb0:	edd4 1a75 	vldr	s3, [r4, #468]	; 0x1d4
 8011bb4:	edd4 2a89 	vldr	s5, [r4, #548]	; 0x224
 8011bb8:	edd4 3a93 	vldr	s7, [r4, #588]	; 0x24c
 8011bbc:	eddd 0a5f 	vldr	s1, [sp, #380]	; 0x17c
 8011bc0:	ed9d 1a61 	vldr	s2, [sp, #388]	; 0x184
 8011bc4:	ed94 4a9d 	vldr	s8, [r4, #628]	; 0x274
 8011bc8:	edd4 4aa7 	vldr	s9, [r4, #668]	; 0x29c
 8011bcc:	ed94 5ab1 	vldr	s10, [r4, #708]	; 0x2c4
 8011bd0:	ed9d 3a8b 	vldr	s6, [sp, #556]	; 0x22c
 8011bd4:	ed9d 7a89 	vldr	s14, [sp, #548]	; 0x224
 8011bd8:	eddd 7a8a 	vldr	s15, [sp, #552]	; 0x228
 8011bdc:	edd4 5abb 	vldr	s11, [r4, #748]	; 0x2ec
 8011be0:	eea6 2a06 	vfma.f32	s4, s12, s12
 8011be4:	ab83      	add	r3, sp, #524	; 0x20c
 8011be6:	aa8f      	add	r2, sp, #572	; 0x23c
 8011be8:	ed9d 6a62 	vldr	s12, [sp, #392]	; 0x188
 8011bec:	ed84 2a7f 	vstr	s4, [r4, #508]	; 0x1fc
 8011bf0:	eee0 1aa0 	vfma.f32	s3, s1, s1
 8011bf4:	a93a      	add	r1, sp, #232	; 0xe8
 8011bf6:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
 8011bfa:	eee1 2a01 	vfma.f32	s5, s2, s2
 8011bfe:	eee6 3a06 	vfma.f32	s7, s12, s12
 8011c02:	eddd 0a63 	vldr	s1, [sp, #396]	; 0x18c
 8011c06:	ed9d 1a64 	vldr	s2, [sp, #400]	; 0x190
 8011c0a:	ed9d 6a65 	vldr	s12, [sp, #404]	; 0x194
 8011c0e:	edc4 1a75 	vstr	s3, [r4, #468]	; 0x1d4
 8011c12:	eea0 4aa0 	vfma.f32	s8, s1, s1
 8011c16:	eee1 4a01 	vfma.f32	s9, s2, s2
 8011c1a:	eea6 5a06 	vfma.f32	s10, s12, s12
 8011c1e:	eddd 0a66 	vldr	s1, [sp, #408]	; 0x198
 8011c22:	ed9d 1a67 	vldr	s2, [sp, #412]	; 0x19c
 8011c26:	ed94 6ac5 	vldr	s12, [r4, #788]	; 0x314
 8011c2a:	edc4 2a89 	vstr	s5, [r4, #548]	; 0x224
 8011c2e:	eee0 5aa0 	vfma.f32	s11, s1, s1
 8011c32:	eea1 6a01 	vfma.f32	s12, s2, s2
 8011c36:	ee26 7a87 	vmul.f32	s14, s13, s14
 8011c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c3e:	ee66 6a83 	vmul.f32	s13, s13, s6
 8011c42:	ee27 7a28 	vmul.f32	s14, s14, s17
 8011c46:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8011c4a:	ee66 8aa8 	vmul.f32	s17, s13, s17
 8011c4e:	ed8d 7a89 	vstr	s14, [sp, #548]	; 0x224
 8011c52:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 8011c56:	edc4 3a93 	vstr	s7, [r4, #588]	; 0x24c
 8011c5a:	ed84 4a9d 	vstr	s8, [r4, #628]	; 0x274
 8011c5e:	edc4 4aa7 	vstr	s9, [r4, #668]	; 0x29c
 8011c62:	ed84 5ab1 	vstr	s10, [r4, #708]	; 0x2c4
 8011c66:	edcd 8a8b 	vstr	s17, [sp, #556]	; 0x22c
 8011c6a:	edc4 5abb 	vstr	s11, [r4, #748]	; 0x2ec
 8011c6e:	ed84 6ac5 	vstr	s12, [r4, #788]	; 0x314
 8011c72:	9300      	str	r3, [sp, #0]
 8011c74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011c76:	f7fc fb1d 	bl	800e2b4 <kf_update>
 8011c7a:	edd4 6a6d 	vldr	s13, [r4, #436]	; 0x1b4
 8011c7e:	ed94 6a6c 	vldr	s12, [r4, #432]	; 0x1b0
 8011c82:	ed94 7a6e 	vldr	s14, [r4, #440]	; 0x1b8
 8011c86:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8011c8a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011c8e:	eee6 7a06 	vfma.f32	s15, s12, s12
 8011c92:	eee7 7a07 	vfma.f32	s15, s14, s14
 8011c96:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c9e:	f100 80bb 	bmi.w	8011e18 <iNemoEngine_API_Update+0x2590>
 8011ca2:	ed5f 5a6c 	vldr	s11, [pc, #-432]	; 8011af4 <iNemoEngine_API_Update+0x226c>
 8011ca6:	ed8d 6a52 	vstr	s12, [sp, #328]	; 0x148
 8011caa:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8011cae:	aa4e      	add	r2, sp, #312	; 0x138
 8011cb0:	a8ae      	add	r0, sp, #696	; 0x2b8
 8011cb2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8011cb6:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8011cba:	4611      	mov	r1, r2
 8011cbc:	ae68      	add	r6, sp, #416	; 0x1a0
 8011cbe:	af70      	add	r7, sp, #448	; 0x1c0
 8011cc0:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 8011cc4:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8011cc8:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 8011ccc:	ee27 6a86 	vmul.f32	s12, s15, s12
 8011cd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011cd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011cd8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011cdc:	edcd 5a55 	vstr	s11, [sp, #340]	; 0x154
 8011ce0:	ed8d 6aae 	vstr	s12, [sp, #696]	; 0x2b8
 8011ce4:	edcd 6aaf 	vstr	s13, [sp, #700]	; 0x2bc
 8011ce8:	ed8d 7ab0 	vstr	s14, [sp, #704]	; 0x2c0
 8011cec:	edcd 7ab1 	vstr	s15, [sp, #708]	; 0x2c4
 8011cf0:	f7fc f920 	bl	800df34 <qmult>
 8011cf4:	ed92 6a01 	vldr	s12, [r2, #4]
 8011cf8:	edd2 5a00 	vldr	s11, [r2]
 8011cfc:	edd2 6a02 	vldr	s13, [r2, #8]
 8011d00:	ed92 7a03 	vldr	s14, [r2, #12]
 8011d04:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8011d06:	ee66 7a06 	vmul.f32	s15, s12, s12
 8011d0a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8011d0e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8011d12:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8011d16:	eee7 7a07 	vfma.f32	s15, s14, s14
 8011d1a:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8011d1e:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8011d22:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8011d26:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011d2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8011d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011d32:	edcd 5a4a 	vstr	s11, [sp, #296]	; 0x128
 8011d36:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 8011d3a:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 8011d3e:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
 8011d42:	4634      	mov	r4, r6
 8011d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d46:	42bc      	cmp	r4, r7
 8011d48:	f105 0510 	add.w	r5, r5, #16
 8011d4c:	f106 0610 	add.w	r6, r6, #16
 8011d50:	f845 0c10 	str.w	r0, [r5, #-16]
 8011d54:	f845 1c0c 	str.w	r1, [r5, #-12]
 8011d58:	f845 2c08 	str.w	r2, [r5, #-8]
 8011d5c:	f845 3c04 	str.w	r3, [r5, #-4]
 8011d60:	d1ef      	bne.n	8011d42 <iNemoEngine_API_Update+0x24ba>
 8011d62:	6830      	ldr	r0, [r6, #0]
 8011d64:	6028      	str	r0, [r5, #0]
 8011d66:	9e06      	ldr	r6, [sp, #24]
 8011d68:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8011d6a:	f8d6 31bc 	ldr.w	r3, [r6, #444]	; 0x1bc
 8011d6e:	6013      	str	r3, [r2, #0]
 8011d70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011d72:	f8d6 31c0 	ldr.w	r3, [r6, #448]	; 0x1c0
 8011d76:	6013      	str	r3, [r2, #0]
 8011d78:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8011d7a:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 8011d7e:	6013      	str	r3, [r2, #0]
 8011d80:	ad4a      	add	r5, sp, #296	; 0x128
 8011d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d84:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8011d86:	60eb      	str	r3, [r5, #12]
 8011d88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011d8a:	6028      	str	r0, [r5, #0]
 8011d8c:	6069      	str	r1, [r5, #4]
 8011d8e:	60aa      	str	r2, [r5, #8]
 8011d90:	edd6 9a75 	vldr	s19, [r6, #468]	; 0x1d4
 8011d94:	edc3 5a00 	vstr	s11, [r3]
 8011d98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d9a:	f8d6 794c 	ldr.w	r7, [r6, #2380]	; 0x94c
 8011d9e:	ed83 6a00 	vstr	s12, [r3]
 8011da2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011da4:	edc3 6a00 	vstr	s13, [r3]
 8011da8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011daa:	accc      	add	r4, sp, #816	; 0x330
 8011dac:	ed83 7a00 	vstr	s14, [r3]
 8011db0:	4635      	mov	r5, r6
 8011db2:	f7fd be20 	b.w	800f9f6 <iNemoEngine_API_Update+0x16e>
 8011db6:	9906      	ldr	r1, [sp, #24]
 8011db8:	f891 21a2 	ldrb.w	r2, [r1, #418]	; 0x1a2
 8011dbc:	2a31      	cmp	r2, #49	; 0x31
 8011dbe:	f63f aeca 	bhi.w	8011b56 <iNemoEngine_API_Update+0x22ce>
 8011dc2:	3201      	adds	r2, #1
 8011dc4:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 8011dc8:	2200      	movs	r2, #0
 8011dca:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8011dce:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8011dd2:	e6c0      	b.n	8011b56 <iNemoEngine_API_Update+0x22ce>
 8011dd4:	9a06      	ldr	r2, [sp, #24]
 8011dd6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	f340 8398 	ble.w	801250e <iNemoEngine_API_Update+0x2c86>
 8011dde:	3b01      	subs	r3, #1
 8011de0:	6593      	str	r3, [r2, #88]	; 0x58
 8011de2:	2300      	movs	r3, #0
 8011de4:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 8011de8:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8011dec:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8011df0:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 8011df4:	f7ff bb8b 	b.w	801150e <iNemoEngine_API_Update+0x1c86>
 8011df8:	7b53      	ldrb	r3, [r2, #13]
 8011dfa:	7b92      	ldrb	r2, [r2, #14]
 8011dfc:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 8011e00:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 8011e04:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8011e08:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 8011e0c:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 8011e10:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 8011e14:	f7ff bb07 	b.w	8011426 <iNemoEngine_API_Update+0x1b9e>
 8011e18:	ee35 5ae7 	vsub.f32	s10, s11, s15
 8011e1c:	eef1 5ac5 	vsqrt.f32	s11, s10
 8011e20:	e741      	b.n	8011ca6 <iNemoEngine_API_Update+0x241e>
 8011e22:	f9b5 3974 	ldrsh.w	r3, [r5, #2420]	; 0x974
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	f341 8173 	ble.w	8013112 <iNemoEngine_API_Update+0x388a>
 8011e2c:	3b01      	subs	r3, #1
 8011e2e:	f8a5 3974 	strh.w	r3, [r5, #2420]	; 0x974
 8011e32:	f7fd bd51 	b.w	800f8d8 <iNemoEngine_API_Update+0x50>
 8011e36:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011e3a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8011e3e:	eea7 6a07 	vfma.f32	s12, s14, s14
 8011e42:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011e46:	eeb0 8a67 	vmov.f32	s16, s15
 8011e4a:	eef0 7a46 	vmov.f32	s15, s12
 8011e4e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8011e52:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8011e56:	ee17 0a90 	vmov	r0, s15
 8011e5a:	f7ee fb75 	bl	8000548 <__aeabi_f2d>
 8011e5e:	ee78 7a08 	vadd.f32	s15, s16, s16
 8011e62:	4602      	mov	r2, r0
 8011e64:	460b      	mov	r3, r1
 8011e66:	ee17 0a90 	vmov	r0, s15
 8011e6a:	ec43 2b18 	vmov	d8, r2, r3
 8011e6e:	f7ee fb6b 	bl	8000548 <__aeabi_f2d>
 8011e72:	eeb0 1a48 	vmov.f32	s2, s16
 8011e76:	eef0 1a68 	vmov.f32	s3, s17
 8011e7a:	ec41 0b10 	vmov	d0, r0, r1
 8011e7e:	f006 ff85 	bl	8018d8c <atan2>
 8011e82:	a3eb      	add	r3, pc, #940	; (adr r3, 8012230 <iNemoEngine_API_Update+0x29a8>)
 8011e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e88:	ec51 0b10 	vmov	r0, r1, d0
 8011e8c:	f7ee fbb4 	bl	80005f8 <__aeabi_dmul>
 8011e90:	4be9      	ldr	r3, [pc, #932]	; (8012238 <iNemoEngine_API_Update+0x29b0>)
 8011e92:	2200      	movs	r2, #0
 8011e94:	f7ee f9fa 	bl	800028c <__adddf3>
 8011e98:	f7ee fea6 	bl	8000be8 <__aeabi_d2f>
 8011e9c:	ee08 0a10 	vmov	s16, r0
 8011ea0:	f7fd be3a 	b.w	800fb18 <iNemoEngine_API_Update+0x290>
 8011ea4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011ea8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8011eac:	eea7 6a07 	vfma.f32	s12, s14, s14
 8011eb0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011eb4:	eeb0 8a67 	vmov.f32	s16, s15
 8011eb8:	eef0 7a46 	vmov.f32	s15, s12
 8011ebc:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8011ec0:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8011ec4:	ee17 0a90 	vmov	r0, s15
 8011ec8:	f7ee fb3e 	bl	8000548 <__aeabi_f2d>
 8011ecc:	ee78 7a08 	vadd.f32	s15, s16, s16
 8011ed0:	4602      	mov	r2, r0
 8011ed2:	460b      	mov	r3, r1
 8011ed4:	ee17 0a90 	vmov	r0, s15
 8011ed8:	ec43 2b18 	vmov	d8, r2, r3
 8011edc:	f7ee fb34 	bl	8000548 <__aeabi_f2d>
 8011ee0:	eeb0 1a48 	vmov.f32	s2, s16
 8011ee4:	eef0 1a68 	vmov.f32	s3, s17
 8011ee8:	ec41 0b10 	vmov	d0, r0, r1
 8011eec:	f006 ff4e 	bl	8018d8c <atan2>
 8011ef0:	a3cf      	add	r3, pc, #828	; (adr r3, 8012230 <iNemoEngine_API_Update+0x29a8>)
 8011ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef6:	ec51 0b10 	vmov	r0, r1, d0
 8011efa:	f7ee fb7d 	bl	80005f8 <__aeabi_dmul>
 8011efe:	4bce      	ldr	r3, [pc, #824]	; (8012238 <iNemoEngine_API_Update+0x29b0>)
 8011f00:	2200      	movs	r2, #0
 8011f02:	f7ee f9c1 	bl	8000288 <__aeabi_dsub>
 8011f06:	f7ee fe6f 	bl	8000be8 <__aeabi_d2f>
 8011f0a:	ee08 0a10 	vmov	s16, r0
 8011f0e:	f7fd be03 	b.w	800fb18 <iNemoEngine_API_Update+0x290>
 8011f12:	ed9f baca 	vldr	s22, [pc, #808]	; 801223c <iNemoEngine_API_Update+0x29b4>
 8011f16:	49ca      	ldr	r1, [pc, #808]	; (8012240 <iNemoEngine_API_Update+0x29b8>)
 8011f18:	9806      	ldr	r0, [sp, #24]
 8011f1a:	f7fd beba 	b.w	800fc92 <iNemoEngine_API_Update+0x40a>
 8011f1e:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8011f22:	ee17 0a90 	vmov	r0, s15
 8011f26:	f7ee fb0f 	bl	8000548 <__aeabi_f2d>
 8011f2a:	ec41 0b10 	vmov	d0, r0, r1
 8011f2e:	f008 f9bb 	bl	801a2a8 <floor>
 8011f32:	ec51 0b10 	vmov	r0, r1, d0
 8011f36:	f7ee fe57 	bl	8000be8 <__aeabi_d2f>
 8011f3a:	ee0c 0a10 	vmov	s24, r0
 8011f3e:	f7fe b937 	b.w	80101b0 <iNemoEngine_API_Update+0x928>
 8011f42:	ee78 7a27 	vadd.f32	s15, s16, s15
 8011f46:	ee17 0a90 	vmov	r0, s15
 8011f4a:	f7ee fafd 	bl	8000548 <__aeabi_f2d>
 8011f4e:	ec41 0b10 	vmov	d0, r0, r1
 8011f52:	f008 f9a9 	bl	801a2a8 <floor>
 8011f56:	ec51 0b10 	vmov	r0, r1, d0
 8011f5a:	f7ee fe45 	bl	8000be8 <__aeabi_d2f>
 8011f5e:	ee08 0a10 	vmov	s16, r0
 8011f62:	f7fe b8fa 	b.w	801015a <iNemoEngine_API_Update+0x8d2>
 8011f66:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8011f6a:	ee17 0a90 	vmov	r0, s15
 8011f6e:	f7ee faeb 	bl	8000548 <__aeabi_f2d>
 8011f72:	ec41 0b10 	vmov	d0, r0, r1
 8011f76:	f008 f997 	bl	801a2a8 <floor>
 8011f7a:	ec51 0b10 	vmov	r0, r1, d0
 8011f7e:	f7ee fe33 	bl	8000be8 <__aeabi_d2f>
 8011f82:	ee08 0a90 	vmov	s17, r0
 8011f86:	f7fe b8bd 	b.w	8010104 <iNemoEngine_API_Update+0x87c>
 8011f8a:	2c00      	cmp	r4, #0
 8011f8c:	f47f aa59 	bne.w	8011442 <iNemoEngine_API_Update+0x1bba>
 8011f90:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
 8011f94:	f88d 40ea 	strb.w	r4, [sp, #234]	; 0xea
 8011f98:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 8011f9c:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 8011fa0:	f7ff ba5c 	b.w	801145c <iNemoEngine_API_Update+0x1bd4>
 8011fa4:	eddf 5aa7 	vldr	s11, [pc, #668]	; 8012244 <iNemoEngine_API_Update+0x29bc>
 8011fa8:	ed9f 4aa7 	vldr	s8, [pc, #668]	; 8012248 <iNemoEngine_API_Update+0x29c0>
 8011fac:	ed9f 6aa7 	vldr	s12, [pc, #668]	; 801224c <iNemoEngine_API_Update+0x29c4>
 8011fb0:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8012250 <iNemoEngine_API_Update+0x29c8>
 8011fb4:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8012254 <iNemoEngine_API_Update+0x29cc>
 8011fb8:	f7ff b9b2 	b.w	8011320 <iNemoEngine_API_Update+0x1a98>
 8011fbc:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8011fc0:	2400      	movs	r4, #0
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	f7ff b89f 	b.w	8011106 <iNemoEngine_API_Update+0x187e>
 8011fc8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011fcc:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 8011fd0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8011fd4:	eee7 4a84 	vfma.f32	s9, s15, s8
 8011fd8:	f7ff b86b 	b.w	80110b2 <iNemoEngine_API_Update+0x182a>
 8011fdc:	3305      	adds	r3, #5
 8011fde:	6593      	str	r3, [r2, #88]	; 0x58
 8011fe0:	f7ff ba95 	b.w	801150e <iNemoEngine_API_Update+0x1c86>
 8011fe4:	edd2 4a48 	vldr	s9, [r2, #288]	; 0x120
 8011fe8:	eef4 4ae8 	vcmpe.f32	s9, s17
 8011fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff0:	f341 8112 	ble.w	8013218 <iNemoEngine_API_Update+0x3990>
 8011ff4:	ed92 7a32 	vldr	s14, [r2, #200]	; 0xc8
 8011ff8:	eef4 8ac7 	vcmpe.f32	s17, s14
 8011ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012000:	4613      	mov	r3, r2
 8012002:	f101 8392 	bmi.w	801372a <iNemoEngine_API_Update+0x3ea2>
 8012006:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 801200a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012012:	f141 83a2 	bpl.w	801375a <iNemoEngine_API_Update+0x3ed2>
 8012016:	edd3 3a33 	vldr	s7, [r3, #204]	; 0xcc
 801201a:	ed93 4a35 	vldr	s8, [r3, #212]	; 0xd4
 801201e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012022:	ee34 4a63 	vsub.f32	s8, s8, s7
 8012026:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801202a:	ee24 7a07 	vmul.f32	s14, s8, s14
 801202e:	ee87 fa27 	vdiv.f32	s30, s14, s15
 8012032:	ee3f fa23 	vadd.f32	s30, s30, s7
 8012036:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 801203a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012042:	f2c1 83a3 	blt.w	801378c <iNemoEngine_API_Update+0x3f04>
 8012046:	9b06      	ldr	r3, [sp, #24]
 8012048:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 801204c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8012050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012054:	f141 86ad 	bpl.w	8013db2 <iNemoEngine_API_Update+0x452a>
 8012058:	edd3 3a37 	vldr	s7, [r3, #220]	; 0xdc
 801205c:	ed93 4a39 	vldr	s8, [r3, #228]	; 0xe4
 8012060:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012064:	ee34 4a63 	vsub.f32	s8, s8, s7
 8012068:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801206c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012070:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8012074:	ee3f fa23 	vadd.f32	s30, s30, s7
 8012078:	9b06      	ldr	r3, [sp, #24]
 801207a:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 801207e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012086:	f2c1 83a3 	blt.w	80137d0 <iNemoEngine_API_Update+0x3f48>
 801208a:	9b06      	ldr	r3, [sp, #24]
 801208c:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8012090:	eef4 8ac7 	vcmpe.f32	s17, s14
 8012094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012098:	f141 86ca 	bpl.w	8013e30 <iNemoEngine_API_Update+0x45a8>
 801209c:	edd3 3a3b 	vldr	s7, [r3, #236]	; 0xec
 80120a0:	ed93 4a3d 	vldr	s8, [r3, #244]	; 0xf4
 80120a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80120a8:	ee34 4a63 	vsub.f32	s8, s8, s7
 80120ac:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80120b0:	ee64 7a27 	vmul.f32	s15, s8, s15
 80120b4:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80120b8:	ee3f fa23 	vadd.f32	s30, s30, s7
 80120bc:	9b06      	ldr	r3, [sp, #24]
 80120be:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 80120c2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80120c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ca:	f2c1 83a3 	blt.w	8013814 <iNemoEngine_API_Update+0x3f8c>
 80120ce:	9b06      	ldr	r3, [sp, #24]
 80120d0:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 80120d4:	eef4 8ac7 	vcmpe.f32	s17, s14
 80120d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120dc:	f141 866c 	bpl.w	8013db8 <iNemoEngine_API_Update+0x4530>
 80120e0:	edd3 3a3f 	vldr	s7, [r3, #252]	; 0xfc
 80120e4:	ed93 4a41 	vldr	s8, [r3, #260]	; 0x104
 80120e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80120ec:	ee34 4a63 	vsub.f32	s8, s8, s7
 80120f0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80120f4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80120f8:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80120fc:	ee3f fa23 	vadd.f32	s30, s30, s7
 8012100:	9b06      	ldr	r3, [sp, #24]
 8012102:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8012106:	eef4 8ae7 	vcmpe.f32	s17, s15
 801210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801210e:	f2c1 83a3 	blt.w	8013858 <iNemoEngine_API_Update+0x3fd0>
 8012112:	9b06      	ldr	r3, [sp, #24]
 8012114:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 8012118:	eef4 8ac7 	vcmpe.f32	s17, s14
 801211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012120:	f141 863c 	bpl.w	8013d9c <iNemoEngine_API_Update+0x4514>
 8012124:	edd3 3a43 	vldr	s7, [r3, #268]	; 0x10c
 8012128:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 801212c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012130:	ee34 4a63 	vsub.f32	s8, s8, s7
 8012134:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8012138:	ee64 7a27 	vmul.f32	s15, s8, s15
 801213c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8012140:	ee3f fa23 	vadd.f32	s30, s30, s7
 8012144:	9b06      	ldr	r3, [sp, #24]
 8012146:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 801214a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012152:	f6fe ae38 	blt.w	8010dc6 <iNemoEngine_API_Update+0x153e>
 8012156:	9b06      	ldr	r3, [sp, #24]
 8012158:	ed93 4a47 	vldr	s8, [r3, #284]	; 0x11c
 801215c:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8012160:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8012164:	ee37 7a44 	vsub.f32	s14, s14, s8
 8012168:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801216c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012170:	ee87 faa4 	vdiv.f32	s30, s15, s9
 8012174:	ee3f fa04 	vadd.f32	s30, s30, s8
 8012178:	f7fe be25 	b.w	8010dc6 <iNemoEngine_API_Update+0x153e>
 801217c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8012180:	ee17 0a90 	vmov	r0, s15
 8012184:	f7ee f9e0 	bl	8000548 <__aeabi_f2d>
 8012188:	ec41 0b10 	vmov	d0, r0, r1
 801218c:	f008 f88c 	bl	801a2a8 <floor>
 8012190:	ec51 0b10 	vmov	r0, r1, d0
 8012194:	f7ee fd28 	bl	8000be8 <__aeabi_d2f>
 8012198:	ee08 0a90 	vmov	s17, r0
 801219c:	f7fe b930 	b.w	8010400 <iNemoEngine_API_Update+0xb78>
 80121a0:	ee78 7aa7 	vadd.f32	s15, s17, s15
 80121a4:	ee17 0a90 	vmov	r0, s15
 80121a8:	f7ee f9ce 	bl	8000548 <__aeabi_f2d>
 80121ac:	ec41 0b10 	vmov	d0, r0, r1
 80121b0:	f008 f87a 	bl	801a2a8 <floor>
 80121b4:	ec51 0b10 	vmov	r0, r1, d0
 80121b8:	f7ee fd16 	bl	8000be8 <__aeabi_d2f>
 80121bc:	ee08 0a90 	vmov	s17, r0
 80121c0:	f7fe b8b5 	b.w	801032e <iNemoEngine_API_Update+0xaa6>
 80121c4:	ee7c 7a27 	vadd.f32	s15, s24, s15
 80121c8:	ee17 0a90 	vmov	r0, s15
 80121cc:	f7ee f9bc 	bl	8000548 <__aeabi_f2d>
 80121d0:	ec41 0b10 	vmov	d0, r0, r1
 80121d4:	f008 f868 	bl	801a2a8 <floor>
 80121d8:	ec51 0b10 	vmov	r0, r1, d0
 80121dc:	f7ee fd04 	bl	8000be8 <__aeabi_d2f>
 80121e0:	ee0c 0a10 	vmov	s24, r0
 80121e4:	f7fe b878 	b.w	80102d8 <iNemoEngine_API_Update+0xa50>
 80121e8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80121ec:	ee17 0a90 	vmov	r0, s15
 80121f0:	f7ee f9aa 	bl	8000548 <__aeabi_f2d>
 80121f4:	ec41 0b10 	vmov	d0, r0, r1
 80121f8:	f008 f856 	bl	801a2a8 <floor>
 80121fc:	ec51 0b10 	vmov	r0, r1, d0
 8012200:	f7ee fcf2 	bl	8000be8 <__aeabi_d2f>
 8012204:	ee08 0a10 	vmov	s16, r0
 8012208:	f7fe b83b 	b.w	8010282 <iNemoEngine_API_Update+0x9fa>
 801220c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8012210:	ee17 0a90 	vmov	r0, s15
 8012214:	f7ee f998 	bl	8000548 <__aeabi_f2d>
 8012218:	ec41 0b10 	vmov	d0, r0, r1
 801221c:	f008 f844 	bl	801a2a8 <floor>
 8012220:	ec51 0b10 	vmov	r0, r1, d0
 8012224:	f7ee fce0 	bl	8000be8 <__aeabi_d2f>
 8012228:	ee08 0a10 	vmov	s16, r0
 801222c:	f7fe b93e 	b.w	80104ac <iNemoEngine_API_Update+0xc24>
 8012230:	20000000 	.word	0x20000000
 8012234:	404ca5dc 	.word	0x404ca5dc
 8012238:	40568000 	.word	0x40568000
 801223c:	3dcccccd 	.word	0x3dcccccd
 8012240:	3a83126f 	.word	0x3a83126f
 8012244:	3c75c28f 	.word	0x3c75c28f
 8012248:	391d4951 	.word	0x391d4951
 801224c:	383cbe62 	.word	0x383cbe62
 8012250:	469c3e00 	.word	0x469c3e00
 8012254:	43168000 	.word	0x43168000
 8012258:	3d088889 	.word	0x3d088889
 801225c:	3e4ccccd 	.word	0x3e4ccccd
 8012260:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8012264:	ee17 0a90 	vmov	r0, s15
 8012268:	f7ee f96e 	bl	8000548 <__aeabi_f2d>
 801226c:	ec41 0b10 	vmov	d0, r0, r1
 8012270:	f008 f81a 	bl	801a2a8 <floor>
 8012274:	ec51 0b10 	vmov	r0, r1, d0
 8012278:	f7ee fcb6 	bl	8000be8 <__aeabi_d2f>
 801227c:	ee0c 0a10 	vmov	s24, r0
 8012280:	f7fe b8e9 	b.w	8010456 <iNemoEngine_API_Update+0xbce>
 8012284:	2a00      	cmp	r2, #0
 8012286:	f43f a910 	beq.w	80114aa <iNemoEngine_API_Update+0x1c22>
 801228a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801228e:	ee39 9a47 	vsub.f32	s18, s18, s14
 8012292:	eef0 7ac9 	vabs.f32	s15, s18
 8012296:	ee29 9a09 	vmul.f32	s18, s18, s18
 801229a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a2:	eeb4 9ac7 	vcmpe.f32	s18, s14
 80122a6:	bfb8      	it	lt
 80122a8:	eef0 7a46 	vmovlt.f32	s15, s12
 80122ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122b0:	edcd 7a8d 	vstr	s15, [sp, #564]	; 0x234
 80122b4:	f77f a900 	ble.w	80114b8 <iNemoEngine_API_Update+0x1c30>
 80122b8:	eddd 7a86 	vldr	s15, [sp, #536]	; 0x218
 80122bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80122c0:	eeb4 9ac7 	vcmpe.f32	s18, s14
 80122c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c8:	f77f a8f6 	ble.w	80114b8 <iNemoEngine_API_Update+0x1c30>
 80122cc:	ee67 7a89 	vmul.f32	s15, s15, s18
 80122d0:	edcd 7a86 	vstr	s15, [sp, #536]	; 0x218
 80122d4:	eddd 7a87 	vldr	s15, [sp, #540]	; 0x21c
 80122d8:	ee67 7a89 	vmul.f32	s15, s15, s18
 80122dc:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 80122e0:	eddd 7a88 	vldr	s15, [sp, #544]	; 0x220
 80122e4:	ee27 9a89 	vmul.f32	s18, s15, s18
 80122e8:	ed8d 9a88 	vstr	s18, [sp, #544]	; 0x220
 80122ec:	f7ff b8e4 	b.w	80114b8 <iNemoEngine_API_Update+0x1c30>
 80122f0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80122f4:	2a01      	cmp	r2, #1
 80122f6:	f000 877b 	beq.w	80131f0 <iNemoEngine_API_Update+0x3968>
 80122fa:	2b02      	cmp	r3, #2
 80122fc:	f040 8778 	bne.w	80131f0 <iNemoEngine_API_Update+0x3968>
 8012300:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8012304:	9a06      	ldr	r2, [sp, #24]
 8012306:	ee87 7a8d 	vdiv.f32	s14, s15, s26
 801230a:	f240 1301 	movw	r3, #257	; 0x101
 801230e:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
 8012312:	2301      	movs	r3, #1
 8012314:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 8012318:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 801231c:	ed92 6a64 	vldr	s12, [r2, #400]	; 0x190
 8012320:	ed8d 7a3d 	vstr	s14, [sp, #244]	; 0xf4
 8012324:	eecb 5a27 	vdiv.f32	s11, s22, s15
 8012328:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 801232c:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 8012330:	eecd 7aa7 	vdiv.f32	s15, s27, s15
 8012334:	eeb4 5a00 	vmov.f32	s10, #64	; 0x3e000000  0.125
 8012338:	ee26 6a05 	vmul.f32	s12, s12, s10
 801233c:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8012340:	eeb4 6ae8 	vcmpe.f32	s12, s17
 8012344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012348:	f280 87d8 	bge.w	80132fc <iNemoEngine_API_Update+0x3a74>
 801234c:	ed9d 6a18 	vldr	s12, [sp, #96]	; 0x60
 8012350:	eeb4 dac6 	vcmpe.f32	s26, s12
 8012354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012358:	f341 83a4 	ble.w	8013aa4 <iNemoEngine_API_Update+0x421c>
 801235c:	ed9d 6a16 	vldr	s12, [sp, #88]	; 0x58
 8012360:	eeb4 6acb 	vcmpe.f32	s12, s22
 8012364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012368:	f341 839c 	ble.w	8013aa4 <iNemoEngine_API_Update+0x421c>
 801236c:	ed9d 6a17 	vldr	s12, [sp, #92]	; 0x5c
 8012370:	eeb4 6aed 	vcmpe.f32	s12, s27
 8012374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012378:	f341 8394 	ble.w	8013aa4 <iNemoEngine_API_Update+0x421c>
 801237c:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 8012380:	eeb4 8ac6 	vcmpe.f32	s16, s12
 8012384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012388:	f141 838c 	bpl.w	8013aa4 <iNemoEngine_API_Update+0x421c>
 801238c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012390:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8012394:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012398:	eef4 7ac6 	vcmpe.f32	s15, s12
 801239c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a0:	f141 8380 	bpl.w	8013aa4 <iNemoEngine_API_Update+0x421c>
 80123a4:	2300      	movs	r3, #0
 80123a6:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 80123aa:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 80123ae:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80123b2:	2a00      	cmp	r2, #0
 80123b4:	f040 87c7 	bne.w	8013346 <iNemoEngine_API_Update+0x3abe>
 80123b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80123ba:	a840      	add	r0, sp, #256	; 0x100
 80123bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80123c0:	4613      	mov	r3, r2
 80123c2:	edd2 7a00 	vldr	s15, [r2]
 80123c6:	3101      	adds	r1, #1
 80123c8:	330c      	adds	r3, #12
 80123ca:	3204      	adds	r2, #4
 80123cc:	461c      	mov	r4, r3
 80123ce:	ed94 7a00 	vldr	s14, [r4]
 80123d2:	330c      	adds	r3, #12
 80123d4:	4598      	cmp	r8, r3
 80123d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80123da:	d1f7      	bne.n	80123cc <iNemoEngine_API_Update+0x2b44>
 80123dc:	2902      	cmp	r1, #2
 80123de:	ece0 7a01 	vstmia	r0!, {s15}
 80123e2:	f108 0804 	add.w	r8, r8, #4
 80123e6:	d1eb      	bne.n	80123c0 <iNemoEngine_API_Update+0x2b38>
 80123e8:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 8012258 <iNemoEngine_API_Update+0x29d0>
 80123ec:	9b06      	ldr	r3, [sp, #24]
 80123ee:	eddd 4a40 	vldr	s9, [sp, #256]	; 0x100
 80123f2:	ed9d 5a41 	vldr	s10, [sp, #260]	; 0x104
 80123f6:	eddd 5a42 	vldr	s11, [sp, #264]	; 0x108
 80123fa:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80123fc:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 8012400:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8012404:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012408:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801240c:	f503 71b2 	add.w	r1, r3, #356	; 0x164
 8012410:	4602      	mov	r2, r0
 8012412:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 8012416:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 801241a:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 801241e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012426:	f103 030c 	add.w	r3, r3, #12
 801242a:	bf88      	it	hi
 801242c:	eef0 7a47 	vmovhi.f32	s15, s14
 8012430:	4293      	cmp	r3, r2
 8012432:	d1f2      	bne.n	801241a <iNemoEngine_API_Update+0x2b92>
 8012434:	1d1a      	adds	r2, r3, #4
 8012436:	4291      	cmp	r1, r2
 8012438:	ece4 7a01 	vstmia	r4!, {s15}
 801243c:	d1e9      	bne.n	8012412 <iNemoEngine_API_Update+0x2b8a>
 801243e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012440:	ed9d 4a3d 	vldr	s8, [sp, #244]	; 0xf4
 8012444:	edd3 7a00 	vldr	s15, [r3]
 8012448:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 801244c:	ed9d 6a3f 	vldr	s12, [sp, #252]	; 0xfc
 8012450:	9b06      	ldr	r3, [sp, #24]
 8012452:	ee97 4aa4 	vfnms.f32	s8, s15, s9
 8012456:	785b      	ldrb	r3, [r3, #1]
 8012458:	ee97 7a85 	vfnms.f32	s14, s15, s10
 801245c:	ee97 6aa5 	vfnms.f32	s12, s15, s11
 8012460:	eef0 4a47 	vmov.f32	s9, s14
 8012464:	ed8d 4a40 	vstr	s8, [sp, #256]	; 0x100
 8012468:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 801246c:	ed8d 6a42 	vstr	s12, [sp, #264]	; 0x108
 8012470:	b13b      	cbz	r3, 8012482 <iNemoEngine_API_Update+0x2bfa>
 8012472:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8012476:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801247e:	f101 83e1 	bmi.w	8013c44 <iNemoEngine_API_Update+0x43bc>
 8012482:	9b06      	ldr	r3, [sp, #24]
 8012484:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
 8012488:	2a1e      	cmp	r2, #30
 801248a:	f001 843c 	beq.w	8013d06 <iNemoEngine_API_Update+0x447e>
 801248e:	1c53      	adds	r3, r2, #1
 8012490:	2aff      	cmp	r2, #255	; 0xff
 8012492:	9906      	ldr	r1, [sp, #24]
 8012494:	bf14      	ite	ne
 8012496:	b2db      	uxtbne	r3, r3
 8012498:	23ff      	moveq	r3, #255	; 0xff
 801249a:	2200      	movs	r2, #0
 801249c:	f881 31a1 	strb.w	r3, [r1, #417]	; 0x1a1
 80124a0:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 80124a4:	464b      	mov	r3, r9
 80124a6:	f7ff bb46 	b.w	8011b36 <iNemoEngine_API_Update+0x22ae>
 80124aa:	ed1f 7a94 	vldr	s14, [pc, #-592]	; 801225c <iNemoEngine_API_Update+0x29d4>
 80124ae:	4603      	mov	r3, r0
 80124b0:	f7fd bc03 	b.w	800fcba <iNemoEngine_API_Update+0x432>
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f43e afe0 	beq.w	801147a <iNemoEngine_API_Update+0x1bf2>
 80124ba:	f89d 30e8 	ldrb.w	r3, [sp, #232]	; 0xe8
 80124be:	2b01      	cmp	r3, #1
 80124c0:	d002      	beq.n	80124c8 <iNemoEngine_API_Update+0x2c40>
 80124c2:	2c01      	cmp	r4, #1
 80124c4:	f47e afe2 	bne.w	801148c <iNemoEngine_API_Update+0x1c04>
 80124c8:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 80124cc:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80124d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124d4:	bfb8      	it	lt
 80124d6:	eeb0 5a67 	vmovlt.f32	s10, s15
 80124da:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 80124de:	ed8d 5a84 	vstr	s10, [sp, #528]	; 0x210
 80124e2:	ed8d 5a85 	vstr	s10, [sp, #532]	; 0x214
 80124e6:	f7fe bfd1 	b.w	801148c <iNemoEngine_API_Update+0x1c04>
 80124ea:	9b06      	ldr	r3, [sp, #24]
 80124ec:	49c6      	ldr	r1, [pc, #792]	; (8012808 <iNemoEngine_API_Update+0x2f80>)
 80124ee:	ed93 ba05 	vldr	s22, [r3, #20]
 80124f2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80124f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fd bbc9 	b.w	800fc92 <iNemoEngine_API_Update+0x40a>
 8012500:	9b06      	ldr	r3, [sp, #24]
 8012502:	49c2      	ldr	r1, [pc, #776]	; (801280c <iNemoEngine_API_Update+0x2f84>)
 8012504:	ed93 ba05 	vldr	s22, [r3, #20]
 8012508:	4618      	mov	r0, r3
 801250a:	f7fd bbc2 	b.w	800fc92 <iNemoEngine_API_Update+0x40a>
 801250e:	4611      	mov	r1, r2
 8012510:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012512:	2a00      	cmp	r2, #0
 8012514:	dd0c      	ble.n	8012530 <iNemoEngine_API_Update+0x2ca8>
 8012516:	ed9d 7a03 	vldr	s14, [sp, #12]
 801251a:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 801251e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012526:	dd03      	ble.n	8012530 <iNemoEngine_API_Update+0x2ca8>
 8012528:	3a01      	subs	r2, #1
 801252a:	65ca      	str	r2, [r1, #92]	; 0x5c
 801252c:	f7fe bfef 	b.w	801150e <iNemoEngine_API_Update+0x1c86>
 8012530:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8012534:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8012538:	ee27 7a27 	vmul.f32	s14, s14, s15
 801253c:	eeb4 bac7 	vcmpe.f32	s22, s14
 8012540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012544:	f57e afe3 	bpl.w	801150e <iNemoEngine_API_Update+0x1c86>
 8012548:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 801254c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012550:	eef4 dae7 	vcmpe.f32	s27, s15
 8012554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012558:	f57e afd9 	bpl.w	801150e <iNemoEngine_API_Update+0x1c86>
 801255c:	ee7d 7a0d 	vadd.f32	s15, s26, s26
 8012560:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 8012564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256c:	f341 8492 	ble.w	8013e94 <iNemoEngine_API_Update+0x460c>
 8012570:	9a06      	ldr	r2, [sp, #24]
 8012572:	3303      	adds	r3, #3
 8012574:	e434      	b.n	8011de0 <iNemoEngine_API_Update+0x2558>
 8012576:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8012810 <iNemoEngine_API_Update+0x2f88>
 801257a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012582:	f57e ae7b 	bpl.w	801127c <iNemoEngine_API_Update+0x19f4>
 8012586:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8012814 <iNemoEngine_API_Update+0x2f8c>
 801258a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012592:	f280 80c9 	bge.w	8012728 <iNemoEngine_API_Update+0x2ea0>
 8012596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801259a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8012818 <iNemoEngine_API_Update+0x2f90>
 801259e:	eef4 7ae6 	vcmpe.f32	s15, s13
 80125a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a6:	f280 80d5 	bge.w	8012754 <iNemoEngine_API_Update+0x2ecc>
 80125aa:	eddf 6a9c 	vldr	s13, [pc, #624]	; 801281c <iNemoEngine_API_Update+0x2f94>
 80125ae:	eef4 7ae6 	vcmpe.f32	s15, s13
 80125b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b6:	f280 80e3 	bge.w	8012780 <iNemoEngine_API_Update+0x2ef8>
 80125ba:	eddf 6a99 	vldr	s13, [pc, #612]	; 8012820 <iNemoEngine_API_Update+0x2f98>
 80125be:	eef4 7ae6 	vcmpe.f32	s15, s13
 80125c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c6:	f280 80f1 	bge.w	80127ac <iNemoEngine_API_Update+0x2f24>
 80125ca:	eddf 6a96 	vldr	s13, [pc, #600]	; 8012824 <iNemoEngine_API_Update+0x2f9c>
 80125ce:	eef4 7ae6 	vcmpe.f32	s15, s13
 80125d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d6:	f280 80ff 	bge.w	80127d8 <iNemoEngine_API_Update+0x2f50>
 80125da:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80125de:	eef4 7ae6 	vcmpe.f32	s15, s13
 80125e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125e6:	db0d      	blt.n	8012604 <iNemoEngine_API_Update+0x2d7c>
 80125e8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80125ec:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8012828 <iNemoEngine_API_Update+0x2fa0>
 80125f0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80125f4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80125f8:	ee66 6a87 	vmul.f32	s13, s13, s14
 80125fc:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801282c <iNemoEngine_API_Update+0x2fa4>
 8012600:	eea6 7a86 	vfma.f32	s14, s13, s12
 8012604:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8012830 <iNemoEngine_API_Update+0x2fa8>
 8012608:	eef4 7ae6 	vcmpe.f32	s15, s13
 801260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012610:	f141 82fa 	bpl.w	8013c08 <iNemoEngine_API_Update+0x4380>
 8012614:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8012810 <iNemoEngine_API_Update+0x2f88>
 8012618:	eef4 7ae6 	vcmpe.f32	s15, s13
 801261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012620:	f2c1 82fa 	blt.w	8013c18 <iNemoEngine_API_Update+0x4390>
 8012624:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8012814 <iNemoEngine_API_Update+0x2f8c>
 8012628:	eef4 7ae6 	vcmpe.f32	s15, s13
 801262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012630:	f141 8296 	bpl.w	8013b60 <iNemoEngine_API_Update+0x42d8>
 8012634:	ed9f 6a76 	vldr	s12, [pc, #472]	; 8012810 <iNemoEngine_API_Update+0x2f88>
 8012638:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8012834 <iNemoEngine_API_Update+0x2fac>
 801263c:	eddf 5a7e 	vldr	s11, [pc, #504]	; 8012838 <iNemoEngine_API_Update+0x2fb0>
 8012640:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8012644:	ee26 6a26 	vmul.f32	s12, s12, s13
 8012648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801264c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8012650:	ed9f 6a71 	vldr	s12, [pc, #452]	; 8012818 <iNemoEngine_API_Update+0x2f90>
 8012654:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801265c:	f2c1 8296 	blt.w	8013b8c <iNemoEngine_API_Update+0x4304>
 8012660:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801281c <iNemoEngine_API_Update+0x2f94>
 8012664:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801266c:	f141 8296 	bpl.w	8013b9c <iNemoEngine_API_Update+0x4314>
 8012670:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8012818 <iNemoEngine_API_Update+0x2f90>
 8012674:	eddf 6a71 	vldr	s13, [pc, #452]	; 801283c <iNemoEngine_API_Update+0x2fb4>
 8012678:	eddf 5a71 	vldr	s11, [pc, #452]	; 8012840 <iNemoEngine_API_Update+0x2fb8>
 801267c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8012680:	ee26 6a26 	vmul.f32	s12, s12, s13
 8012684:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012844 <iNemoEngine_API_Update+0x2fbc>
 8012688:	eee6 6a25 	vfma.f32	s13, s12, s11
 801268c:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8012820 <iNemoEngine_API_Update+0x2f98>
 8012690:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012698:	f2c1 8296 	blt.w	8013bc8 <iNemoEngine_API_Update+0x4340>
 801269c:	eddf 6a61 	vldr	s13, [pc, #388]	; 8012824 <iNemoEngine_API_Update+0x2f9c>
 80126a0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80126a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126a8:	f141 8296 	bpl.w	8013bd8 <iNemoEngine_API_Update+0x4350>
 80126ac:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8012820 <iNemoEngine_API_Update+0x2f98>
 80126b0:	eddf 6a65 	vldr	s13, [pc, #404]	; 8012848 <iNemoEngine_API_Update+0x2fc0>
 80126b4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80126b8:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 80126bc:	ee26 6a26 	vmul.f32	s12, s12, s13
 80126c0:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 80126c4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80126c8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80126cc:	eef4 7ac6 	vcmpe.f32	s15, s12
 80126d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126d4:	db0d      	blt.n	80126f2 <iNemoEngine_API_Update+0x2e6a>
 80126d6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80126da:	eddf 6a5c 	vldr	s13, [pc, #368]	; 801284c <iNemoEngine_API_Update+0x2fc4>
 80126de:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80126e2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80126e6:	ee26 6a26 	vmul.f32	s12, s12, s13
 80126ea:	eddf 6a59 	vldr	s13, [pc, #356]	; 8012850 <iNemoEngine_API_Update+0x2fc8>
 80126ee:	eee6 6a25 	vfma.f32	s13, s12, s11
 80126f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80126f6:	ee37 6a06 	vadd.f32	s12, s14, s12
 80126fa:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80126fe:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8012702:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8012814 <iNemoEngine_API_Update+0x2f8c>
 8012706:	ed9f 4a42 	vldr	s8, [pc, #264]	; 8012810 <iNemoEngine_API_Update+0x2f88>
 801270a:	eef4 5ac6 	vcmpe.f32	s11, s12
 801270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012712:	bfb8      	it	lt
 8012714:	eef0 5a46 	vmovlt.f32	s11, s12
 8012718:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8012854 <iNemoEngine_API_Update+0x2fcc>
 801271c:	ee25 4a84 	vmul.f32	s8, s11, s8
 8012720:	ee25 6a86 	vmul.f32	s12, s11, s12
 8012724:	f7fe bdfc 	b.w	8011320 <iNemoEngine_API_Update+0x1a98>
 8012728:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8012818 <iNemoEngine_API_Update+0x2f90>
 801272c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012734:	d50e      	bpl.n	8012754 <iNemoEngine_API_Update+0x2ecc>
 8012736:	eddf 6a37 	vldr	s13, [pc, #220]	; 8012814 <iNemoEngine_API_Update+0x2f8c>
 801273a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8012858 <iNemoEngine_API_Update+0x2fd0>
 801273e:	ed9f 6a47 	vldr	s12, [pc, #284]	; 801285c <iNemoEngine_API_Update+0x2fd4>
 8012742:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8012746:	ee66 6a87 	vmul.f32	s13, s13, s14
 801274a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8012860 <iNemoEngine_API_Update+0x2fd8>
 801274e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8012752:	e72a      	b.n	80125aa <iNemoEngine_API_Update+0x2d22>
 8012754:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801281c <iNemoEngine_API_Update+0x2f94>
 8012758:	eef4 7ac7 	vcmpe.f32	s15, s14
 801275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012760:	d50e      	bpl.n	8012780 <iNemoEngine_API_Update+0x2ef8>
 8012762:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8012818 <iNemoEngine_API_Update+0x2f90>
 8012766:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8012840 <iNemoEngine_API_Update+0x2fb8>
 801276a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801276e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8012772:	ee66 6a87 	vmul.f32	s13, s13, s14
 8012776:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801277a:	eea6 7a86 	vfma.f32	s14, s13, s12
 801277e:	e71c      	b.n	80125ba <iNemoEngine_API_Update+0x2d32>
 8012780:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8012820 <iNemoEngine_API_Update+0x2f98>
 8012784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801278c:	d50e      	bpl.n	80127ac <iNemoEngine_API_Update+0x2f24>
 801278e:	eddf 6a23 	vldr	s13, [pc, #140]	; 801281c <iNemoEngine_API_Update+0x2f94>
 8012792:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8012796:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801279a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801279e:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 80127a2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80127a6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80127aa:	e70e      	b.n	80125ca <iNemoEngine_API_Update+0x2d42>
 80127ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8012824 <iNemoEngine_API_Update+0x2f9c>
 80127b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80127b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b8:	d50e      	bpl.n	80127d8 <iNemoEngine_API_Update+0x2f50>
 80127ba:	eddf 6a19 	vldr	s13, [pc, #100]	; 8012820 <iNemoEngine_API_Update+0x2f98>
 80127be:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8012864 <iNemoEngine_API_Update+0x2fdc>
 80127c2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80127c6:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80127ca:	ee66 6a87 	vmul.f32	s13, s13, s14
 80127ce:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80127d2:	eea6 7a86 	vfma.f32	s14, s13, s12
 80127d6:	e700      	b.n	80125da <iNemoEngine_API_Update+0x2d52>
 80127d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80127dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80127e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e4:	f57f af00 	bpl.w	80125e8 <iNemoEngine_API_Update+0x2d60>
 80127e8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8012824 <iNemoEngine_API_Update+0x2f9c>
 80127ec:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8012868 <iNemoEngine_API_Update+0x2fe0>
 80127f0:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801286c <iNemoEngine_API_Update+0x2fe4>
 80127f4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80127f8:	ee66 6a87 	vmul.f32	s13, s13, s14
 80127fc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8012870 <iNemoEngine_API_Update+0x2fe8>
 8012800:	eea6 7a86 	vfma.f32	s14, s13, s12
 8012804:	e6fe      	b.n	8012604 <iNemoEngine_API_Update+0x2d7c>
 8012806:	bf00      	nop
 8012808:	3727c5ac 	.word	0x3727c5ac
 801280c:	3ac49ba6 	.word	0x3ac49ba6
 8012810:	3c23d70a 	.word	0x3c23d70a
 8012814:	3c75c28f 	.word	0x3c75c28f
 8012818:	3cf5c28f 	.word	0x3cf5c28f
 801281c:	3d4ccccd 	.word	0x3d4ccccd
 8012820:	3dcccccd 	.word	0x3dcccccd
 8012824:	3e4ccccd 	.word	0x3e4ccccd
 8012828:	46979000 	.word	0x46979000
 801282c:	4415c000 	.word	0x4415c000
 8012830:	3ba3d70a 	.word	0x3ba3d70a
 8012834:	3d4cccc0 	.word	0x3d4cccc0
 8012838:	43480000 	.word	0x43480000
 801283c:	3eb33334 	.word	0x3eb33334
 8012840:	4247ffff 	.word	0x4247ffff
 8012844:	3f933333 	.word	0x3f933333
 8012848:	410c0000 	.word	0x410c0000
 801284c:	42c80000 	.word	0x42c80000
 8012850:	424a0000 	.word	0x424a0000
 8012854:	3b449ba6 	.word	0x3b449ba6
 8012858:	3ecccccc 	.word	0x3ecccccc
 801285c:	42855556 	.word	0x42855556
 8012860:	3fcccccd 	.word	0x3fcccccd
 8012864:	42d40000 	.word	0x42d40000
 8012868:	43f00000 	.word	0x43f00000
 801286c:	40555555 	.word	0x40555555
 8012870:	42ee0000 	.word	0x42ee0000
 8012874:	4615      	mov	r5, r2
 8012876:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 801287a:	49d7      	ldr	r1, [pc, #860]	; (8012bd8 <iNemoEngine_API_Update+0x3350>)
 801287c:	4ad7      	ldr	r2, [pc, #860]	; (8012bdc <iNemoEngine_API_Update+0x3354>)
 801287e:	4bd8      	ldr	r3, [pc, #864]	; (8012be0 <iNemoEngine_API_Update+0x3358>)
 8012880:	2000      	movs	r0, #0
 8012882:	f885 0318 	strb.w	r0, [r5, #792]	; 0x318
 8012886:	f205 6824 	addw	r8, r5, #1572	; 0x624
 801288a:	6039      	str	r1, [r7, #0]
 801288c:	f205 7194 	addw	r1, r5, #1940	; 0x794
 8012890:	f8c8 2000 	str.w	r2, [r8]
 8012894:	600b      	str	r3, [r1, #0]
 8012896:	f895 64b1 	ldrb.w	r6, [r5, #1201]	; 0x4b1
 801289a:	911b      	str	r1, [sp, #108]	; 0x6c
 801289c:	2e00      	cmp	r6, #0
 801289e:	f001 8297 	beq.w	8013dd0 <iNemoEngine_API_Update+0x4548>
 80128a2:	eddf 7ad0 	vldr	s15, [pc, #832]	; 8012be4 <iNemoEngine_API_Update+0x335c>
 80128a6:	ee68 faa7 	vmul.f32	s31, s17, s15
 80128aa:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 80128ae:	ee28 fa27 	vmul.f32	s30, s16, s15
 80128b2:	ee6c da27 	vmul.f32	s27, s24, s15
 80128b6:	ee7f 7acb 	vsub.f32	s15, s31, s22
 80128ba:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80128be:	ee17 0a90 	vmov	r0, s15
 80128c2:	f7ed fe41 	bl	8000548 <__aeabi_f2d>
 80128c6:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 80128ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80128ce:	ee17 0a90 	vmov	r0, s15
 80128d2:	f7ed fe39 	bl	8000548 <__aeabi_f2d>
 80128d6:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 80128da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80128de:	ee17 0a90 	vmov	r0, s15
 80128e2:	f7ed fe31 	bl	8000548 <__aeabi_f2d>
 80128e6:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 80128ea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80128ee:	ee17 0a90 	vmov	r0, s15
 80128f2:	f7ed fe29 	bl	8000548 <__aeabi_f2d>
 80128f6:	ee7d 7acb 	vsub.f32	s15, s27, s22
 80128fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80128fe:	ee17 0a90 	vmov	r0, s15
 8012902:	f7ed fe21 	bl	8000548 <__aeabi_f2d>
 8012906:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 801290a:	4602      	mov	r2, r0
 801290c:	460b      	mov	r3, r1
 801290e:	ee17 0a90 	vmov	r0, s15
 8012912:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8012916:	f7ed fe17 	bl	8000548 <__aeabi_f2d>
 801291a:	9b06      	ldr	r3, [sp, #24]
 801291c:	ed9f bab8 	vldr	s22, [pc, #736]	; 8012c00 <iNemoEngine_API_Update+0x3378>
 8012920:	eef0 7aef 	vabs.f32	s15, s31
 8012924:	edcd 7a03 	vstr	s15, [sp, #12]
 8012928:	eef0 7acf 	vabs.f32	s15, s30
 801292c:	f503 6597 	add.w	r5, r3, #1208	; 0x4b8
 8012930:	edcd 7a04 	vstr	s15, [sp, #16]
 8012934:	230c      	movs	r3, #12
 8012936:	eef0 7aed 	vabs.f32	s15, s27
 801293a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 801293e:	fb13 5606 	smlabb	r6, r3, r6, r5
 8012942:	edcd 7a05 	vstr	s15, [sp, #20]
 8012946:	46aa      	mov	sl, r5
 8012948:	e060      	b.n	8012a0c <iNemoEngine_API_Update+0x3184>
 801294a:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8012be8 <iNemoEngine_API_Update+0x3360>
 801294e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012956:	f280 8162 	bge.w	8012c1e <iNemoEngine_API_Update+0x3396>
 801295a:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8012bec <iNemoEngine_API_Update+0x3364>
 801295e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012966:	f300 816c 	bgt.w	8012c42 <iNemoEngine_API_Update+0x33ba>
 801296a:	ed9d 0b08 	vldr	d0, [sp, #32]
 801296e:	f007 fc1b 	bl	801a1a8 <ceil>
 8012972:	ec51 0b10 	vmov	r0, r1, d0
 8012976:	f7ee f937 	bl	8000be8 <__aeabi_d2f>
 801297a:	eddd 7a04 	vldr	s15, [sp, #16]
 801297e:	f8ca 0000 	str.w	r0, [sl]
 8012982:	eef4 7acb 	vcmpe.f32	s15, s22
 8012986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801298a:	f140 8121 	bpl.w	8012bd0 <iNemoEngine_API_Update+0x3348>
 801298e:	eddf 7a96 	vldr	s15, [pc, #600]	; 8012be8 <iNemoEngine_API_Update+0x3360>
 8012992:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801299a:	f280 8137 	bge.w	8012c0c <iNemoEngine_API_Update+0x3384>
 801299e:	eddf 7a93 	vldr	s15, [pc, #588]	; 8012bec <iNemoEngine_API_Update+0x3364>
 80129a2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80129a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129aa:	f300 8257 	bgt.w	8012e5c <iNemoEngine_API_Update+0x35d4>
 80129ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 80129b2:	f007 fbf9 	bl	801a1a8 <ceil>
 80129b6:	ec51 0b10 	vmov	r0, r1, d0
 80129ba:	f7ee f915 	bl	8000be8 <__aeabi_d2f>
 80129be:	eddd 7a05 	vldr	s15, [sp, #20]
 80129c2:	f8ca 0004 	str.w	r0, [sl, #4]
 80129c6:	eef4 7acb 	vcmpe.f32	s15, s22
 80129ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ce:	d527      	bpl.n	8012a20 <iNemoEngine_API_Update+0x3198>
 80129d0:	eddf 7a85 	vldr	s15, [pc, #532]	; 8012be8 <iNemoEngine_API_Update+0x3360>
 80129d4:	eeb4 cae7 	vcmpe.f32	s24, s15
 80129d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129dc:	f280 8128 	bge.w	8012c30 <iNemoEngine_API_Update+0x33a8>
 80129e0:	eddf 7a82 	vldr	s15, [pc, #520]	; 8012bec <iNemoEngine_API_Update+0x3364>
 80129e4:	eeb4 cae7 	vcmpe.f32	s24, s15
 80129e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ec:	f300 812b 	bgt.w	8012c46 <iNemoEngine_API_Update+0x33be>
 80129f0:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 80129f4:	f007 fbd8 	bl	801a1a8 <ceil>
 80129f8:	ec51 0b10 	vmov	r0, r1, d0
 80129fc:	f7ee f8f4 	bl	8000be8 <__aeabi_d2f>
 8012a00:	f8ca 0008 	str.w	r0, [sl, #8]
 8012a04:	f10a 0a0c 	add.w	sl, sl, #12
 8012a08:	45b2      	cmp	sl, r6
 8012a0a:	d011      	beq.n	8012a30 <iNemoEngine_API_Update+0x31a8>
 8012a0c:	eddd 7a03 	vldr	s15, [sp, #12]
 8012a10:	eef4 7acb 	vcmpe.f32	s15, s22
 8012a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a18:	d497      	bmi.n	801294a <iNemoEngine_API_Update+0x30c2>
 8012a1a:	ee1f 0a90 	vmov	r0, s31
 8012a1e:	e7ac      	b.n	801297a <iNemoEngine_API_Update+0x30f2>
 8012a20:	ee1d 0a90 	vmov	r0, s27
 8012a24:	f10a 0a0c 	add.w	sl, sl, #12
 8012a28:	f84a 0c04 	str.w	r0, [sl, #-4]
 8012a2c:	45b2      	cmp	sl, r6
 8012a2e:	d1ed      	bne.n	8012a0c <iNemoEngine_API_Update+0x3184>
 8012a30:	9b06      	ldr	r3, [sp, #24]
 8012a32:	f893 9621 	ldrb.w	r9, [r3, #1569]	; 0x621
 8012a36:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 8012a3a:	f1b9 0f00 	cmp.w	r9, #0
 8012a3e:	f000 8114 	beq.w	8012c6a <iNemoEngine_API_Update+0x33e2>
 8012a42:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8012bf0 <iNemoEngine_API_Update+0x3368>
 8012a46:	ee6a faa7 	vmul.f32	s31, s21, s15
 8012a4a:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 8012a4e:	ee2a fa27 	vmul.f32	s30, s20, s15
 8012a52:	ee69 daa7 	vmul.f32	s27, s19, s15
 8012a56:	ee7f 7acb 	vsub.f32	s15, s31, s22
 8012a5a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8012a5e:	ee17 0a90 	vmov	r0, s15
 8012a62:	f7ed fd71 	bl	8000548 <__aeabi_f2d>
 8012a66:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 8012a6a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012a6e:	ee17 0a90 	vmov	r0, s15
 8012a72:	f7ed fd69 	bl	8000548 <__aeabi_f2d>
 8012a76:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 8012a7a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012a7e:	ee17 0a90 	vmov	r0, s15
 8012a82:	f7ed fd61 	bl	8000548 <__aeabi_f2d>
 8012a86:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 8012a8a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012a8e:	ee17 0a90 	vmov	r0, s15
 8012a92:	f7ed fd59 	bl	8000548 <__aeabi_f2d>
 8012a96:	ee7d 7acb 	vsub.f32	s15, s27, s22
 8012a9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012a9e:	ee17 0a90 	vmov	r0, s15
 8012aa2:	f7ed fd51 	bl	8000548 <__aeabi_f2d>
 8012aa6:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 8012aaa:	4602      	mov	r2, r0
 8012aac:	460b      	mov	r3, r1
 8012aae:	ee17 0a90 	vmov	r0, s15
 8012ab2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8012ab6:	f7ed fd47 	bl	8000548 <__aeabi_f2d>
 8012aba:	eef0 7aef 	vabs.f32	s15, s31
 8012abe:	9b06      	ldr	r3, [sp, #24]
 8012ac0:	edcd 7a03 	vstr	s15, [sp, #12]
 8012ac4:	eef0 7acf 	vabs.f32	s15, s30
 8012ac8:	edcd 7a04 	vstr	s15, [sp, #16]
 8012acc:	eef0 7aed 	vabs.f32	s15, s27
 8012ad0:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 8012ad4:	edcd 7a05 	vstr	s15, [sp, #20]
 8012ad8:	230c      	movs	r3, #12
 8012ada:	eef0 7a6c 	vmov.f32	s15, s25
 8012ade:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8012ae2:	eef0 ca48 	vmov.f32	s25, s16
 8012ae6:	ed9f ba46 	vldr	s22, [pc, #280]	; 8012c00 <iNemoEngine_API_Update+0x3378>
 8012aea:	eeb0 8a4d 	vmov.f32	s16, s26
 8012aee:	fb13 6909 	smlabb	r9, r3, r9, r6
 8012af2:	46b3      	mov	fp, r6
 8012af4:	eeb0 da67 	vmov.f32	s26, s15
 8012af8:	e060      	b.n	8012bbc <iNemoEngine_API_Update+0x3334>
 8012afa:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8012bf4 <iNemoEngine_API_Update+0x336c>
 8012afe:	eef4 aae7 	vcmpe.f32	s21, s15
 8012b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b06:	f280 8197 	bge.w	8012e38 <iNemoEngine_API_Update+0x35b0>
 8012b0a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8012bf8 <iNemoEngine_API_Update+0x3370>
 8012b0e:	eef4 aae7 	vcmpe.f32	s21, s15
 8012b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b16:	f300 81a3 	bgt.w	8012e60 <iNemoEngine_API_Update+0x35d8>
 8012b1a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8012b1e:	f007 fb43 	bl	801a1a8 <ceil>
 8012b22:	ec51 0b10 	vmov	r0, r1, d0
 8012b26:	f7ee f85f 	bl	8000be8 <__aeabi_d2f>
 8012b2a:	eddd 7a04 	vldr	s15, [sp, #16]
 8012b2e:	f8cb 0000 	str.w	r0, [fp]
 8012b32:	eef4 7acb 	vcmpe.f32	s15, s22
 8012b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b3a:	f140 8171 	bpl.w	8012e20 <iNemoEngine_API_Update+0x3598>
 8012b3e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8012bf4 <iNemoEngine_API_Update+0x336c>
 8012b42:	eeb4 aae7 	vcmpe.f32	s20, s15
 8012b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b4a:	f280 816c 	bge.w	8012e26 <iNemoEngine_API_Update+0x359e>
 8012b4e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8012bf8 <iNemoEngine_API_Update+0x3370>
 8012b52:	eeb4 aae7 	vcmpe.f32	s20, s15
 8012b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5a:	f300 81bd 	bgt.w	8012ed8 <iNemoEngine_API_Update+0x3650>
 8012b5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 8012b62:	f007 fb21 	bl	801a1a8 <ceil>
 8012b66:	ec51 0b10 	vmov	r0, r1, d0
 8012b6a:	f7ee f83d 	bl	8000be8 <__aeabi_d2f>
 8012b6e:	eddd 7a05 	vldr	s15, [sp, #20]
 8012b72:	f8cb 0004 	str.w	r0, [fp, #4]
 8012b76:	eef4 7acb 	vcmpe.f32	s15, s22
 8012b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b7e:	d564      	bpl.n	8012c4a <iNemoEngine_API_Update+0x33c2>
 8012b80:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8012bf4 <iNemoEngine_API_Update+0x336c>
 8012b84:	eef4 9ae7 	vcmpe.f32	s19, s15
 8012b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b8c:	f280 815d 	bge.w	8012e4a <iNemoEngine_API_Update+0x35c2>
 8012b90:	eddf 7a19 	vldr	s15, [pc, #100]	; 8012bf8 <iNemoEngine_API_Update+0x3370>
 8012b94:	eef4 9ae7 	vcmpe.f32	s19, s15
 8012b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b9c:	f300 8162 	bgt.w	8012e64 <iNemoEngine_API_Update+0x35dc>
 8012ba0:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8012ba4:	f007 fb00 	bl	801a1a8 <ceil>
 8012ba8:	ec51 0b10 	vmov	r0, r1, d0
 8012bac:	f7ee f81c 	bl	8000be8 <__aeabi_d2f>
 8012bb0:	f8cb 0008 	str.w	r0, [fp, #8]
 8012bb4:	f10b 0b0c 	add.w	fp, fp, #12
 8012bb8:	45cb      	cmp	fp, r9
 8012bba:	d04e      	beq.n	8012c5a <iNemoEngine_API_Update+0x33d2>
 8012bbc:	eddd 7a03 	vldr	s15, [sp, #12]
 8012bc0:	eef4 7acb 	vcmpe.f32	s15, s22
 8012bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bc8:	d497      	bmi.n	8012afa <iNemoEngine_API_Update+0x3272>
 8012bca:	ee1f 0a90 	vmov	r0, s31
 8012bce:	e7ac      	b.n	8012b2a <iNemoEngine_API_Update+0x32a2>
 8012bd0:	ee1f 0a10 	vmov	r0, s30
 8012bd4:	e6f3      	b.n	80129be <iNemoEngine_API_Update+0x3136>
 8012bd6:	bf00      	nop
 8012bd8:	3a7001e0 	.word	0x3a7001e0
 8012bdc:	3a000100 	.word	0x3a000100
 8012be0:	3a8c0118 	.word	0x3a8c0118
 8012be4:	44888777 	.word	0x44888777
 8012be8:	39f001e1 	.word	0x39f001e1
 8012bec:	b9f001e1 	.word	0xb9f001e1
 8012bf0:	44fffe00 	.word	0x44fffe00
 8012bf4:	39800100 	.word	0x39800100
 8012bf8:	b9800100 	.word	0xb9800100
 8012bfc:	446a0ccd 	.word	0x446a0ccd
 8012c00:	4b000000 	.word	0x4b000000
 8012c04:	3cfaad3b 	.word	0x3cfaad3b
 8012c08:	bcfaad3b 	.word	0xbcfaad3b
 8012c0c:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8012c10:	f007 fb4a 	bl	801a2a8 <floor>
 8012c14:	ec51 0b10 	vmov	r0, r1, d0
 8012c18:	f7ed ffe6 	bl	8000be8 <__aeabi_d2f>
 8012c1c:	e6cf      	b.n	80129be <iNemoEngine_API_Update+0x3136>
 8012c1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012c22:	f007 fb41 	bl	801a2a8 <floor>
 8012c26:	ec51 0b10 	vmov	r0, r1, d0
 8012c2a:	f7ed ffdd 	bl	8000be8 <__aeabi_d2f>
 8012c2e:	e6a4      	b.n	801297a <iNemoEngine_API_Update+0x30f2>
 8012c30:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8012c34:	f007 fb38 	bl	801a2a8 <floor>
 8012c38:	ec51 0b10 	vmov	r0, r1, d0
 8012c3c:	f7ed ffd4 	bl	8000be8 <__aeabi_d2f>
 8012c40:	e6de      	b.n	8012a00 <iNemoEngine_API_Update+0x3178>
 8012c42:	4648      	mov	r0, r9
 8012c44:	e699      	b.n	801297a <iNemoEngine_API_Update+0x30f2>
 8012c46:	4648      	mov	r0, r9
 8012c48:	e6da      	b.n	8012a00 <iNemoEngine_API_Update+0x3178>
 8012c4a:	ee1d 0a90 	vmov	r0, s27
 8012c4e:	f10b 0b0c 	add.w	fp, fp, #12
 8012c52:	f84b 0c04 	str.w	r0, [fp, #-4]
 8012c56:	45cb      	cmp	fp, r9
 8012c58:	d1b0      	bne.n	8012bbc <iNemoEngine_API_Update+0x3334>
 8012c5a:	eef0 7a4d 	vmov.f32	s15, s26
 8012c5e:	eeb0 da48 	vmov.f32	s26, s16
 8012c62:	eeb0 8a6c 	vmov.f32	s16, s25
 8012c66:	eef0 ca67 	vmov.f32	s25, s15
 8012c6a:	9b06      	ldr	r3, [sp, #24]
 8012c6c:	f893 9791 	ldrb.w	r9, [r3, #1937]	; 0x791
 8012c70:	f1b9 0f00 	cmp.w	r9, #0
 8012c74:	f001 80a7 	beq.w	8013dc6 <iNemoEngine_API_Update+0x453e>
 8012c78:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 8012bfc <iNemoEngine_API_Update+0x3374>
 8012c7c:	ee6e fa27 	vmul.f32	s31, s28, s15
 8012c80:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 8012c84:	ee2e faa7 	vmul.f32	s30, s29, s15
 8012c88:	ee6b daa7 	vmul.f32	s27, s23, s15
 8012c8c:	ee7f 7acb 	vsub.f32	s15, s31, s22
 8012c90:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8012c94:	ee17 0a90 	vmov	r0, s15
 8012c98:	f7ed fc56 	bl	8000548 <__aeabi_f2d>
 8012c9c:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 8012ca0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012ca4:	ee17 0a90 	vmov	r0, s15
 8012ca8:	f7ed fc4e 	bl	8000548 <__aeabi_f2d>
 8012cac:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 8012cb0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012cb4:	ee17 0a90 	vmov	r0, s15
 8012cb8:	f7ed fc46 	bl	8000548 <__aeabi_f2d>
 8012cbc:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 8012cc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012cc4:	ee17 0a90 	vmov	r0, s15
 8012cc8:	f7ed fc3e 	bl	8000548 <__aeabi_f2d>
 8012ccc:	ee7d 7acb 	vsub.f32	s15, s27, s22
 8012cd0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012cd4:	ee17 0a90 	vmov	r0, s15
 8012cd8:	f7ed fc36 	bl	8000548 <__aeabi_f2d>
 8012cdc:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	460b      	mov	r3, r1
 8012ce4:	ee17 0a90 	vmov	r0, s15
 8012ce8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8012cec:	f7ed fc2c 	bl	8000548 <__aeabi_f2d>
 8012cf0:	eef0 7aef 	vabs.f32	s15, s31
 8012cf4:	9b06      	ldr	r3, [sp, #24]
 8012cf6:	edcd 7a03 	vstr	s15, [sp, #12]
 8012cfa:	eef0 7acf 	vabs.f32	s15, s30
 8012cfe:	edcd 7a04 	vstr	s15, [sp, #16]
 8012d02:	eef0 7aed 	vabs.f32	s15, s27
 8012d06:	f503 62f3 	add.w	r2, r3, #1944	; 0x798
 8012d0a:	eeb0 7a48 	vmov.f32	s14, s16
 8012d0e:	230c      	movs	r3, #12
 8012d10:	edcd 7a05 	vstr	s15, [sp, #20]
 8012d14:	eef0 7a6c 	vmov.f32	s15, s25
 8012d18:	eeb0 8a4d 	vmov.f32	s16, s26
 8012d1c:	eef0 ca4a 	vmov.f32	s25, s20
 8012d20:	eeb0 da6a 	vmov.f32	s26, s21
 8012d24:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8012d28:	eef0 aa69 	vmov.f32	s21, s19
 8012d2c:	ed1f ba4c 	vldr	s22, [pc, #-304]	; 8012c00 <iNemoEngine_API_Update+0x3378>
 8012d30:	9215      	str	r2, [sp, #84]	; 0x54
 8012d32:	fb13 2909 	smlabb	r9, r3, r9, r2
 8012d36:	4693      	mov	fp, r2
 8012d38:	eeb0 aa67 	vmov.f32	s20, s15
 8012d3c:	eef0 9a47 	vmov.f32	s19, s14
 8012d40:	e064      	b.n	8012e0c <iNemoEngine_API_Update+0x3584>
 8012d42:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8012d46:	ed1f 7a51 	vldr	s14, [pc, #-324]	; 8012c04 <iNemoEngine_API_Update+0x337c>
 8012d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d52:	f280 80af 	bge.w	8012eb4 <iNemoEngine_API_Update+0x362c>
 8012d56:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8012c08 <iNemoEngine_API_Update+0x3380>
 8012d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d62:	f300 80bb 	bgt.w	8012edc <iNemoEngine_API_Update+0x3654>
 8012d66:	ed9d 0b08 	vldr	d0, [sp, #32]
 8012d6a:	f007 fa1d 	bl	801a1a8 <ceil>
 8012d6e:	ec51 0b10 	vmov	r0, r1, d0
 8012d72:	f7ed ff39 	bl	8000be8 <__aeabi_d2f>
 8012d76:	eddd 7a04 	vldr	s15, [sp, #16]
 8012d7a:	f8cb 0000 	str.w	r0, [fp]
 8012d7e:	eef4 7acb 	vcmpe.f32	s15, s22
 8012d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d86:	f140 8089 	bpl.w	8012e9c <iNemoEngine_API_Update+0x3614>
 8012d8a:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8012d8e:	ed1f 7a63 	vldr	s14, [pc, #-396]	; 8012c04 <iNemoEngine_API_Update+0x337c>
 8012d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d9a:	f280 8082 	bge.w	8012ea2 <iNemoEngine_API_Update+0x361a>
 8012d9e:	ed1f 7a66 	vldr	s14, [pc, #-408]	; 8012c08 <iNemoEngine_API_Update+0x3380>
 8012da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012daa:	f300 809b 	bgt.w	8012ee4 <iNemoEngine_API_Update+0x365c>
 8012dae:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 8012db2:	f007 f9f9 	bl	801a1a8 <ceil>
 8012db6:	ec51 0b10 	vmov	r0, r1, d0
 8012dba:	f7ed ff15 	bl	8000be8 <__aeabi_d2f>
 8012dbe:	eddd 7a05 	vldr	s15, [sp, #20]
 8012dc2:	f8cb 0004 	str.w	r0, [fp, #4]
 8012dc6:	eef4 7acb 	vcmpe.f32	s15, s22
 8012dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dce:	d54b      	bpl.n	8012e68 <iNemoEngine_API_Update+0x35e0>
 8012dd0:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8012dd4:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 8012c04 <iNemoEngine_API_Update+0x337c>
 8012dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012de0:	da71      	bge.n	8012ec6 <iNemoEngine_API_Update+0x363e>
 8012de2:	ed1f 7a77 	vldr	s14, [pc, #-476]	; 8012c08 <iNemoEngine_API_Update+0x3380>
 8012de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dee:	dc77      	bgt.n	8012ee0 <iNemoEngine_API_Update+0x3658>
 8012df0:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8012df4:	f007 f9d8 	bl	801a1a8 <ceil>
 8012df8:	ec51 0b10 	vmov	r0, r1, d0
 8012dfc:	f7ed fef4 	bl	8000be8 <__aeabi_d2f>
 8012e00:	f8cb 0008 	str.w	r0, [fp, #8]
 8012e04:	f10b 0b0c 	add.w	fp, fp, #12
 8012e08:	45cb      	cmp	fp, r9
 8012e0a:	d035      	beq.n	8012e78 <iNemoEngine_API_Update+0x35f0>
 8012e0c:	eddd 7a03 	vldr	s15, [sp, #12]
 8012e10:	eef4 7acb 	vcmpe.f32	s15, s22
 8012e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e18:	d493      	bmi.n	8012d42 <iNemoEngine_API_Update+0x34ba>
 8012e1a:	ee1f 0a90 	vmov	r0, s31
 8012e1e:	e7aa      	b.n	8012d76 <iNemoEngine_API_Update+0x34ee>
 8012e20:	ee1f 0a10 	vmov	r0, s30
 8012e24:	e6a3      	b.n	8012b6e <iNemoEngine_API_Update+0x32e6>
 8012e26:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8012e2a:	f007 fa3d 	bl	801a2a8 <floor>
 8012e2e:	ec51 0b10 	vmov	r0, r1, d0
 8012e32:	f7ed fed9 	bl	8000be8 <__aeabi_d2f>
 8012e36:	e69a      	b.n	8012b6e <iNemoEngine_API_Update+0x32e6>
 8012e38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012e3c:	f007 fa34 	bl	801a2a8 <floor>
 8012e40:	ec51 0b10 	vmov	r0, r1, d0
 8012e44:	f7ed fed0 	bl	8000be8 <__aeabi_d2f>
 8012e48:	e66f      	b.n	8012b2a <iNemoEngine_API_Update+0x32a2>
 8012e4a:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8012e4e:	f007 fa2b 	bl	801a2a8 <floor>
 8012e52:	ec51 0b10 	vmov	r0, r1, d0
 8012e56:	f7ed fec7 	bl	8000be8 <__aeabi_d2f>
 8012e5a:	e6a9      	b.n	8012bb0 <iNemoEngine_API_Update+0x3328>
 8012e5c:	4648      	mov	r0, r9
 8012e5e:	e5ae      	b.n	80129be <iNemoEngine_API_Update+0x3136>
 8012e60:	4650      	mov	r0, sl
 8012e62:	e662      	b.n	8012b2a <iNemoEngine_API_Update+0x32a2>
 8012e64:	4650      	mov	r0, sl
 8012e66:	e6a3      	b.n	8012bb0 <iNemoEngine_API_Update+0x3328>
 8012e68:	ee1d 0a90 	vmov	r0, s27
 8012e6c:	f10b 0b0c 	add.w	fp, fp, #12
 8012e70:	f84b 0c04 	str.w	r0, [fp, #-4]
 8012e74:	45cb      	cmp	fp, r9
 8012e76:	d1c9      	bne.n	8012e0c <iNemoEngine_API_Update+0x3584>
 8012e78:	eeb0 7a69 	vmov.f32	s14, s19
 8012e7c:	eef0 7a4a 	vmov.f32	s15, s20
 8012e80:	eef0 9a6a 	vmov.f32	s19, s21
 8012e84:	eeb0 aa6c 	vmov.f32	s20, s25
 8012e88:	eef0 aa4d 	vmov.f32	s21, s26
 8012e8c:	eef0 ca67 	vmov.f32	s25, s15
 8012e90:	eeb0 da48 	vmov.f32	s26, s16
 8012e94:	eeb0 8a47 	vmov.f32	s16, s14
 8012e98:	f7fd b820 	b.w	800fedc <iNemoEngine_API_Update+0x654>
 8012e9c:	ee1f 0a10 	vmov	r0, s30
 8012ea0:	e78d      	b.n	8012dbe <iNemoEngine_API_Update+0x3536>
 8012ea2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8012ea6:	f007 f9ff 	bl	801a2a8 <floor>
 8012eaa:	ec51 0b10 	vmov	r0, r1, d0
 8012eae:	f7ed fe9b 	bl	8000be8 <__aeabi_d2f>
 8012eb2:	e784      	b.n	8012dbe <iNemoEngine_API_Update+0x3536>
 8012eb4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012eb8:	f007 f9f6 	bl	801a2a8 <floor>
 8012ebc:	ec51 0b10 	vmov	r0, r1, d0
 8012ec0:	f7ed fe92 	bl	8000be8 <__aeabi_d2f>
 8012ec4:	e757      	b.n	8012d76 <iNemoEngine_API_Update+0x34ee>
 8012ec6:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8012eca:	f007 f9ed 	bl	801a2a8 <floor>
 8012ece:	ec51 0b10 	vmov	r0, r1, d0
 8012ed2:	f7ed fe89 	bl	8000be8 <__aeabi_d2f>
 8012ed6:	e793      	b.n	8012e00 <iNemoEngine_API_Update+0x3578>
 8012ed8:	4650      	mov	r0, sl
 8012eda:	e648      	b.n	8012b6e <iNemoEngine_API_Update+0x32e6>
 8012edc:	4650      	mov	r0, sl
 8012ede:	e74a      	b.n	8012d76 <iNemoEngine_API_Update+0x34ee>
 8012ee0:	4650      	mov	r0, sl
 8012ee2:	e78d      	b.n	8012e00 <iNemoEngine_API_Update+0x3578>
 8012ee4:	4650      	mov	r0, sl
 8012ee6:	e76a      	b.n	8012dbe <iNemoEngine_API_Update+0x3536>
 8012ee8:	4616      	mov	r6, r2
 8012eea:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8012eee:	4be1      	ldr	r3, [pc, #900]	; (8013274 <iNemoEngine_API_Update+0x39ec>)
 8012ef0:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 8012ef4:	2100      	movs	r1, #0
 8012ef6:	f8c2 51cc 	str.w	r5, [r2, #460]	; 0x1cc
 8012efa:	f8c2 51d0 	str.w	r5, [r2, #464]	; 0x1d0
 8012efe:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 8012f02:	f506 70ea 	add.w	r0, r6, #468	; 0x1d4
 8012f06:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012f0a:	f003 f909 	bl	8016120 <memset>
 8012f0e:	ed96 6a02 	vldr	s12, [r6, #8]
 8012f12:	eddf 7ad9 	vldr	s15, [pc, #868]	; 8013278 <iNemoEngine_API_Update+0x39f0>
 8012f16:	eddf 5ad9 	vldr	s11, [pc, #868]	; 801327c <iNemoEngine_API_Update+0x39f4>
 8012f1a:	ed9f 5ad9 	vldr	s10, [pc, #868]	; 8013280 <iNemoEngine_API_Update+0x39f8>
 8012f1e:	f8c6 50c4 	str.w	r5, [r6, #196]	; 0xc4
 8012f22:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012f26:	2300      	movs	r3, #0
 8012f28:	edc6 7a34 	vstr	s15, [r6, #208]	; 0xd0
 8012f2c:	eddf 7ad5 	vldr	s15, [pc, #852]	; 8013284 <iNemoEngine_API_Update+0x39fc>
 8012f30:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 8012f34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012f38:	f8c6 3128 	str.w	r3, [r6, #296]	; 0x128
 8012f3c:	edc6 7a4e 	vstr	s15, [r6, #312]	; 0x138
 8012f40:	eddf 7ad1 	vldr	s15, [pc, #836]	; 8013288 <iNemoEngine_API_Update+0x3a00>
 8012f44:	4bd1      	ldr	r3, [pc, #836]	; (801328c <iNemoEngine_API_Update+0x3a04>)
 8012f46:	f8c6 30dc 	str.w	r3, [r6, #220]	; 0xdc
 8012f4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012f4e:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
 8012f52:	edc6 7a50 	vstr	s15, [r6, #320]	; 0x140
 8012f56:	eddf 7ace 	vldr	s15, [pc, #824]	; 8013290 <iNemoEngine_API_Update+0x3a08>
 8012f5a:	4bce      	ldr	r3, [pc, #824]	; (8013294 <iNemoEngine_API_Update+0x3a0c>)
 8012f5c:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8012f60:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012f64:	4bcc      	ldr	r3, [pc, #816]	; (8013298 <iNemoEngine_API_Update+0x3a10>)
 8012f66:	edc6 7a38 	vstr	s15, [r6, #224]	; 0xe0
 8012f6a:	eddf 7acc 	vldr	s15, [pc, #816]	; 801329c <iNemoEngine_API_Update+0x3a14>
 8012f6e:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
 8012f72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012f76:	4bca      	ldr	r3, [pc, #808]	; (80132a0 <iNemoEngine_API_Update+0x3a18>)
 8012f78:	edc6 7a52 	vstr	s15, [r6, #328]	; 0x148
 8012f7c:	eddf 7ac9 	vldr	s15, [pc, #804]	; 80132a4 <iNemoEngine_API_Update+0x3a1c>
 8012f80:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
 8012f84:	4bc8      	ldr	r3, [pc, #800]	; (80132a8 <iNemoEngine_API_Update+0x3a20>)
 8012f86:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
 8012f8a:	4631      	mov	r1, r6
 8012f8c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8012f90:	ee26 5a05 	vmul.f32	s10, s12, s10
 8012f94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012f98:	4bc4      	ldr	r3, [pc, #784]	; (80132ac <iNemoEngine_API_Update+0x3a24>)
 8012f9a:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
 8012f9e:	4bc4      	ldr	r3, [pc, #784]	; (80132b0 <iNemoEngine_API_Update+0x3a28>)
 8012fa0:	f8c6 512c 	str.w	r5, [r6, #300]	; 0x12c
 8012fa4:	f8c6 50cc 	str.w	r5, [r6, #204]	; 0xcc
 8012fa8:	f8c6 5134 	str.w	r5, [r6, #308]	; 0x134
 8012fac:	edc6 7a3a 	vstr	s15, [r6, #232]	; 0xe8
 8012fb0:	edc6 5a32 	vstr	s11, [r6, #200]	; 0xc8
 8012fb4:	edc6 5a4c 	vstr	s11, [r6, #304]	; 0x130
 8012fb8:	ed86 5a36 	vstr	s10, [r6, #216]	; 0xd8
 8012fbc:	f8c1 31d4 	str.w	r3, [r1, #468]	; 0x1d4
 8012fc0:	f8c1 31fc 	str.w	r3, [r1, #508]	; 0x1fc
 8012fc4:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
 8012fc8:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 8012fcc:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 8012fd0:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 8012fd4:	f8c1 32c4 	str.w	r3, [r1, #708]	; 0x2c4
 8012fd8:	f8c1 32ec 	str.w	r3, [r1, #748]	; 0x2ec
 8012fdc:	f8c1 3314 	str.w	r3, [r1, #788]	; 0x314
 8012fe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012fe4:	ed81 5a54 	vstr	s10, [r1, #336]	; 0x150
 8012fe8:	eddf 3ab2 	vldr	s7, [pc, #712]	; 80132b4 <iNemoEngine_API_Update+0x3a2c>
 8012fec:	ed9f 4ab2 	vldr	s8, [pc, #712]	; 80132b8 <iNemoEngine_API_Update+0x3a30>
 8012ff0:	f8c1 317c 	str.w	r3, [r1, #380]	; 0x17c
 8012ff4:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
 8012ff8:	f8c1 3124 	str.w	r3, [r1, #292]	; 0x124
 8012ffc:	eddf 6aaf 	vldr	s13, [pc, #700]	; 80132bc <iNemoEngine_API_Update+0x3a34>
 8013000:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 80132c0 <iNemoEngine_API_Update+0x3a38>
 8013004:	eddf 7aaf 	vldr	s15, [pc, #700]	; 80132c4 <iNemoEngine_API_Update+0x3a3c>
 8013008:	eddf 4aaf 	vldr	s9, [pc, #700]	; 80132c8 <iNemoEngine_API_Update+0x3a40>
 801300c:	4aaf      	ldr	r2, [pc, #700]	; (80132cc <iNemoEngine_API_Update+0x3a44>)
 801300e:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 80132ec <iNemoEngine_API_Update+0x3a64>
 8013012:	4faf      	ldr	r7, [pc, #700]	; (80132d0 <iNemoEngine_API_Update+0x3a48>)
 8013014:	4eaf      	ldr	r6, [pc, #700]	; (80132d4 <iNemoEngine_API_Update+0x3a4c>)
 8013016:	4db0      	ldr	r5, [pc, #704]	; (80132d8 <iNemoEngine_API_Update+0x3a50>)
 8013018:	48b0      	ldr	r0, [pc, #704]	; (80132dc <iNemoEngine_API_Update+0x3a54>)
 801301a:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 80132f0 <iNemoEngine_API_Update+0x3a68>
 801301e:	edc1 3a3d 	vstr	s7, [r1, #244]	; 0xf4
 8013022:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8013026:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 801302a:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
 801302e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013032:	ee66 6a26 	vmul.f32	s13, s12, s13
 8013036:	ee26 7a07 	vmul.f32	s14, s12, s14
 801303a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801303e:	ee66 2a23 	vmul.f32	s5, s12, s7
 8013042:	ee26 3a02 	vmul.f32	s6, s12, s4
 8013046:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
 801304a:	ee66 4a24 	vmul.f32	s9, s12, s9
 801304e:	4ba4      	ldr	r3, [pc, #656]	; (80132e0 <iNemoEngine_API_Update+0x3a58>)
 8013050:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184
 8013054:	ee66 1a04 	vmul.f32	s3, s12, s8
 8013058:	4ba2      	ldr	r3, [pc, #648]	; (80132e4 <iNemoEngine_API_Update+0x3a5c>)
 801305a:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
 801305e:	f8c1 c15c 	str.w	ip, [r1, #348]	; 0x15c
 8013062:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
 8013066:	f8c1 6164 	str.w	r6, [r1, #356]	; 0x164
 801306a:	f8c1 516c 	str.w	r5, [r1, #364]	; 0x16c
 801306e:	f8c1 0174 	str.w	r0, [r1, #372]	; 0x174
 8013072:	edc1 1a46 	vstr	s3, [r1, #280]	; 0x118
 8013076:	edc1 4a60 	vstr	s9, [r1, #384]	; 0x180
 801307a:	f8c1 e19c 	str.w	lr, [r1, #412]	; 0x19c
 801307e:	ed81 2a66 	vstr	s4, [r1, #408]	; 0x198
 8013082:	ed81 4a65 	vstr	s8, [r1, #404]	; 0x194
 8013086:	f8c1 2154 	str.w	r2, [r1, #340]	; 0x154
 801308a:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
 801308e:	edc1 6a3c 	vstr	s13, [r1, #240]	; 0xf0
 8013092:	edc1 6a56 	vstr	s13, [r1, #344]	; 0x158
 8013096:	ed81 7a3e 	vstr	s14, [r1, #248]	; 0xf8
 801309a:	ed81 7a58 	vstr	s14, [r1, #352]	; 0x160
 801309e:	edc1 7a40 	vstr	s15, [r1, #256]	; 0x100
 80130a2:	edc1 7a5a 	vstr	s15, [r1, #360]	; 0x168
 80130a6:	edc1 2a42 	vstr	s5, [r1, #264]	; 0x108
 80130aa:	edc1 2a5c 	vstr	s5, [r1, #368]	; 0x170
 80130ae:	ed81 3a44 	vstr	s6, [r1, #272]	; 0x110
 80130b2:	ed81 3a5e 	vstr	s6, [r1, #376]	; 0x178
 80130b6:	ed81 6a48 	vstr	s12, [r1, #288]	; 0x120
 80130ba:	ed81 6a62 	vstr	s12, [r1, #392]	; 0x188
 80130be:	edc1 5a64 	vstr	s11, [r1, #400]	; 0x190
 80130c2:	784b      	ldrb	r3, [r1, #1]
 80130c4:	b18b      	cbz	r3, 80130ea <iNemoEngine_API_Update+0x3862>
 80130c6:	f501 6214 	add.w	r2, r1, #2368	; 0x940
 80130ca:	9225      	str	r2, [sp, #148]	; 0x94
 80130cc:	f601 1348 	addw	r3, r1, #2376	; 0x948
 80130d0:	f601 1244 	addw	r2, r1, #2372	; 0x944
 80130d4:	9226      	str	r2, [sp, #152]	; 0x98
 80130d6:	9327      	str	r3, [sp, #156]	; 0x9c
 80130d8:	9a06      	ldr	r2, [sp, #24]
 80130da:	2300      	movs	r3, #0
 80130dc:	7053      	strb	r3, [r2, #1]
 80130de:	f7fc bee8 	b.w	800feb2 <iNemoEngine_API_Update+0x62a>
 80130e2:	ed93 ca4b 	vldr	s24, [r3, #300]	; 0x12c
 80130e6:	f7fd bfc0 	b.w	801106a <iNemoEngine_API_Update+0x17e2>
 80130ea:	9a06      	ldr	r2, [sp, #24]
 80130ec:	f502 6314 	add.w	r3, r2, #2368	; 0x940
 80130f0:	f602 1144 	addw	r1, r2, #2372	; 0x944
 80130f4:	f602 1048 	addw	r0, r2, #2376	; 0x948
 80130f8:	9325      	str	r3, [sp, #148]	; 0x94
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
 8013100:	680b      	ldr	r3, [r1, #0]
 8013102:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
 8013106:	6803      	ldr	r3, [r0, #0]
 8013108:	9126      	str	r1, [sp, #152]	; 0x98
 801310a:	9027      	str	r0, [sp, #156]	; 0x9c
 801310c:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
 8013110:	e7e2      	b.n	80130d8 <iNemoEngine_API_Update+0x3850>
 8013112:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 8013116:	ed97 0a00 	vldr	s0, [r7]
 801311a:	f505 6097 	add.w	r0, r5, #1208	; 0x4b8
 801311e:	f7fa ff43 	bl	800dfa8 <dataDerivative5>
 8013122:	f205 6824 	addw	r8, r5, #1572	; 0x624
 8013126:	eef0 3a40 	vmov.f32	s7, s0
 801312a:	f505 60c5 	add.w	r0, r5, #1576	; 0x628
 801312e:	ed98 0a00 	vldr	s0, [r8]
 8013132:	f7fa ff39 	bl	800dfa8 <dataDerivative5>
 8013136:	f205 7394 	addw	r3, r5, #1940	; 0x794
 801313a:	eeb0 3a40 	vmov.f32	s6, s0
 801313e:	f505 60f3 	add.w	r0, r5, #1944	; 0x798
 8013142:	ed93 0a00 	vldr	s0, [r3]
 8013146:	f7fa ff2f 	bl	800dfa8 <dataDerivative5>
 801314a:	f9b5 3976 	ldrsh.w	r3, [r5, #2422]	; 0x976
 801314e:	ee07 3a90 	vmov	s15, r3
 8013152:	3301      	adds	r3, #1
 8013154:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8013158:	ee07 3a90 	vmov	s15, r3
 801315c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013164:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8013168:	f605 106c 	addw	r0, r5, #2412	; 0x96c
 801316c:	f605 1168 	addw	r1, r5, #2408	; 0x968
 8013170:	f505 6217 	add.w	r2, r5, #2416	; 0x970
 8013174:	b21b      	sxth	r3, r3
 8013176:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801317a:	ed90 7a00 	vldr	s14, [r0]
 801317e:	ed91 5a00 	vldr	s10, [r1]
 8013182:	eef0 7a63 	vmov.f32	s15, s7
 8013186:	eee7 7a25 	vfma.f32	s15, s14, s11
 801318a:	eeb0 7a43 	vmov.f32	s14, s6
 801318e:	eea5 7a85 	vfma.f32	s14, s11, s10
 8013192:	ed92 5a00 	vldr	s10, [r2]
 8013196:	eef0 6a40 	vmov.f32	s13, s0
 801319a:	eee5 6a85 	vfma.f32	s13, s11, s10
 801319e:	ee67 7a86 	vmul.f32	s15, s15, s12
 80131a2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80131a6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80131aa:	edc0 7a00 	vstr	s15, [r0]
 80131ae:	ed81 7a00 	vstr	s14, [r1]
 80131b2:	edc2 6a00 	vstr	s13, [r2]
 80131b6:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 80131ba:	f47c ab8d 	bne.w	800f8d8 <iNemoEngine_API_Update+0x50>
 80131be:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80131c2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80131c6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80131ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 80131ce:	2300      	movs	r3, #0
 80131d0:	ed85 7a07 	vstr	s14, [r5, #28]
 80131d4:	edc5 6a08 	vstr	s13, [r5, #32]
 80131d8:	edc5 7a06 	vstr	s15, [r5, #24]
 80131dc:	6003      	str	r3, [r0, #0]
 80131de:	600b      	str	r3, [r1, #0]
 80131e0:	6013      	str	r3, [r2, #0]
 80131e2:	2300      	movs	r3, #0
 80131e4:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 80131e8:	f885 3978 	strb.w	r3, [r5, #2424]	; 0x978
 80131ec:	f7fc bb74 	b.w	800f8d8 <iNemoEngine_API_Update+0x50>
 80131f0:	9906      	ldr	r1, [sp, #24]
 80131f2:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 80131f6:	9295      	str	r2, [sp, #596]	; 0x254
 80131f8:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 80131fc:	9296      	str	r2, [sp, #600]	; 0x258
 80131fe:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 8013202:	9297      	str	r2, [sp, #604]	; 0x25c
 8013204:	2200      	movs	r2, #0
 8013206:	464b      	mov	r3, r9
 8013208:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801320c:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 8013210:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8013214:	f7fe bc8f 	b.w	8011b36 <iNemoEngine_API_Update+0x22ae>
 8013218:	ed92 fa49 	vldr	s30, [r2, #292]	; 0x124
 801321c:	4613      	mov	r3, r2
 801321e:	f7fd bdd2 	b.w	8010dc6 <iNemoEngine_API_Update+0x153e>
 8013222:	ed93 ca63 	vldr	s24, [r3, #396]	; 0x18c
 8013226:	f7fd bf20 	b.w	801106a <iNemoEngine_API_Update+0x17e2>
 801322a:	eddf 8a2f 	vldr	s17, [pc, #188]	; 80132e8 <iNemoEngine_API_Update+0x3a60>
 801322e:	f7fd b87e 	b.w	801032e <iNemoEngine_API_Update+0xaa6>
 8013232:	ed9f ca2d 	vldr	s24, [pc, #180]	; 80132e8 <iNemoEngine_API_Update+0x3a60>
 8013236:	f7fd b90e 	b.w	8010456 <iNemoEngine_API_Update+0xbce>
 801323a:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 80132e8 <iNemoEngine_API_Update+0x3a60>
 801323e:	f7fc bf8c 	b.w	801015a <iNemoEngine_API_Update+0x8d2>
 8013242:	eddf 8a29 	vldr	s17, [pc, #164]	; 80132e8 <iNemoEngine_API_Update+0x3a60>
 8013246:	f7fc bf5d 	b.w	8010104 <iNemoEngine_API_Update+0x87c>
 801324a:	ed9f 8a27 	vldr	s16, [pc, #156]	; 80132e8 <iNemoEngine_API_Update+0x3a60>
 801324e:	f7fd b92d 	b.w	80104ac <iNemoEngine_API_Update+0xc24>
 8013252:	ed9f ca25 	vldr	s24, [pc, #148]	; 80132e8 <iNemoEngine_API_Update+0x3a60>
 8013256:	f7fd b83f 	b.w	80102d8 <iNemoEngine_API_Update+0xa50>
 801325a:	ed9f ca23 	vldr	s24, [pc, #140]	; 80132e8 <iNemoEngine_API_Update+0x3a60>
 801325e:	f7fc bfa7 	b.w	80101b0 <iNemoEngine_API_Update+0x928>
 8013262:	ed9f 8a21 	vldr	s16, [pc, #132]	; 80132e8 <iNemoEngine_API_Update+0x3a60>
 8013266:	f7fd b80c 	b.w	8010282 <iNemoEngine_API_Update+0x9fa>
 801326a:	eddf 8a1f 	vldr	s17, [pc, #124]	; 80132e8 <iNemoEngine_API_Update+0x3a60>
 801326e:	f7fd b8c7 	b.w	8010400 <iNemoEngine_API_Update+0xb78>
 8013272:	bf00      	nop
 8013274:	bf666666 	.word	0xbf666666
 8013278:	3d072b02 	.word	0x3d072b02
 801327c:	3ca3d70a 	.word	0x3ca3d70a
 8013280:	3d4ccccd 	.word	0x3d4ccccd
 8013284:	3cb43958 	.word	0x3cb43958
 8013288:	3cf5c28f 	.word	0x3cf5c28f
 801328c:	3eb33333 	.word	0x3eb33333
 8013290:	3d75c28f 	.word	0x3d75c28f
 8013294:	3ee66666 	.word	0x3ee66666
 8013298:	3f866666 	.word	0x3f866666
 801329c:	3d23d70a 	.word	0x3d23d70a
 80132a0:	3f8ccccd 	.word	0x3f8ccccd
 80132a4:	3d8f5c29 	.word	0x3d8f5c29
 80132a8:	3f933333 	.word	0x3f933333
 80132ac:	3ebd70a4 	.word	0x3ebd70a4
 80132b0:	40a00000 	.word	0x40a00000
 80132b4:	3ecccccd 	.word	0x3ecccccd
 80132b8:	3f4ccccd 	.word	0x3f4ccccd
 80132bc:	3dcccccd 	.word	0x3dcccccd
 80132c0:	3e4ccccd 	.word	0x3e4ccccd
 80132c4:	3e99999a 	.word	0x3e99999a
 80132c8:	3f666666 	.word	0x3f666666
 80132cc:	3f99999a 	.word	0x3f99999a
 80132d0:	3f19999a 	.word	0x3f19999a
 80132d4:	3fb9999a 	.word	0x3fb9999a
 80132d8:	3fcccccd 	.word	0x3fcccccd
 80132dc:	3fe66666 	.word	0x3fe66666
 80132e0:	40200000 	.word	0x40200000
 80132e4:	40400000 	.word	0x40400000
 80132e8:	80000000 	.word	0x80000000
 80132ec:	3fa66666 	.word	0x3fa66666
 80132f0:	3f333333 	.word	0x3f333333
 80132f4:	3e4cccce 	.word	0x3e4cccce
 80132f8:	3eaaaaab 	.word	0x3eaaaaab
 80132fc:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 8013300:	2a00      	cmp	r2, #0
 8013302:	f040 85bc 	bne.w	8013e7e <iNemoEngine_API_Update+0x45f6>
 8013306:	9906      	ldr	r1, [sp, #24]
 8013308:	ed5f 8a06 	vldr	s17, [pc, #-24]	; 80132f4 <iNemoEngine_API_Update+0x3a6c>
 801330c:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 8013310:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 80132f8 <iNemoEngine_API_Update+0x3a70>
 8013314:	3301      	adds	r3, #1
 8013316:	b29b      	uxth	r3, r3
 8013318:	2b31      	cmp	r3, #49	; 0x31
 801331a:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 801331e:	bf98      	it	ls
 8013320:	eef0 8a67 	vmovls.f32	s17, s15
 8013324:	460b      	mov	r3, r1
 8013326:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801332a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801332e:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8013332:	f000 8599 	beq.w	8013e68 <iNemoEngine_API_Update+0x45e0>
 8013336:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 801333a:	f47f a83a 	bne.w	80123b2 <iNemoEngine_API_Update+0x2b2a>
 801333e:	9a06      	ldr	r2, [sp, #24]
 8013340:	2301      	movs	r3, #1
 8013342:	f882 31a4 	strb.w	r3, [r2, #420]	; 0x1a4
 8013346:	9a06      	ldr	r2, [sp, #24]
 8013348:	edcd 6a03 	vstr	s13, [sp, #12]
 801334c:	f502 63c3 	add.w	r3, r2, #1560	; 0x618
 8013350:	ed93 5a00 	vldr	s10, [r3]
 8013354:	f502 63f1 	add.w	r3, r2, #1928	; 0x788
 8013358:	ed93 7a00 	vldr	s14, [r3]
 801335c:	f202 6314 	addw	r3, r2, #1556	; 0x614
 8013360:	edd3 4a00 	vldr	s9, [r3]
 8013364:	ee25 4a05 	vmul.f32	s8, s10, s10
 8013368:	f202 7384 	addw	r3, r2, #1924	; 0x784
 801336c:	eea4 4aa4 	vfma.f32	s8, s9, s9
 8013370:	a93d      	add	r1, sp, #244	; 0xf4
 8013372:	a843      	add	r0, sp, #268	; 0x10c
 8013374:	ed93 6a00 	vldr	s12, [r3]
 8013378:	f202 631c 	addw	r3, r2, #1564	; 0x61c
 801337c:	edd3 7a00 	vldr	s15, [r3]
 8013380:	eea7 4aa7 	vfma.f32	s8, s15, s15
 8013384:	f202 738c 	addw	r3, r2, #1932	; 0x78c
 8013388:	465e      	mov	r6, fp
 801338a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 801338e:	eeb1 3ac4 	vsqrt.f32	s6, s8
 8013392:	465a      	mov	r2, fp
 8013394:	4655      	mov	r5, sl
 8013396:	4657      	mov	r7, sl
 8013398:	acae      	add	r4, sp, #696	; 0x2b8
 801339a:	ee67 5a07 	vmul.f32	s11, s14, s14
 801339e:	ee83 4a83 	vdiv.f32	s8, s7, s6
 80133a2:	eee6 5a06 	vfma.f32	s11, s12, s12
 80133a6:	ee67 7a84 	vmul.f32	s15, s15, s8
 80133aa:	ee25 5a04 	vmul.f32	s10, s10, s8
 80133ae:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 80133b2:	edd3 7a00 	vldr	s15, [r3]
 80133b6:	ed8d 5a3e 	vstr	s10, [sp, #248]	; 0xf8
 80133ba:	eee7 5aa7 	vfma.f32	s11, s15, s15
 80133be:	ee64 4a84 	vmul.f32	s9, s9, s8
 80133c2:	eeb1 5ae5 	vsqrt.f32	s10, s11
 80133c6:	edcd 4a3d 	vstr	s9, [sp, #244]	; 0xf4
 80133ca:	eec3 5a85 	vdiv.f32	s11, s7, s10
 80133ce:	ee27 7a25 	vmul.f32	s14, s14, s11
 80133d2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80133d6:	ee26 6a25 	vmul.f32	s12, s12, s11
 80133da:	ed8d 7a44 	vstr	s14, [sp, #272]	; 0x110
 80133de:	edcd 7a45 	vstr	s15, [sp, #276]	; 0x114
 80133e2:	ed8d 6a43 	vstr	s12, [sp, #268]	; 0x10c
 80133e6:	f7fa fec5 	bl	800e174 <getRotationMatrix>
 80133ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80133ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80133ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80133f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80133f2:	6836      	ldr	r6, [r6, #0]
 80133f4:	602e      	str	r6, [r5, #0]
 80133f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80133f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133fa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80133fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133fe:	edda 7a00 	vldr	s15, [sl]
 8013402:	ed9a 7a01 	vldr	s14, [sl, #4]
 8013406:	eddd 6a03 	vldr	s13, [sp, #12]
 801340a:	6026      	str	r6, [r4, #0]
 801340c:	eef0 7ae7 	vabs.f32	s15, s15
 8013410:	eeb0 7ac7 	vabs.f32	s14, s14
 8013414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801341c:	f140 8407 	bpl.w	8013c2e <iNemoEngine_API_Update+0x43a6>
 8013420:	2304      	movs	r3, #4
 8013422:	2000      	movs	r0, #0
 8013424:	930c      	str	r3, [sp, #48]	; 0x30
 8013426:	469e      	mov	lr, r3
 8013428:	eef0 7a47 	vmov.f32	s15, s14
 801342c:	2103      	movs	r1, #3
 801342e:	2707      	movs	r7, #7
 8013430:	f04f 0c06 	mov.w	ip, #6
 8013434:	4603      	mov	r3, r0
 8013436:	2601      	movs	r6, #1
 8013438:	ed9a 7a02 	vldr	s14, [sl, #8]
 801343c:	eeb0 7ac7 	vabs.f32	s14, s14
 8013440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013448:	f340 8453 	ble.w	8013cf2 <iNemoEngine_API_Update+0x446a>
 801344c:	2306      	movs	r3, #6
 801344e:	2708      	movs	r7, #8
 8013450:	2104      	movs	r1, #4
 8013452:	9303      	str	r3, [sp, #12]
 8013454:	f04f 0c07 	mov.w	ip, #7
 8013458:	f04f 0e05 	mov.w	lr, #5
 801345c:	970c      	str	r7, [sp, #48]	; 0x30
 801345e:	4608      	mov	r0, r1
 8013460:	2200      	movs	r2, #0
 8013462:	2301      	movs	r3, #1
 8013464:	2602      	movs	r6, #2
 8013466:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013468:	4450      	add	r0, sl
 801346a:	4454      	add	r4, sl
 801346c:	ed90 6a00 	vldr	s12, [r0]
 8013470:	ed94 7a00 	vldr	s14, [r4]
 8013474:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8013478:	a8ae      	add	r0, sp, #696	; 0x2b8
 801347a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801347e:	acae      	add	r4, sp, #696	; 0x2b8
 8013480:	adae      	add	r5, sp, #696	; 0x2b8
 8013482:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8013486:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801348a:	edc0 7a00 	vstr	s15, [r0]
 801348e:	ed94 7a00 	vldr	s14, [r4]
 8013492:	edd5 7a00 	vldr	s15, [r5]
 8013496:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801349a:	ed84 6a00 	vstr	s12, [r4]
 801349e:	edd0 5a00 	vldr	s11, [r0]
 80134a2:	a8ae      	add	r0, sp, #696	; 0x2b8
 80134a4:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80134a8:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 80134ac:	ed90 7a00 	vldr	s14, [r0]
 80134b0:	edd5 7a00 	vldr	s15, [r5]
 80134b4:	eee5 7ac7 	vfms.f32	s15, s11, s14
 80134b8:	ea4f 048e 	mov.w	r4, lr, lsl #2
 80134bc:	9404      	str	r4, [sp, #16]
 80134be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80134c0:	edc5 7a00 	vstr	s15, [r5]
 80134c4:	ed90 7a00 	vldr	s14, [r0]
 80134c8:	a8ae      	add	r0, sp, #696	; 0x2b8
 80134ca:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80134ce:	edd0 7a00 	vldr	s15, [r0]
 80134d2:	eee6 7a47 	vfms.f32	s15, s12, s14
 80134d6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80134da:	00bc      	lsls	r4, r7, #2
 80134dc:	9405      	str	r4, [sp, #20]
 80134de:	edc0 7a00 	vstr	s15, [r0]
 80134e2:	acae      	add	r4, sp, #696	; 0x2b8
 80134e4:	a8ae      	add	r0, sp, #696	; 0x2b8
 80134e6:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 80134ea:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80134ee:	ed90 5a00 	vldr	s10, [r0]
 80134f2:	ed94 7a00 	vldr	s14, [r4]
 80134f6:	eea5 7ac5 	vfms.f32	s14, s11, s10
 80134fa:	0097      	lsls	r7, r2, #2
 80134fc:	eef0 7ae7 	vabs.f32	s15, s15
 8013500:	ed84 7a00 	vstr	s14, [r4]
 8013504:	9c03      	ldr	r4, [sp, #12]
 8013506:	edd0 5a00 	vldr	s11, [r0]
 801350a:	a8ae      	add	r0, sp, #696	; 0x2b8
 801350c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8013510:	ed90 7a00 	vldr	s14, [r0]
 8013514:	eea6 7a65 	vfms.f32	s14, s12, s11
 8013518:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801351c:	008c      	lsls	r4, r1, #2
 801351e:	ed80 7a00 	vstr	s14, [r0]
 8013522:	ed95 7a00 	vldr	s14, [r5]
 8013526:	eeb0 7ac7 	vabs.f32	s14, s14
 801352a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801352e:	00b0      	lsls	r0, r6, #2
 8013530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013534:	9003      	str	r0, [sp, #12]
 8013536:	ea4f 0583 	mov.w	r5, r3, lsl #2
 801353a:	ea4f 008c 	mov.w	r0, ip, lsl #2
 801353e:	dd0a      	ble.n	8013556 <iNemoEngine_API_Update+0x3cce>
 8013540:	4618      	mov	r0, r3
 8013542:	4613      	mov	r3, r2
 8013544:	4602      	mov	r2, r0
 8013546:	4674      	mov	r4, lr
 8013548:	4650      	mov	r0, sl
 801354a:	463d      	mov	r5, r7
 801354c:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 8013550:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8013554:	0097      	lsls	r7, r2, #2
 8013556:	a9ae      	add	r1, sp, #696	; 0x2b8
 8013558:	448e      	add	lr, r1
 801355a:	440c      	add	r4, r1
 801355c:	ed9e 7a00 	vldr	s14, [lr]
 8013560:	edd4 7a00 	vldr	s15, [r4]
 8013564:	edcd 6a03 	vstr	s13, [sp, #12]
 8013568:	ee87 2a27 	vdiv.f32	s4, s14, s15
 801356c:	4408      	add	r0, r1
 801356e:	4451      	add	r1, sl
 8013570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013574:	ed8e 2a00 	vstr	s4, [lr]
 8013578:	ed90 6a00 	vldr	s12, [r0]
 801357c:	edd1 7a00 	vldr	s15, [r1]
 8013580:	eee2 7a46 	vfms.f32	s15, s4, s12
 8013584:	edc1 7a00 	vstr	s15, [r1]
 8013588:	9905      	ldr	r1, [sp, #20]
 801358a:	ed90 3a00 	vldr	s6, [r0]
 801358e:	ed94 6a00 	vldr	s12, [r4]
 8013592:	a8ae      	add	r0, sp, #696	; 0x2b8
 8013594:	4401      	add	r1, r0
 8013596:	edd1 3a00 	vldr	s7, [r1]
 801359a:	9904      	ldr	r1, [sp, #16]
 801359c:	4401      	add	r1, r0
 801359e:	00b0      	lsls	r0, r6, #2
 80135a0:	edd1 4a00 	vldr	s9, [r1]
 80135a4:	f500 61b2 	add.w	r1, r0, #1424	; 0x590
 80135a8:	4469      	add	r1, sp
 80135aa:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 80135ae:	eec7 2a27 	vdiv.f32	s5, s14, s15
 80135b2:	edd1 7a00 	vldr	s15, [r1]
 80135b6:	a9ae      	add	r1, sp, #696	; 0x2b8
 80135b8:	4401      	add	r1, r0
 80135ba:	ee87 4a06 	vdiv.f32	s8, s14, s12
 80135be:	a8ae      	add	r0, sp, #696	; 0x2b8
 80135c0:	ed91 6a00 	vldr	s12, [r1]
 80135c4:	f505 61b2 	add.w	r1, r5, #1424	; 0x590
 80135c8:	4469      	add	r1, sp
 80135ca:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 80135ce:	ee87 5a06 	vdiv.f32	s10, s14, s12
 80135d2:	4405      	add	r5, r0
 80135d4:	ed91 7a00 	vldr	s14, [r1]
 80135d8:	edd5 5a00 	vldr	s11, [r5]
 80135dc:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 80135e0:	4469      	add	r1, sp
 80135e2:	4407      	add	r7, r0
 80135e4:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 80135e8:	edd7 1a00 	vldr	s3, [r7]
 80135ec:	ed91 6a00 	vldr	s12, [r1]
 80135f0:	eea5 7ae7 	vfms.f32	s14, s11, s15
 80135f4:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 80135f8:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 80135fc:	eea1 6ae7 	vfms.f32	s12, s3, s15
 8013600:	4601      	mov	r1, r0
 8013602:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 8013606:	ed91 1a00 	vldr	s2, [r1]
 801360a:	eea2 6a47 	vfms.f32	s12, s4, s14
 801360e:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8013612:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 8013616:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801361a:	ee22 6a86 	vmul.f32	s12, s5, s12
 801361e:	460b      	mov	r3, r1
 8013620:	eea3 7a46 	vfms.f32	s14, s6, s12
 8013624:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 8013628:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 801362c:	eee3 7ac6 	vfms.f32	s15, s7, s12
 8013630:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013634:	ed8b 6a02 	vstr	s12, [fp, #8]
 8013638:	eee4 7ac7 	vfms.f32	s15, s9, s14
 801363c:	ed8b 7a01 	vstr	s14, [fp, #4]
 8013640:	ee65 7a27 	vmul.f32	s15, s10, s15
 8013644:	ed90 7a00 	vldr	s14, [r0]
 8013648:	ed91 6a00 	vldr	s12, [r1]
 801364c:	edcb 7a00 	vstr	s15, [fp]
 8013650:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 8013654:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8013658:	edd3 7a00 	vldr	s15, [r3]
 801365c:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 8013660:	edd3 0a00 	vldr	s1, [r3]
 8013664:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 8013668:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801366c:	4658      	mov	r0, fp
 801366e:	a952      	add	r1, sp, #328	; 0x148
 8013670:	eee1 7a65 	vfms.f32	s15, s2, s11
 8013674:	edd2 5a00 	vldr	s11, [r2]
 8013678:	eee1 0a61 	vfms.f32	s1, s2, s3
 801367c:	eee1 5ac7 	vfms.f32	s11, s3, s14
 8013680:	eef0 1a60 	vmov.f32	s3, s1
 8013684:	eee2 5a46 	vfms.f32	s11, s4, s12
 8013688:	eee2 1a67 	vfms.f32	s3, s4, s15
 801368c:	ee62 5aa5 	vmul.f32	s11, s5, s11
 8013690:	ee62 2aa1 	vmul.f32	s5, s5, s3
 8013694:	eea3 6a65 	vfms.f32	s12, s6, s11
 8013698:	eee2 7ac3 	vfms.f32	s15, s5, s6
 801369c:	eea2 1ae3 	vfms.f32	s2, s5, s7
 80136a0:	eea3 7ae5 	vfms.f32	s14, s7, s11
 80136a4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80136a8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80136ac:	edcb 5a05 	vstr	s11, [fp, #20]
 80136b0:	eef0 5a41 	vmov.f32	s11, s2
 80136b4:	eea4 7ac6 	vfms.f32	s14, s9, s12
 80136b8:	eee7 5ae4 	vfms.f32	s11, s15, s9
 80136bc:	ee25 7a07 	vmul.f32	s14, s10, s14
 80136c0:	ee65 5a25 	vmul.f32	s11, s10, s11
 80136c4:	ed8b 6a04 	vstr	s12, [fp, #16]
 80136c8:	ed8b 7a03 	vstr	s14, [fp, #12]
 80136cc:	edcb 2a08 	vstr	s5, [fp, #32]
 80136d0:	edcb 7a07 	vstr	s15, [fp, #28]
 80136d4:	edcb 5a06 	vstr	s11, [fp, #24]
 80136d8:	f7fa fcac 	bl	800e034 <b_dcm2q>
 80136dc:	ed9d 7a53 	vldr	s14, [sp, #332]	; 0x14c
 80136e0:	eddd 7a54 	vldr	s15, [sp, #336]	; 0x150
 80136e4:	ed9d 6a52 	vldr	s12, [sp, #328]	; 0x148
 80136e8:	9b06      	ldr	r3, [sp, #24]
 80136ea:	eddd 6a03 	vldr	s13, [sp, #12]
 80136ee:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 80136f2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80136f6:	ee36 6a06 	vadd.f32	s12, s12, s12
 80136fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80136fe:	ed8d 6a3d 	vstr	s12, [sp, #244]	; 0xf4
 8013702:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8013706:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 801370a:	2b00      	cmp	r3, #0
 801370c:	f43e ae54 	beq.w	80123b8 <iNemoEngine_API_Update+0x2b30>
 8013710:	9906      	ldr	r1, [sp, #24]
 8013712:	2200      	movs	r2, #0
 8013714:	464b      	mov	r3, r9
 8013716:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 801371a:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 801371e:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8013722:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8013726:	f7fe ba06 	b.w	8011b36 <iNemoEngine_API_Update+0x22ae>
 801372a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801372e:	ee38 4ae7 	vsub.f32	s8, s17, s15
 8013732:	edd2 3a31 	vldr	s7, [r2, #196]	; 0xc4
 8013736:	edd2 7a33 	vldr	s15, [r2, #204]	; 0xcc
 801373a:	ee77 7ae3 	vsub.f32	s15, s15, s7
 801373e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013742:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8013746:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 801374a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801374e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013752:	ee3f fa23 	vadd.f32	s30, s30, s7
 8013756:	f6fe ac6e 	blt.w	8012036 <iNemoEngine_API_Update+0x27ae>
 801375a:	9b06      	ldr	r3, [sp, #24]
 801375c:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8013760:	eef4 8ac7 	vcmpe.f32	s17, s14
 8013764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013768:	f140 837a 	bpl.w	8013e60 <iNemoEngine_API_Update+0x45d8>
 801376c:	edd3 3a35 	vldr	s7, [r3, #212]	; 0xd4
 8013770:	ed93 4a37 	vldr	s8, [r3, #220]	; 0xdc
 8013774:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013778:	ee34 4a63 	vsub.f32	s8, s8, s7
 801377c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8013780:	ee64 7a27 	vmul.f32	s15, s8, s15
 8013784:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8013788:	ee3f fa23 	vadd.f32	s30, s30, s7
 801378c:	9b06      	ldr	r3, [sp, #24]
 801378e:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8013792:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801379a:	f6fe ac6d 	blt.w	8012078 <iNemoEngine_API_Update+0x27f0>
 801379e:	9b06      	ldr	r3, [sp, #24]
 80137a0:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 80137a4:	eef4 8ac7 	vcmpe.f32	s17, s14
 80137a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ac:	f140 82fd 	bpl.w	8013daa <iNemoEngine_API_Update+0x4522>
 80137b0:	edd3 3a39 	vldr	s7, [r3, #228]	; 0xe4
 80137b4:	ed93 4a3b 	vldr	s8, [r3, #236]	; 0xec
 80137b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80137bc:	ee34 4a63 	vsub.f32	s8, s8, s7
 80137c0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80137c4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80137c8:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80137cc:	ee3f fa23 	vadd.f32	s30, s30, s7
 80137d0:	9b06      	ldr	r3, [sp, #24]
 80137d2:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80137d6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80137da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137de:	f6fe ac6d 	blt.w	80120bc <iNemoEngine_API_Update+0x2834>
 80137e2:	9b06      	ldr	r3, [sp, #24]
 80137e4:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 80137e8:	eef4 8ac7 	vcmpe.f32	s17, s14
 80137ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137f0:	f140 831a 	bpl.w	8013e28 <iNemoEngine_API_Update+0x45a0>
 80137f4:	edd3 3a3d 	vldr	s7, [r3, #244]	; 0xf4
 80137f8:	ed93 4a3f 	vldr	s8, [r3, #252]	; 0xfc
 80137fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013800:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013804:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8013808:	ee64 7a27 	vmul.f32	s15, s8, s15
 801380c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8013810:	ee3f fa23 	vadd.f32	s30, s30, s7
 8013814:	9b06      	ldr	r3, [sp, #24]
 8013816:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 801381a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013822:	f6fe ac6d 	blt.w	8012100 <iNemoEngine_API_Update+0x2878>
 8013826:	9b06      	ldr	r3, [sp, #24]
 8013828:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 801382c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8013830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013834:	f140 82c3 	bpl.w	8013dbe <iNemoEngine_API_Update+0x4536>
 8013838:	edd3 3a41 	vldr	s7, [r3, #260]	; 0x104
 801383c:	ed93 4a43 	vldr	s8, [r3, #268]	; 0x10c
 8013840:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013844:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013848:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801384c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8013850:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8013854:	ee3f fa23 	vadd.f32	s30, s30, s7
 8013858:	9b06      	ldr	r3, [sp, #24]
 801385a:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 801385e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013866:	f6fe ac6d 	blt.w	8012144 <iNemoEngine_API_Update+0x28bc>
 801386a:	9b06      	ldr	r3, [sp, #24]
 801386c:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
 8013870:	eef4 8ac7 	vcmpe.f32	s17, s14
 8013874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013878:	f140 82d2 	bpl.w	8013e20 <iNemoEngine_API_Update+0x4598>
 801387c:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 8013880:	edd3 4a47 	vldr	s9, [r3, #284]	; 0x11c
 8013884:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013888:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801388c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8013890:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8013894:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8013898:	ee3f fa04 	vadd.f32	s30, s30, s8
 801389c:	f7fd ba93 	b.w	8010dc6 <iNemoEngine_API_Update+0x153e>
 80138a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80138a4:	ee38 4ae7 	vsub.f32	s8, s17, s15
 80138a8:	edd3 3a4b 	vldr	s7, [r3, #300]	; 0x12c
 80138ac:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 80138b0:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80138b4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80138b8:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80138bc:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 80138c0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80138c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138c8:	ee3c ca23 	vadd.f32	s24, s24, s7
 80138cc:	f6fd aaab 	blt.w	8010e26 <iNemoEngine_API_Update+0x159e>
 80138d0:	9b06      	ldr	r3, [sp, #24]
 80138d2:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
 80138d6:	eef4 8ac7 	vcmpe.f32	s17, s14
 80138da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138de:	f140 8260 	bpl.w	8013da2 <iNemoEngine_API_Update+0x451a>
 80138e2:	edd3 3a4f 	vldr	s7, [r3, #316]	; 0x13c
 80138e6:	ed93 4a51 	vldr	s8, [r3, #324]	; 0x144
 80138ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80138ee:	ee34 4a63 	vsub.f32	s8, s8, s7
 80138f2:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80138f6:	ee64 7a27 	vmul.f32	s15, s8, s15
 80138fa:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80138fe:	ee3c ca23 	vadd.f32	s24, s24, s7
 8013902:	9b06      	ldr	r3, [sp, #24]
 8013904:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8013908:	eef4 8ae7 	vcmpe.f32	s17, s15
 801390c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013910:	f6fd aaaa 	blt.w	8010e68 <iNemoEngine_API_Update+0x15e0>
 8013914:	9b06      	ldr	r3, [sp, #24]
 8013916:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 801391a:	eef4 8ac7 	vcmpe.f32	s17, s14
 801391e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013922:	f140 8237 	bpl.w	8013d94 <iNemoEngine_API_Update+0x450c>
 8013926:	edd3 3a53 	vldr	s7, [r3, #332]	; 0x14c
 801392a:	ed93 4a55 	vldr	s8, [r3, #340]	; 0x154
 801392e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013932:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013936:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801393a:	ee64 7a27 	vmul.f32	s15, s8, s15
 801393e:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8013942:	ee3c ca23 	vadd.f32	s24, s24, s7
 8013946:	9b06      	ldr	r3, [sp, #24]
 8013948:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 801394c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013954:	f6fd aaaa 	blt.w	8010eac <iNemoEngine_API_Update+0x1624>
 8013958:	9b06      	ldr	r3, [sp, #24]
 801395a:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 801395e:	eef4 8ac7 	vcmpe.f32	s17, s14
 8013962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013966:	f140 8270 	bpl.w	8013e4a <iNemoEngine_API_Update+0x45c2>
 801396a:	edd3 3a57 	vldr	s7, [r3, #348]	; 0x15c
 801396e:	ed93 4a59 	vldr	s8, [r3, #356]	; 0x164
 8013972:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013976:	ee34 4a63 	vsub.f32	s8, s8, s7
 801397a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801397e:	ee64 7a27 	vmul.f32	s15, s8, s15
 8013982:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8013986:	ee3c ca23 	vadd.f32	s24, s24, s7
 801398a:	9b06      	ldr	r3, [sp, #24]
 801398c:	edd3 7a5a 	vldr	s15, [r3, #360]	; 0x168
 8013990:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013998:	f6fd aaaa 	blt.w	8010ef0 <iNemoEngine_API_Update+0x1668>
 801399c:	9b06      	ldr	r3, [sp, #24]
 801399e:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 80139a2:	eef4 8ac7 	vcmpe.f32	s17, s14
 80139a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139aa:	f140 8252 	bpl.w	8013e52 <iNemoEngine_API_Update+0x45ca>
 80139ae:	edd3 3a5b 	vldr	s7, [r3, #364]	; 0x16c
 80139b2:	ed93 4a5d 	vldr	s8, [r3, #372]	; 0x174
 80139b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80139ba:	ee34 4a63 	vsub.f32	s8, s8, s7
 80139be:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80139c2:	ee64 7a27 	vmul.f32	s15, s8, s15
 80139c6:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80139ca:	ee3c ca23 	vadd.f32	s24, s24, s7
 80139ce:	9b06      	ldr	r3, [sp, #24]
 80139d0:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 80139d4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80139d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139dc:	f6fd aaaa 	blt.w	8010f34 <iNemoEngine_API_Update+0x16ac>
 80139e0:	9b06      	ldr	r3, [sp, #24]
 80139e2:	ed93 7a60 	vldr	s14, [r3, #384]	; 0x180
 80139e6:	eef4 8ac7 	vcmpe.f32	s17, s14
 80139ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ee:	f140 8222 	bpl.w	8013e36 <iNemoEngine_API_Update+0x45ae>
 80139f2:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 80139f6:	edd3 4a61 	vldr	s9, [r3, #388]	; 0x184
 80139fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80139fe:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8013a02:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8013a06:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8013a0a:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8013a0e:	ee3c ca04 	vadd.f32	s24, s24, s8
 8013a12:	f7fd bb2a 	b.w	801106a <iNemoEngine_API_Update+0x17e2>
 8013a16:	a94e      	add	r1, sp, #312	; 0x138
 8013a18:	a868      	add	r0, sp, #416	; 0x1a0
 8013a1a:	f7fa fb0b 	bl	800e034 <b_dcm2q>
 8013a1e:	9d06      	ldr	r5, [sp, #24]
 8013a20:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8013a24:	edc5 7a72 	vstr	s15, [r5, #456]	; 0x1c8
 8013a28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013a2c:	edc5 7a73 	vstr	s15, [r5, #460]	; 0x1cc
 8013a30:	4621      	mov	r1, r4
 8013a32:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013a36:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
 8013a3a:	edcd 7a05 	vstr	s15, [sp, #20]
 8013a3e:	f002 fb6f 	bl	8016120 <memset>
 8013a42:	4be5      	ldr	r3, [pc, #916]	; (8013dd8 <iNemoEngine_API_Update+0x4550>)
 8013a44:	702c      	strb	r4, [r5, #0]
 8013a46:	eddd 7a05 	vldr	s15, [sp, #20]
 8013a4a:	edd5 2a02 	vldr	s5, [r5, #8]
 8013a4e:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 8013a52:	9a06      	ldr	r2, [sp, #24]
 8013a54:	f8c5 31d4 	str.w	r3, [r5, #468]	; 0x1d4
 8013a58:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
 8013a5c:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
 8013a60:	f8c5 324c 	str.w	r3, [r5, #588]	; 0x24c
 8013a64:	f8c5 3274 	str.w	r3, [r5, #628]	; 0x274
 8013a68:	f8c5 329c 	str.w	r3, [r5, #668]	; 0x29c
 8013a6c:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
 8013a70:	f8c5 32ec 	str.w	r3, [r5, #748]	; 0x2ec
 8013a74:	f8c5 3314 	str.w	r3, [r5, #788]	; 0x314
 8013a78:	2401      	movs	r4, #1
 8013a7a:	f7fd bb44 	b.w	8011106 <iNemoEngine_API_Update+0x187e>
 8013a7e:	290a      	cmp	r1, #10
 8013a80:	f000 815d 	beq.w	8013d3e <iNemoEngine_API_Update+0x44b6>
 8013a84:	1c4b      	adds	r3, r1, #1
 8013a86:	9906      	ldr	r1, [sp, #24]
 8013a88:	f881 31a0 	strb.w	r3, [r1, #416]	; 0x1a0
 8013a8c:	4613      	mov	r3, r2
 8013a8e:	2200      	movs	r2, #0
 8013a90:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013a94:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8013a98:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8013a9c:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8013aa0:	f7fe b849 	b.w	8011b36 <iNemoEngine_API_Update+0x22ae>
 8013aa4:	ed9d 7a55 	vldr	s14, [sp, #340]	; 0x154
 8013aa8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ab0:	f340 824f 	ble.w	8013f52 <iNemoEngine_API_Update+0x46ca>
 8013ab4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ac0:	f140 8244 	bpl.w	8013f4c <iNemoEngine_API_Update+0x46c4>
 8013ac4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013ac8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ad0:	f140 81f9 	bpl.w	8013ec6 <iNemoEngine_API_Update+0x463e>
 8013ad4:	eddf 7ace 	vldr	s15, [pc, #824]	; 8013e10 <iNemoEngine_API_Update+0x4588>
 8013ad8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ae0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013ae4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8013ae8:	eef0 8a46 	vmov.f32	s17, s12
 8013aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013af0:	eee7 8aa5 	vfma.f32	s17, s15, s11
 8013af4:	f2c0 81fb 	blt.w	8013eee <iNemoEngine_API_Update+0x4666>
 8013af8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b04:	f140 81fb 	bpl.w	8013efe <iNemoEngine_API_Update+0x4676>
 8013b08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b10:	ed9f 6ab2 	vldr	s12, [pc, #712]	; 8013ddc <iNemoEngine_API_Update+0x4554>
 8013b14:	eddf 8ab2 	vldr	s17, [pc, #712]	; 8013de0 <iNemoEngine_API_Update+0x4558>
 8013b18:	eee7 8a86 	vfma.f32	s17, s15, s12
 8013b1c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b28:	f2c0 81fb 	blt.w	8013f22 <iNemoEngine_API_Update+0x469a>
 8013b2c:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8013b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b38:	f140 81fb 	bpl.w	8013f32 <iNemoEngine_API_Update+0x46aa>
 8013b3c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b44:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8013b48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013b4c:	eee7 8a87 	vfma.f32	s17, s15, s14
 8013b50:	9a06      	ldr	r2, [sp, #24]
 8013b52:	2300      	movs	r3, #0
 8013b54:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 8013b58:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 8013b5c:	f7fe bc29 	b.w	80123b2 <iNemoEngine_API_Update+0x2b2a>
 8013b60:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8013de4 <iNemoEngine_API_Update+0x455c>
 8013b64:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b6c:	f57e ad78 	bpl.w	8012660 <iNemoEngine_API_Update+0x2dd8>
 8013b70:	ed9f 6a9d 	vldr	s12, [pc, #628]	; 8013de8 <iNemoEngine_API_Update+0x4560>
 8013b74:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8013e10 <iNemoEngine_API_Update+0x4588>
 8013b78:	eddf 5a9c 	vldr	s11, [pc, #624]	; 8013dec <iNemoEngine_API_Update+0x4564>
 8013b7c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8013b80:	ee26 6a26 	vmul.f32	s12, s12, s13
 8013b84:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8013df0 <iNemoEngine_API_Update+0x4568>
 8013b88:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013b8c:	ed9f 6a99 	vldr	s12, [pc, #612]	; 8013df4 <iNemoEngine_API_Update+0x456c>
 8013b90:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b98:	f6fe ad78 	blt.w	801268c <iNemoEngine_API_Update+0x2e04>
 8013b9c:	eddf 6a96 	vldr	s13, [pc, #600]	; 8013df8 <iNemoEngine_API_Update+0x4570>
 8013ba0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ba8:	f57e ad78 	bpl.w	801269c <iNemoEngine_API_Update+0x2e14>
 8013bac:	ed9f 6a91 	vldr	s12, [pc, #580]	; 8013df4 <iNemoEngine_API_Update+0x456c>
 8013bb0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8013bb4:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8013bb8:	ee26 6a26 	vmul.f32	s12, s12, s13
 8013bbc:	eef3 5a04 	vmov.f32	s11, #52	; 0x41a00000  20.0
 8013bc0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8013bc4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013bc8:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8013e18 <iNemoEngine_API_Update+0x4590>
 8013bcc:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd4:	f6fe ad78 	blt.w	80126c8 <iNemoEngine_API_Update+0x2e40>
 8013bd8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8013bdc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be4:	f57e ad77 	bpl.w	80126d6 <iNemoEngine_API_Update+0x2e4e>
 8013be8:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8013e18 <iNemoEngine_API_Update+0x4590>
 8013bec:	eddf 6a83 	vldr	s13, [pc, #524]	; 8013dfc <iNemoEngine_API_Update+0x4574>
 8013bf0:	eddf 5a83 	vldr	s11, [pc, #524]	; 8013e00 <iNemoEngine_API_Update+0x4578>
 8013bf4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8013bf8:	ee26 6a26 	vmul.f32	s12, s12, s13
 8013bfc:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8013c00:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013c04:	f7fe bd75 	b.w	80126f2 <iNemoEngine_API_Update+0x2e6a>
 8013c08:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8013e04 <iNemoEngine_API_Update+0x457c>
 8013c0c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c14:	f57e ad06 	bpl.w	8012624 <iNemoEngine_API_Update+0x2d9c>
 8013c18:	eddf 6a73 	vldr	s13, [pc, #460]	; 8013de8 <iNemoEngine_API_Update+0x4560>
 8013c1c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c24:	da9c      	bge.n	8013b60 <iNemoEngine_API_Update+0x42d8>
 8013c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c2a:	f7fe bd11 	b.w	8012650 <iNemoEngine_API_Update+0x2dc8>
 8013c2e:	2104      	movs	r1, #4
 8013c30:	f04f 0e03 	mov.w	lr, #3
 8013c34:	2706      	movs	r7, #6
 8013c36:	f04f 0c07 	mov.w	ip, #7
 8013c3a:	4608      	mov	r0, r1
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	2600      	movs	r6, #0
 8013c40:	f7ff bbfa 	b.w	8013438 <iNemoEngine_API_Update+0x3bb0>
 8013c44:	eddf 3a70 	vldr	s7, [pc, #448]	; 8013e08 <iNemoEngine_API_Update+0x4580>
 8013c48:	ed9f 5a70 	vldr	s10, [pc, #448]	; 8013e0c <iNemoEngine_API_Update+0x4584>
 8013c4c:	ac43      	add	r4, sp, #268	; 0x10c
 8013c4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013c52:	edd0 7a7c 	vldr	s15, [r0, #496]	; 0x1f0
 8013c56:	f5a0 73ae 	sub.w	r3, r0, #348	; 0x15c
 8013c5a:	3101      	adds	r1, #1
 8013c5c:	eeb0 7a67 	vmov.f32	s14, s15
 8013c60:	461a      	mov	r2, r3
 8013c62:	edd2 5ad6 	vldr	s11, [r2, #856]	; 0x358
 8013c66:	320c      	adds	r2, #12
 8013c68:	4290      	cmp	r0, r2
 8013c6a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013c6e:	d1f8      	bne.n	8013c62 <iNemoEngine_API_Update+0x43da>
 8013c70:	ee27 7a23 	vmul.f32	s14, s14, s7
 8013c74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013c7c:	edd3 5ad6 	vldr	s11, [r3, #856]	; 0x358
 8013c80:	330c      	adds	r3, #12
 8013c82:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8013c86:	4298      	cmp	r0, r3
 8013c88:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8013c8c:	d1f6      	bne.n	8013c7c <iNemoEngine_API_Update+0x43f4>
 8013c8e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013c92:	2902      	cmp	r1, #2
 8013c94:	f100 0004 	add.w	r0, r0, #4
 8013c98:	ece4 7a01 	vstmia	r4!, {s15}
 8013c9c:	d1d9      	bne.n	8013c52 <iNemoEngine_API_Update+0x43ca>
 8013c9e:	eddd 5a43 	vldr	s11, [sp, #268]	; 0x10c
 8013ca2:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 8013ca6:	ed9d 7a45 	vldr	s14, [sp, #276]	; 0x114
 8013caa:	eeb1 3ae5 	vsqrt.f32	s6, s11
 8013cae:	eef1 3ae7 	vsqrt.f32	s7, s15
 8013cb2:	eeb1 5ac7 	vsqrt.f32	s10, s14
 8013cb6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8013cba:	eef3 5a00 	vmov.f32	s11, #48	; 0x41800000  16.0
 8013cbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013cc2:	ed8d 3a43 	vstr	s6, [sp, #268]	; 0x10c
 8013cc6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cce:	edcd 3a44 	vstr	s7, [sp, #272]	; 0x110
 8013cd2:	ed8d 5a45 	vstr	s10, [sp, #276]	; 0x114
 8013cd6:	f57e abd4 	bpl.w	8012482 <iNemoEngine_API_Update+0x2bfa>
 8013cda:	9906      	ldr	r1, [sp, #24]
 8013cdc:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 8013ce6:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 8013cea:	464b      	mov	r3, r9
 8013cec:	704a      	strb	r2, [r1, #1]
 8013cee:	f7fd bf22 	b.w	8011b36 <iNemoEngine_API_Update+0x22ae>
 8013cf2:	2208      	movs	r2, #8
 8013cf4:	9203      	str	r2, [sp, #12]
 8013cf6:	2205      	movs	r2, #5
 8013cf8:	920e      	str	r2, [sp, #56]	; 0x38
 8013cfa:	2202      	movs	r2, #2
 8013cfc:	f7ff bbb3 	b.w	8013466 <iNemoEngine_API_Update+0x3bde>
 8013d00:	2301      	movs	r3, #1
 8013d02:	f7fd bf04 	b.w	8011b0e <iNemoEngine_API_Update+0x2286>
 8013d06:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8013d0a:	2b27      	cmp	r3, #39	; 0x27
 8013d0c:	d838      	bhi.n	8013d80 <iNemoEngine_API_Update+0x44f8>
 8013d0e:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 8013d12:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 8013d16:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 8013d1a:	9906      	ldr	r1, [sp, #24]
 8013d1c:	f8b1 31a8 	ldrh.w	r3, [r1, #424]	; 0x1a8
 8013d20:	3301      	adds	r3, #1
 8013d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d26:	bf14      	ite	ne
 8013d28:	b29b      	uxthne	r3, r3
 8013d2a:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8013d2e:	2201      	movs	r2, #1
 8013d30:	f8a1 31a8 	strh.w	r3, [r1, #424]	; 0x1a8
 8013d34:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8013d38:	464b      	mov	r3, r9
 8013d3a:	f7fd befc 	b.w	8011b36 <iNemoEngine_API_Update+0x22ae>
 8013d3e:	9906      	ldr	r1, [sp, #24]
 8013d40:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8013d44:	f891 31a3 	ldrb.w	r3, [r1, #419]	; 0x1a3
 8013d48:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 8013d4c:	3301      	adds	r3, #1
 8013d4e:	f881 31a3 	strb.w	r3, [r1, #419]	; 0x1a3
 8013d52:	784b      	ldrb	r3, [r1, #1]
 8013d54:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 8013d58:	f240 1201 	movw	r2, #257	; 0x101
 8013d5c:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 8013d60:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8013d64:	b13b      	cbz	r3, 8013d76 <iNemoEngine_API_Update+0x44ee>
 8013d66:	2300      	movs	r3, #0
 8013d68:	ed81 ea6f 	vstr	s28, [r1, #444]	; 0x1bc
 8013d6c:	edc1 ea70 	vstr	s29, [r1, #448]	; 0x1c0
 8013d70:	edc1 ba71 	vstr	s23, [r1, #452]	; 0x1c4
 8013d74:	704b      	strb	r3, [r1, #1]
 8013d76:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	f7fd bedb 	b.w	8011b36 <iNemoEngine_API_Update+0x22ae>
 8013d80:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 8013d84:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 8013d88:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 8013d8c:	e7c5      	b.n	8013d1a <iNemoEngine_API_Update+0x4492>
 8013d8e:	eef0 7a47 	vmov.f32	s15, s14
 8013d92:	e5bf      	b.n	8013914 <iNemoEngine_API_Update+0x408c>
 8013d94:	eef0 7a47 	vmov.f32	s15, s14
 8013d98:	f7fd b86f 	b.w	8010e7a <iNemoEngine_API_Update+0x15f2>
 8013d9c:	eef0 7a47 	vmov.f32	s15, s14
 8013da0:	e563      	b.n	801386a <iNemoEngine_API_Update+0x3fe2>
 8013da2:	eef0 7a47 	vmov.f32	s15, s14
 8013da6:	f7fd b846 	b.w	8010e36 <iNemoEngine_API_Update+0x15ae>
 8013daa:	eef0 7a47 	vmov.f32	s15, s14
 8013dae:	f7fe b96c 	b.w	801208a <iNemoEngine_API_Update+0x2802>
 8013db2:	eef0 7a47 	vmov.f32	s15, s14
 8013db6:	e4f2      	b.n	801379e <iNemoEngine_API_Update+0x3f16>
 8013db8:	eef0 7a47 	vmov.f32	s15, s14
 8013dbc:	e533      	b.n	8013826 <iNemoEngine_API_Update+0x3f9e>
 8013dbe:	eef0 7a47 	vmov.f32	s15, s14
 8013dc2:	f7fe b9a6 	b.w	8012112 <iNemoEngine_API_Update+0x288a>
 8013dc6:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8013dca:	9315      	str	r3, [sp, #84]	; 0x54
 8013dcc:	f7fc b886 	b.w	800fedc <iNemoEngine_API_Update+0x654>
 8013dd0:	f505 6597 	add.w	r5, r5, #1208	; 0x4b8
 8013dd4:	f7fe be2c 	b.w	8012a30 <iNemoEngine_API_Update+0x31a8>
 8013dd8:	40a00000 	.word	0x40a00000
 8013ddc:	3e999998 	.word	0x3e999998
 8013de0:	3f99999a 	.word	0x3f99999a
 8013de4:	3cf5c28f 	.word	0x3cf5c28f
 8013de8:	3c75c28f 	.word	0x3c75c28f
 8013dec:	42855556 	.word	0x42855556
 8013df0:	3f866666 	.word	0x3f866666
 8013df4:	3d4ccccd 	.word	0x3d4ccccd
 8013df8:	3dcccccd 	.word	0x3dcccccd
 8013dfc:	42200000 	.word	0x42200000
 8013e00:	40555555 	.word	0x40555555
 8013e04:	3c23d70a 	.word	0x3c23d70a
 8013e08:	3d088889 	.word	0x3d088889
 8013e0c:	3d0d3dcb 	.word	0x3d0d3dcb
 8013e10:	3dccccd0 	.word	0x3dccccd0
 8013e14:	3f8ccccd 	.word	0x3f8ccccd
 8013e18:	3e4ccccd 	.word	0x3e4ccccd
 8013e1c:	00000000 	.word	0x00000000
 8013e20:	eef0 7a47 	vmov.f32	s15, s14
 8013e24:	f7fe b997 	b.w	8012156 <iNemoEngine_API_Update+0x28ce>
 8013e28:	eef0 7a47 	vmov.f32	s15, s14
 8013e2c:	f7fe b94f 	b.w	80120ce <iNemoEngine_API_Update+0x2846>
 8013e30:	eef0 7a47 	vmov.f32	s15, s14
 8013e34:	e4d5      	b.n	80137e2 <iNemoEngine_API_Update+0x3f5a>
 8013e36:	eef0 7a47 	vmov.f32	s15, s14
 8013e3a:	f7fd b884 	b.w	8010f46 <iNemoEngine_API_Update+0x16be>
 8013e3e:	eef0 7a47 	vmov.f32	s15, s14
 8013e42:	e5cd      	b.n	80139e0 <iNemoEngine_API_Update+0x4158>
 8013e44:	eef0 7a47 	vmov.f32	s15, s14
 8013e48:	e586      	b.n	8013958 <iNemoEngine_API_Update+0x40d0>
 8013e4a:	eef0 7a47 	vmov.f32	s15, s14
 8013e4e:	f7fd b836 	b.w	8010ebe <iNemoEngine_API_Update+0x1636>
 8013e52:	eef0 7a47 	vmov.f32	s15, s14
 8013e56:	f7fd b854 	b.w	8010f02 <iNemoEngine_API_Update+0x167a>
 8013e5a:	eef0 7a47 	vmov.f32	s15, s14
 8013e5e:	e59d      	b.n	801399c <iNemoEngine_API_Update+0x4114>
 8013e60:	eef0 7a47 	vmov.f32	s15, s14
 8013e64:	f7fe b8ef 	b.w	8012046 <iNemoEngine_API_Update+0x27be>
 8013e68:	9906      	ldr	r1, [sp, #24]
 8013e6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013e6e:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 8013e72:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 8013e76:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 8013e7a:	f7fe ba9a 	b.w	80123b2 <iNemoEngine_API_Update+0x2b2a>
 8013e7e:	9906      	ldr	r1, [sp, #24]
 8013e80:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 8013e84:	3301      	adds	r3, #1
 8013e86:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 8013e8a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8013e8e:	460b      	mov	r3, r1
 8013e90:	f7ff ba49 	b.w	8013326 <iNemoEngine_API_Update+0x3a9e>
 8013e94:	2a00      	cmp	r2, #0
 8013e96:	f73d afa4 	bgt.w	8011de2 <iNemoEngine_API_Update+0x255a>
 8013e9a:	eddd 5a83 	vldr	s11, [sp, #524]	; 0x20c
 8013e9e:	ed9d 7a84 	vldr	s14, [sp, #528]	; 0x210
 8013ea2:	eddd 7a85 	vldr	s15, [sp, #532]	; 0x214
 8013ea6:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8013eaa:	ee65 5a86 	vmul.f32	s11, s11, s12
 8013eae:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013eb2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013eb6:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 8013eba:	ed8d 7a84 	vstr	s14, [sp, #528]	; 0x210
 8013ebe:	edcd 7a85 	vstr	s15, [sp, #532]	; 0x214
 8013ec2:	f7fd bb24 	b.w	801150e <iNemoEngine_API_Update+0x1c86>
 8013ec6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013eca:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed2:	f57f ae11 	bpl.w	8013af8 <iNemoEngine_API_Update+0x4270>
 8013ed6:	ed1f 6a32 	vldr	s12, [pc, #-200]	; 8013e10 <iNemoEngine_API_Update+0x4588>
 8013eda:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 8013e14 <iNemoEngine_API_Update+0x458c>
 8013ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ee2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013ee6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8013eea:	eee7 8a86 	vfma.f32	s17, s15, s12
 8013eee:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013ef2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013efa:	f6ff ae0f 	blt.w	8013b1c <iNemoEngine_API_Update+0x4294>
 8013efe:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f0a:	f57f ae0f 	bpl.w	8013b2c <iNemoEngine_API_Update+0x42a4>
 8013f0e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f16:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013f1a:	eef7 8a08 	vmov.f32	s17, #120	; 0x3fc00000  1.5
 8013f1e:	eee7 8a86 	vfma.f32	s17, s15, s12
 8013f22:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8013f26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f2e:	f6ff ae0f 	blt.w	8013b50 <iNemoEngine_API_Update+0x42c8>
 8013f32:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8013f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f3a:	ed1f 7a49 	vldr	s14, [pc, #-292]	; 8013e18 <iNemoEngine_API_Update+0x4590>
 8013f3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013f42:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
 8013f46:	eee7 8a87 	vfma.f32	s17, s15, s14
 8013f4a:	e601      	b.n	8013b50 <iNemoEngine_API_Update+0x42c8>
 8013f4c:	eef1 8a04 	vmov.f32	s17, #20	; 0x40a00000  5.0
 8013f50:	e5fe      	b.n	8013b50 <iNemoEngine_API_Update+0x42c8>
 8013f52:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013f56:	e5fb      	b.n	8013b50 <iNemoEngine_API_Update+0x42c8>
 8013f58:	ed1f 8a50 	vldr	s16, [pc, #-320]	; 8013e1c <iNemoEngine_API_Update+0x4594>
 8013f5c:	f7fb bdeb 	b.w	800fb36 <iNemoEngine_API_Update+0x2ae>

08013f60 <MotionFX_initialize>:
 8013f60:	4a4c      	ldr	r2, [pc, #304]	; (8014094 <MotionFX_initialize+0x134>)
 8013f62:	6813      	ldr	r3, [r2, #0]
 8013f64:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
 8013f68:	f023 0301 	bic.w	r3, r3, #1
 8013f6c:	b530      	push	{r4, r5, lr}
 8013f6e:	6013      	str	r3, [r2, #0]
 8013f70:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 8013f74:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8013f78:	400b      	ands	r3, r1
 8013f7a:	f24c 2240 	movw	r2, #49728	; 0xc240
 8013f7e:	4293      	cmp	r3, r2
 8013f80:	b085      	sub	sp, #20
 8013f82:	4604      	mov	r4, r0
 8013f84:	d013      	beq.n	8013fae <MotionFX_initialize+0x4e>
 8013f86:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 8013f8a:	f24c 2270 	movw	r2, #49776	; 0xc270
 8013f8e:	4019      	ands	r1, r3
 8013f90:	4291      	cmp	r1, r2
 8013f92:	d00c      	beq.n	8013fae <MotionFX_initialize+0x4e>
 8013f94:	4a40      	ldr	r2, [pc, #256]	; (8014098 <MotionFX_initialize+0x138>)
 8013f96:	2301      	movs	r3, #1
 8013f98:	6093      	str	r3, [r2, #8]
 8013f9a:	6893      	ldr	r3, [r2, #8]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d1fc      	bne.n	8013f9a <MotionFX_initialize+0x3a>
 8013fa0:	4b3e      	ldr	r3, [pc, #248]	; (801409c <MotionFX_initialize+0x13c>)
 8013fa2:	6013      	str	r3, [r2, #0]
 8013fa4:	6812      	ldr	r2, [r2, #0]
 8013fa6:	4b3e      	ldr	r3, [pc, #248]	; (80140a0 <MotionFX_initialize+0x140>)
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	d02c      	beq.n	8014006 <MotionFX_initialize+0xa6>
 8013fac:	e7fe      	b.n	8013fac <MotionFX_initialize+0x4c>
 8013fae:	4b3d      	ldr	r3, [pc, #244]	; (80140a4 <MotionFX_initialize+0x144>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d1ee      	bne.n	8013f94 <MotionFX_initialize+0x34>
 8013fb6:	4a3c      	ldr	r2, [pc, #240]	; (80140a8 <MotionFX_initialize+0x148>)
 8013fb8:	6813      	ldr	r3, [r2, #0]
 8013fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013fbe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8013fc2:	d056      	beq.n	8014072 <MotionFX_initialize+0x112>
 8013fc4:	6813      	ldr	r3, [r2, #0]
 8013fc6:	f240 4183 	movw	r1, #1155	; 0x483
 8013fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013fce:	428b      	cmp	r3, r1
 8013fd0:	d04f      	beq.n	8014072 <MotionFX_initialize+0x112>
 8013fd2:	6813      	ldr	r3, [r2, #0]
 8013fd4:	f240 4285 	movw	r2, #1157	; 0x485
 8013fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013fdc:	4293      	cmp	r3, r2
 8013fde:	d048      	beq.n	8014072 <MotionFX_initialize+0x112>
 8013fe0:	4b32      	ldr	r3, [pc, #200]	; (80140ac <MotionFX_initialize+0x14c>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013fe8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8013fec:	d1d2      	bne.n	8013f94 <MotionFX_initialize+0x34>
 8013fee:	4a30      	ldr	r2, [pc, #192]	; (80140b0 <MotionFX_initialize+0x150>)
 8013ff0:	2301      	movs	r3, #1
 8013ff2:	6093      	str	r3, [r2, #8]
 8013ff4:	6893      	ldr	r3, [r2, #8]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d1fc      	bne.n	8013ff4 <MotionFX_initialize+0x94>
 8013ffa:	4b28      	ldr	r3, [pc, #160]	; (801409c <MotionFX_initialize+0x13c>)
 8013ffc:	6013      	str	r3, [r2, #0]
 8013ffe:	6812      	ldr	r2, [r2, #0]
 8014000:	4b27      	ldr	r3, [pc, #156]	; (80140a0 <MotionFX_initialize+0x140>)
 8014002:	429a      	cmp	r2, r3
 8014004:	d1d2      	bne.n	8013fac <MotionFX_initialize+0x4c>
 8014006:	4b2b      	ldr	r3, [pc, #172]	; (80140b4 <MotionFX_initialize+0x154>)
 8014008:	4a2b      	ldr	r2, [pc, #172]	; (80140b8 <MotionFX_initialize+0x158>)
 801400a:	9303      	str	r3, [sp, #12]
 801400c:	2501      	movs	r5, #1
 801400e:	4620      	mov	r0, r4
 8014010:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8014014:	f882 53c4 	strb.w	r5, [r2, #964]	; 0x3c4
 8014018:	f7fb f946 	bl	800f2a8 <MFX_emptyAttitude>
 801401c:	a901      	add	r1, sp, #4
 801401e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014022:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014026:	f7f9 ff03 	bl	800de30 <updateOrientation>
 801402a:	a903      	add	r1, sp, #12
 801402c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014030:	f7f9 fefe 	bl	800de30 <updateOrientation>
 8014034:	a902      	add	r1, sp, #8
 8014036:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801403a:	f7f9 fef9 	bl	800de30 <updateOrientation>
 801403e:	4b1f      	ldr	r3, [pc, #124]	; (80140bc <MotionFX_initialize+0x15c>)
 8014040:	491f      	ldr	r1, [pc, #124]	; (80140c0 <MotionFX_initialize+0x160>)
 8014042:	6363      	str	r3, [r4, #52]	; 0x34
 8014044:	4b1f      	ldr	r3, [pc, #124]	; (80140c4 <MotionFX_initialize+0x164>)
 8014046:	4a20      	ldr	r2, [pc, #128]	; (80140c8 <MotionFX_initialize+0x168>)
 8014048:	62a1      	str	r1, [r4, #40]	; 0x28
 801404a:	61e3      	str	r3, [r4, #28]
 801404c:	491f      	ldr	r1, [pc, #124]	; (80140cc <MotionFX_initialize+0x16c>)
 801404e:	61a2      	str	r2, [r4, #24]
 8014050:	2300      	movs	r3, #0
 8014052:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8014056:	f44f 7281 	mov.w	r2, #258	; 0x102
 801405a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801405e:	f240 1301 	movw	r3, #257	; 0x101
 8014062:	62e0      	str	r0, [r4, #44]	; 0x2c
 8014064:	6221      	str	r1, [r4, #32]
 8014066:	80a2      	strh	r2, [r4, #4]
 8014068:	f8a4 300d 	strh.w	r3, [r4, #13]
 801406c:	73e5      	strb	r5, [r4, #15]
 801406e:	b005      	add	sp, #20
 8014070:	bd30      	pop	{r4, r5, pc}
 8014072:	4a17      	ldr	r2, [pc, #92]	; (80140d0 <MotionFX_initialize+0x170>)
 8014074:	2301      	movs	r3, #1
 8014076:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801407a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801407e:	2b00      	cmp	r3, #0
 8014080:	d1fb      	bne.n	801407a <MotionFX_initialize+0x11a>
 8014082:	4b06      	ldr	r3, [pc, #24]	; (801409c <MotionFX_initialize+0x13c>)
 8014084:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8014088:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801408c:	4b04      	ldr	r3, [pc, #16]	; (80140a0 <MotionFX_initialize+0x140>)
 801408e:	429a      	cmp	r2, r3
 8014090:	d0b9      	beq.n	8014006 <MotionFX_initialize+0xa6>
 8014092:	e78b      	b.n	8013fac <MotionFX_initialize+0x4c>
 8014094:	e0002000 	.word	0xe0002000
 8014098:	40023000 	.word	0x40023000
 801409c:	f407a5c2 	.word	0xf407a5c2
 80140a0:	b5e8b5cd 	.word	0xb5e8b5cd
 80140a4:	e0042000 	.word	0xe0042000
 80140a8:	5c001000 	.word	0x5c001000
 80140ac:	50081000 	.word	0x50081000
 80140b0:	4c004000 	.word	0x4c004000
 80140b4:	00756e65 	.word	0x00756e65
 80140b8:	2000021c 	.word	0x2000021c
 80140bc:	3f2ac083 	.word	0x3f2ac083
 80140c0:	3f666666 	.word	0x3f666666
 80140c4:	3a378034 	.word	0x3a378034
 80140c8:	3a51b717 	.word	0x3a51b717
 80140cc:	3b378034 	.word	0x3b378034
 80140d0:	58024000 	.word	0x58024000

080140d4 <MotionFX_setKnobs>:
 80140d4:	4b24      	ldr	r3, [pc, #144]	; (8014168 <MotionFX_setKnobs+0x94>)
 80140d6:	f893 23c4 	ldrb.w	r2, [r3, #964]	; 0x3c4
 80140da:	b902      	cbnz	r2, 80140de <MotionFX_setKnobs+0xa>
 80140dc:	4770      	bx	lr
 80140de:	460b      	mov	r3, r1
 80140e0:	2900      	cmp	r1, #0
 80140e2:	d0fb      	beq.n	80140dc <MotionFX_setKnobs+0x8>
 80140e4:	b510      	push	{r4, lr}
 80140e6:	4604      	mov	r4, r0
 80140e8:	689a      	ldr	r2, [r3, #8]
 80140ea:	6808      	ldr	r0, [r1, #0]
 80140ec:	6849      	ldr	r1, [r1, #4]
 80140ee:	62e1      	str	r1, [r4, #44]	; 0x2c
 80140f0:	62a0      	str	r0, [r4, #40]	; 0x28
 80140f2:	6362      	str	r2, [r4, #52]	; 0x34
 80140f4:	7b1a      	ldrb	r2, [r3, #12]
 80140f6:	7162      	strb	r2, [r4, #5]
 80140f8:	6918      	ldr	r0, [r3, #16]
 80140fa:	6959      	ldr	r1, [r3, #20]
 80140fc:	699a      	ldr	r2, [r3, #24]
 80140fe:	6222      	str	r2, [r4, #32]
 8014100:	61a0      	str	r0, [r4, #24]
 8014102:	61e1      	str	r1, [r4, #28]
 8014104:	7f1a      	ldrb	r2, [r3, #28]
 8014106:	7122      	strb	r2, [r4, #4]
 8014108:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801410c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 8014110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014112:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8014116:	b084      	sub	sp, #16
 8014118:	f8b3 101d 	ldrh.w	r1, [r3, #29]
 801411c:	7fda      	ldrb	r2, [r3, #31]
 801411e:	f88d 2006 	strb.w	r2, [sp, #6]
 8014122:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014126:	f8b3 2021 	ldrh.w	r2, [r3, #33]	; 0x21
 801412a:	f8ad 2008 	strh.w	r2, [sp, #8]
 801412e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8014132:	f88d 200a 	strb.w	r2, [sp, #10]
 8014136:	f8b3 2025 	ldrh.w	r2, [r3, #37]	; 0x25
 801413a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801413e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8014142:	f88d 300e 	strb.w	r3, [sp, #14]
 8014146:	a901      	add	r1, sp, #4
 8014148:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 801414c:	f7f9 fe70 	bl	800de30 <updateOrientation>
 8014150:	a903      	add	r1, sp, #12
 8014152:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014156:	f7f9 fe6b 	bl	800de30 <updateOrientation>
 801415a:	a902      	add	r1, sp, #8
 801415c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014160:	f7f9 fe66 	bl	800de30 <updateOrientation>
 8014164:	b004      	add	sp, #16
 8014166:	bd10      	pop	{r4, pc}
 8014168:	2000021c 	.word	0x2000021c

0801416c <MotionFX_getKnobs>:
 801416c:	4b1d      	ldr	r3, [pc, #116]	; (80141e4 <MotionFX_getKnobs+0x78>)
 801416e:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8014172:	b903      	cbnz	r3, 8014176 <MotionFX_getKnobs+0xa>
 8014174:	4770      	bx	lr
 8014176:	460a      	mov	r2, r1
 8014178:	2900      	cmp	r1, #0
 801417a:	d0fb      	beq.n	8014174 <MotionFX_getKnobs+0x8>
 801417c:	b510      	push	{r4, lr}
 801417e:	4604      	mov	r4, r0
 8014180:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014182:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014186:	6093      	str	r3, [r2, #8]
 8014188:	6010      	str	r0, [r2, #0]
 801418a:	6051      	str	r1, [r2, #4]
 801418c:	7963      	ldrb	r3, [r4, #5]
 801418e:	7313      	strb	r3, [r2, #12]
 8014190:	69a0      	ldr	r0, [r4, #24]
 8014192:	69e1      	ldr	r1, [r4, #28]
 8014194:	6a23      	ldr	r3, [r4, #32]
 8014196:	6193      	str	r3, [r2, #24]
 8014198:	6110      	str	r0, [r2, #16]
 801419a:	6151      	str	r1, [r2, #20]
 801419c:	7923      	ldrb	r3, [r4, #4]
 801419e:	7713      	strb	r3, [r2, #28]
 80141a0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80141a4:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 80141a8:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 80141ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 80141ae:	f102 011d 	add.w	r1, r2, #29
 80141b2:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80141b6:	f7f9 fc93 	bl	800dae0 <findAxis>
 80141ba:	f102 0121 	add.w	r1, r2, #33	; 0x21
 80141be:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80141c2:	f7f9 fc8d 	bl	800dae0 <findAxis>
 80141c6:	f102 0125 	add.w	r1, r2, #37	; 0x25
 80141ca:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80141ce:	f7f9 fc87 	bl	800dae0 <findAxis>
 80141d2:	2300      	movs	r3, #0
 80141d4:	f882 3020 	strb.w	r3, [r2, #32]
 80141d8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80141dc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80141e0:	bd10      	pop	{r4, pc}
 80141e2:	bf00      	nop
 80141e4:	2000021c 	.word	0x2000021c

080141e8 <MotionFX_enable_6X>:
 80141e8:	4b0e      	ldr	r3, [pc, #56]	; (8014224 <MotionFX_enable_6X+0x3c>)
 80141ea:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80141ee:	b903      	cbnz	r3, 80141f2 <MotionFX_enable_6X+0xa>
 80141f0:	4770      	bx	lr
 80141f2:	2900      	cmp	r1, #0
 80141f4:	d0fc      	beq.n	80141f0 <MotionFX_enable_6X+0x8>
 80141f6:	b530      	push	{r4, r5, lr}
 80141f8:	1d05      	adds	r5, r0, #4
 80141fa:	b099      	sub	sp, #100	; 0x64
 80141fc:	4604      	mov	r4, r0
 80141fe:	4629      	mov	r1, r5
 8014200:	225c      	movs	r2, #92	; 0x5c
 8014202:	a801      	add	r0, sp, #4
 8014204:	f001 ffc4 	bl	8016190 <memcpy>
 8014208:	4620      	mov	r0, r4
 801420a:	f7fb f84d 	bl	800f2a8 <MFX_emptyAttitude>
 801420e:	225c      	movs	r2, #92	; 0x5c
 8014210:	a901      	add	r1, sp, #4
 8014212:	4628      	mov	r0, r5
 8014214:	f001 ffbc 	bl	8016190 <memcpy>
 8014218:	2300      	movs	r3, #0
 801421a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801421e:	7363      	strb	r3, [r4, #13]
 8014220:	b019      	add	sp, #100	; 0x64
 8014222:	bd30      	pop	{r4, r5, pc}
 8014224:	2000021c 	.word	0x2000021c

08014228 <MotionFX_enable_9X>:
 8014228:	4b0e      	ldr	r3, [pc, #56]	; (8014264 <MotionFX_enable_9X+0x3c>)
 801422a:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 801422e:	b903      	cbnz	r3, 8014232 <MotionFX_enable_9X+0xa>
 8014230:	4770      	bx	lr
 8014232:	2900      	cmp	r1, #0
 8014234:	d0fc      	beq.n	8014230 <MotionFX_enable_9X+0x8>
 8014236:	b530      	push	{r4, r5, lr}
 8014238:	1d05      	adds	r5, r0, #4
 801423a:	b099      	sub	sp, #100	; 0x64
 801423c:	4604      	mov	r4, r0
 801423e:	4629      	mov	r1, r5
 8014240:	225c      	movs	r2, #92	; 0x5c
 8014242:	a801      	add	r0, sp, #4
 8014244:	f001 ffa4 	bl	8016190 <memcpy>
 8014248:	4620      	mov	r0, r4
 801424a:	f7fb f82d 	bl	800f2a8 <MFX_emptyAttitude>
 801424e:	225c      	movs	r2, #92	; 0x5c
 8014250:	a901      	add	r1, sp, #4
 8014252:	4628      	mov	r0, r5
 8014254:	f001 ff9c 	bl	8016190 <memcpy>
 8014258:	2301      	movs	r3, #1
 801425a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801425e:	7363      	strb	r3, [r4, #13]
 8014260:	b019      	add	sp, #100	; 0x64
 8014262:	bd30      	pop	{r4, r5, pc}
 8014264:	2000021c 	.word	0x2000021c

08014268 <MotionFX_update>:
 8014268:	b430      	push	{r4, r5}
 801426a:	4c06      	ldr	r4, [pc, #24]	; (8014284 <MotionFX_update+0x1c>)
 801426c:	9d02      	ldr	r5, [sp, #8]
 801426e:	f894 43c4 	ldrb.w	r4, [r4, #964]	; 0x3c4
 8014272:	b90c      	cbnz	r4, 8014278 <MotionFX_update+0x10>
 8014274:	bc30      	pop	{r4, r5}
 8014276:	4770      	bx	lr
 8014278:	ed93 0a00 	vldr	s0, [r3]
 801427c:	462b      	mov	r3, r5
 801427e:	bc30      	pop	{r4, r5}
 8014280:	f7fb bb02 	b.w	800f888 <iNemoEngine_API_Update>
 8014284:	2000021c 	.word	0x2000021c

08014288 <MotionFX_propagate>:
 8014288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801428c:	ed2d 8b06 	vpush	{d8-d10}
 8014290:	4ca2      	ldr	r4, [pc, #648]	; (801451c <MotionFX_propagate+0x294>)
 8014292:	f894 63c4 	ldrb.w	r6, [r4, #964]	; 0x3c4
 8014296:	b0a1      	sub	sp, #132	; 0x84
 8014298:	b926      	cbnz	r6, 80142a4 <MotionFX_propagate+0x1c>
 801429a:	b021      	add	sp, #132	; 0x84
 801429c:	ecbd 8b06 	vpop	{d8-d10}
 80142a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142a4:	4694      	mov	ip, r2
 80142a6:	4604      	mov	r4, r0
 80142a8:	460d      	mov	r5, r1
 80142aa:	68d0      	ldr	r0, [r2, #12]
 80142ac:	6911      	ldr	r1, [r2, #16]
 80142ae:	6952      	ldr	r2, [r2, #20]
 80142b0:	edd3 9a00 	vldr	s19, [r3]
 80142b4:	ab13      	add	r3, sp, #76	; 0x4c
 80142b6:	c307      	stmia	r3!, {r0, r1, r2}
 80142b8:	f8dc 0000 	ldr.w	r0, [ip]
 80142bc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80142c0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80142c4:	ab10      	add	r3, sp, #64	; 0x40
 80142c6:	c307      	stmia	r3!, {r0, r1, r2}
 80142c8:	f8dc 0018 	ldr.w	r0, [ip, #24]
 80142cc:	f8dc 101c 	ldr.w	r1, [ip, #28]
 80142d0:	f8dc 2020 	ldr.w	r2, [ip, #32]
 80142d4:	ab16      	add	r3, sp, #88	; 0x58
 80142d6:	f104 073a 	add.w	r7, r4, #58	; 0x3a
 80142da:	c307      	stmia	r3!, {r0, r1, r2}
 80142dc:	4639      	mov	r1, r7
 80142de:	a803      	add	r0, sp, #12
 80142e0:	aa13      	add	r2, sp, #76	; 0x4c
 80142e2:	f7f9 fb9b 	bl	800da1c <rotVect>
 80142e6:	aa16      	add	r2, sp, #88	; 0x58
 80142e8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 80142ec:	a806      	add	r0, sp, #24
 80142ee:	f7f9 fb95 	bl	800da1c <rotVect>
 80142f2:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 80142f6:	2b09      	cmp	r3, #9
 80142f8:	d829      	bhi.n	801434e <MotionFX_propagate+0xc6>
 80142fa:	eddd 8a04 	vldr	s17, [sp, #16]
 80142fe:	ed9d 9a03 	vldr	s18, [sp, #12]
 8014302:	ed9d 8a05 	vldr	s16, [sp, #20]
 8014306:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801430a:	eee9 7a09 	vfma.f32	s15, s18, s18
 801430e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014312:	ee17 0a90 	vmov	r0, s15
 8014316:	f7ec f917 	bl	8000548 <__aeabi_f2d>
 801431a:	ec41 0b10 	vmov	d0, r0, r1
 801431e:	f005 f855 	bl	80193cc <sqrt>
 8014322:	ec51 0b10 	vmov	r0, r1, d0
 8014326:	f7ec fc5f 	bl	8000be8 <__aeabi_d2f>
 801432a:	ee07 0a90 	vmov	s15, r0
 801432e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014332:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8014336:	ee29 9a27 	vmul.f32	s18, s18, s15
 801433a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801433e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014342:	ed8d 9a03 	vstr	s18, [sp, #12]
 8014346:	edcd 8a04 	vstr	s17, [sp, #16]
 801434a:	ed8d 8a05 	vstr	s16, [sp, #20]
 801434e:	7923      	ldrb	r3, [r4, #4]
 8014350:	2b00      	cmp	r3, #0
 8014352:	f000 80ce 	beq.w	80144f2 <MotionFX_propagate+0x26a>
 8014356:	ee07 3a90 	vmov	s15, r3
 801435a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801435e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014366:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 801436a:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 801436e:	edd3 7a00 	vldr	s15, [r3]
 8014372:	eddd 8a06 	vldr	s17, [sp, #24]
 8014376:	ed9d 6a07 	vldr	s12, [sp, #28]
 801437a:	eddd 6a08 	vldr	s13, [sp, #32]
 801437e:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8014520 <MotionFX_propagate+0x298>
 8014382:	eddf 5a68 	vldr	s11, [pc, #416]	; 8014524 <MotionFX_propagate+0x29c>
 8014386:	eee7 7a28 	vfma.f32	s15, s14, s17
 801438a:	ee26 9a08 	vmul.f32	s18, s12, s16
 801438e:	edc3 7a00 	vstr	s15, [r3]
 8014392:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8014396:	edd3 7a00 	vldr	s15, [r3]
 801439a:	ed8d 9a07 	vstr	s18, [sp, #28]
 801439e:	eee7 7a06 	vfma.f32	s15, s14, s12
 80143a2:	ee68 8a88 	vmul.f32	s17, s17, s16
 80143a6:	edc3 7a00 	vstr	s15, [r3]
 80143aa:	f604 1364 	addw	r3, r4, #2404	; 0x964
 80143ae:	edd3 7a00 	vldr	s15, [r3]
 80143b2:	edcd 8a06 	vstr	s17, [sp, #24]
 80143b6:	eee7 7a26 	vfma.f32	s15, s14, s13
 80143ba:	ee26 8a88 	vmul.f32	s16, s13, s16
 80143be:	edc3 7a00 	vstr	s15, [r3]
 80143c2:	f604 1344 	addw	r3, r4, #2372	; 0x944
 80143c6:	edd3 7a00 	vldr	s15, [r3]
 80143ca:	ed8d 8a08 	vstr	s16, [sp, #32]
 80143ce:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 80143d2:	ed93 7a00 	vldr	s14, [r3]
 80143d6:	ee39 9a67 	vsub.f32	s18, s18, s15
 80143da:	ee78 8ac7 	vsub.f32	s17, s17, s14
 80143de:	ee69 7a09 	vmul.f32	s15, s18, s18
 80143e2:	f604 1348 	addw	r3, r4, #2376	; 0x948
 80143e6:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80143ea:	ed93 7a00 	vldr	s14, [r3]
 80143ee:	ee38 8a47 	vsub.f32	s16, s16, s14
 80143f2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80143f6:	eee8 7a08 	vfma.f32	s15, s16, s16
 80143fa:	ee29 0a80 	vmul.f32	s0, s19, s0
 80143fe:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014406:	dd79      	ble.n	80144fc <MotionFX_propagate+0x274>
 8014408:	eeb1 aae7 	vsqrt.f32	s20, s15
 801440c:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8014410:	eeb0 0a69 	vmov.f32	s0, s19
 8014414:	f005 f9b0 	bl	8019778 <sinf>
 8014418:	eeb0 7a40 	vmov.f32	s14, s0
 801441c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8014420:	eeb0 0a69 	vmov.f32	s0, s19
 8014424:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014428:	ee29 9a27 	vmul.f32	s18, s18, s15
 801442c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014430:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8014434:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8014438:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 801443c:	f004 ff82 	bl	8019344 <cosf>
 8014440:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8014444:	a809      	add	r0, sp, #36	; 0x24
 8014446:	f604 1838 	addw	r8, r4, #2360	; 0x938
 801444a:	4632      	mov	r2, r6
 801444c:	4631      	mov	r1, r6
 801444e:	f7f9 fd71 	bl	800df34 <qmult>
 8014452:	edd8 6a00 	vldr	s13, [r8]
 8014456:	edd6 5a00 	vldr	s11, [r6]
 801445a:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 801445e:	f604 1934 	addw	r9, r4, #2356	; 0x934
 8014462:	ed99 6a00 	vldr	s12, [r9]
 8014466:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801446a:	4639      	mov	r1, r7
 801446c:	eee6 7a06 	vfma.f32	s15, s12, s12
 8014470:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 8014474:	3301      	adds	r3, #1
 8014476:	ed97 7a00 	vldr	s14, [r7]
 801447a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801447e:	aa13      	add	r2, sp, #76	; 0x4c
 8014480:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8014484:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8014488:	eeb1 5ae7 	vsqrt.f32	s10, s15
 801448c:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8014490:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014494:	ee27 6a86 	vmul.f32	s12, s15, s12
 8014498:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801449c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80144a0:	edc6 5a00 	vstr	s11, [r6]
 80144a4:	ed89 6a00 	vstr	s12, [r9]
 80144a8:	edc8 6a00 	vstr	s13, [r8]
 80144ac:	ed87 7a00 	vstr	s14, [r7]
 80144b0:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 80144b4:	f7f9 fab2 	bl	800da1c <rotVect>
 80144b8:	6833      	ldr	r3, [r6, #0]
 80144ba:	60eb      	str	r3, [r5, #12]
 80144bc:	f8d9 3000 	ldr.w	r3, [r9]
 80144c0:	f8d8 2000 	ldr.w	r2, [r8]
 80144c4:	612b      	str	r3, [r5, #16]
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	61ab      	str	r3, [r5, #24]
 80144ca:	616a      	str	r2, [r5, #20]
 80144cc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80144d0:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80144d4:	e9cd 3200 	strd	r3, r2, [sp]
 80144d8:	4601      	mov	r1, r0
 80144da:	f105 031c 	add.w	r3, r5, #28
 80144de:	462a      	mov	r2, r5
 80144e0:	f105 000c 	add.w	r0, r5, #12
 80144e4:	f7fa fe16 	bl	800f114 <output_update>
 80144e8:	b021      	add	sp, #132	; 0x84
 80144ea:	ecbd 8b06 	vpop	{d8-d10}
 80144ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144f2:	2301      	movs	r3, #1
 80144f4:	7123      	strb	r3, [r4, #4]
 80144f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80144fa:	e734      	b.n	8014366 <MotionFX_propagate+0xde>
 80144fc:	ee68 8a80 	vmul.f32	s17, s17, s0
 8014500:	ee29 9a00 	vmul.f32	s18, s18, s0
 8014504:	ee28 8a00 	vmul.f32	s16, s16, s0
 8014508:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801450c:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8014510:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8014514:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8014518:	930c      	str	r3, [sp, #48]	; 0x30
 801451a:	e793      	b.n	8014444 <MotionFX_propagate+0x1bc>
 801451c:	2000021c 	.word	0x2000021c
 8014520:	3c8efa35 	.word	0x3c8efa35
 8014524:	38d1b718 	.word	0x38d1b718

08014528 <atoi>:
 8014528:	220a      	movs	r2, #10
 801452a:	2100      	movs	r1, #0
 801452c:	f001 bdbe 	b.w	80160ac <strtol>

08014530 <__cvt>:
 8014530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014534:	ec55 4b10 	vmov	r4, r5, d0
 8014538:	2d00      	cmp	r5, #0
 801453a:	460e      	mov	r6, r1
 801453c:	4619      	mov	r1, r3
 801453e:	462b      	mov	r3, r5
 8014540:	bfbb      	ittet	lt
 8014542:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014546:	461d      	movlt	r5, r3
 8014548:	2300      	movge	r3, #0
 801454a:	232d      	movlt	r3, #45	; 0x2d
 801454c:	700b      	strb	r3, [r1, #0]
 801454e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014550:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014554:	4691      	mov	r9, r2
 8014556:	f023 0820 	bic.w	r8, r3, #32
 801455a:	bfbc      	itt	lt
 801455c:	4622      	movlt	r2, r4
 801455e:	4614      	movlt	r4, r2
 8014560:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014564:	d005      	beq.n	8014572 <__cvt+0x42>
 8014566:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801456a:	d100      	bne.n	801456e <__cvt+0x3e>
 801456c:	3601      	adds	r6, #1
 801456e:	2102      	movs	r1, #2
 8014570:	e000      	b.n	8014574 <__cvt+0x44>
 8014572:	2103      	movs	r1, #3
 8014574:	ab03      	add	r3, sp, #12
 8014576:	9301      	str	r3, [sp, #4]
 8014578:	ab02      	add	r3, sp, #8
 801457a:	9300      	str	r3, [sp, #0]
 801457c:	ec45 4b10 	vmov	d0, r4, r5
 8014580:	4653      	mov	r3, sl
 8014582:	4632      	mov	r2, r6
 8014584:	f001 feac 	bl	80162e0 <_dtoa_r>
 8014588:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801458c:	4607      	mov	r7, r0
 801458e:	d102      	bne.n	8014596 <__cvt+0x66>
 8014590:	f019 0f01 	tst.w	r9, #1
 8014594:	d022      	beq.n	80145dc <__cvt+0xac>
 8014596:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801459a:	eb07 0906 	add.w	r9, r7, r6
 801459e:	d110      	bne.n	80145c2 <__cvt+0x92>
 80145a0:	783b      	ldrb	r3, [r7, #0]
 80145a2:	2b30      	cmp	r3, #48	; 0x30
 80145a4:	d10a      	bne.n	80145bc <__cvt+0x8c>
 80145a6:	2200      	movs	r2, #0
 80145a8:	2300      	movs	r3, #0
 80145aa:	4620      	mov	r0, r4
 80145ac:	4629      	mov	r1, r5
 80145ae:	f7ec fa8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80145b2:	b918      	cbnz	r0, 80145bc <__cvt+0x8c>
 80145b4:	f1c6 0601 	rsb	r6, r6, #1
 80145b8:	f8ca 6000 	str.w	r6, [sl]
 80145bc:	f8da 3000 	ldr.w	r3, [sl]
 80145c0:	4499      	add	r9, r3
 80145c2:	2200      	movs	r2, #0
 80145c4:	2300      	movs	r3, #0
 80145c6:	4620      	mov	r0, r4
 80145c8:	4629      	mov	r1, r5
 80145ca:	f7ec fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80145ce:	b108      	cbz	r0, 80145d4 <__cvt+0xa4>
 80145d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80145d4:	2230      	movs	r2, #48	; 0x30
 80145d6:	9b03      	ldr	r3, [sp, #12]
 80145d8:	454b      	cmp	r3, r9
 80145da:	d307      	bcc.n	80145ec <__cvt+0xbc>
 80145dc:	9b03      	ldr	r3, [sp, #12]
 80145de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80145e0:	1bdb      	subs	r3, r3, r7
 80145e2:	4638      	mov	r0, r7
 80145e4:	6013      	str	r3, [r2, #0]
 80145e6:	b004      	add	sp, #16
 80145e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145ec:	1c59      	adds	r1, r3, #1
 80145ee:	9103      	str	r1, [sp, #12]
 80145f0:	701a      	strb	r2, [r3, #0]
 80145f2:	e7f0      	b.n	80145d6 <__cvt+0xa6>

080145f4 <__exponent>:
 80145f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80145f6:	4603      	mov	r3, r0
 80145f8:	2900      	cmp	r1, #0
 80145fa:	bfb8      	it	lt
 80145fc:	4249      	neglt	r1, r1
 80145fe:	f803 2b02 	strb.w	r2, [r3], #2
 8014602:	bfb4      	ite	lt
 8014604:	222d      	movlt	r2, #45	; 0x2d
 8014606:	222b      	movge	r2, #43	; 0x2b
 8014608:	2909      	cmp	r1, #9
 801460a:	7042      	strb	r2, [r0, #1]
 801460c:	dd2a      	ble.n	8014664 <__exponent+0x70>
 801460e:	f10d 0207 	add.w	r2, sp, #7
 8014612:	4617      	mov	r7, r2
 8014614:	260a      	movs	r6, #10
 8014616:	4694      	mov	ip, r2
 8014618:	fb91 f5f6 	sdiv	r5, r1, r6
 801461c:	fb06 1415 	mls	r4, r6, r5, r1
 8014620:	3430      	adds	r4, #48	; 0x30
 8014622:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8014626:	460c      	mov	r4, r1
 8014628:	2c63      	cmp	r4, #99	; 0x63
 801462a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801462e:	4629      	mov	r1, r5
 8014630:	dcf1      	bgt.n	8014616 <__exponent+0x22>
 8014632:	3130      	adds	r1, #48	; 0x30
 8014634:	f1ac 0402 	sub.w	r4, ip, #2
 8014638:	f802 1c01 	strb.w	r1, [r2, #-1]
 801463c:	1c41      	adds	r1, r0, #1
 801463e:	4622      	mov	r2, r4
 8014640:	42ba      	cmp	r2, r7
 8014642:	d30a      	bcc.n	801465a <__exponent+0x66>
 8014644:	f10d 0209 	add.w	r2, sp, #9
 8014648:	eba2 020c 	sub.w	r2, r2, ip
 801464c:	42bc      	cmp	r4, r7
 801464e:	bf88      	it	hi
 8014650:	2200      	movhi	r2, #0
 8014652:	4413      	add	r3, r2
 8014654:	1a18      	subs	r0, r3, r0
 8014656:	b003      	add	sp, #12
 8014658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801465a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801465e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8014662:	e7ed      	b.n	8014640 <__exponent+0x4c>
 8014664:	2330      	movs	r3, #48	; 0x30
 8014666:	3130      	adds	r1, #48	; 0x30
 8014668:	7083      	strb	r3, [r0, #2]
 801466a:	70c1      	strb	r1, [r0, #3]
 801466c:	1d03      	adds	r3, r0, #4
 801466e:	e7f1      	b.n	8014654 <__exponent+0x60>

08014670 <_printf_float>:
 8014670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014674:	ed2d 8b02 	vpush	{d8}
 8014678:	b08d      	sub	sp, #52	; 0x34
 801467a:	460c      	mov	r4, r1
 801467c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014680:	4616      	mov	r6, r2
 8014682:	461f      	mov	r7, r3
 8014684:	4605      	mov	r5, r0
 8014686:	f001 fd53 	bl	8016130 <_localeconv_r>
 801468a:	f8d0 a000 	ldr.w	sl, [r0]
 801468e:	4650      	mov	r0, sl
 8014690:	f7eb fdee 	bl	8000270 <strlen>
 8014694:	2300      	movs	r3, #0
 8014696:	930a      	str	r3, [sp, #40]	; 0x28
 8014698:	6823      	ldr	r3, [r4, #0]
 801469a:	9305      	str	r3, [sp, #20]
 801469c:	f8d8 3000 	ldr.w	r3, [r8]
 80146a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80146a4:	3307      	adds	r3, #7
 80146a6:	f023 0307 	bic.w	r3, r3, #7
 80146aa:	f103 0208 	add.w	r2, r3, #8
 80146ae:	f8c8 2000 	str.w	r2, [r8]
 80146b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80146b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80146ba:	9307      	str	r3, [sp, #28]
 80146bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80146c0:	ee08 0a10 	vmov	s16, r0
 80146c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80146c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80146cc:	4b9e      	ldr	r3, [pc, #632]	; (8014948 <_printf_float+0x2d8>)
 80146ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80146d2:	f7ec fa2b 	bl	8000b2c <__aeabi_dcmpun>
 80146d6:	bb88      	cbnz	r0, 801473c <_printf_float+0xcc>
 80146d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80146dc:	4b9a      	ldr	r3, [pc, #616]	; (8014948 <_printf_float+0x2d8>)
 80146de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80146e2:	f7ec fa05 	bl	8000af0 <__aeabi_dcmple>
 80146e6:	bb48      	cbnz	r0, 801473c <_printf_float+0xcc>
 80146e8:	2200      	movs	r2, #0
 80146ea:	2300      	movs	r3, #0
 80146ec:	4640      	mov	r0, r8
 80146ee:	4649      	mov	r1, r9
 80146f0:	f7ec f9f4 	bl	8000adc <__aeabi_dcmplt>
 80146f4:	b110      	cbz	r0, 80146fc <_printf_float+0x8c>
 80146f6:	232d      	movs	r3, #45	; 0x2d
 80146f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80146fc:	4a93      	ldr	r2, [pc, #588]	; (801494c <_printf_float+0x2dc>)
 80146fe:	4b94      	ldr	r3, [pc, #592]	; (8014950 <_printf_float+0x2e0>)
 8014700:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014704:	bf94      	ite	ls
 8014706:	4690      	movls	r8, r2
 8014708:	4698      	movhi	r8, r3
 801470a:	2303      	movs	r3, #3
 801470c:	6123      	str	r3, [r4, #16]
 801470e:	9b05      	ldr	r3, [sp, #20]
 8014710:	f023 0304 	bic.w	r3, r3, #4
 8014714:	6023      	str	r3, [r4, #0]
 8014716:	f04f 0900 	mov.w	r9, #0
 801471a:	9700      	str	r7, [sp, #0]
 801471c:	4633      	mov	r3, r6
 801471e:	aa0b      	add	r2, sp, #44	; 0x2c
 8014720:	4621      	mov	r1, r4
 8014722:	4628      	mov	r0, r5
 8014724:	f000 f9da 	bl	8014adc <_printf_common>
 8014728:	3001      	adds	r0, #1
 801472a:	f040 8090 	bne.w	801484e <_printf_float+0x1de>
 801472e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014732:	b00d      	add	sp, #52	; 0x34
 8014734:	ecbd 8b02 	vpop	{d8}
 8014738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801473c:	4642      	mov	r2, r8
 801473e:	464b      	mov	r3, r9
 8014740:	4640      	mov	r0, r8
 8014742:	4649      	mov	r1, r9
 8014744:	f7ec f9f2 	bl	8000b2c <__aeabi_dcmpun>
 8014748:	b140      	cbz	r0, 801475c <_printf_float+0xec>
 801474a:	464b      	mov	r3, r9
 801474c:	2b00      	cmp	r3, #0
 801474e:	bfbc      	itt	lt
 8014750:	232d      	movlt	r3, #45	; 0x2d
 8014752:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014756:	4a7f      	ldr	r2, [pc, #508]	; (8014954 <_printf_float+0x2e4>)
 8014758:	4b7f      	ldr	r3, [pc, #508]	; (8014958 <_printf_float+0x2e8>)
 801475a:	e7d1      	b.n	8014700 <_printf_float+0x90>
 801475c:	6863      	ldr	r3, [r4, #4]
 801475e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014762:	9206      	str	r2, [sp, #24]
 8014764:	1c5a      	adds	r2, r3, #1
 8014766:	d13f      	bne.n	80147e8 <_printf_float+0x178>
 8014768:	2306      	movs	r3, #6
 801476a:	6063      	str	r3, [r4, #4]
 801476c:	9b05      	ldr	r3, [sp, #20]
 801476e:	6861      	ldr	r1, [r4, #4]
 8014770:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014774:	2300      	movs	r3, #0
 8014776:	9303      	str	r3, [sp, #12]
 8014778:	ab0a      	add	r3, sp, #40	; 0x28
 801477a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801477e:	ab09      	add	r3, sp, #36	; 0x24
 8014780:	ec49 8b10 	vmov	d0, r8, r9
 8014784:	9300      	str	r3, [sp, #0]
 8014786:	6022      	str	r2, [r4, #0]
 8014788:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801478c:	4628      	mov	r0, r5
 801478e:	f7ff fecf 	bl	8014530 <__cvt>
 8014792:	9b06      	ldr	r3, [sp, #24]
 8014794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014796:	2b47      	cmp	r3, #71	; 0x47
 8014798:	4680      	mov	r8, r0
 801479a:	d108      	bne.n	80147ae <_printf_float+0x13e>
 801479c:	1cc8      	adds	r0, r1, #3
 801479e:	db02      	blt.n	80147a6 <_printf_float+0x136>
 80147a0:	6863      	ldr	r3, [r4, #4]
 80147a2:	4299      	cmp	r1, r3
 80147a4:	dd41      	ble.n	801482a <_printf_float+0x1ba>
 80147a6:	f1ab 0302 	sub.w	r3, fp, #2
 80147aa:	fa5f fb83 	uxtb.w	fp, r3
 80147ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80147b2:	d820      	bhi.n	80147f6 <_printf_float+0x186>
 80147b4:	3901      	subs	r1, #1
 80147b6:	465a      	mov	r2, fp
 80147b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80147bc:	9109      	str	r1, [sp, #36]	; 0x24
 80147be:	f7ff ff19 	bl	80145f4 <__exponent>
 80147c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147c4:	1813      	adds	r3, r2, r0
 80147c6:	2a01      	cmp	r2, #1
 80147c8:	4681      	mov	r9, r0
 80147ca:	6123      	str	r3, [r4, #16]
 80147cc:	dc02      	bgt.n	80147d4 <_printf_float+0x164>
 80147ce:	6822      	ldr	r2, [r4, #0]
 80147d0:	07d2      	lsls	r2, r2, #31
 80147d2:	d501      	bpl.n	80147d8 <_printf_float+0x168>
 80147d4:	3301      	adds	r3, #1
 80147d6:	6123      	str	r3, [r4, #16]
 80147d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d09c      	beq.n	801471a <_printf_float+0xaa>
 80147e0:	232d      	movs	r3, #45	; 0x2d
 80147e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80147e6:	e798      	b.n	801471a <_printf_float+0xaa>
 80147e8:	9a06      	ldr	r2, [sp, #24]
 80147ea:	2a47      	cmp	r2, #71	; 0x47
 80147ec:	d1be      	bne.n	801476c <_printf_float+0xfc>
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d1bc      	bne.n	801476c <_printf_float+0xfc>
 80147f2:	2301      	movs	r3, #1
 80147f4:	e7b9      	b.n	801476a <_printf_float+0xfa>
 80147f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80147fa:	d118      	bne.n	801482e <_printf_float+0x1be>
 80147fc:	2900      	cmp	r1, #0
 80147fe:	6863      	ldr	r3, [r4, #4]
 8014800:	dd0b      	ble.n	801481a <_printf_float+0x1aa>
 8014802:	6121      	str	r1, [r4, #16]
 8014804:	b913      	cbnz	r3, 801480c <_printf_float+0x19c>
 8014806:	6822      	ldr	r2, [r4, #0]
 8014808:	07d0      	lsls	r0, r2, #31
 801480a:	d502      	bpl.n	8014812 <_printf_float+0x1a2>
 801480c:	3301      	adds	r3, #1
 801480e:	440b      	add	r3, r1
 8014810:	6123      	str	r3, [r4, #16]
 8014812:	65a1      	str	r1, [r4, #88]	; 0x58
 8014814:	f04f 0900 	mov.w	r9, #0
 8014818:	e7de      	b.n	80147d8 <_printf_float+0x168>
 801481a:	b913      	cbnz	r3, 8014822 <_printf_float+0x1b2>
 801481c:	6822      	ldr	r2, [r4, #0]
 801481e:	07d2      	lsls	r2, r2, #31
 8014820:	d501      	bpl.n	8014826 <_printf_float+0x1b6>
 8014822:	3302      	adds	r3, #2
 8014824:	e7f4      	b.n	8014810 <_printf_float+0x1a0>
 8014826:	2301      	movs	r3, #1
 8014828:	e7f2      	b.n	8014810 <_printf_float+0x1a0>
 801482a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801482e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014830:	4299      	cmp	r1, r3
 8014832:	db05      	blt.n	8014840 <_printf_float+0x1d0>
 8014834:	6823      	ldr	r3, [r4, #0]
 8014836:	6121      	str	r1, [r4, #16]
 8014838:	07d8      	lsls	r0, r3, #31
 801483a:	d5ea      	bpl.n	8014812 <_printf_float+0x1a2>
 801483c:	1c4b      	adds	r3, r1, #1
 801483e:	e7e7      	b.n	8014810 <_printf_float+0x1a0>
 8014840:	2900      	cmp	r1, #0
 8014842:	bfd4      	ite	le
 8014844:	f1c1 0202 	rsble	r2, r1, #2
 8014848:	2201      	movgt	r2, #1
 801484a:	4413      	add	r3, r2
 801484c:	e7e0      	b.n	8014810 <_printf_float+0x1a0>
 801484e:	6823      	ldr	r3, [r4, #0]
 8014850:	055a      	lsls	r2, r3, #21
 8014852:	d407      	bmi.n	8014864 <_printf_float+0x1f4>
 8014854:	6923      	ldr	r3, [r4, #16]
 8014856:	4642      	mov	r2, r8
 8014858:	4631      	mov	r1, r6
 801485a:	4628      	mov	r0, r5
 801485c:	47b8      	blx	r7
 801485e:	3001      	adds	r0, #1
 8014860:	d12c      	bne.n	80148bc <_printf_float+0x24c>
 8014862:	e764      	b.n	801472e <_printf_float+0xbe>
 8014864:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014868:	f240 80e0 	bls.w	8014a2c <_printf_float+0x3bc>
 801486c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014870:	2200      	movs	r2, #0
 8014872:	2300      	movs	r3, #0
 8014874:	f7ec f928 	bl	8000ac8 <__aeabi_dcmpeq>
 8014878:	2800      	cmp	r0, #0
 801487a:	d034      	beq.n	80148e6 <_printf_float+0x276>
 801487c:	4a37      	ldr	r2, [pc, #220]	; (801495c <_printf_float+0x2ec>)
 801487e:	2301      	movs	r3, #1
 8014880:	4631      	mov	r1, r6
 8014882:	4628      	mov	r0, r5
 8014884:	47b8      	blx	r7
 8014886:	3001      	adds	r0, #1
 8014888:	f43f af51 	beq.w	801472e <_printf_float+0xbe>
 801488c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014890:	429a      	cmp	r2, r3
 8014892:	db02      	blt.n	801489a <_printf_float+0x22a>
 8014894:	6823      	ldr	r3, [r4, #0]
 8014896:	07d8      	lsls	r0, r3, #31
 8014898:	d510      	bpl.n	80148bc <_printf_float+0x24c>
 801489a:	ee18 3a10 	vmov	r3, s16
 801489e:	4652      	mov	r2, sl
 80148a0:	4631      	mov	r1, r6
 80148a2:	4628      	mov	r0, r5
 80148a4:	47b8      	blx	r7
 80148a6:	3001      	adds	r0, #1
 80148a8:	f43f af41 	beq.w	801472e <_printf_float+0xbe>
 80148ac:	f04f 0800 	mov.w	r8, #0
 80148b0:	f104 091a 	add.w	r9, r4, #26
 80148b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148b6:	3b01      	subs	r3, #1
 80148b8:	4543      	cmp	r3, r8
 80148ba:	dc09      	bgt.n	80148d0 <_printf_float+0x260>
 80148bc:	6823      	ldr	r3, [r4, #0]
 80148be:	079b      	lsls	r3, r3, #30
 80148c0:	f100 8107 	bmi.w	8014ad2 <_printf_float+0x462>
 80148c4:	68e0      	ldr	r0, [r4, #12]
 80148c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148c8:	4298      	cmp	r0, r3
 80148ca:	bfb8      	it	lt
 80148cc:	4618      	movlt	r0, r3
 80148ce:	e730      	b.n	8014732 <_printf_float+0xc2>
 80148d0:	2301      	movs	r3, #1
 80148d2:	464a      	mov	r2, r9
 80148d4:	4631      	mov	r1, r6
 80148d6:	4628      	mov	r0, r5
 80148d8:	47b8      	blx	r7
 80148da:	3001      	adds	r0, #1
 80148dc:	f43f af27 	beq.w	801472e <_printf_float+0xbe>
 80148e0:	f108 0801 	add.w	r8, r8, #1
 80148e4:	e7e6      	b.n	80148b4 <_printf_float+0x244>
 80148e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	dc39      	bgt.n	8014960 <_printf_float+0x2f0>
 80148ec:	4a1b      	ldr	r2, [pc, #108]	; (801495c <_printf_float+0x2ec>)
 80148ee:	2301      	movs	r3, #1
 80148f0:	4631      	mov	r1, r6
 80148f2:	4628      	mov	r0, r5
 80148f4:	47b8      	blx	r7
 80148f6:	3001      	adds	r0, #1
 80148f8:	f43f af19 	beq.w	801472e <_printf_float+0xbe>
 80148fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014900:	4313      	orrs	r3, r2
 8014902:	d102      	bne.n	801490a <_printf_float+0x29a>
 8014904:	6823      	ldr	r3, [r4, #0]
 8014906:	07d9      	lsls	r1, r3, #31
 8014908:	d5d8      	bpl.n	80148bc <_printf_float+0x24c>
 801490a:	ee18 3a10 	vmov	r3, s16
 801490e:	4652      	mov	r2, sl
 8014910:	4631      	mov	r1, r6
 8014912:	4628      	mov	r0, r5
 8014914:	47b8      	blx	r7
 8014916:	3001      	adds	r0, #1
 8014918:	f43f af09 	beq.w	801472e <_printf_float+0xbe>
 801491c:	f04f 0900 	mov.w	r9, #0
 8014920:	f104 0a1a 	add.w	sl, r4, #26
 8014924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014926:	425b      	negs	r3, r3
 8014928:	454b      	cmp	r3, r9
 801492a:	dc01      	bgt.n	8014930 <_printf_float+0x2c0>
 801492c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801492e:	e792      	b.n	8014856 <_printf_float+0x1e6>
 8014930:	2301      	movs	r3, #1
 8014932:	4652      	mov	r2, sl
 8014934:	4631      	mov	r1, r6
 8014936:	4628      	mov	r0, r5
 8014938:	47b8      	blx	r7
 801493a:	3001      	adds	r0, #1
 801493c:	f43f aef7 	beq.w	801472e <_printf_float+0xbe>
 8014940:	f109 0901 	add.w	r9, r9, #1
 8014944:	e7ee      	b.n	8014924 <_printf_float+0x2b4>
 8014946:	bf00      	nop
 8014948:	7fefffff 	.word	0x7fefffff
 801494c:	0801c6d0 	.word	0x0801c6d0
 8014950:	0801c6d4 	.word	0x0801c6d4
 8014954:	0801c6d8 	.word	0x0801c6d8
 8014958:	0801c6dc 	.word	0x0801c6dc
 801495c:	0801c6e0 	.word	0x0801c6e0
 8014960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014962:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014964:	429a      	cmp	r2, r3
 8014966:	bfa8      	it	ge
 8014968:	461a      	movge	r2, r3
 801496a:	2a00      	cmp	r2, #0
 801496c:	4691      	mov	r9, r2
 801496e:	dc37      	bgt.n	80149e0 <_printf_float+0x370>
 8014970:	f04f 0b00 	mov.w	fp, #0
 8014974:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014978:	f104 021a 	add.w	r2, r4, #26
 801497c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801497e:	9305      	str	r3, [sp, #20]
 8014980:	eba3 0309 	sub.w	r3, r3, r9
 8014984:	455b      	cmp	r3, fp
 8014986:	dc33      	bgt.n	80149f0 <_printf_float+0x380>
 8014988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801498c:	429a      	cmp	r2, r3
 801498e:	db3b      	blt.n	8014a08 <_printf_float+0x398>
 8014990:	6823      	ldr	r3, [r4, #0]
 8014992:	07da      	lsls	r2, r3, #31
 8014994:	d438      	bmi.n	8014a08 <_printf_float+0x398>
 8014996:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801499a:	eba2 0903 	sub.w	r9, r2, r3
 801499e:	9b05      	ldr	r3, [sp, #20]
 80149a0:	1ad2      	subs	r2, r2, r3
 80149a2:	4591      	cmp	r9, r2
 80149a4:	bfa8      	it	ge
 80149a6:	4691      	movge	r9, r2
 80149a8:	f1b9 0f00 	cmp.w	r9, #0
 80149ac:	dc35      	bgt.n	8014a1a <_printf_float+0x3aa>
 80149ae:	f04f 0800 	mov.w	r8, #0
 80149b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80149b6:	f104 0a1a 	add.w	sl, r4, #26
 80149ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80149be:	1a9b      	subs	r3, r3, r2
 80149c0:	eba3 0309 	sub.w	r3, r3, r9
 80149c4:	4543      	cmp	r3, r8
 80149c6:	f77f af79 	ble.w	80148bc <_printf_float+0x24c>
 80149ca:	2301      	movs	r3, #1
 80149cc:	4652      	mov	r2, sl
 80149ce:	4631      	mov	r1, r6
 80149d0:	4628      	mov	r0, r5
 80149d2:	47b8      	blx	r7
 80149d4:	3001      	adds	r0, #1
 80149d6:	f43f aeaa 	beq.w	801472e <_printf_float+0xbe>
 80149da:	f108 0801 	add.w	r8, r8, #1
 80149de:	e7ec      	b.n	80149ba <_printf_float+0x34a>
 80149e0:	4613      	mov	r3, r2
 80149e2:	4631      	mov	r1, r6
 80149e4:	4642      	mov	r2, r8
 80149e6:	4628      	mov	r0, r5
 80149e8:	47b8      	blx	r7
 80149ea:	3001      	adds	r0, #1
 80149ec:	d1c0      	bne.n	8014970 <_printf_float+0x300>
 80149ee:	e69e      	b.n	801472e <_printf_float+0xbe>
 80149f0:	2301      	movs	r3, #1
 80149f2:	4631      	mov	r1, r6
 80149f4:	4628      	mov	r0, r5
 80149f6:	9205      	str	r2, [sp, #20]
 80149f8:	47b8      	blx	r7
 80149fa:	3001      	adds	r0, #1
 80149fc:	f43f ae97 	beq.w	801472e <_printf_float+0xbe>
 8014a00:	9a05      	ldr	r2, [sp, #20]
 8014a02:	f10b 0b01 	add.w	fp, fp, #1
 8014a06:	e7b9      	b.n	801497c <_printf_float+0x30c>
 8014a08:	ee18 3a10 	vmov	r3, s16
 8014a0c:	4652      	mov	r2, sl
 8014a0e:	4631      	mov	r1, r6
 8014a10:	4628      	mov	r0, r5
 8014a12:	47b8      	blx	r7
 8014a14:	3001      	adds	r0, #1
 8014a16:	d1be      	bne.n	8014996 <_printf_float+0x326>
 8014a18:	e689      	b.n	801472e <_printf_float+0xbe>
 8014a1a:	9a05      	ldr	r2, [sp, #20]
 8014a1c:	464b      	mov	r3, r9
 8014a1e:	4442      	add	r2, r8
 8014a20:	4631      	mov	r1, r6
 8014a22:	4628      	mov	r0, r5
 8014a24:	47b8      	blx	r7
 8014a26:	3001      	adds	r0, #1
 8014a28:	d1c1      	bne.n	80149ae <_printf_float+0x33e>
 8014a2a:	e680      	b.n	801472e <_printf_float+0xbe>
 8014a2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a2e:	2a01      	cmp	r2, #1
 8014a30:	dc01      	bgt.n	8014a36 <_printf_float+0x3c6>
 8014a32:	07db      	lsls	r3, r3, #31
 8014a34:	d53a      	bpl.n	8014aac <_printf_float+0x43c>
 8014a36:	2301      	movs	r3, #1
 8014a38:	4642      	mov	r2, r8
 8014a3a:	4631      	mov	r1, r6
 8014a3c:	4628      	mov	r0, r5
 8014a3e:	47b8      	blx	r7
 8014a40:	3001      	adds	r0, #1
 8014a42:	f43f ae74 	beq.w	801472e <_printf_float+0xbe>
 8014a46:	ee18 3a10 	vmov	r3, s16
 8014a4a:	4652      	mov	r2, sl
 8014a4c:	4631      	mov	r1, r6
 8014a4e:	4628      	mov	r0, r5
 8014a50:	47b8      	blx	r7
 8014a52:	3001      	adds	r0, #1
 8014a54:	f43f ae6b 	beq.w	801472e <_printf_float+0xbe>
 8014a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	2300      	movs	r3, #0
 8014a60:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8014a64:	f7ec f830 	bl	8000ac8 <__aeabi_dcmpeq>
 8014a68:	b9d8      	cbnz	r0, 8014aa2 <_printf_float+0x432>
 8014a6a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8014a6e:	f108 0201 	add.w	r2, r8, #1
 8014a72:	4631      	mov	r1, r6
 8014a74:	4628      	mov	r0, r5
 8014a76:	47b8      	blx	r7
 8014a78:	3001      	adds	r0, #1
 8014a7a:	d10e      	bne.n	8014a9a <_printf_float+0x42a>
 8014a7c:	e657      	b.n	801472e <_printf_float+0xbe>
 8014a7e:	2301      	movs	r3, #1
 8014a80:	4652      	mov	r2, sl
 8014a82:	4631      	mov	r1, r6
 8014a84:	4628      	mov	r0, r5
 8014a86:	47b8      	blx	r7
 8014a88:	3001      	adds	r0, #1
 8014a8a:	f43f ae50 	beq.w	801472e <_printf_float+0xbe>
 8014a8e:	f108 0801 	add.w	r8, r8, #1
 8014a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a94:	3b01      	subs	r3, #1
 8014a96:	4543      	cmp	r3, r8
 8014a98:	dcf1      	bgt.n	8014a7e <_printf_float+0x40e>
 8014a9a:	464b      	mov	r3, r9
 8014a9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014aa0:	e6da      	b.n	8014858 <_printf_float+0x1e8>
 8014aa2:	f04f 0800 	mov.w	r8, #0
 8014aa6:	f104 0a1a 	add.w	sl, r4, #26
 8014aaa:	e7f2      	b.n	8014a92 <_printf_float+0x422>
 8014aac:	2301      	movs	r3, #1
 8014aae:	4642      	mov	r2, r8
 8014ab0:	e7df      	b.n	8014a72 <_printf_float+0x402>
 8014ab2:	2301      	movs	r3, #1
 8014ab4:	464a      	mov	r2, r9
 8014ab6:	4631      	mov	r1, r6
 8014ab8:	4628      	mov	r0, r5
 8014aba:	47b8      	blx	r7
 8014abc:	3001      	adds	r0, #1
 8014abe:	f43f ae36 	beq.w	801472e <_printf_float+0xbe>
 8014ac2:	f108 0801 	add.w	r8, r8, #1
 8014ac6:	68e3      	ldr	r3, [r4, #12]
 8014ac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014aca:	1a5b      	subs	r3, r3, r1
 8014acc:	4543      	cmp	r3, r8
 8014ace:	dcf0      	bgt.n	8014ab2 <_printf_float+0x442>
 8014ad0:	e6f8      	b.n	80148c4 <_printf_float+0x254>
 8014ad2:	f04f 0800 	mov.w	r8, #0
 8014ad6:	f104 0919 	add.w	r9, r4, #25
 8014ada:	e7f4      	b.n	8014ac6 <_printf_float+0x456>

08014adc <_printf_common>:
 8014adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ae0:	4616      	mov	r6, r2
 8014ae2:	4699      	mov	r9, r3
 8014ae4:	688a      	ldr	r2, [r1, #8]
 8014ae6:	690b      	ldr	r3, [r1, #16]
 8014ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014aec:	4293      	cmp	r3, r2
 8014aee:	bfb8      	it	lt
 8014af0:	4613      	movlt	r3, r2
 8014af2:	6033      	str	r3, [r6, #0]
 8014af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014af8:	4607      	mov	r7, r0
 8014afa:	460c      	mov	r4, r1
 8014afc:	b10a      	cbz	r2, 8014b02 <_printf_common+0x26>
 8014afe:	3301      	adds	r3, #1
 8014b00:	6033      	str	r3, [r6, #0]
 8014b02:	6823      	ldr	r3, [r4, #0]
 8014b04:	0699      	lsls	r1, r3, #26
 8014b06:	bf42      	ittt	mi
 8014b08:	6833      	ldrmi	r3, [r6, #0]
 8014b0a:	3302      	addmi	r3, #2
 8014b0c:	6033      	strmi	r3, [r6, #0]
 8014b0e:	6825      	ldr	r5, [r4, #0]
 8014b10:	f015 0506 	ands.w	r5, r5, #6
 8014b14:	d106      	bne.n	8014b24 <_printf_common+0x48>
 8014b16:	f104 0a19 	add.w	sl, r4, #25
 8014b1a:	68e3      	ldr	r3, [r4, #12]
 8014b1c:	6832      	ldr	r2, [r6, #0]
 8014b1e:	1a9b      	subs	r3, r3, r2
 8014b20:	42ab      	cmp	r3, r5
 8014b22:	dc26      	bgt.n	8014b72 <_printf_common+0x96>
 8014b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014b28:	1e13      	subs	r3, r2, #0
 8014b2a:	6822      	ldr	r2, [r4, #0]
 8014b2c:	bf18      	it	ne
 8014b2e:	2301      	movne	r3, #1
 8014b30:	0692      	lsls	r2, r2, #26
 8014b32:	d42b      	bmi.n	8014b8c <_printf_common+0xb0>
 8014b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014b38:	4649      	mov	r1, r9
 8014b3a:	4638      	mov	r0, r7
 8014b3c:	47c0      	blx	r8
 8014b3e:	3001      	adds	r0, #1
 8014b40:	d01e      	beq.n	8014b80 <_printf_common+0xa4>
 8014b42:	6823      	ldr	r3, [r4, #0]
 8014b44:	6922      	ldr	r2, [r4, #16]
 8014b46:	f003 0306 	and.w	r3, r3, #6
 8014b4a:	2b04      	cmp	r3, #4
 8014b4c:	bf02      	ittt	eq
 8014b4e:	68e5      	ldreq	r5, [r4, #12]
 8014b50:	6833      	ldreq	r3, [r6, #0]
 8014b52:	1aed      	subeq	r5, r5, r3
 8014b54:	68a3      	ldr	r3, [r4, #8]
 8014b56:	bf0c      	ite	eq
 8014b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b5c:	2500      	movne	r5, #0
 8014b5e:	4293      	cmp	r3, r2
 8014b60:	bfc4      	itt	gt
 8014b62:	1a9b      	subgt	r3, r3, r2
 8014b64:	18ed      	addgt	r5, r5, r3
 8014b66:	2600      	movs	r6, #0
 8014b68:	341a      	adds	r4, #26
 8014b6a:	42b5      	cmp	r5, r6
 8014b6c:	d11a      	bne.n	8014ba4 <_printf_common+0xc8>
 8014b6e:	2000      	movs	r0, #0
 8014b70:	e008      	b.n	8014b84 <_printf_common+0xa8>
 8014b72:	2301      	movs	r3, #1
 8014b74:	4652      	mov	r2, sl
 8014b76:	4649      	mov	r1, r9
 8014b78:	4638      	mov	r0, r7
 8014b7a:	47c0      	blx	r8
 8014b7c:	3001      	adds	r0, #1
 8014b7e:	d103      	bne.n	8014b88 <_printf_common+0xac>
 8014b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b88:	3501      	adds	r5, #1
 8014b8a:	e7c6      	b.n	8014b1a <_printf_common+0x3e>
 8014b8c:	18e1      	adds	r1, r4, r3
 8014b8e:	1c5a      	adds	r2, r3, #1
 8014b90:	2030      	movs	r0, #48	; 0x30
 8014b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014b96:	4422      	add	r2, r4
 8014b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014ba0:	3302      	adds	r3, #2
 8014ba2:	e7c7      	b.n	8014b34 <_printf_common+0x58>
 8014ba4:	2301      	movs	r3, #1
 8014ba6:	4622      	mov	r2, r4
 8014ba8:	4649      	mov	r1, r9
 8014baa:	4638      	mov	r0, r7
 8014bac:	47c0      	blx	r8
 8014bae:	3001      	adds	r0, #1
 8014bb0:	d0e6      	beq.n	8014b80 <_printf_common+0xa4>
 8014bb2:	3601      	adds	r6, #1
 8014bb4:	e7d9      	b.n	8014b6a <_printf_common+0x8e>
	...

08014bb8 <_printf_i>:
 8014bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014bbc:	7e0f      	ldrb	r7, [r1, #24]
 8014bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014bc0:	2f78      	cmp	r7, #120	; 0x78
 8014bc2:	4691      	mov	r9, r2
 8014bc4:	4680      	mov	r8, r0
 8014bc6:	460c      	mov	r4, r1
 8014bc8:	469a      	mov	sl, r3
 8014bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014bce:	d807      	bhi.n	8014be0 <_printf_i+0x28>
 8014bd0:	2f62      	cmp	r7, #98	; 0x62
 8014bd2:	d80a      	bhi.n	8014bea <_printf_i+0x32>
 8014bd4:	2f00      	cmp	r7, #0
 8014bd6:	f000 80d4 	beq.w	8014d82 <_printf_i+0x1ca>
 8014bda:	2f58      	cmp	r7, #88	; 0x58
 8014bdc:	f000 80c0 	beq.w	8014d60 <_printf_i+0x1a8>
 8014be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014be8:	e03a      	b.n	8014c60 <_printf_i+0xa8>
 8014bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014bee:	2b15      	cmp	r3, #21
 8014bf0:	d8f6      	bhi.n	8014be0 <_printf_i+0x28>
 8014bf2:	a101      	add	r1, pc, #4	; (adr r1, 8014bf8 <_printf_i+0x40>)
 8014bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014bf8:	08014c51 	.word	0x08014c51
 8014bfc:	08014c65 	.word	0x08014c65
 8014c00:	08014be1 	.word	0x08014be1
 8014c04:	08014be1 	.word	0x08014be1
 8014c08:	08014be1 	.word	0x08014be1
 8014c0c:	08014be1 	.word	0x08014be1
 8014c10:	08014c65 	.word	0x08014c65
 8014c14:	08014be1 	.word	0x08014be1
 8014c18:	08014be1 	.word	0x08014be1
 8014c1c:	08014be1 	.word	0x08014be1
 8014c20:	08014be1 	.word	0x08014be1
 8014c24:	08014d69 	.word	0x08014d69
 8014c28:	08014c91 	.word	0x08014c91
 8014c2c:	08014d23 	.word	0x08014d23
 8014c30:	08014be1 	.word	0x08014be1
 8014c34:	08014be1 	.word	0x08014be1
 8014c38:	08014d8b 	.word	0x08014d8b
 8014c3c:	08014be1 	.word	0x08014be1
 8014c40:	08014c91 	.word	0x08014c91
 8014c44:	08014be1 	.word	0x08014be1
 8014c48:	08014be1 	.word	0x08014be1
 8014c4c:	08014d2b 	.word	0x08014d2b
 8014c50:	682b      	ldr	r3, [r5, #0]
 8014c52:	1d1a      	adds	r2, r3, #4
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	602a      	str	r2, [r5, #0]
 8014c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014c60:	2301      	movs	r3, #1
 8014c62:	e09f      	b.n	8014da4 <_printf_i+0x1ec>
 8014c64:	6820      	ldr	r0, [r4, #0]
 8014c66:	682b      	ldr	r3, [r5, #0]
 8014c68:	0607      	lsls	r7, r0, #24
 8014c6a:	f103 0104 	add.w	r1, r3, #4
 8014c6e:	6029      	str	r1, [r5, #0]
 8014c70:	d501      	bpl.n	8014c76 <_printf_i+0xbe>
 8014c72:	681e      	ldr	r6, [r3, #0]
 8014c74:	e003      	b.n	8014c7e <_printf_i+0xc6>
 8014c76:	0646      	lsls	r6, r0, #25
 8014c78:	d5fb      	bpl.n	8014c72 <_printf_i+0xba>
 8014c7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014c7e:	2e00      	cmp	r6, #0
 8014c80:	da03      	bge.n	8014c8a <_printf_i+0xd2>
 8014c82:	232d      	movs	r3, #45	; 0x2d
 8014c84:	4276      	negs	r6, r6
 8014c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c8a:	485a      	ldr	r0, [pc, #360]	; (8014df4 <_printf_i+0x23c>)
 8014c8c:	230a      	movs	r3, #10
 8014c8e:	e012      	b.n	8014cb6 <_printf_i+0xfe>
 8014c90:	682b      	ldr	r3, [r5, #0]
 8014c92:	6820      	ldr	r0, [r4, #0]
 8014c94:	1d19      	adds	r1, r3, #4
 8014c96:	6029      	str	r1, [r5, #0]
 8014c98:	0605      	lsls	r5, r0, #24
 8014c9a:	d501      	bpl.n	8014ca0 <_printf_i+0xe8>
 8014c9c:	681e      	ldr	r6, [r3, #0]
 8014c9e:	e002      	b.n	8014ca6 <_printf_i+0xee>
 8014ca0:	0641      	lsls	r1, r0, #25
 8014ca2:	d5fb      	bpl.n	8014c9c <_printf_i+0xe4>
 8014ca4:	881e      	ldrh	r6, [r3, #0]
 8014ca6:	4853      	ldr	r0, [pc, #332]	; (8014df4 <_printf_i+0x23c>)
 8014ca8:	2f6f      	cmp	r7, #111	; 0x6f
 8014caa:	bf0c      	ite	eq
 8014cac:	2308      	moveq	r3, #8
 8014cae:	230a      	movne	r3, #10
 8014cb0:	2100      	movs	r1, #0
 8014cb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014cb6:	6865      	ldr	r5, [r4, #4]
 8014cb8:	60a5      	str	r5, [r4, #8]
 8014cba:	2d00      	cmp	r5, #0
 8014cbc:	bfa2      	ittt	ge
 8014cbe:	6821      	ldrge	r1, [r4, #0]
 8014cc0:	f021 0104 	bicge.w	r1, r1, #4
 8014cc4:	6021      	strge	r1, [r4, #0]
 8014cc6:	b90e      	cbnz	r6, 8014ccc <_printf_i+0x114>
 8014cc8:	2d00      	cmp	r5, #0
 8014cca:	d04b      	beq.n	8014d64 <_printf_i+0x1ac>
 8014ccc:	4615      	mov	r5, r2
 8014cce:	fbb6 f1f3 	udiv	r1, r6, r3
 8014cd2:	fb03 6711 	mls	r7, r3, r1, r6
 8014cd6:	5dc7      	ldrb	r7, [r0, r7]
 8014cd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014cdc:	4637      	mov	r7, r6
 8014cde:	42bb      	cmp	r3, r7
 8014ce0:	460e      	mov	r6, r1
 8014ce2:	d9f4      	bls.n	8014cce <_printf_i+0x116>
 8014ce4:	2b08      	cmp	r3, #8
 8014ce6:	d10b      	bne.n	8014d00 <_printf_i+0x148>
 8014ce8:	6823      	ldr	r3, [r4, #0]
 8014cea:	07de      	lsls	r6, r3, #31
 8014cec:	d508      	bpl.n	8014d00 <_printf_i+0x148>
 8014cee:	6923      	ldr	r3, [r4, #16]
 8014cf0:	6861      	ldr	r1, [r4, #4]
 8014cf2:	4299      	cmp	r1, r3
 8014cf4:	bfde      	ittt	le
 8014cf6:	2330      	movle	r3, #48	; 0x30
 8014cf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014cfc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014d00:	1b52      	subs	r2, r2, r5
 8014d02:	6122      	str	r2, [r4, #16]
 8014d04:	f8cd a000 	str.w	sl, [sp]
 8014d08:	464b      	mov	r3, r9
 8014d0a:	aa03      	add	r2, sp, #12
 8014d0c:	4621      	mov	r1, r4
 8014d0e:	4640      	mov	r0, r8
 8014d10:	f7ff fee4 	bl	8014adc <_printf_common>
 8014d14:	3001      	adds	r0, #1
 8014d16:	d14a      	bne.n	8014dae <_printf_i+0x1f6>
 8014d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d1c:	b004      	add	sp, #16
 8014d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d22:	6823      	ldr	r3, [r4, #0]
 8014d24:	f043 0320 	orr.w	r3, r3, #32
 8014d28:	6023      	str	r3, [r4, #0]
 8014d2a:	4833      	ldr	r0, [pc, #204]	; (8014df8 <_printf_i+0x240>)
 8014d2c:	2778      	movs	r7, #120	; 0x78
 8014d2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014d32:	6823      	ldr	r3, [r4, #0]
 8014d34:	6829      	ldr	r1, [r5, #0]
 8014d36:	061f      	lsls	r7, r3, #24
 8014d38:	f851 6b04 	ldr.w	r6, [r1], #4
 8014d3c:	d402      	bmi.n	8014d44 <_printf_i+0x18c>
 8014d3e:	065f      	lsls	r7, r3, #25
 8014d40:	bf48      	it	mi
 8014d42:	b2b6      	uxthmi	r6, r6
 8014d44:	07df      	lsls	r7, r3, #31
 8014d46:	bf48      	it	mi
 8014d48:	f043 0320 	orrmi.w	r3, r3, #32
 8014d4c:	6029      	str	r1, [r5, #0]
 8014d4e:	bf48      	it	mi
 8014d50:	6023      	strmi	r3, [r4, #0]
 8014d52:	b91e      	cbnz	r6, 8014d5c <_printf_i+0x1a4>
 8014d54:	6823      	ldr	r3, [r4, #0]
 8014d56:	f023 0320 	bic.w	r3, r3, #32
 8014d5a:	6023      	str	r3, [r4, #0]
 8014d5c:	2310      	movs	r3, #16
 8014d5e:	e7a7      	b.n	8014cb0 <_printf_i+0xf8>
 8014d60:	4824      	ldr	r0, [pc, #144]	; (8014df4 <_printf_i+0x23c>)
 8014d62:	e7e4      	b.n	8014d2e <_printf_i+0x176>
 8014d64:	4615      	mov	r5, r2
 8014d66:	e7bd      	b.n	8014ce4 <_printf_i+0x12c>
 8014d68:	682b      	ldr	r3, [r5, #0]
 8014d6a:	6826      	ldr	r6, [r4, #0]
 8014d6c:	6961      	ldr	r1, [r4, #20]
 8014d6e:	1d18      	adds	r0, r3, #4
 8014d70:	6028      	str	r0, [r5, #0]
 8014d72:	0635      	lsls	r5, r6, #24
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	d501      	bpl.n	8014d7c <_printf_i+0x1c4>
 8014d78:	6019      	str	r1, [r3, #0]
 8014d7a:	e002      	b.n	8014d82 <_printf_i+0x1ca>
 8014d7c:	0670      	lsls	r0, r6, #25
 8014d7e:	d5fb      	bpl.n	8014d78 <_printf_i+0x1c0>
 8014d80:	8019      	strh	r1, [r3, #0]
 8014d82:	2300      	movs	r3, #0
 8014d84:	6123      	str	r3, [r4, #16]
 8014d86:	4615      	mov	r5, r2
 8014d88:	e7bc      	b.n	8014d04 <_printf_i+0x14c>
 8014d8a:	682b      	ldr	r3, [r5, #0]
 8014d8c:	1d1a      	adds	r2, r3, #4
 8014d8e:	602a      	str	r2, [r5, #0]
 8014d90:	681d      	ldr	r5, [r3, #0]
 8014d92:	6862      	ldr	r2, [r4, #4]
 8014d94:	2100      	movs	r1, #0
 8014d96:	4628      	mov	r0, r5
 8014d98:	f7eb fa1a 	bl	80001d0 <memchr>
 8014d9c:	b108      	cbz	r0, 8014da2 <_printf_i+0x1ea>
 8014d9e:	1b40      	subs	r0, r0, r5
 8014da0:	6060      	str	r0, [r4, #4]
 8014da2:	6863      	ldr	r3, [r4, #4]
 8014da4:	6123      	str	r3, [r4, #16]
 8014da6:	2300      	movs	r3, #0
 8014da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014dac:	e7aa      	b.n	8014d04 <_printf_i+0x14c>
 8014dae:	6923      	ldr	r3, [r4, #16]
 8014db0:	462a      	mov	r2, r5
 8014db2:	4649      	mov	r1, r9
 8014db4:	4640      	mov	r0, r8
 8014db6:	47d0      	blx	sl
 8014db8:	3001      	adds	r0, #1
 8014dba:	d0ad      	beq.n	8014d18 <_printf_i+0x160>
 8014dbc:	6823      	ldr	r3, [r4, #0]
 8014dbe:	079b      	lsls	r3, r3, #30
 8014dc0:	d413      	bmi.n	8014dea <_printf_i+0x232>
 8014dc2:	68e0      	ldr	r0, [r4, #12]
 8014dc4:	9b03      	ldr	r3, [sp, #12]
 8014dc6:	4298      	cmp	r0, r3
 8014dc8:	bfb8      	it	lt
 8014dca:	4618      	movlt	r0, r3
 8014dcc:	e7a6      	b.n	8014d1c <_printf_i+0x164>
 8014dce:	2301      	movs	r3, #1
 8014dd0:	4632      	mov	r2, r6
 8014dd2:	4649      	mov	r1, r9
 8014dd4:	4640      	mov	r0, r8
 8014dd6:	47d0      	blx	sl
 8014dd8:	3001      	adds	r0, #1
 8014dda:	d09d      	beq.n	8014d18 <_printf_i+0x160>
 8014ddc:	3501      	adds	r5, #1
 8014dde:	68e3      	ldr	r3, [r4, #12]
 8014de0:	9903      	ldr	r1, [sp, #12]
 8014de2:	1a5b      	subs	r3, r3, r1
 8014de4:	42ab      	cmp	r3, r5
 8014de6:	dcf2      	bgt.n	8014dce <_printf_i+0x216>
 8014de8:	e7eb      	b.n	8014dc2 <_printf_i+0x20a>
 8014dea:	2500      	movs	r5, #0
 8014dec:	f104 0619 	add.w	r6, r4, #25
 8014df0:	e7f5      	b.n	8014dde <_printf_i+0x226>
 8014df2:	bf00      	nop
 8014df4:	0801c6e2 	.word	0x0801c6e2
 8014df8:	0801c6f3 	.word	0x0801c6f3

08014dfc <_scanf_float>:
 8014dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e00:	b087      	sub	sp, #28
 8014e02:	4617      	mov	r7, r2
 8014e04:	9303      	str	r3, [sp, #12]
 8014e06:	688b      	ldr	r3, [r1, #8]
 8014e08:	1e5a      	subs	r2, r3, #1
 8014e0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014e0e:	bf83      	ittte	hi
 8014e10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014e14:	195b      	addhi	r3, r3, r5
 8014e16:	9302      	strhi	r3, [sp, #8]
 8014e18:	2300      	movls	r3, #0
 8014e1a:	bf86      	itte	hi
 8014e1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014e20:	608b      	strhi	r3, [r1, #8]
 8014e22:	9302      	strls	r3, [sp, #8]
 8014e24:	680b      	ldr	r3, [r1, #0]
 8014e26:	468b      	mov	fp, r1
 8014e28:	2500      	movs	r5, #0
 8014e2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014e2e:	f84b 3b1c 	str.w	r3, [fp], #28
 8014e32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014e36:	4680      	mov	r8, r0
 8014e38:	460c      	mov	r4, r1
 8014e3a:	465e      	mov	r6, fp
 8014e3c:	46aa      	mov	sl, r5
 8014e3e:	46a9      	mov	r9, r5
 8014e40:	9501      	str	r5, [sp, #4]
 8014e42:	68a2      	ldr	r2, [r4, #8]
 8014e44:	b152      	cbz	r2, 8014e5c <_scanf_float+0x60>
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	781b      	ldrb	r3, [r3, #0]
 8014e4a:	2b4e      	cmp	r3, #78	; 0x4e
 8014e4c:	d864      	bhi.n	8014f18 <_scanf_float+0x11c>
 8014e4e:	2b40      	cmp	r3, #64	; 0x40
 8014e50:	d83c      	bhi.n	8014ecc <_scanf_float+0xd0>
 8014e52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014e56:	b2c8      	uxtb	r0, r1
 8014e58:	280e      	cmp	r0, #14
 8014e5a:	d93a      	bls.n	8014ed2 <_scanf_float+0xd6>
 8014e5c:	f1b9 0f00 	cmp.w	r9, #0
 8014e60:	d003      	beq.n	8014e6a <_scanf_float+0x6e>
 8014e62:	6823      	ldr	r3, [r4, #0]
 8014e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014e68:	6023      	str	r3, [r4, #0]
 8014e6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014e6e:	f1ba 0f01 	cmp.w	sl, #1
 8014e72:	f200 8113 	bhi.w	801509c <_scanf_float+0x2a0>
 8014e76:	455e      	cmp	r6, fp
 8014e78:	f200 8105 	bhi.w	8015086 <_scanf_float+0x28a>
 8014e7c:	2501      	movs	r5, #1
 8014e7e:	4628      	mov	r0, r5
 8014e80:	b007      	add	sp, #28
 8014e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014e8a:	2a0d      	cmp	r2, #13
 8014e8c:	d8e6      	bhi.n	8014e5c <_scanf_float+0x60>
 8014e8e:	a101      	add	r1, pc, #4	; (adr r1, 8014e94 <_scanf_float+0x98>)
 8014e90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014e94:	08014fd3 	.word	0x08014fd3
 8014e98:	08014e5d 	.word	0x08014e5d
 8014e9c:	08014e5d 	.word	0x08014e5d
 8014ea0:	08014e5d 	.word	0x08014e5d
 8014ea4:	08015033 	.word	0x08015033
 8014ea8:	0801500b 	.word	0x0801500b
 8014eac:	08014e5d 	.word	0x08014e5d
 8014eb0:	08014e5d 	.word	0x08014e5d
 8014eb4:	08014fe1 	.word	0x08014fe1
 8014eb8:	08014e5d 	.word	0x08014e5d
 8014ebc:	08014e5d 	.word	0x08014e5d
 8014ec0:	08014e5d 	.word	0x08014e5d
 8014ec4:	08014e5d 	.word	0x08014e5d
 8014ec8:	08014f99 	.word	0x08014f99
 8014ecc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014ed0:	e7db      	b.n	8014e8a <_scanf_float+0x8e>
 8014ed2:	290e      	cmp	r1, #14
 8014ed4:	d8c2      	bhi.n	8014e5c <_scanf_float+0x60>
 8014ed6:	a001      	add	r0, pc, #4	; (adr r0, 8014edc <_scanf_float+0xe0>)
 8014ed8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014edc:	08014f8b 	.word	0x08014f8b
 8014ee0:	08014e5d 	.word	0x08014e5d
 8014ee4:	08014f8b 	.word	0x08014f8b
 8014ee8:	0801501f 	.word	0x0801501f
 8014eec:	08014e5d 	.word	0x08014e5d
 8014ef0:	08014f39 	.word	0x08014f39
 8014ef4:	08014f75 	.word	0x08014f75
 8014ef8:	08014f75 	.word	0x08014f75
 8014efc:	08014f75 	.word	0x08014f75
 8014f00:	08014f75 	.word	0x08014f75
 8014f04:	08014f75 	.word	0x08014f75
 8014f08:	08014f75 	.word	0x08014f75
 8014f0c:	08014f75 	.word	0x08014f75
 8014f10:	08014f75 	.word	0x08014f75
 8014f14:	08014f75 	.word	0x08014f75
 8014f18:	2b6e      	cmp	r3, #110	; 0x6e
 8014f1a:	d809      	bhi.n	8014f30 <_scanf_float+0x134>
 8014f1c:	2b60      	cmp	r3, #96	; 0x60
 8014f1e:	d8b2      	bhi.n	8014e86 <_scanf_float+0x8a>
 8014f20:	2b54      	cmp	r3, #84	; 0x54
 8014f22:	d077      	beq.n	8015014 <_scanf_float+0x218>
 8014f24:	2b59      	cmp	r3, #89	; 0x59
 8014f26:	d199      	bne.n	8014e5c <_scanf_float+0x60>
 8014f28:	2d07      	cmp	r5, #7
 8014f2a:	d197      	bne.n	8014e5c <_scanf_float+0x60>
 8014f2c:	2508      	movs	r5, #8
 8014f2e:	e029      	b.n	8014f84 <_scanf_float+0x188>
 8014f30:	2b74      	cmp	r3, #116	; 0x74
 8014f32:	d06f      	beq.n	8015014 <_scanf_float+0x218>
 8014f34:	2b79      	cmp	r3, #121	; 0x79
 8014f36:	e7f6      	b.n	8014f26 <_scanf_float+0x12a>
 8014f38:	6821      	ldr	r1, [r4, #0]
 8014f3a:	05c8      	lsls	r0, r1, #23
 8014f3c:	d51a      	bpl.n	8014f74 <_scanf_float+0x178>
 8014f3e:	9b02      	ldr	r3, [sp, #8]
 8014f40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014f44:	6021      	str	r1, [r4, #0]
 8014f46:	f109 0901 	add.w	r9, r9, #1
 8014f4a:	b11b      	cbz	r3, 8014f54 <_scanf_float+0x158>
 8014f4c:	3b01      	subs	r3, #1
 8014f4e:	3201      	adds	r2, #1
 8014f50:	9302      	str	r3, [sp, #8]
 8014f52:	60a2      	str	r2, [r4, #8]
 8014f54:	68a3      	ldr	r3, [r4, #8]
 8014f56:	3b01      	subs	r3, #1
 8014f58:	60a3      	str	r3, [r4, #8]
 8014f5a:	6923      	ldr	r3, [r4, #16]
 8014f5c:	3301      	adds	r3, #1
 8014f5e:	6123      	str	r3, [r4, #16]
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	3b01      	subs	r3, #1
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	607b      	str	r3, [r7, #4]
 8014f68:	f340 8084 	ble.w	8015074 <_scanf_float+0x278>
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	3301      	adds	r3, #1
 8014f70:	603b      	str	r3, [r7, #0]
 8014f72:	e766      	b.n	8014e42 <_scanf_float+0x46>
 8014f74:	eb1a 0f05 	cmn.w	sl, r5
 8014f78:	f47f af70 	bne.w	8014e5c <_scanf_float+0x60>
 8014f7c:	6822      	ldr	r2, [r4, #0]
 8014f7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8014f82:	6022      	str	r2, [r4, #0]
 8014f84:	f806 3b01 	strb.w	r3, [r6], #1
 8014f88:	e7e4      	b.n	8014f54 <_scanf_float+0x158>
 8014f8a:	6822      	ldr	r2, [r4, #0]
 8014f8c:	0610      	lsls	r0, r2, #24
 8014f8e:	f57f af65 	bpl.w	8014e5c <_scanf_float+0x60>
 8014f92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014f96:	e7f4      	b.n	8014f82 <_scanf_float+0x186>
 8014f98:	f1ba 0f00 	cmp.w	sl, #0
 8014f9c:	d10e      	bne.n	8014fbc <_scanf_float+0x1c0>
 8014f9e:	f1b9 0f00 	cmp.w	r9, #0
 8014fa2:	d10e      	bne.n	8014fc2 <_scanf_float+0x1c6>
 8014fa4:	6822      	ldr	r2, [r4, #0]
 8014fa6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014faa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014fae:	d108      	bne.n	8014fc2 <_scanf_float+0x1c6>
 8014fb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014fb4:	6022      	str	r2, [r4, #0]
 8014fb6:	f04f 0a01 	mov.w	sl, #1
 8014fba:	e7e3      	b.n	8014f84 <_scanf_float+0x188>
 8014fbc:	f1ba 0f02 	cmp.w	sl, #2
 8014fc0:	d055      	beq.n	801506e <_scanf_float+0x272>
 8014fc2:	2d01      	cmp	r5, #1
 8014fc4:	d002      	beq.n	8014fcc <_scanf_float+0x1d0>
 8014fc6:	2d04      	cmp	r5, #4
 8014fc8:	f47f af48 	bne.w	8014e5c <_scanf_float+0x60>
 8014fcc:	3501      	adds	r5, #1
 8014fce:	b2ed      	uxtb	r5, r5
 8014fd0:	e7d8      	b.n	8014f84 <_scanf_float+0x188>
 8014fd2:	f1ba 0f01 	cmp.w	sl, #1
 8014fd6:	f47f af41 	bne.w	8014e5c <_scanf_float+0x60>
 8014fda:	f04f 0a02 	mov.w	sl, #2
 8014fde:	e7d1      	b.n	8014f84 <_scanf_float+0x188>
 8014fe0:	b97d      	cbnz	r5, 8015002 <_scanf_float+0x206>
 8014fe2:	f1b9 0f00 	cmp.w	r9, #0
 8014fe6:	f47f af3c 	bne.w	8014e62 <_scanf_float+0x66>
 8014fea:	6822      	ldr	r2, [r4, #0]
 8014fec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014ff0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014ff4:	f47f af39 	bne.w	8014e6a <_scanf_float+0x6e>
 8014ff8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014ffc:	6022      	str	r2, [r4, #0]
 8014ffe:	2501      	movs	r5, #1
 8015000:	e7c0      	b.n	8014f84 <_scanf_float+0x188>
 8015002:	2d03      	cmp	r5, #3
 8015004:	d0e2      	beq.n	8014fcc <_scanf_float+0x1d0>
 8015006:	2d05      	cmp	r5, #5
 8015008:	e7de      	b.n	8014fc8 <_scanf_float+0x1cc>
 801500a:	2d02      	cmp	r5, #2
 801500c:	f47f af26 	bne.w	8014e5c <_scanf_float+0x60>
 8015010:	2503      	movs	r5, #3
 8015012:	e7b7      	b.n	8014f84 <_scanf_float+0x188>
 8015014:	2d06      	cmp	r5, #6
 8015016:	f47f af21 	bne.w	8014e5c <_scanf_float+0x60>
 801501a:	2507      	movs	r5, #7
 801501c:	e7b2      	b.n	8014f84 <_scanf_float+0x188>
 801501e:	6822      	ldr	r2, [r4, #0]
 8015020:	0591      	lsls	r1, r2, #22
 8015022:	f57f af1b 	bpl.w	8014e5c <_scanf_float+0x60>
 8015026:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801502a:	6022      	str	r2, [r4, #0]
 801502c:	f8cd 9004 	str.w	r9, [sp, #4]
 8015030:	e7a8      	b.n	8014f84 <_scanf_float+0x188>
 8015032:	6822      	ldr	r2, [r4, #0]
 8015034:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015038:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801503c:	d006      	beq.n	801504c <_scanf_float+0x250>
 801503e:	0550      	lsls	r0, r2, #21
 8015040:	f57f af0c 	bpl.w	8014e5c <_scanf_float+0x60>
 8015044:	f1b9 0f00 	cmp.w	r9, #0
 8015048:	f43f af0f 	beq.w	8014e6a <_scanf_float+0x6e>
 801504c:	0591      	lsls	r1, r2, #22
 801504e:	bf58      	it	pl
 8015050:	9901      	ldrpl	r1, [sp, #4]
 8015052:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015056:	bf58      	it	pl
 8015058:	eba9 0101 	subpl.w	r1, r9, r1
 801505c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8015060:	bf58      	it	pl
 8015062:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015066:	6022      	str	r2, [r4, #0]
 8015068:	f04f 0900 	mov.w	r9, #0
 801506c:	e78a      	b.n	8014f84 <_scanf_float+0x188>
 801506e:	f04f 0a03 	mov.w	sl, #3
 8015072:	e787      	b.n	8014f84 <_scanf_float+0x188>
 8015074:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015078:	4639      	mov	r1, r7
 801507a:	4640      	mov	r0, r8
 801507c:	4798      	blx	r3
 801507e:	2800      	cmp	r0, #0
 8015080:	f43f aedf 	beq.w	8014e42 <_scanf_float+0x46>
 8015084:	e6ea      	b.n	8014e5c <_scanf_float+0x60>
 8015086:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801508a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801508e:	463a      	mov	r2, r7
 8015090:	4640      	mov	r0, r8
 8015092:	4798      	blx	r3
 8015094:	6923      	ldr	r3, [r4, #16]
 8015096:	3b01      	subs	r3, #1
 8015098:	6123      	str	r3, [r4, #16]
 801509a:	e6ec      	b.n	8014e76 <_scanf_float+0x7a>
 801509c:	1e6b      	subs	r3, r5, #1
 801509e:	2b06      	cmp	r3, #6
 80150a0:	d825      	bhi.n	80150ee <_scanf_float+0x2f2>
 80150a2:	2d02      	cmp	r5, #2
 80150a4:	d836      	bhi.n	8015114 <_scanf_float+0x318>
 80150a6:	455e      	cmp	r6, fp
 80150a8:	f67f aee8 	bls.w	8014e7c <_scanf_float+0x80>
 80150ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80150b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80150b4:	463a      	mov	r2, r7
 80150b6:	4640      	mov	r0, r8
 80150b8:	4798      	blx	r3
 80150ba:	6923      	ldr	r3, [r4, #16]
 80150bc:	3b01      	subs	r3, #1
 80150be:	6123      	str	r3, [r4, #16]
 80150c0:	e7f1      	b.n	80150a6 <_scanf_float+0x2aa>
 80150c2:	9802      	ldr	r0, [sp, #8]
 80150c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80150c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80150cc:	9002      	str	r0, [sp, #8]
 80150ce:	463a      	mov	r2, r7
 80150d0:	4640      	mov	r0, r8
 80150d2:	4798      	blx	r3
 80150d4:	6923      	ldr	r3, [r4, #16]
 80150d6:	3b01      	subs	r3, #1
 80150d8:	6123      	str	r3, [r4, #16]
 80150da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80150de:	fa5f fa8a 	uxtb.w	sl, sl
 80150e2:	f1ba 0f02 	cmp.w	sl, #2
 80150e6:	d1ec      	bne.n	80150c2 <_scanf_float+0x2c6>
 80150e8:	3d03      	subs	r5, #3
 80150ea:	b2ed      	uxtb	r5, r5
 80150ec:	1b76      	subs	r6, r6, r5
 80150ee:	6823      	ldr	r3, [r4, #0]
 80150f0:	05da      	lsls	r2, r3, #23
 80150f2:	d52f      	bpl.n	8015154 <_scanf_float+0x358>
 80150f4:	055b      	lsls	r3, r3, #21
 80150f6:	d510      	bpl.n	801511a <_scanf_float+0x31e>
 80150f8:	455e      	cmp	r6, fp
 80150fa:	f67f aebf 	bls.w	8014e7c <_scanf_float+0x80>
 80150fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015102:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015106:	463a      	mov	r2, r7
 8015108:	4640      	mov	r0, r8
 801510a:	4798      	blx	r3
 801510c:	6923      	ldr	r3, [r4, #16]
 801510e:	3b01      	subs	r3, #1
 8015110:	6123      	str	r3, [r4, #16]
 8015112:	e7f1      	b.n	80150f8 <_scanf_float+0x2fc>
 8015114:	46aa      	mov	sl, r5
 8015116:	9602      	str	r6, [sp, #8]
 8015118:	e7df      	b.n	80150da <_scanf_float+0x2de>
 801511a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801511e:	6923      	ldr	r3, [r4, #16]
 8015120:	2965      	cmp	r1, #101	; 0x65
 8015122:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8015126:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801512a:	6123      	str	r3, [r4, #16]
 801512c:	d00c      	beq.n	8015148 <_scanf_float+0x34c>
 801512e:	2945      	cmp	r1, #69	; 0x45
 8015130:	d00a      	beq.n	8015148 <_scanf_float+0x34c>
 8015132:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015136:	463a      	mov	r2, r7
 8015138:	4640      	mov	r0, r8
 801513a:	4798      	blx	r3
 801513c:	6923      	ldr	r3, [r4, #16]
 801513e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015142:	3b01      	subs	r3, #1
 8015144:	1eb5      	subs	r5, r6, #2
 8015146:	6123      	str	r3, [r4, #16]
 8015148:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801514c:	463a      	mov	r2, r7
 801514e:	4640      	mov	r0, r8
 8015150:	4798      	blx	r3
 8015152:	462e      	mov	r6, r5
 8015154:	6825      	ldr	r5, [r4, #0]
 8015156:	f015 0510 	ands.w	r5, r5, #16
 801515a:	d158      	bne.n	801520e <_scanf_float+0x412>
 801515c:	7035      	strb	r5, [r6, #0]
 801515e:	6823      	ldr	r3, [r4, #0]
 8015160:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015168:	d11c      	bne.n	80151a4 <_scanf_float+0x3a8>
 801516a:	9b01      	ldr	r3, [sp, #4]
 801516c:	454b      	cmp	r3, r9
 801516e:	eba3 0209 	sub.w	r2, r3, r9
 8015172:	d124      	bne.n	80151be <_scanf_float+0x3c2>
 8015174:	2200      	movs	r2, #0
 8015176:	4659      	mov	r1, fp
 8015178:	4640      	mov	r0, r8
 801517a:	f000 ff0d 	bl	8015f98 <_strtod_r>
 801517e:	9b03      	ldr	r3, [sp, #12]
 8015180:	6821      	ldr	r1, [r4, #0]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	f011 0f02 	tst.w	r1, #2
 8015188:	ec57 6b10 	vmov	r6, r7, d0
 801518c:	f103 0204 	add.w	r2, r3, #4
 8015190:	d020      	beq.n	80151d4 <_scanf_float+0x3d8>
 8015192:	9903      	ldr	r1, [sp, #12]
 8015194:	600a      	str	r2, [r1, #0]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	e9c3 6700 	strd	r6, r7, [r3]
 801519c:	68e3      	ldr	r3, [r4, #12]
 801519e:	3301      	adds	r3, #1
 80151a0:	60e3      	str	r3, [r4, #12]
 80151a2:	e66c      	b.n	8014e7e <_scanf_float+0x82>
 80151a4:	9b04      	ldr	r3, [sp, #16]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d0e4      	beq.n	8015174 <_scanf_float+0x378>
 80151aa:	9905      	ldr	r1, [sp, #20]
 80151ac:	230a      	movs	r3, #10
 80151ae:	462a      	mov	r2, r5
 80151b0:	3101      	adds	r1, #1
 80151b2:	4640      	mov	r0, r8
 80151b4:	f000 ff78 	bl	80160a8 <_strtol_r>
 80151b8:	9b04      	ldr	r3, [sp, #16]
 80151ba:	9e05      	ldr	r6, [sp, #20]
 80151bc:	1ac2      	subs	r2, r0, r3
 80151be:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80151c2:	429e      	cmp	r6, r3
 80151c4:	bf28      	it	cs
 80151c6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80151ca:	4912      	ldr	r1, [pc, #72]	; (8015214 <_scanf_float+0x418>)
 80151cc:	4630      	mov	r0, r6
 80151ce:	f000 f825 	bl	801521c <siprintf>
 80151d2:	e7cf      	b.n	8015174 <_scanf_float+0x378>
 80151d4:	f011 0f04 	tst.w	r1, #4
 80151d8:	9903      	ldr	r1, [sp, #12]
 80151da:	600a      	str	r2, [r1, #0]
 80151dc:	d1db      	bne.n	8015196 <_scanf_float+0x39a>
 80151de:	f8d3 8000 	ldr.w	r8, [r3]
 80151e2:	ee10 2a10 	vmov	r2, s0
 80151e6:	ee10 0a10 	vmov	r0, s0
 80151ea:	463b      	mov	r3, r7
 80151ec:	4639      	mov	r1, r7
 80151ee:	f7eb fc9d 	bl	8000b2c <__aeabi_dcmpun>
 80151f2:	b128      	cbz	r0, 8015200 <_scanf_float+0x404>
 80151f4:	4808      	ldr	r0, [pc, #32]	; (8015218 <_scanf_float+0x41c>)
 80151f6:	f000 ffe3 	bl	80161c0 <nanf>
 80151fa:	ed88 0a00 	vstr	s0, [r8]
 80151fe:	e7cd      	b.n	801519c <_scanf_float+0x3a0>
 8015200:	4630      	mov	r0, r6
 8015202:	4639      	mov	r1, r7
 8015204:	f7eb fcf0 	bl	8000be8 <__aeabi_d2f>
 8015208:	f8c8 0000 	str.w	r0, [r8]
 801520c:	e7c6      	b.n	801519c <_scanf_float+0x3a0>
 801520e:	2500      	movs	r5, #0
 8015210:	e635      	b.n	8014e7e <_scanf_float+0x82>
 8015212:	bf00      	nop
 8015214:	0801c704 	.word	0x0801c704
 8015218:	0801caf7 	.word	0x0801caf7

0801521c <siprintf>:
 801521c:	b40e      	push	{r1, r2, r3}
 801521e:	b500      	push	{lr}
 8015220:	b09c      	sub	sp, #112	; 0x70
 8015222:	ab1d      	add	r3, sp, #116	; 0x74
 8015224:	9002      	str	r0, [sp, #8]
 8015226:	9006      	str	r0, [sp, #24]
 8015228:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801522c:	4809      	ldr	r0, [pc, #36]	; (8015254 <siprintf+0x38>)
 801522e:	9107      	str	r1, [sp, #28]
 8015230:	9104      	str	r1, [sp, #16]
 8015232:	4909      	ldr	r1, [pc, #36]	; (8015258 <siprintf+0x3c>)
 8015234:	f853 2b04 	ldr.w	r2, [r3], #4
 8015238:	9105      	str	r1, [sp, #20]
 801523a:	6800      	ldr	r0, [r0, #0]
 801523c:	9301      	str	r3, [sp, #4]
 801523e:	a902      	add	r1, sp, #8
 8015240:	f002 f9f2 	bl	8017628 <_svfiprintf_r>
 8015244:	9b02      	ldr	r3, [sp, #8]
 8015246:	2200      	movs	r2, #0
 8015248:	701a      	strb	r2, [r3, #0]
 801524a:	b01c      	add	sp, #112	; 0x70
 801524c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015250:	b003      	add	sp, #12
 8015252:	4770      	bx	lr
 8015254:	200001ec 	.word	0x200001ec
 8015258:	ffff0208 	.word	0xffff0208

0801525c <std>:
 801525c:	2300      	movs	r3, #0
 801525e:	b510      	push	{r4, lr}
 8015260:	4604      	mov	r4, r0
 8015262:	e9c0 3300 	strd	r3, r3, [r0]
 8015266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801526a:	6083      	str	r3, [r0, #8]
 801526c:	8181      	strh	r1, [r0, #12]
 801526e:	6643      	str	r3, [r0, #100]	; 0x64
 8015270:	81c2      	strh	r2, [r0, #14]
 8015272:	6183      	str	r3, [r0, #24]
 8015274:	4619      	mov	r1, r3
 8015276:	2208      	movs	r2, #8
 8015278:	305c      	adds	r0, #92	; 0x5c
 801527a:	f000 ff51 	bl	8016120 <memset>
 801527e:	4b05      	ldr	r3, [pc, #20]	; (8015294 <std+0x38>)
 8015280:	6263      	str	r3, [r4, #36]	; 0x24
 8015282:	4b05      	ldr	r3, [pc, #20]	; (8015298 <std+0x3c>)
 8015284:	62a3      	str	r3, [r4, #40]	; 0x28
 8015286:	4b05      	ldr	r3, [pc, #20]	; (801529c <std+0x40>)
 8015288:	62e3      	str	r3, [r4, #44]	; 0x2c
 801528a:	4b05      	ldr	r3, [pc, #20]	; (80152a0 <std+0x44>)
 801528c:	6224      	str	r4, [r4, #32]
 801528e:	6323      	str	r3, [r4, #48]	; 0x30
 8015290:	bd10      	pop	{r4, pc}
 8015292:	bf00      	nop
 8015294:	08018467 	.word	0x08018467
 8015298:	08018489 	.word	0x08018489
 801529c:	080184c1 	.word	0x080184c1
 80152a0:	080184e5 	.word	0x080184e5

080152a4 <stdio_exit_handler>:
 80152a4:	4a02      	ldr	r2, [pc, #8]	; (80152b0 <stdio_exit_handler+0xc>)
 80152a6:	4903      	ldr	r1, [pc, #12]	; (80152b4 <stdio_exit_handler+0x10>)
 80152a8:	4803      	ldr	r0, [pc, #12]	; (80152b8 <stdio_exit_handler+0x14>)
 80152aa:	f000 bf09 	b.w	80160c0 <_fwalk_sglue>
 80152ae:	bf00      	nop
 80152b0:	20000028 	.word	0x20000028
 80152b4:	08017aa5 	.word	0x08017aa5
 80152b8:	200001a0 	.word	0x200001a0

080152bc <cleanup_stdio>:
 80152bc:	6841      	ldr	r1, [r0, #4]
 80152be:	4b0c      	ldr	r3, [pc, #48]	; (80152f0 <cleanup_stdio+0x34>)
 80152c0:	4299      	cmp	r1, r3
 80152c2:	b510      	push	{r4, lr}
 80152c4:	4604      	mov	r4, r0
 80152c6:	d001      	beq.n	80152cc <cleanup_stdio+0x10>
 80152c8:	f002 fbec 	bl	8017aa4 <_fflush_r>
 80152cc:	68a1      	ldr	r1, [r4, #8]
 80152ce:	4b09      	ldr	r3, [pc, #36]	; (80152f4 <cleanup_stdio+0x38>)
 80152d0:	4299      	cmp	r1, r3
 80152d2:	d002      	beq.n	80152da <cleanup_stdio+0x1e>
 80152d4:	4620      	mov	r0, r4
 80152d6:	f002 fbe5 	bl	8017aa4 <_fflush_r>
 80152da:	68e1      	ldr	r1, [r4, #12]
 80152dc:	4b06      	ldr	r3, [pc, #24]	; (80152f8 <cleanup_stdio+0x3c>)
 80152de:	4299      	cmp	r1, r3
 80152e0:	d004      	beq.n	80152ec <cleanup_stdio+0x30>
 80152e2:	4620      	mov	r0, r4
 80152e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152e8:	f002 bbdc 	b.w	8017aa4 <_fflush_r>
 80152ec:	bd10      	pop	{r4, pc}
 80152ee:	bf00      	nop
 80152f0:	20003174 	.word	0x20003174
 80152f4:	200031dc 	.word	0x200031dc
 80152f8:	20003244 	.word	0x20003244

080152fc <global_stdio_init.part.0>:
 80152fc:	b510      	push	{r4, lr}
 80152fe:	4b0b      	ldr	r3, [pc, #44]	; (801532c <global_stdio_init.part.0+0x30>)
 8015300:	4c0b      	ldr	r4, [pc, #44]	; (8015330 <global_stdio_init.part.0+0x34>)
 8015302:	4a0c      	ldr	r2, [pc, #48]	; (8015334 <global_stdio_init.part.0+0x38>)
 8015304:	601a      	str	r2, [r3, #0]
 8015306:	4620      	mov	r0, r4
 8015308:	2200      	movs	r2, #0
 801530a:	2104      	movs	r1, #4
 801530c:	f7ff ffa6 	bl	801525c <std>
 8015310:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015314:	2201      	movs	r2, #1
 8015316:	2109      	movs	r1, #9
 8015318:	f7ff ffa0 	bl	801525c <std>
 801531c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015320:	2202      	movs	r2, #2
 8015322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015326:	2112      	movs	r1, #18
 8015328:	f7ff bf98 	b.w	801525c <std>
 801532c:	200032ac 	.word	0x200032ac
 8015330:	20003174 	.word	0x20003174
 8015334:	080152a5 	.word	0x080152a5

08015338 <__sfp_lock_acquire>:
 8015338:	4801      	ldr	r0, [pc, #4]	; (8015340 <__sfp_lock_acquire+0x8>)
 801533a:	f000 bf27 	b.w	801618c <__retarget_lock_acquire_recursive>
 801533e:	bf00      	nop
 8015340:	200032b1 	.word	0x200032b1

08015344 <__sfp_lock_release>:
 8015344:	4801      	ldr	r0, [pc, #4]	; (801534c <__sfp_lock_release+0x8>)
 8015346:	f000 bf22 	b.w	801618e <__retarget_lock_release_recursive>
 801534a:	bf00      	nop
 801534c:	200032b1 	.word	0x200032b1

08015350 <__sinit>:
 8015350:	b510      	push	{r4, lr}
 8015352:	4604      	mov	r4, r0
 8015354:	f7ff fff0 	bl	8015338 <__sfp_lock_acquire>
 8015358:	6a23      	ldr	r3, [r4, #32]
 801535a:	b11b      	cbz	r3, 8015364 <__sinit+0x14>
 801535c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015360:	f7ff bff0 	b.w	8015344 <__sfp_lock_release>
 8015364:	4b04      	ldr	r3, [pc, #16]	; (8015378 <__sinit+0x28>)
 8015366:	6223      	str	r3, [r4, #32]
 8015368:	4b04      	ldr	r3, [pc, #16]	; (801537c <__sinit+0x2c>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d1f5      	bne.n	801535c <__sinit+0xc>
 8015370:	f7ff ffc4 	bl	80152fc <global_stdio_init.part.0>
 8015374:	e7f2      	b.n	801535c <__sinit+0xc>
 8015376:	bf00      	nop
 8015378:	080152bd 	.word	0x080152bd
 801537c:	200032ac 	.word	0x200032ac

08015380 <sulp>:
 8015380:	b570      	push	{r4, r5, r6, lr}
 8015382:	4604      	mov	r4, r0
 8015384:	460d      	mov	r5, r1
 8015386:	ec45 4b10 	vmov	d0, r4, r5
 801538a:	4616      	mov	r6, r2
 801538c:	f002 ff2a 	bl	80181e4 <__ulp>
 8015390:	ec51 0b10 	vmov	r0, r1, d0
 8015394:	b17e      	cbz	r6, 80153b6 <sulp+0x36>
 8015396:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801539a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801539e:	2b00      	cmp	r3, #0
 80153a0:	dd09      	ble.n	80153b6 <sulp+0x36>
 80153a2:	051b      	lsls	r3, r3, #20
 80153a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80153a8:	2400      	movs	r4, #0
 80153aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80153ae:	4622      	mov	r2, r4
 80153b0:	462b      	mov	r3, r5
 80153b2:	f7eb f921 	bl	80005f8 <__aeabi_dmul>
 80153b6:	bd70      	pop	{r4, r5, r6, pc}

080153b8 <_strtod_l>:
 80153b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153bc:	ed2d 8b02 	vpush	{d8}
 80153c0:	b09b      	sub	sp, #108	; 0x6c
 80153c2:	4604      	mov	r4, r0
 80153c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80153c6:	2200      	movs	r2, #0
 80153c8:	9216      	str	r2, [sp, #88]	; 0x58
 80153ca:	460d      	mov	r5, r1
 80153cc:	f04f 0800 	mov.w	r8, #0
 80153d0:	f04f 0900 	mov.w	r9, #0
 80153d4:	460a      	mov	r2, r1
 80153d6:	9215      	str	r2, [sp, #84]	; 0x54
 80153d8:	7811      	ldrb	r1, [r2, #0]
 80153da:	292b      	cmp	r1, #43	; 0x2b
 80153dc:	d04c      	beq.n	8015478 <_strtod_l+0xc0>
 80153de:	d83a      	bhi.n	8015456 <_strtod_l+0x9e>
 80153e0:	290d      	cmp	r1, #13
 80153e2:	d834      	bhi.n	801544e <_strtod_l+0x96>
 80153e4:	2908      	cmp	r1, #8
 80153e6:	d834      	bhi.n	8015452 <_strtod_l+0x9a>
 80153e8:	2900      	cmp	r1, #0
 80153ea:	d03d      	beq.n	8015468 <_strtod_l+0xb0>
 80153ec:	2200      	movs	r2, #0
 80153ee:	920a      	str	r2, [sp, #40]	; 0x28
 80153f0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80153f2:	7832      	ldrb	r2, [r6, #0]
 80153f4:	2a30      	cmp	r2, #48	; 0x30
 80153f6:	f040 80b4 	bne.w	8015562 <_strtod_l+0x1aa>
 80153fa:	7872      	ldrb	r2, [r6, #1]
 80153fc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015400:	2a58      	cmp	r2, #88	; 0x58
 8015402:	d170      	bne.n	80154e6 <_strtod_l+0x12e>
 8015404:	9302      	str	r3, [sp, #8]
 8015406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015408:	9301      	str	r3, [sp, #4]
 801540a:	ab16      	add	r3, sp, #88	; 0x58
 801540c:	9300      	str	r3, [sp, #0]
 801540e:	4a8e      	ldr	r2, [pc, #568]	; (8015648 <_strtod_l+0x290>)
 8015410:	ab17      	add	r3, sp, #92	; 0x5c
 8015412:	a915      	add	r1, sp, #84	; 0x54
 8015414:	4620      	mov	r0, r4
 8015416:	f001 fdbd 	bl	8016f94 <__gethex>
 801541a:	f010 070f 	ands.w	r7, r0, #15
 801541e:	4605      	mov	r5, r0
 8015420:	d005      	beq.n	801542e <_strtod_l+0x76>
 8015422:	2f06      	cmp	r7, #6
 8015424:	d12a      	bne.n	801547c <_strtod_l+0xc4>
 8015426:	3601      	adds	r6, #1
 8015428:	2300      	movs	r3, #0
 801542a:	9615      	str	r6, [sp, #84]	; 0x54
 801542c:	930a      	str	r3, [sp, #40]	; 0x28
 801542e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015430:	2b00      	cmp	r3, #0
 8015432:	f040 857f 	bne.w	8015f34 <_strtod_l+0xb7c>
 8015436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015438:	b1db      	cbz	r3, 8015472 <_strtod_l+0xba>
 801543a:	4642      	mov	r2, r8
 801543c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015440:	ec43 2b10 	vmov	d0, r2, r3
 8015444:	b01b      	add	sp, #108	; 0x6c
 8015446:	ecbd 8b02 	vpop	{d8}
 801544a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801544e:	2920      	cmp	r1, #32
 8015450:	d1cc      	bne.n	80153ec <_strtod_l+0x34>
 8015452:	3201      	adds	r2, #1
 8015454:	e7bf      	b.n	80153d6 <_strtod_l+0x1e>
 8015456:	292d      	cmp	r1, #45	; 0x2d
 8015458:	d1c8      	bne.n	80153ec <_strtod_l+0x34>
 801545a:	2101      	movs	r1, #1
 801545c:	910a      	str	r1, [sp, #40]	; 0x28
 801545e:	1c51      	adds	r1, r2, #1
 8015460:	9115      	str	r1, [sp, #84]	; 0x54
 8015462:	7852      	ldrb	r2, [r2, #1]
 8015464:	2a00      	cmp	r2, #0
 8015466:	d1c3      	bne.n	80153f0 <_strtod_l+0x38>
 8015468:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801546a:	9515      	str	r5, [sp, #84]	; 0x54
 801546c:	2b00      	cmp	r3, #0
 801546e:	f040 855f 	bne.w	8015f30 <_strtod_l+0xb78>
 8015472:	4642      	mov	r2, r8
 8015474:	464b      	mov	r3, r9
 8015476:	e7e3      	b.n	8015440 <_strtod_l+0x88>
 8015478:	2100      	movs	r1, #0
 801547a:	e7ef      	b.n	801545c <_strtod_l+0xa4>
 801547c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801547e:	b13a      	cbz	r2, 8015490 <_strtod_l+0xd8>
 8015480:	2135      	movs	r1, #53	; 0x35
 8015482:	a818      	add	r0, sp, #96	; 0x60
 8015484:	f002 ffab 	bl	80183de <__copybits>
 8015488:	9916      	ldr	r1, [sp, #88]	; 0x58
 801548a:	4620      	mov	r0, r4
 801548c:	f002 fb7e 	bl	8017b8c <_Bfree>
 8015490:	3f01      	subs	r7, #1
 8015492:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015494:	2f04      	cmp	r7, #4
 8015496:	d806      	bhi.n	80154a6 <_strtod_l+0xee>
 8015498:	e8df f007 	tbb	[pc, r7]
 801549c:	201d0314 	.word	0x201d0314
 80154a0:	14          	.byte	0x14
 80154a1:	00          	.byte	0x00
 80154a2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80154a6:	05e9      	lsls	r1, r5, #23
 80154a8:	bf48      	it	mi
 80154aa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80154ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80154b2:	0d1b      	lsrs	r3, r3, #20
 80154b4:	051b      	lsls	r3, r3, #20
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d1b9      	bne.n	801542e <_strtod_l+0x76>
 80154ba:	f000 fe3d 	bl	8016138 <__errno>
 80154be:	2322      	movs	r3, #34	; 0x22
 80154c0:	6003      	str	r3, [r0, #0]
 80154c2:	e7b4      	b.n	801542e <_strtod_l+0x76>
 80154c4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80154c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80154cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80154d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80154d4:	e7e7      	b.n	80154a6 <_strtod_l+0xee>
 80154d6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015650 <_strtod_l+0x298>
 80154da:	e7e4      	b.n	80154a6 <_strtod_l+0xee>
 80154dc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80154e0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80154e4:	e7df      	b.n	80154a6 <_strtod_l+0xee>
 80154e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154e8:	1c5a      	adds	r2, r3, #1
 80154ea:	9215      	str	r2, [sp, #84]	; 0x54
 80154ec:	785b      	ldrb	r3, [r3, #1]
 80154ee:	2b30      	cmp	r3, #48	; 0x30
 80154f0:	d0f9      	beq.n	80154e6 <_strtod_l+0x12e>
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d09b      	beq.n	801542e <_strtod_l+0x76>
 80154f6:	2301      	movs	r3, #1
 80154f8:	f04f 0a00 	mov.w	sl, #0
 80154fc:	9304      	str	r3, [sp, #16]
 80154fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015500:	930b      	str	r3, [sp, #44]	; 0x2c
 8015502:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015506:	46d3      	mov	fp, sl
 8015508:	220a      	movs	r2, #10
 801550a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801550c:	7806      	ldrb	r6, [r0, #0]
 801550e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015512:	b2d9      	uxtb	r1, r3
 8015514:	2909      	cmp	r1, #9
 8015516:	d926      	bls.n	8015566 <_strtod_l+0x1ae>
 8015518:	494c      	ldr	r1, [pc, #304]	; (801564c <_strtod_l+0x294>)
 801551a:	2201      	movs	r2, #1
 801551c:	f000 fdee 	bl	80160fc <strncmp>
 8015520:	2800      	cmp	r0, #0
 8015522:	d030      	beq.n	8015586 <_strtod_l+0x1ce>
 8015524:	2000      	movs	r0, #0
 8015526:	4632      	mov	r2, r6
 8015528:	9005      	str	r0, [sp, #20]
 801552a:	465e      	mov	r6, fp
 801552c:	4603      	mov	r3, r0
 801552e:	2a65      	cmp	r2, #101	; 0x65
 8015530:	d001      	beq.n	8015536 <_strtod_l+0x17e>
 8015532:	2a45      	cmp	r2, #69	; 0x45
 8015534:	d113      	bne.n	801555e <_strtod_l+0x1a6>
 8015536:	b91e      	cbnz	r6, 8015540 <_strtod_l+0x188>
 8015538:	9a04      	ldr	r2, [sp, #16]
 801553a:	4302      	orrs	r2, r0
 801553c:	d094      	beq.n	8015468 <_strtod_l+0xb0>
 801553e:	2600      	movs	r6, #0
 8015540:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015542:	1c6a      	adds	r2, r5, #1
 8015544:	9215      	str	r2, [sp, #84]	; 0x54
 8015546:	786a      	ldrb	r2, [r5, #1]
 8015548:	2a2b      	cmp	r2, #43	; 0x2b
 801554a:	d074      	beq.n	8015636 <_strtod_l+0x27e>
 801554c:	2a2d      	cmp	r2, #45	; 0x2d
 801554e:	d078      	beq.n	8015642 <_strtod_l+0x28a>
 8015550:	f04f 0c00 	mov.w	ip, #0
 8015554:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015558:	2909      	cmp	r1, #9
 801555a:	d97f      	bls.n	801565c <_strtod_l+0x2a4>
 801555c:	9515      	str	r5, [sp, #84]	; 0x54
 801555e:	2700      	movs	r7, #0
 8015560:	e09e      	b.n	80156a0 <_strtod_l+0x2e8>
 8015562:	2300      	movs	r3, #0
 8015564:	e7c8      	b.n	80154f8 <_strtod_l+0x140>
 8015566:	f1bb 0f08 	cmp.w	fp, #8
 801556a:	bfd8      	it	le
 801556c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801556e:	f100 0001 	add.w	r0, r0, #1
 8015572:	bfda      	itte	le
 8015574:	fb02 3301 	mlale	r3, r2, r1, r3
 8015578:	9309      	strle	r3, [sp, #36]	; 0x24
 801557a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801557e:	f10b 0b01 	add.w	fp, fp, #1
 8015582:	9015      	str	r0, [sp, #84]	; 0x54
 8015584:	e7c1      	b.n	801550a <_strtod_l+0x152>
 8015586:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015588:	1c5a      	adds	r2, r3, #1
 801558a:	9215      	str	r2, [sp, #84]	; 0x54
 801558c:	785a      	ldrb	r2, [r3, #1]
 801558e:	f1bb 0f00 	cmp.w	fp, #0
 8015592:	d037      	beq.n	8015604 <_strtod_l+0x24c>
 8015594:	9005      	str	r0, [sp, #20]
 8015596:	465e      	mov	r6, fp
 8015598:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801559c:	2b09      	cmp	r3, #9
 801559e:	d912      	bls.n	80155c6 <_strtod_l+0x20e>
 80155a0:	2301      	movs	r3, #1
 80155a2:	e7c4      	b.n	801552e <_strtod_l+0x176>
 80155a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155a6:	1c5a      	adds	r2, r3, #1
 80155a8:	9215      	str	r2, [sp, #84]	; 0x54
 80155aa:	785a      	ldrb	r2, [r3, #1]
 80155ac:	3001      	adds	r0, #1
 80155ae:	2a30      	cmp	r2, #48	; 0x30
 80155b0:	d0f8      	beq.n	80155a4 <_strtod_l+0x1ec>
 80155b2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80155b6:	2b08      	cmp	r3, #8
 80155b8:	f200 84c1 	bhi.w	8015f3e <_strtod_l+0xb86>
 80155bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155be:	9005      	str	r0, [sp, #20]
 80155c0:	2000      	movs	r0, #0
 80155c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80155c4:	4606      	mov	r6, r0
 80155c6:	3a30      	subs	r2, #48	; 0x30
 80155c8:	f100 0301 	add.w	r3, r0, #1
 80155cc:	d014      	beq.n	80155f8 <_strtod_l+0x240>
 80155ce:	9905      	ldr	r1, [sp, #20]
 80155d0:	4419      	add	r1, r3
 80155d2:	9105      	str	r1, [sp, #20]
 80155d4:	4633      	mov	r3, r6
 80155d6:	eb00 0c06 	add.w	ip, r0, r6
 80155da:	210a      	movs	r1, #10
 80155dc:	4563      	cmp	r3, ip
 80155de:	d113      	bne.n	8015608 <_strtod_l+0x250>
 80155e0:	1833      	adds	r3, r6, r0
 80155e2:	2b08      	cmp	r3, #8
 80155e4:	f106 0601 	add.w	r6, r6, #1
 80155e8:	4406      	add	r6, r0
 80155ea:	dc1a      	bgt.n	8015622 <_strtod_l+0x26a>
 80155ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80155ee:	230a      	movs	r3, #10
 80155f0:	fb03 2301 	mla	r3, r3, r1, r2
 80155f4:	9309      	str	r3, [sp, #36]	; 0x24
 80155f6:	2300      	movs	r3, #0
 80155f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80155fa:	1c51      	adds	r1, r2, #1
 80155fc:	9115      	str	r1, [sp, #84]	; 0x54
 80155fe:	7852      	ldrb	r2, [r2, #1]
 8015600:	4618      	mov	r0, r3
 8015602:	e7c9      	b.n	8015598 <_strtod_l+0x1e0>
 8015604:	4658      	mov	r0, fp
 8015606:	e7d2      	b.n	80155ae <_strtod_l+0x1f6>
 8015608:	2b08      	cmp	r3, #8
 801560a:	f103 0301 	add.w	r3, r3, #1
 801560e:	dc03      	bgt.n	8015618 <_strtod_l+0x260>
 8015610:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015612:	434f      	muls	r7, r1
 8015614:	9709      	str	r7, [sp, #36]	; 0x24
 8015616:	e7e1      	b.n	80155dc <_strtod_l+0x224>
 8015618:	2b10      	cmp	r3, #16
 801561a:	bfd8      	it	le
 801561c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015620:	e7dc      	b.n	80155dc <_strtod_l+0x224>
 8015622:	2e10      	cmp	r6, #16
 8015624:	bfdc      	itt	le
 8015626:	230a      	movle	r3, #10
 8015628:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801562c:	e7e3      	b.n	80155f6 <_strtod_l+0x23e>
 801562e:	2300      	movs	r3, #0
 8015630:	9305      	str	r3, [sp, #20]
 8015632:	2301      	movs	r3, #1
 8015634:	e780      	b.n	8015538 <_strtod_l+0x180>
 8015636:	f04f 0c00 	mov.w	ip, #0
 801563a:	1caa      	adds	r2, r5, #2
 801563c:	9215      	str	r2, [sp, #84]	; 0x54
 801563e:	78aa      	ldrb	r2, [r5, #2]
 8015640:	e788      	b.n	8015554 <_strtod_l+0x19c>
 8015642:	f04f 0c01 	mov.w	ip, #1
 8015646:	e7f8      	b.n	801563a <_strtod_l+0x282>
 8015648:	0801c70c 	.word	0x0801c70c
 801564c:	0801c709 	.word	0x0801c709
 8015650:	7ff00000 	.word	0x7ff00000
 8015654:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015656:	1c51      	adds	r1, r2, #1
 8015658:	9115      	str	r1, [sp, #84]	; 0x54
 801565a:	7852      	ldrb	r2, [r2, #1]
 801565c:	2a30      	cmp	r2, #48	; 0x30
 801565e:	d0f9      	beq.n	8015654 <_strtod_l+0x29c>
 8015660:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8015664:	2908      	cmp	r1, #8
 8015666:	f63f af7a 	bhi.w	801555e <_strtod_l+0x1a6>
 801566a:	3a30      	subs	r2, #48	; 0x30
 801566c:	9208      	str	r2, [sp, #32]
 801566e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015670:	920c      	str	r2, [sp, #48]	; 0x30
 8015672:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015674:	1c57      	adds	r7, r2, #1
 8015676:	9715      	str	r7, [sp, #84]	; 0x54
 8015678:	7852      	ldrb	r2, [r2, #1]
 801567a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801567e:	f1be 0f09 	cmp.w	lr, #9
 8015682:	d938      	bls.n	80156f6 <_strtod_l+0x33e>
 8015684:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015686:	1a7f      	subs	r7, r7, r1
 8015688:	2f08      	cmp	r7, #8
 801568a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801568e:	dc03      	bgt.n	8015698 <_strtod_l+0x2e0>
 8015690:	9908      	ldr	r1, [sp, #32]
 8015692:	428f      	cmp	r7, r1
 8015694:	bfa8      	it	ge
 8015696:	460f      	movge	r7, r1
 8015698:	f1bc 0f00 	cmp.w	ip, #0
 801569c:	d000      	beq.n	80156a0 <_strtod_l+0x2e8>
 801569e:	427f      	negs	r7, r7
 80156a0:	2e00      	cmp	r6, #0
 80156a2:	d14f      	bne.n	8015744 <_strtod_l+0x38c>
 80156a4:	9904      	ldr	r1, [sp, #16]
 80156a6:	4301      	orrs	r1, r0
 80156a8:	f47f aec1 	bne.w	801542e <_strtod_l+0x76>
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	f47f aedb 	bne.w	8015468 <_strtod_l+0xb0>
 80156b2:	2a69      	cmp	r2, #105	; 0x69
 80156b4:	d029      	beq.n	801570a <_strtod_l+0x352>
 80156b6:	dc26      	bgt.n	8015706 <_strtod_l+0x34e>
 80156b8:	2a49      	cmp	r2, #73	; 0x49
 80156ba:	d026      	beq.n	801570a <_strtod_l+0x352>
 80156bc:	2a4e      	cmp	r2, #78	; 0x4e
 80156be:	f47f aed3 	bne.w	8015468 <_strtod_l+0xb0>
 80156c2:	499b      	ldr	r1, [pc, #620]	; (8015930 <_strtod_l+0x578>)
 80156c4:	a815      	add	r0, sp, #84	; 0x54
 80156c6:	f001 fea5 	bl	8017414 <__match>
 80156ca:	2800      	cmp	r0, #0
 80156cc:	f43f aecc 	beq.w	8015468 <_strtod_l+0xb0>
 80156d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80156d2:	781b      	ldrb	r3, [r3, #0]
 80156d4:	2b28      	cmp	r3, #40	; 0x28
 80156d6:	d12f      	bne.n	8015738 <_strtod_l+0x380>
 80156d8:	4996      	ldr	r1, [pc, #600]	; (8015934 <_strtod_l+0x57c>)
 80156da:	aa18      	add	r2, sp, #96	; 0x60
 80156dc:	a815      	add	r0, sp, #84	; 0x54
 80156de:	f001 fead 	bl	801743c <__hexnan>
 80156e2:	2805      	cmp	r0, #5
 80156e4:	d128      	bne.n	8015738 <_strtod_l+0x380>
 80156e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80156e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80156ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80156f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80156f4:	e69b      	b.n	801542e <_strtod_l+0x76>
 80156f6:	9f08      	ldr	r7, [sp, #32]
 80156f8:	210a      	movs	r1, #10
 80156fa:	fb01 2107 	mla	r1, r1, r7, r2
 80156fe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015702:	9208      	str	r2, [sp, #32]
 8015704:	e7b5      	b.n	8015672 <_strtod_l+0x2ba>
 8015706:	2a6e      	cmp	r2, #110	; 0x6e
 8015708:	e7d9      	b.n	80156be <_strtod_l+0x306>
 801570a:	498b      	ldr	r1, [pc, #556]	; (8015938 <_strtod_l+0x580>)
 801570c:	a815      	add	r0, sp, #84	; 0x54
 801570e:	f001 fe81 	bl	8017414 <__match>
 8015712:	2800      	cmp	r0, #0
 8015714:	f43f aea8 	beq.w	8015468 <_strtod_l+0xb0>
 8015718:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801571a:	4988      	ldr	r1, [pc, #544]	; (801593c <_strtod_l+0x584>)
 801571c:	3b01      	subs	r3, #1
 801571e:	a815      	add	r0, sp, #84	; 0x54
 8015720:	9315      	str	r3, [sp, #84]	; 0x54
 8015722:	f001 fe77 	bl	8017414 <__match>
 8015726:	b910      	cbnz	r0, 801572e <_strtod_l+0x376>
 8015728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801572a:	3301      	adds	r3, #1
 801572c:	9315      	str	r3, [sp, #84]	; 0x54
 801572e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801594c <_strtod_l+0x594>
 8015732:	f04f 0800 	mov.w	r8, #0
 8015736:	e67a      	b.n	801542e <_strtod_l+0x76>
 8015738:	4881      	ldr	r0, [pc, #516]	; (8015940 <_strtod_l+0x588>)
 801573a:	f000 fd39 	bl	80161b0 <nan>
 801573e:	ec59 8b10 	vmov	r8, r9, d0
 8015742:	e674      	b.n	801542e <_strtod_l+0x76>
 8015744:	9b05      	ldr	r3, [sp, #20]
 8015746:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015748:	1afb      	subs	r3, r7, r3
 801574a:	f1bb 0f00 	cmp.w	fp, #0
 801574e:	bf08      	it	eq
 8015750:	46b3      	moveq	fp, r6
 8015752:	2e10      	cmp	r6, #16
 8015754:	9308      	str	r3, [sp, #32]
 8015756:	4635      	mov	r5, r6
 8015758:	bfa8      	it	ge
 801575a:	2510      	movge	r5, #16
 801575c:	f7ea fed2 	bl	8000504 <__aeabi_ui2d>
 8015760:	2e09      	cmp	r6, #9
 8015762:	4680      	mov	r8, r0
 8015764:	4689      	mov	r9, r1
 8015766:	dd13      	ble.n	8015790 <_strtod_l+0x3d8>
 8015768:	4b76      	ldr	r3, [pc, #472]	; (8015944 <_strtod_l+0x58c>)
 801576a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801576e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015772:	f7ea ff41 	bl	80005f8 <__aeabi_dmul>
 8015776:	4680      	mov	r8, r0
 8015778:	4650      	mov	r0, sl
 801577a:	4689      	mov	r9, r1
 801577c:	f7ea fec2 	bl	8000504 <__aeabi_ui2d>
 8015780:	4602      	mov	r2, r0
 8015782:	460b      	mov	r3, r1
 8015784:	4640      	mov	r0, r8
 8015786:	4649      	mov	r1, r9
 8015788:	f7ea fd80 	bl	800028c <__adddf3>
 801578c:	4680      	mov	r8, r0
 801578e:	4689      	mov	r9, r1
 8015790:	2e0f      	cmp	r6, #15
 8015792:	dc38      	bgt.n	8015806 <_strtod_l+0x44e>
 8015794:	9b08      	ldr	r3, [sp, #32]
 8015796:	2b00      	cmp	r3, #0
 8015798:	f43f ae49 	beq.w	801542e <_strtod_l+0x76>
 801579c:	dd24      	ble.n	80157e8 <_strtod_l+0x430>
 801579e:	2b16      	cmp	r3, #22
 80157a0:	dc0b      	bgt.n	80157ba <_strtod_l+0x402>
 80157a2:	4968      	ldr	r1, [pc, #416]	; (8015944 <_strtod_l+0x58c>)
 80157a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80157a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157ac:	4642      	mov	r2, r8
 80157ae:	464b      	mov	r3, r9
 80157b0:	f7ea ff22 	bl	80005f8 <__aeabi_dmul>
 80157b4:	4680      	mov	r8, r0
 80157b6:	4689      	mov	r9, r1
 80157b8:	e639      	b.n	801542e <_strtod_l+0x76>
 80157ba:	9a08      	ldr	r2, [sp, #32]
 80157bc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80157c0:	4293      	cmp	r3, r2
 80157c2:	db20      	blt.n	8015806 <_strtod_l+0x44e>
 80157c4:	4c5f      	ldr	r4, [pc, #380]	; (8015944 <_strtod_l+0x58c>)
 80157c6:	f1c6 060f 	rsb	r6, r6, #15
 80157ca:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80157ce:	4642      	mov	r2, r8
 80157d0:	464b      	mov	r3, r9
 80157d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157d6:	f7ea ff0f 	bl	80005f8 <__aeabi_dmul>
 80157da:	9b08      	ldr	r3, [sp, #32]
 80157dc:	1b9e      	subs	r6, r3, r6
 80157de:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80157e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80157e6:	e7e3      	b.n	80157b0 <_strtod_l+0x3f8>
 80157e8:	9b08      	ldr	r3, [sp, #32]
 80157ea:	3316      	adds	r3, #22
 80157ec:	db0b      	blt.n	8015806 <_strtod_l+0x44e>
 80157ee:	9b05      	ldr	r3, [sp, #20]
 80157f0:	1bdf      	subs	r7, r3, r7
 80157f2:	4b54      	ldr	r3, [pc, #336]	; (8015944 <_strtod_l+0x58c>)
 80157f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80157f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80157fc:	4640      	mov	r0, r8
 80157fe:	4649      	mov	r1, r9
 8015800:	f7eb f824 	bl	800084c <__aeabi_ddiv>
 8015804:	e7d6      	b.n	80157b4 <_strtod_l+0x3fc>
 8015806:	9b08      	ldr	r3, [sp, #32]
 8015808:	1b75      	subs	r5, r6, r5
 801580a:	441d      	add	r5, r3
 801580c:	2d00      	cmp	r5, #0
 801580e:	dd70      	ble.n	80158f2 <_strtod_l+0x53a>
 8015810:	f015 030f 	ands.w	r3, r5, #15
 8015814:	d00a      	beq.n	801582c <_strtod_l+0x474>
 8015816:	494b      	ldr	r1, [pc, #300]	; (8015944 <_strtod_l+0x58c>)
 8015818:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801581c:	4642      	mov	r2, r8
 801581e:	464b      	mov	r3, r9
 8015820:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015824:	f7ea fee8 	bl	80005f8 <__aeabi_dmul>
 8015828:	4680      	mov	r8, r0
 801582a:	4689      	mov	r9, r1
 801582c:	f035 050f 	bics.w	r5, r5, #15
 8015830:	d04d      	beq.n	80158ce <_strtod_l+0x516>
 8015832:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8015836:	dd22      	ble.n	801587e <_strtod_l+0x4c6>
 8015838:	2500      	movs	r5, #0
 801583a:	46ab      	mov	fp, r5
 801583c:	9509      	str	r5, [sp, #36]	; 0x24
 801583e:	9505      	str	r5, [sp, #20]
 8015840:	2322      	movs	r3, #34	; 0x22
 8015842:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801594c <_strtod_l+0x594>
 8015846:	6023      	str	r3, [r4, #0]
 8015848:	f04f 0800 	mov.w	r8, #0
 801584c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801584e:	2b00      	cmp	r3, #0
 8015850:	f43f aded 	beq.w	801542e <_strtod_l+0x76>
 8015854:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015856:	4620      	mov	r0, r4
 8015858:	f002 f998 	bl	8017b8c <_Bfree>
 801585c:	9905      	ldr	r1, [sp, #20]
 801585e:	4620      	mov	r0, r4
 8015860:	f002 f994 	bl	8017b8c <_Bfree>
 8015864:	4659      	mov	r1, fp
 8015866:	4620      	mov	r0, r4
 8015868:	f002 f990 	bl	8017b8c <_Bfree>
 801586c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801586e:	4620      	mov	r0, r4
 8015870:	f002 f98c 	bl	8017b8c <_Bfree>
 8015874:	4629      	mov	r1, r5
 8015876:	4620      	mov	r0, r4
 8015878:	f002 f988 	bl	8017b8c <_Bfree>
 801587c:	e5d7      	b.n	801542e <_strtod_l+0x76>
 801587e:	4b32      	ldr	r3, [pc, #200]	; (8015948 <_strtod_l+0x590>)
 8015880:	9304      	str	r3, [sp, #16]
 8015882:	2300      	movs	r3, #0
 8015884:	112d      	asrs	r5, r5, #4
 8015886:	4640      	mov	r0, r8
 8015888:	4649      	mov	r1, r9
 801588a:	469a      	mov	sl, r3
 801588c:	2d01      	cmp	r5, #1
 801588e:	dc21      	bgt.n	80158d4 <_strtod_l+0x51c>
 8015890:	b10b      	cbz	r3, 8015896 <_strtod_l+0x4de>
 8015892:	4680      	mov	r8, r0
 8015894:	4689      	mov	r9, r1
 8015896:	492c      	ldr	r1, [pc, #176]	; (8015948 <_strtod_l+0x590>)
 8015898:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801589c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80158a0:	4642      	mov	r2, r8
 80158a2:	464b      	mov	r3, r9
 80158a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158a8:	f7ea fea6 	bl	80005f8 <__aeabi_dmul>
 80158ac:	4b27      	ldr	r3, [pc, #156]	; (801594c <_strtod_l+0x594>)
 80158ae:	460a      	mov	r2, r1
 80158b0:	400b      	ands	r3, r1
 80158b2:	4927      	ldr	r1, [pc, #156]	; (8015950 <_strtod_l+0x598>)
 80158b4:	428b      	cmp	r3, r1
 80158b6:	4680      	mov	r8, r0
 80158b8:	d8be      	bhi.n	8015838 <_strtod_l+0x480>
 80158ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80158be:	428b      	cmp	r3, r1
 80158c0:	bf86      	itte	hi
 80158c2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8015954 <_strtod_l+0x59c>
 80158c6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80158ca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80158ce:	2300      	movs	r3, #0
 80158d0:	9304      	str	r3, [sp, #16]
 80158d2:	e07b      	b.n	80159cc <_strtod_l+0x614>
 80158d4:	07ea      	lsls	r2, r5, #31
 80158d6:	d505      	bpl.n	80158e4 <_strtod_l+0x52c>
 80158d8:	9b04      	ldr	r3, [sp, #16]
 80158da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158de:	f7ea fe8b 	bl	80005f8 <__aeabi_dmul>
 80158e2:	2301      	movs	r3, #1
 80158e4:	9a04      	ldr	r2, [sp, #16]
 80158e6:	3208      	adds	r2, #8
 80158e8:	f10a 0a01 	add.w	sl, sl, #1
 80158ec:	106d      	asrs	r5, r5, #1
 80158ee:	9204      	str	r2, [sp, #16]
 80158f0:	e7cc      	b.n	801588c <_strtod_l+0x4d4>
 80158f2:	d0ec      	beq.n	80158ce <_strtod_l+0x516>
 80158f4:	426d      	negs	r5, r5
 80158f6:	f015 020f 	ands.w	r2, r5, #15
 80158fa:	d00a      	beq.n	8015912 <_strtod_l+0x55a>
 80158fc:	4b11      	ldr	r3, [pc, #68]	; (8015944 <_strtod_l+0x58c>)
 80158fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015902:	4640      	mov	r0, r8
 8015904:	4649      	mov	r1, r9
 8015906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801590a:	f7ea ff9f 	bl	800084c <__aeabi_ddiv>
 801590e:	4680      	mov	r8, r0
 8015910:	4689      	mov	r9, r1
 8015912:	112d      	asrs	r5, r5, #4
 8015914:	d0db      	beq.n	80158ce <_strtod_l+0x516>
 8015916:	2d1f      	cmp	r5, #31
 8015918:	dd1e      	ble.n	8015958 <_strtod_l+0x5a0>
 801591a:	2500      	movs	r5, #0
 801591c:	46ab      	mov	fp, r5
 801591e:	9509      	str	r5, [sp, #36]	; 0x24
 8015920:	9505      	str	r5, [sp, #20]
 8015922:	2322      	movs	r3, #34	; 0x22
 8015924:	f04f 0800 	mov.w	r8, #0
 8015928:	f04f 0900 	mov.w	r9, #0
 801592c:	6023      	str	r3, [r4, #0]
 801592e:	e78d      	b.n	801584c <_strtod_l+0x494>
 8015930:	0801c6dd 	.word	0x0801c6dd
 8015934:	0801c720 	.word	0x0801c720
 8015938:	0801c6d5 	.word	0x0801c6d5
 801593c:	0801c86c 	.word	0x0801c86c
 8015940:	0801caf7 	.word	0x0801caf7
 8015944:	0801c9e8 	.word	0x0801c9e8
 8015948:	0801c9c0 	.word	0x0801c9c0
 801594c:	7ff00000 	.word	0x7ff00000
 8015950:	7ca00000 	.word	0x7ca00000
 8015954:	7fefffff 	.word	0x7fefffff
 8015958:	f015 0310 	ands.w	r3, r5, #16
 801595c:	bf18      	it	ne
 801595e:	236a      	movne	r3, #106	; 0x6a
 8015960:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8015d04 <_strtod_l+0x94c>
 8015964:	9304      	str	r3, [sp, #16]
 8015966:	4640      	mov	r0, r8
 8015968:	4649      	mov	r1, r9
 801596a:	2300      	movs	r3, #0
 801596c:	07ea      	lsls	r2, r5, #31
 801596e:	d504      	bpl.n	801597a <_strtod_l+0x5c2>
 8015970:	e9da 2300 	ldrd	r2, r3, [sl]
 8015974:	f7ea fe40 	bl	80005f8 <__aeabi_dmul>
 8015978:	2301      	movs	r3, #1
 801597a:	106d      	asrs	r5, r5, #1
 801597c:	f10a 0a08 	add.w	sl, sl, #8
 8015980:	d1f4      	bne.n	801596c <_strtod_l+0x5b4>
 8015982:	b10b      	cbz	r3, 8015988 <_strtod_l+0x5d0>
 8015984:	4680      	mov	r8, r0
 8015986:	4689      	mov	r9, r1
 8015988:	9b04      	ldr	r3, [sp, #16]
 801598a:	b1bb      	cbz	r3, 80159bc <_strtod_l+0x604>
 801598c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8015990:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015994:	2b00      	cmp	r3, #0
 8015996:	4649      	mov	r1, r9
 8015998:	dd10      	ble.n	80159bc <_strtod_l+0x604>
 801599a:	2b1f      	cmp	r3, #31
 801599c:	f340 811e 	ble.w	8015bdc <_strtod_l+0x824>
 80159a0:	2b34      	cmp	r3, #52	; 0x34
 80159a2:	bfde      	ittt	le
 80159a4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80159a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80159ac:	4093      	lslle	r3, r2
 80159ae:	f04f 0800 	mov.w	r8, #0
 80159b2:	bfcc      	ite	gt
 80159b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80159b8:	ea03 0901 	andle.w	r9, r3, r1
 80159bc:	2200      	movs	r2, #0
 80159be:	2300      	movs	r3, #0
 80159c0:	4640      	mov	r0, r8
 80159c2:	4649      	mov	r1, r9
 80159c4:	f7eb f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80159c8:	2800      	cmp	r0, #0
 80159ca:	d1a6      	bne.n	801591a <_strtod_l+0x562>
 80159cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159ce:	9300      	str	r3, [sp, #0]
 80159d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80159d2:	4633      	mov	r3, r6
 80159d4:	465a      	mov	r2, fp
 80159d6:	4620      	mov	r0, r4
 80159d8:	f002 f940 	bl	8017c5c <__s2b>
 80159dc:	9009      	str	r0, [sp, #36]	; 0x24
 80159de:	2800      	cmp	r0, #0
 80159e0:	f43f af2a 	beq.w	8015838 <_strtod_l+0x480>
 80159e4:	9a08      	ldr	r2, [sp, #32]
 80159e6:	9b05      	ldr	r3, [sp, #20]
 80159e8:	2a00      	cmp	r2, #0
 80159ea:	eba3 0307 	sub.w	r3, r3, r7
 80159ee:	bfa8      	it	ge
 80159f0:	2300      	movge	r3, #0
 80159f2:	930c      	str	r3, [sp, #48]	; 0x30
 80159f4:	2500      	movs	r5, #0
 80159f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80159fa:	9312      	str	r3, [sp, #72]	; 0x48
 80159fc:	46ab      	mov	fp, r5
 80159fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a00:	4620      	mov	r0, r4
 8015a02:	6859      	ldr	r1, [r3, #4]
 8015a04:	f002 f882 	bl	8017b0c <_Balloc>
 8015a08:	9005      	str	r0, [sp, #20]
 8015a0a:	2800      	cmp	r0, #0
 8015a0c:	f43f af18 	beq.w	8015840 <_strtod_l+0x488>
 8015a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a12:	691a      	ldr	r2, [r3, #16]
 8015a14:	3202      	adds	r2, #2
 8015a16:	f103 010c 	add.w	r1, r3, #12
 8015a1a:	0092      	lsls	r2, r2, #2
 8015a1c:	300c      	adds	r0, #12
 8015a1e:	f000 fbb7 	bl	8016190 <memcpy>
 8015a22:	ec49 8b10 	vmov	d0, r8, r9
 8015a26:	aa18      	add	r2, sp, #96	; 0x60
 8015a28:	a917      	add	r1, sp, #92	; 0x5c
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	f002 fc4a 	bl	80182c4 <__d2b>
 8015a30:	ec49 8b18 	vmov	d8, r8, r9
 8015a34:	9016      	str	r0, [sp, #88]	; 0x58
 8015a36:	2800      	cmp	r0, #0
 8015a38:	f43f af02 	beq.w	8015840 <_strtod_l+0x488>
 8015a3c:	2101      	movs	r1, #1
 8015a3e:	4620      	mov	r0, r4
 8015a40:	f002 f9a4 	bl	8017d8c <__i2b>
 8015a44:	4683      	mov	fp, r0
 8015a46:	2800      	cmp	r0, #0
 8015a48:	f43f aefa 	beq.w	8015840 <_strtod_l+0x488>
 8015a4c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015a4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015a50:	2e00      	cmp	r6, #0
 8015a52:	bfab      	itete	ge
 8015a54:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8015a56:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8015a58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8015a5a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8015a5e:	bfac      	ite	ge
 8015a60:	eb06 0a03 	addge.w	sl, r6, r3
 8015a64:	1b9f      	sublt	r7, r3, r6
 8015a66:	9b04      	ldr	r3, [sp, #16]
 8015a68:	1af6      	subs	r6, r6, r3
 8015a6a:	4416      	add	r6, r2
 8015a6c:	4ba0      	ldr	r3, [pc, #640]	; (8015cf0 <_strtod_l+0x938>)
 8015a6e:	3e01      	subs	r6, #1
 8015a70:	429e      	cmp	r6, r3
 8015a72:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015a76:	f280 80c4 	bge.w	8015c02 <_strtod_l+0x84a>
 8015a7a:	1b9b      	subs	r3, r3, r6
 8015a7c:	2b1f      	cmp	r3, #31
 8015a7e:	eba2 0203 	sub.w	r2, r2, r3
 8015a82:	f04f 0101 	mov.w	r1, #1
 8015a86:	f300 80b0 	bgt.w	8015bea <_strtod_l+0x832>
 8015a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8015a8e:	930e      	str	r3, [sp, #56]	; 0x38
 8015a90:	2300      	movs	r3, #0
 8015a92:	930d      	str	r3, [sp, #52]	; 0x34
 8015a94:	eb0a 0602 	add.w	r6, sl, r2
 8015a98:	9b04      	ldr	r3, [sp, #16]
 8015a9a:	45b2      	cmp	sl, r6
 8015a9c:	4417      	add	r7, r2
 8015a9e:	441f      	add	r7, r3
 8015aa0:	4653      	mov	r3, sl
 8015aa2:	bfa8      	it	ge
 8015aa4:	4633      	movge	r3, r6
 8015aa6:	42bb      	cmp	r3, r7
 8015aa8:	bfa8      	it	ge
 8015aaa:	463b      	movge	r3, r7
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	bfc2      	ittt	gt
 8015ab0:	1af6      	subgt	r6, r6, r3
 8015ab2:	1aff      	subgt	r7, r7, r3
 8015ab4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8015ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	dd17      	ble.n	8015aee <_strtod_l+0x736>
 8015abe:	4659      	mov	r1, fp
 8015ac0:	461a      	mov	r2, r3
 8015ac2:	4620      	mov	r0, r4
 8015ac4:	f002 fa22 	bl	8017f0c <__pow5mult>
 8015ac8:	4683      	mov	fp, r0
 8015aca:	2800      	cmp	r0, #0
 8015acc:	f43f aeb8 	beq.w	8015840 <_strtod_l+0x488>
 8015ad0:	4601      	mov	r1, r0
 8015ad2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015ad4:	4620      	mov	r0, r4
 8015ad6:	f002 f96f 	bl	8017db8 <__multiply>
 8015ada:	900b      	str	r0, [sp, #44]	; 0x2c
 8015adc:	2800      	cmp	r0, #0
 8015ade:	f43f aeaf 	beq.w	8015840 <_strtod_l+0x488>
 8015ae2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015ae4:	4620      	mov	r0, r4
 8015ae6:	f002 f851 	bl	8017b8c <_Bfree>
 8015aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015aec:	9316      	str	r3, [sp, #88]	; 0x58
 8015aee:	2e00      	cmp	r6, #0
 8015af0:	f300 808c 	bgt.w	8015c0c <_strtod_l+0x854>
 8015af4:	9b08      	ldr	r3, [sp, #32]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	dd08      	ble.n	8015b0c <_strtod_l+0x754>
 8015afa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015afc:	9905      	ldr	r1, [sp, #20]
 8015afe:	4620      	mov	r0, r4
 8015b00:	f002 fa04 	bl	8017f0c <__pow5mult>
 8015b04:	9005      	str	r0, [sp, #20]
 8015b06:	2800      	cmp	r0, #0
 8015b08:	f43f ae9a 	beq.w	8015840 <_strtod_l+0x488>
 8015b0c:	2f00      	cmp	r7, #0
 8015b0e:	dd08      	ble.n	8015b22 <_strtod_l+0x76a>
 8015b10:	9905      	ldr	r1, [sp, #20]
 8015b12:	463a      	mov	r2, r7
 8015b14:	4620      	mov	r0, r4
 8015b16:	f002 fa53 	bl	8017fc0 <__lshift>
 8015b1a:	9005      	str	r0, [sp, #20]
 8015b1c:	2800      	cmp	r0, #0
 8015b1e:	f43f ae8f 	beq.w	8015840 <_strtod_l+0x488>
 8015b22:	f1ba 0f00 	cmp.w	sl, #0
 8015b26:	dd08      	ble.n	8015b3a <_strtod_l+0x782>
 8015b28:	4659      	mov	r1, fp
 8015b2a:	4652      	mov	r2, sl
 8015b2c:	4620      	mov	r0, r4
 8015b2e:	f002 fa47 	bl	8017fc0 <__lshift>
 8015b32:	4683      	mov	fp, r0
 8015b34:	2800      	cmp	r0, #0
 8015b36:	f43f ae83 	beq.w	8015840 <_strtod_l+0x488>
 8015b3a:	9a05      	ldr	r2, [sp, #20]
 8015b3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015b3e:	4620      	mov	r0, r4
 8015b40:	f002 fac6 	bl	80180d0 <__mdiff>
 8015b44:	4605      	mov	r5, r0
 8015b46:	2800      	cmp	r0, #0
 8015b48:	f43f ae7a 	beq.w	8015840 <_strtod_l+0x488>
 8015b4c:	68c3      	ldr	r3, [r0, #12]
 8015b4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b50:	2300      	movs	r3, #0
 8015b52:	60c3      	str	r3, [r0, #12]
 8015b54:	4659      	mov	r1, fp
 8015b56:	f002 fa9f 	bl	8018098 <__mcmp>
 8015b5a:	2800      	cmp	r0, #0
 8015b5c:	da60      	bge.n	8015c20 <_strtod_l+0x868>
 8015b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b60:	ea53 0308 	orrs.w	r3, r3, r8
 8015b64:	f040 8084 	bne.w	8015c70 <_strtod_l+0x8b8>
 8015b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d17f      	bne.n	8015c70 <_strtod_l+0x8b8>
 8015b70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015b74:	0d1b      	lsrs	r3, r3, #20
 8015b76:	051b      	lsls	r3, r3, #20
 8015b78:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015b7c:	d978      	bls.n	8015c70 <_strtod_l+0x8b8>
 8015b7e:	696b      	ldr	r3, [r5, #20]
 8015b80:	b913      	cbnz	r3, 8015b88 <_strtod_l+0x7d0>
 8015b82:	692b      	ldr	r3, [r5, #16]
 8015b84:	2b01      	cmp	r3, #1
 8015b86:	dd73      	ble.n	8015c70 <_strtod_l+0x8b8>
 8015b88:	4629      	mov	r1, r5
 8015b8a:	2201      	movs	r2, #1
 8015b8c:	4620      	mov	r0, r4
 8015b8e:	f002 fa17 	bl	8017fc0 <__lshift>
 8015b92:	4659      	mov	r1, fp
 8015b94:	4605      	mov	r5, r0
 8015b96:	f002 fa7f 	bl	8018098 <__mcmp>
 8015b9a:	2800      	cmp	r0, #0
 8015b9c:	dd68      	ble.n	8015c70 <_strtod_l+0x8b8>
 8015b9e:	9904      	ldr	r1, [sp, #16]
 8015ba0:	4a54      	ldr	r2, [pc, #336]	; (8015cf4 <_strtod_l+0x93c>)
 8015ba2:	464b      	mov	r3, r9
 8015ba4:	2900      	cmp	r1, #0
 8015ba6:	f000 8084 	beq.w	8015cb2 <_strtod_l+0x8fa>
 8015baa:	ea02 0109 	and.w	r1, r2, r9
 8015bae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015bb2:	dc7e      	bgt.n	8015cb2 <_strtod_l+0x8fa>
 8015bb4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015bb8:	f77f aeb3 	ble.w	8015922 <_strtod_l+0x56a>
 8015bbc:	4b4e      	ldr	r3, [pc, #312]	; (8015cf8 <_strtod_l+0x940>)
 8015bbe:	4640      	mov	r0, r8
 8015bc0:	4649      	mov	r1, r9
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	f7ea fd18 	bl	80005f8 <__aeabi_dmul>
 8015bc8:	4b4a      	ldr	r3, [pc, #296]	; (8015cf4 <_strtod_l+0x93c>)
 8015bca:	400b      	ands	r3, r1
 8015bcc:	4680      	mov	r8, r0
 8015bce:	4689      	mov	r9, r1
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	f47f ae3f 	bne.w	8015854 <_strtod_l+0x49c>
 8015bd6:	2322      	movs	r3, #34	; 0x22
 8015bd8:	6023      	str	r3, [r4, #0]
 8015bda:	e63b      	b.n	8015854 <_strtod_l+0x49c>
 8015bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015be0:	fa02 f303 	lsl.w	r3, r2, r3
 8015be4:	ea03 0808 	and.w	r8, r3, r8
 8015be8:	e6e8      	b.n	80159bc <_strtod_l+0x604>
 8015bea:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015bee:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015bf2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015bf6:	36e2      	adds	r6, #226	; 0xe2
 8015bf8:	fa01 f306 	lsl.w	r3, r1, r6
 8015bfc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8015c00:	e748      	b.n	8015a94 <_strtod_l+0x6dc>
 8015c02:	2100      	movs	r1, #0
 8015c04:	2301      	movs	r3, #1
 8015c06:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8015c0a:	e743      	b.n	8015a94 <_strtod_l+0x6dc>
 8015c0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015c0e:	4632      	mov	r2, r6
 8015c10:	4620      	mov	r0, r4
 8015c12:	f002 f9d5 	bl	8017fc0 <__lshift>
 8015c16:	9016      	str	r0, [sp, #88]	; 0x58
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	f47f af6b 	bne.w	8015af4 <_strtod_l+0x73c>
 8015c1e:	e60f      	b.n	8015840 <_strtod_l+0x488>
 8015c20:	46ca      	mov	sl, r9
 8015c22:	d171      	bne.n	8015d08 <_strtod_l+0x950>
 8015c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015c26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015c2a:	b352      	cbz	r2, 8015c82 <_strtod_l+0x8ca>
 8015c2c:	4a33      	ldr	r2, [pc, #204]	; (8015cfc <_strtod_l+0x944>)
 8015c2e:	4293      	cmp	r3, r2
 8015c30:	d12a      	bne.n	8015c88 <_strtod_l+0x8d0>
 8015c32:	9b04      	ldr	r3, [sp, #16]
 8015c34:	4641      	mov	r1, r8
 8015c36:	b1fb      	cbz	r3, 8015c78 <_strtod_l+0x8c0>
 8015c38:	4b2e      	ldr	r3, [pc, #184]	; (8015cf4 <_strtod_l+0x93c>)
 8015c3a:	ea09 0303 	and.w	r3, r9, r3
 8015c3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015c42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015c46:	d81a      	bhi.n	8015c7e <_strtod_l+0x8c6>
 8015c48:	0d1b      	lsrs	r3, r3, #20
 8015c4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8015c52:	4299      	cmp	r1, r3
 8015c54:	d118      	bne.n	8015c88 <_strtod_l+0x8d0>
 8015c56:	4b2a      	ldr	r3, [pc, #168]	; (8015d00 <_strtod_l+0x948>)
 8015c58:	459a      	cmp	sl, r3
 8015c5a:	d102      	bne.n	8015c62 <_strtod_l+0x8aa>
 8015c5c:	3101      	adds	r1, #1
 8015c5e:	f43f adef 	beq.w	8015840 <_strtod_l+0x488>
 8015c62:	4b24      	ldr	r3, [pc, #144]	; (8015cf4 <_strtod_l+0x93c>)
 8015c64:	ea0a 0303 	and.w	r3, sl, r3
 8015c68:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8015c6c:	f04f 0800 	mov.w	r8, #0
 8015c70:	9b04      	ldr	r3, [sp, #16]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d1a2      	bne.n	8015bbc <_strtod_l+0x804>
 8015c76:	e5ed      	b.n	8015854 <_strtod_l+0x49c>
 8015c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c7c:	e7e9      	b.n	8015c52 <_strtod_l+0x89a>
 8015c7e:	4613      	mov	r3, r2
 8015c80:	e7e7      	b.n	8015c52 <_strtod_l+0x89a>
 8015c82:	ea53 0308 	orrs.w	r3, r3, r8
 8015c86:	d08a      	beq.n	8015b9e <_strtod_l+0x7e6>
 8015c88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c8a:	b1e3      	cbz	r3, 8015cc6 <_strtod_l+0x90e>
 8015c8c:	ea13 0f0a 	tst.w	r3, sl
 8015c90:	d0ee      	beq.n	8015c70 <_strtod_l+0x8b8>
 8015c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c94:	9a04      	ldr	r2, [sp, #16]
 8015c96:	4640      	mov	r0, r8
 8015c98:	4649      	mov	r1, r9
 8015c9a:	b1c3      	cbz	r3, 8015cce <_strtod_l+0x916>
 8015c9c:	f7ff fb70 	bl	8015380 <sulp>
 8015ca0:	4602      	mov	r2, r0
 8015ca2:	460b      	mov	r3, r1
 8015ca4:	ec51 0b18 	vmov	r0, r1, d8
 8015ca8:	f7ea faf0 	bl	800028c <__adddf3>
 8015cac:	4680      	mov	r8, r0
 8015cae:	4689      	mov	r9, r1
 8015cb0:	e7de      	b.n	8015c70 <_strtod_l+0x8b8>
 8015cb2:	4013      	ands	r3, r2
 8015cb4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015cb8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8015cbc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015cc0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8015cc4:	e7d4      	b.n	8015c70 <_strtod_l+0x8b8>
 8015cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cc8:	ea13 0f08 	tst.w	r3, r8
 8015ccc:	e7e0      	b.n	8015c90 <_strtod_l+0x8d8>
 8015cce:	f7ff fb57 	bl	8015380 <sulp>
 8015cd2:	4602      	mov	r2, r0
 8015cd4:	460b      	mov	r3, r1
 8015cd6:	ec51 0b18 	vmov	r0, r1, d8
 8015cda:	f7ea fad5 	bl	8000288 <__aeabi_dsub>
 8015cde:	2200      	movs	r2, #0
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	4680      	mov	r8, r0
 8015ce4:	4689      	mov	r9, r1
 8015ce6:	f7ea feef 	bl	8000ac8 <__aeabi_dcmpeq>
 8015cea:	2800      	cmp	r0, #0
 8015cec:	d0c0      	beq.n	8015c70 <_strtod_l+0x8b8>
 8015cee:	e618      	b.n	8015922 <_strtod_l+0x56a>
 8015cf0:	fffffc02 	.word	0xfffffc02
 8015cf4:	7ff00000 	.word	0x7ff00000
 8015cf8:	39500000 	.word	0x39500000
 8015cfc:	000fffff 	.word	0x000fffff
 8015d00:	7fefffff 	.word	0x7fefffff
 8015d04:	0801c738 	.word	0x0801c738
 8015d08:	4659      	mov	r1, fp
 8015d0a:	4628      	mov	r0, r5
 8015d0c:	f002 fb34 	bl	8018378 <__ratio>
 8015d10:	ec57 6b10 	vmov	r6, r7, d0
 8015d14:	ee10 0a10 	vmov	r0, s0
 8015d18:	2200      	movs	r2, #0
 8015d1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015d1e:	4639      	mov	r1, r7
 8015d20:	f7ea fee6 	bl	8000af0 <__aeabi_dcmple>
 8015d24:	2800      	cmp	r0, #0
 8015d26:	d071      	beq.n	8015e0c <_strtod_l+0xa54>
 8015d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d17c      	bne.n	8015e28 <_strtod_l+0xa70>
 8015d2e:	f1b8 0f00 	cmp.w	r8, #0
 8015d32:	d15a      	bne.n	8015dea <_strtod_l+0xa32>
 8015d34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d15d      	bne.n	8015df8 <_strtod_l+0xa40>
 8015d3c:	4b90      	ldr	r3, [pc, #576]	; (8015f80 <_strtod_l+0xbc8>)
 8015d3e:	2200      	movs	r2, #0
 8015d40:	4630      	mov	r0, r6
 8015d42:	4639      	mov	r1, r7
 8015d44:	f7ea feca 	bl	8000adc <__aeabi_dcmplt>
 8015d48:	2800      	cmp	r0, #0
 8015d4a:	d15c      	bne.n	8015e06 <_strtod_l+0xa4e>
 8015d4c:	4630      	mov	r0, r6
 8015d4e:	4639      	mov	r1, r7
 8015d50:	4b8c      	ldr	r3, [pc, #560]	; (8015f84 <_strtod_l+0xbcc>)
 8015d52:	2200      	movs	r2, #0
 8015d54:	f7ea fc50 	bl	80005f8 <__aeabi_dmul>
 8015d58:	4606      	mov	r6, r0
 8015d5a:	460f      	mov	r7, r1
 8015d5c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015d60:	9606      	str	r6, [sp, #24]
 8015d62:	9307      	str	r3, [sp, #28]
 8015d64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015d68:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015d6c:	4b86      	ldr	r3, [pc, #536]	; (8015f88 <_strtod_l+0xbd0>)
 8015d6e:	ea0a 0303 	and.w	r3, sl, r3
 8015d72:	930d      	str	r3, [sp, #52]	; 0x34
 8015d74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015d76:	4b85      	ldr	r3, [pc, #532]	; (8015f8c <_strtod_l+0xbd4>)
 8015d78:	429a      	cmp	r2, r3
 8015d7a:	f040 8090 	bne.w	8015e9e <_strtod_l+0xae6>
 8015d7e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8015d82:	ec49 8b10 	vmov	d0, r8, r9
 8015d86:	f002 fa2d 	bl	80181e4 <__ulp>
 8015d8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015d8e:	ec51 0b10 	vmov	r0, r1, d0
 8015d92:	f7ea fc31 	bl	80005f8 <__aeabi_dmul>
 8015d96:	4642      	mov	r2, r8
 8015d98:	464b      	mov	r3, r9
 8015d9a:	f7ea fa77 	bl	800028c <__adddf3>
 8015d9e:	460b      	mov	r3, r1
 8015da0:	4979      	ldr	r1, [pc, #484]	; (8015f88 <_strtod_l+0xbd0>)
 8015da2:	4a7b      	ldr	r2, [pc, #492]	; (8015f90 <_strtod_l+0xbd8>)
 8015da4:	4019      	ands	r1, r3
 8015da6:	4291      	cmp	r1, r2
 8015da8:	4680      	mov	r8, r0
 8015daa:	d944      	bls.n	8015e36 <_strtod_l+0xa7e>
 8015dac:	ee18 2a90 	vmov	r2, s17
 8015db0:	4b78      	ldr	r3, [pc, #480]	; (8015f94 <_strtod_l+0xbdc>)
 8015db2:	429a      	cmp	r2, r3
 8015db4:	d104      	bne.n	8015dc0 <_strtod_l+0xa08>
 8015db6:	ee18 3a10 	vmov	r3, s16
 8015dba:	3301      	adds	r3, #1
 8015dbc:	f43f ad40 	beq.w	8015840 <_strtod_l+0x488>
 8015dc0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8015f94 <_strtod_l+0xbdc>
 8015dc4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8015dc8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015dca:	4620      	mov	r0, r4
 8015dcc:	f001 fede 	bl	8017b8c <_Bfree>
 8015dd0:	9905      	ldr	r1, [sp, #20]
 8015dd2:	4620      	mov	r0, r4
 8015dd4:	f001 feda 	bl	8017b8c <_Bfree>
 8015dd8:	4659      	mov	r1, fp
 8015dda:	4620      	mov	r0, r4
 8015ddc:	f001 fed6 	bl	8017b8c <_Bfree>
 8015de0:	4629      	mov	r1, r5
 8015de2:	4620      	mov	r0, r4
 8015de4:	f001 fed2 	bl	8017b8c <_Bfree>
 8015de8:	e609      	b.n	80159fe <_strtod_l+0x646>
 8015dea:	f1b8 0f01 	cmp.w	r8, #1
 8015dee:	d103      	bne.n	8015df8 <_strtod_l+0xa40>
 8015df0:	f1b9 0f00 	cmp.w	r9, #0
 8015df4:	f43f ad95 	beq.w	8015922 <_strtod_l+0x56a>
 8015df8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8015f50 <_strtod_l+0xb98>
 8015dfc:	4f60      	ldr	r7, [pc, #384]	; (8015f80 <_strtod_l+0xbc8>)
 8015dfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015e02:	2600      	movs	r6, #0
 8015e04:	e7ae      	b.n	8015d64 <_strtod_l+0x9ac>
 8015e06:	4f5f      	ldr	r7, [pc, #380]	; (8015f84 <_strtod_l+0xbcc>)
 8015e08:	2600      	movs	r6, #0
 8015e0a:	e7a7      	b.n	8015d5c <_strtod_l+0x9a4>
 8015e0c:	4b5d      	ldr	r3, [pc, #372]	; (8015f84 <_strtod_l+0xbcc>)
 8015e0e:	4630      	mov	r0, r6
 8015e10:	4639      	mov	r1, r7
 8015e12:	2200      	movs	r2, #0
 8015e14:	f7ea fbf0 	bl	80005f8 <__aeabi_dmul>
 8015e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e1a:	4606      	mov	r6, r0
 8015e1c:	460f      	mov	r7, r1
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d09c      	beq.n	8015d5c <_strtod_l+0x9a4>
 8015e22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015e26:	e79d      	b.n	8015d64 <_strtod_l+0x9ac>
 8015e28:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8015f58 <_strtod_l+0xba0>
 8015e2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015e30:	ec57 6b17 	vmov	r6, r7, d7
 8015e34:	e796      	b.n	8015d64 <_strtod_l+0x9ac>
 8015e36:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8015e3a:	9b04      	ldr	r3, [sp, #16]
 8015e3c:	46ca      	mov	sl, r9
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d1c2      	bne.n	8015dc8 <_strtod_l+0xa10>
 8015e42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015e46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015e48:	0d1b      	lsrs	r3, r3, #20
 8015e4a:	051b      	lsls	r3, r3, #20
 8015e4c:	429a      	cmp	r2, r3
 8015e4e:	d1bb      	bne.n	8015dc8 <_strtod_l+0xa10>
 8015e50:	4630      	mov	r0, r6
 8015e52:	4639      	mov	r1, r7
 8015e54:	f7ea ff30 	bl	8000cb8 <__aeabi_d2lz>
 8015e58:	f7ea fba0 	bl	800059c <__aeabi_l2d>
 8015e5c:	4602      	mov	r2, r0
 8015e5e:	460b      	mov	r3, r1
 8015e60:	4630      	mov	r0, r6
 8015e62:	4639      	mov	r1, r7
 8015e64:	f7ea fa10 	bl	8000288 <__aeabi_dsub>
 8015e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015e6e:	ea43 0308 	orr.w	r3, r3, r8
 8015e72:	4313      	orrs	r3, r2
 8015e74:	4606      	mov	r6, r0
 8015e76:	460f      	mov	r7, r1
 8015e78:	d054      	beq.n	8015f24 <_strtod_l+0xb6c>
 8015e7a:	a339      	add	r3, pc, #228	; (adr r3, 8015f60 <_strtod_l+0xba8>)
 8015e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e80:	f7ea fe2c 	bl	8000adc <__aeabi_dcmplt>
 8015e84:	2800      	cmp	r0, #0
 8015e86:	f47f ace5 	bne.w	8015854 <_strtod_l+0x49c>
 8015e8a:	a337      	add	r3, pc, #220	; (adr r3, 8015f68 <_strtod_l+0xbb0>)
 8015e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e90:	4630      	mov	r0, r6
 8015e92:	4639      	mov	r1, r7
 8015e94:	f7ea fe40 	bl	8000b18 <__aeabi_dcmpgt>
 8015e98:	2800      	cmp	r0, #0
 8015e9a:	d095      	beq.n	8015dc8 <_strtod_l+0xa10>
 8015e9c:	e4da      	b.n	8015854 <_strtod_l+0x49c>
 8015e9e:	9b04      	ldr	r3, [sp, #16]
 8015ea0:	b333      	cbz	r3, 8015ef0 <_strtod_l+0xb38>
 8015ea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ea4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015ea8:	d822      	bhi.n	8015ef0 <_strtod_l+0xb38>
 8015eaa:	a331      	add	r3, pc, #196	; (adr r3, 8015f70 <_strtod_l+0xbb8>)
 8015eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eb0:	4630      	mov	r0, r6
 8015eb2:	4639      	mov	r1, r7
 8015eb4:	f7ea fe1c 	bl	8000af0 <__aeabi_dcmple>
 8015eb8:	b1a0      	cbz	r0, 8015ee4 <_strtod_l+0xb2c>
 8015eba:	4639      	mov	r1, r7
 8015ebc:	4630      	mov	r0, r6
 8015ebe:	f7ea fe73 	bl	8000ba8 <__aeabi_d2uiz>
 8015ec2:	2801      	cmp	r0, #1
 8015ec4:	bf38      	it	cc
 8015ec6:	2001      	movcc	r0, #1
 8015ec8:	f7ea fb1c 	bl	8000504 <__aeabi_ui2d>
 8015ecc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ece:	4606      	mov	r6, r0
 8015ed0:	460f      	mov	r7, r1
 8015ed2:	bb23      	cbnz	r3, 8015f1e <_strtod_l+0xb66>
 8015ed4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015ed8:	9010      	str	r0, [sp, #64]	; 0x40
 8015eda:	9311      	str	r3, [sp, #68]	; 0x44
 8015edc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015ee0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ee6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ee8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015eec:	1a9b      	subs	r3, r3, r2
 8015eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ef0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015ef4:	eeb0 0a48 	vmov.f32	s0, s16
 8015ef8:	eef0 0a68 	vmov.f32	s1, s17
 8015efc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015f00:	f002 f970 	bl	80181e4 <__ulp>
 8015f04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015f08:	ec53 2b10 	vmov	r2, r3, d0
 8015f0c:	f7ea fb74 	bl	80005f8 <__aeabi_dmul>
 8015f10:	ec53 2b18 	vmov	r2, r3, d8
 8015f14:	f7ea f9ba 	bl	800028c <__adddf3>
 8015f18:	4680      	mov	r8, r0
 8015f1a:	4689      	mov	r9, r1
 8015f1c:	e78d      	b.n	8015e3a <_strtod_l+0xa82>
 8015f1e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015f22:	e7db      	b.n	8015edc <_strtod_l+0xb24>
 8015f24:	a314      	add	r3, pc, #80	; (adr r3, 8015f78 <_strtod_l+0xbc0>)
 8015f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f2a:	f7ea fdd7 	bl	8000adc <__aeabi_dcmplt>
 8015f2e:	e7b3      	b.n	8015e98 <_strtod_l+0xae0>
 8015f30:	2300      	movs	r3, #0
 8015f32:	930a      	str	r3, [sp, #40]	; 0x28
 8015f34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015f36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f38:	6013      	str	r3, [r2, #0]
 8015f3a:	f7ff ba7c 	b.w	8015436 <_strtod_l+0x7e>
 8015f3e:	2a65      	cmp	r2, #101	; 0x65
 8015f40:	f43f ab75 	beq.w	801562e <_strtod_l+0x276>
 8015f44:	2a45      	cmp	r2, #69	; 0x45
 8015f46:	f43f ab72 	beq.w	801562e <_strtod_l+0x276>
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	f7ff bbaa 	b.w	80156a4 <_strtod_l+0x2ec>
 8015f50:	00000000 	.word	0x00000000
 8015f54:	bff00000 	.word	0xbff00000
 8015f58:	00000000 	.word	0x00000000
 8015f5c:	3ff00000 	.word	0x3ff00000
 8015f60:	94a03595 	.word	0x94a03595
 8015f64:	3fdfffff 	.word	0x3fdfffff
 8015f68:	35afe535 	.word	0x35afe535
 8015f6c:	3fe00000 	.word	0x3fe00000
 8015f70:	ffc00000 	.word	0xffc00000
 8015f74:	41dfffff 	.word	0x41dfffff
 8015f78:	94a03595 	.word	0x94a03595
 8015f7c:	3fcfffff 	.word	0x3fcfffff
 8015f80:	3ff00000 	.word	0x3ff00000
 8015f84:	3fe00000 	.word	0x3fe00000
 8015f88:	7ff00000 	.word	0x7ff00000
 8015f8c:	7fe00000 	.word	0x7fe00000
 8015f90:	7c9fffff 	.word	0x7c9fffff
 8015f94:	7fefffff 	.word	0x7fefffff

08015f98 <_strtod_r>:
 8015f98:	4b01      	ldr	r3, [pc, #4]	; (8015fa0 <_strtod_r+0x8>)
 8015f9a:	f7ff ba0d 	b.w	80153b8 <_strtod_l>
 8015f9e:	bf00      	nop
 8015fa0:	20000034 	.word	0x20000034

08015fa4 <_strtol_l.constprop.0>:
 8015fa4:	2b01      	cmp	r3, #1
 8015fa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015faa:	d001      	beq.n	8015fb0 <_strtol_l.constprop.0+0xc>
 8015fac:	2b24      	cmp	r3, #36	; 0x24
 8015fae:	d906      	bls.n	8015fbe <_strtol_l.constprop.0+0x1a>
 8015fb0:	f000 f8c2 	bl	8016138 <__errno>
 8015fb4:	2316      	movs	r3, #22
 8015fb6:	6003      	str	r3, [r0, #0]
 8015fb8:	2000      	movs	r0, #0
 8015fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fbe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80160a4 <_strtol_l.constprop.0+0x100>
 8015fc2:	460d      	mov	r5, r1
 8015fc4:	462e      	mov	r6, r5
 8015fc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015fca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8015fce:	f017 0708 	ands.w	r7, r7, #8
 8015fd2:	d1f7      	bne.n	8015fc4 <_strtol_l.constprop.0+0x20>
 8015fd4:	2c2d      	cmp	r4, #45	; 0x2d
 8015fd6:	d132      	bne.n	801603e <_strtol_l.constprop.0+0x9a>
 8015fd8:	782c      	ldrb	r4, [r5, #0]
 8015fda:	2701      	movs	r7, #1
 8015fdc:	1cb5      	adds	r5, r6, #2
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d05b      	beq.n	801609a <_strtol_l.constprop.0+0xf6>
 8015fe2:	2b10      	cmp	r3, #16
 8015fe4:	d109      	bne.n	8015ffa <_strtol_l.constprop.0+0x56>
 8015fe6:	2c30      	cmp	r4, #48	; 0x30
 8015fe8:	d107      	bne.n	8015ffa <_strtol_l.constprop.0+0x56>
 8015fea:	782c      	ldrb	r4, [r5, #0]
 8015fec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015ff0:	2c58      	cmp	r4, #88	; 0x58
 8015ff2:	d14d      	bne.n	8016090 <_strtol_l.constprop.0+0xec>
 8015ff4:	786c      	ldrb	r4, [r5, #1]
 8015ff6:	2310      	movs	r3, #16
 8015ff8:	3502      	adds	r5, #2
 8015ffa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8015ffe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8016002:	f04f 0e00 	mov.w	lr, #0
 8016006:	fbb8 f9f3 	udiv	r9, r8, r3
 801600a:	4676      	mov	r6, lr
 801600c:	fb03 8a19 	mls	sl, r3, r9, r8
 8016010:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016014:	f1bc 0f09 	cmp.w	ip, #9
 8016018:	d816      	bhi.n	8016048 <_strtol_l.constprop.0+0xa4>
 801601a:	4664      	mov	r4, ip
 801601c:	42a3      	cmp	r3, r4
 801601e:	dd24      	ble.n	801606a <_strtol_l.constprop.0+0xc6>
 8016020:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8016024:	d008      	beq.n	8016038 <_strtol_l.constprop.0+0x94>
 8016026:	45b1      	cmp	r9, r6
 8016028:	d31c      	bcc.n	8016064 <_strtol_l.constprop.0+0xc0>
 801602a:	d101      	bne.n	8016030 <_strtol_l.constprop.0+0x8c>
 801602c:	45a2      	cmp	sl, r4
 801602e:	db19      	blt.n	8016064 <_strtol_l.constprop.0+0xc0>
 8016030:	fb06 4603 	mla	r6, r6, r3, r4
 8016034:	f04f 0e01 	mov.w	lr, #1
 8016038:	f815 4b01 	ldrb.w	r4, [r5], #1
 801603c:	e7e8      	b.n	8016010 <_strtol_l.constprop.0+0x6c>
 801603e:	2c2b      	cmp	r4, #43	; 0x2b
 8016040:	bf04      	itt	eq
 8016042:	782c      	ldrbeq	r4, [r5, #0]
 8016044:	1cb5      	addeq	r5, r6, #2
 8016046:	e7ca      	b.n	8015fde <_strtol_l.constprop.0+0x3a>
 8016048:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801604c:	f1bc 0f19 	cmp.w	ip, #25
 8016050:	d801      	bhi.n	8016056 <_strtol_l.constprop.0+0xb2>
 8016052:	3c37      	subs	r4, #55	; 0x37
 8016054:	e7e2      	b.n	801601c <_strtol_l.constprop.0+0x78>
 8016056:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801605a:	f1bc 0f19 	cmp.w	ip, #25
 801605e:	d804      	bhi.n	801606a <_strtol_l.constprop.0+0xc6>
 8016060:	3c57      	subs	r4, #87	; 0x57
 8016062:	e7db      	b.n	801601c <_strtol_l.constprop.0+0x78>
 8016064:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8016068:	e7e6      	b.n	8016038 <_strtol_l.constprop.0+0x94>
 801606a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801606e:	d105      	bne.n	801607c <_strtol_l.constprop.0+0xd8>
 8016070:	2322      	movs	r3, #34	; 0x22
 8016072:	6003      	str	r3, [r0, #0]
 8016074:	4646      	mov	r6, r8
 8016076:	b942      	cbnz	r2, 801608a <_strtol_l.constprop.0+0xe6>
 8016078:	4630      	mov	r0, r6
 801607a:	e79e      	b.n	8015fba <_strtol_l.constprop.0+0x16>
 801607c:	b107      	cbz	r7, 8016080 <_strtol_l.constprop.0+0xdc>
 801607e:	4276      	negs	r6, r6
 8016080:	2a00      	cmp	r2, #0
 8016082:	d0f9      	beq.n	8016078 <_strtol_l.constprop.0+0xd4>
 8016084:	f1be 0f00 	cmp.w	lr, #0
 8016088:	d000      	beq.n	801608c <_strtol_l.constprop.0+0xe8>
 801608a:	1e69      	subs	r1, r5, #1
 801608c:	6011      	str	r1, [r2, #0]
 801608e:	e7f3      	b.n	8016078 <_strtol_l.constprop.0+0xd4>
 8016090:	2430      	movs	r4, #48	; 0x30
 8016092:	2b00      	cmp	r3, #0
 8016094:	d1b1      	bne.n	8015ffa <_strtol_l.constprop.0+0x56>
 8016096:	2308      	movs	r3, #8
 8016098:	e7af      	b.n	8015ffa <_strtol_l.constprop.0+0x56>
 801609a:	2c30      	cmp	r4, #48	; 0x30
 801609c:	d0a5      	beq.n	8015fea <_strtol_l.constprop.0+0x46>
 801609e:	230a      	movs	r3, #10
 80160a0:	e7ab      	b.n	8015ffa <_strtol_l.constprop.0+0x56>
 80160a2:	bf00      	nop
 80160a4:	0801c769 	.word	0x0801c769

080160a8 <_strtol_r>:
 80160a8:	f7ff bf7c 	b.w	8015fa4 <_strtol_l.constprop.0>

080160ac <strtol>:
 80160ac:	4613      	mov	r3, r2
 80160ae:	460a      	mov	r2, r1
 80160b0:	4601      	mov	r1, r0
 80160b2:	4802      	ldr	r0, [pc, #8]	; (80160bc <strtol+0x10>)
 80160b4:	6800      	ldr	r0, [r0, #0]
 80160b6:	f7ff bf75 	b.w	8015fa4 <_strtol_l.constprop.0>
 80160ba:	bf00      	nop
 80160bc:	200001ec 	.word	0x200001ec

080160c0 <_fwalk_sglue>:
 80160c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160c4:	4607      	mov	r7, r0
 80160c6:	4688      	mov	r8, r1
 80160c8:	4614      	mov	r4, r2
 80160ca:	2600      	movs	r6, #0
 80160cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160d0:	f1b9 0901 	subs.w	r9, r9, #1
 80160d4:	d505      	bpl.n	80160e2 <_fwalk_sglue+0x22>
 80160d6:	6824      	ldr	r4, [r4, #0]
 80160d8:	2c00      	cmp	r4, #0
 80160da:	d1f7      	bne.n	80160cc <_fwalk_sglue+0xc>
 80160dc:	4630      	mov	r0, r6
 80160de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160e2:	89ab      	ldrh	r3, [r5, #12]
 80160e4:	2b01      	cmp	r3, #1
 80160e6:	d907      	bls.n	80160f8 <_fwalk_sglue+0x38>
 80160e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160ec:	3301      	adds	r3, #1
 80160ee:	d003      	beq.n	80160f8 <_fwalk_sglue+0x38>
 80160f0:	4629      	mov	r1, r5
 80160f2:	4638      	mov	r0, r7
 80160f4:	47c0      	blx	r8
 80160f6:	4306      	orrs	r6, r0
 80160f8:	3568      	adds	r5, #104	; 0x68
 80160fa:	e7e9      	b.n	80160d0 <_fwalk_sglue+0x10>

080160fc <strncmp>:
 80160fc:	b510      	push	{r4, lr}
 80160fe:	b16a      	cbz	r2, 801611c <strncmp+0x20>
 8016100:	3901      	subs	r1, #1
 8016102:	1884      	adds	r4, r0, r2
 8016104:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016108:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801610c:	429a      	cmp	r2, r3
 801610e:	d103      	bne.n	8016118 <strncmp+0x1c>
 8016110:	42a0      	cmp	r0, r4
 8016112:	d001      	beq.n	8016118 <strncmp+0x1c>
 8016114:	2a00      	cmp	r2, #0
 8016116:	d1f5      	bne.n	8016104 <strncmp+0x8>
 8016118:	1ad0      	subs	r0, r2, r3
 801611a:	bd10      	pop	{r4, pc}
 801611c:	4610      	mov	r0, r2
 801611e:	e7fc      	b.n	801611a <strncmp+0x1e>

08016120 <memset>:
 8016120:	4402      	add	r2, r0
 8016122:	4603      	mov	r3, r0
 8016124:	4293      	cmp	r3, r2
 8016126:	d100      	bne.n	801612a <memset+0xa>
 8016128:	4770      	bx	lr
 801612a:	f803 1b01 	strb.w	r1, [r3], #1
 801612e:	e7f9      	b.n	8016124 <memset+0x4>

08016130 <_localeconv_r>:
 8016130:	4800      	ldr	r0, [pc, #0]	; (8016134 <_localeconv_r+0x4>)
 8016132:	4770      	bx	lr
 8016134:	20000124 	.word	0x20000124

08016138 <__errno>:
 8016138:	4b01      	ldr	r3, [pc, #4]	; (8016140 <__errno+0x8>)
 801613a:	6818      	ldr	r0, [r3, #0]
 801613c:	4770      	bx	lr
 801613e:	bf00      	nop
 8016140:	200001ec 	.word	0x200001ec

08016144 <__libc_init_array>:
 8016144:	b570      	push	{r4, r5, r6, lr}
 8016146:	4d0d      	ldr	r5, [pc, #52]	; (801617c <__libc_init_array+0x38>)
 8016148:	4c0d      	ldr	r4, [pc, #52]	; (8016180 <__libc_init_array+0x3c>)
 801614a:	1b64      	subs	r4, r4, r5
 801614c:	10a4      	asrs	r4, r4, #2
 801614e:	2600      	movs	r6, #0
 8016150:	42a6      	cmp	r6, r4
 8016152:	d109      	bne.n	8016168 <__libc_init_array+0x24>
 8016154:	4d0b      	ldr	r5, [pc, #44]	; (8016184 <__libc_init_array+0x40>)
 8016156:	4c0c      	ldr	r4, [pc, #48]	; (8016188 <__libc_init_array+0x44>)
 8016158:	f005 fd9e 	bl	801bc98 <_init>
 801615c:	1b64      	subs	r4, r4, r5
 801615e:	10a4      	asrs	r4, r4, #2
 8016160:	2600      	movs	r6, #0
 8016162:	42a6      	cmp	r6, r4
 8016164:	d105      	bne.n	8016172 <__libc_init_array+0x2e>
 8016166:	bd70      	pop	{r4, r5, r6, pc}
 8016168:	f855 3b04 	ldr.w	r3, [r5], #4
 801616c:	4798      	blx	r3
 801616e:	3601      	adds	r6, #1
 8016170:	e7ee      	b.n	8016150 <__libc_init_array+0xc>
 8016172:	f855 3b04 	ldr.w	r3, [r5], #4
 8016176:	4798      	blx	r3
 8016178:	3601      	adds	r6, #1
 801617a:	e7f2      	b.n	8016162 <__libc_init_array+0x1e>
 801617c:	0801d150 	.word	0x0801d150
 8016180:	0801d150 	.word	0x0801d150
 8016184:	0801d150 	.word	0x0801d150
 8016188:	0801d154 	.word	0x0801d154

0801618c <__retarget_lock_acquire_recursive>:
 801618c:	4770      	bx	lr

0801618e <__retarget_lock_release_recursive>:
 801618e:	4770      	bx	lr

08016190 <memcpy>:
 8016190:	440a      	add	r2, r1
 8016192:	4291      	cmp	r1, r2
 8016194:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016198:	d100      	bne.n	801619c <memcpy+0xc>
 801619a:	4770      	bx	lr
 801619c:	b510      	push	{r4, lr}
 801619e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80161a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80161a6:	4291      	cmp	r1, r2
 80161a8:	d1f9      	bne.n	801619e <memcpy+0xe>
 80161aa:	bd10      	pop	{r4, pc}
 80161ac:	0000      	movs	r0, r0
	...

080161b0 <nan>:
 80161b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80161b8 <nan+0x8>
 80161b4:	4770      	bx	lr
 80161b6:	bf00      	nop
 80161b8:	00000000 	.word	0x00000000
 80161bc:	7ff80000 	.word	0x7ff80000

080161c0 <nanf>:
 80161c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80161c8 <nanf+0x8>
 80161c4:	4770      	bx	lr
 80161c6:	bf00      	nop
 80161c8:	7fc00000 	.word	0x7fc00000

080161cc <quorem>:
 80161cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161d0:	6903      	ldr	r3, [r0, #16]
 80161d2:	690c      	ldr	r4, [r1, #16]
 80161d4:	42a3      	cmp	r3, r4
 80161d6:	4607      	mov	r7, r0
 80161d8:	db7e      	blt.n	80162d8 <quorem+0x10c>
 80161da:	3c01      	subs	r4, #1
 80161dc:	f101 0814 	add.w	r8, r1, #20
 80161e0:	f100 0514 	add.w	r5, r0, #20
 80161e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80161e8:	9301      	str	r3, [sp, #4]
 80161ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80161ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80161f2:	3301      	adds	r3, #1
 80161f4:	429a      	cmp	r2, r3
 80161f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80161fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80161fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8016202:	d331      	bcc.n	8016268 <quorem+0x9c>
 8016204:	f04f 0e00 	mov.w	lr, #0
 8016208:	4640      	mov	r0, r8
 801620a:	46ac      	mov	ip, r5
 801620c:	46f2      	mov	sl, lr
 801620e:	f850 2b04 	ldr.w	r2, [r0], #4
 8016212:	b293      	uxth	r3, r2
 8016214:	fb06 e303 	mla	r3, r6, r3, lr
 8016218:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801621c:	0c1a      	lsrs	r2, r3, #16
 801621e:	b29b      	uxth	r3, r3
 8016220:	ebaa 0303 	sub.w	r3, sl, r3
 8016224:	f8dc a000 	ldr.w	sl, [ip]
 8016228:	fa13 f38a 	uxtah	r3, r3, sl
 801622c:	fb06 220e 	mla	r2, r6, lr, r2
 8016230:	9300      	str	r3, [sp, #0]
 8016232:	9b00      	ldr	r3, [sp, #0]
 8016234:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016238:	b292      	uxth	r2, r2
 801623a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801623e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016242:	f8bd 3000 	ldrh.w	r3, [sp]
 8016246:	4581      	cmp	r9, r0
 8016248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801624c:	f84c 3b04 	str.w	r3, [ip], #4
 8016250:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016254:	d2db      	bcs.n	801620e <quorem+0x42>
 8016256:	f855 300b 	ldr.w	r3, [r5, fp]
 801625a:	b92b      	cbnz	r3, 8016268 <quorem+0x9c>
 801625c:	9b01      	ldr	r3, [sp, #4]
 801625e:	3b04      	subs	r3, #4
 8016260:	429d      	cmp	r5, r3
 8016262:	461a      	mov	r2, r3
 8016264:	d32c      	bcc.n	80162c0 <quorem+0xf4>
 8016266:	613c      	str	r4, [r7, #16]
 8016268:	4638      	mov	r0, r7
 801626a:	f001 ff15 	bl	8018098 <__mcmp>
 801626e:	2800      	cmp	r0, #0
 8016270:	db22      	blt.n	80162b8 <quorem+0xec>
 8016272:	3601      	adds	r6, #1
 8016274:	4629      	mov	r1, r5
 8016276:	2000      	movs	r0, #0
 8016278:	f858 2b04 	ldr.w	r2, [r8], #4
 801627c:	f8d1 c000 	ldr.w	ip, [r1]
 8016280:	b293      	uxth	r3, r2
 8016282:	1ac3      	subs	r3, r0, r3
 8016284:	0c12      	lsrs	r2, r2, #16
 8016286:	fa13 f38c 	uxtah	r3, r3, ip
 801628a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801628e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016292:	b29b      	uxth	r3, r3
 8016294:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016298:	45c1      	cmp	r9, r8
 801629a:	f841 3b04 	str.w	r3, [r1], #4
 801629e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80162a2:	d2e9      	bcs.n	8016278 <quorem+0xac>
 80162a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80162a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80162ac:	b922      	cbnz	r2, 80162b8 <quorem+0xec>
 80162ae:	3b04      	subs	r3, #4
 80162b0:	429d      	cmp	r5, r3
 80162b2:	461a      	mov	r2, r3
 80162b4:	d30a      	bcc.n	80162cc <quorem+0x100>
 80162b6:	613c      	str	r4, [r7, #16]
 80162b8:	4630      	mov	r0, r6
 80162ba:	b003      	add	sp, #12
 80162bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162c0:	6812      	ldr	r2, [r2, #0]
 80162c2:	3b04      	subs	r3, #4
 80162c4:	2a00      	cmp	r2, #0
 80162c6:	d1ce      	bne.n	8016266 <quorem+0x9a>
 80162c8:	3c01      	subs	r4, #1
 80162ca:	e7c9      	b.n	8016260 <quorem+0x94>
 80162cc:	6812      	ldr	r2, [r2, #0]
 80162ce:	3b04      	subs	r3, #4
 80162d0:	2a00      	cmp	r2, #0
 80162d2:	d1f0      	bne.n	80162b6 <quorem+0xea>
 80162d4:	3c01      	subs	r4, #1
 80162d6:	e7eb      	b.n	80162b0 <quorem+0xe4>
 80162d8:	2000      	movs	r0, #0
 80162da:	e7ee      	b.n	80162ba <quorem+0xee>
 80162dc:	0000      	movs	r0, r0
	...

080162e0 <_dtoa_r>:
 80162e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162e4:	ed2d 8b04 	vpush	{d8-d9}
 80162e8:	69c5      	ldr	r5, [r0, #28]
 80162ea:	b093      	sub	sp, #76	; 0x4c
 80162ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80162f0:	ec57 6b10 	vmov	r6, r7, d0
 80162f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80162f8:	9107      	str	r1, [sp, #28]
 80162fa:	4604      	mov	r4, r0
 80162fc:	920a      	str	r2, [sp, #40]	; 0x28
 80162fe:	930d      	str	r3, [sp, #52]	; 0x34
 8016300:	b975      	cbnz	r5, 8016320 <_dtoa_r+0x40>
 8016302:	2010      	movs	r0, #16
 8016304:	f001 fa8e 	bl	8017824 <malloc>
 8016308:	4602      	mov	r2, r0
 801630a:	61e0      	str	r0, [r4, #28]
 801630c:	b920      	cbnz	r0, 8016318 <_dtoa_r+0x38>
 801630e:	4bae      	ldr	r3, [pc, #696]	; (80165c8 <_dtoa_r+0x2e8>)
 8016310:	21ef      	movs	r1, #239	; 0xef
 8016312:	48ae      	ldr	r0, [pc, #696]	; (80165cc <_dtoa_r+0x2ec>)
 8016314:	f002 f996 	bl	8018644 <__assert_func>
 8016318:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801631c:	6005      	str	r5, [r0, #0]
 801631e:	60c5      	str	r5, [r0, #12]
 8016320:	69e3      	ldr	r3, [r4, #28]
 8016322:	6819      	ldr	r1, [r3, #0]
 8016324:	b151      	cbz	r1, 801633c <_dtoa_r+0x5c>
 8016326:	685a      	ldr	r2, [r3, #4]
 8016328:	604a      	str	r2, [r1, #4]
 801632a:	2301      	movs	r3, #1
 801632c:	4093      	lsls	r3, r2
 801632e:	608b      	str	r3, [r1, #8]
 8016330:	4620      	mov	r0, r4
 8016332:	f001 fc2b 	bl	8017b8c <_Bfree>
 8016336:	69e3      	ldr	r3, [r4, #28]
 8016338:	2200      	movs	r2, #0
 801633a:	601a      	str	r2, [r3, #0]
 801633c:	1e3b      	subs	r3, r7, #0
 801633e:	bfbb      	ittet	lt
 8016340:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016344:	9303      	strlt	r3, [sp, #12]
 8016346:	2300      	movge	r3, #0
 8016348:	2201      	movlt	r2, #1
 801634a:	bfac      	ite	ge
 801634c:	f8c8 3000 	strge.w	r3, [r8]
 8016350:	f8c8 2000 	strlt.w	r2, [r8]
 8016354:	4b9e      	ldr	r3, [pc, #632]	; (80165d0 <_dtoa_r+0x2f0>)
 8016356:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801635a:	ea33 0308 	bics.w	r3, r3, r8
 801635e:	d11b      	bne.n	8016398 <_dtoa_r+0xb8>
 8016360:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016362:	f242 730f 	movw	r3, #9999	; 0x270f
 8016366:	6013      	str	r3, [r2, #0]
 8016368:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801636c:	4333      	orrs	r3, r6
 801636e:	f000 8593 	beq.w	8016e98 <_dtoa_r+0xbb8>
 8016372:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016374:	b963      	cbnz	r3, 8016390 <_dtoa_r+0xb0>
 8016376:	4b97      	ldr	r3, [pc, #604]	; (80165d4 <_dtoa_r+0x2f4>)
 8016378:	e027      	b.n	80163ca <_dtoa_r+0xea>
 801637a:	4b97      	ldr	r3, [pc, #604]	; (80165d8 <_dtoa_r+0x2f8>)
 801637c:	9300      	str	r3, [sp, #0]
 801637e:	3308      	adds	r3, #8
 8016380:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016382:	6013      	str	r3, [r2, #0]
 8016384:	9800      	ldr	r0, [sp, #0]
 8016386:	b013      	add	sp, #76	; 0x4c
 8016388:	ecbd 8b04 	vpop	{d8-d9}
 801638c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016390:	4b90      	ldr	r3, [pc, #576]	; (80165d4 <_dtoa_r+0x2f4>)
 8016392:	9300      	str	r3, [sp, #0]
 8016394:	3303      	adds	r3, #3
 8016396:	e7f3      	b.n	8016380 <_dtoa_r+0xa0>
 8016398:	ed9d 7b02 	vldr	d7, [sp, #8]
 801639c:	2200      	movs	r2, #0
 801639e:	ec51 0b17 	vmov	r0, r1, d7
 80163a2:	eeb0 8a47 	vmov.f32	s16, s14
 80163a6:	eef0 8a67 	vmov.f32	s17, s15
 80163aa:	2300      	movs	r3, #0
 80163ac:	f7ea fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80163b0:	4681      	mov	r9, r0
 80163b2:	b160      	cbz	r0, 80163ce <_dtoa_r+0xee>
 80163b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80163b6:	2301      	movs	r3, #1
 80163b8:	6013      	str	r3, [r2, #0]
 80163ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80163bc:	2b00      	cmp	r3, #0
 80163be:	f000 8568 	beq.w	8016e92 <_dtoa_r+0xbb2>
 80163c2:	4b86      	ldr	r3, [pc, #536]	; (80165dc <_dtoa_r+0x2fc>)
 80163c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80163c6:	6013      	str	r3, [r2, #0]
 80163c8:	3b01      	subs	r3, #1
 80163ca:	9300      	str	r3, [sp, #0]
 80163cc:	e7da      	b.n	8016384 <_dtoa_r+0xa4>
 80163ce:	aa10      	add	r2, sp, #64	; 0x40
 80163d0:	a911      	add	r1, sp, #68	; 0x44
 80163d2:	4620      	mov	r0, r4
 80163d4:	eeb0 0a48 	vmov.f32	s0, s16
 80163d8:	eef0 0a68 	vmov.f32	s1, s17
 80163dc:	f001 ff72 	bl	80182c4 <__d2b>
 80163e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80163e4:	4682      	mov	sl, r0
 80163e6:	2d00      	cmp	r5, #0
 80163e8:	d07f      	beq.n	80164ea <_dtoa_r+0x20a>
 80163ea:	ee18 3a90 	vmov	r3, s17
 80163ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80163f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80163f6:	ec51 0b18 	vmov	r0, r1, d8
 80163fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80163fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016402:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016406:	4619      	mov	r1, r3
 8016408:	2200      	movs	r2, #0
 801640a:	4b75      	ldr	r3, [pc, #468]	; (80165e0 <_dtoa_r+0x300>)
 801640c:	f7e9 ff3c 	bl	8000288 <__aeabi_dsub>
 8016410:	a367      	add	r3, pc, #412	; (adr r3, 80165b0 <_dtoa_r+0x2d0>)
 8016412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016416:	f7ea f8ef 	bl	80005f8 <__aeabi_dmul>
 801641a:	a367      	add	r3, pc, #412	; (adr r3, 80165b8 <_dtoa_r+0x2d8>)
 801641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016420:	f7e9 ff34 	bl	800028c <__adddf3>
 8016424:	4606      	mov	r6, r0
 8016426:	4628      	mov	r0, r5
 8016428:	460f      	mov	r7, r1
 801642a:	f7ea f87b 	bl	8000524 <__aeabi_i2d>
 801642e:	a364      	add	r3, pc, #400	; (adr r3, 80165c0 <_dtoa_r+0x2e0>)
 8016430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016434:	f7ea f8e0 	bl	80005f8 <__aeabi_dmul>
 8016438:	4602      	mov	r2, r0
 801643a:	460b      	mov	r3, r1
 801643c:	4630      	mov	r0, r6
 801643e:	4639      	mov	r1, r7
 8016440:	f7e9 ff24 	bl	800028c <__adddf3>
 8016444:	4606      	mov	r6, r0
 8016446:	460f      	mov	r7, r1
 8016448:	f7ea fb86 	bl	8000b58 <__aeabi_d2iz>
 801644c:	2200      	movs	r2, #0
 801644e:	4683      	mov	fp, r0
 8016450:	2300      	movs	r3, #0
 8016452:	4630      	mov	r0, r6
 8016454:	4639      	mov	r1, r7
 8016456:	f7ea fb41 	bl	8000adc <__aeabi_dcmplt>
 801645a:	b148      	cbz	r0, 8016470 <_dtoa_r+0x190>
 801645c:	4658      	mov	r0, fp
 801645e:	f7ea f861 	bl	8000524 <__aeabi_i2d>
 8016462:	4632      	mov	r2, r6
 8016464:	463b      	mov	r3, r7
 8016466:	f7ea fb2f 	bl	8000ac8 <__aeabi_dcmpeq>
 801646a:	b908      	cbnz	r0, 8016470 <_dtoa_r+0x190>
 801646c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8016470:	f1bb 0f16 	cmp.w	fp, #22
 8016474:	d857      	bhi.n	8016526 <_dtoa_r+0x246>
 8016476:	4b5b      	ldr	r3, [pc, #364]	; (80165e4 <_dtoa_r+0x304>)
 8016478:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016480:	ec51 0b18 	vmov	r0, r1, d8
 8016484:	f7ea fb2a 	bl	8000adc <__aeabi_dcmplt>
 8016488:	2800      	cmp	r0, #0
 801648a:	d04e      	beq.n	801652a <_dtoa_r+0x24a>
 801648c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8016490:	2300      	movs	r3, #0
 8016492:	930c      	str	r3, [sp, #48]	; 0x30
 8016494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016496:	1b5b      	subs	r3, r3, r5
 8016498:	1e5a      	subs	r2, r3, #1
 801649a:	bf45      	ittet	mi
 801649c:	f1c3 0301 	rsbmi	r3, r3, #1
 80164a0:	9305      	strmi	r3, [sp, #20]
 80164a2:	2300      	movpl	r3, #0
 80164a4:	2300      	movmi	r3, #0
 80164a6:	9206      	str	r2, [sp, #24]
 80164a8:	bf54      	ite	pl
 80164aa:	9305      	strpl	r3, [sp, #20]
 80164ac:	9306      	strmi	r3, [sp, #24]
 80164ae:	f1bb 0f00 	cmp.w	fp, #0
 80164b2:	db3c      	blt.n	801652e <_dtoa_r+0x24e>
 80164b4:	9b06      	ldr	r3, [sp, #24]
 80164b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80164ba:	445b      	add	r3, fp
 80164bc:	9306      	str	r3, [sp, #24]
 80164be:	2300      	movs	r3, #0
 80164c0:	9308      	str	r3, [sp, #32]
 80164c2:	9b07      	ldr	r3, [sp, #28]
 80164c4:	2b09      	cmp	r3, #9
 80164c6:	d868      	bhi.n	801659a <_dtoa_r+0x2ba>
 80164c8:	2b05      	cmp	r3, #5
 80164ca:	bfc4      	itt	gt
 80164cc:	3b04      	subgt	r3, #4
 80164ce:	9307      	strgt	r3, [sp, #28]
 80164d0:	9b07      	ldr	r3, [sp, #28]
 80164d2:	f1a3 0302 	sub.w	r3, r3, #2
 80164d6:	bfcc      	ite	gt
 80164d8:	2500      	movgt	r5, #0
 80164da:	2501      	movle	r5, #1
 80164dc:	2b03      	cmp	r3, #3
 80164de:	f200 8085 	bhi.w	80165ec <_dtoa_r+0x30c>
 80164e2:	e8df f003 	tbb	[pc, r3]
 80164e6:	3b2e      	.short	0x3b2e
 80164e8:	5839      	.short	0x5839
 80164ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80164ee:	441d      	add	r5, r3
 80164f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80164f4:	2b20      	cmp	r3, #32
 80164f6:	bfc1      	itttt	gt
 80164f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80164fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8016500:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8016504:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016508:	bfd6      	itet	le
 801650a:	f1c3 0320 	rsble	r3, r3, #32
 801650e:	ea48 0003 	orrgt.w	r0, r8, r3
 8016512:	fa06 f003 	lslle.w	r0, r6, r3
 8016516:	f7e9 fff5 	bl	8000504 <__aeabi_ui2d>
 801651a:	2201      	movs	r2, #1
 801651c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016520:	3d01      	subs	r5, #1
 8016522:	920e      	str	r2, [sp, #56]	; 0x38
 8016524:	e76f      	b.n	8016406 <_dtoa_r+0x126>
 8016526:	2301      	movs	r3, #1
 8016528:	e7b3      	b.n	8016492 <_dtoa_r+0x1b2>
 801652a:	900c      	str	r0, [sp, #48]	; 0x30
 801652c:	e7b2      	b.n	8016494 <_dtoa_r+0x1b4>
 801652e:	9b05      	ldr	r3, [sp, #20]
 8016530:	eba3 030b 	sub.w	r3, r3, fp
 8016534:	9305      	str	r3, [sp, #20]
 8016536:	f1cb 0300 	rsb	r3, fp, #0
 801653a:	9308      	str	r3, [sp, #32]
 801653c:	2300      	movs	r3, #0
 801653e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016540:	e7bf      	b.n	80164c2 <_dtoa_r+0x1e2>
 8016542:	2300      	movs	r3, #0
 8016544:	9309      	str	r3, [sp, #36]	; 0x24
 8016546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016548:	2b00      	cmp	r3, #0
 801654a:	dc52      	bgt.n	80165f2 <_dtoa_r+0x312>
 801654c:	2301      	movs	r3, #1
 801654e:	9301      	str	r3, [sp, #4]
 8016550:	9304      	str	r3, [sp, #16]
 8016552:	461a      	mov	r2, r3
 8016554:	920a      	str	r2, [sp, #40]	; 0x28
 8016556:	e00b      	b.n	8016570 <_dtoa_r+0x290>
 8016558:	2301      	movs	r3, #1
 801655a:	e7f3      	b.n	8016544 <_dtoa_r+0x264>
 801655c:	2300      	movs	r3, #0
 801655e:	9309      	str	r3, [sp, #36]	; 0x24
 8016560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016562:	445b      	add	r3, fp
 8016564:	9301      	str	r3, [sp, #4]
 8016566:	3301      	adds	r3, #1
 8016568:	2b01      	cmp	r3, #1
 801656a:	9304      	str	r3, [sp, #16]
 801656c:	bfb8      	it	lt
 801656e:	2301      	movlt	r3, #1
 8016570:	69e0      	ldr	r0, [r4, #28]
 8016572:	2100      	movs	r1, #0
 8016574:	2204      	movs	r2, #4
 8016576:	f102 0614 	add.w	r6, r2, #20
 801657a:	429e      	cmp	r6, r3
 801657c:	d93d      	bls.n	80165fa <_dtoa_r+0x31a>
 801657e:	6041      	str	r1, [r0, #4]
 8016580:	4620      	mov	r0, r4
 8016582:	f001 fac3 	bl	8017b0c <_Balloc>
 8016586:	9000      	str	r0, [sp, #0]
 8016588:	2800      	cmp	r0, #0
 801658a:	d139      	bne.n	8016600 <_dtoa_r+0x320>
 801658c:	4b16      	ldr	r3, [pc, #88]	; (80165e8 <_dtoa_r+0x308>)
 801658e:	4602      	mov	r2, r0
 8016590:	f240 11af 	movw	r1, #431	; 0x1af
 8016594:	e6bd      	b.n	8016312 <_dtoa_r+0x32>
 8016596:	2301      	movs	r3, #1
 8016598:	e7e1      	b.n	801655e <_dtoa_r+0x27e>
 801659a:	2501      	movs	r5, #1
 801659c:	2300      	movs	r3, #0
 801659e:	9307      	str	r3, [sp, #28]
 80165a0:	9509      	str	r5, [sp, #36]	; 0x24
 80165a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165a6:	9301      	str	r3, [sp, #4]
 80165a8:	9304      	str	r3, [sp, #16]
 80165aa:	2200      	movs	r2, #0
 80165ac:	2312      	movs	r3, #18
 80165ae:	e7d1      	b.n	8016554 <_dtoa_r+0x274>
 80165b0:	636f4361 	.word	0x636f4361
 80165b4:	3fd287a7 	.word	0x3fd287a7
 80165b8:	8b60c8b3 	.word	0x8b60c8b3
 80165bc:	3fc68a28 	.word	0x3fc68a28
 80165c0:	509f79fb 	.word	0x509f79fb
 80165c4:	3fd34413 	.word	0x3fd34413
 80165c8:	0801c876 	.word	0x0801c876
 80165cc:	0801c88d 	.word	0x0801c88d
 80165d0:	7ff00000 	.word	0x7ff00000
 80165d4:	0801c872 	.word	0x0801c872
 80165d8:	0801c869 	.word	0x0801c869
 80165dc:	0801c6e1 	.word	0x0801c6e1
 80165e0:	3ff80000 	.word	0x3ff80000
 80165e4:	0801c9e8 	.word	0x0801c9e8
 80165e8:	0801c8e5 	.word	0x0801c8e5
 80165ec:	2301      	movs	r3, #1
 80165ee:	9309      	str	r3, [sp, #36]	; 0x24
 80165f0:	e7d7      	b.n	80165a2 <_dtoa_r+0x2c2>
 80165f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165f4:	9301      	str	r3, [sp, #4]
 80165f6:	9304      	str	r3, [sp, #16]
 80165f8:	e7ba      	b.n	8016570 <_dtoa_r+0x290>
 80165fa:	3101      	adds	r1, #1
 80165fc:	0052      	lsls	r2, r2, #1
 80165fe:	e7ba      	b.n	8016576 <_dtoa_r+0x296>
 8016600:	69e3      	ldr	r3, [r4, #28]
 8016602:	9a00      	ldr	r2, [sp, #0]
 8016604:	601a      	str	r2, [r3, #0]
 8016606:	9b04      	ldr	r3, [sp, #16]
 8016608:	2b0e      	cmp	r3, #14
 801660a:	f200 80a8 	bhi.w	801675e <_dtoa_r+0x47e>
 801660e:	2d00      	cmp	r5, #0
 8016610:	f000 80a5 	beq.w	801675e <_dtoa_r+0x47e>
 8016614:	f1bb 0f00 	cmp.w	fp, #0
 8016618:	dd38      	ble.n	801668c <_dtoa_r+0x3ac>
 801661a:	4bc0      	ldr	r3, [pc, #768]	; (801691c <_dtoa_r+0x63c>)
 801661c:	f00b 020f 	and.w	r2, fp, #15
 8016620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016624:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016628:	e9d3 6700 	ldrd	r6, r7, [r3]
 801662c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8016630:	d019      	beq.n	8016666 <_dtoa_r+0x386>
 8016632:	4bbb      	ldr	r3, [pc, #748]	; (8016920 <_dtoa_r+0x640>)
 8016634:	ec51 0b18 	vmov	r0, r1, d8
 8016638:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801663c:	f7ea f906 	bl	800084c <__aeabi_ddiv>
 8016640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016644:	f008 080f 	and.w	r8, r8, #15
 8016648:	2503      	movs	r5, #3
 801664a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8016920 <_dtoa_r+0x640>
 801664e:	f1b8 0f00 	cmp.w	r8, #0
 8016652:	d10a      	bne.n	801666a <_dtoa_r+0x38a>
 8016654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016658:	4632      	mov	r2, r6
 801665a:	463b      	mov	r3, r7
 801665c:	f7ea f8f6 	bl	800084c <__aeabi_ddiv>
 8016660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016664:	e02b      	b.n	80166be <_dtoa_r+0x3de>
 8016666:	2502      	movs	r5, #2
 8016668:	e7ef      	b.n	801664a <_dtoa_r+0x36a>
 801666a:	f018 0f01 	tst.w	r8, #1
 801666e:	d008      	beq.n	8016682 <_dtoa_r+0x3a2>
 8016670:	4630      	mov	r0, r6
 8016672:	4639      	mov	r1, r7
 8016674:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016678:	f7e9 ffbe 	bl	80005f8 <__aeabi_dmul>
 801667c:	3501      	adds	r5, #1
 801667e:	4606      	mov	r6, r0
 8016680:	460f      	mov	r7, r1
 8016682:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016686:	f109 0908 	add.w	r9, r9, #8
 801668a:	e7e0      	b.n	801664e <_dtoa_r+0x36e>
 801668c:	f000 809f 	beq.w	80167ce <_dtoa_r+0x4ee>
 8016690:	f1cb 0600 	rsb	r6, fp, #0
 8016694:	4ba1      	ldr	r3, [pc, #644]	; (801691c <_dtoa_r+0x63c>)
 8016696:	4fa2      	ldr	r7, [pc, #648]	; (8016920 <_dtoa_r+0x640>)
 8016698:	f006 020f 	and.w	r2, r6, #15
 801669c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80166a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166a4:	ec51 0b18 	vmov	r0, r1, d8
 80166a8:	f7e9 ffa6 	bl	80005f8 <__aeabi_dmul>
 80166ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80166b0:	1136      	asrs	r6, r6, #4
 80166b2:	2300      	movs	r3, #0
 80166b4:	2502      	movs	r5, #2
 80166b6:	2e00      	cmp	r6, #0
 80166b8:	d17e      	bne.n	80167b8 <_dtoa_r+0x4d8>
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d1d0      	bne.n	8016660 <_dtoa_r+0x380>
 80166be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	f000 8084 	beq.w	80167d2 <_dtoa_r+0x4f2>
 80166ca:	4b96      	ldr	r3, [pc, #600]	; (8016924 <_dtoa_r+0x644>)
 80166cc:	2200      	movs	r2, #0
 80166ce:	4640      	mov	r0, r8
 80166d0:	4649      	mov	r1, r9
 80166d2:	f7ea fa03 	bl	8000adc <__aeabi_dcmplt>
 80166d6:	2800      	cmp	r0, #0
 80166d8:	d07b      	beq.n	80167d2 <_dtoa_r+0x4f2>
 80166da:	9b04      	ldr	r3, [sp, #16]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d078      	beq.n	80167d2 <_dtoa_r+0x4f2>
 80166e0:	9b01      	ldr	r3, [sp, #4]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	dd39      	ble.n	801675a <_dtoa_r+0x47a>
 80166e6:	4b90      	ldr	r3, [pc, #576]	; (8016928 <_dtoa_r+0x648>)
 80166e8:	2200      	movs	r2, #0
 80166ea:	4640      	mov	r0, r8
 80166ec:	4649      	mov	r1, r9
 80166ee:	f7e9 ff83 	bl	80005f8 <__aeabi_dmul>
 80166f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80166f6:	9e01      	ldr	r6, [sp, #4]
 80166f8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80166fc:	3501      	adds	r5, #1
 80166fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016702:	4628      	mov	r0, r5
 8016704:	f7e9 ff0e 	bl	8000524 <__aeabi_i2d>
 8016708:	4642      	mov	r2, r8
 801670a:	464b      	mov	r3, r9
 801670c:	f7e9 ff74 	bl	80005f8 <__aeabi_dmul>
 8016710:	4b86      	ldr	r3, [pc, #536]	; (801692c <_dtoa_r+0x64c>)
 8016712:	2200      	movs	r2, #0
 8016714:	f7e9 fdba 	bl	800028c <__adddf3>
 8016718:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801671c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016720:	9303      	str	r3, [sp, #12]
 8016722:	2e00      	cmp	r6, #0
 8016724:	d158      	bne.n	80167d8 <_dtoa_r+0x4f8>
 8016726:	4b82      	ldr	r3, [pc, #520]	; (8016930 <_dtoa_r+0x650>)
 8016728:	2200      	movs	r2, #0
 801672a:	4640      	mov	r0, r8
 801672c:	4649      	mov	r1, r9
 801672e:	f7e9 fdab 	bl	8000288 <__aeabi_dsub>
 8016732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016736:	4680      	mov	r8, r0
 8016738:	4689      	mov	r9, r1
 801673a:	f7ea f9ed 	bl	8000b18 <__aeabi_dcmpgt>
 801673e:	2800      	cmp	r0, #0
 8016740:	f040 8296 	bne.w	8016c70 <_dtoa_r+0x990>
 8016744:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016748:	4640      	mov	r0, r8
 801674a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801674e:	4649      	mov	r1, r9
 8016750:	f7ea f9c4 	bl	8000adc <__aeabi_dcmplt>
 8016754:	2800      	cmp	r0, #0
 8016756:	f040 8289 	bne.w	8016c6c <_dtoa_r+0x98c>
 801675a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801675e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016760:	2b00      	cmp	r3, #0
 8016762:	f2c0 814e 	blt.w	8016a02 <_dtoa_r+0x722>
 8016766:	f1bb 0f0e 	cmp.w	fp, #14
 801676a:	f300 814a 	bgt.w	8016a02 <_dtoa_r+0x722>
 801676e:	4b6b      	ldr	r3, [pc, #428]	; (801691c <_dtoa_r+0x63c>)
 8016770:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801677a:	2b00      	cmp	r3, #0
 801677c:	f280 80dc 	bge.w	8016938 <_dtoa_r+0x658>
 8016780:	9b04      	ldr	r3, [sp, #16]
 8016782:	2b00      	cmp	r3, #0
 8016784:	f300 80d8 	bgt.w	8016938 <_dtoa_r+0x658>
 8016788:	f040 826f 	bne.w	8016c6a <_dtoa_r+0x98a>
 801678c:	4b68      	ldr	r3, [pc, #416]	; (8016930 <_dtoa_r+0x650>)
 801678e:	2200      	movs	r2, #0
 8016790:	4640      	mov	r0, r8
 8016792:	4649      	mov	r1, r9
 8016794:	f7e9 ff30 	bl	80005f8 <__aeabi_dmul>
 8016798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801679c:	f7ea f9b2 	bl	8000b04 <__aeabi_dcmpge>
 80167a0:	9e04      	ldr	r6, [sp, #16]
 80167a2:	4637      	mov	r7, r6
 80167a4:	2800      	cmp	r0, #0
 80167a6:	f040 8245 	bne.w	8016c34 <_dtoa_r+0x954>
 80167aa:	9d00      	ldr	r5, [sp, #0]
 80167ac:	2331      	movs	r3, #49	; 0x31
 80167ae:	f805 3b01 	strb.w	r3, [r5], #1
 80167b2:	f10b 0b01 	add.w	fp, fp, #1
 80167b6:	e241      	b.n	8016c3c <_dtoa_r+0x95c>
 80167b8:	07f2      	lsls	r2, r6, #31
 80167ba:	d505      	bpl.n	80167c8 <_dtoa_r+0x4e8>
 80167bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80167c0:	f7e9 ff1a 	bl	80005f8 <__aeabi_dmul>
 80167c4:	3501      	adds	r5, #1
 80167c6:	2301      	movs	r3, #1
 80167c8:	1076      	asrs	r6, r6, #1
 80167ca:	3708      	adds	r7, #8
 80167cc:	e773      	b.n	80166b6 <_dtoa_r+0x3d6>
 80167ce:	2502      	movs	r5, #2
 80167d0:	e775      	b.n	80166be <_dtoa_r+0x3de>
 80167d2:	9e04      	ldr	r6, [sp, #16]
 80167d4:	465f      	mov	r7, fp
 80167d6:	e792      	b.n	80166fe <_dtoa_r+0x41e>
 80167d8:	9900      	ldr	r1, [sp, #0]
 80167da:	4b50      	ldr	r3, [pc, #320]	; (801691c <_dtoa_r+0x63c>)
 80167dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80167e0:	4431      	add	r1, r6
 80167e2:	9102      	str	r1, [sp, #8]
 80167e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80167e6:	eeb0 9a47 	vmov.f32	s18, s14
 80167ea:	eef0 9a67 	vmov.f32	s19, s15
 80167ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80167f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80167f6:	2900      	cmp	r1, #0
 80167f8:	d044      	beq.n	8016884 <_dtoa_r+0x5a4>
 80167fa:	494e      	ldr	r1, [pc, #312]	; (8016934 <_dtoa_r+0x654>)
 80167fc:	2000      	movs	r0, #0
 80167fe:	f7ea f825 	bl	800084c <__aeabi_ddiv>
 8016802:	ec53 2b19 	vmov	r2, r3, d9
 8016806:	f7e9 fd3f 	bl	8000288 <__aeabi_dsub>
 801680a:	9d00      	ldr	r5, [sp, #0]
 801680c:	ec41 0b19 	vmov	d9, r0, r1
 8016810:	4649      	mov	r1, r9
 8016812:	4640      	mov	r0, r8
 8016814:	f7ea f9a0 	bl	8000b58 <__aeabi_d2iz>
 8016818:	4606      	mov	r6, r0
 801681a:	f7e9 fe83 	bl	8000524 <__aeabi_i2d>
 801681e:	4602      	mov	r2, r0
 8016820:	460b      	mov	r3, r1
 8016822:	4640      	mov	r0, r8
 8016824:	4649      	mov	r1, r9
 8016826:	f7e9 fd2f 	bl	8000288 <__aeabi_dsub>
 801682a:	3630      	adds	r6, #48	; 0x30
 801682c:	f805 6b01 	strb.w	r6, [r5], #1
 8016830:	ec53 2b19 	vmov	r2, r3, d9
 8016834:	4680      	mov	r8, r0
 8016836:	4689      	mov	r9, r1
 8016838:	f7ea f950 	bl	8000adc <__aeabi_dcmplt>
 801683c:	2800      	cmp	r0, #0
 801683e:	d164      	bne.n	801690a <_dtoa_r+0x62a>
 8016840:	4642      	mov	r2, r8
 8016842:	464b      	mov	r3, r9
 8016844:	4937      	ldr	r1, [pc, #220]	; (8016924 <_dtoa_r+0x644>)
 8016846:	2000      	movs	r0, #0
 8016848:	f7e9 fd1e 	bl	8000288 <__aeabi_dsub>
 801684c:	ec53 2b19 	vmov	r2, r3, d9
 8016850:	f7ea f944 	bl	8000adc <__aeabi_dcmplt>
 8016854:	2800      	cmp	r0, #0
 8016856:	f040 80b6 	bne.w	80169c6 <_dtoa_r+0x6e6>
 801685a:	9b02      	ldr	r3, [sp, #8]
 801685c:	429d      	cmp	r5, r3
 801685e:	f43f af7c 	beq.w	801675a <_dtoa_r+0x47a>
 8016862:	4b31      	ldr	r3, [pc, #196]	; (8016928 <_dtoa_r+0x648>)
 8016864:	ec51 0b19 	vmov	r0, r1, d9
 8016868:	2200      	movs	r2, #0
 801686a:	f7e9 fec5 	bl	80005f8 <__aeabi_dmul>
 801686e:	4b2e      	ldr	r3, [pc, #184]	; (8016928 <_dtoa_r+0x648>)
 8016870:	ec41 0b19 	vmov	d9, r0, r1
 8016874:	2200      	movs	r2, #0
 8016876:	4640      	mov	r0, r8
 8016878:	4649      	mov	r1, r9
 801687a:	f7e9 febd 	bl	80005f8 <__aeabi_dmul>
 801687e:	4680      	mov	r8, r0
 8016880:	4689      	mov	r9, r1
 8016882:	e7c5      	b.n	8016810 <_dtoa_r+0x530>
 8016884:	ec51 0b17 	vmov	r0, r1, d7
 8016888:	f7e9 feb6 	bl	80005f8 <__aeabi_dmul>
 801688c:	9b02      	ldr	r3, [sp, #8]
 801688e:	9d00      	ldr	r5, [sp, #0]
 8016890:	930f      	str	r3, [sp, #60]	; 0x3c
 8016892:	ec41 0b19 	vmov	d9, r0, r1
 8016896:	4649      	mov	r1, r9
 8016898:	4640      	mov	r0, r8
 801689a:	f7ea f95d 	bl	8000b58 <__aeabi_d2iz>
 801689e:	4606      	mov	r6, r0
 80168a0:	f7e9 fe40 	bl	8000524 <__aeabi_i2d>
 80168a4:	3630      	adds	r6, #48	; 0x30
 80168a6:	4602      	mov	r2, r0
 80168a8:	460b      	mov	r3, r1
 80168aa:	4640      	mov	r0, r8
 80168ac:	4649      	mov	r1, r9
 80168ae:	f7e9 fceb 	bl	8000288 <__aeabi_dsub>
 80168b2:	f805 6b01 	strb.w	r6, [r5], #1
 80168b6:	9b02      	ldr	r3, [sp, #8]
 80168b8:	429d      	cmp	r5, r3
 80168ba:	4680      	mov	r8, r0
 80168bc:	4689      	mov	r9, r1
 80168be:	f04f 0200 	mov.w	r2, #0
 80168c2:	d124      	bne.n	801690e <_dtoa_r+0x62e>
 80168c4:	4b1b      	ldr	r3, [pc, #108]	; (8016934 <_dtoa_r+0x654>)
 80168c6:	ec51 0b19 	vmov	r0, r1, d9
 80168ca:	f7e9 fcdf 	bl	800028c <__adddf3>
 80168ce:	4602      	mov	r2, r0
 80168d0:	460b      	mov	r3, r1
 80168d2:	4640      	mov	r0, r8
 80168d4:	4649      	mov	r1, r9
 80168d6:	f7ea f91f 	bl	8000b18 <__aeabi_dcmpgt>
 80168da:	2800      	cmp	r0, #0
 80168dc:	d173      	bne.n	80169c6 <_dtoa_r+0x6e6>
 80168de:	ec53 2b19 	vmov	r2, r3, d9
 80168e2:	4914      	ldr	r1, [pc, #80]	; (8016934 <_dtoa_r+0x654>)
 80168e4:	2000      	movs	r0, #0
 80168e6:	f7e9 fccf 	bl	8000288 <__aeabi_dsub>
 80168ea:	4602      	mov	r2, r0
 80168ec:	460b      	mov	r3, r1
 80168ee:	4640      	mov	r0, r8
 80168f0:	4649      	mov	r1, r9
 80168f2:	f7ea f8f3 	bl	8000adc <__aeabi_dcmplt>
 80168f6:	2800      	cmp	r0, #0
 80168f8:	f43f af2f 	beq.w	801675a <_dtoa_r+0x47a>
 80168fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80168fe:	1e6b      	subs	r3, r5, #1
 8016900:	930f      	str	r3, [sp, #60]	; 0x3c
 8016902:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016906:	2b30      	cmp	r3, #48	; 0x30
 8016908:	d0f8      	beq.n	80168fc <_dtoa_r+0x61c>
 801690a:	46bb      	mov	fp, r7
 801690c:	e04a      	b.n	80169a4 <_dtoa_r+0x6c4>
 801690e:	4b06      	ldr	r3, [pc, #24]	; (8016928 <_dtoa_r+0x648>)
 8016910:	f7e9 fe72 	bl	80005f8 <__aeabi_dmul>
 8016914:	4680      	mov	r8, r0
 8016916:	4689      	mov	r9, r1
 8016918:	e7bd      	b.n	8016896 <_dtoa_r+0x5b6>
 801691a:	bf00      	nop
 801691c:	0801c9e8 	.word	0x0801c9e8
 8016920:	0801c9c0 	.word	0x0801c9c0
 8016924:	3ff00000 	.word	0x3ff00000
 8016928:	40240000 	.word	0x40240000
 801692c:	401c0000 	.word	0x401c0000
 8016930:	40140000 	.word	0x40140000
 8016934:	3fe00000 	.word	0x3fe00000
 8016938:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801693c:	9d00      	ldr	r5, [sp, #0]
 801693e:	4642      	mov	r2, r8
 8016940:	464b      	mov	r3, r9
 8016942:	4630      	mov	r0, r6
 8016944:	4639      	mov	r1, r7
 8016946:	f7e9 ff81 	bl	800084c <__aeabi_ddiv>
 801694a:	f7ea f905 	bl	8000b58 <__aeabi_d2iz>
 801694e:	9001      	str	r0, [sp, #4]
 8016950:	f7e9 fde8 	bl	8000524 <__aeabi_i2d>
 8016954:	4642      	mov	r2, r8
 8016956:	464b      	mov	r3, r9
 8016958:	f7e9 fe4e 	bl	80005f8 <__aeabi_dmul>
 801695c:	4602      	mov	r2, r0
 801695e:	460b      	mov	r3, r1
 8016960:	4630      	mov	r0, r6
 8016962:	4639      	mov	r1, r7
 8016964:	f7e9 fc90 	bl	8000288 <__aeabi_dsub>
 8016968:	9e01      	ldr	r6, [sp, #4]
 801696a:	9f04      	ldr	r7, [sp, #16]
 801696c:	3630      	adds	r6, #48	; 0x30
 801696e:	f805 6b01 	strb.w	r6, [r5], #1
 8016972:	9e00      	ldr	r6, [sp, #0]
 8016974:	1bae      	subs	r6, r5, r6
 8016976:	42b7      	cmp	r7, r6
 8016978:	4602      	mov	r2, r0
 801697a:	460b      	mov	r3, r1
 801697c:	d134      	bne.n	80169e8 <_dtoa_r+0x708>
 801697e:	f7e9 fc85 	bl	800028c <__adddf3>
 8016982:	4642      	mov	r2, r8
 8016984:	464b      	mov	r3, r9
 8016986:	4606      	mov	r6, r0
 8016988:	460f      	mov	r7, r1
 801698a:	f7ea f8c5 	bl	8000b18 <__aeabi_dcmpgt>
 801698e:	b9c8      	cbnz	r0, 80169c4 <_dtoa_r+0x6e4>
 8016990:	4642      	mov	r2, r8
 8016992:	464b      	mov	r3, r9
 8016994:	4630      	mov	r0, r6
 8016996:	4639      	mov	r1, r7
 8016998:	f7ea f896 	bl	8000ac8 <__aeabi_dcmpeq>
 801699c:	b110      	cbz	r0, 80169a4 <_dtoa_r+0x6c4>
 801699e:	9b01      	ldr	r3, [sp, #4]
 80169a0:	07db      	lsls	r3, r3, #31
 80169a2:	d40f      	bmi.n	80169c4 <_dtoa_r+0x6e4>
 80169a4:	4651      	mov	r1, sl
 80169a6:	4620      	mov	r0, r4
 80169a8:	f001 f8f0 	bl	8017b8c <_Bfree>
 80169ac:	2300      	movs	r3, #0
 80169ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80169b0:	702b      	strb	r3, [r5, #0]
 80169b2:	f10b 0301 	add.w	r3, fp, #1
 80169b6:	6013      	str	r3, [r2, #0]
 80169b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	f43f ace2 	beq.w	8016384 <_dtoa_r+0xa4>
 80169c0:	601d      	str	r5, [r3, #0]
 80169c2:	e4df      	b.n	8016384 <_dtoa_r+0xa4>
 80169c4:	465f      	mov	r7, fp
 80169c6:	462b      	mov	r3, r5
 80169c8:	461d      	mov	r5, r3
 80169ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80169ce:	2a39      	cmp	r2, #57	; 0x39
 80169d0:	d106      	bne.n	80169e0 <_dtoa_r+0x700>
 80169d2:	9a00      	ldr	r2, [sp, #0]
 80169d4:	429a      	cmp	r2, r3
 80169d6:	d1f7      	bne.n	80169c8 <_dtoa_r+0x6e8>
 80169d8:	9900      	ldr	r1, [sp, #0]
 80169da:	2230      	movs	r2, #48	; 0x30
 80169dc:	3701      	adds	r7, #1
 80169de:	700a      	strb	r2, [r1, #0]
 80169e0:	781a      	ldrb	r2, [r3, #0]
 80169e2:	3201      	adds	r2, #1
 80169e4:	701a      	strb	r2, [r3, #0]
 80169e6:	e790      	b.n	801690a <_dtoa_r+0x62a>
 80169e8:	4ba3      	ldr	r3, [pc, #652]	; (8016c78 <_dtoa_r+0x998>)
 80169ea:	2200      	movs	r2, #0
 80169ec:	f7e9 fe04 	bl	80005f8 <__aeabi_dmul>
 80169f0:	2200      	movs	r2, #0
 80169f2:	2300      	movs	r3, #0
 80169f4:	4606      	mov	r6, r0
 80169f6:	460f      	mov	r7, r1
 80169f8:	f7ea f866 	bl	8000ac8 <__aeabi_dcmpeq>
 80169fc:	2800      	cmp	r0, #0
 80169fe:	d09e      	beq.n	801693e <_dtoa_r+0x65e>
 8016a00:	e7d0      	b.n	80169a4 <_dtoa_r+0x6c4>
 8016a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a04:	2a00      	cmp	r2, #0
 8016a06:	f000 80ca 	beq.w	8016b9e <_dtoa_r+0x8be>
 8016a0a:	9a07      	ldr	r2, [sp, #28]
 8016a0c:	2a01      	cmp	r2, #1
 8016a0e:	f300 80ad 	bgt.w	8016b6c <_dtoa_r+0x88c>
 8016a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a14:	2a00      	cmp	r2, #0
 8016a16:	f000 80a5 	beq.w	8016b64 <_dtoa_r+0x884>
 8016a1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016a1e:	9e08      	ldr	r6, [sp, #32]
 8016a20:	9d05      	ldr	r5, [sp, #20]
 8016a22:	9a05      	ldr	r2, [sp, #20]
 8016a24:	441a      	add	r2, r3
 8016a26:	9205      	str	r2, [sp, #20]
 8016a28:	9a06      	ldr	r2, [sp, #24]
 8016a2a:	2101      	movs	r1, #1
 8016a2c:	441a      	add	r2, r3
 8016a2e:	4620      	mov	r0, r4
 8016a30:	9206      	str	r2, [sp, #24]
 8016a32:	f001 f9ab 	bl	8017d8c <__i2b>
 8016a36:	4607      	mov	r7, r0
 8016a38:	b165      	cbz	r5, 8016a54 <_dtoa_r+0x774>
 8016a3a:	9b06      	ldr	r3, [sp, #24]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	dd09      	ble.n	8016a54 <_dtoa_r+0x774>
 8016a40:	42ab      	cmp	r3, r5
 8016a42:	9a05      	ldr	r2, [sp, #20]
 8016a44:	bfa8      	it	ge
 8016a46:	462b      	movge	r3, r5
 8016a48:	1ad2      	subs	r2, r2, r3
 8016a4a:	9205      	str	r2, [sp, #20]
 8016a4c:	9a06      	ldr	r2, [sp, #24]
 8016a4e:	1aed      	subs	r5, r5, r3
 8016a50:	1ad3      	subs	r3, r2, r3
 8016a52:	9306      	str	r3, [sp, #24]
 8016a54:	9b08      	ldr	r3, [sp, #32]
 8016a56:	b1f3      	cbz	r3, 8016a96 <_dtoa_r+0x7b6>
 8016a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	f000 80a3 	beq.w	8016ba6 <_dtoa_r+0x8c6>
 8016a60:	2e00      	cmp	r6, #0
 8016a62:	dd10      	ble.n	8016a86 <_dtoa_r+0x7a6>
 8016a64:	4639      	mov	r1, r7
 8016a66:	4632      	mov	r2, r6
 8016a68:	4620      	mov	r0, r4
 8016a6a:	f001 fa4f 	bl	8017f0c <__pow5mult>
 8016a6e:	4652      	mov	r2, sl
 8016a70:	4601      	mov	r1, r0
 8016a72:	4607      	mov	r7, r0
 8016a74:	4620      	mov	r0, r4
 8016a76:	f001 f99f 	bl	8017db8 <__multiply>
 8016a7a:	4651      	mov	r1, sl
 8016a7c:	4680      	mov	r8, r0
 8016a7e:	4620      	mov	r0, r4
 8016a80:	f001 f884 	bl	8017b8c <_Bfree>
 8016a84:	46c2      	mov	sl, r8
 8016a86:	9b08      	ldr	r3, [sp, #32]
 8016a88:	1b9a      	subs	r2, r3, r6
 8016a8a:	d004      	beq.n	8016a96 <_dtoa_r+0x7b6>
 8016a8c:	4651      	mov	r1, sl
 8016a8e:	4620      	mov	r0, r4
 8016a90:	f001 fa3c 	bl	8017f0c <__pow5mult>
 8016a94:	4682      	mov	sl, r0
 8016a96:	2101      	movs	r1, #1
 8016a98:	4620      	mov	r0, r4
 8016a9a:	f001 f977 	bl	8017d8c <__i2b>
 8016a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	4606      	mov	r6, r0
 8016aa4:	f340 8081 	ble.w	8016baa <_dtoa_r+0x8ca>
 8016aa8:	461a      	mov	r2, r3
 8016aaa:	4601      	mov	r1, r0
 8016aac:	4620      	mov	r0, r4
 8016aae:	f001 fa2d 	bl	8017f0c <__pow5mult>
 8016ab2:	9b07      	ldr	r3, [sp, #28]
 8016ab4:	2b01      	cmp	r3, #1
 8016ab6:	4606      	mov	r6, r0
 8016ab8:	dd7a      	ble.n	8016bb0 <_dtoa_r+0x8d0>
 8016aba:	f04f 0800 	mov.w	r8, #0
 8016abe:	6933      	ldr	r3, [r6, #16]
 8016ac0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016ac4:	6918      	ldr	r0, [r3, #16]
 8016ac6:	f001 f913 	bl	8017cf0 <__hi0bits>
 8016aca:	f1c0 0020 	rsb	r0, r0, #32
 8016ace:	9b06      	ldr	r3, [sp, #24]
 8016ad0:	4418      	add	r0, r3
 8016ad2:	f010 001f 	ands.w	r0, r0, #31
 8016ad6:	f000 8094 	beq.w	8016c02 <_dtoa_r+0x922>
 8016ada:	f1c0 0320 	rsb	r3, r0, #32
 8016ade:	2b04      	cmp	r3, #4
 8016ae0:	f340 8085 	ble.w	8016bee <_dtoa_r+0x90e>
 8016ae4:	9b05      	ldr	r3, [sp, #20]
 8016ae6:	f1c0 001c 	rsb	r0, r0, #28
 8016aea:	4403      	add	r3, r0
 8016aec:	9305      	str	r3, [sp, #20]
 8016aee:	9b06      	ldr	r3, [sp, #24]
 8016af0:	4403      	add	r3, r0
 8016af2:	4405      	add	r5, r0
 8016af4:	9306      	str	r3, [sp, #24]
 8016af6:	9b05      	ldr	r3, [sp, #20]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	dd05      	ble.n	8016b08 <_dtoa_r+0x828>
 8016afc:	4651      	mov	r1, sl
 8016afe:	461a      	mov	r2, r3
 8016b00:	4620      	mov	r0, r4
 8016b02:	f001 fa5d 	bl	8017fc0 <__lshift>
 8016b06:	4682      	mov	sl, r0
 8016b08:	9b06      	ldr	r3, [sp, #24]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	dd05      	ble.n	8016b1a <_dtoa_r+0x83a>
 8016b0e:	4631      	mov	r1, r6
 8016b10:	461a      	mov	r2, r3
 8016b12:	4620      	mov	r0, r4
 8016b14:	f001 fa54 	bl	8017fc0 <__lshift>
 8016b18:	4606      	mov	r6, r0
 8016b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d072      	beq.n	8016c06 <_dtoa_r+0x926>
 8016b20:	4631      	mov	r1, r6
 8016b22:	4650      	mov	r0, sl
 8016b24:	f001 fab8 	bl	8018098 <__mcmp>
 8016b28:	2800      	cmp	r0, #0
 8016b2a:	da6c      	bge.n	8016c06 <_dtoa_r+0x926>
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	4651      	mov	r1, sl
 8016b30:	220a      	movs	r2, #10
 8016b32:	4620      	mov	r0, r4
 8016b34:	f001 f84c 	bl	8017bd0 <__multadd>
 8016b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b3a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8016b3e:	4682      	mov	sl, r0
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	f000 81b0 	beq.w	8016ea6 <_dtoa_r+0xbc6>
 8016b46:	2300      	movs	r3, #0
 8016b48:	4639      	mov	r1, r7
 8016b4a:	220a      	movs	r2, #10
 8016b4c:	4620      	mov	r0, r4
 8016b4e:	f001 f83f 	bl	8017bd0 <__multadd>
 8016b52:	9b01      	ldr	r3, [sp, #4]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	4607      	mov	r7, r0
 8016b58:	f300 8096 	bgt.w	8016c88 <_dtoa_r+0x9a8>
 8016b5c:	9b07      	ldr	r3, [sp, #28]
 8016b5e:	2b02      	cmp	r3, #2
 8016b60:	dc59      	bgt.n	8016c16 <_dtoa_r+0x936>
 8016b62:	e091      	b.n	8016c88 <_dtoa_r+0x9a8>
 8016b64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016b6a:	e758      	b.n	8016a1e <_dtoa_r+0x73e>
 8016b6c:	9b04      	ldr	r3, [sp, #16]
 8016b6e:	1e5e      	subs	r6, r3, #1
 8016b70:	9b08      	ldr	r3, [sp, #32]
 8016b72:	42b3      	cmp	r3, r6
 8016b74:	bfbf      	itttt	lt
 8016b76:	9b08      	ldrlt	r3, [sp, #32]
 8016b78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8016b7a:	9608      	strlt	r6, [sp, #32]
 8016b7c:	1af3      	sublt	r3, r6, r3
 8016b7e:	bfb4      	ite	lt
 8016b80:	18d2      	addlt	r2, r2, r3
 8016b82:	1b9e      	subge	r6, r3, r6
 8016b84:	9b04      	ldr	r3, [sp, #16]
 8016b86:	bfbc      	itt	lt
 8016b88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8016b8a:	2600      	movlt	r6, #0
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	bfb7      	itett	lt
 8016b90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8016b94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8016b98:	1a9d      	sublt	r5, r3, r2
 8016b9a:	2300      	movlt	r3, #0
 8016b9c:	e741      	b.n	8016a22 <_dtoa_r+0x742>
 8016b9e:	9e08      	ldr	r6, [sp, #32]
 8016ba0:	9d05      	ldr	r5, [sp, #20]
 8016ba2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016ba4:	e748      	b.n	8016a38 <_dtoa_r+0x758>
 8016ba6:	9a08      	ldr	r2, [sp, #32]
 8016ba8:	e770      	b.n	8016a8c <_dtoa_r+0x7ac>
 8016baa:	9b07      	ldr	r3, [sp, #28]
 8016bac:	2b01      	cmp	r3, #1
 8016bae:	dc19      	bgt.n	8016be4 <_dtoa_r+0x904>
 8016bb0:	9b02      	ldr	r3, [sp, #8]
 8016bb2:	b9bb      	cbnz	r3, 8016be4 <_dtoa_r+0x904>
 8016bb4:	9b03      	ldr	r3, [sp, #12]
 8016bb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016bba:	b99b      	cbnz	r3, 8016be4 <_dtoa_r+0x904>
 8016bbc:	9b03      	ldr	r3, [sp, #12]
 8016bbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016bc2:	0d1b      	lsrs	r3, r3, #20
 8016bc4:	051b      	lsls	r3, r3, #20
 8016bc6:	b183      	cbz	r3, 8016bea <_dtoa_r+0x90a>
 8016bc8:	9b05      	ldr	r3, [sp, #20]
 8016bca:	3301      	adds	r3, #1
 8016bcc:	9305      	str	r3, [sp, #20]
 8016bce:	9b06      	ldr	r3, [sp, #24]
 8016bd0:	3301      	adds	r3, #1
 8016bd2:	9306      	str	r3, [sp, #24]
 8016bd4:	f04f 0801 	mov.w	r8, #1
 8016bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	f47f af6f 	bne.w	8016abe <_dtoa_r+0x7de>
 8016be0:	2001      	movs	r0, #1
 8016be2:	e774      	b.n	8016ace <_dtoa_r+0x7ee>
 8016be4:	f04f 0800 	mov.w	r8, #0
 8016be8:	e7f6      	b.n	8016bd8 <_dtoa_r+0x8f8>
 8016bea:	4698      	mov	r8, r3
 8016bec:	e7f4      	b.n	8016bd8 <_dtoa_r+0x8f8>
 8016bee:	d082      	beq.n	8016af6 <_dtoa_r+0x816>
 8016bf0:	9a05      	ldr	r2, [sp, #20]
 8016bf2:	331c      	adds	r3, #28
 8016bf4:	441a      	add	r2, r3
 8016bf6:	9205      	str	r2, [sp, #20]
 8016bf8:	9a06      	ldr	r2, [sp, #24]
 8016bfa:	441a      	add	r2, r3
 8016bfc:	441d      	add	r5, r3
 8016bfe:	9206      	str	r2, [sp, #24]
 8016c00:	e779      	b.n	8016af6 <_dtoa_r+0x816>
 8016c02:	4603      	mov	r3, r0
 8016c04:	e7f4      	b.n	8016bf0 <_dtoa_r+0x910>
 8016c06:	9b04      	ldr	r3, [sp, #16]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	dc37      	bgt.n	8016c7c <_dtoa_r+0x99c>
 8016c0c:	9b07      	ldr	r3, [sp, #28]
 8016c0e:	2b02      	cmp	r3, #2
 8016c10:	dd34      	ble.n	8016c7c <_dtoa_r+0x99c>
 8016c12:	9b04      	ldr	r3, [sp, #16]
 8016c14:	9301      	str	r3, [sp, #4]
 8016c16:	9b01      	ldr	r3, [sp, #4]
 8016c18:	b963      	cbnz	r3, 8016c34 <_dtoa_r+0x954>
 8016c1a:	4631      	mov	r1, r6
 8016c1c:	2205      	movs	r2, #5
 8016c1e:	4620      	mov	r0, r4
 8016c20:	f000 ffd6 	bl	8017bd0 <__multadd>
 8016c24:	4601      	mov	r1, r0
 8016c26:	4606      	mov	r6, r0
 8016c28:	4650      	mov	r0, sl
 8016c2a:	f001 fa35 	bl	8018098 <__mcmp>
 8016c2e:	2800      	cmp	r0, #0
 8016c30:	f73f adbb 	bgt.w	80167aa <_dtoa_r+0x4ca>
 8016c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c36:	9d00      	ldr	r5, [sp, #0]
 8016c38:	ea6f 0b03 	mvn.w	fp, r3
 8016c3c:	f04f 0800 	mov.w	r8, #0
 8016c40:	4631      	mov	r1, r6
 8016c42:	4620      	mov	r0, r4
 8016c44:	f000 ffa2 	bl	8017b8c <_Bfree>
 8016c48:	2f00      	cmp	r7, #0
 8016c4a:	f43f aeab 	beq.w	80169a4 <_dtoa_r+0x6c4>
 8016c4e:	f1b8 0f00 	cmp.w	r8, #0
 8016c52:	d005      	beq.n	8016c60 <_dtoa_r+0x980>
 8016c54:	45b8      	cmp	r8, r7
 8016c56:	d003      	beq.n	8016c60 <_dtoa_r+0x980>
 8016c58:	4641      	mov	r1, r8
 8016c5a:	4620      	mov	r0, r4
 8016c5c:	f000 ff96 	bl	8017b8c <_Bfree>
 8016c60:	4639      	mov	r1, r7
 8016c62:	4620      	mov	r0, r4
 8016c64:	f000 ff92 	bl	8017b8c <_Bfree>
 8016c68:	e69c      	b.n	80169a4 <_dtoa_r+0x6c4>
 8016c6a:	2600      	movs	r6, #0
 8016c6c:	4637      	mov	r7, r6
 8016c6e:	e7e1      	b.n	8016c34 <_dtoa_r+0x954>
 8016c70:	46bb      	mov	fp, r7
 8016c72:	4637      	mov	r7, r6
 8016c74:	e599      	b.n	80167aa <_dtoa_r+0x4ca>
 8016c76:	bf00      	nop
 8016c78:	40240000 	.word	0x40240000
 8016c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	f000 80c8 	beq.w	8016e14 <_dtoa_r+0xb34>
 8016c84:	9b04      	ldr	r3, [sp, #16]
 8016c86:	9301      	str	r3, [sp, #4]
 8016c88:	2d00      	cmp	r5, #0
 8016c8a:	dd05      	ble.n	8016c98 <_dtoa_r+0x9b8>
 8016c8c:	4639      	mov	r1, r7
 8016c8e:	462a      	mov	r2, r5
 8016c90:	4620      	mov	r0, r4
 8016c92:	f001 f995 	bl	8017fc0 <__lshift>
 8016c96:	4607      	mov	r7, r0
 8016c98:	f1b8 0f00 	cmp.w	r8, #0
 8016c9c:	d05b      	beq.n	8016d56 <_dtoa_r+0xa76>
 8016c9e:	6879      	ldr	r1, [r7, #4]
 8016ca0:	4620      	mov	r0, r4
 8016ca2:	f000 ff33 	bl	8017b0c <_Balloc>
 8016ca6:	4605      	mov	r5, r0
 8016ca8:	b928      	cbnz	r0, 8016cb6 <_dtoa_r+0x9d6>
 8016caa:	4b83      	ldr	r3, [pc, #524]	; (8016eb8 <_dtoa_r+0xbd8>)
 8016cac:	4602      	mov	r2, r0
 8016cae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8016cb2:	f7ff bb2e 	b.w	8016312 <_dtoa_r+0x32>
 8016cb6:	693a      	ldr	r2, [r7, #16]
 8016cb8:	3202      	adds	r2, #2
 8016cba:	0092      	lsls	r2, r2, #2
 8016cbc:	f107 010c 	add.w	r1, r7, #12
 8016cc0:	300c      	adds	r0, #12
 8016cc2:	f7ff fa65 	bl	8016190 <memcpy>
 8016cc6:	2201      	movs	r2, #1
 8016cc8:	4629      	mov	r1, r5
 8016cca:	4620      	mov	r0, r4
 8016ccc:	f001 f978 	bl	8017fc0 <__lshift>
 8016cd0:	9b00      	ldr	r3, [sp, #0]
 8016cd2:	3301      	adds	r3, #1
 8016cd4:	9304      	str	r3, [sp, #16]
 8016cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016cda:	4413      	add	r3, r2
 8016cdc:	9308      	str	r3, [sp, #32]
 8016cde:	9b02      	ldr	r3, [sp, #8]
 8016ce0:	f003 0301 	and.w	r3, r3, #1
 8016ce4:	46b8      	mov	r8, r7
 8016ce6:	9306      	str	r3, [sp, #24]
 8016ce8:	4607      	mov	r7, r0
 8016cea:	9b04      	ldr	r3, [sp, #16]
 8016cec:	4631      	mov	r1, r6
 8016cee:	3b01      	subs	r3, #1
 8016cf0:	4650      	mov	r0, sl
 8016cf2:	9301      	str	r3, [sp, #4]
 8016cf4:	f7ff fa6a 	bl	80161cc <quorem>
 8016cf8:	4641      	mov	r1, r8
 8016cfa:	9002      	str	r0, [sp, #8]
 8016cfc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016d00:	4650      	mov	r0, sl
 8016d02:	f001 f9c9 	bl	8018098 <__mcmp>
 8016d06:	463a      	mov	r2, r7
 8016d08:	9005      	str	r0, [sp, #20]
 8016d0a:	4631      	mov	r1, r6
 8016d0c:	4620      	mov	r0, r4
 8016d0e:	f001 f9df 	bl	80180d0 <__mdiff>
 8016d12:	68c2      	ldr	r2, [r0, #12]
 8016d14:	4605      	mov	r5, r0
 8016d16:	bb02      	cbnz	r2, 8016d5a <_dtoa_r+0xa7a>
 8016d18:	4601      	mov	r1, r0
 8016d1a:	4650      	mov	r0, sl
 8016d1c:	f001 f9bc 	bl	8018098 <__mcmp>
 8016d20:	4602      	mov	r2, r0
 8016d22:	4629      	mov	r1, r5
 8016d24:	4620      	mov	r0, r4
 8016d26:	9209      	str	r2, [sp, #36]	; 0x24
 8016d28:	f000 ff30 	bl	8017b8c <_Bfree>
 8016d2c:	9b07      	ldr	r3, [sp, #28]
 8016d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d30:	9d04      	ldr	r5, [sp, #16]
 8016d32:	ea43 0102 	orr.w	r1, r3, r2
 8016d36:	9b06      	ldr	r3, [sp, #24]
 8016d38:	4319      	orrs	r1, r3
 8016d3a:	d110      	bne.n	8016d5e <_dtoa_r+0xa7e>
 8016d3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016d40:	d029      	beq.n	8016d96 <_dtoa_r+0xab6>
 8016d42:	9b05      	ldr	r3, [sp, #20]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	dd02      	ble.n	8016d4e <_dtoa_r+0xa6e>
 8016d48:	9b02      	ldr	r3, [sp, #8]
 8016d4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8016d4e:	9b01      	ldr	r3, [sp, #4]
 8016d50:	f883 9000 	strb.w	r9, [r3]
 8016d54:	e774      	b.n	8016c40 <_dtoa_r+0x960>
 8016d56:	4638      	mov	r0, r7
 8016d58:	e7ba      	b.n	8016cd0 <_dtoa_r+0x9f0>
 8016d5a:	2201      	movs	r2, #1
 8016d5c:	e7e1      	b.n	8016d22 <_dtoa_r+0xa42>
 8016d5e:	9b05      	ldr	r3, [sp, #20]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	db04      	blt.n	8016d6e <_dtoa_r+0xa8e>
 8016d64:	9907      	ldr	r1, [sp, #28]
 8016d66:	430b      	orrs	r3, r1
 8016d68:	9906      	ldr	r1, [sp, #24]
 8016d6a:	430b      	orrs	r3, r1
 8016d6c:	d120      	bne.n	8016db0 <_dtoa_r+0xad0>
 8016d6e:	2a00      	cmp	r2, #0
 8016d70:	dded      	ble.n	8016d4e <_dtoa_r+0xa6e>
 8016d72:	4651      	mov	r1, sl
 8016d74:	2201      	movs	r2, #1
 8016d76:	4620      	mov	r0, r4
 8016d78:	f001 f922 	bl	8017fc0 <__lshift>
 8016d7c:	4631      	mov	r1, r6
 8016d7e:	4682      	mov	sl, r0
 8016d80:	f001 f98a 	bl	8018098 <__mcmp>
 8016d84:	2800      	cmp	r0, #0
 8016d86:	dc03      	bgt.n	8016d90 <_dtoa_r+0xab0>
 8016d88:	d1e1      	bne.n	8016d4e <_dtoa_r+0xa6e>
 8016d8a:	f019 0f01 	tst.w	r9, #1
 8016d8e:	d0de      	beq.n	8016d4e <_dtoa_r+0xa6e>
 8016d90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016d94:	d1d8      	bne.n	8016d48 <_dtoa_r+0xa68>
 8016d96:	9a01      	ldr	r2, [sp, #4]
 8016d98:	2339      	movs	r3, #57	; 0x39
 8016d9a:	7013      	strb	r3, [r2, #0]
 8016d9c:	462b      	mov	r3, r5
 8016d9e:	461d      	mov	r5, r3
 8016da0:	3b01      	subs	r3, #1
 8016da2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016da6:	2a39      	cmp	r2, #57	; 0x39
 8016da8:	d06c      	beq.n	8016e84 <_dtoa_r+0xba4>
 8016daa:	3201      	adds	r2, #1
 8016dac:	701a      	strb	r2, [r3, #0]
 8016dae:	e747      	b.n	8016c40 <_dtoa_r+0x960>
 8016db0:	2a00      	cmp	r2, #0
 8016db2:	dd07      	ble.n	8016dc4 <_dtoa_r+0xae4>
 8016db4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016db8:	d0ed      	beq.n	8016d96 <_dtoa_r+0xab6>
 8016dba:	9a01      	ldr	r2, [sp, #4]
 8016dbc:	f109 0301 	add.w	r3, r9, #1
 8016dc0:	7013      	strb	r3, [r2, #0]
 8016dc2:	e73d      	b.n	8016c40 <_dtoa_r+0x960>
 8016dc4:	9b04      	ldr	r3, [sp, #16]
 8016dc6:	9a08      	ldr	r2, [sp, #32]
 8016dc8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8016dcc:	4293      	cmp	r3, r2
 8016dce:	d043      	beq.n	8016e58 <_dtoa_r+0xb78>
 8016dd0:	4651      	mov	r1, sl
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	220a      	movs	r2, #10
 8016dd6:	4620      	mov	r0, r4
 8016dd8:	f000 fefa 	bl	8017bd0 <__multadd>
 8016ddc:	45b8      	cmp	r8, r7
 8016dde:	4682      	mov	sl, r0
 8016de0:	f04f 0300 	mov.w	r3, #0
 8016de4:	f04f 020a 	mov.w	r2, #10
 8016de8:	4641      	mov	r1, r8
 8016dea:	4620      	mov	r0, r4
 8016dec:	d107      	bne.n	8016dfe <_dtoa_r+0xb1e>
 8016dee:	f000 feef 	bl	8017bd0 <__multadd>
 8016df2:	4680      	mov	r8, r0
 8016df4:	4607      	mov	r7, r0
 8016df6:	9b04      	ldr	r3, [sp, #16]
 8016df8:	3301      	adds	r3, #1
 8016dfa:	9304      	str	r3, [sp, #16]
 8016dfc:	e775      	b.n	8016cea <_dtoa_r+0xa0a>
 8016dfe:	f000 fee7 	bl	8017bd0 <__multadd>
 8016e02:	4639      	mov	r1, r7
 8016e04:	4680      	mov	r8, r0
 8016e06:	2300      	movs	r3, #0
 8016e08:	220a      	movs	r2, #10
 8016e0a:	4620      	mov	r0, r4
 8016e0c:	f000 fee0 	bl	8017bd0 <__multadd>
 8016e10:	4607      	mov	r7, r0
 8016e12:	e7f0      	b.n	8016df6 <_dtoa_r+0xb16>
 8016e14:	9b04      	ldr	r3, [sp, #16]
 8016e16:	9301      	str	r3, [sp, #4]
 8016e18:	9d00      	ldr	r5, [sp, #0]
 8016e1a:	4631      	mov	r1, r6
 8016e1c:	4650      	mov	r0, sl
 8016e1e:	f7ff f9d5 	bl	80161cc <quorem>
 8016e22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016e26:	9b00      	ldr	r3, [sp, #0]
 8016e28:	f805 9b01 	strb.w	r9, [r5], #1
 8016e2c:	1aea      	subs	r2, r5, r3
 8016e2e:	9b01      	ldr	r3, [sp, #4]
 8016e30:	4293      	cmp	r3, r2
 8016e32:	dd07      	ble.n	8016e44 <_dtoa_r+0xb64>
 8016e34:	4651      	mov	r1, sl
 8016e36:	2300      	movs	r3, #0
 8016e38:	220a      	movs	r2, #10
 8016e3a:	4620      	mov	r0, r4
 8016e3c:	f000 fec8 	bl	8017bd0 <__multadd>
 8016e40:	4682      	mov	sl, r0
 8016e42:	e7ea      	b.n	8016e1a <_dtoa_r+0xb3a>
 8016e44:	9b01      	ldr	r3, [sp, #4]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	bfc8      	it	gt
 8016e4a:	461d      	movgt	r5, r3
 8016e4c:	9b00      	ldr	r3, [sp, #0]
 8016e4e:	bfd8      	it	le
 8016e50:	2501      	movle	r5, #1
 8016e52:	441d      	add	r5, r3
 8016e54:	f04f 0800 	mov.w	r8, #0
 8016e58:	4651      	mov	r1, sl
 8016e5a:	2201      	movs	r2, #1
 8016e5c:	4620      	mov	r0, r4
 8016e5e:	f001 f8af 	bl	8017fc0 <__lshift>
 8016e62:	4631      	mov	r1, r6
 8016e64:	4682      	mov	sl, r0
 8016e66:	f001 f917 	bl	8018098 <__mcmp>
 8016e6a:	2800      	cmp	r0, #0
 8016e6c:	dc96      	bgt.n	8016d9c <_dtoa_r+0xabc>
 8016e6e:	d102      	bne.n	8016e76 <_dtoa_r+0xb96>
 8016e70:	f019 0f01 	tst.w	r9, #1
 8016e74:	d192      	bne.n	8016d9c <_dtoa_r+0xabc>
 8016e76:	462b      	mov	r3, r5
 8016e78:	461d      	mov	r5, r3
 8016e7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016e7e:	2a30      	cmp	r2, #48	; 0x30
 8016e80:	d0fa      	beq.n	8016e78 <_dtoa_r+0xb98>
 8016e82:	e6dd      	b.n	8016c40 <_dtoa_r+0x960>
 8016e84:	9a00      	ldr	r2, [sp, #0]
 8016e86:	429a      	cmp	r2, r3
 8016e88:	d189      	bne.n	8016d9e <_dtoa_r+0xabe>
 8016e8a:	f10b 0b01 	add.w	fp, fp, #1
 8016e8e:	2331      	movs	r3, #49	; 0x31
 8016e90:	e796      	b.n	8016dc0 <_dtoa_r+0xae0>
 8016e92:	4b0a      	ldr	r3, [pc, #40]	; (8016ebc <_dtoa_r+0xbdc>)
 8016e94:	f7ff ba99 	b.w	80163ca <_dtoa_r+0xea>
 8016e98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	f47f aa6d 	bne.w	801637a <_dtoa_r+0x9a>
 8016ea0:	4b07      	ldr	r3, [pc, #28]	; (8016ec0 <_dtoa_r+0xbe0>)
 8016ea2:	f7ff ba92 	b.w	80163ca <_dtoa_r+0xea>
 8016ea6:	9b01      	ldr	r3, [sp, #4]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	dcb5      	bgt.n	8016e18 <_dtoa_r+0xb38>
 8016eac:	9b07      	ldr	r3, [sp, #28]
 8016eae:	2b02      	cmp	r3, #2
 8016eb0:	f73f aeb1 	bgt.w	8016c16 <_dtoa_r+0x936>
 8016eb4:	e7b0      	b.n	8016e18 <_dtoa_r+0xb38>
 8016eb6:	bf00      	nop
 8016eb8:	0801c8e5 	.word	0x0801c8e5
 8016ebc:	0801c6e0 	.word	0x0801c6e0
 8016ec0:	0801c869 	.word	0x0801c869

08016ec4 <rshift>:
 8016ec4:	6903      	ldr	r3, [r0, #16]
 8016ec6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016eca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ece:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016ed2:	f100 0414 	add.w	r4, r0, #20
 8016ed6:	dd45      	ble.n	8016f64 <rshift+0xa0>
 8016ed8:	f011 011f 	ands.w	r1, r1, #31
 8016edc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016ee0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016ee4:	d10c      	bne.n	8016f00 <rshift+0x3c>
 8016ee6:	f100 0710 	add.w	r7, r0, #16
 8016eea:	4629      	mov	r1, r5
 8016eec:	42b1      	cmp	r1, r6
 8016eee:	d334      	bcc.n	8016f5a <rshift+0x96>
 8016ef0:	1a9b      	subs	r3, r3, r2
 8016ef2:	009b      	lsls	r3, r3, #2
 8016ef4:	1eea      	subs	r2, r5, #3
 8016ef6:	4296      	cmp	r6, r2
 8016ef8:	bf38      	it	cc
 8016efa:	2300      	movcc	r3, #0
 8016efc:	4423      	add	r3, r4
 8016efe:	e015      	b.n	8016f2c <rshift+0x68>
 8016f00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016f04:	f1c1 0820 	rsb	r8, r1, #32
 8016f08:	40cf      	lsrs	r7, r1
 8016f0a:	f105 0e04 	add.w	lr, r5, #4
 8016f0e:	46a1      	mov	r9, r4
 8016f10:	4576      	cmp	r6, lr
 8016f12:	46f4      	mov	ip, lr
 8016f14:	d815      	bhi.n	8016f42 <rshift+0x7e>
 8016f16:	1a9a      	subs	r2, r3, r2
 8016f18:	0092      	lsls	r2, r2, #2
 8016f1a:	3a04      	subs	r2, #4
 8016f1c:	3501      	adds	r5, #1
 8016f1e:	42ae      	cmp	r6, r5
 8016f20:	bf38      	it	cc
 8016f22:	2200      	movcc	r2, #0
 8016f24:	18a3      	adds	r3, r4, r2
 8016f26:	50a7      	str	r7, [r4, r2]
 8016f28:	b107      	cbz	r7, 8016f2c <rshift+0x68>
 8016f2a:	3304      	adds	r3, #4
 8016f2c:	1b1a      	subs	r2, r3, r4
 8016f2e:	42a3      	cmp	r3, r4
 8016f30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016f34:	bf08      	it	eq
 8016f36:	2300      	moveq	r3, #0
 8016f38:	6102      	str	r2, [r0, #16]
 8016f3a:	bf08      	it	eq
 8016f3c:	6143      	streq	r3, [r0, #20]
 8016f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f42:	f8dc c000 	ldr.w	ip, [ip]
 8016f46:	fa0c fc08 	lsl.w	ip, ip, r8
 8016f4a:	ea4c 0707 	orr.w	r7, ip, r7
 8016f4e:	f849 7b04 	str.w	r7, [r9], #4
 8016f52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016f56:	40cf      	lsrs	r7, r1
 8016f58:	e7da      	b.n	8016f10 <rshift+0x4c>
 8016f5a:	f851 cb04 	ldr.w	ip, [r1], #4
 8016f5e:	f847 cf04 	str.w	ip, [r7, #4]!
 8016f62:	e7c3      	b.n	8016eec <rshift+0x28>
 8016f64:	4623      	mov	r3, r4
 8016f66:	e7e1      	b.n	8016f2c <rshift+0x68>

08016f68 <__hexdig_fun>:
 8016f68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016f6c:	2b09      	cmp	r3, #9
 8016f6e:	d802      	bhi.n	8016f76 <__hexdig_fun+0xe>
 8016f70:	3820      	subs	r0, #32
 8016f72:	b2c0      	uxtb	r0, r0
 8016f74:	4770      	bx	lr
 8016f76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016f7a:	2b05      	cmp	r3, #5
 8016f7c:	d801      	bhi.n	8016f82 <__hexdig_fun+0x1a>
 8016f7e:	3847      	subs	r0, #71	; 0x47
 8016f80:	e7f7      	b.n	8016f72 <__hexdig_fun+0xa>
 8016f82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016f86:	2b05      	cmp	r3, #5
 8016f88:	d801      	bhi.n	8016f8e <__hexdig_fun+0x26>
 8016f8a:	3827      	subs	r0, #39	; 0x27
 8016f8c:	e7f1      	b.n	8016f72 <__hexdig_fun+0xa>
 8016f8e:	2000      	movs	r0, #0
 8016f90:	4770      	bx	lr
	...

08016f94 <__gethex>:
 8016f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f98:	4617      	mov	r7, r2
 8016f9a:	680a      	ldr	r2, [r1, #0]
 8016f9c:	b085      	sub	sp, #20
 8016f9e:	f102 0b02 	add.w	fp, r2, #2
 8016fa2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016fa6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016faa:	4681      	mov	r9, r0
 8016fac:	468a      	mov	sl, r1
 8016fae:	9302      	str	r3, [sp, #8]
 8016fb0:	32fe      	adds	r2, #254	; 0xfe
 8016fb2:	eb02 030b 	add.w	r3, r2, fp
 8016fb6:	46d8      	mov	r8, fp
 8016fb8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8016fbc:	9301      	str	r3, [sp, #4]
 8016fbe:	2830      	cmp	r0, #48	; 0x30
 8016fc0:	d0f7      	beq.n	8016fb2 <__gethex+0x1e>
 8016fc2:	f7ff ffd1 	bl	8016f68 <__hexdig_fun>
 8016fc6:	4604      	mov	r4, r0
 8016fc8:	2800      	cmp	r0, #0
 8016fca:	d138      	bne.n	801703e <__gethex+0xaa>
 8016fcc:	49a7      	ldr	r1, [pc, #668]	; (801726c <__gethex+0x2d8>)
 8016fce:	2201      	movs	r2, #1
 8016fd0:	4640      	mov	r0, r8
 8016fd2:	f7ff f893 	bl	80160fc <strncmp>
 8016fd6:	4606      	mov	r6, r0
 8016fd8:	2800      	cmp	r0, #0
 8016fda:	d169      	bne.n	80170b0 <__gethex+0x11c>
 8016fdc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016fe0:	465d      	mov	r5, fp
 8016fe2:	f7ff ffc1 	bl	8016f68 <__hexdig_fun>
 8016fe6:	2800      	cmp	r0, #0
 8016fe8:	d064      	beq.n	80170b4 <__gethex+0x120>
 8016fea:	465a      	mov	r2, fp
 8016fec:	7810      	ldrb	r0, [r2, #0]
 8016fee:	2830      	cmp	r0, #48	; 0x30
 8016ff0:	4690      	mov	r8, r2
 8016ff2:	f102 0201 	add.w	r2, r2, #1
 8016ff6:	d0f9      	beq.n	8016fec <__gethex+0x58>
 8016ff8:	f7ff ffb6 	bl	8016f68 <__hexdig_fun>
 8016ffc:	2301      	movs	r3, #1
 8016ffe:	fab0 f480 	clz	r4, r0
 8017002:	0964      	lsrs	r4, r4, #5
 8017004:	465e      	mov	r6, fp
 8017006:	9301      	str	r3, [sp, #4]
 8017008:	4642      	mov	r2, r8
 801700a:	4615      	mov	r5, r2
 801700c:	3201      	adds	r2, #1
 801700e:	7828      	ldrb	r0, [r5, #0]
 8017010:	f7ff ffaa 	bl	8016f68 <__hexdig_fun>
 8017014:	2800      	cmp	r0, #0
 8017016:	d1f8      	bne.n	801700a <__gethex+0x76>
 8017018:	4994      	ldr	r1, [pc, #592]	; (801726c <__gethex+0x2d8>)
 801701a:	2201      	movs	r2, #1
 801701c:	4628      	mov	r0, r5
 801701e:	f7ff f86d 	bl	80160fc <strncmp>
 8017022:	b978      	cbnz	r0, 8017044 <__gethex+0xb0>
 8017024:	b946      	cbnz	r6, 8017038 <__gethex+0xa4>
 8017026:	1c6e      	adds	r6, r5, #1
 8017028:	4632      	mov	r2, r6
 801702a:	4615      	mov	r5, r2
 801702c:	3201      	adds	r2, #1
 801702e:	7828      	ldrb	r0, [r5, #0]
 8017030:	f7ff ff9a 	bl	8016f68 <__hexdig_fun>
 8017034:	2800      	cmp	r0, #0
 8017036:	d1f8      	bne.n	801702a <__gethex+0x96>
 8017038:	1b73      	subs	r3, r6, r5
 801703a:	009e      	lsls	r6, r3, #2
 801703c:	e004      	b.n	8017048 <__gethex+0xb4>
 801703e:	2400      	movs	r4, #0
 8017040:	4626      	mov	r6, r4
 8017042:	e7e1      	b.n	8017008 <__gethex+0x74>
 8017044:	2e00      	cmp	r6, #0
 8017046:	d1f7      	bne.n	8017038 <__gethex+0xa4>
 8017048:	782b      	ldrb	r3, [r5, #0]
 801704a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801704e:	2b50      	cmp	r3, #80	; 0x50
 8017050:	d13d      	bne.n	80170ce <__gethex+0x13a>
 8017052:	786b      	ldrb	r3, [r5, #1]
 8017054:	2b2b      	cmp	r3, #43	; 0x2b
 8017056:	d02f      	beq.n	80170b8 <__gethex+0x124>
 8017058:	2b2d      	cmp	r3, #45	; 0x2d
 801705a:	d031      	beq.n	80170c0 <__gethex+0x12c>
 801705c:	1c69      	adds	r1, r5, #1
 801705e:	f04f 0b00 	mov.w	fp, #0
 8017062:	7808      	ldrb	r0, [r1, #0]
 8017064:	f7ff ff80 	bl	8016f68 <__hexdig_fun>
 8017068:	1e42      	subs	r2, r0, #1
 801706a:	b2d2      	uxtb	r2, r2
 801706c:	2a18      	cmp	r2, #24
 801706e:	d82e      	bhi.n	80170ce <__gethex+0x13a>
 8017070:	f1a0 0210 	sub.w	r2, r0, #16
 8017074:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017078:	f7ff ff76 	bl	8016f68 <__hexdig_fun>
 801707c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8017080:	fa5f fc8c 	uxtb.w	ip, ip
 8017084:	f1bc 0f18 	cmp.w	ip, #24
 8017088:	d91d      	bls.n	80170c6 <__gethex+0x132>
 801708a:	f1bb 0f00 	cmp.w	fp, #0
 801708e:	d000      	beq.n	8017092 <__gethex+0xfe>
 8017090:	4252      	negs	r2, r2
 8017092:	4416      	add	r6, r2
 8017094:	f8ca 1000 	str.w	r1, [sl]
 8017098:	b1dc      	cbz	r4, 80170d2 <__gethex+0x13e>
 801709a:	9b01      	ldr	r3, [sp, #4]
 801709c:	2b00      	cmp	r3, #0
 801709e:	bf14      	ite	ne
 80170a0:	f04f 0800 	movne.w	r8, #0
 80170a4:	f04f 0806 	moveq.w	r8, #6
 80170a8:	4640      	mov	r0, r8
 80170aa:	b005      	add	sp, #20
 80170ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170b0:	4645      	mov	r5, r8
 80170b2:	4626      	mov	r6, r4
 80170b4:	2401      	movs	r4, #1
 80170b6:	e7c7      	b.n	8017048 <__gethex+0xb4>
 80170b8:	f04f 0b00 	mov.w	fp, #0
 80170bc:	1ca9      	adds	r1, r5, #2
 80170be:	e7d0      	b.n	8017062 <__gethex+0xce>
 80170c0:	f04f 0b01 	mov.w	fp, #1
 80170c4:	e7fa      	b.n	80170bc <__gethex+0x128>
 80170c6:	230a      	movs	r3, #10
 80170c8:	fb03 0002 	mla	r0, r3, r2, r0
 80170cc:	e7d0      	b.n	8017070 <__gethex+0xdc>
 80170ce:	4629      	mov	r1, r5
 80170d0:	e7e0      	b.n	8017094 <__gethex+0x100>
 80170d2:	eba5 0308 	sub.w	r3, r5, r8
 80170d6:	3b01      	subs	r3, #1
 80170d8:	4621      	mov	r1, r4
 80170da:	2b07      	cmp	r3, #7
 80170dc:	dc0a      	bgt.n	80170f4 <__gethex+0x160>
 80170de:	4648      	mov	r0, r9
 80170e0:	f000 fd14 	bl	8017b0c <_Balloc>
 80170e4:	4604      	mov	r4, r0
 80170e6:	b940      	cbnz	r0, 80170fa <__gethex+0x166>
 80170e8:	4b61      	ldr	r3, [pc, #388]	; (8017270 <__gethex+0x2dc>)
 80170ea:	4602      	mov	r2, r0
 80170ec:	21e4      	movs	r1, #228	; 0xe4
 80170ee:	4861      	ldr	r0, [pc, #388]	; (8017274 <__gethex+0x2e0>)
 80170f0:	f001 faa8 	bl	8018644 <__assert_func>
 80170f4:	3101      	adds	r1, #1
 80170f6:	105b      	asrs	r3, r3, #1
 80170f8:	e7ef      	b.n	80170da <__gethex+0x146>
 80170fa:	f100 0a14 	add.w	sl, r0, #20
 80170fe:	2300      	movs	r3, #0
 8017100:	495a      	ldr	r1, [pc, #360]	; (801726c <__gethex+0x2d8>)
 8017102:	f8cd a004 	str.w	sl, [sp, #4]
 8017106:	469b      	mov	fp, r3
 8017108:	45a8      	cmp	r8, r5
 801710a:	d342      	bcc.n	8017192 <__gethex+0x1fe>
 801710c:	9801      	ldr	r0, [sp, #4]
 801710e:	f840 bb04 	str.w	fp, [r0], #4
 8017112:	eba0 000a 	sub.w	r0, r0, sl
 8017116:	1080      	asrs	r0, r0, #2
 8017118:	6120      	str	r0, [r4, #16]
 801711a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801711e:	4658      	mov	r0, fp
 8017120:	f000 fde6 	bl	8017cf0 <__hi0bits>
 8017124:	683d      	ldr	r5, [r7, #0]
 8017126:	eba8 0000 	sub.w	r0, r8, r0
 801712a:	42a8      	cmp	r0, r5
 801712c:	dd59      	ble.n	80171e2 <__gethex+0x24e>
 801712e:	eba0 0805 	sub.w	r8, r0, r5
 8017132:	4641      	mov	r1, r8
 8017134:	4620      	mov	r0, r4
 8017136:	f001 f975 	bl	8018424 <__any_on>
 801713a:	4683      	mov	fp, r0
 801713c:	b1b8      	cbz	r0, 801716e <__gethex+0x1da>
 801713e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8017142:	1159      	asrs	r1, r3, #5
 8017144:	f003 021f 	and.w	r2, r3, #31
 8017148:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801714c:	f04f 0b01 	mov.w	fp, #1
 8017150:	fa0b f202 	lsl.w	r2, fp, r2
 8017154:	420a      	tst	r2, r1
 8017156:	d00a      	beq.n	801716e <__gethex+0x1da>
 8017158:	455b      	cmp	r3, fp
 801715a:	dd06      	ble.n	801716a <__gethex+0x1d6>
 801715c:	f1a8 0102 	sub.w	r1, r8, #2
 8017160:	4620      	mov	r0, r4
 8017162:	f001 f95f 	bl	8018424 <__any_on>
 8017166:	2800      	cmp	r0, #0
 8017168:	d138      	bne.n	80171dc <__gethex+0x248>
 801716a:	f04f 0b02 	mov.w	fp, #2
 801716e:	4641      	mov	r1, r8
 8017170:	4620      	mov	r0, r4
 8017172:	f7ff fea7 	bl	8016ec4 <rshift>
 8017176:	4446      	add	r6, r8
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	42b3      	cmp	r3, r6
 801717c:	da41      	bge.n	8017202 <__gethex+0x26e>
 801717e:	4621      	mov	r1, r4
 8017180:	4648      	mov	r0, r9
 8017182:	f000 fd03 	bl	8017b8c <_Bfree>
 8017186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017188:	2300      	movs	r3, #0
 801718a:	6013      	str	r3, [r2, #0]
 801718c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8017190:	e78a      	b.n	80170a8 <__gethex+0x114>
 8017192:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8017196:	2a2e      	cmp	r2, #46	; 0x2e
 8017198:	d014      	beq.n	80171c4 <__gethex+0x230>
 801719a:	2b20      	cmp	r3, #32
 801719c:	d106      	bne.n	80171ac <__gethex+0x218>
 801719e:	9b01      	ldr	r3, [sp, #4]
 80171a0:	f843 bb04 	str.w	fp, [r3], #4
 80171a4:	f04f 0b00 	mov.w	fp, #0
 80171a8:	9301      	str	r3, [sp, #4]
 80171aa:	465b      	mov	r3, fp
 80171ac:	7828      	ldrb	r0, [r5, #0]
 80171ae:	9303      	str	r3, [sp, #12]
 80171b0:	f7ff feda 	bl	8016f68 <__hexdig_fun>
 80171b4:	9b03      	ldr	r3, [sp, #12]
 80171b6:	f000 000f 	and.w	r0, r0, #15
 80171ba:	4098      	lsls	r0, r3
 80171bc:	ea4b 0b00 	orr.w	fp, fp, r0
 80171c0:	3304      	adds	r3, #4
 80171c2:	e7a1      	b.n	8017108 <__gethex+0x174>
 80171c4:	45a8      	cmp	r8, r5
 80171c6:	d8e8      	bhi.n	801719a <__gethex+0x206>
 80171c8:	2201      	movs	r2, #1
 80171ca:	4628      	mov	r0, r5
 80171cc:	9303      	str	r3, [sp, #12]
 80171ce:	f7fe ff95 	bl	80160fc <strncmp>
 80171d2:	4926      	ldr	r1, [pc, #152]	; (801726c <__gethex+0x2d8>)
 80171d4:	9b03      	ldr	r3, [sp, #12]
 80171d6:	2800      	cmp	r0, #0
 80171d8:	d1df      	bne.n	801719a <__gethex+0x206>
 80171da:	e795      	b.n	8017108 <__gethex+0x174>
 80171dc:	f04f 0b03 	mov.w	fp, #3
 80171e0:	e7c5      	b.n	801716e <__gethex+0x1da>
 80171e2:	da0b      	bge.n	80171fc <__gethex+0x268>
 80171e4:	eba5 0800 	sub.w	r8, r5, r0
 80171e8:	4621      	mov	r1, r4
 80171ea:	4642      	mov	r2, r8
 80171ec:	4648      	mov	r0, r9
 80171ee:	f000 fee7 	bl	8017fc0 <__lshift>
 80171f2:	eba6 0608 	sub.w	r6, r6, r8
 80171f6:	4604      	mov	r4, r0
 80171f8:	f100 0a14 	add.w	sl, r0, #20
 80171fc:	f04f 0b00 	mov.w	fp, #0
 8017200:	e7ba      	b.n	8017178 <__gethex+0x1e4>
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	42b3      	cmp	r3, r6
 8017206:	dd73      	ble.n	80172f0 <__gethex+0x35c>
 8017208:	1b9e      	subs	r6, r3, r6
 801720a:	42b5      	cmp	r5, r6
 801720c:	dc34      	bgt.n	8017278 <__gethex+0x2e4>
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	2b02      	cmp	r3, #2
 8017212:	d023      	beq.n	801725c <__gethex+0x2c8>
 8017214:	2b03      	cmp	r3, #3
 8017216:	d025      	beq.n	8017264 <__gethex+0x2d0>
 8017218:	2b01      	cmp	r3, #1
 801721a:	d115      	bne.n	8017248 <__gethex+0x2b4>
 801721c:	42b5      	cmp	r5, r6
 801721e:	d113      	bne.n	8017248 <__gethex+0x2b4>
 8017220:	2d01      	cmp	r5, #1
 8017222:	d10b      	bne.n	801723c <__gethex+0x2a8>
 8017224:	9a02      	ldr	r2, [sp, #8]
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	6013      	str	r3, [r2, #0]
 801722a:	2301      	movs	r3, #1
 801722c:	6123      	str	r3, [r4, #16]
 801722e:	f8ca 3000 	str.w	r3, [sl]
 8017232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017234:	f04f 0862 	mov.w	r8, #98	; 0x62
 8017238:	601c      	str	r4, [r3, #0]
 801723a:	e735      	b.n	80170a8 <__gethex+0x114>
 801723c:	1e69      	subs	r1, r5, #1
 801723e:	4620      	mov	r0, r4
 8017240:	f001 f8f0 	bl	8018424 <__any_on>
 8017244:	2800      	cmp	r0, #0
 8017246:	d1ed      	bne.n	8017224 <__gethex+0x290>
 8017248:	4621      	mov	r1, r4
 801724a:	4648      	mov	r0, r9
 801724c:	f000 fc9e 	bl	8017b8c <_Bfree>
 8017250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017252:	2300      	movs	r3, #0
 8017254:	6013      	str	r3, [r2, #0]
 8017256:	f04f 0850 	mov.w	r8, #80	; 0x50
 801725a:	e725      	b.n	80170a8 <__gethex+0x114>
 801725c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801725e:	2b00      	cmp	r3, #0
 8017260:	d1f2      	bne.n	8017248 <__gethex+0x2b4>
 8017262:	e7df      	b.n	8017224 <__gethex+0x290>
 8017264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017266:	2b00      	cmp	r3, #0
 8017268:	d1dc      	bne.n	8017224 <__gethex+0x290>
 801726a:	e7ed      	b.n	8017248 <__gethex+0x2b4>
 801726c:	0801c709 	.word	0x0801c709
 8017270:	0801c8e5 	.word	0x0801c8e5
 8017274:	0801c8f6 	.word	0x0801c8f6
 8017278:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 801727c:	f1bb 0f00 	cmp.w	fp, #0
 8017280:	d133      	bne.n	80172ea <__gethex+0x356>
 8017282:	f1b8 0f00 	cmp.w	r8, #0
 8017286:	d004      	beq.n	8017292 <__gethex+0x2fe>
 8017288:	4641      	mov	r1, r8
 801728a:	4620      	mov	r0, r4
 801728c:	f001 f8ca 	bl	8018424 <__any_on>
 8017290:	4683      	mov	fp, r0
 8017292:	ea4f 1268 	mov.w	r2, r8, asr #5
 8017296:	2301      	movs	r3, #1
 8017298:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801729c:	f008 081f 	and.w	r8, r8, #31
 80172a0:	fa03 f308 	lsl.w	r3, r3, r8
 80172a4:	4213      	tst	r3, r2
 80172a6:	4631      	mov	r1, r6
 80172a8:	4620      	mov	r0, r4
 80172aa:	bf18      	it	ne
 80172ac:	f04b 0b02 	orrne.w	fp, fp, #2
 80172b0:	1bad      	subs	r5, r5, r6
 80172b2:	f7ff fe07 	bl	8016ec4 <rshift>
 80172b6:	687e      	ldr	r6, [r7, #4]
 80172b8:	f04f 0802 	mov.w	r8, #2
 80172bc:	f1bb 0f00 	cmp.w	fp, #0
 80172c0:	d04a      	beq.n	8017358 <__gethex+0x3c4>
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	2b02      	cmp	r3, #2
 80172c6:	d016      	beq.n	80172f6 <__gethex+0x362>
 80172c8:	2b03      	cmp	r3, #3
 80172ca:	d018      	beq.n	80172fe <__gethex+0x36a>
 80172cc:	2b01      	cmp	r3, #1
 80172ce:	d109      	bne.n	80172e4 <__gethex+0x350>
 80172d0:	f01b 0f02 	tst.w	fp, #2
 80172d4:	d006      	beq.n	80172e4 <__gethex+0x350>
 80172d6:	f8da 3000 	ldr.w	r3, [sl]
 80172da:	ea4b 0b03 	orr.w	fp, fp, r3
 80172de:	f01b 0f01 	tst.w	fp, #1
 80172e2:	d10f      	bne.n	8017304 <__gethex+0x370>
 80172e4:	f048 0810 	orr.w	r8, r8, #16
 80172e8:	e036      	b.n	8017358 <__gethex+0x3c4>
 80172ea:	f04f 0b01 	mov.w	fp, #1
 80172ee:	e7d0      	b.n	8017292 <__gethex+0x2fe>
 80172f0:	f04f 0801 	mov.w	r8, #1
 80172f4:	e7e2      	b.n	80172bc <__gethex+0x328>
 80172f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172f8:	f1c3 0301 	rsb	r3, r3, #1
 80172fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80172fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017300:	2b00      	cmp	r3, #0
 8017302:	d0ef      	beq.n	80172e4 <__gethex+0x350>
 8017304:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017308:	f104 0214 	add.w	r2, r4, #20
 801730c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8017310:	9301      	str	r3, [sp, #4]
 8017312:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8017316:	2300      	movs	r3, #0
 8017318:	4694      	mov	ip, r2
 801731a:	f852 1b04 	ldr.w	r1, [r2], #4
 801731e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8017322:	d01e      	beq.n	8017362 <__gethex+0x3ce>
 8017324:	3101      	adds	r1, #1
 8017326:	f8cc 1000 	str.w	r1, [ip]
 801732a:	f1b8 0f02 	cmp.w	r8, #2
 801732e:	f104 0214 	add.w	r2, r4, #20
 8017332:	d13d      	bne.n	80173b0 <__gethex+0x41c>
 8017334:	683b      	ldr	r3, [r7, #0]
 8017336:	3b01      	subs	r3, #1
 8017338:	42ab      	cmp	r3, r5
 801733a:	d10b      	bne.n	8017354 <__gethex+0x3c0>
 801733c:	1169      	asrs	r1, r5, #5
 801733e:	2301      	movs	r3, #1
 8017340:	f005 051f 	and.w	r5, r5, #31
 8017344:	fa03 f505 	lsl.w	r5, r3, r5
 8017348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801734c:	421d      	tst	r5, r3
 801734e:	bf18      	it	ne
 8017350:	f04f 0801 	movne.w	r8, #1
 8017354:	f048 0820 	orr.w	r8, r8, #32
 8017358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801735a:	601c      	str	r4, [r3, #0]
 801735c:	9b02      	ldr	r3, [sp, #8]
 801735e:	601e      	str	r6, [r3, #0]
 8017360:	e6a2      	b.n	80170a8 <__gethex+0x114>
 8017362:	4290      	cmp	r0, r2
 8017364:	f842 3c04 	str.w	r3, [r2, #-4]
 8017368:	d8d6      	bhi.n	8017318 <__gethex+0x384>
 801736a:	68a2      	ldr	r2, [r4, #8]
 801736c:	4593      	cmp	fp, r2
 801736e:	db17      	blt.n	80173a0 <__gethex+0x40c>
 8017370:	6861      	ldr	r1, [r4, #4]
 8017372:	4648      	mov	r0, r9
 8017374:	3101      	adds	r1, #1
 8017376:	f000 fbc9 	bl	8017b0c <_Balloc>
 801737a:	4682      	mov	sl, r0
 801737c:	b918      	cbnz	r0, 8017386 <__gethex+0x3f2>
 801737e:	4b1b      	ldr	r3, [pc, #108]	; (80173ec <__gethex+0x458>)
 8017380:	4602      	mov	r2, r0
 8017382:	2184      	movs	r1, #132	; 0x84
 8017384:	e6b3      	b.n	80170ee <__gethex+0x15a>
 8017386:	6922      	ldr	r2, [r4, #16]
 8017388:	3202      	adds	r2, #2
 801738a:	f104 010c 	add.w	r1, r4, #12
 801738e:	0092      	lsls	r2, r2, #2
 8017390:	300c      	adds	r0, #12
 8017392:	f7fe fefd 	bl	8016190 <memcpy>
 8017396:	4621      	mov	r1, r4
 8017398:	4648      	mov	r0, r9
 801739a:	f000 fbf7 	bl	8017b8c <_Bfree>
 801739e:	4654      	mov	r4, sl
 80173a0:	6922      	ldr	r2, [r4, #16]
 80173a2:	1c51      	adds	r1, r2, #1
 80173a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80173a8:	6121      	str	r1, [r4, #16]
 80173aa:	2101      	movs	r1, #1
 80173ac:	6151      	str	r1, [r2, #20]
 80173ae:	e7bc      	b.n	801732a <__gethex+0x396>
 80173b0:	6921      	ldr	r1, [r4, #16]
 80173b2:	4559      	cmp	r1, fp
 80173b4:	dd0b      	ble.n	80173ce <__gethex+0x43a>
 80173b6:	2101      	movs	r1, #1
 80173b8:	4620      	mov	r0, r4
 80173ba:	f7ff fd83 	bl	8016ec4 <rshift>
 80173be:	68bb      	ldr	r3, [r7, #8]
 80173c0:	3601      	adds	r6, #1
 80173c2:	42b3      	cmp	r3, r6
 80173c4:	f6ff aedb 	blt.w	801717e <__gethex+0x1ea>
 80173c8:	f04f 0801 	mov.w	r8, #1
 80173cc:	e7c2      	b.n	8017354 <__gethex+0x3c0>
 80173ce:	f015 051f 	ands.w	r5, r5, #31
 80173d2:	d0f9      	beq.n	80173c8 <__gethex+0x434>
 80173d4:	9b01      	ldr	r3, [sp, #4]
 80173d6:	441a      	add	r2, r3
 80173d8:	f1c5 0520 	rsb	r5, r5, #32
 80173dc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80173e0:	f000 fc86 	bl	8017cf0 <__hi0bits>
 80173e4:	42a8      	cmp	r0, r5
 80173e6:	dbe6      	blt.n	80173b6 <__gethex+0x422>
 80173e8:	e7ee      	b.n	80173c8 <__gethex+0x434>
 80173ea:	bf00      	nop
 80173ec:	0801c8e5 	.word	0x0801c8e5

080173f0 <L_shift>:
 80173f0:	f1c2 0208 	rsb	r2, r2, #8
 80173f4:	0092      	lsls	r2, r2, #2
 80173f6:	b570      	push	{r4, r5, r6, lr}
 80173f8:	f1c2 0620 	rsb	r6, r2, #32
 80173fc:	6843      	ldr	r3, [r0, #4]
 80173fe:	6804      	ldr	r4, [r0, #0]
 8017400:	fa03 f506 	lsl.w	r5, r3, r6
 8017404:	432c      	orrs	r4, r5
 8017406:	40d3      	lsrs	r3, r2
 8017408:	6004      	str	r4, [r0, #0]
 801740a:	f840 3f04 	str.w	r3, [r0, #4]!
 801740e:	4288      	cmp	r0, r1
 8017410:	d3f4      	bcc.n	80173fc <L_shift+0xc>
 8017412:	bd70      	pop	{r4, r5, r6, pc}

08017414 <__match>:
 8017414:	b530      	push	{r4, r5, lr}
 8017416:	6803      	ldr	r3, [r0, #0]
 8017418:	3301      	adds	r3, #1
 801741a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801741e:	b914      	cbnz	r4, 8017426 <__match+0x12>
 8017420:	6003      	str	r3, [r0, #0]
 8017422:	2001      	movs	r0, #1
 8017424:	bd30      	pop	{r4, r5, pc}
 8017426:	f813 2b01 	ldrb.w	r2, [r3], #1
 801742a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801742e:	2d19      	cmp	r5, #25
 8017430:	bf98      	it	ls
 8017432:	3220      	addls	r2, #32
 8017434:	42a2      	cmp	r2, r4
 8017436:	d0f0      	beq.n	801741a <__match+0x6>
 8017438:	2000      	movs	r0, #0
 801743a:	e7f3      	b.n	8017424 <__match+0x10>

0801743c <__hexnan>:
 801743c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017440:	680b      	ldr	r3, [r1, #0]
 8017442:	6801      	ldr	r1, [r0, #0]
 8017444:	115e      	asrs	r6, r3, #5
 8017446:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801744a:	f013 031f 	ands.w	r3, r3, #31
 801744e:	b087      	sub	sp, #28
 8017450:	bf18      	it	ne
 8017452:	3604      	addne	r6, #4
 8017454:	2500      	movs	r5, #0
 8017456:	1f37      	subs	r7, r6, #4
 8017458:	4682      	mov	sl, r0
 801745a:	4690      	mov	r8, r2
 801745c:	9301      	str	r3, [sp, #4]
 801745e:	f846 5c04 	str.w	r5, [r6, #-4]
 8017462:	46b9      	mov	r9, r7
 8017464:	463c      	mov	r4, r7
 8017466:	9502      	str	r5, [sp, #8]
 8017468:	46ab      	mov	fp, r5
 801746a:	784a      	ldrb	r2, [r1, #1]
 801746c:	1c4b      	adds	r3, r1, #1
 801746e:	9303      	str	r3, [sp, #12]
 8017470:	b342      	cbz	r2, 80174c4 <__hexnan+0x88>
 8017472:	4610      	mov	r0, r2
 8017474:	9105      	str	r1, [sp, #20]
 8017476:	9204      	str	r2, [sp, #16]
 8017478:	f7ff fd76 	bl	8016f68 <__hexdig_fun>
 801747c:	2800      	cmp	r0, #0
 801747e:	d14f      	bne.n	8017520 <__hexnan+0xe4>
 8017480:	9a04      	ldr	r2, [sp, #16]
 8017482:	9905      	ldr	r1, [sp, #20]
 8017484:	2a20      	cmp	r2, #32
 8017486:	d818      	bhi.n	80174ba <__hexnan+0x7e>
 8017488:	9b02      	ldr	r3, [sp, #8]
 801748a:	459b      	cmp	fp, r3
 801748c:	dd13      	ble.n	80174b6 <__hexnan+0x7a>
 801748e:	454c      	cmp	r4, r9
 8017490:	d206      	bcs.n	80174a0 <__hexnan+0x64>
 8017492:	2d07      	cmp	r5, #7
 8017494:	dc04      	bgt.n	80174a0 <__hexnan+0x64>
 8017496:	462a      	mov	r2, r5
 8017498:	4649      	mov	r1, r9
 801749a:	4620      	mov	r0, r4
 801749c:	f7ff ffa8 	bl	80173f0 <L_shift>
 80174a0:	4544      	cmp	r4, r8
 80174a2:	d950      	bls.n	8017546 <__hexnan+0x10a>
 80174a4:	2300      	movs	r3, #0
 80174a6:	f1a4 0904 	sub.w	r9, r4, #4
 80174aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80174ae:	f8cd b008 	str.w	fp, [sp, #8]
 80174b2:	464c      	mov	r4, r9
 80174b4:	461d      	mov	r5, r3
 80174b6:	9903      	ldr	r1, [sp, #12]
 80174b8:	e7d7      	b.n	801746a <__hexnan+0x2e>
 80174ba:	2a29      	cmp	r2, #41	; 0x29
 80174bc:	d155      	bne.n	801756a <__hexnan+0x12e>
 80174be:	3102      	adds	r1, #2
 80174c0:	f8ca 1000 	str.w	r1, [sl]
 80174c4:	f1bb 0f00 	cmp.w	fp, #0
 80174c8:	d04f      	beq.n	801756a <__hexnan+0x12e>
 80174ca:	454c      	cmp	r4, r9
 80174cc:	d206      	bcs.n	80174dc <__hexnan+0xa0>
 80174ce:	2d07      	cmp	r5, #7
 80174d0:	dc04      	bgt.n	80174dc <__hexnan+0xa0>
 80174d2:	462a      	mov	r2, r5
 80174d4:	4649      	mov	r1, r9
 80174d6:	4620      	mov	r0, r4
 80174d8:	f7ff ff8a 	bl	80173f0 <L_shift>
 80174dc:	4544      	cmp	r4, r8
 80174de:	d934      	bls.n	801754a <__hexnan+0x10e>
 80174e0:	f1a8 0204 	sub.w	r2, r8, #4
 80174e4:	4623      	mov	r3, r4
 80174e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80174ea:	f842 1f04 	str.w	r1, [r2, #4]!
 80174ee:	429f      	cmp	r7, r3
 80174f0:	d2f9      	bcs.n	80174e6 <__hexnan+0xaa>
 80174f2:	1b3b      	subs	r3, r7, r4
 80174f4:	f023 0303 	bic.w	r3, r3, #3
 80174f8:	3304      	adds	r3, #4
 80174fa:	3e03      	subs	r6, #3
 80174fc:	3401      	adds	r4, #1
 80174fe:	42a6      	cmp	r6, r4
 8017500:	bf38      	it	cc
 8017502:	2304      	movcc	r3, #4
 8017504:	4443      	add	r3, r8
 8017506:	2200      	movs	r2, #0
 8017508:	f843 2b04 	str.w	r2, [r3], #4
 801750c:	429f      	cmp	r7, r3
 801750e:	d2fb      	bcs.n	8017508 <__hexnan+0xcc>
 8017510:	683b      	ldr	r3, [r7, #0]
 8017512:	b91b      	cbnz	r3, 801751c <__hexnan+0xe0>
 8017514:	4547      	cmp	r7, r8
 8017516:	d126      	bne.n	8017566 <__hexnan+0x12a>
 8017518:	2301      	movs	r3, #1
 801751a:	603b      	str	r3, [r7, #0]
 801751c:	2005      	movs	r0, #5
 801751e:	e025      	b.n	801756c <__hexnan+0x130>
 8017520:	3501      	adds	r5, #1
 8017522:	2d08      	cmp	r5, #8
 8017524:	f10b 0b01 	add.w	fp, fp, #1
 8017528:	dd06      	ble.n	8017538 <__hexnan+0xfc>
 801752a:	4544      	cmp	r4, r8
 801752c:	d9c3      	bls.n	80174b6 <__hexnan+0x7a>
 801752e:	2300      	movs	r3, #0
 8017530:	f844 3c04 	str.w	r3, [r4, #-4]
 8017534:	2501      	movs	r5, #1
 8017536:	3c04      	subs	r4, #4
 8017538:	6822      	ldr	r2, [r4, #0]
 801753a:	f000 000f 	and.w	r0, r0, #15
 801753e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017542:	6020      	str	r0, [r4, #0]
 8017544:	e7b7      	b.n	80174b6 <__hexnan+0x7a>
 8017546:	2508      	movs	r5, #8
 8017548:	e7b5      	b.n	80174b6 <__hexnan+0x7a>
 801754a:	9b01      	ldr	r3, [sp, #4]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d0df      	beq.n	8017510 <__hexnan+0xd4>
 8017550:	f1c3 0320 	rsb	r3, r3, #32
 8017554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017558:	40da      	lsrs	r2, r3
 801755a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801755e:	4013      	ands	r3, r2
 8017560:	f846 3c04 	str.w	r3, [r6, #-4]
 8017564:	e7d4      	b.n	8017510 <__hexnan+0xd4>
 8017566:	3f04      	subs	r7, #4
 8017568:	e7d2      	b.n	8017510 <__hexnan+0xd4>
 801756a:	2004      	movs	r0, #4
 801756c:	b007      	add	sp, #28
 801756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017572 <__ssputs_r>:
 8017572:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017576:	688e      	ldr	r6, [r1, #8]
 8017578:	461f      	mov	r7, r3
 801757a:	42be      	cmp	r6, r7
 801757c:	680b      	ldr	r3, [r1, #0]
 801757e:	4682      	mov	sl, r0
 8017580:	460c      	mov	r4, r1
 8017582:	4690      	mov	r8, r2
 8017584:	d82c      	bhi.n	80175e0 <__ssputs_r+0x6e>
 8017586:	898a      	ldrh	r2, [r1, #12]
 8017588:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801758c:	d026      	beq.n	80175dc <__ssputs_r+0x6a>
 801758e:	6965      	ldr	r5, [r4, #20]
 8017590:	6909      	ldr	r1, [r1, #16]
 8017592:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017596:	eba3 0901 	sub.w	r9, r3, r1
 801759a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801759e:	1c7b      	adds	r3, r7, #1
 80175a0:	444b      	add	r3, r9
 80175a2:	106d      	asrs	r5, r5, #1
 80175a4:	429d      	cmp	r5, r3
 80175a6:	bf38      	it	cc
 80175a8:	461d      	movcc	r5, r3
 80175aa:	0553      	lsls	r3, r2, #21
 80175ac:	d527      	bpl.n	80175fe <__ssputs_r+0x8c>
 80175ae:	4629      	mov	r1, r5
 80175b0:	f000 f960 	bl	8017874 <_malloc_r>
 80175b4:	4606      	mov	r6, r0
 80175b6:	b360      	cbz	r0, 8017612 <__ssputs_r+0xa0>
 80175b8:	6921      	ldr	r1, [r4, #16]
 80175ba:	464a      	mov	r2, r9
 80175bc:	f7fe fde8 	bl	8016190 <memcpy>
 80175c0:	89a3      	ldrh	r3, [r4, #12]
 80175c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80175c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175ca:	81a3      	strh	r3, [r4, #12]
 80175cc:	6126      	str	r6, [r4, #16]
 80175ce:	6165      	str	r5, [r4, #20]
 80175d0:	444e      	add	r6, r9
 80175d2:	eba5 0509 	sub.w	r5, r5, r9
 80175d6:	6026      	str	r6, [r4, #0]
 80175d8:	60a5      	str	r5, [r4, #8]
 80175da:	463e      	mov	r6, r7
 80175dc:	42be      	cmp	r6, r7
 80175de:	d900      	bls.n	80175e2 <__ssputs_r+0x70>
 80175e0:	463e      	mov	r6, r7
 80175e2:	6820      	ldr	r0, [r4, #0]
 80175e4:	4632      	mov	r2, r6
 80175e6:	4641      	mov	r1, r8
 80175e8:	f000 ffbc 	bl	8018564 <memmove>
 80175ec:	68a3      	ldr	r3, [r4, #8]
 80175ee:	1b9b      	subs	r3, r3, r6
 80175f0:	60a3      	str	r3, [r4, #8]
 80175f2:	6823      	ldr	r3, [r4, #0]
 80175f4:	4433      	add	r3, r6
 80175f6:	6023      	str	r3, [r4, #0]
 80175f8:	2000      	movs	r0, #0
 80175fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175fe:	462a      	mov	r2, r5
 8017600:	f000 ff74 	bl	80184ec <_realloc_r>
 8017604:	4606      	mov	r6, r0
 8017606:	2800      	cmp	r0, #0
 8017608:	d1e0      	bne.n	80175cc <__ssputs_r+0x5a>
 801760a:	6921      	ldr	r1, [r4, #16]
 801760c:	4650      	mov	r0, sl
 801760e:	f001 f84d 	bl	80186ac <_free_r>
 8017612:	230c      	movs	r3, #12
 8017614:	f8ca 3000 	str.w	r3, [sl]
 8017618:	89a3      	ldrh	r3, [r4, #12]
 801761a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801761e:	81a3      	strh	r3, [r4, #12]
 8017620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017624:	e7e9      	b.n	80175fa <__ssputs_r+0x88>
	...

08017628 <_svfiprintf_r>:
 8017628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801762c:	4698      	mov	r8, r3
 801762e:	898b      	ldrh	r3, [r1, #12]
 8017630:	061b      	lsls	r3, r3, #24
 8017632:	b09d      	sub	sp, #116	; 0x74
 8017634:	4607      	mov	r7, r0
 8017636:	460d      	mov	r5, r1
 8017638:	4614      	mov	r4, r2
 801763a:	d50e      	bpl.n	801765a <_svfiprintf_r+0x32>
 801763c:	690b      	ldr	r3, [r1, #16]
 801763e:	b963      	cbnz	r3, 801765a <_svfiprintf_r+0x32>
 8017640:	2140      	movs	r1, #64	; 0x40
 8017642:	f000 f917 	bl	8017874 <_malloc_r>
 8017646:	6028      	str	r0, [r5, #0]
 8017648:	6128      	str	r0, [r5, #16]
 801764a:	b920      	cbnz	r0, 8017656 <_svfiprintf_r+0x2e>
 801764c:	230c      	movs	r3, #12
 801764e:	603b      	str	r3, [r7, #0]
 8017650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017654:	e0d0      	b.n	80177f8 <_svfiprintf_r+0x1d0>
 8017656:	2340      	movs	r3, #64	; 0x40
 8017658:	616b      	str	r3, [r5, #20]
 801765a:	2300      	movs	r3, #0
 801765c:	9309      	str	r3, [sp, #36]	; 0x24
 801765e:	2320      	movs	r3, #32
 8017660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017664:	f8cd 800c 	str.w	r8, [sp, #12]
 8017668:	2330      	movs	r3, #48	; 0x30
 801766a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017810 <_svfiprintf_r+0x1e8>
 801766e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017672:	f04f 0901 	mov.w	r9, #1
 8017676:	4623      	mov	r3, r4
 8017678:	469a      	mov	sl, r3
 801767a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801767e:	b10a      	cbz	r2, 8017684 <_svfiprintf_r+0x5c>
 8017680:	2a25      	cmp	r2, #37	; 0x25
 8017682:	d1f9      	bne.n	8017678 <_svfiprintf_r+0x50>
 8017684:	ebba 0b04 	subs.w	fp, sl, r4
 8017688:	d00b      	beq.n	80176a2 <_svfiprintf_r+0x7a>
 801768a:	465b      	mov	r3, fp
 801768c:	4622      	mov	r2, r4
 801768e:	4629      	mov	r1, r5
 8017690:	4638      	mov	r0, r7
 8017692:	f7ff ff6e 	bl	8017572 <__ssputs_r>
 8017696:	3001      	adds	r0, #1
 8017698:	f000 80a9 	beq.w	80177ee <_svfiprintf_r+0x1c6>
 801769c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801769e:	445a      	add	r2, fp
 80176a0:	9209      	str	r2, [sp, #36]	; 0x24
 80176a2:	f89a 3000 	ldrb.w	r3, [sl]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	f000 80a1 	beq.w	80177ee <_svfiprintf_r+0x1c6>
 80176ac:	2300      	movs	r3, #0
 80176ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80176b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80176b6:	f10a 0a01 	add.w	sl, sl, #1
 80176ba:	9304      	str	r3, [sp, #16]
 80176bc:	9307      	str	r3, [sp, #28]
 80176be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80176c2:	931a      	str	r3, [sp, #104]	; 0x68
 80176c4:	4654      	mov	r4, sl
 80176c6:	2205      	movs	r2, #5
 80176c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176cc:	4850      	ldr	r0, [pc, #320]	; (8017810 <_svfiprintf_r+0x1e8>)
 80176ce:	f7e8 fd7f 	bl	80001d0 <memchr>
 80176d2:	9a04      	ldr	r2, [sp, #16]
 80176d4:	b9d8      	cbnz	r0, 801770e <_svfiprintf_r+0xe6>
 80176d6:	06d0      	lsls	r0, r2, #27
 80176d8:	bf44      	itt	mi
 80176da:	2320      	movmi	r3, #32
 80176dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80176e0:	0711      	lsls	r1, r2, #28
 80176e2:	bf44      	itt	mi
 80176e4:	232b      	movmi	r3, #43	; 0x2b
 80176e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80176ea:	f89a 3000 	ldrb.w	r3, [sl]
 80176ee:	2b2a      	cmp	r3, #42	; 0x2a
 80176f0:	d015      	beq.n	801771e <_svfiprintf_r+0xf6>
 80176f2:	9a07      	ldr	r2, [sp, #28]
 80176f4:	4654      	mov	r4, sl
 80176f6:	2000      	movs	r0, #0
 80176f8:	f04f 0c0a 	mov.w	ip, #10
 80176fc:	4621      	mov	r1, r4
 80176fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017702:	3b30      	subs	r3, #48	; 0x30
 8017704:	2b09      	cmp	r3, #9
 8017706:	d94d      	bls.n	80177a4 <_svfiprintf_r+0x17c>
 8017708:	b1b0      	cbz	r0, 8017738 <_svfiprintf_r+0x110>
 801770a:	9207      	str	r2, [sp, #28]
 801770c:	e014      	b.n	8017738 <_svfiprintf_r+0x110>
 801770e:	eba0 0308 	sub.w	r3, r0, r8
 8017712:	fa09 f303 	lsl.w	r3, r9, r3
 8017716:	4313      	orrs	r3, r2
 8017718:	9304      	str	r3, [sp, #16]
 801771a:	46a2      	mov	sl, r4
 801771c:	e7d2      	b.n	80176c4 <_svfiprintf_r+0x9c>
 801771e:	9b03      	ldr	r3, [sp, #12]
 8017720:	1d19      	adds	r1, r3, #4
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	9103      	str	r1, [sp, #12]
 8017726:	2b00      	cmp	r3, #0
 8017728:	bfbb      	ittet	lt
 801772a:	425b      	neglt	r3, r3
 801772c:	f042 0202 	orrlt.w	r2, r2, #2
 8017730:	9307      	strge	r3, [sp, #28]
 8017732:	9307      	strlt	r3, [sp, #28]
 8017734:	bfb8      	it	lt
 8017736:	9204      	strlt	r2, [sp, #16]
 8017738:	7823      	ldrb	r3, [r4, #0]
 801773a:	2b2e      	cmp	r3, #46	; 0x2e
 801773c:	d10c      	bne.n	8017758 <_svfiprintf_r+0x130>
 801773e:	7863      	ldrb	r3, [r4, #1]
 8017740:	2b2a      	cmp	r3, #42	; 0x2a
 8017742:	d134      	bne.n	80177ae <_svfiprintf_r+0x186>
 8017744:	9b03      	ldr	r3, [sp, #12]
 8017746:	1d1a      	adds	r2, r3, #4
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	9203      	str	r2, [sp, #12]
 801774c:	2b00      	cmp	r3, #0
 801774e:	bfb8      	it	lt
 8017750:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017754:	3402      	adds	r4, #2
 8017756:	9305      	str	r3, [sp, #20]
 8017758:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017820 <_svfiprintf_r+0x1f8>
 801775c:	7821      	ldrb	r1, [r4, #0]
 801775e:	2203      	movs	r2, #3
 8017760:	4650      	mov	r0, sl
 8017762:	f7e8 fd35 	bl	80001d0 <memchr>
 8017766:	b138      	cbz	r0, 8017778 <_svfiprintf_r+0x150>
 8017768:	9b04      	ldr	r3, [sp, #16]
 801776a:	eba0 000a 	sub.w	r0, r0, sl
 801776e:	2240      	movs	r2, #64	; 0x40
 8017770:	4082      	lsls	r2, r0
 8017772:	4313      	orrs	r3, r2
 8017774:	3401      	adds	r4, #1
 8017776:	9304      	str	r3, [sp, #16]
 8017778:	f814 1b01 	ldrb.w	r1, [r4], #1
 801777c:	4825      	ldr	r0, [pc, #148]	; (8017814 <_svfiprintf_r+0x1ec>)
 801777e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017782:	2206      	movs	r2, #6
 8017784:	f7e8 fd24 	bl	80001d0 <memchr>
 8017788:	2800      	cmp	r0, #0
 801778a:	d038      	beq.n	80177fe <_svfiprintf_r+0x1d6>
 801778c:	4b22      	ldr	r3, [pc, #136]	; (8017818 <_svfiprintf_r+0x1f0>)
 801778e:	bb1b      	cbnz	r3, 80177d8 <_svfiprintf_r+0x1b0>
 8017790:	9b03      	ldr	r3, [sp, #12]
 8017792:	3307      	adds	r3, #7
 8017794:	f023 0307 	bic.w	r3, r3, #7
 8017798:	3308      	adds	r3, #8
 801779a:	9303      	str	r3, [sp, #12]
 801779c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801779e:	4433      	add	r3, r6
 80177a0:	9309      	str	r3, [sp, #36]	; 0x24
 80177a2:	e768      	b.n	8017676 <_svfiprintf_r+0x4e>
 80177a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80177a8:	460c      	mov	r4, r1
 80177aa:	2001      	movs	r0, #1
 80177ac:	e7a6      	b.n	80176fc <_svfiprintf_r+0xd4>
 80177ae:	2300      	movs	r3, #0
 80177b0:	3401      	adds	r4, #1
 80177b2:	9305      	str	r3, [sp, #20]
 80177b4:	4619      	mov	r1, r3
 80177b6:	f04f 0c0a 	mov.w	ip, #10
 80177ba:	4620      	mov	r0, r4
 80177bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177c0:	3a30      	subs	r2, #48	; 0x30
 80177c2:	2a09      	cmp	r2, #9
 80177c4:	d903      	bls.n	80177ce <_svfiprintf_r+0x1a6>
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d0c6      	beq.n	8017758 <_svfiprintf_r+0x130>
 80177ca:	9105      	str	r1, [sp, #20]
 80177cc:	e7c4      	b.n	8017758 <_svfiprintf_r+0x130>
 80177ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80177d2:	4604      	mov	r4, r0
 80177d4:	2301      	movs	r3, #1
 80177d6:	e7f0      	b.n	80177ba <_svfiprintf_r+0x192>
 80177d8:	ab03      	add	r3, sp, #12
 80177da:	9300      	str	r3, [sp, #0]
 80177dc:	462a      	mov	r2, r5
 80177de:	4b0f      	ldr	r3, [pc, #60]	; (801781c <_svfiprintf_r+0x1f4>)
 80177e0:	a904      	add	r1, sp, #16
 80177e2:	4638      	mov	r0, r7
 80177e4:	f7fc ff44 	bl	8014670 <_printf_float>
 80177e8:	1c42      	adds	r2, r0, #1
 80177ea:	4606      	mov	r6, r0
 80177ec:	d1d6      	bne.n	801779c <_svfiprintf_r+0x174>
 80177ee:	89ab      	ldrh	r3, [r5, #12]
 80177f0:	065b      	lsls	r3, r3, #25
 80177f2:	f53f af2d 	bmi.w	8017650 <_svfiprintf_r+0x28>
 80177f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80177f8:	b01d      	add	sp, #116	; 0x74
 80177fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177fe:	ab03      	add	r3, sp, #12
 8017800:	9300      	str	r3, [sp, #0]
 8017802:	462a      	mov	r2, r5
 8017804:	4b05      	ldr	r3, [pc, #20]	; (801781c <_svfiprintf_r+0x1f4>)
 8017806:	a904      	add	r1, sp, #16
 8017808:	4638      	mov	r0, r7
 801780a:	f7fd f9d5 	bl	8014bb8 <_printf_i>
 801780e:	e7eb      	b.n	80177e8 <_svfiprintf_r+0x1c0>
 8017810:	0801c956 	.word	0x0801c956
 8017814:	0801c960 	.word	0x0801c960
 8017818:	08014671 	.word	0x08014671
 801781c:	08017573 	.word	0x08017573
 8017820:	0801c95c 	.word	0x0801c95c

08017824 <malloc>:
 8017824:	4b02      	ldr	r3, [pc, #8]	; (8017830 <malloc+0xc>)
 8017826:	4601      	mov	r1, r0
 8017828:	6818      	ldr	r0, [r3, #0]
 801782a:	f000 b823 	b.w	8017874 <_malloc_r>
 801782e:	bf00      	nop
 8017830:	200001ec 	.word	0x200001ec

08017834 <sbrk_aligned>:
 8017834:	b570      	push	{r4, r5, r6, lr}
 8017836:	4e0e      	ldr	r6, [pc, #56]	; (8017870 <sbrk_aligned+0x3c>)
 8017838:	460c      	mov	r4, r1
 801783a:	6831      	ldr	r1, [r6, #0]
 801783c:	4605      	mov	r5, r0
 801783e:	b911      	cbnz	r1, 8017846 <sbrk_aligned+0x12>
 8017840:	f000 fede 	bl	8018600 <_sbrk_r>
 8017844:	6030      	str	r0, [r6, #0]
 8017846:	4621      	mov	r1, r4
 8017848:	4628      	mov	r0, r5
 801784a:	f000 fed9 	bl	8018600 <_sbrk_r>
 801784e:	1c43      	adds	r3, r0, #1
 8017850:	d00a      	beq.n	8017868 <sbrk_aligned+0x34>
 8017852:	1cc4      	adds	r4, r0, #3
 8017854:	f024 0403 	bic.w	r4, r4, #3
 8017858:	42a0      	cmp	r0, r4
 801785a:	d007      	beq.n	801786c <sbrk_aligned+0x38>
 801785c:	1a21      	subs	r1, r4, r0
 801785e:	4628      	mov	r0, r5
 8017860:	f000 fece 	bl	8018600 <_sbrk_r>
 8017864:	3001      	adds	r0, #1
 8017866:	d101      	bne.n	801786c <sbrk_aligned+0x38>
 8017868:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801786c:	4620      	mov	r0, r4
 801786e:	bd70      	pop	{r4, r5, r6, pc}
 8017870:	200032b8 	.word	0x200032b8

08017874 <_malloc_r>:
 8017874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017878:	1ccd      	adds	r5, r1, #3
 801787a:	f025 0503 	bic.w	r5, r5, #3
 801787e:	3508      	adds	r5, #8
 8017880:	2d0c      	cmp	r5, #12
 8017882:	bf38      	it	cc
 8017884:	250c      	movcc	r5, #12
 8017886:	2d00      	cmp	r5, #0
 8017888:	4607      	mov	r7, r0
 801788a:	db01      	blt.n	8017890 <_malloc_r+0x1c>
 801788c:	42a9      	cmp	r1, r5
 801788e:	d905      	bls.n	801789c <_malloc_r+0x28>
 8017890:	230c      	movs	r3, #12
 8017892:	603b      	str	r3, [r7, #0]
 8017894:	2600      	movs	r6, #0
 8017896:	4630      	mov	r0, r6
 8017898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801789c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017970 <_malloc_r+0xfc>
 80178a0:	f000 f928 	bl	8017af4 <__malloc_lock>
 80178a4:	f8d8 3000 	ldr.w	r3, [r8]
 80178a8:	461c      	mov	r4, r3
 80178aa:	bb5c      	cbnz	r4, 8017904 <_malloc_r+0x90>
 80178ac:	4629      	mov	r1, r5
 80178ae:	4638      	mov	r0, r7
 80178b0:	f7ff ffc0 	bl	8017834 <sbrk_aligned>
 80178b4:	1c43      	adds	r3, r0, #1
 80178b6:	4604      	mov	r4, r0
 80178b8:	d155      	bne.n	8017966 <_malloc_r+0xf2>
 80178ba:	f8d8 4000 	ldr.w	r4, [r8]
 80178be:	4626      	mov	r6, r4
 80178c0:	2e00      	cmp	r6, #0
 80178c2:	d145      	bne.n	8017950 <_malloc_r+0xdc>
 80178c4:	2c00      	cmp	r4, #0
 80178c6:	d048      	beq.n	801795a <_malloc_r+0xe6>
 80178c8:	6823      	ldr	r3, [r4, #0]
 80178ca:	4631      	mov	r1, r6
 80178cc:	4638      	mov	r0, r7
 80178ce:	eb04 0903 	add.w	r9, r4, r3
 80178d2:	f000 fe95 	bl	8018600 <_sbrk_r>
 80178d6:	4581      	cmp	r9, r0
 80178d8:	d13f      	bne.n	801795a <_malloc_r+0xe6>
 80178da:	6821      	ldr	r1, [r4, #0]
 80178dc:	1a6d      	subs	r5, r5, r1
 80178de:	4629      	mov	r1, r5
 80178e0:	4638      	mov	r0, r7
 80178e2:	f7ff ffa7 	bl	8017834 <sbrk_aligned>
 80178e6:	3001      	adds	r0, #1
 80178e8:	d037      	beq.n	801795a <_malloc_r+0xe6>
 80178ea:	6823      	ldr	r3, [r4, #0]
 80178ec:	442b      	add	r3, r5
 80178ee:	6023      	str	r3, [r4, #0]
 80178f0:	f8d8 3000 	ldr.w	r3, [r8]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d038      	beq.n	801796a <_malloc_r+0xf6>
 80178f8:	685a      	ldr	r2, [r3, #4]
 80178fa:	42a2      	cmp	r2, r4
 80178fc:	d12b      	bne.n	8017956 <_malloc_r+0xe2>
 80178fe:	2200      	movs	r2, #0
 8017900:	605a      	str	r2, [r3, #4]
 8017902:	e00f      	b.n	8017924 <_malloc_r+0xb0>
 8017904:	6822      	ldr	r2, [r4, #0]
 8017906:	1b52      	subs	r2, r2, r5
 8017908:	d41f      	bmi.n	801794a <_malloc_r+0xd6>
 801790a:	2a0b      	cmp	r2, #11
 801790c:	d917      	bls.n	801793e <_malloc_r+0xca>
 801790e:	1961      	adds	r1, r4, r5
 8017910:	42a3      	cmp	r3, r4
 8017912:	6025      	str	r5, [r4, #0]
 8017914:	bf18      	it	ne
 8017916:	6059      	strne	r1, [r3, #4]
 8017918:	6863      	ldr	r3, [r4, #4]
 801791a:	bf08      	it	eq
 801791c:	f8c8 1000 	streq.w	r1, [r8]
 8017920:	5162      	str	r2, [r4, r5]
 8017922:	604b      	str	r3, [r1, #4]
 8017924:	4638      	mov	r0, r7
 8017926:	f104 060b 	add.w	r6, r4, #11
 801792a:	f000 f8e9 	bl	8017b00 <__malloc_unlock>
 801792e:	f026 0607 	bic.w	r6, r6, #7
 8017932:	1d23      	adds	r3, r4, #4
 8017934:	1af2      	subs	r2, r6, r3
 8017936:	d0ae      	beq.n	8017896 <_malloc_r+0x22>
 8017938:	1b9b      	subs	r3, r3, r6
 801793a:	50a3      	str	r3, [r4, r2]
 801793c:	e7ab      	b.n	8017896 <_malloc_r+0x22>
 801793e:	42a3      	cmp	r3, r4
 8017940:	6862      	ldr	r2, [r4, #4]
 8017942:	d1dd      	bne.n	8017900 <_malloc_r+0x8c>
 8017944:	f8c8 2000 	str.w	r2, [r8]
 8017948:	e7ec      	b.n	8017924 <_malloc_r+0xb0>
 801794a:	4623      	mov	r3, r4
 801794c:	6864      	ldr	r4, [r4, #4]
 801794e:	e7ac      	b.n	80178aa <_malloc_r+0x36>
 8017950:	4634      	mov	r4, r6
 8017952:	6876      	ldr	r6, [r6, #4]
 8017954:	e7b4      	b.n	80178c0 <_malloc_r+0x4c>
 8017956:	4613      	mov	r3, r2
 8017958:	e7cc      	b.n	80178f4 <_malloc_r+0x80>
 801795a:	230c      	movs	r3, #12
 801795c:	603b      	str	r3, [r7, #0]
 801795e:	4638      	mov	r0, r7
 8017960:	f000 f8ce 	bl	8017b00 <__malloc_unlock>
 8017964:	e797      	b.n	8017896 <_malloc_r+0x22>
 8017966:	6025      	str	r5, [r4, #0]
 8017968:	e7dc      	b.n	8017924 <_malloc_r+0xb0>
 801796a:	605b      	str	r3, [r3, #4]
 801796c:	deff      	udf	#255	; 0xff
 801796e:	bf00      	nop
 8017970:	200032b4 	.word	0x200032b4

08017974 <__ascii_mbtowc>:
 8017974:	b082      	sub	sp, #8
 8017976:	b901      	cbnz	r1, 801797a <__ascii_mbtowc+0x6>
 8017978:	a901      	add	r1, sp, #4
 801797a:	b142      	cbz	r2, 801798e <__ascii_mbtowc+0x1a>
 801797c:	b14b      	cbz	r3, 8017992 <__ascii_mbtowc+0x1e>
 801797e:	7813      	ldrb	r3, [r2, #0]
 8017980:	600b      	str	r3, [r1, #0]
 8017982:	7812      	ldrb	r2, [r2, #0]
 8017984:	1e10      	subs	r0, r2, #0
 8017986:	bf18      	it	ne
 8017988:	2001      	movne	r0, #1
 801798a:	b002      	add	sp, #8
 801798c:	4770      	bx	lr
 801798e:	4610      	mov	r0, r2
 8017990:	e7fb      	b.n	801798a <__ascii_mbtowc+0x16>
 8017992:	f06f 0001 	mvn.w	r0, #1
 8017996:	e7f8      	b.n	801798a <__ascii_mbtowc+0x16>

08017998 <__sflush_r>:
 8017998:	898a      	ldrh	r2, [r1, #12]
 801799a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801799e:	4605      	mov	r5, r0
 80179a0:	0710      	lsls	r0, r2, #28
 80179a2:	460c      	mov	r4, r1
 80179a4:	d458      	bmi.n	8017a58 <__sflush_r+0xc0>
 80179a6:	684b      	ldr	r3, [r1, #4]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	dc05      	bgt.n	80179b8 <__sflush_r+0x20>
 80179ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	dc02      	bgt.n	80179b8 <__sflush_r+0x20>
 80179b2:	2000      	movs	r0, #0
 80179b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80179ba:	2e00      	cmp	r6, #0
 80179bc:	d0f9      	beq.n	80179b2 <__sflush_r+0x1a>
 80179be:	2300      	movs	r3, #0
 80179c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80179c4:	682f      	ldr	r7, [r5, #0]
 80179c6:	6a21      	ldr	r1, [r4, #32]
 80179c8:	602b      	str	r3, [r5, #0]
 80179ca:	d032      	beq.n	8017a32 <__sflush_r+0x9a>
 80179cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80179ce:	89a3      	ldrh	r3, [r4, #12]
 80179d0:	075a      	lsls	r2, r3, #29
 80179d2:	d505      	bpl.n	80179e0 <__sflush_r+0x48>
 80179d4:	6863      	ldr	r3, [r4, #4]
 80179d6:	1ac0      	subs	r0, r0, r3
 80179d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80179da:	b10b      	cbz	r3, 80179e0 <__sflush_r+0x48>
 80179dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80179de:	1ac0      	subs	r0, r0, r3
 80179e0:	2300      	movs	r3, #0
 80179e2:	4602      	mov	r2, r0
 80179e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80179e6:	6a21      	ldr	r1, [r4, #32]
 80179e8:	4628      	mov	r0, r5
 80179ea:	47b0      	blx	r6
 80179ec:	1c43      	adds	r3, r0, #1
 80179ee:	89a3      	ldrh	r3, [r4, #12]
 80179f0:	d106      	bne.n	8017a00 <__sflush_r+0x68>
 80179f2:	6829      	ldr	r1, [r5, #0]
 80179f4:	291d      	cmp	r1, #29
 80179f6:	d82b      	bhi.n	8017a50 <__sflush_r+0xb8>
 80179f8:	4a29      	ldr	r2, [pc, #164]	; (8017aa0 <__sflush_r+0x108>)
 80179fa:	410a      	asrs	r2, r1
 80179fc:	07d6      	lsls	r6, r2, #31
 80179fe:	d427      	bmi.n	8017a50 <__sflush_r+0xb8>
 8017a00:	2200      	movs	r2, #0
 8017a02:	6062      	str	r2, [r4, #4]
 8017a04:	04d9      	lsls	r1, r3, #19
 8017a06:	6922      	ldr	r2, [r4, #16]
 8017a08:	6022      	str	r2, [r4, #0]
 8017a0a:	d504      	bpl.n	8017a16 <__sflush_r+0x7e>
 8017a0c:	1c42      	adds	r2, r0, #1
 8017a0e:	d101      	bne.n	8017a14 <__sflush_r+0x7c>
 8017a10:	682b      	ldr	r3, [r5, #0]
 8017a12:	b903      	cbnz	r3, 8017a16 <__sflush_r+0x7e>
 8017a14:	6560      	str	r0, [r4, #84]	; 0x54
 8017a16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a18:	602f      	str	r7, [r5, #0]
 8017a1a:	2900      	cmp	r1, #0
 8017a1c:	d0c9      	beq.n	80179b2 <__sflush_r+0x1a>
 8017a1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a22:	4299      	cmp	r1, r3
 8017a24:	d002      	beq.n	8017a2c <__sflush_r+0x94>
 8017a26:	4628      	mov	r0, r5
 8017a28:	f000 fe40 	bl	80186ac <_free_r>
 8017a2c:	2000      	movs	r0, #0
 8017a2e:	6360      	str	r0, [r4, #52]	; 0x34
 8017a30:	e7c0      	b.n	80179b4 <__sflush_r+0x1c>
 8017a32:	2301      	movs	r3, #1
 8017a34:	4628      	mov	r0, r5
 8017a36:	47b0      	blx	r6
 8017a38:	1c41      	adds	r1, r0, #1
 8017a3a:	d1c8      	bne.n	80179ce <__sflush_r+0x36>
 8017a3c:	682b      	ldr	r3, [r5, #0]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d0c5      	beq.n	80179ce <__sflush_r+0x36>
 8017a42:	2b1d      	cmp	r3, #29
 8017a44:	d001      	beq.n	8017a4a <__sflush_r+0xb2>
 8017a46:	2b16      	cmp	r3, #22
 8017a48:	d101      	bne.n	8017a4e <__sflush_r+0xb6>
 8017a4a:	602f      	str	r7, [r5, #0]
 8017a4c:	e7b1      	b.n	80179b2 <__sflush_r+0x1a>
 8017a4e:	89a3      	ldrh	r3, [r4, #12]
 8017a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a54:	81a3      	strh	r3, [r4, #12]
 8017a56:	e7ad      	b.n	80179b4 <__sflush_r+0x1c>
 8017a58:	690f      	ldr	r7, [r1, #16]
 8017a5a:	2f00      	cmp	r7, #0
 8017a5c:	d0a9      	beq.n	80179b2 <__sflush_r+0x1a>
 8017a5e:	0793      	lsls	r3, r2, #30
 8017a60:	680e      	ldr	r6, [r1, #0]
 8017a62:	bf08      	it	eq
 8017a64:	694b      	ldreq	r3, [r1, #20]
 8017a66:	600f      	str	r7, [r1, #0]
 8017a68:	bf18      	it	ne
 8017a6a:	2300      	movne	r3, #0
 8017a6c:	eba6 0807 	sub.w	r8, r6, r7
 8017a70:	608b      	str	r3, [r1, #8]
 8017a72:	f1b8 0f00 	cmp.w	r8, #0
 8017a76:	dd9c      	ble.n	80179b2 <__sflush_r+0x1a>
 8017a78:	6a21      	ldr	r1, [r4, #32]
 8017a7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017a7c:	4643      	mov	r3, r8
 8017a7e:	463a      	mov	r2, r7
 8017a80:	4628      	mov	r0, r5
 8017a82:	47b0      	blx	r6
 8017a84:	2800      	cmp	r0, #0
 8017a86:	dc06      	bgt.n	8017a96 <__sflush_r+0xfe>
 8017a88:	89a3      	ldrh	r3, [r4, #12]
 8017a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a8e:	81a3      	strh	r3, [r4, #12]
 8017a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a94:	e78e      	b.n	80179b4 <__sflush_r+0x1c>
 8017a96:	4407      	add	r7, r0
 8017a98:	eba8 0800 	sub.w	r8, r8, r0
 8017a9c:	e7e9      	b.n	8017a72 <__sflush_r+0xda>
 8017a9e:	bf00      	nop
 8017aa0:	dfbffffe 	.word	0xdfbffffe

08017aa4 <_fflush_r>:
 8017aa4:	b538      	push	{r3, r4, r5, lr}
 8017aa6:	690b      	ldr	r3, [r1, #16]
 8017aa8:	4605      	mov	r5, r0
 8017aaa:	460c      	mov	r4, r1
 8017aac:	b913      	cbnz	r3, 8017ab4 <_fflush_r+0x10>
 8017aae:	2500      	movs	r5, #0
 8017ab0:	4628      	mov	r0, r5
 8017ab2:	bd38      	pop	{r3, r4, r5, pc}
 8017ab4:	b118      	cbz	r0, 8017abe <_fflush_r+0x1a>
 8017ab6:	6a03      	ldr	r3, [r0, #32]
 8017ab8:	b90b      	cbnz	r3, 8017abe <_fflush_r+0x1a>
 8017aba:	f7fd fc49 	bl	8015350 <__sinit>
 8017abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d0f3      	beq.n	8017aae <_fflush_r+0xa>
 8017ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017ac8:	07d0      	lsls	r0, r2, #31
 8017aca:	d404      	bmi.n	8017ad6 <_fflush_r+0x32>
 8017acc:	0599      	lsls	r1, r3, #22
 8017ace:	d402      	bmi.n	8017ad6 <_fflush_r+0x32>
 8017ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ad2:	f7fe fb5b 	bl	801618c <__retarget_lock_acquire_recursive>
 8017ad6:	4628      	mov	r0, r5
 8017ad8:	4621      	mov	r1, r4
 8017ada:	f7ff ff5d 	bl	8017998 <__sflush_r>
 8017ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017ae0:	07da      	lsls	r2, r3, #31
 8017ae2:	4605      	mov	r5, r0
 8017ae4:	d4e4      	bmi.n	8017ab0 <_fflush_r+0xc>
 8017ae6:	89a3      	ldrh	r3, [r4, #12]
 8017ae8:	059b      	lsls	r3, r3, #22
 8017aea:	d4e1      	bmi.n	8017ab0 <_fflush_r+0xc>
 8017aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017aee:	f7fe fb4e 	bl	801618e <__retarget_lock_release_recursive>
 8017af2:	e7dd      	b.n	8017ab0 <_fflush_r+0xc>

08017af4 <__malloc_lock>:
 8017af4:	4801      	ldr	r0, [pc, #4]	; (8017afc <__malloc_lock+0x8>)
 8017af6:	f7fe bb49 	b.w	801618c <__retarget_lock_acquire_recursive>
 8017afa:	bf00      	nop
 8017afc:	200032b0 	.word	0x200032b0

08017b00 <__malloc_unlock>:
 8017b00:	4801      	ldr	r0, [pc, #4]	; (8017b08 <__malloc_unlock+0x8>)
 8017b02:	f7fe bb44 	b.w	801618e <__retarget_lock_release_recursive>
 8017b06:	bf00      	nop
 8017b08:	200032b0 	.word	0x200032b0

08017b0c <_Balloc>:
 8017b0c:	b570      	push	{r4, r5, r6, lr}
 8017b0e:	69c6      	ldr	r6, [r0, #28]
 8017b10:	4604      	mov	r4, r0
 8017b12:	460d      	mov	r5, r1
 8017b14:	b976      	cbnz	r6, 8017b34 <_Balloc+0x28>
 8017b16:	2010      	movs	r0, #16
 8017b18:	f7ff fe84 	bl	8017824 <malloc>
 8017b1c:	4602      	mov	r2, r0
 8017b1e:	61e0      	str	r0, [r4, #28]
 8017b20:	b920      	cbnz	r0, 8017b2c <_Balloc+0x20>
 8017b22:	4b18      	ldr	r3, [pc, #96]	; (8017b84 <_Balloc+0x78>)
 8017b24:	4818      	ldr	r0, [pc, #96]	; (8017b88 <_Balloc+0x7c>)
 8017b26:	216b      	movs	r1, #107	; 0x6b
 8017b28:	f000 fd8c 	bl	8018644 <__assert_func>
 8017b2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017b30:	6006      	str	r6, [r0, #0]
 8017b32:	60c6      	str	r6, [r0, #12]
 8017b34:	69e6      	ldr	r6, [r4, #28]
 8017b36:	68f3      	ldr	r3, [r6, #12]
 8017b38:	b183      	cbz	r3, 8017b5c <_Balloc+0x50>
 8017b3a:	69e3      	ldr	r3, [r4, #28]
 8017b3c:	68db      	ldr	r3, [r3, #12]
 8017b3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017b42:	b9b8      	cbnz	r0, 8017b74 <_Balloc+0x68>
 8017b44:	2101      	movs	r1, #1
 8017b46:	fa01 f605 	lsl.w	r6, r1, r5
 8017b4a:	1d72      	adds	r2, r6, #5
 8017b4c:	0092      	lsls	r2, r2, #2
 8017b4e:	4620      	mov	r0, r4
 8017b50:	f000 fd96 	bl	8018680 <_calloc_r>
 8017b54:	b160      	cbz	r0, 8017b70 <_Balloc+0x64>
 8017b56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017b5a:	e00e      	b.n	8017b7a <_Balloc+0x6e>
 8017b5c:	2221      	movs	r2, #33	; 0x21
 8017b5e:	2104      	movs	r1, #4
 8017b60:	4620      	mov	r0, r4
 8017b62:	f000 fd8d 	bl	8018680 <_calloc_r>
 8017b66:	69e3      	ldr	r3, [r4, #28]
 8017b68:	60f0      	str	r0, [r6, #12]
 8017b6a:	68db      	ldr	r3, [r3, #12]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d1e4      	bne.n	8017b3a <_Balloc+0x2e>
 8017b70:	2000      	movs	r0, #0
 8017b72:	bd70      	pop	{r4, r5, r6, pc}
 8017b74:	6802      	ldr	r2, [r0, #0]
 8017b76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017b80:	e7f7      	b.n	8017b72 <_Balloc+0x66>
 8017b82:	bf00      	nop
 8017b84:	0801c876 	.word	0x0801c876
 8017b88:	0801c967 	.word	0x0801c967

08017b8c <_Bfree>:
 8017b8c:	b570      	push	{r4, r5, r6, lr}
 8017b8e:	69c6      	ldr	r6, [r0, #28]
 8017b90:	4605      	mov	r5, r0
 8017b92:	460c      	mov	r4, r1
 8017b94:	b976      	cbnz	r6, 8017bb4 <_Bfree+0x28>
 8017b96:	2010      	movs	r0, #16
 8017b98:	f7ff fe44 	bl	8017824 <malloc>
 8017b9c:	4602      	mov	r2, r0
 8017b9e:	61e8      	str	r0, [r5, #28]
 8017ba0:	b920      	cbnz	r0, 8017bac <_Bfree+0x20>
 8017ba2:	4b09      	ldr	r3, [pc, #36]	; (8017bc8 <_Bfree+0x3c>)
 8017ba4:	4809      	ldr	r0, [pc, #36]	; (8017bcc <_Bfree+0x40>)
 8017ba6:	218f      	movs	r1, #143	; 0x8f
 8017ba8:	f000 fd4c 	bl	8018644 <__assert_func>
 8017bac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017bb0:	6006      	str	r6, [r0, #0]
 8017bb2:	60c6      	str	r6, [r0, #12]
 8017bb4:	b13c      	cbz	r4, 8017bc6 <_Bfree+0x3a>
 8017bb6:	69eb      	ldr	r3, [r5, #28]
 8017bb8:	6862      	ldr	r2, [r4, #4]
 8017bba:	68db      	ldr	r3, [r3, #12]
 8017bbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017bc0:	6021      	str	r1, [r4, #0]
 8017bc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017bc6:	bd70      	pop	{r4, r5, r6, pc}
 8017bc8:	0801c876 	.word	0x0801c876
 8017bcc:	0801c967 	.word	0x0801c967

08017bd0 <__multadd>:
 8017bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bd4:	690d      	ldr	r5, [r1, #16]
 8017bd6:	4607      	mov	r7, r0
 8017bd8:	460c      	mov	r4, r1
 8017bda:	461e      	mov	r6, r3
 8017bdc:	f101 0c14 	add.w	ip, r1, #20
 8017be0:	2000      	movs	r0, #0
 8017be2:	f8dc 3000 	ldr.w	r3, [ip]
 8017be6:	b299      	uxth	r1, r3
 8017be8:	fb02 6101 	mla	r1, r2, r1, r6
 8017bec:	0c1e      	lsrs	r6, r3, #16
 8017bee:	0c0b      	lsrs	r3, r1, #16
 8017bf0:	fb02 3306 	mla	r3, r2, r6, r3
 8017bf4:	b289      	uxth	r1, r1
 8017bf6:	3001      	adds	r0, #1
 8017bf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017bfc:	4285      	cmp	r5, r0
 8017bfe:	f84c 1b04 	str.w	r1, [ip], #4
 8017c02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017c06:	dcec      	bgt.n	8017be2 <__multadd+0x12>
 8017c08:	b30e      	cbz	r6, 8017c4e <__multadd+0x7e>
 8017c0a:	68a3      	ldr	r3, [r4, #8]
 8017c0c:	42ab      	cmp	r3, r5
 8017c0e:	dc19      	bgt.n	8017c44 <__multadd+0x74>
 8017c10:	6861      	ldr	r1, [r4, #4]
 8017c12:	4638      	mov	r0, r7
 8017c14:	3101      	adds	r1, #1
 8017c16:	f7ff ff79 	bl	8017b0c <_Balloc>
 8017c1a:	4680      	mov	r8, r0
 8017c1c:	b928      	cbnz	r0, 8017c2a <__multadd+0x5a>
 8017c1e:	4602      	mov	r2, r0
 8017c20:	4b0c      	ldr	r3, [pc, #48]	; (8017c54 <__multadd+0x84>)
 8017c22:	480d      	ldr	r0, [pc, #52]	; (8017c58 <__multadd+0x88>)
 8017c24:	21ba      	movs	r1, #186	; 0xba
 8017c26:	f000 fd0d 	bl	8018644 <__assert_func>
 8017c2a:	6922      	ldr	r2, [r4, #16]
 8017c2c:	3202      	adds	r2, #2
 8017c2e:	f104 010c 	add.w	r1, r4, #12
 8017c32:	0092      	lsls	r2, r2, #2
 8017c34:	300c      	adds	r0, #12
 8017c36:	f7fe faab 	bl	8016190 <memcpy>
 8017c3a:	4621      	mov	r1, r4
 8017c3c:	4638      	mov	r0, r7
 8017c3e:	f7ff ffa5 	bl	8017b8c <_Bfree>
 8017c42:	4644      	mov	r4, r8
 8017c44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017c48:	3501      	adds	r5, #1
 8017c4a:	615e      	str	r6, [r3, #20]
 8017c4c:	6125      	str	r5, [r4, #16]
 8017c4e:	4620      	mov	r0, r4
 8017c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c54:	0801c8e5 	.word	0x0801c8e5
 8017c58:	0801c967 	.word	0x0801c967

08017c5c <__s2b>:
 8017c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c60:	460c      	mov	r4, r1
 8017c62:	4615      	mov	r5, r2
 8017c64:	461f      	mov	r7, r3
 8017c66:	2209      	movs	r2, #9
 8017c68:	3308      	adds	r3, #8
 8017c6a:	4606      	mov	r6, r0
 8017c6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8017c70:	2100      	movs	r1, #0
 8017c72:	2201      	movs	r2, #1
 8017c74:	429a      	cmp	r2, r3
 8017c76:	db09      	blt.n	8017c8c <__s2b+0x30>
 8017c78:	4630      	mov	r0, r6
 8017c7a:	f7ff ff47 	bl	8017b0c <_Balloc>
 8017c7e:	b940      	cbnz	r0, 8017c92 <__s2b+0x36>
 8017c80:	4602      	mov	r2, r0
 8017c82:	4b19      	ldr	r3, [pc, #100]	; (8017ce8 <__s2b+0x8c>)
 8017c84:	4819      	ldr	r0, [pc, #100]	; (8017cec <__s2b+0x90>)
 8017c86:	21d3      	movs	r1, #211	; 0xd3
 8017c88:	f000 fcdc 	bl	8018644 <__assert_func>
 8017c8c:	0052      	lsls	r2, r2, #1
 8017c8e:	3101      	adds	r1, #1
 8017c90:	e7f0      	b.n	8017c74 <__s2b+0x18>
 8017c92:	9b08      	ldr	r3, [sp, #32]
 8017c94:	6143      	str	r3, [r0, #20]
 8017c96:	2d09      	cmp	r5, #9
 8017c98:	f04f 0301 	mov.w	r3, #1
 8017c9c:	6103      	str	r3, [r0, #16]
 8017c9e:	dd16      	ble.n	8017cce <__s2b+0x72>
 8017ca0:	f104 0909 	add.w	r9, r4, #9
 8017ca4:	46c8      	mov	r8, r9
 8017ca6:	442c      	add	r4, r5
 8017ca8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017cac:	4601      	mov	r1, r0
 8017cae:	3b30      	subs	r3, #48	; 0x30
 8017cb0:	220a      	movs	r2, #10
 8017cb2:	4630      	mov	r0, r6
 8017cb4:	f7ff ff8c 	bl	8017bd0 <__multadd>
 8017cb8:	45a0      	cmp	r8, r4
 8017cba:	d1f5      	bne.n	8017ca8 <__s2b+0x4c>
 8017cbc:	f1a5 0408 	sub.w	r4, r5, #8
 8017cc0:	444c      	add	r4, r9
 8017cc2:	1b2d      	subs	r5, r5, r4
 8017cc4:	1963      	adds	r3, r4, r5
 8017cc6:	42bb      	cmp	r3, r7
 8017cc8:	db04      	blt.n	8017cd4 <__s2b+0x78>
 8017cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cce:	340a      	adds	r4, #10
 8017cd0:	2509      	movs	r5, #9
 8017cd2:	e7f6      	b.n	8017cc2 <__s2b+0x66>
 8017cd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017cd8:	4601      	mov	r1, r0
 8017cda:	3b30      	subs	r3, #48	; 0x30
 8017cdc:	220a      	movs	r2, #10
 8017cde:	4630      	mov	r0, r6
 8017ce0:	f7ff ff76 	bl	8017bd0 <__multadd>
 8017ce4:	e7ee      	b.n	8017cc4 <__s2b+0x68>
 8017ce6:	bf00      	nop
 8017ce8:	0801c8e5 	.word	0x0801c8e5
 8017cec:	0801c967 	.word	0x0801c967

08017cf0 <__hi0bits>:
 8017cf0:	0c03      	lsrs	r3, r0, #16
 8017cf2:	041b      	lsls	r3, r3, #16
 8017cf4:	b9d3      	cbnz	r3, 8017d2c <__hi0bits+0x3c>
 8017cf6:	0400      	lsls	r0, r0, #16
 8017cf8:	2310      	movs	r3, #16
 8017cfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017cfe:	bf04      	itt	eq
 8017d00:	0200      	lsleq	r0, r0, #8
 8017d02:	3308      	addeq	r3, #8
 8017d04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017d08:	bf04      	itt	eq
 8017d0a:	0100      	lsleq	r0, r0, #4
 8017d0c:	3304      	addeq	r3, #4
 8017d0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017d12:	bf04      	itt	eq
 8017d14:	0080      	lsleq	r0, r0, #2
 8017d16:	3302      	addeq	r3, #2
 8017d18:	2800      	cmp	r0, #0
 8017d1a:	db05      	blt.n	8017d28 <__hi0bits+0x38>
 8017d1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017d20:	f103 0301 	add.w	r3, r3, #1
 8017d24:	bf08      	it	eq
 8017d26:	2320      	moveq	r3, #32
 8017d28:	4618      	mov	r0, r3
 8017d2a:	4770      	bx	lr
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	e7e4      	b.n	8017cfa <__hi0bits+0xa>

08017d30 <__lo0bits>:
 8017d30:	6803      	ldr	r3, [r0, #0]
 8017d32:	f013 0207 	ands.w	r2, r3, #7
 8017d36:	d00c      	beq.n	8017d52 <__lo0bits+0x22>
 8017d38:	07d9      	lsls	r1, r3, #31
 8017d3a:	d422      	bmi.n	8017d82 <__lo0bits+0x52>
 8017d3c:	079a      	lsls	r2, r3, #30
 8017d3e:	bf49      	itett	mi
 8017d40:	085b      	lsrmi	r3, r3, #1
 8017d42:	089b      	lsrpl	r3, r3, #2
 8017d44:	6003      	strmi	r3, [r0, #0]
 8017d46:	2201      	movmi	r2, #1
 8017d48:	bf5c      	itt	pl
 8017d4a:	6003      	strpl	r3, [r0, #0]
 8017d4c:	2202      	movpl	r2, #2
 8017d4e:	4610      	mov	r0, r2
 8017d50:	4770      	bx	lr
 8017d52:	b299      	uxth	r1, r3
 8017d54:	b909      	cbnz	r1, 8017d5a <__lo0bits+0x2a>
 8017d56:	0c1b      	lsrs	r3, r3, #16
 8017d58:	2210      	movs	r2, #16
 8017d5a:	b2d9      	uxtb	r1, r3
 8017d5c:	b909      	cbnz	r1, 8017d62 <__lo0bits+0x32>
 8017d5e:	3208      	adds	r2, #8
 8017d60:	0a1b      	lsrs	r3, r3, #8
 8017d62:	0719      	lsls	r1, r3, #28
 8017d64:	bf04      	itt	eq
 8017d66:	091b      	lsreq	r3, r3, #4
 8017d68:	3204      	addeq	r2, #4
 8017d6a:	0799      	lsls	r1, r3, #30
 8017d6c:	bf04      	itt	eq
 8017d6e:	089b      	lsreq	r3, r3, #2
 8017d70:	3202      	addeq	r2, #2
 8017d72:	07d9      	lsls	r1, r3, #31
 8017d74:	d403      	bmi.n	8017d7e <__lo0bits+0x4e>
 8017d76:	085b      	lsrs	r3, r3, #1
 8017d78:	f102 0201 	add.w	r2, r2, #1
 8017d7c:	d003      	beq.n	8017d86 <__lo0bits+0x56>
 8017d7e:	6003      	str	r3, [r0, #0]
 8017d80:	e7e5      	b.n	8017d4e <__lo0bits+0x1e>
 8017d82:	2200      	movs	r2, #0
 8017d84:	e7e3      	b.n	8017d4e <__lo0bits+0x1e>
 8017d86:	2220      	movs	r2, #32
 8017d88:	e7e1      	b.n	8017d4e <__lo0bits+0x1e>
	...

08017d8c <__i2b>:
 8017d8c:	b510      	push	{r4, lr}
 8017d8e:	460c      	mov	r4, r1
 8017d90:	2101      	movs	r1, #1
 8017d92:	f7ff febb 	bl	8017b0c <_Balloc>
 8017d96:	4602      	mov	r2, r0
 8017d98:	b928      	cbnz	r0, 8017da6 <__i2b+0x1a>
 8017d9a:	4b05      	ldr	r3, [pc, #20]	; (8017db0 <__i2b+0x24>)
 8017d9c:	4805      	ldr	r0, [pc, #20]	; (8017db4 <__i2b+0x28>)
 8017d9e:	f240 1145 	movw	r1, #325	; 0x145
 8017da2:	f000 fc4f 	bl	8018644 <__assert_func>
 8017da6:	2301      	movs	r3, #1
 8017da8:	6144      	str	r4, [r0, #20]
 8017daa:	6103      	str	r3, [r0, #16]
 8017dac:	bd10      	pop	{r4, pc}
 8017dae:	bf00      	nop
 8017db0:	0801c8e5 	.word	0x0801c8e5
 8017db4:	0801c967 	.word	0x0801c967

08017db8 <__multiply>:
 8017db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dbc:	4691      	mov	r9, r2
 8017dbe:	690a      	ldr	r2, [r1, #16]
 8017dc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017dc4:	429a      	cmp	r2, r3
 8017dc6:	bfb8      	it	lt
 8017dc8:	460b      	movlt	r3, r1
 8017dca:	460c      	mov	r4, r1
 8017dcc:	bfbc      	itt	lt
 8017dce:	464c      	movlt	r4, r9
 8017dd0:	4699      	movlt	r9, r3
 8017dd2:	6927      	ldr	r7, [r4, #16]
 8017dd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017dd8:	68a3      	ldr	r3, [r4, #8]
 8017dda:	6861      	ldr	r1, [r4, #4]
 8017ddc:	eb07 060a 	add.w	r6, r7, sl
 8017de0:	42b3      	cmp	r3, r6
 8017de2:	b085      	sub	sp, #20
 8017de4:	bfb8      	it	lt
 8017de6:	3101      	addlt	r1, #1
 8017de8:	f7ff fe90 	bl	8017b0c <_Balloc>
 8017dec:	b930      	cbnz	r0, 8017dfc <__multiply+0x44>
 8017dee:	4602      	mov	r2, r0
 8017df0:	4b44      	ldr	r3, [pc, #272]	; (8017f04 <__multiply+0x14c>)
 8017df2:	4845      	ldr	r0, [pc, #276]	; (8017f08 <__multiply+0x150>)
 8017df4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8017df8:	f000 fc24 	bl	8018644 <__assert_func>
 8017dfc:	f100 0514 	add.w	r5, r0, #20
 8017e00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017e04:	462b      	mov	r3, r5
 8017e06:	2200      	movs	r2, #0
 8017e08:	4543      	cmp	r3, r8
 8017e0a:	d321      	bcc.n	8017e50 <__multiply+0x98>
 8017e0c:	f104 0314 	add.w	r3, r4, #20
 8017e10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017e14:	f109 0314 	add.w	r3, r9, #20
 8017e18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017e1c:	9202      	str	r2, [sp, #8]
 8017e1e:	1b3a      	subs	r2, r7, r4
 8017e20:	3a15      	subs	r2, #21
 8017e22:	f022 0203 	bic.w	r2, r2, #3
 8017e26:	3204      	adds	r2, #4
 8017e28:	f104 0115 	add.w	r1, r4, #21
 8017e2c:	428f      	cmp	r7, r1
 8017e2e:	bf38      	it	cc
 8017e30:	2204      	movcc	r2, #4
 8017e32:	9201      	str	r2, [sp, #4]
 8017e34:	9a02      	ldr	r2, [sp, #8]
 8017e36:	9303      	str	r3, [sp, #12]
 8017e38:	429a      	cmp	r2, r3
 8017e3a:	d80c      	bhi.n	8017e56 <__multiply+0x9e>
 8017e3c:	2e00      	cmp	r6, #0
 8017e3e:	dd03      	ble.n	8017e48 <__multiply+0x90>
 8017e40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d05b      	beq.n	8017f00 <__multiply+0x148>
 8017e48:	6106      	str	r6, [r0, #16]
 8017e4a:	b005      	add	sp, #20
 8017e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e50:	f843 2b04 	str.w	r2, [r3], #4
 8017e54:	e7d8      	b.n	8017e08 <__multiply+0x50>
 8017e56:	f8b3 a000 	ldrh.w	sl, [r3]
 8017e5a:	f1ba 0f00 	cmp.w	sl, #0
 8017e5e:	d024      	beq.n	8017eaa <__multiply+0xf2>
 8017e60:	f104 0e14 	add.w	lr, r4, #20
 8017e64:	46a9      	mov	r9, r5
 8017e66:	f04f 0c00 	mov.w	ip, #0
 8017e6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017e6e:	f8d9 1000 	ldr.w	r1, [r9]
 8017e72:	fa1f fb82 	uxth.w	fp, r2
 8017e76:	b289      	uxth	r1, r1
 8017e78:	fb0a 110b 	mla	r1, sl, fp, r1
 8017e7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017e80:	f8d9 2000 	ldr.w	r2, [r9]
 8017e84:	4461      	add	r1, ip
 8017e86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017e8a:	fb0a c20b 	mla	r2, sl, fp, ip
 8017e8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017e92:	b289      	uxth	r1, r1
 8017e94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017e98:	4577      	cmp	r7, lr
 8017e9a:	f849 1b04 	str.w	r1, [r9], #4
 8017e9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017ea2:	d8e2      	bhi.n	8017e6a <__multiply+0xb2>
 8017ea4:	9a01      	ldr	r2, [sp, #4]
 8017ea6:	f845 c002 	str.w	ip, [r5, r2]
 8017eaa:	9a03      	ldr	r2, [sp, #12]
 8017eac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017eb0:	3304      	adds	r3, #4
 8017eb2:	f1b9 0f00 	cmp.w	r9, #0
 8017eb6:	d021      	beq.n	8017efc <__multiply+0x144>
 8017eb8:	6829      	ldr	r1, [r5, #0]
 8017eba:	f104 0c14 	add.w	ip, r4, #20
 8017ebe:	46ae      	mov	lr, r5
 8017ec0:	f04f 0a00 	mov.w	sl, #0
 8017ec4:	f8bc b000 	ldrh.w	fp, [ip]
 8017ec8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017ecc:	fb09 220b 	mla	r2, r9, fp, r2
 8017ed0:	4452      	add	r2, sl
 8017ed2:	b289      	uxth	r1, r1
 8017ed4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017ed8:	f84e 1b04 	str.w	r1, [lr], #4
 8017edc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017ee0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017ee4:	f8be 1000 	ldrh.w	r1, [lr]
 8017ee8:	fb09 110a 	mla	r1, r9, sl, r1
 8017eec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8017ef0:	4567      	cmp	r7, ip
 8017ef2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017ef6:	d8e5      	bhi.n	8017ec4 <__multiply+0x10c>
 8017ef8:	9a01      	ldr	r2, [sp, #4]
 8017efa:	50a9      	str	r1, [r5, r2]
 8017efc:	3504      	adds	r5, #4
 8017efe:	e799      	b.n	8017e34 <__multiply+0x7c>
 8017f00:	3e01      	subs	r6, #1
 8017f02:	e79b      	b.n	8017e3c <__multiply+0x84>
 8017f04:	0801c8e5 	.word	0x0801c8e5
 8017f08:	0801c967 	.word	0x0801c967

08017f0c <__pow5mult>:
 8017f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f10:	4615      	mov	r5, r2
 8017f12:	f012 0203 	ands.w	r2, r2, #3
 8017f16:	4606      	mov	r6, r0
 8017f18:	460f      	mov	r7, r1
 8017f1a:	d007      	beq.n	8017f2c <__pow5mult+0x20>
 8017f1c:	4c25      	ldr	r4, [pc, #148]	; (8017fb4 <__pow5mult+0xa8>)
 8017f1e:	3a01      	subs	r2, #1
 8017f20:	2300      	movs	r3, #0
 8017f22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017f26:	f7ff fe53 	bl	8017bd0 <__multadd>
 8017f2a:	4607      	mov	r7, r0
 8017f2c:	10ad      	asrs	r5, r5, #2
 8017f2e:	d03d      	beq.n	8017fac <__pow5mult+0xa0>
 8017f30:	69f4      	ldr	r4, [r6, #28]
 8017f32:	b97c      	cbnz	r4, 8017f54 <__pow5mult+0x48>
 8017f34:	2010      	movs	r0, #16
 8017f36:	f7ff fc75 	bl	8017824 <malloc>
 8017f3a:	4602      	mov	r2, r0
 8017f3c:	61f0      	str	r0, [r6, #28]
 8017f3e:	b928      	cbnz	r0, 8017f4c <__pow5mult+0x40>
 8017f40:	4b1d      	ldr	r3, [pc, #116]	; (8017fb8 <__pow5mult+0xac>)
 8017f42:	481e      	ldr	r0, [pc, #120]	; (8017fbc <__pow5mult+0xb0>)
 8017f44:	f240 11b3 	movw	r1, #435	; 0x1b3
 8017f48:	f000 fb7c 	bl	8018644 <__assert_func>
 8017f4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017f50:	6004      	str	r4, [r0, #0]
 8017f52:	60c4      	str	r4, [r0, #12]
 8017f54:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8017f58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017f5c:	b94c      	cbnz	r4, 8017f72 <__pow5mult+0x66>
 8017f5e:	f240 2171 	movw	r1, #625	; 0x271
 8017f62:	4630      	mov	r0, r6
 8017f64:	f7ff ff12 	bl	8017d8c <__i2b>
 8017f68:	2300      	movs	r3, #0
 8017f6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8017f6e:	4604      	mov	r4, r0
 8017f70:	6003      	str	r3, [r0, #0]
 8017f72:	f04f 0900 	mov.w	r9, #0
 8017f76:	07eb      	lsls	r3, r5, #31
 8017f78:	d50a      	bpl.n	8017f90 <__pow5mult+0x84>
 8017f7a:	4639      	mov	r1, r7
 8017f7c:	4622      	mov	r2, r4
 8017f7e:	4630      	mov	r0, r6
 8017f80:	f7ff ff1a 	bl	8017db8 <__multiply>
 8017f84:	4639      	mov	r1, r7
 8017f86:	4680      	mov	r8, r0
 8017f88:	4630      	mov	r0, r6
 8017f8a:	f7ff fdff 	bl	8017b8c <_Bfree>
 8017f8e:	4647      	mov	r7, r8
 8017f90:	106d      	asrs	r5, r5, #1
 8017f92:	d00b      	beq.n	8017fac <__pow5mult+0xa0>
 8017f94:	6820      	ldr	r0, [r4, #0]
 8017f96:	b938      	cbnz	r0, 8017fa8 <__pow5mult+0x9c>
 8017f98:	4622      	mov	r2, r4
 8017f9a:	4621      	mov	r1, r4
 8017f9c:	4630      	mov	r0, r6
 8017f9e:	f7ff ff0b 	bl	8017db8 <__multiply>
 8017fa2:	6020      	str	r0, [r4, #0]
 8017fa4:	f8c0 9000 	str.w	r9, [r0]
 8017fa8:	4604      	mov	r4, r0
 8017faa:	e7e4      	b.n	8017f76 <__pow5mult+0x6a>
 8017fac:	4638      	mov	r0, r7
 8017fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017fb2:	bf00      	nop
 8017fb4:	0801cab0 	.word	0x0801cab0
 8017fb8:	0801c876 	.word	0x0801c876
 8017fbc:	0801c967 	.word	0x0801c967

08017fc0 <__lshift>:
 8017fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fc4:	460c      	mov	r4, r1
 8017fc6:	6849      	ldr	r1, [r1, #4]
 8017fc8:	6923      	ldr	r3, [r4, #16]
 8017fca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017fce:	68a3      	ldr	r3, [r4, #8]
 8017fd0:	4607      	mov	r7, r0
 8017fd2:	4691      	mov	r9, r2
 8017fd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017fd8:	f108 0601 	add.w	r6, r8, #1
 8017fdc:	42b3      	cmp	r3, r6
 8017fde:	db0b      	blt.n	8017ff8 <__lshift+0x38>
 8017fe0:	4638      	mov	r0, r7
 8017fe2:	f7ff fd93 	bl	8017b0c <_Balloc>
 8017fe6:	4605      	mov	r5, r0
 8017fe8:	b948      	cbnz	r0, 8017ffe <__lshift+0x3e>
 8017fea:	4602      	mov	r2, r0
 8017fec:	4b28      	ldr	r3, [pc, #160]	; (8018090 <__lshift+0xd0>)
 8017fee:	4829      	ldr	r0, [pc, #164]	; (8018094 <__lshift+0xd4>)
 8017ff0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8017ff4:	f000 fb26 	bl	8018644 <__assert_func>
 8017ff8:	3101      	adds	r1, #1
 8017ffa:	005b      	lsls	r3, r3, #1
 8017ffc:	e7ee      	b.n	8017fdc <__lshift+0x1c>
 8017ffe:	2300      	movs	r3, #0
 8018000:	f100 0114 	add.w	r1, r0, #20
 8018004:	f100 0210 	add.w	r2, r0, #16
 8018008:	4618      	mov	r0, r3
 801800a:	4553      	cmp	r3, sl
 801800c:	db33      	blt.n	8018076 <__lshift+0xb6>
 801800e:	6920      	ldr	r0, [r4, #16]
 8018010:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018014:	f104 0314 	add.w	r3, r4, #20
 8018018:	f019 091f 	ands.w	r9, r9, #31
 801801c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018020:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018024:	d02b      	beq.n	801807e <__lshift+0xbe>
 8018026:	f1c9 0e20 	rsb	lr, r9, #32
 801802a:	468a      	mov	sl, r1
 801802c:	2200      	movs	r2, #0
 801802e:	6818      	ldr	r0, [r3, #0]
 8018030:	fa00 f009 	lsl.w	r0, r0, r9
 8018034:	4310      	orrs	r0, r2
 8018036:	f84a 0b04 	str.w	r0, [sl], #4
 801803a:	f853 2b04 	ldr.w	r2, [r3], #4
 801803e:	459c      	cmp	ip, r3
 8018040:	fa22 f20e 	lsr.w	r2, r2, lr
 8018044:	d8f3      	bhi.n	801802e <__lshift+0x6e>
 8018046:	ebac 0304 	sub.w	r3, ip, r4
 801804a:	3b15      	subs	r3, #21
 801804c:	f023 0303 	bic.w	r3, r3, #3
 8018050:	3304      	adds	r3, #4
 8018052:	f104 0015 	add.w	r0, r4, #21
 8018056:	4584      	cmp	ip, r0
 8018058:	bf38      	it	cc
 801805a:	2304      	movcc	r3, #4
 801805c:	50ca      	str	r2, [r1, r3]
 801805e:	b10a      	cbz	r2, 8018064 <__lshift+0xa4>
 8018060:	f108 0602 	add.w	r6, r8, #2
 8018064:	3e01      	subs	r6, #1
 8018066:	4638      	mov	r0, r7
 8018068:	612e      	str	r6, [r5, #16]
 801806a:	4621      	mov	r1, r4
 801806c:	f7ff fd8e 	bl	8017b8c <_Bfree>
 8018070:	4628      	mov	r0, r5
 8018072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018076:	f842 0f04 	str.w	r0, [r2, #4]!
 801807a:	3301      	adds	r3, #1
 801807c:	e7c5      	b.n	801800a <__lshift+0x4a>
 801807e:	3904      	subs	r1, #4
 8018080:	f853 2b04 	ldr.w	r2, [r3], #4
 8018084:	f841 2f04 	str.w	r2, [r1, #4]!
 8018088:	459c      	cmp	ip, r3
 801808a:	d8f9      	bhi.n	8018080 <__lshift+0xc0>
 801808c:	e7ea      	b.n	8018064 <__lshift+0xa4>
 801808e:	bf00      	nop
 8018090:	0801c8e5 	.word	0x0801c8e5
 8018094:	0801c967 	.word	0x0801c967

08018098 <__mcmp>:
 8018098:	b530      	push	{r4, r5, lr}
 801809a:	6902      	ldr	r2, [r0, #16]
 801809c:	690c      	ldr	r4, [r1, #16]
 801809e:	1b12      	subs	r2, r2, r4
 80180a0:	d10e      	bne.n	80180c0 <__mcmp+0x28>
 80180a2:	f100 0314 	add.w	r3, r0, #20
 80180a6:	3114      	adds	r1, #20
 80180a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80180ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80180b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80180b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80180b8:	42a5      	cmp	r5, r4
 80180ba:	d003      	beq.n	80180c4 <__mcmp+0x2c>
 80180bc:	d305      	bcc.n	80180ca <__mcmp+0x32>
 80180be:	2201      	movs	r2, #1
 80180c0:	4610      	mov	r0, r2
 80180c2:	bd30      	pop	{r4, r5, pc}
 80180c4:	4283      	cmp	r3, r0
 80180c6:	d3f3      	bcc.n	80180b0 <__mcmp+0x18>
 80180c8:	e7fa      	b.n	80180c0 <__mcmp+0x28>
 80180ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80180ce:	e7f7      	b.n	80180c0 <__mcmp+0x28>

080180d0 <__mdiff>:
 80180d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180d4:	460c      	mov	r4, r1
 80180d6:	4606      	mov	r6, r0
 80180d8:	4611      	mov	r1, r2
 80180da:	4620      	mov	r0, r4
 80180dc:	4690      	mov	r8, r2
 80180de:	f7ff ffdb 	bl	8018098 <__mcmp>
 80180e2:	1e05      	subs	r5, r0, #0
 80180e4:	d110      	bne.n	8018108 <__mdiff+0x38>
 80180e6:	4629      	mov	r1, r5
 80180e8:	4630      	mov	r0, r6
 80180ea:	f7ff fd0f 	bl	8017b0c <_Balloc>
 80180ee:	b930      	cbnz	r0, 80180fe <__mdiff+0x2e>
 80180f0:	4b3a      	ldr	r3, [pc, #232]	; (80181dc <__mdiff+0x10c>)
 80180f2:	4602      	mov	r2, r0
 80180f4:	f240 2137 	movw	r1, #567	; 0x237
 80180f8:	4839      	ldr	r0, [pc, #228]	; (80181e0 <__mdiff+0x110>)
 80180fa:	f000 faa3 	bl	8018644 <__assert_func>
 80180fe:	2301      	movs	r3, #1
 8018100:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018108:	bfa4      	itt	ge
 801810a:	4643      	movge	r3, r8
 801810c:	46a0      	movge	r8, r4
 801810e:	4630      	mov	r0, r6
 8018110:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018114:	bfa6      	itte	ge
 8018116:	461c      	movge	r4, r3
 8018118:	2500      	movge	r5, #0
 801811a:	2501      	movlt	r5, #1
 801811c:	f7ff fcf6 	bl	8017b0c <_Balloc>
 8018120:	b920      	cbnz	r0, 801812c <__mdiff+0x5c>
 8018122:	4b2e      	ldr	r3, [pc, #184]	; (80181dc <__mdiff+0x10c>)
 8018124:	4602      	mov	r2, r0
 8018126:	f240 2145 	movw	r1, #581	; 0x245
 801812a:	e7e5      	b.n	80180f8 <__mdiff+0x28>
 801812c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018130:	6926      	ldr	r6, [r4, #16]
 8018132:	60c5      	str	r5, [r0, #12]
 8018134:	f104 0914 	add.w	r9, r4, #20
 8018138:	f108 0514 	add.w	r5, r8, #20
 801813c:	f100 0e14 	add.w	lr, r0, #20
 8018140:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018144:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018148:	f108 0210 	add.w	r2, r8, #16
 801814c:	46f2      	mov	sl, lr
 801814e:	2100      	movs	r1, #0
 8018150:	f859 3b04 	ldr.w	r3, [r9], #4
 8018154:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018158:	fa11 f88b 	uxtah	r8, r1, fp
 801815c:	b299      	uxth	r1, r3
 801815e:	0c1b      	lsrs	r3, r3, #16
 8018160:	eba8 0801 	sub.w	r8, r8, r1
 8018164:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018168:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801816c:	fa1f f888 	uxth.w	r8, r8
 8018170:	1419      	asrs	r1, r3, #16
 8018172:	454e      	cmp	r6, r9
 8018174:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018178:	f84a 3b04 	str.w	r3, [sl], #4
 801817c:	d8e8      	bhi.n	8018150 <__mdiff+0x80>
 801817e:	1b33      	subs	r3, r6, r4
 8018180:	3b15      	subs	r3, #21
 8018182:	f023 0303 	bic.w	r3, r3, #3
 8018186:	3304      	adds	r3, #4
 8018188:	3415      	adds	r4, #21
 801818a:	42a6      	cmp	r6, r4
 801818c:	bf38      	it	cc
 801818e:	2304      	movcc	r3, #4
 8018190:	441d      	add	r5, r3
 8018192:	4473      	add	r3, lr
 8018194:	469e      	mov	lr, r3
 8018196:	462e      	mov	r6, r5
 8018198:	4566      	cmp	r6, ip
 801819a:	d30e      	bcc.n	80181ba <__mdiff+0xea>
 801819c:	f10c 0203 	add.w	r2, ip, #3
 80181a0:	1b52      	subs	r2, r2, r5
 80181a2:	f022 0203 	bic.w	r2, r2, #3
 80181a6:	3d03      	subs	r5, #3
 80181a8:	45ac      	cmp	ip, r5
 80181aa:	bf38      	it	cc
 80181ac:	2200      	movcc	r2, #0
 80181ae:	4413      	add	r3, r2
 80181b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80181b4:	b17a      	cbz	r2, 80181d6 <__mdiff+0x106>
 80181b6:	6107      	str	r7, [r0, #16]
 80181b8:	e7a4      	b.n	8018104 <__mdiff+0x34>
 80181ba:	f856 8b04 	ldr.w	r8, [r6], #4
 80181be:	fa11 f288 	uxtah	r2, r1, r8
 80181c2:	1414      	asrs	r4, r2, #16
 80181c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80181c8:	b292      	uxth	r2, r2
 80181ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80181ce:	f84e 2b04 	str.w	r2, [lr], #4
 80181d2:	1421      	asrs	r1, r4, #16
 80181d4:	e7e0      	b.n	8018198 <__mdiff+0xc8>
 80181d6:	3f01      	subs	r7, #1
 80181d8:	e7ea      	b.n	80181b0 <__mdiff+0xe0>
 80181da:	bf00      	nop
 80181dc:	0801c8e5 	.word	0x0801c8e5
 80181e0:	0801c967 	.word	0x0801c967

080181e4 <__ulp>:
 80181e4:	b082      	sub	sp, #8
 80181e6:	ed8d 0b00 	vstr	d0, [sp]
 80181ea:	9a01      	ldr	r2, [sp, #4]
 80181ec:	4b0f      	ldr	r3, [pc, #60]	; (801822c <__ulp+0x48>)
 80181ee:	4013      	ands	r3, r2
 80181f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	dc08      	bgt.n	801820a <__ulp+0x26>
 80181f8:	425b      	negs	r3, r3
 80181fa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80181fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018202:	da04      	bge.n	801820e <__ulp+0x2a>
 8018204:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018208:	4113      	asrs	r3, r2
 801820a:	2200      	movs	r2, #0
 801820c:	e008      	b.n	8018220 <__ulp+0x3c>
 801820e:	f1a2 0314 	sub.w	r3, r2, #20
 8018212:	2b1e      	cmp	r3, #30
 8018214:	bfda      	itte	le
 8018216:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801821a:	40da      	lsrle	r2, r3
 801821c:	2201      	movgt	r2, #1
 801821e:	2300      	movs	r3, #0
 8018220:	4619      	mov	r1, r3
 8018222:	4610      	mov	r0, r2
 8018224:	ec41 0b10 	vmov	d0, r0, r1
 8018228:	b002      	add	sp, #8
 801822a:	4770      	bx	lr
 801822c:	7ff00000 	.word	0x7ff00000

08018230 <__b2d>:
 8018230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018234:	6906      	ldr	r6, [r0, #16]
 8018236:	f100 0814 	add.w	r8, r0, #20
 801823a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801823e:	1f37      	subs	r7, r6, #4
 8018240:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018244:	4610      	mov	r0, r2
 8018246:	f7ff fd53 	bl	8017cf0 <__hi0bits>
 801824a:	f1c0 0320 	rsb	r3, r0, #32
 801824e:	280a      	cmp	r0, #10
 8018250:	600b      	str	r3, [r1, #0]
 8018252:	491b      	ldr	r1, [pc, #108]	; (80182c0 <__b2d+0x90>)
 8018254:	dc15      	bgt.n	8018282 <__b2d+0x52>
 8018256:	f1c0 0c0b 	rsb	ip, r0, #11
 801825a:	fa22 f30c 	lsr.w	r3, r2, ip
 801825e:	45b8      	cmp	r8, r7
 8018260:	ea43 0501 	orr.w	r5, r3, r1
 8018264:	bf34      	ite	cc
 8018266:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801826a:	2300      	movcs	r3, #0
 801826c:	3015      	adds	r0, #21
 801826e:	fa02 f000 	lsl.w	r0, r2, r0
 8018272:	fa23 f30c 	lsr.w	r3, r3, ip
 8018276:	4303      	orrs	r3, r0
 8018278:	461c      	mov	r4, r3
 801827a:	ec45 4b10 	vmov	d0, r4, r5
 801827e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018282:	45b8      	cmp	r8, r7
 8018284:	bf3a      	itte	cc
 8018286:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801828a:	f1a6 0708 	subcc.w	r7, r6, #8
 801828e:	2300      	movcs	r3, #0
 8018290:	380b      	subs	r0, #11
 8018292:	d012      	beq.n	80182ba <__b2d+0x8a>
 8018294:	f1c0 0120 	rsb	r1, r0, #32
 8018298:	fa23 f401 	lsr.w	r4, r3, r1
 801829c:	4082      	lsls	r2, r0
 801829e:	4322      	orrs	r2, r4
 80182a0:	4547      	cmp	r7, r8
 80182a2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80182a6:	bf8c      	ite	hi
 80182a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80182ac:	2200      	movls	r2, #0
 80182ae:	4083      	lsls	r3, r0
 80182b0:	40ca      	lsrs	r2, r1
 80182b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80182b6:	4313      	orrs	r3, r2
 80182b8:	e7de      	b.n	8018278 <__b2d+0x48>
 80182ba:	ea42 0501 	orr.w	r5, r2, r1
 80182be:	e7db      	b.n	8018278 <__b2d+0x48>
 80182c0:	3ff00000 	.word	0x3ff00000

080182c4 <__d2b>:
 80182c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80182c8:	460f      	mov	r7, r1
 80182ca:	2101      	movs	r1, #1
 80182cc:	ec59 8b10 	vmov	r8, r9, d0
 80182d0:	4616      	mov	r6, r2
 80182d2:	f7ff fc1b 	bl	8017b0c <_Balloc>
 80182d6:	4604      	mov	r4, r0
 80182d8:	b930      	cbnz	r0, 80182e8 <__d2b+0x24>
 80182da:	4602      	mov	r2, r0
 80182dc:	4b24      	ldr	r3, [pc, #144]	; (8018370 <__d2b+0xac>)
 80182de:	4825      	ldr	r0, [pc, #148]	; (8018374 <__d2b+0xb0>)
 80182e0:	f240 310f 	movw	r1, #783	; 0x30f
 80182e4:	f000 f9ae 	bl	8018644 <__assert_func>
 80182e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80182ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80182f0:	bb2d      	cbnz	r5, 801833e <__d2b+0x7a>
 80182f2:	9301      	str	r3, [sp, #4]
 80182f4:	f1b8 0300 	subs.w	r3, r8, #0
 80182f8:	d026      	beq.n	8018348 <__d2b+0x84>
 80182fa:	4668      	mov	r0, sp
 80182fc:	9300      	str	r3, [sp, #0]
 80182fe:	f7ff fd17 	bl	8017d30 <__lo0bits>
 8018302:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018306:	b1e8      	cbz	r0, 8018344 <__d2b+0x80>
 8018308:	f1c0 0320 	rsb	r3, r0, #32
 801830c:	fa02 f303 	lsl.w	r3, r2, r3
 8018310:	430b      	orrs	r3, r1
 8018312:	40c2      	lsrs	r2, r0
 8018314:	6163      	str	r3, [r4, #20]
 8018316:	9201      	str	r2, [sp, #4]
 8018318:	9b01      	ldr	r3, [sp, #4]
 801831a:	61a3      	str	r3, [r4, #24]
 801831c:	2b00      	cmp	r3, #0
 801831e:	bf14      	ite	ne
 8018320:	2202      	movne	r2, #2
 8018322:	2201      	moveq	r2, #1
 8018324:	6122      	str	r2, [r4, #16]
 8018326:	b1bd      	cbz	r5, 8018358 <__d2b+0x94>
 8018328:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801832c:	4405      	add	r5, r0
 801832e:	603d      	str	r5, [r7, #0]
 8018330:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018334:	6030      	str	r0, [r6, #0]
 8018336:	4620      	mov	r0, r4
 8018338:	b003      	add	sp, #12
 801833a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801833e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018342:	e7d6      	b.n	80182f2 <__d2b+0x2e>
 8018344:	6161      	str	r1, [r4, #20]
 8018346:	e7e7      	b.n	8018318 <__d2b+0x54>
 8018348:	a801      	add	r0, sp, #4
 801834a:	f7ff fcf1 	bl	8017d30 <__lo0bits>
 801834e:	9b01      	ldr	r3, [sp, #4]
 8018350:	6163      	str	r3, [r4, #20]
 8018352:	3020      	adds	r0, #32
 8018354:	2201      	movs	r2, #1
 8018356:	e7e5      	b.n	8018324 <__d2b+0x60>
 8018358:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801835c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018360:	6038      	str	r0, [r7, #0]
 8018362:	6918      	ldr	r0, [r3, #16]
 8018364:	f7ff fcc4 	bl	8017cf0 <__hi0bits>
 8018368:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801836c:	e7e2      	b.n	8018334 <__d2b+0x70>
 801836e:	bf00      	nop
 8018370:	0801c8e5 	.word	0x0801c8e5
 8018374:	0801c967 	.word	0x0801c967

08018378 <__ratio>:
 8018378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801837c:	4688      	mov	r8, r1
 801837e:	4669      	mov	r1, sp
 8018380:	4681      	mov	r9, r0
 8018382:	f7ff ff55 	bl	8018230 <__b2d>
 8018386:	a901      	add	r1, sp, #4
 8018388:	4640      	mov	r0, r8
 801838a:	ec55 4b10 	vmov	r4, r5, d0
 801838e:	f7ff ff4f 	bl	8018230 <__b2d>
 8018392:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018396:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801839a:	eba3 0c02 	sub.w	ip, r3, r2
 801839e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80183a2:	1a9b      	subs	r3, r3, r2
 80183a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80183a8:	ec51 0b10 	vmov	r0, r1, d0
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	bfd6      	itet	le
 80183b0:	460a      	movle	r2, r1
 80183b2:	462a      	movgt	r2, r5
 80183b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80183b8:	468b      	mov	fp, r1
 80183ba:	462f      	mov	r7, r5
 80183bc:	bfd4      	ite	le
 80183be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80183c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80183c6:	4620      	mov	r0, r4
 80183c8:	ee10 2a10 	vmov	r2, s0
 80183cc:	465b      	mov	r3, fp
 80183ce:	4639      	mov	r1, r7
 80183d0:	f7e8 fa3c 	bl	800084c <__aeabi_ddiv>
 80183d4:	ec41 0b10 	vmov	d0, r0, r1
 80183d8:	b003      	add	sp, #12
 80183da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080183de <__copybits>:
 80183de:	3901      	subs	r1, #1
 80183e0:	b570      	push	{r4, r5, r6, lr}
 80183e2:	1149      	asrs	r1, r1, #5
 80183e4:	6914      	ldr	r4, [r2, #16]
 80183e6:	3101      	adds	r1, #1
 80183e8:	f102 0314 	add.w	r3, r2, #20
 80183ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80183f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80183f4:	1f05      	subs	r5, r0, #4
 80183f6:	42a3      	cmp	r3, r4
 80183f8:	d30c      	bcc.n	8018414 <__copybits+0x36>
 80183fa:	1aa3      	subs	r3, r4, r2
 80183fc:	3b11      	subs	r3, #17
 80183fe:	f023 0303 	bic.w	r3, r3, #3
 8018402:	3211      	adds	r2, #17
 8018404:	42a2      	cmp	r2, r4
 8018406:	bf88      	it	hi
 8018408:	2300      	movhi	r3, #0
 801840a:	4418      	add	r0, r3
 801840c:	2300      	movs	r3, #0
 801840e:	4288      	cmp	r0, r1
 8018410:	d305      	bcc.n	801841e <__copybits+0x40>
 8018412:	bd70      	pop	{r4, r5, r6, pc}
 8018414:	f853 6b04 	ldr.w	r6, [r3], #4
 8018418:	f845 6f04 	str.w	r6, [r5, #4]!
 801841c:	e7eb      	b.n	80183f6 <__copybits+0x18>
 801841e:	f840 3b04 	str.w	r3, [r0], #4
 8018422:	e7f4      	b.n	801840e <__copybits+0x30>

08018424 <__any_on>:
 8018424:	f100 0214 	add.w	r2, r0, #20
 8018428:	6900      	ldr	r0, [r0, #16]
 801842a:	114b      	asrs	r3, r1, #5
 801842c:	4298      	cmp	r0, r3
 801842e:	b510      	push	{r4, lr}
 8018430:	db11      	blt.n	8018456 <__any_on+0x32>
 8018432:	dd0a      	ble.n	801844a <__any_on+0x26>
 8018434:	f011 011f 	ands.w	r1, r1, #31
 8018438:	d007      	beq.n	801844a <__any_on+0x26>
 801843a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801843e:	fa24 f001 	lsr.w	r0, r4, r1
 8018442:	fa00 f101 	lsl.w	r1, r0, r1
 8018446:	428c      	cmp	r4, r1
 8018448:	d10b      	bne.n	8018462 <__any_on+0x3e>
 801844a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801844e:	4293      	cmp	r3, r2
 8018450:	d803      	bhi.n	801845a <__any_on+0x36>
 8018452:	2000      	movs	r0, #0
 8018454:	bd10      	pop	{r4, pc}
 8018456:	4603      	mov	r3, r0
 8018458:	e7f7      	b.n	801844a <__any_on+0x26>
 801845a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801845e:	2900      	cmp	r1, #0
 8018460:	d0f5      	beq.n	801844e <__any_on+0x2a>
 8018462:	2001      	movs	r0, #1
 8018464:	e7f6      	b.n	8018454 <__any_on+0x30>

08018466 <__sread>:
 8018466:	b510      	push	{r4, lr}
 8018468:	460c      	mov	r4, r1
 801846a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801846e:	f000 f8b5 	bl	80185dc <_read_r>
 8018472:	2800      	cmp	r0, #0
 8018474:	bfab      	itete	ge
 8018476:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018478:	89a3      	ldrhlt	r3, [r4, #12]
 801847a:	181b      	addge	r3, r3, r0
 801847c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018480:	bfac      	ite	ge
 8018482:	6563      	strge	r3, [r4, #84]	; 0x54
 8018484:	81a3      	strhlt	r3, [r4, #12]
 8018486:	bd10      	pop	{r4, pc}

08018488 <__swrite>:
 8018488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801848c:	461f      	mov	r7, r3
 801848e:	898b      	ldrh	r3, [r1, #12]
 8018490:	05db      	lsls	r3, r3, #23
 8018492:	4605      	mov	r5, r0
 8018494:	460c      	mov	r4, r1
 8018496:	4616      	mov	r6, r2
 8018498:	d505      	bpl.n	80184a6 <__swrite+0x1e>
 801849a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801849e:	2302      	movs	r3, #2
 80184a0:	2200      	movs	r2, #0
 80184a2:	f000 f889 	bl	80185b8 <_lseek_r>
 80184a6:	89a3      	ldrh	r3, [r4, #12]
 80184a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80184ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80184b0:	81a3      	strh	r3, [r4, #12]
 80184b2:	4632      	mov	r2, r6
 80184b4:	463b      	mov	r3, r7
 80184b6:	4628      	mov	r0, r5
 80184b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184bc:	f000 b8b0 	b.w	8018620 <_write_r>

080184c0 <__sseek>:
 80184c0:	b510      	push	{r4, lr}
 80184c2:	460c      	mov	r4, r1
 80184c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184c8:	f000 f876 	bl	80185b8 <_lseek_r>
 80184cc:	1c43      	adds	r3, r0, #1
 80184ce:	89a3      	ldrh	r3, [r4, #12]
 80184d0:	bf15      	itete	ne
 80184d2:	6560      	strne	r0, [r4, #84]	; 0x54
 80184d4:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80184d8:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80184dc:	81a3      	strheq	r3, [r4, #12]
 80184de:	bf18      	it	ne
 80184e0:	81a3      	strhne	r3, [r4, #12]
 80184e2:	bd10      	pop	{r4, pc}

080184e4 <__sclose>:
 80184e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184e8:	f000 b856 	b.w	8018598 <_close_r>

080184ec <_realloc_r>:
 80184ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184f0:	4680      	mov	r8, r0
 80184f2:	4614      	mov	r4, r2
 80184f4:	460e      	mov	r6, r1
 80184f6:	b921      	cbnz	r1, 8018502 <_realloc_r+0x16>
 80184f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184fc:	4611      	mov	r1, r2
 80184fe:	f7ff b9b9 	b.w	8017874 <_malloc_r>
 8018502:	b92a      	cbnz	r2, 8018510 <_realloc_r+0x24>
 8018504:	f000 f8d2 	bl	80186ac <_free_r>
 8018508:	4625      	mov	r5, r4
 801850a:	4628      	mov	r0, r5
 801850c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018510:	f000 f918 	bl	8018744 <_malloc_usable_size_r>
 8018514:	4284      	cmp	r4, r0
 8018516:	4607      	mov	r7, r0
 8018518:	d802      	bhi.n	8018520 <_realloc_r+0x34>
 801851a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801851e:	d812      	bhi.n	8018546 <_realloc_r+0x5a>
 8018520:	4621      	mov	r1, r4
 8018522:	4640      	mov	r0, r8
 8018524:	f7ff f9a6 	bl	8017874 <_malloc_r>
 8018528:	4605      	mov	r5, r0
 801852a:	2800      	cmp	r0, #0
 801852c:	d0ed      	beq.n	801850a <_realloc_r+0x1e>
 801852e:	42bc      	cmp	r4, r7
 8018530:	4622      	mov	r2, r4
 8018532:	4631      	mov	r1, r6
 8018534:	bf28      	it	cs
 8018536:	463a      	movcs	r2, r7
 8018538:	f7fd fe2a 	bl	8016190 <memcpy>
 801853c:	4631      	mov	r1, r6
 801853e:	4640      	mov	r0, r8
 8018540:	f000 f8b4 	bl	80186ac <_free_r>
 8018544:	e7e1      	b.n	801850a <_realloc_r+0x1e>
 8018546:	4635      	mov	r5, r6
 8018548:	e7df      	b.n	801850a <_realloc_r+0x1e>

0801854a <__ascii_wctomb>:
 801854a:	b149      	cbz	r1, 8018560 <__ascii_wctomb+0x16>
 801854c:	2aff      	cmp	r2, #255	; 0xff
 801854e:	bf85      	ittet	hi
 8018550:	238a      	movhi	r3, #138	; 0x8a
 8018552:	6003      	strhi	r3, [r0, #0]
 8018554:	700a      	strbls	r2, [r1, #0]
 8018556:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801855a:	bf98      	it	ls
 801855c:	2001      	movls	r0, #1
 801855e:	4770      	bx	lr
 8018560:	4608      	mov	r0, r1
 8018562:	4770      	bx	lr

08018564 <memmove>:
 8018564:	4288      	cmp	r0, r1
 8018566:	b510      	push	{r4, lr}
 8018568:	eb01 0402 	add.w	r4, r1, r2
 801856c:	d902      	bls.n	8018574 <memmove+0x10>
 801856e:	4284      	cmp	r4, r0
 8018570:	4623      	mov	r3, r4
 8018572:	d807      	bhi.n	8018584 <memmove+0x20>
 8018574:	1e43      	subs	r3, r0, #1
 8018576:	42a1      	cmp	r1, r4
 8018578:	d008      	beq.n	801858c <memmove+0x28>
 801857a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801857e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018582:	e7f8      	b.n	8018576 <memmove+0x12>
 8018584:	4402      	add	r2, r0
 8018586:	4601      	mov	r1, r0
 8018588:	428a      	cmp	r2, r1
 801858a:	d100      	bne.n	801858e <memmove+0x2a>
 801858c:	bd10      	pop	{r4, pc}
 801858e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018596:	e7f7      	b.n	8018588 <memmove+0x24>

08018598 <_close_r>:
 8018598:	b538      	push	{r3, r4, r5, lr}
 801859a:	4d06      	ldr	r5, [pc, #24]	; (80185b4 <_close_r+0x1c>)
 801859c:	2300      	movs	r3, #0
 801859e:	4604      	mov	r4, r0
 80185a0:	4608      	mov	r0, r1
 80185a2:	602b      	str	r3, [r5, #0]
 80185a4:	f7ef fb21 	bl	8007bea <_close>
 80185a8:	1c43      	adds	r3, r0, #1
 80185aa:	d102      	bne.n	80185b2 <_close_r+0x1a>
 80185ac:	682b      	ldr	r3, [r5, #0]
 80185ae:	b103      	cbz	r3, 80185b2 <_close_r+0x1a>
 80185b0:	6023      	str	r3, [r4, #0]
 80185b2:	bd38      	pop	{r3, r4, r5, pc}
 80185b4:	200032bc 	.word	0x200032bc

080185b8 <_lseek_r>:
 80185b8:	b538      	push	{r3, r4, r5, lr}
 80185ba:	4d07      	ldr	r5, [pc, #28]	; (80185d8 <_lseek_r+0x20>)
 80185bc:	4604      	mov	r4, r0
 80185be:	4608      	mov	r0, r1
 80185c0:	4611      	mov	r1, r2
 80185c2:	2200      	movs	r2, #0
 80185c4:	602a      	str	r2, [r5, #0]
 80185c6:	461a      	mov	r2, r3
 80185c8:	f7ef fb36 	bl	8007c38 <_lseek>
 80185cc:	1c43      	adds	r3, r0, #1
 80185ce:	d102      	bne.n	80185d6 <_lseek_r+0x1e>
 80185d0:	682b      	ldr	r3, [r5, #0]
 80185d2:	b103      	cbz	r3, 80185d6 <_lseek_r+0x1e>
 80185d4:	6023      	str	r3, [r4, #0]
 80185d6:	bd38      	pop	{r3, r4, r5, pc}
 80185d8:	200032bc 	.word	0x200032bc

080185dc <_read_r>:
 80185dc:	b538      	push	{r3, r4, r5, lr}
 80185de:	4d07      	ldr	r5, [pc, #28]	; (80185fc <_read_r+0x20>)
 80185e0:	4604      	mov	r4, r0
 80185e2:	4608      	mov	r0, r1
 80185e4:	4611      	mov	r1, r2
 80185e6:	2200      	movs	r2, #0
 80185e8:	602a      	str	r2, [r5, #0]
 80185ea:	461a      	mov	r2, r3
 80185ec:	f7ef fac4 	bl	8007b78 <_read>
 80185f0:	1c43      	adds	r3, r0, #1
 80185f2:	d102      	bne.n	80185fa <_read_r+0x1e>
 80185f4:	682b      	ldr	r3, [r5, #0]
 80185f6:	b103      	cbz	r3, 80185fa <_read_r+0x1e>
 80185f8:	6023      	str	r3, [r4, #0]
 80185fa:	bd38      	pop	{r3, r4, r5, pc}
 80185fc:	200032bc 	.word	0x200032bc

08018600 <_sbrk_r>:
 8018600:	b538      	push	{r3, r4, r5, lr}
 8018602:	4d06      	ldr	r5, [pc, #24]	; (801861c <_sbrk_r+0x1c>)
 8018604:	2300      	movs	r3, #0
 8018606:	4604      	mov	r4, r0
 8018608:	4608      	mov	r0, r1
 801860a:	602b      	str	r3, [r5, #0]
 801860c:	f7ef fb22 	bl	8007c54 <_sbrk>
 8018610:	1c43      	adds	r3, r0, #1
 8018612:	d102      	bne.n	801861a <_sbrk_r+0x1a>
 8018614:	682b      	ldr	r3, [r5, #0]
 8018616:	b103      	cbz	r3, 801861a <_sbrk_r+0x1a>
 8018618:	6023      	str	r3, [r4, #0]
 801861a:	bd38      	pop	{r3, r4, r5, pc}
 801861c:	200032bc 	.word	0x200032bc

08018620 <_write_r>:
 8018620:	b538      	push	{r3, r4, r5, lr}
 8018622:	4d07      	ldr	r5, [pc, #28]	; (8018640 <_write_r+0x20>)
 8018624:	4604      	mov	r4, r0
 8018626:	4608      	mov	r0, r1
 8018628:	4611      	mov	r1, r2
 801862a:	2200      	movs	r2, #0
 801862c:	602a      	str	r2, [r5, #0]
 801862e:	461a      	mov	r2, r3
 8018630:	f7ef fabf 	bl	8007bb2 <_write>
 8018634:	1c43      	adds	r3, r0, #1
 8018636:	d102      	bne.n	801863e <_write_r+0x1e>
 8018638:	682b      	ldr	r3, [r5, #0]
 801863a:	b103      	cbz	r3, 801863e <_write_r+0x1e>
 801863c:	6023      	str	r3, [r4, #0]
 801863e:	bd38      	pop	{r3, r4, r5, pc}
 8018640:	200032bc 	.word	0x200032bc

08018644 <__assert_func>:
 8018644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018646:	4614      	mov	r4, r2
 8018648:	461a      	mov	r2, r3
 801864a:	4b09      	ldr	r3, [pc, #36]	; (8018670 <__assert_func+0x2c>)
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	4605      	mov	r5, r0
 8018650:	68d8      	ldr	r0, [r3, #12]
 8018652:	b14c      	cbz	r4, 8018668 <__assert_func+0x24>
 8018654:	4b07      	ldr	r3, [pc, #28]	; (8018674 <__assert_func+0x30>)
 8018656:	9100      	str	r1, [sp, #0]
 8018658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801865c:	4906      	ldr	r1, [pc, #24]	; (8018678 <__assert_func+0x34>)
 801865e:	462b      	mov	r3, r5
 8018660:	f000 f878 	bl	8018754 <fiprintf>
 8018664:	f000 f888 	bl	8018778 <abort>
 8018668:	4b04      	ldr	r3, [pc, #16]	; (801867c <__assert_func+0x38>)
 801866a:	461c      	mov	r4, r3
 801866c:	e7f3      	b.n	8018656 <__assert_func+0x12>
 801866e:	bf00      	nop
 8018670:	200001ec 	.word	0x200001ec
 8018674:	0801cabc 	.word	0x0801cabc
 8018678:	0801cac9 	.word	0x0801cac9
 801867c:	0801caf7 	.word	0x0801caf7

08018680 <_calloc_r>:
 8018680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018682:	fba1 2402 	umull	r2, r4, r1, r2
 8018686:	b94c      	cbnz	r4, 801869c <_calloc_r+0x1c>
 8018688:	4611      	mov	r1, r2
 801868a:	9201      	str	r2, [sp, #4]
 801868c:	f7ff f8f2 	bl	8017874 <_malloc_r>
 8018690:	9a01      	ldr	r2, [sp, #4]
 8018692:	4605      	mov	r5, r0
 8018694:	b930      	cbnz	r0, 80186a4 <_calloc_r+0x24>
 8018696:	4628      	mov	r0, r5
 8018698:	b003      	add	sp, #12
 801869a:	bd30      	pop	{r4, r5, pc}
 801869c:	220c      	movs	r2, #12
 801869e:	6002      	str	r2, [r0, #0]
 80186a0:	2500      	movs	r5, #0
 80186a2:	e7f8      	b.n	8018696 <_calloc_r+0x16>
 80186a4:	4621      	mov	r1, r4
 80186a6:	f7fd fd3b 	bl	8016120 <memset>
 80186aa:	e7f4      	b.n	8018696 <_calloc_r+0x16>

080186ac <_free_r>:
 80186ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80186ae:	2900      	cmp	r1, #0
 80186b0:	d044      	beq.n	801873c <_free_r+0x90>
 80186b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80186b6:	9001      	str	r0, [sp, #4]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	f1a1 0404 	sub.w	r4, r1, #4
 80186be:	bfb8      	it	lt
 80186c0:	18e4      	addlt	r4, r4, r3
 80186c2:	f7ff fa17 	bl	8017af4 <__malloc_lock>
 80186c6:	4a1e      	ldr	r2, [pc, #120]	; (8018740 <_free_r+0x94>)
 80186c8:	9801      	ldr	r0, [sp, #4]
 80186ca:	6813      	ldr	r3, [r2, #0]
 80186cc:	b933      	cbnz	r3, 80186dc <_free_r+0x30>
 80186ce:	6063      	str	r3, [r4, #4]
 80186d0:	6014      	str	r4, [r2, #0]
 80186d2:	b003      	add	sp, #12
 80186d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80186d8:	f7ff ba12 	b.w	8017b00 <__malloc_unlock>
 80186dc:	42a3      	cmp	r3, r4
 80186de:	d908      	bls.n	80186f2 <_free_r+0x46>
 80186e0:	6825      	ldr	r5, [r4, #0]
 80186e2:	1961      	adds	r1, r4, r5
 80186e4:	428b      	cmp	r3, r1
 80186e6:	bf01      	itttt	eq
 80186e8:	6819      	ldreq	r1, [r3, #0]
 80186ea:	685b      	ldreq	r3, [r3, #4]
 80186ec:	1949      	addeq	r1, r1, r5
 80186ee:	6021      	streq	r1, [r4, #0]
 80186f0:	e7ed      	b.n	80186ce <_free_r+0x22>
 80186f2:	461a      	mov	r2, r3
 80186f4:	685b      	ldr	r3, [r3, #4]
 80186f6:	b10b      	cbz	r3, 80186fc <_free_r+0x50>
 80186f8:	42a3      	cmp	r3, r4
 80186fa:	d9fa      	bls.n	80186f2 <_free_r+0x46>
 80186fc:	6811      	ldr	r1, [r2, #0]
 80186fe:	1855      	adds	r5, r2, r1
 8018700:	42a5      	cmp	r5, r4
 8018702:	d10b      	bne.n	801871c <_free_r+0x70>
 8018704:	6824      	ldr	r4, [r4, #0]
 8018706:	4421      	add	r1, r4
 8018708:	1854      	adds	r4, r2, r1
 801870a:	42a3      	cmp	r3, r4
 801870c:	6011      	str	r1, [r2, #0]
 801870e:	d1e0      	bne.n	80186d2 <_free_r+0x26>
 8018710:	681c      	ldr	r4, [r3, #0]
 8018712:	685b      	ldr	r3, [r3, #4]
 8018714:	6053      	str	r3, [r2, #4]
 8018716:	440c      	add	r4, r1
 8018718:	6014      	str	r4, [r2, #0]
 801871a:	e7da      	b.n	80186d2 <_free_r+0x26>
 801871c:	d902      	bls.n	8018724 <_free_r+0x78>
 801871e:	230c      	movs	r3, #12
 8018720:	6003      	str	r3, [r0, #0]
 8018722:	e7d6      	b.n	80186d2 <_free_r+0x26>
 8018724:	6825      	ldr	r5, [r4, #0]
 8018726:	1961      	adds	r1, r4, r5
 8018728:	428b      	cmp	r3, r1
 801872a:	bf04      	itt	eq
 801872c:	6819      	ldreq	r1, [r3, #0]
 801872e:	685b      	ldreq	r3, [r3, #4]
 8018730:	6063      	str	r3, [r4, #4]
 8018732:	bf04      	itt	eq
 8018734:	1949      	addeq	r1, r1, r5
 8018736:	6021      	streq	r1, [r4, #0]
 8018738:	6054      	str	r4, [r2, #4]
 801873a:	e7ca      	b.n	80186d2 <_free_r+0x26>
 801873c:	b003      	add	sp, #12
 801873e:	bd30      	pop	{r4, r5, pc}
 8018740:	200032b4 	.word	0x200032b4

08018744 <_malloc_usable_size_r>:
 8018744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018748:	1f18      	subs	r0, r3, #4
 801874a:	2b00      	cmp	r3, #0
 801874c:	bfbc      	itt	lt
 801874e:	580b      	ldrlt	r3, [r1, r0]
 8018750:	18c0      	addlt	r0, r0, r3
 8018752:	4770      	bx	lr

08018754 <fiprintf>:
 8018754:	b40e      	push	{r1, r2, r3}
 8018756:	b503      	push	{r0, r1, lr}
 8018758:	4601      	mov	r1, r0
 801875a:	ab03      	add	r3, sp, #12
 801875c:	4805      	ldr	r0, [pc, #20]	; (8018774 <fiprintf+0x20>)
 801875e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018762:	6800      	ldr	r0, [r0, #0]
 8018764:	9301      	str	r3, [sp, #4]
 8018766:	f000 f837 	bl	80187d8 <_vfiprintf_r>
 801876a:	b002      	add	sp, #8
 801876c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018770:	b003      	add	sp, #12
 8018772:	4770      	bx	lr
 8018774:	200001ec 	.word	0x200001ec

08018778 <abort>:
 8018778:	b508      	push	{r3, lr}
 801877a:	2006      	movs	r0, #6
 801877c:	f000 fa88 	bl	8018c90 <raise>
 8018780:	2001      	movs	r0, #1
 8018782:	f7ef f9ef 	bl	8007b64 <_exit>

08018786 <__sfputc_r>:
 8018786:	6893      	ldr	r3, [r2, #8]
 8018788:	3b01      	subs	r3, #1
 801878a:	2b00      	cmp	r3, #0
 801878c:	b410      	push	{r4}
 801878e:	6093      	str	r3, [r2, #8]
 8018790:	da08      	bge.n	80187a4 <__sfputc_r+0x1e>
 8018792:	6994      	ldr	r4, [r2, #24]
 8018794:	42a3      	cmp	r3, r4
 8018796:	db01      	blt.n	801879c <__sfputc_r+0x16>
 8018798:	290a      	cmp	r1, #10
 801879a:	d103      	bne.n	80187a4 <__sfputc_r+0x1e>
 801879c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80187a0:	f000 b934 	b.w	8018a0c <__swbuf_r>
 80187a4:	6813      	ldr	r3, [r2, #0]
 80187a6:	1c58      	adds	r0, r3, #1
 80187a8:	6010      	str	r0, [r2, #0]
 80187aa:	7019      	strb	r1, [r3, #0]
 80187ac:	4608      	mov	r0, r1
 80187ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80187b2:	4770      	bx	lr

080187b4 <__sfputs_r>:
 80187b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187b6:	4606      	mov	r6, r0
 80187b8:	460f      	mov	r7, r1
 80187ba:	4614      	mov	r4, r2
 80187bc:	18d5      	adds	r5, r2, r3
 80187be:	42ac      	cmp	r4, r5
 80187c0:	d101      	bne.n	80187c6 <__sfputs_r+0x12>
 80187c2:	2000      	movs	r0, #0
 80187c4:	e007      	b.n	80187d6 <__sfputs_r+0x22>
 80187c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187ca:	463a      	mov	r2, r7
 80187cc:	4630      	mov	r0, r6
 80187ce:	f7ff ffda 	bl	8018786 <__sfputc_r>
 80187d2:	1c43      	adds	r3, r0, #1
 80187d4:	d1f3      	bne.n	80187be <__sfputs_r+0xa>
 80187d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080187d8 <_vfiprintf_r>:
 80187d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187dc:	460d      	mov	r5, r1
 80187de:	b09d      	sub	sp, #116	; 0x74
 80187e0:	4614      	mov	r4, r2
 80187e2:	4698      	mov	r8, r3
 80187e4:	4606      	mov	r6, r0
 80187e6:	b118      	cbz	r0, 80187f0 <_vfiprintf_r+0x18>
 80187e8:	6a03      	ldr	r3, [r0, #32]
 80187ea:	b90b      	cbnz	r3, 80187f0 <_vfiprintf_r+0x18>
 80187ec:	f7fc fdb0 	bl	8015350 <__sinit>
 80187f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187f2:	07d9      	lsls	r1, r3, #31
 80187f4:	d405      	bmi.n	8018802 <_vfiprintf_r+0x2a>
 80187f6:	89ab      	ldrh	r3, [r5, #12]
 80187f8:	059a      	lsls	r2, r3, #22
 80187fa:	d402      	bmi.n	8018802 <_vfiprintf_r+0x2a>
 80187fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187fe:	f7fd fcc5 	bl	801618c <__retarget_lock_acquire_recursive>
 8018802:	89ab      	ldrh	r3, [r5, #12]
 8018804:	071b      	lsls	r3, r3, #28
 8018806:	d501      	bpl.n	801880c <_vfiprintf_r+0x34>
 8018808:	692b      	ldr	r3, [r5, #16]
 801880a:	b99b      	cbnz	r3, 8018834 <_vfiprintf_r+0x5c>
 801880c:	4629      	mov	r1, r5
 801880e:	4630      	mov	r0, r6
 8018810:	f000 f93a 	bl	8018a88 <__swsetup_r>
 8018814:	b170      	cbz	r0, 8018834 <_vfiprintf_r+0x5c>
 8018816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018818:	07dc      	lsls	r4, r3, #31
 801881a:	d504      	bpl.n	8018826 <_vfiprintf_r+0x4e>
 801881c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018820:	b01d      	add	sp, #116	; 0x74
 8018822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018826:	89ab      	ldrh	r3, [r5, #12]
 8018828:	0598      	lsls	r0, r3, #22
 801882a:	d4f7      	bmi.n	801881c <_vfiprintf_r+0x44>
 801882c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801882e:	f7fd fcae 	bl	801618e <__retarget_lock_release_recursive>
 8018832:	e7f3      	b.n	801881c <_vfiprintf_r+0x44>
 8018834:	2300      	movs	r3, #0
 8018836:	9309      	str	r3, [sp, #36]	; 0x24
 8018838:	2320      	movs	r3, #32
 801883a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801883e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018842:	2330      	movs	r3, #48	; 0x30
 8018844:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80189f8 <_vfiprintf_r+0x220>
 8018848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801884c:	f04f 0901 	mov.w	r9, #1
 8018850:	4623      	mov	r3, r4
 8018852:	469a      	mov	sl, r3
 8018854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018858:	b10a      	cbz	r2, 801885e <_vfiprintf_r+0x86>
 801885a:	2a25      	cmp	r2, #37	; 0x25
 801885c:	d1f9      	bne.n	8018852 <_vfiprintf_r+0x7a>
 801885e:	ebba 0b04 	subs.w	fp, sl, r4
 8018862:	d00b      	beq.n	801887c <_vfiprintf_r+0xa4>
 8018864:	465b      	mov	r3, fp
 8018866:	4622      	mov	r2, r4
 8018868:	4629      	mov	r1, r5
 801886a:	4630      	mov	r0, r6
 801886c:	f7ff ffa2 	bl	80187b4 <__sfputs_r>
 8018870:	3001      	adds	r0, #1
 8018872:	f000 80a9 	beq.w	80189c8 <_vfiprintf_r+0x1f0>
 8018876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018878:	445a      	add	r2, fp
 801887a:	9209      	str	r2, [sp, #36]	; 0x24
 801887c:	f89a 3000 	ldrb.w	r3, [sl]
 8018880:	2b00      	cmp	r3, #0
 8018882:	f000 80a1 	beq.w	80189c8 <_vfiprintf_r+0x1f0>
 8018886:	2300      	movs	r3, #0
 8018888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801888c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018890:	f10a 0a01 	add.w	sl, sl, #1
 8018894:	9304      	str	r3, [sp, #16]
 8018896:	9307      	str	r3, [sp, #28]
 8018898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801889c:	931a      	str	r3, [sp, #104]	; 0x68
 801889e:	4654      	mov	r4, sl
 80188a0:	2205      	movs	r2, #5
 80188a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188a6:	4854      	ldr	r0, [pc, #336]	; (80189f8 <_vfiprintf_r+0x220>)
 80188a8:	f7e7 fc92 	bl	80001d0 <memchr>
 80188ac:	9a04      	ldr	r2, [sp, #16]
 80188ae:	b9d8      	cbnz	r0, 80188e8 <_vfiprintf_r+0x110>
 80188b0:	06d1      	lsls	r1, r2, #27
 80188b2:	bf44      	itt	mi
 80188b4:	2320      	movmi	r3, #32
 80188b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80188ba:	0713      	lsls	r3, r2, #28
 80188bc:	bf44      	itt	mi
 80188be:	232b      	movmi	r3, #43	; 0x2b
 80188c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80188c4:	f89a 3000 	ldrb.w	r3, [sl]
 80188c8:	2b2a      	cmp	r3, #42	; 0x2a
 80188ca:	d015      	beq.n	80188f8 <_vfiprintf_r+0x120>
 80188cc:	9a07      	ldr	r2, [sp, #28]
 80188ce:	4654      	mov	r4, sl
 80188d0:	2000      	movs	r0, #0
 80188d2:	f04f 0c0a 	mov.w	ip, #10
 80188d6:	4621      	mov	r1, r4
 80188d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80188dc:	3b30      	subs	r3, #48	; 0x30
 80188de:	2b09      	cmp	r3, #9
 80188e0:	d94d      	bls.n	801897e <_vfiprintf_r+0x1a6>
 80188e2:	b1b0      	cbz	r0, 8018912 <_vfiprintf_r+0x13a>
 80188e4:	9207      	str	r2, [sp, #28]
 80188e6:	e014      	b.n	8018912 <_vfiprintf_r+0x13a>
 80188e8:	eba0 0308 	sub.w	r3, r0, r8
 80188ec:	fa09 f303 	lsl.w	r3, r9, r3
 80188f0:	4313      	orrs	r3, r2
 80188f2:	9304      	str	r3, [sp, #16]
 80188f4:	46a2      	mov	sl, r4
 80188f6:	e7d2      	b.n	801889e <_vfiprintf_r+0xc6>
 80188f8:	9b03      	ldr	r3, [sp, #12]
 80188fa:	1d19      	adds	r1, r3, #4
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	9103      	str	r1, [sp, #12]
 8018900:	2b00      	cmp	r3, #0
 8018902:	bfbb      	ittet	lt
 8018904:	425b      	neglt	r3, r3
 8018906:	f042 0202 	orrlt.w	r2, r2, #2
 801890a:	9307      	strge	r3, [sp, #28]
 801890c:	9307      	strlt	r3, [sp, #28]
 801890e:	bfb8      	it	lt
 8018910:	9204      	strlt	r2, [sp, #16]
 8018912:	7823      	ldrb	r3, [r4, #0]
 8018914:	2b2e      	cmp	r3, #46	; 0x2e
 8018916:	d10c      	bne.n	8018932 <_vfiprintf_r+0x15a>
 8018918:	7863      	ldrb	r3, [r4, #1]
 801891a:	2b2a      	cmp	r3, #42	; 0x2a
 801891c:	d134      	bne.n	8018988 <_vfiprintf_r+0x1b0>
 801891e:	9b03      	ldr	r3, [sp, #12]
 8018920:	1d1a      	adds	r2, r3, #4
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	9203      	str	r2, [sp, #12]
 8018926:	2b00      	cmp	r3, #0
 8018928:	bfb8      	it	lt
 801892a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801892e:	3402      	adds	r4, #2
 8018930:	9305      	str	r3, [sp, #20]
 8018932:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018a08 <_vfiprintf_r+0x230>
 8018936:	7821      	ldrb	r1, [r4, #0]
 8018938:	2203      	movs	r2, #3
 801893a:	4650      	mov	r0, sl
 801893c:	f7e7 fc48 	bl	80001d0 <memchr>
 8018940:	b138      	cbz	r0, 8018952 <_vfiprintf_r+0x17a>
 8018942:	9b04      	ldr	r3, [sp, #16]
 8018944:	eba0 000a 	sub.w	r0, r0, sl
 8018948:	2240      	movs	r2, #64	; 0x40
 801894a:	4082      	lsls	r2, r0
 801894c:	4313      	orrs	r3, r2
 801894e:	3401      	adds	r4, #1
 8018950:	9304      	str	r3, [sp, #16]
 8018952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018956:	4829      	ldr	r0, [pc, #164]	; (80189fc <_vfiprintf_r+0x224>)
 8018958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801895c:	2206      	movs	r2, #6
 801895e:	f7e7 fc37 	bl	80001d0 <memchr>
 8018962:	2800      	cmp	r0, #0
 8018964:	d03f      	beq.n	80189e6 <_vfiprintf_r+0x20e>
 8018966:	4b26      	ldr	r3, [pc, #152]	; (8018a00 <_vfiprintf_r+0x228>)
 8018968:	bb1b      	cbnz	r3, 80189b2 <_vfiprintf_r+0x1da>
 801896a:	9b03      	ldr	r3, [sp, #12]
 801896c:	3307      	adds	r3, #7
 801896e:	f023 0307 	bic.w	r3, r3, #7
 8018972:	3308      	adds	r3, #8
 8018974:	9303      	str	r3, [sp, #12]
 8018976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018978:	443b      	add	r3, r7
 801897a:	9309      	str	r3, [sp, #36]	; 0x24
 801897c:	e768      	b.n	8018850 <_vfiprintf_r+0x78>
 801897e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018982:	460c      	mov	r4, r1
 8018984:	2001      	movs	r0, #1
 8018986:	e7a6      	b.n	80188d6 <_vfiprintf_r+0xfe>
 8018988:	2300      	movs	r3, #0
 801898a:	3401      	adds	r4, #1
 801898c:	9305      	str	r3, [sp, #20]
 801898e:	4619      	mov	r1, r3
 8018990:	f04f 0c0a 	mov.w	ip, #10
 8018994:	4620      	mov	r0, r4
 8018996:	f810 2b01 	ldrb.w	r2, [r0], #1
 801899a:	3a30      	subs	r2, #48	; 0x30
 801899c:	2a09      	cmp	r2, #9
 801899e:	d903      	bls.n	80189a8 <_vfiprintf_r+0x1d0>
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d0c6      	beq.n	8018932 <_vfiprintf_r+0x15a>
 80189a4:	9105      	str	r1, [sp, #20]
 80189a6:	e7c4      	b.n	8018932 <_vfiprintf_r+0x15a>
 80189a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80189ac:	4604      	mov	r4, r0
 80189ae:	2301      	movs	r3, #1
 80189b0:	e7f0      	b.n	8018994 <_vfiprintf_r+0x1bc>
 80189b2:	ab03      	add	r3, sp, #12
 80189b4:	9300      	str	r3, [sp, #0]
 80189b6:	462a      	mov	r2, r5
 80189b8:	4b12      	ldr	r3, [pc, #72]	; (8018a04 <_vfiprintf_r+0x22c>)
 80189ba:	a904      	add	r1, sp, #16
 80189bc:	4630      	mov	r0, r6
 80189be:	f7fb fe57 	bl	8014670 <_printf_float>
 80189c2:	4607      	mov	r7, r0
 80189c4:	1c78      	adds	r0, r7, #1
 80189c6:	d1d6      	bne.n	8018976 <_vfiprintf_r+0x19e>
 80189c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80189ca:	07d9      	lsls	r1, r3, #31
 80189cc:	d405      	bmi.n	80189da <_vfiprintf_r+0x202>
 80189ce:	89ab      	ldrh	r3, [r5, #12]
 80189d0:	059a      	lsls	r2, r3, #22
 80189d2:	d402      	bmi.n	80189da <_vfiprintf_r+0x202>
 80189d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80189d6:	f7fd fbda 	bl	801618e <__retarget_lock_release_recursive>
 80189da:	89ab      	ldrh	r3, [r5, #12]
 80189dc:	065b      	lsls	r3, r3, #25
 80189de:	f53f af1d 	bmi.w	801881c <_vfiprintf_r+0x44>
 80189e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189e4:	e71c      	b.n	8018820 <_vfiprintf_r+0x48>
 80189e6:	ab03      	add	r3, sp, #12
 80189e8:	9300      	str	r3, [sp, #0]
 80189ea:	462a      	mov	r2, r5
 80189ec:	4b05      	ldr	r3, [pc, #20]	; (8018a04 <_vfiprintf_r+0x22c>)
 80189ee:	a904      	add	r1, sp, #16
 80189f0:	4630      	mov	r0, r6
 80189f2:	f7fc f8e1 	bl	8014bb8 <_printf_i>
 80189f6:	e7e4      	b.n	80189c2 <_vfiprintf_r+0x1ea>
 80189f8:	0801c956 	.word	0x0801c956
 80189fc:	0801c960 	.word	0x0801c960
 8018a00:	08014671 	.word	0x08014671
 8018a04:	080187b5 	.word	0x080187b5
 8018a08:	0801c95c 	.word	0x0801c95c

08018a0c <__swbuf_r>:
 8018a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a0e:	460e      	mov	r6, r1
 8018a10:	4614      	mov	r4, r2
 8018a12:	4605      	mov	r5, r0
 8018a14:	b118      	cbz	r0, 8018a1e <__swbuf_r+0x12>
 8018a16:	6a03      	ldr	r3, [r0, #32]
 8018a18:	b90b      	cbnz	r3, 8018a1e <__swbuf_r+0x12>
 8018a1a:	f7fc fc99 	bl	8015350 <__sinit>
 8018a1e:	69a3      	ldr	r3, [r4, #24]
 8018a20:	60a3      	str	r3, [r4, #8]
 8018a22:	89a3      	ldrh	r3, [r4, #12]
 8018a24:	071a      	lsls	r2, r3, #28
 8018a26:	d525      	bpl.n	8018a74 <__swbuf_r+0x68>
 8018a28:	6923      	ldr	r3, [r4, #16]
 8018a2a:	b31b      	cbz	r3, 8018a74 <__swbuf_r+0x68>
 8018a2c:	6823      	ldr	r3, [r4, #0]
 8018a2e:	6922      	ldr	r2, [r4, #16]
 8018a30:	1a98      	subs	r0, r3, r2
 8018a32:	6963      	ldr	r3, [r4, #20]
 8018a34:	b2f6      	uxtb	r6, r6
 8018a36:	4283      	cmp	r3, r0
 8018a38:	4637      	mov	r7, r6
 8018a3a:	dc04      	bgt.n	8018a46 <__swbuf_r+0x3a>
 8018a3c:	4621      	mov	r1, r4
 8018a3e:	4628      	mov	r0, r5
 8018a40:	f7ff f830 	bl	8017aa4 <_fflush_r>
 8018a44:	b9e0      	cbnz	r0, 8018a80 <__swbuf_r+0x74>
 8018a46:	68a3      	ldr	r3, [r4, #8]
 8018a48:	3b01      	subs	r3, #1
 8018a4a:	60a3      	str	r3, [r4, #8]
 8018a4c:	6823      	ldr	r3, [r4, #0]
 8018a4e:	1c5a      	adds	r2, r3, #1
 8018a50:	6022      	str	r2, [r4, #0]
 8018a52:	701e      	strb	r6, [r3, #0]
 8018a54:	6962      	ldr	r2, [r4, #20]
 8018a56:	1c43      	adds	r3, r0, #1
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	d004      	beq.n	8018a66 <__swbuf_r+0x5a>
 8018a5c:	89a3      	ldrh	r3, [r4, #12]
 8018a5e:	07db      	lsls	r3, r3, #31
 8018a60:	d506      	bpl.n	8018a70 <__swbuf_r+0x64>
 8018a62:	2e0a      	cmp	r6, #10
 8018a64:	d104      	bne.n	8018a70 <__swbuf_r+0x64>
 8018a66:	4621      	mov	r1, r4
 8018a68:	4628      	mov	r0, r5
 8018a6a:	f7ff f81b 	bl	8017aa4 <_fflush_r>
 8018a6e:	b938      	cbnz	r0, 8018a80 <__swbuf_r+0x74>
 8018a70:	4638      	mov	r0, r7
 8018a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a74:	4621      	mov	r1, r4
 8018a76:	4628      	mov	r0, r5
 8018a78:	f000 f806 	bl	8018a88 <__swsetup_r>
 8018a7c:	2800      	cmp	r0, #0
 8018a7e:	d0d5      	beq.n	8018a2c <__swbuf_r+0x20>
 8018a80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018a84:	e7f4      	b.n	8018a70 <__swbuf_r+0x64>
	...

08018a88 <__swsetup_r>:
 8018a88:	b538      	push	{r3, r4, r5, lr}
 8018a8a:	4b2a      	ldr	r3, [pc, #168]	; (8018b34 <__swsetup_r+0xac>)
 8018a8c:	4605      	mov	r5, r0
 8018a8e:	6818      	ldr	r0, [r3, #0]
 8018a90:	460c      	mov	r4, r1
 8018a92:	b118      	cbz	r0, 8018a9c <__swsetup_r+0x14>
 8018a94:	6a03      	ldr	r3, [r0, #32]
 8018a96:	b90b      	cbnz	r3, 8018a9c <__swsetup_r+0x14>
 8018a98:	f7fc fc5a 	bl	8015350 <__sinit>
 8018a9c:	89a3      	ldrh	r3, [r4, #12]
 8018a9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018aa2:	0718      	lsls	r0, r3, #28
 8018aa4:	d422      	bmi.n	8018aec <__swsetup_r+0x64>
 8018aa6:	06d9      	lsls	r1, r3, #27
 8018aa8:	d407      	bmi.n	8018aba <__swsetup_r+0x32>
 8018aaa:	2309      	movs	r3, #9
 8018aac:	602b      	str	r3, [r5, #0]
 8018aae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018ab2:	81a3      	strh	r3, [r4, #12]
 8018ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018ab8:	e034      	b.n	8018b24 <__swsetup_r+0x9c>
 8018aba:	0758      	lsls	r0, r3, #29
 8018abc:	d512      	bpl.n	8018ae4 <__swsetup_r+0x5c>
 8018abe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ac0:	b141      	cbz	r1, 8018ad4 <__swsetup_r+0x4c>
 8018ac2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ac6:	4299      	cmp	r1, r3
 8018ac8:	d002      	beq.n	8018ad0 <__swsetup_r+0x48>
 8018aca:	4628      	mov	r0, r5
 8018acc:	f7ff fdee 	bl	80186ac <_free_r>
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	6363      	str	r3, [r4, #52]	; 0x34
 8018ad4:	89a3      	ldrh	r3, [r4, #12]
 8018ad6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018ada:	81a3      	strh	r3, [r4, #12]
 8018adc:	2300      	movs	r3, #0
 8018ade:	6063      	str	r3, [r4, #4]
 8018ae0:	6923      	ldr	r3, [r4, #16]
 8018ae2:	6023      	str	r3, [r4, #0]
 8018ae4:	89a3      	ldrh	r3, [r4, #12]
 8018ae6:	f043 0308 	orr.w	r3, r3, #8
 8018aea:	81a3      	strh	r3, [r4, #12]
 8018aec:	6923      	ldr	r3, [r4, #16]
 8018aee:	b94b      	cbnz	r3, 8018b04 <__swsetup_r+0x7c>
 8018af0:	89a3      	ldrh	r3, [r4, #12]
 8018af2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018afa:	d003      	beq.n	8018b04 <__swsetup_r+0x7c>
 8018afc:	4621      	mov	r1, r4
 8018afe:	4628      	mov	r0, r5
 8018b00:	f000 f840 	bl	8018b84 <__smakebuf_r>
 8018b04:	89a0      	ldrh	r0, [r4, #12]
 8018b06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018b0a:	f010 0301 	ands.w	r3, r0, #1
 8018b0e:	d00a      	beq.n	8018b26 <__swsetup_r+0x9e>
 8018b10:	2300      	movs	r3, #0
 8018b12:	60a3      	str	r3, [r4, #8]
 8018b14:	6963      	ldr	r3, [r4, #20]
 8018b16:	425b      	negs	r3, r3
 8018b18:	61a3      	str	r3, [r4, #24]
 8018b1a:	6923      	ldr	r3, [r4, #16]
 8018b1c:	b943      	cbnz	r3, 8018b30 <__swsetup_r+0xa8>
 8018b1e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018b22:	d1c4      	bne.n	8018aae <__swsetup_r+0x26>
 8018b24:	bd38      	pop	{r3, r4, r5, pc}
 8018b26:	0781      	lsls	r1, r0, #30
 8018b28:	bf58      	it	pl
 8018b2a:	6963      	ldrpl	r3, [r4, #20]
 8018b2c:	60a3      	str	r3, [r4, #8]
 8018b2e:	e7f4      	b.n	8018b1a <__swsetup_r+0x92>
 8018b30:	2000      	movs	r0, #0
 8018b32:	e7f7      	b.n	8018b24 <__swsetup_r+0x9c>
 8018b34:	200001ec 	.word	0x200001ec

08018b38 <__swhatbuf_r>:
 8018b38:	b570      	push	{r4, r5, r6, lr}
 8018b3a:	460c      	mov	r4, r1
 8018b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b40:	2900      	cmp	r1, #0
 8018b42:	b096      	sub	sp, #88	; 0x58
 8018b44:	4615      	mov	r5, r2
 8018b46:	461e      	mov	r6, r3
 8018b48:	da0d      	bge.n	8018b66 <__swhatbuf_r+0x2e>
 8018b4a:	89a3      	ldrh	r3, [r4, #12]
 8018b4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018b50:	f04f 0100 	mov.w	r1, #0
 8018b54:	bf0c      	ite	eq
 8018b56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018b5a:	2340      	movne	r3, #64	; 0x40
 8018b5c:	2000      	movs	r0, #0
 8018b5e:	6031      	str	r1, [r6, #0]
 8018b60:	602b      	str	r3, [r5, #0]
 8018b62:	b016      	add	sp, #88	; 0x58
 8018b64:	bd70      	pop	{r4, r5, r6, pc}
 8018b66:	466a      	mov	r2, sp
 8018b68:	f000 f848 	bl	8018bfc <_fstat_r>
 8018b6c:	2800      	cmp	r0, #0
 8018b6e:	dbec      	blt.n	8018b4a <__swhatbuf_r+0x12>
 8018b70:	9901      	ldr	r1, [sp, #4]
 8018b72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018b76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018b7a:	4259      	negs	r1, r3
 8018b7c:	4159      	adcs	r1, r3
 8018b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018b82:	e7eb      	b.n	8018b5c <__swhatbuf_r+0x24>

08018b84 <__smakebuf_r>:
 8018b84:	898b      	ldrh	r3, [r1, #12]
 8018b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018b88:	079d      	lsls	r5, r3, #30
 8018b8a:	4606      	mov	r6, r0
 8018b8c:	460c      	mov	r4, r1
 8018b8e:	d507      	bpl.n	8018ba0 <__smakebuf_r+0x1c>
 8018b90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018b94:	6023      	str	r3, [r4, #0]
 8018b96:	6123      	str	r3, [r4, #16]
 8018b98:	2301      	movs	r3, #1
 8018b9a:	6163      	str	r3, [r4, #20]
 8018b9c:	b002      	add	sp, #8
 8018b9e:	bd70      	pop	{r4, r5, r6, pc}
 8018ba0:	ab01      	add	r3, sp, #4
 8018ba2:	466a      	mov	r2, sp
 8018ba4:	f7ff ffc8 	bl	8018b38 <__swhatbuf_r>
 8018ba8:	9900      	ldr	r1, [sp, #0]
 8018baa:	4605      	mov	r5, r0
 8018bac:	4630      	mov	r0, r6
 8018bae:	f7fe fe61 	bl	8017874 <_malloc_r>
 8018bb2:	b948      	cbnz	r0, 8018bc8 <__smakebuf_r+0x44>
 8018bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018bb8:	059a      	lsls	r2, r3, #22
 8018bba:	d4ef      	bmi.n	8018b9c <__smakebuf_r+0x18>
 8018bbc:	f023 0303 	bic.w	r3, r3, #3
 8018bc0:	f043 0302 	orr.w	r3, r3, #2
 8018bc4:	81a3      	strh	r3, [r4, #12]
 8018bc6:	e7e3      	b.n	8018b90 <__smakebuf_r+0xc>
 8018bc8:	89a3      	ldrh	r3, [r4, #12]
 8018bca:	6020      	str	r0, [r4, #0]
 8018bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018bd0:	81a3      	strh	r3, [r4, #12]
 8018bd2:	9b00      	ldr	r3, [sp, #0]
 8018bd4:	6163      	str	r3, [r4, #20]
 8018bd6:	9b01      	ldr	r3, [sp, #4]
 8018bd8:	6120      	str	r0, [r4, #16]
 8018bda:	b15b      	cbz	r3, 8018bf4 <__smakebuf_r+0x70>
 8018bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018be0:	4630      	mov	r0, r6
 8018be2:	f000 f81d 	bl	8018c20 <_isatty_r>
 8018be6:	b128      	cbz	r0, 8018bf4 <__smakebuf_r+0x70>
 8018be8:	89a3      	ldrh	r3, [r4, #12]
 8018bea:	f023 0303 	bic.w	r3, r3, #3
 8018bee:	f043 0301 	orr.w	r3, r3, #1
 8018bf2:	81a3      	strh	r3, [r4, #12]
 8018bf4:	89a3      	ldrh	r3, [r4, #12]
 8018bf6:	431d      	orrs	r5, r3
 8018bf8:	81a5      	strh	r5, [r4, #12]
 8018bfa:	e7cf      	b.n	8018b9c <__smakebuf_r+0x18>

08018bfc <_fstat_r>:
 8018bfc:	b538      	push	{r3, r4, r5, lr}
 8018bfe:	4d07      	ldr	r5, [pc, #28]	; (8018c1c <_fstat_r+0x20>)
 8018c00:	2300      	movs	r3, #0
 8018c02:	4604      	mov	r4, r0
 8018c04:	4608      	mov	r0, r1
 8018c06:	4611      	mov	r1, r2
 8018c08:	602b      	str	r3, [r5, #0]
 8018c0a:	f7ee fffa 	bl	8007c02 <_fstat>
 8018c0e:	1c43      	adds	r3, r0, #1
 8018c10:	d102      	bne.n	8018c18 <_fstat_r+0x1c>
 8018c12:	682b      	ldr	r3, [r5, #0]
 8018c14:	b103      	cbz	r3, 8018c18 <_fstat_r+0x1c>
 8018c16:	6023      	str	r3, [r4, #0]
 8018c18:	bd38      	pop	{r3, r4, r5, pc}
 8018c1a:	bf00      	nop
 8018c1c:	200032bc 	.word	0x200032bc

08018c20 <_isatty_r>:
 8018c20:	b538      	push	{r3, r4, r5, lr}
 8018c22:	4d06      	ldr	r5, [pc, #24]	; (8018c3c <_isatty_r+0x1c>)
 8018c24:	2300      	movs	r3, #0
 8018c26:	4604      	mov	r4, r0
 8018c28:	4608      	mov	r0, r1
 8018c2a:	602b      	str	r3, [r5, #0]
 8018c2c:	f7ee fff9 	bl	8007c22 <_isatty>
 8018c30:	1c43      	adds	r3, r0, #1
 8018c32:	d102      	bne.n	8018c3a <_isatty_r+0x1a>
 8018c34:	682b      	ldr	r3, [r5, #0]
 8018c36:	b103      	cbz	r3, 8018c3a <_isatty_r+0x1a>
 8018c38:	6023      	str	r3, [r4, #0]
 8018c3a:	bd38      	pop	{r3, r4, r5, pc}
 8018c3c:	200032bc 	.word	0x200032bc

08018c40 <_raise_r>:
 8018c40:	291f      	cmp	r1, #31
 8018c42:	b538      	push	{r3, r4, r5, lr}
 8018c44:	4604      	mov	r4, r0
 8018c46:	460d      	mov	r5, r1
 8018c48:	d904      	bls.n	8018c54 <_raise_r+0x14>
 8018c4a:	2316      	movs	r3, #22
 8018c4c:	6003      	str	r3, [r0, #0]
 8018c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018c52:	bd38      	pop	{r3, r4, r5, pc}
 8018c54:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018c56:	b112      	cbz	r2, 8018c5e <_raise_r+0x1e>
 8018c58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018c5c:	b94b      	cbnz	r3, 8018c72 <_raise_r+0x32>
 8018c5e:	4620      	mov	r0, r4
 8018c60:	f000 f830 	bl	8018cc4 <_getpid_r>
 8018c64:	462a      	mov	r2, r5
 8018c66:	4601      	mov	r1, r0
 8018c68:	4620      	mov	r0, r4
 8018c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c6e:	f000 b817 	b.w	8018ca0 <_kill_r>
 8018c72:	2b01      	cmp	r3, #1
 8018c74:	d00a      	beq.n	8018c8c <_raise_r+0x4c>
 8018c76:	1c59      	adds	r1, r3, #1
 8018c78:	d103      	bne.n	8018c82 <_raise_r+0x42>
 8018c7a:	2316      	movs	r3, #22
 8018c7c:	6003      	str	r3, [r0, #0]
 8018c7e:	2001      	movs	r0, #1
 8018c80:	e7e7      	b.n	8018c52 <_raise_r+0x12>
 8018c82:	2400      	movs	r4, #0
 8018c84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018c88:	4628      	mov	r0, r5
 8018c8a:	4798      	blx	r3
 8018c8c:	2000      	movs	r0, #0
 8018c8e:	e7e0      	b.n	8018c52 <_raise_r+0x12>

08018c90 <raise>:
 8018c90:	4b02      	ldr	r3, [pc, #8]	; (8018c9c <raise+0xc>)
 8018c92:	4601      	mov	r1, r0
 8018c94:	6818      	ldr	r0, [r3, #0]
 8018c96:	f7ff bfd3 	b.w	8018c40 <_raise_r>
 8018c9a:	bf00      	nop
 8018c9c:	200001ec 	.word	0x200001ec

08018ca0 <_kill_r>:
 8018ca0:	b538      	push	{r3, r4, r5, lr}
 8018ca2:	4d07      	ldr	r5, [pc, #28]	; (8018cc0 <_kill_r+0x20>)
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	4604      	mov	r4, r0
 8018ca8:	4608      	mov	r0, r1
 8018caa:	4611      	mov	r1, r2
 8018cac:	602b      	str	r3, [r5, #0]
 8018cae:	f7ee ff49 	bl	8007b44 <_kill>
 8018cb2:	1c43      	adds	r3, r0, #1
 8018cb4:	d102      	bne.n	8018cbc <_kill_r+0x1c>
 8018cb6:	682b      	ldr	r3, [r5, #0]
 8018cb8:	b103      	cbz	r3, 8018cbc <_kill_r+0x1c>
 8018cba:	6023      	str	r3, [r4, #0]
 8018cbc:	bd38      	pop	{r3, r4, r5, pc}
 8018cbe:	bf00      	nop
 8018cc0:	200032bc 	.word	0x200032bc

08018cc4 <_getpid_r>:
 8018cc4:	f7ee bf36 	b.w	8007b34 <_getpid>

08018cc8 <asinf>:
 8018cc8:	b508      	push	{r3, lr}
 8018cca:	ed2d 8b02 	vpush	{d8}
 8018cce:	eeb0 8a40 	vmov.f32	s16, s0
 8018cd2:	f001 f803 	bl	8019cdc <__ieee754_asinf>
 8018cd6:	eeb4 8a48 	vcmp.f32	s16, s16
 8018cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cde:	eef0 8a40 	vmov.f32	s17, s0
 8018ce2:	d615      	bvs.n	8018d10 <asinf+0x48>
 8018ce4:	eeb0 0a48 	vmov.f32	s0, s16
 8018ce8:	f000 fb9c 	bl	8019424 <fabsf>
 8018cec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018cf0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cf8:	dd0a      	ble.n	8018d10 <asinf+0x48>
 8018cfa:	f7fd fa1d 	bl	8016138 <__errno>
 8018cfe:	ecbd 8b02 	vpop	{d8}
 8018d02:	2321      	movs	r3, #33	; 0x21
 8018d04:	6003      	str	r3, [r0, #0]
 8018d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018d0a:	4804      	ldr	r0, [pc, #16]	; (8018d1c <asinf+0x54>)
 8018d0c:	f7fd ba58 	b.w	80161c0 <nanf>
 8018d10:	eeb0 0a68 	vmov.f32	s0, s17
 8018d14:	ecbd 8b02 	vpop	{d8}
 8018d18:	bd08      	pop	{r3, pc}
 8018d1a:	bf00      	nop
 8018d1c:	0801caf7 	.word	0x0801caf7

08018d20 <atan2f>:
 8018d20:	f001 b8c2 	b.w	8019ea8 <__ieee754_atan2f>

08018d24 <asin>:
 8018d24:	b538      	push	{r3, r4, r5, lr}
 8018d26:	ed2d 8b02 	vpush	{d8}
 8018d2a:	ec55 4b10 	vmov	r4, r5, d0
 8018d2e:	f000 f82f 	bl	8018d90 <__ieee754_asin>
 8018d32:	4622      	mov	r2, r4
 8018d34:	462b      	mov	r3, r5
 8018d36:	4620      	mov	r0, r4
 8018d38:	4629      	mov	r1, r5
 8018d3a:	eeb0 8a40 	vmov.f32	s16, s0
 8018d3e:	eef0 8a60 	vmov.f32	s17, s1
 8018d42:	f7e7 fef3 	bl	8000b2c <__aeabi_dcmpun>
 8018d46:	b9a8      	cbnz	r0, 8018d74 <asin+0x50>
 8018d48:	ec45 4b10 	vmov	d0, r4, r5
 8018d4c:	f000 fdb0 	bl	80198b0 <fabs>
 8018d50:	4b0c      	ldr	r3, [pc, #48]	; (8018d84 <asin+0x60>)
 8018d52:	ec51 0b10 	vmov	r0, r1, d0
 8018d56:	2200      	movs	r2, #0
 8018d58:	f7e7 fede 	bl	8000b18 <__aeabi_dcmpgt>
 8018d5c:	b150      	cbz	r0, 8018d74 <asin+0x50>
 8018d5e:	f7fd f9eb 	bl	8016138 <__errno>
 8018d62:	ecbd 8b02 	vpop	{d8}
 8018d66:	2321      	movs	r3, #33	; 0x21
 8018d68:	6003      	str	r3, [r0, #0]
 8018d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d6e:	4806      	ldr	r0, [pc, #24]	; (8018d88 <asin+0x64>)
 8018d70:	f7fd ba1e 	b.w	80161b0 <nan>
 8018d74:	eeb0 0a48 	vmov.f32	s0, s16
 8018d78:	eef0 0a68 	vmov.f32	s1, s17
 8018d7c:	ecbd 8b02 	vpop	{d8}
 8018d80:	bd38      	pop	{r3, r4, r5, pc}
 8018d82:	bf00      	nop
 8018d84:	3ff00000 	.word	0x3ff00000
 8018d88:	0801caf7 	.word	0x0801caf7

08018d8c <atan2>:
 8018d8c:	f000 ba14 	b.w	80191b8 <__ieee754_atan2>

08018d90 <__ieee754_asin>:
 8018d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d94:	ed2d 8b04 	vpush	{d8-d9}
 8018d98:	ec55 4b10 	vmov	r4, r5, d0
 8018d9c:	4bcc      	ldr	r3, [pc, #816]	; (80190d0 <__ieee754_asin+0x340>)
 8018d9e:	b083      	sub	sp, #12
 8018da0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8018da4:	4598      	cmp	r8, r3
 8018da6:	9501      	str	r5, [sp, #4]
 8018da8:	dd33      	ble.n	8018e12 <__ieee754_asin+0x82>
 8018daa:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8018dae:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8018db2:	ea58 0804 	orrs.w	r8, r8, r4
 8018db6:	d117      	bne.n	8018de8 <__ieee754_asin+0x58>
 8018db8:	a3ab      	add	r3, pc, #684	; (adr r3, 8019068 <__ieee754_asin+0x2d8>)
 8018dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dbe:	ee10 0a10 	vmov	r0, s0
 8018dc2:	4629      	mov	r1, r5
 8018dc4:	f7e7 fc18 	bl	80005f8 <__aeabi_dmul>
 8018dc8:	a3a9      	add	r3, pc, #676	; (adr r3, 8019070 <__ieee754_asin+0x2e0>)
 8018dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dce:	4606      	mov	r6, r0
 8018dd0:	460f      	mov	r7, r1
 8018dd2:	4620      	mov	r0, r4
 8018dd4:	4629      	mov	r1, r5
 8018dd6:	f7e7 fc0f 	bl	80005f8 <__aeabi_dmul>
 8018dda:	4602      	mov	r2, r0
 8018ddc:	460b      	mov	r3, r1
 8018dde:	4630      	mov	r0, r6
 8018de0:	4639      	mov	r1, r7
 8018de2:	f7e7 fa53 	bl	800028c <__adddf3>
 8018de6:	e00b      	b.n	8018e00 <__ieee754_asin+0x70>
 8018de8:	ee10 2a10 	vmov	r2, s0
 8018dec:	462b      	mov	r3, r5
 8018dee:	ee10 0a10 	vmov	r0, s0
 8018df2:	4629      	mov	r1, r5
 8018df4:	f7e7 fa48 	bl	8000288 <__aeabi_dsub>
 8018df8:	4602      	mov	r2, r0
 8018dfa:	460b      	mov	r3, r1
 8018dfc:	f7e7 fd26 	bl	800084c <__aeabi_ddiv>
 8018e00:	4604      	mov	r4, r0
 8018e02:	460d      	mov	r5, r1
 8018e04:	ec45 4b10 	vmov	d0, r4, r5
 8018e08:	b003      	add	sp, #12
 8018e0a:	ecbd 8b04 	vpop	{d8-d9}
 8018e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e12:	4bb0      	ldr	r3, [pc, #704]	; (80190d4 <__ieee754_asin+0x344>)
 8018e14:	4598      	cmp	r8, r3
 8018e16:	dc11      	bgt.n	8018e3c <__ieee754_asin+0xac>
 8018e18:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8018e1c:	f280 80ae 	bge.w	8018f7c <__ieee754_asin+0x1ec>
 8018e20:	a395      	add	r3, pc, #596	; (adr r3, 8019078 <__ieee754_asin+0x2e8>)
 8018e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e26:	ee10 0a10 	vmov	r0, s0
 8018e2a:	4629      	mov	r1, r5
 8018e2c:	f7e7 fa2e 	bl	800028c <__adddf3>
 8018e30:	4ba9      	ldr	r3, [pc, #676]	; (80190d8 <__ieee754_asin+0x348>)
 8018e32:	2200      	movs	r2, #0
 8018e34:	f7e7 fe70 	bl	8000b18 <__aeabi_dcmpgt>
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	d1e3      	bne.n	8018e04 <__ieee754_asin+0x74>
 8018e3c:	ec45 4b10 	vmov	d0, r4, r5
 8018e40:	f000 fd36 	bl	80198b0 <fabs>
 8018e44:	49a4      	ldr	r1, [pc, #656]	; (80190d8 <__ieee754_asin+0x348>)
 8018e46:	ec53 2b10 	vmov	r2, r3, d0
 8018e4a:	2000      	movs	r0, #0
 8018e4c:	f7e7 fa1c 	bl	8000288 <__aeabi_dsub>
 8018e50:	4ba2      	ldr	r3, [pc, #648]	; (80190dc <__ieee754_asin+0x34c>)
 8018e52:	2200      	movs	r2, #0
 8018e54:	f7e7 fbd0 	bl	80005f8 <__aeabi_dmul>
 8018e58:	a389      	add	r3, pc, #548	; (adr r3, 8019080 <__ieee754_asin+0x2f0>)
 8018e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e5e:	4604      	mov	r4, r0
 8018e60:	460d      	mov	r5, r1
 8018e62:	f7e7 fbc9 	bl	80005f8 <__aeabi_dmul>
 8018e66:	a388      	add	r3, pc, #544	; (adr r3, 8019088 <__ieee754_asin+0x2f8>)
 8018e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e6c:	f7e7 fa0e 	bl	800028c <__adddf3>
 8018e70:	4622      	mov	r2, r4
 8018e72:	462b      	mov	r3, r5
 8018e74:	f7e7 fbc0 	bl	80005f8 <__aeabi_dmul>
 8018e78:	a385      	add	r3, pc, #532	; (adr r3, 8019090 <__ieee754_asin+0x300>)
 8018e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e7e:	f7e7 fa03 	bl	8000288 <__aeabi_dsub>
 8018e82:	4622      	mov	r2, r4
 8018e84:	462b      	mov	r3, r5
 8018e86:	f7e7 fbb7 	bl	80005f8 <__aeabi_dmul>
 8018e8a:	a383      	add	r3, pc, #524	; (adr r3, 8019098 <__ieee754_asin+0x308>)
 8018e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e90:	f7e7 f9fc 	bl	800028c <__adddf3>
 8018e94:	4622      	mov	r2, r4
 8018e96:	462b      	mov	r3, r5
 8018e98:	f7e7 fbae 	bl	80005f8 <__aeabi_dmul>
 8018e9c:	a380      	add	r3, pc, #512	; (adr r3, 80190a0 <__ieee754_asin+0x310>)
 8018e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ea2:	f7e7 f9f1 	bl	8000288 <__aeabi_dsub>
 8018ea6:	4622      	mov	r2, r4
 8018ea8:	462b      	mov	r3, r5
 8018eaa:	f7e7 fba5 	bl	80005f8 <__aeabi_dmul>
 8018eae:	a37e      	add	r3, pc, #504	; (adr r3, 80190a8 <__ieee754_asin+0x318>)
 8018eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eb4:	f7e7 f9ea 	bl	800028c <__adddf3>
 8018eb8:	4622      	mov	r2, r4
 8018eba:	462b      	mov	r3, r5
 8018ebc:	f7e7 fb9c 	bl	80005f8 <__aeabi_dmul>
 8018ec0:	a37b      	add	r3, pc, #492	; (adr r3, 80190b0 <__ieee754_asin+0x320>)
 8018ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ec6:	ec41 0b18 	vmov	d8, r0, r1
 8018eca:	4620      	mov	r0, r4
 8018ecc:	4629      	mov	r1, r5
 8018ece:	f7e7 fb93 	bl	80005f8 <__aeabi_dmul>
 8018ed2:	a379      	add	r3, pc, #484	; (adr r3, 80190b8 <__ieee754_asin+0x328>)
 8018ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ed8:	f7e7 f9d6 	bl	8000288 <__aeabi_dsub>
 8018edc:	4622      	mov	r2, r4
 8018ede:	462b      	mov	r3, r5
 8018ee0:	f7e7 fb8a 	bl	80005f8 <__aeabi_dmul>
 8018ee4:	a376      	add	r3, pc, #472	; (adr r3, 80190c0 <__ieee754_asin+0x330>)
 8018ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eea:	f7e7 f9cf 	bl	800028c <__adddf3>
 8018eee:	4622      	mov	r2, r4
 8018ef0:	462b      	mov	r3, r5
 8018ef2:	f7e7 fb81 	bl	80005f8 <__aeabi_dmul>
 8018ef6:	a374      	add	r3, pc, #464	; (adr r3, 80190c8 <__ieee754_asin+0x338>)
 8018ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018efc:	f7e7 f9c4 	bl	8000288 <__aeabi_dsub>
 8018f00:	4622      	mov	r2, r4
 8018f02:	462b      	mov	r3, r5
 8018f04:	f7e7 fb78 	bl	80005f8 <__aeabi_dmul>
 8018f08:	4b73      	ldr	r3, [pc, #460]	; (80190d8 <__ieee754_asin+0x348>)
 8018f0a:	2200      	movs	r2, #0
 8018f0c:	f7e7 f9be 	bl	800028c <__adddf3>
 8018f10:	ec45 4b10 	vmov	d0, r4, r5
 8018f14:	4606      	mov	r6, r0
 8018f16:	460f      	mov	r7, r1
 8018f18:	f001 f866 	bl	8019fe8 <__ieee754_sqrt>
 8018f1c:	4b70      	ldr	r3, [pc, #448]	; (80190e0 <__ieee754_asin+0x350>)
 8018f1e:	4598      	cmp	r8, r3
 8018f20:	ec5b ab10 	vmov	sl, fp, d0
 8018f24:	f340 80de 	ble.w	80190e4 <__ieee754_asin+0x354>
 8018f28:	4632      	mov	r2, r6
 8018f2a:	463b      	mov	r3, r7
 8018f2c:	ec51 0b18 	vmov	r0, r1, d8
 8018f30:	f7e7 fc8c 	bl	800084c <__aeabi_ddiv>
 8018f34:	4652      	mov	r2, sl
 8018f36:	465b      	mov	r3, fp
 8018f38:	f7e7 fb5e 	bl	80005f8 <__aeabi_dmul>
 8018f3c:	4652      	mov	r2, sl
 8018f3e:	465b      	mov	r3, fp
 8018f40:	f7e7 f9a4 	bl	800028c <__adddf3>
 8018f44:	4602      	mov	r2, r0
 8018f46:	460b      	mov	r3, r1
 8018f48:	f7e7 f9a0 	bl	800028c <__adddf3>
 8018f4c:	a348      	add	r3, pc, #288	; (adr r3, 8019070 <__ieee754_asin+0x2e0>)
 8018f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f52:	f7e7 f999 	bl	8000288 <__aeabi_dsub>
 8018f56:	4602      	mov	r2, r0
 8018f58:	460b      	mov	r3, r1
 8018f5a:	a143      	add	r1, pc, #268	; (adr r1, 8019068 <__ieee754_asin+0x2d8>)
 8018f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f60:	f7e7 f992 	bl	8000288 <__aeabi_dsub>
 8018f64:	9b01      	ldr	r3, [sp, #4]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	bfdc      	itt	le
 8018f6a:	4602      	movle	r2, r0
 8018f6c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8018f70:	4604      	mov	r4, r0
 8018f72:	460d      	mov	r5, r1
 8018f74:	bfdc      	itt	le
 8018f76:	4614      	movle	r4, r2
 8018f78:	461d      	movle	r5, r3
 8018f7a:	e743      	b.n	8018e04 <__ieee754_asin+0x74>
 8018f7c:	ee10 2a10 	vmov	r2, s0
 8018f80:	ee10 0a10 	vmov	r0, s0
 8018f84:	462b      	mov	r3, r5
 8018f86:	4629      	mov	r1, r5
 8018f88:	f7e7 fb36 	bl	80005f8 <__aeabi_dmul>
 8018f8c:	a33c      	add	r3, pc, #240	; (adr r3, 8019080 <__ieee754_asin+0x2f0>)
 8018f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f92:	4606      	mov	r6, r0
 8018f94:	460f      	mov	r7, r1
 8018f96:	f7e7 fb2f 	bl	80005f8 <__aeabi_dmul>
 8018f9a:	a33b      	add	r3, pc, #236	; (adr r3, 8019088 <__ieee754_asin+0x2f8>)
 8018f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fa0:	f7e7 f974 	bl	800028c <__adddf3>
 8018fa4:	4632      	mov	r2, r6
 8018fa6:	463b      	mov	r3, r7
 8018fa8:	f7e7 fb26 	bl	80005f8 <__aeabi_dmul>
 8018fac:	a338      	add	r3, pc, #224	; (adr r3, 8019090 <__ieee754_asin+0x300>)
 8018fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fb2:	f7e7 f969 	bl	8000288 <__aeabi_dsub>
 8018fb6:	4632      	mov	r2, r6
 8018fb8:	463b      	mov	r3, r7
 8018fba:	f7e7 fb1d 	bl	80005f8 <__aeabi_dmul>
 8018fbe:	a336      	add	r3, pc, #216	; (adr r3, 8019098 <__ieee754_asin+0x308>)
 8018fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fc4:	f7e7 f962 	bl	800028c <__adddf3>
 8018fc8:	4632      	mov	r2, r6
 8018fca:	463b      	mov	r3, r7
 8018fcc:	f7e7 fb14 	bl	80005f8 <__aeabi_dmul>
 8018fd0:	a333      	add	r3, pc, #204	; (adr r3, 80190a0 <__ieee754_asin+0x310>)
 8018fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fd6:	f7e7 f957 	bl	8000288 <__aeabi_dsub>
 8018fda:	4632      	mov	r2, r6
 8018fdc:	463b      	mov	r3, r7
 8018fde:	f7e7 fb0b 	bl	80005f8 <__aeabi_dmul>
 8018fe2:	a331      	add	r3, pc, #196	; (adr r3, 80190a8 <__ieee754_asin+0x318>)
 8018fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fe8:	f7e7 f950 	bl	800028c <__adddf3>
 8018fec:	4632      	mov	r2, r6
 8018fee:	463b      	mov	r3, r7
 8018ff0:	f7e7 fb02 	bl	80005f8 <__aeabi_dmul>
 8018ff4:	a32e      	add	r3, pc, #184	; (adr r3, 80190b0 <__ieee754_asin+0x320>)
 8018ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ffa:	4680      	mov	r8, r0
 8018ffc:	4689      	mov	r9, r1
 8018ffe:	4630      	mov	r0, r6
 8019000:	4639      	mov	r1, r7
 8019002:	f7e7 faf9 	bl	80005f8 <__aeabi_dmul>
 8019006:	a32c      	add	r3, pc, #176	; (adr r3, 80190b8 <__ieee754_asin+0x328>)
 8019008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801900c:	f7e7 f93c 	bl	8000288 <__aeabi_dsub>
 8019010:	4632      	mov	r2, r6
 8019012:	463b      	mov	r3, r7
 8019014:	f7e7 faf0 	bl	80005f8 <__aeabi_dmul>
 8019018:	a329      	add	r3, pc, #164	; (adr r3, 80190c0 <__ieee754_asin+0x330>)
 801901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801901e:	f7e7 f935 	bl	800028c <__adddf3>
 8019022:	4632      	mov	r2, r6
 8019024:	463b      	mov	r3, r7
 8019026:	f7e7 fae7 	bl	80005f8 <__aeabi_dmul>
 801902a:	a327      	add	r3, pc, #156	; (adr r3, 80190c8 <__ieee754_asin+0x338>)
 801902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019030:	f7e7 f92a 	bl	8000288 <__aeabi_dsub>
 8019034:	4632      	mov	r2, r6
 8019036:	463b      	mov	r3, r7
 8019038:	f7e7 fade 	bl	80005f8 <__aeabi_dmul>
 801903c:	4b26      	ldr	r3, [pc, #152]	; (80190d8 <__ieee754_asin+0x348>)
 801903e:	2200      	movs	r2, #0
 8019040:	f7e7 f924 	bl	800028c <__adddf3>
 8019044:	4602      	mov	r2, r0
 8019046:	460b      	mov	r3, r1
 8019048:	4640      	mov	r0, r8
 801904a:	4649      	mov	r1, r9
 801904c:	f7e7 fbfe 	bl	800084c <__aeabi_ddiv>
 8019050:	4622      	mov	r2, r4
 8019052:	462b      	mov	r3, r5
 8019054:	f7e7 fad0 	bl	80005f8 <__aeabi_dmul>
 8019058:	4602      	mov	r2, r0
 801905a:	460b      	mov	r3, r1
 801905c:	4620      	mov	r0, r4
 801905e:	4629      	mov	r1, r5
 8019060:	e6bf      	b.n	8018de2 <__ieee754_asin+0x52>
 8019062:	bf00      	nop
 8019064:	f3af 8000 	nop.w
 8019068:	54442d18 	.word	0x54442d18
 801906c:	3ff921fb 	.word	0x3ff921fb
 8019070:	33145c07 	.word	0x33145c07
 8019074:	3c91a626 	.word	0x3c91a626
 8019078:	8800759c 	.word	0x8800759c
 801907c:	7e37e43c 	.word	0x7e37e43c
 8019080:	0dfdf709 	.word	0x0dfdf709
 8019084:	3f023de1 	.word	0x3f023de1
 8019088:	7501b288 	.word	0x7501b288
 801908c:	3f49efe0 	.word	0x3f49efe0
 8019090:	b5688f3b 	.word	0xb5688f3b
 8019094:	3fa48228 	.word	0x3fa48228
 8019098:	0e884455 	.word	0x0e884455
 801909c:	3fc9c155 	.word	0x3fc9c155
 80190a0:	03eb6f7d 	.word	0x03eb6f7d
 80190a4:	3fd4d612 	.word	0x3fd4d612
 80190a8:	55555555 	.word	0x55555555
 80190ac:	3fc55555 	.word	0x3fc55555
 80190b0:	b12e9282 	.word	0xb12e9282
 80190b4:	3fb3b8c5 	.word	0x3fb3b8c5
 80190b8:	1b8d0159 	.word	0x1b8d0159
 80190bc:	3fe6066c 	.word	0x3fe6066c
 80190c0:	9c598ac8 	.word	0x9c598ac8
 80190c4:	40002ae5 	.word	0x40002ae5
 80190c8:	1c8a2d4b 	.word	0x1c8a2d4b
 80190cc:	40033a27 	.word	0x40033a27
 80190d0:	3fefffff 	.word	0x3fefffff
 80190d4:	3fdfffff 	.word	0x3fdfffff
 80190d8:	3ff00000 	.word	0x3ff00000
 80190dc:	3fe00000 	.word	0x3fe00000
 80190e0:	3fef3332 	.word	0x3fef3332
 80190e4:	ee10 2a10 	vmov	r2, s0
 80190e8:	ee10 0a10 	vmov	r0, s0
 80190ec:	465b      	mov	r3, fp
 80190ee:	4659      	mov	r1, fp
 80190f0:	f7e7 f8cc 	bl	800028c <__adddf3>
 80190f4:	4632      	mov	r2, r6
 80190f6:	463b      	mov	r3, r7
 80190f8:	ec41 0b19 	vmov	d9, r0, r1
 80190fc:	ec51 0b18 	vmov	r0, r1, d8
 8019100:	f7e7 fba4 	bl	800084c <__aeabi_ddiv>
 8019104:	4602      	mov	r2, r0
 8019106:	460b      	mov	r3, r1
 8019108:	ec51 0b19 	vmov	r0, r1, d9
 801910c:	f7e7 fa74 	bl	80005f8 <__aeabi_dmul>
 8019110:	f04f 0800 	mov.w	r8, #0
 8019114:	4606      	mov	r6, r0
 8019116:	460f      	mov	r7, r1
 8019118:	4642      	mov	r2, r8
 801911a:	465b      	mov	r3, fp
 801911c:	4640      	mov	r0, r8
 801911e:	4659      	mov	r1, fp
 8019120:	f7e7 fa6a 	bl	80005f8 <__aeabi_dmul>
 8019124:	4602      	mov	r2, r0
 8019126:	460b      	mov	r3, r1
 8019128:	4620      	mov	r0, r4
 801912a:	4629      	mov	r1, r5
 801912c:	f7e7 f8ac 	bl	8000288 <__aeabi_dsub>
 8019130:	4642      	mov	r2, r8
 8019132:	4604      	mov	r4, r0
 8019134:	460d      	mov	r5, r1
 8019136:	465b      	mov	r3, fp
 8019138:	4650      	mov	r0, sl
 801913a:	4659      	mov	r1, fp
 801913c:	f7e7 f8a6 	bl	800028c <__adddf3>
 8019140:	4602      	mov	r2, r0
 8019142:	460b      	mov	r3, r1
 8019144:	4620      	mov	r0, r4
 8019146:	4629      	mov	r1, r5
 8019148:	f7e7 fb80 	bl	800084c <__aeabi_ddiv>
 801914c:	4602      	mov	r2, r0
 801914e:	460b      	mov	r3, r1
 8019150:	f7e7 f89c 	bl	800028c <__adddf3>
 8019154:	4602      	mov	r2, r0
 8019156:	460b      	mov	r3, r1
 8019158:	a113      	add	r1, pc, #76	; (adr r1, 80191a8 <__ieee754_asin+0x418>)
 801915a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801915e:	f7e7 f893 	bl	8000288 <__aeabi_dsub>
 8019162:	4602      	mov	r2, r0
 8019164:	460b      	mov	r3, r1
 8019166:	4630      	mov	r0, r6
 8019168:	4639      	mov	r1, r7
 801916a:	f7e7 f88d 	bl	8000288 <__aeabi_dsub>
 801916e:	4642      	mov	r2, r8
 8019170:	4604      	mov	r4, r0
 8019172:	460d      	mov	r5, r1
 8019174:	465b      	mov	r3, fp
 8019176:	4640      	mov	r0, r8
 8019178:	4659      	mov	r1, fp
 801917a:	f7e7 f887 	bl	800028c <__adddf3>
 801917e:	4602      	mov	r2, r0
 8019180:	460b      	mov	r3, r1
 8019182:	a10b      	add	r1, pc, #44	; (adr r1, 80191b0 <__ieee754_asin+0x420>)
 8019184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019188:	f7e7 f87e 	bl	8000288 <__aeabi_dsub>
 801918c:	4602      	mov	r2, r0
 801918e:	460b      	mov	r3, r1
 8019190:	4620      	mov	r0, r4
 8019192:	4629      	mov	r1, r5
 8019194:	f7e7 f878 	bl	8000288 <__aeabi_dsub>
 8019198:	4602      	mov	r2, r0
 801919a:	460b      	mov	r3, r1
 801919c:	a104      	add	r1, pc, #16	; (adr r1, 80191b0 <__ieee754_asin+0x420>)
 801919e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80191a2:	e6dd      	b.n	8018f60 <__ieee754_asin+0x1d0>
 80191a4:	f3af 8000 	nop.w
 80191a8:	33145c07 	.word	0x33145c07
 80191ac:	3c91a626 	.word	0x3c91a626
 80191b0:	54442d18 	.word	0x54442d18
 80191b4:	3fe921fb 	.word	0x3fe921fb

080191b8 <__ieee754_atan2>:
 80191b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191bc:	ec57 6b11 	vmov	r6, r7, d1
 80191c0:	4273      	negs	r3, r6
 80191c2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8019340 <__ieee754_atan2+0x188>
 80191c6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80191ca:	4333      	orrs	r3, r6
 80191cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80191d0:	4543      	cmp	r3, r8
 80191d2:	ec51 0b10 	vmov	r0, r1, d0
 80191d6:	ee11 5a10 	vmov	r5, s2
 80191da:	d80a      	bhi.n	80191f2 <__ieee754_atan2+0x3a>
 80191dc:	4244      	negs	r4, r0
 80191de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80191e2:	4304      	orrs	r4, r0
 80191e4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80191e8:	4544      	cmp	r4, r8
 80191ea:	ee10 9a10 	vmov	r9, s0
 80191ee:	468e      	mov	lr, r1
 80191f0:	d907      	bls.n	8019202 <__ieee754_atan2+0x4a>
 80191f2:	4632      	mov	r2, r6
 80191f4:	463b      	mov	r3, r7
 80191f6:	f7e7 f849 	bl	800028c <__adddf3>
 80191fa:	ec41 0b10 	vmov	d0, r0, r1
 80191fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019202:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8019206:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801920a:	4334      	orrs	r4, r6
 801920c:	d103      	bne.n	8019216 <__ieee754_atan2+0x5e>
 801920e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019212:	f000 b911 	b.w	8019438 <atan>
 8019216:	17bc      	asrs	r4, r7, #30
 8019218:	f004 0402 	and.w	r4, r4, #2
 801921c:	ea53 0909 	orrs.w	r9, r3, r9
 8019220:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019224:	d107      	bne.n	8019236 <__ieee754_atan2+0x7e>
 8019226:	2c02      	cmp	r4, #2
 8019228:	d05f      	beq.n	80192ea <__ieee754_atan2+0x132>
 801922a:	2c03      	cmp	r4, #3
 801922c:	d1e5      	bne.n	80191fa <__ieee754_atan2+0x42>
 801922e:	a140      	add	r1, pc, #256	; (adr r1, 8019330 <__ieee754_atan2+0x178>)
 8019230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019234:	e7e1      	b.n	80191fa <__ieee754_atan2+0x42>
 8019236:	4315      	orrs	r5, r2
 8019238:	d106      	bne.n	8019248 <__ieee754_atan2+0x90>
 801923a:	f1be 0f00 	cmp.w	lr, #0
 801923e:	da5f      	bge.n	8019300 <__ieee754_atan2+0x148>
 8019240:	a13d      	add	r1, pc, #244	; (adr r1, 8019338 <__ieee754_atan2+0x180>)
 8019242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019246:	e7d8      	b.n	80191fa <__ieee754_atan2+0x42>
 8019248:	4542      	cmp	r2, r8
 801924a:	d10f      	bne.n	801926c <__ieee754_atan2+0xb4>
 801924c:	4293      	cmp	r3, r2
 801924e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8019252:	d107      	bne.n	8019264 <__ieee754_atan2+0xac>
 8019254:	2c02      	cmp	r4, #2
 8019256:	d84c      	bhi.n	80192f2 <__ieee754_atan2+0x13a>
 8019258:	4b33      	ldr	r3, [pc, #204]	; (8019328 <__ieee754_atan2+0x170>)
 801925a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801925e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019262:	e7ca      	b.n	80191fa <__ieee754_atan2+0x42>
 8019264:	2c02      	cmp	r4, #2
 8019266:	d848      	bhi.n	80192fa <__ieee754_atan2+0x142>
 8019268:	4b30      	ldr	r3, [pc, #192]	; (801932c <__ieee754_atan2+0x174>)
 801926a:	e7f6      	b.n	801925a <__ieee754_atan2+0xa2>
 801926c:	4543      	cmp	r3, r8
 801926e:	d0e4      	beq.n	801923a <__ieee754_atan2+0x82>
 8019270:	1a9b      	subs	r3, r3, r2
 8019272:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8019276:	ea4f 5223 	mov.w	r2, r3, asr #20
 801927a:	da1e      	bge.n	80192ba <__ieee754_atan2+0x102>
 801927c:	2f00      	cmp	r7, #0
 801927e:	da01      	bge.n	8019284 <__ieee754_atan2+0xcc>
 8019280:	323c      	adds	r2, #60	; 0x3c
 8019282:	db1e      	blt.n	80192c2 <__ieee754_atan2+0x10a>
 8019284:	4632      	mov	r2, r6
 8019286:	463b      	mov	r3, r7
 8019288:	f7e7 fae0 	bl	800084c <__aeabi_ddiv>
 801928c:	ec41 0b10 	vmov	d0, r0, r1
 8019290:	f000 fb0e 	bl	80198b0 <fabs>
 8019294:	f000 f8d0 	bl	8019438 <atan>
 8019298:	ec51 0b10 	vmov	r0, r1, d0
 801929c:	2c01      	cmp	r4, #1
 801929e:	d013      	beq.n	80192c8 <__ieee754_atan2+0x110>
 80192a0:	2c02      	cmp	r4, #2
 80192a2:	d015      	beq.n	80192d0 <__ieee754_atan2+0x118>
 80192a4:	2c00      	cmp	r4, #0
 80192a6:	d0a8      	beq.n	80191fa <__ieee754_atan2+0x42>
 80192a8:	a317      	add	r3, pc, #92	; (adr r3, 8019308 <__ieee754_atan2+0x150>)
 80192aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ae:	f7e6 ffeb 	bl	8000288 <__aeabi_dsub>
 80192b2:	a317      	add	r3, pc, #92	; (adr r3, 8019310 <__ieee754_atan2+0x158>)
 80192b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192b8:	e014      	b.n	80192e4 <__ieee754_atan2+0x12c>
 80192ba:	a117      	add	r1, pc, #92	; (adr r1, 8019318 <__ieee754_atan2+0x160>)
 80192bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80192c0:	e7ec      	b.n	801929c <__ieee754_atan2+0xe4>
 80192c2:	2000      	movs	r0, #0
 80192c4:	2100      	movs	r1, #0
 80192c6:	e7e9      	b.n	801929c <__ieee754_atan2+0xe4>
 80192c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80192cc:	4619      	mov	r1, r3
 80192ce:	e794      	b.n	80191fa <__ieee754_atan2+0x42>
 80192d0:	a30d      	add	r3, pc, #52	; (adr r3, 8019308 <__ieee754_atan2+0x150>)
 80192d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192d6:	f7e6 ffd7 	bl	8000288 <__aeabi_dsub>
 80192da:	4602      	mov	r2, r0
 80192dc:	460b      	mov	r3, r1
 80192de:	a10c      	add	r1, pc, #48	; (adr r1, 8019310 <__ieee754_atan2+0x158>)
 80192e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80192e4:	f7e6 ffd0 	bl	8000288 <__aeabi_dsub>
 80192e8:	e787      	b.n	80191fa <__ieee754_atan2+0x42>
 80192ea:	a109      	add	r1, pc, #36	; (adr r1, 8019310 <__ieee754_atan2+0x158>)
 80192ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80192f0:	e783      	b.n	80191fa <__ieee754_atan2+0x42>
 80192f2:	a10b      	add	r1, pc, #44	; (adr r1, 8019320 <__ieee754_atan2+0x168>)
 80192f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80192f8:	e77f      	b.n	80191fa <__ieee754_atan2+0x42>
 80192fa:	2000      	movs	r0, #0
 80192fc:	2100      	movs	r1, #0
 80192fe:	e77c      	b.n	80191fa <__ieee754_atan2+0x42>
 8019300:	a105      	add	r1, pc, #20	; (adr r1, 8019318 <__ieee754_atan2+0x160>)
 8019302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019306:	e778      	b.n	80191fa <__ieee754_atan2+0x42>
 8019308:	33145c07 	.word	0x33145c07
 801930c:	3ca1a626 	.word	0x3ca1a626
 8019310:	54442d18 	.word	0x54442d18
 8019314:	400921fb 	.word	0x400921fb
 8019318:	54442d18 	.word	0x54442d18
 801931c:	3ff921fb 	.word	0x3ff921fb
 8019320:	54442d18 	.word	0x54442d18
 8019324:	3fe921fb 	.word	0x3fe921fb
 8019328:	0801caf8 	.word	0x0801caf8
 801932c:	0801cb10 	.word	0x0801cb10
 8019330:	54442d18 	.word	0x54442d18
 8019334:	c00921fb 	.word	0xc00921fb
 8019338:	54442d18 	.word	0x54442d18
 801933c:	bff921fb 	.word	0xbff921fb
 8019340:	7ff00000 	.word	0x7ff00000

08019344 <cosf>:
 8019344:	ee10 3a10 	vmov	r3, s0
 8019348:	b507      	push	{r0, r1, r2, lr}
 801934a:	4a1e      	ldr	r2, [pc, #120]	; (80193c4 <cosf+0x80>)
 801934c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019350:	4293      	cmp	r3, r2
 8019352:	dc06      	bgt.n	8019362 <cosf+0x1e>
 8019354:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80193c8 <cosf+0x84>
 8019358:	b003      	add	sp, #12
 801935a:	f85d eb04 	ldr.w	lr, [sp], #4
 801935e:	f000 bb37 	b.w	80199d0 <__kernel_cosf>
 8019362:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019366:	db04      	blt.n	8019372 <cosf+0x2e>
 8019368:	ee30 0a40 	vsub.f32	s0, s0, s0
 801936c:	b003      	add	sp, #12
 801936e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019372:	4668      	mov	r0, sp
 8019374:	f001 f818 	bl	801a3a8 <__ieee754_rem_pio2f>
 8019378:	f000 0003 	and.w	r0, r0, #3
 801937c:	2801      	cmp	r0, #1
 801937e:	d009      	beq.n	8019394 <cosf+0x50>
 8019380:	2802      	cmp	r0, #2
 8019382:	d010      	beq.n	80193a6 <cosf+0x62>
 8019384:	b9b0      	cbnz	r0, 80193b4 <cosf+0x70>
 8019386:	eddd 0a01 	vldr	s1, [sp, #4]
 801938a:	ed9d 0a00 	vldr	s0, [sp]
 801938e:	f000 fb1f 	bl	80199d0 <__kernel_cosf>
 8019392:	e7eb      	b.n	801936c <cosf+0x28>
 8019394:	eddd 0a01 	vldr	s1, [sp, #4]
 8019398:	ed9d 0a00 	vldr	s0, [sp]
 801939c:	f000 fb76 	bl	8019a8c <__kernel_sinf>
 80193a0:	eeb1 0a40 	vneg.f32	s0, s0
 80193a4:	e7e2      	b.n	801936c <cosf+0x28>
 80193a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80193aa:	ed9d 0a00 	vldr	s0, [sp]
 80193ae:	f000 fb0f 	bl	80199d0 <__kernel_cosf>
 80193b2:	e7f5      	b.n	80193a0 <cosf+0x5c>
 80193b4:	eddd 0a01 	vldr	s1, [sp, #4]
 80193b8:	ed9d 0a00 	vldr	s0, [sp]
 80193bc:	2001      	movs	r0, #1
 80193be:	f000 fb65 	bl	8019a8c <__kernel_sinf>
 80193c2:	e7d3      	b.n	801936c <cosf+0x28>
 80193c4:	3f490fd8 	.word	0x3f490fd8
 80193c8:	00000000 	.word	0x00000000

080193cc <sqrt>:
 80193cc:	b538      	push	{r3, r4, r5, lr}
 80193ce:	ed2d 8b02 	vpush	{d8}
 80193d2:	ec55 4b10 	vmov	r4, r5, d0
 80193d6:	f000 fe07 	bl	8019fe8 <__ieee754_sqrt>
 80193da:	4622      	mov	r2, r4
 80193dc:	462b      	mov	r3, r5
 80193de:	4620      	mov	r0, r4
 80193e0:	4629      	mov	r1, r5
 80193e2:	eeb0 8a40 	vmov.f32	s16, s0
 80193e6:	eef0 8a60 	vmov.f32	s17, s1
 80193ea:	f7e7 fb9f 	bl	8000b2c <__aeabi_dcmpun>
 80193ee:	b990      	cbnz	r0, 8019416 <sqrt+0x4a>
 80193f0:	2200      	movs	r2, #0
 80193f2:	2300      	movs	r3, #0
 80193f4:	4620      	mov	r0, r4
 80193f6:	4629      	mov	r1, r5
 80193f8:	f7e7 fb70 	bl	8000adc <__aeabi_dcmplt>
 80193fc:	b158      	cbz	r0, 8019416 <sqrt+0x4a>
 80193fe:	f7fc fe9b 	bl	8016138 <__errno>
 8019402:	2321      	movs	r3, #33	; 0x21
 8019404:	6003      	str	r3, [r0, #0]
 8019406:	2200      	movs	r2, #0
 8019408:	2300      	movs	r3, #0
 801940a:	4610      	mov	r0, r2
 801940c:	4619      	mov	r1, r3
 801940e:	f7e7 fa1d 	bl	800084c <__aeabi_ddiv>
 8019412:	ec41 0b18 	vmov	d8, r0, r1
 8019416:	eeb0 0a48 	vmov.f32	s0, s16
 801941a:	eef0 0a68 	vmov.f32	s1, s17
 801941e:	ecbd 8b02 	vpop	{d8}
 8019422:	bd38      	pop	{r3, r4, r5, pc}

08019424 <fabsf>:
 8019424:	ee10 3a10 	vmov	r3, s0
 8019428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801942c:	ee00 3a10 	vmov	s0, r3
 8019430:	4770      	bx	lr
 8019432:	0000      	movs	r0, r0
 8019434:	0000      	movs	r0, r0
	...

08019438 <atan>:
 8019438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801943c:	ec55 4b10 	vmov	r4, r5, d0
 8019440:	4bc3      	ldr	r3, [pc, #780]	; (8019750 <atan+0x318>)
 8019442:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019446:	429e      	cmp	r6, r3
 8019448:	46ab      	mov	fp, r5
 801944a:	dd18      	ble.n	801947e <atan+0x46>
 801944c:	4bc1      	ldr	r3, [pc, #772]	; (8019754 <atan+0x31c>)
 801944e:	429e      	cmp	r6, r3
 8019450:	dc01      	bgt.n	8019456 <atan+0x1e>
 8019452:	d109      	bne.n	8019468 <atan+0x30>
 8019454:	b144      	cbz	r4, 8019468 <atan+0x30>
 8019456:	4622      	mov	r2, r4
 8019458:	462b      	mov	r3, r5
 801945a:	4620      	mov	r0, r4
 801945c:	4629      	mov	r1, r5
 801945e:	f7e6 ff15 	bl	800028c <__adddf3>
 8019462:	4604      	mov	r4, r0
 8019464:	460d      	mov	r5, r1
 8019466:	e006      	b.n	8019476 <atan+0x3e>
 8019468:	f1bb 0f00 	cmp.w	fp, #0
 801946c:	f300 8131 	bgt.w	80196d2 <atan+0x29a>
 8019470:	a59b      	add	r5, pc, #620	; (adr r5, 80196e0 <atan+0x2a8>)
 8019472:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019476:	ec45 4b10 	vmov	d0, r4, r5
 801947a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801947e:	4bb6      	ldr	r3, [pc, #728]	; (8019758 <atan+0x320>)
 8019480:	429e      	cmp	r6, r3
 8019482:	dc14      	bgt.n	80194ae <atan+0x76>
 8019484:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8019488:	429e      	cmp	r6, r3
 801948a:	dc0d      	bgt.n	80194a8 <atan+0x70>
 801948c:	a396      	add	r3, pc, #600	; (adr r3, 80196e8 <atan+0x2b0>)
 801948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019492:	ee10 0a10 	vmov	r0, s0
 8019496:	4629      	mov	r1, r5
 8019498:	f7e6 fef8 	bl	800028c <__adddf3>
 801949c:	4baf      	ldr	r3, [pc, #700]	; (801975c <atan+0x324>)
 801949e:	2200      	movs	r2, #0
 80194a0:	f7e7 fb3a 	bl	8000b18 <__aeabi_dcmpgt>
 80194a4:	2800      	cmp	r0, #0
 80194a6:	d1e6      	bne.n	8019476 <atan+0x3e>
 80194a8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80194ac:	e02b      	b.n	8019506 <atan+0xce>
 80194ae:	f000 f9ff 	bl	80198b0 <fabs>
 80194b2:	4bab      	ldr	r3, [pc, #684]	; (8019760 <atan+0x328>)
 80194b4:	429e      	cmp	r6, r3
 80194b6:	ec55 4b10 	vmov	r4, r5, d0
 80194ba:	f300 80bf 	bgt.w	801963c <atan+0x204>
 80194be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80194c2:	429e      	cmp	r6, r3
 80194c4:	f300 80a0 	bgt.w	8019608 <atan+0x1d0>
 80194c8:	ee10 2a10 	vmov	r2, s0
 80194cc:	ee10 0a10 	vmov	r0, s0
 80194d0:	462b      	mov	r3, r5
 80194d2:	4629      	mov	r1, r5
 80194d4:	f7e6 feda 	bl	800028c <__adddf3>
 80194d8:	4ba0      	ldr	r3, [pc, #640]	; (801975c <atan+0x324>)
 80194da:	2200      	movs	r2, #0
 80194dc:	f7e6 fed4 	bl	8000288 <__aeabi_dsub>
 80194e0:	2200      	movs	r2, #0
 80194e2:	4606      	mov	r6, r0
 80194e4:	460f      	mov	r7, r1
 80194e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80194ea:	4620      	mov	r0, r4
 80194ec:	4629      	mov	r1, r5
 80194ee:	f7e6 fecd 	bl	800028c <__adddf3>
 80194f2:	4602      	mov	r2, r0
 80194f4:	460b      	mov	r3, r1
 80194f6:	4630      	mov	r0, r6
 80194f8:	4639      	mov	r1, r7
 80194fa:	f7e7 f9a7 	bl	800084c <__aeabi_ddiv>
 80194fe:	f04f 0a00 	mov.w	sl, #0
 8019502:	4604      	mov	r4, r0
 8019504:	460d      	mov	r5, r1
 8019506:	4622      	mov	r2, r4
 8019508:	462b      	mov	r3, r5
 801950a:	4620      	mov	r0, r4
 801950c:	4629      	mov	r1, r5
 801950e:	f7e7 f873 	bl	80005f8 <__aeabi_dmul>
 8019512:	4602      	mov	r2, r0
 8019514:	460b      	mov	r3, r1
 8019516:	4680      	mov	r8, r0
 8019518:	4689      	mov	r9, r1
 801951a:	f7e7 f86d 	bl	80005f8 <__aeabi_dmul>
 801951e:	a374      	add	r3, pc, #464	; (adr r3, 80196f0 <atan+0x2b8>)
 8019520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019524:	4606      	mov	r6, r0
 8019526:	460f      	mov	r7, r1
 8019528:	f7e7 f866 	bl	80005f8 <__aeabi_dmul>
 801952c:	a372      	add	r3, pc, #456	; (adr r3, 80196f8 <atan+0x2c0>)
 801952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019532:	f7e6 feab 	bl	800028c <__adddf3>
 8019536:	4632      	mov	r2, r6
 8019538:	463b      	mov	r3, r7
 801953a:	f7e7 f85d 	bl	80005f8 <__aeabi_dmul>
 801953e:	a370      	add	r3, pc, #448	; (adr r3, 8019700 <atan+0x2c8>)
 8019540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019544:	f7e6 fea2 	bl	800028c <__adddf3>
 8019548:	4632      	mov	r2, r6
 801954a:	463b      	mov	r3, r7
 801954c:	f7e7 f854 	bl	80005f8 <__aeabi_dmul>
 8019550:	a36d      	add	r3, pc, #436	; (adr r3, 8019708 <atan+0x2d0>)
 8019552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019556:	f7e6 fe99 	bl	800028c <__adddf3>
 801955a:	4632      	mov	r2, r6
 801955c:	463b      	mov	r3, r7
 801955e:	f7e7 f84b 	bl	80005f8 <__aeabi_dmul>
 8019562:	a36b      	add	r3, pc, #428	; (adr r3, 8019710 <atan+0x2d8>)
 8019564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019568:	f7e6 fe90 	bl	800028c <__adddf3>
 801956c:	4632      	mov	r2, r6
 801956e:	463b      	mov	r3, r7
 8019570:	f7e7 f842 	bl	80005f8 <__aeabi_dmul>
 8019574:	a368      	add	r3, pc, #416	; (adr r3, 8019718 <atan+0x2e0>)
 8019576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801957a:	f7e6 fe87 	bl	800028c <__adddf3>
 801957e:	4642      	mov	r2, r8
 8019580:	464b      	mov	r3, r9
 8019582:	f7e7 f839 	bl	80005f8 <__aeabi_dmul>
 8019586:	a366      	add	r3, pc, #408	; (adr r3, 8019720 <atan+0x2e8>)
 8019588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801958c:	4680      	mov	r8, r0
 801958e:	4689      	mov	r9, r1
 8019590:	4630      	mov	r0, r6
 8019592:	4639      	mov	r1, r7
 8019594:	f7e7 f830 	bl	80005f8 <__aeabi_dmul>
 8019598:	a363      	add	r3, pc, #396	; (adr r3, 8019728 <atan+0x2f0>)
 801959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801959e:	f7e6 fe73 	bl	8000288 <__aeabi_dsub>
 80195a2:	4632      	mov	r2, r6
 80195a4:	463b      	mov	r3, r7
 80195a6:	f7e7 f827 	bl	80005f8 <__aeabi_dmul>
 80195aa:	a361      	add	r3, pc, #388	; (adr r3, 8019730 <atan+0x2f8>)
 80195ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195b0:	f7e6 fe6a 	bl	8000288 <__aeabi_dsub>
 80195b4:	4632      	mov	r2, r6
 80195b6:	463b      	mov	r3, r7
 80195b8:	f7e7 f81e 	bl	80005f8 <__aeabi_dmul>
 80195bc:	a35e      	add	r3, pc, #376	; (adr r3, 8019738 <atan+0x300>)
 80195be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195c2:	f7e6 fe61 	bl	8000288 <__aeabi_dsub>
 80195c6:	4632      	mov	r2, r6
 80195c8:	463b      	mov	r3, r7
 80195ca:	f7e7 f815 	bl	80005f8 <__aeabi_dmul>
 80195ce:	a35c      	add	r3, pc, #368	; (adr r3, 8019740 <atan+0x308>)
 80195d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195d4:	f7e6 fe58 	bl	8000288 <__aeabi_dsub>
 80195d8:	4632      	mov	r2, r6
 80195da:	463b      	mov	r3, r7
 80195dc:	f7e7 f80c 	bl	80005f8 <__aeabi_dmul>
 80195e0:	4602      	mov	r2, r0
 80195e2:	460b      	mov	r3, r1
 80195e4:	4640      	mov	r0, r8
 80195e6:	4649      	mov	r1, r9
 80195e8:	f7e6 fe50 	bl	800028c <__adddf3>
 80195ec:	4622      	mov	r2, r4
 80195ee:	462b      	mov	r3, r5
 80195f0:	f7e7 f802 	bl	80005f8 <__aeabi_dmul>
 80195f4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80195f8:	4602      	mov	r2, r0
 80195fa:	460b      	mov	r3, r1
 80195fc:	d14b      	bne.n	8019696 <atan+0x25e>
 80195fe:	4620      	mov	r0, r4
 8019600:	4629      	mov	r1, r5
 8019602:	f7e6 fe41 	bl	8000288 <__aeabi_dsub>
 8019606:	e72c      	b.n	8019462 <atan+0x2a>
 8019608:	ee10 0a10 	vmov	r0, s0
 801960c:	4b53      	ldr	r3, [pc, #332]	; (801975c <atan+0x324>)
 801960e:	2200      	movs	r2, #0
 8019610:	4629      	mov	r1, r5
 8019612:	f7e6 fe39 	bl	8000288 <__aeabi_dsub>
 8019616:	4b51      	ldr	r3, [pc, #324]	; (801975c <atan+0x324>)
 8019618:	4606      	mov	r6, r0
 801961a:	460f      	mov	r7, r1
 801961c:	2200      	movs	r2, #0
 801961e:	4620      	mov	r0, r4
 8019620:	4629      	mov	r1, r5
 8019622:	f7e6 fe33 	bl	800028c <__adddf3>
 8019626:	4602      	mov	r2, r0
 8019628:	460b      	mov	r3, r1
 801962a:	4630      	mov	r0, r6
 801962c:	4639      	mov	r1, r7
 801962e:	f7e7 f90d 	bl	800084c <__aeabi_ddiv>
 8019632:	f04f 0a01 	mov.w	sl, #1
 8019636:	4604      	mov	r4, r0
 8019638:	460d      	mov	r5, r1
 801963a:	e764      	b.n	8019506 <atan+0xce>
 801963c:	4b49      	ldr	r3, [pc, #292]	; (8019764 <atan+0x32c>)
 801963e:	429e      	cmp	r6, r3
 8019640:	da1d      	bge.n	801967e <atan+0x246>
 8019642:	ee10 0a10 	vmov	r0, s0
 8019646:	4b48      	ldr	r3, [pc, #288]	; (8019768 <atan+0x330>)
 8019648:	2200      	movs	r2, #0
 801964a:	4629      	mov	r1, r5
 801964c:	f7e6 fe1c 	bl	8000288 <__aeabi_dsub>
 8019650:	4b45      	ldr	r3, [pc, #276]	; (8019768 <atan+0x330>)
 8019652:	4606      	mov	r6, r0
 8019654:	460f      	mov	r7, r1
 8019656:	2200      	movs	r2, #0
 8019658:	4620      	mov	r0, r4
 801965a:	4629      	mov	r1, r5
 801965c:	f7e6 ffcc 	bl	80005f8 <__aeabi_dmul>
 8019660:	4b3e      	ldr	r3, [pc, #248]	; (801975c <atan+0x324>)
 8019662:	2200      	movs	r2, #0
 8019664:	f7e6 fe12 	bl	800028c <__adddf3>
 8019668:	4602      	mov	r2, r0
 801966a:	460b      	mov	r3, r1
 801966c:	4630      	mov	r0, r6
 801966e:	4639      	mov	r1, r7
 8019670:	f7e7 f8ec 	bl	800084c <__aeabi_ddiv>
 8019674:	f04f 0a02 	mov.w	sl, #2
 8019678:	4604      	mov	r4, r0
 801967a:	460d      	mov	r5, r1
 801967c:	e743      	b.n	8019506 <atan+0xce>
 801967e:	462b      	mov	r3, r5
 8019680:	ee10 2a10 	vmov	r2, s0
 8019684:	4939      	ldr	r1, [pc, #228]	; (801976c <atan+0x334>)
 8019686:	2000      	movs	r0, #0
 8019688:	f7e7 f8e0 	bl	800084c <__aeabi_ddiv>
 801968c:	f04f 0a03 	mov.w	sl, #3
 8019690:	4604      	mov	r4, r0
 8019692:	460d      	mov	r5, r1
 8019694:	e737      	b.n	8019506 <atan+0xce>
 8019696:	4b36      	ldr	r3, [pc, #216]	; (8019770 <atan+0x338>)
 8019698:	4e36      	ldr	r6, [pc, #216]	; (8019774 <atan+0x33c>)
 801969a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196a2:	f7e6 fdf1 	bl	8000288 <__aeabi_dsub>
 80196a6:	4622      	mov	r2, r4
 80196a8:	462b      	mov	r3, r5
 80196aa:	f7e6 fded 	bl	8000288 <__aeabi_dsub>
 80196ae:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80196b2:	4602      	mov	r2, r0
 80196b4:	460b      	mov	r3, r1
 80196b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80196ba:	f7e6 fde5 	bl	8000288 <__aeabi_dsub>
 80196be:	f1bb 0f00 	cmp.w	fp, #0
 80196c2:	4604      	mov	r4, r0
 80196c4:	460d      	mov	r5, r1
 80196c6:	f6bf aed6 	bge.w	8019476 <atan+0x3e>
 80196ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80196ce:	461d      	mov	r5, r3
 80196d0:	e6d1      	b.n	8019476 <atan+0x3e>
 80196d2:	a51d      	add	r5, pc, #116	; (adr r5, 8019748 <atan+0x310>)
 80196d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80196d8:	e6cd      	b.n	8019476 <atan+0x3e>
 80196da:	bf00      	nop
 80196dc:	f3af 8000 	nop.w
 80196e0:	54442d18 	.word	0x54442d18
 80196e4:	bff921fb 	.word	0xbff921fb
 80196e8:	8800759c 	.word	0x8800759c
 80196ec:	7e37e43c 	.word	0x7e37e43c
 80196f0:	e322da11 	.word	0xe322da11
 80196f4:	3f90ad3a 	.word	0x3f90ad3a
 80196f8:	24760deb 	.word	0x24760deb
 80196fc:	3fa97b4b 	.word	0x3fa97b4b
 8019700:	a0d03d51 	.word	0xa0d03d51
 8019704:	3fb10d66 	.word	0x3fb10d66
 8019708:	c54c206e 	.word	0xc54c206e
 801970c:	3fb745cd 	.word	0x3fb745cd
 8019710:	920083ff 	.word	0x920083ff
 8019714:	3fc24924 	.word	0x3fc24924
 8019718:	5555550d 	.word	0x5555550d
 801971c:	3fd55555 	.word	0x3fd55555
 8019720:	2c6a6c2f 	.word	0x2c6a6c2f
 8019724:	bfa2b444 	.word	0xbfa2b444
 8019728:	52defd9a 	.word	0x52defd9a
 801972c:	3fadde2d 	.word	0x3fadde2d
 8019730:	af749a6d 	.word	0xaf749a6d
 8019734:	3fb3b0f2 	.word	0x3fb3b0f2
 8019738:	fe231671 	.word	0xfe231671
 801973c:	3fbc71c6 	.word	0x3fbc71c6
 8019740:	9998ebc4 	.word	0x9998ebc4
 8019744:	3fc99999 	.word	0x3fc99999
 8019748:	54442d18 	.word	0x54442d18
 801974c:	3ff921fb 	.word	0x3ff921fb
 8019750:	440fffff 	.word	0x440fffff
 8019754:	7ff00000 	.word	0x7ff00000
 8019758:	3fdbffff 	.word	0x3fdbffff
 801975c:	3ff00000 	.word	0x3ff00000
 8019760:	3ff2ffff 	.word	0x3ff2ffff
 8019764:	40038000 	.word	0x40038000
 8019768:	3ff80000 	.word	0x3ff80000
 801976c:	bff00000 	.word	0xbff00000
 8019770:	0801cb48 	.word	0x0801cb48
 8019774:	0801cb28 	.word	0x0801cb28

08019778 <sinf>:
 8019778:	ee10 3a10 	vmov	r3, s0
 801977c:	b507      	push	{r0, r1, r2, lr}
 801977e:	4a1f      	ldr	r2, [pc, #124]	; (80197fc <sinf+0x84>)
 8019780:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019784:	4293      	cmp	r3, r2
 8019786:	dc07      	bgt.n	8019798 <sinf+0x20>
 8019788:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8019800 <sinf+0x88>
 801978c:	2000      	movs	r0, #0
 801978e:	b003      	add	sp, #12
 8019790:	f85d eb04 	ldr.w	lr, [sp], #4
 8019794:	f000 b97a 	b.w	8019a8c <__kernel_sinf>
 8019798:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801979c:	db04      	blt.n	80197a8 <sinf+0x30>
 801979e:	ee30 0a40 	vsub.f32	s0, s0, s0
 80197a2:	b003      	add	sp, #12
 80197a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80197a8:	4668      	mov	r0, sp
 80197aa:	f000 fdfd 	bl	801a3a8 <__ieee754_rem_pio2f>
 80197ae:	f000 0003 	and.w	r0, r0, #3
 80197b2:	2801      	cmp	r0, #1
 80197b4:	d00a      	beq.n	80197cc <sinf+0x54>
 80197b6:	2802      	cmp	r0, #2
 80197b8:	d00f      	beq.n	80197da <sinf+0x62>
 80197ba:	b9c0      	cbnz	r0, 80197ee <sinf+0x76>
 80197bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80197c0:	ed9d 0a00 	vldr	s0, [sp]
 80197c4:	2001      	movs	r0, #1
 80197c6:	f000 f961 	bl	8019a8c <__kernel_sinf>
 80197ca:	e7ea      	b.n	80197a2 <sinf+0x2a>
 80197cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80197d0:	ed9d 0a00 	vldr	s0, [sp]
 80197d4:	f000 f8fc 	bl	80199d0 <__kernel_cosf>
 80197d8:	e7e3      	b.n	80197a2 <sinf+0x2a>
 80197da:	eddd 0a01 	vldr	s1, [sp, #4]
 80197de:	ed9d 0a00 	vldr	s0, [sp]
 80197e2:	2001      	movs	r0, #1
 80197e4:	f000 f952 	bl	8019a8c <__kernel_sinf>
 80197e8:	eeb1 0a40 	vneg.f32	s0, s0
 80197ec:	e7d9      	b.n	80197a2 <sinf+0x2a>
 80197ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80197f2:	ed9d 0a00 	vldr	s0, [sp]
 80197f6:	f000 f8eb 	bl	80199d0 <__kernel_cosf>
 80197fa:	e7f5      	b.n	80197e8 <sinf+0x70>
 80197fc:	3f490fd8 	.word	0x3f490fd8
	...

08019808 <cos>:
 8019808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801980a:	ec53 2b10 	vmov	r2, r3, d0
 801980e:	4826      	ldr	r0, [pc, #152]	; (80198a8 <cos+0xa0>)
 8019810:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019814:	4281      	cmp	r1, r0
 8019816:	dc06      	bgt.n	8019826 <cos+0x1e>
 8019818:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80198a0 <cos+0x98>
 801981c:	b005      	add	sp, #20
 801981e:	f85d eb04 	ldr.w	lr, [sp], #4
 8019822:	f001 bc45 	b.w	801b0b0 <__kernel_cos>
 8019826:	4821      	ldr	r0, [pc, #132]	; (80198ac <cos+0xa4>)
 8019828:	4281      	cmp	r1, r0
 801982a:	dd09      	ble.n	8019840 <cos+0x38>
 801982c:	ee10 0a10 	vmov	r0, s0
 8019830:	4619      	mov	r1, r3
 8019832:	f7e6 fd29 	bl	8000288 <__aeabi_dsub>
 8019836:	ec41 0b10 	vmov	d0, r0, r1
 801983a:	b005      	add	sp, #20
 801983c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019840:	4668      	mov	r0, sp
 8019842:	f000 fedd 	bl	801a600 <__ieee754_rem_pio2>
 8019846:	f000 0003 	and.w	r0, r0, #3
 801984a:	2801      	cmp	r0, #1
 801984c:	d00b      	beq.n	8019866 <cos+0x5e>
 801984e:	2802      	cmp	r0, #2
 8019850:	d016      	beq.n	8019880 <cos+0x78>
 8019852:	b9e0      	cbnz	r0, 801988e <cos+0x86>
 8019854:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019858:	ed9d 0b00 	vldr	d0, [sp]
 801985c:	f001 fc28 	bl	801b0b0 <__kernel_cos>
 8019860:	ec51 0b10 	vmov	r0, r1, d0
 8019864:	e7e7      	b.n	8019836 <cos+0x2e>
 8019866:	ed9d 1b02 	vldr	d1, [sp, #8]
 801986a:	ed9d 0b00 	vldr	d0, [sp]
 801986e:	f001 fce7 	bl	801b240 <__kernel_sin>
 8019872:	ec53 2b10 	vmov	r2, r3, d0
 8019876:	ee10 0a10 	vmov	r0, s0
 801987a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801987e:	e7da      	b.n	8019836 <cos+0x2e>
 8019880:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019884:	ed9d 0b00 	vldr	d0, [sp]
 8019888:	f001 fc12 	bl	801b0b0 <__kernel_cos>
 801988c:	e7f1      	b.n	8019872 <cos+0x6a>
 801988e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019892:	ed9d 0b00 	vldr	d0, [sp]
 8019896:	2001      	movs	r0, #1
 8019898:	f001 fcd2 	bl	801b240 <__kernel_sin>
 801989c:	e7e0      	b.n	8019860 <cos+0x58>
 801989e:	bf00      	nop
	...
 80198a8:	3fe921fb 	.word	0x3fe921fb
 80198ac:	7fefffff 	.word	0x7fefffff

080198b0 <fabs>:
 80198b0:	ec51 0b10 	vmov	r0, r1, d0
 80198b4:	ee10 2a10 	vmov	r2, s0
 80198b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80198bc:	ec43 2b10 	vmov	d0, r2, r3
 80198c0:	4770      	bx	lr
	...

080198c4 <tanf>:
 80198c4:	ee10 3a10 	vmov	r3, s0
 80198c8:	b507      	push	{r0, r1, r2, lr}
 80198ca:	4a12      	ldr	r2, [pc, #72]	; (8019914 <tanf+0x50>)
 80198cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80198d0:	4293      	cmp	r3, r2
 80198d2:	dc07      	bgt.n	80198e4 <tanf+0x20>
 80198d4:	eddf 0a10 	vldr	s1, [pc, #64]	; 8019918 <tanf+0x54>
 80198d8:	2001      	movs	r0, #1
 80198da:	b003      	add	sp, #12
 80198dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80198e0:	f000 b91c 	b.w	8019b1c <__kernel_tanf>
 80198e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80198e8:	db04      	blt.n	80198f4 <tanf+0x30>
 80198ea:	ee30 0a40 	vsub.f32	s0, s0, s0
 80198ee:	b003      	add	sp, #12
 80198f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80198f4:	4668      	mov	r0, sp
 80198f6:	f000 fd57 	bl	801a3a8 <__ieee754_rem_pio2f>
 80198fa:	0040      	lsls	r0, r0, #1
 80198fc:	f000 0002 	and.w	r0, r0, #2
 8019900:	eddd 0a01 	vldr	s1, [sp, #4]
 8019904:	ed9d 0a00 	vldr	s0, [sp]
 8019908:	f1c0 0001 	rsb	r0, r0, #1
 801990c:	f000 f906 	bl	8019b1c <__kernel_tanf>
 8019910:	e7ed      	b.n	80198ee <tanf+0x2a>
 8019912:	bf00      	nop
 8019914:	3f490fda 	.word	0x3f490fda
	...

08019920 <sin>:
 8019920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019922:	ec53 2b10 	vmov	r2, r3, d0
 8019926:	4828      	ldr	r0, [pc, #160]	; (80199c8 <sin+0xa8>)
 8019928:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801992c:	4281      	cmp	r1, r0
 801992e:	dc07      	bgt.n	8019940 <sin+0x20>
 8019930:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80199c0 <sin+0xa0>
 8019934:	2000      	movs	r0, #0
 8019936:	b005      	add	sp, #20
 8019938:	f85d eb04 	ldr.w	lr, [sp], #4
 801993c:	f001 bc80 	b.w	801b240 <__kernel_sin>
 8019940:	4822      	ldr	r0, [pc, #136]	; (80199cc <sin+0xac>)
 8019942:	4281      	cmp	r1, r0
 8019944:	dd09      	ble.n	801995a <sin+0x3a>
 8019946:	ee10 0a10 	vmov	r0, s0
 801994a:	4619      	mov	r1, r3
 801994c:	f7e6 fc9c 	bl	8000288 <__aeabi_dsub>
 8019950:	ec41 0b10 	vmov	d0, r0, r1
 8019954:	b005      	add	sp, #20
 8019956:	f85d fb04 	ldr.w	pc, [sp], #4
 801995a:	4668      	mov	r0, sp
 801995c:	f000 fe50 	bl	801a600 <__ieee754_rem_pio2>
 8019960:	f000 0003 	and.w	r0, r0, #3
 8019964:	2801      	cmp	r0, #1
 8019966:	d00c      	beq.n	8019982 <sin+0x62>
 8019968:	2802      	cmp	r0, #2
 801996a:	d011      	beq.n	8019990 <sin+0x70>
 801996c:	b9f0      	cbnz	r0, 80199ac <sin+0x8c>
 801996e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019972:	ed9d 0b00 	vldr	d0, [sp]
 8019976:	2001      	movs	r0, #1
 8019978:	f001 fc62 	bl	801b240 <__kernel_sin>
 801997c:	ec51 0b10 	vmov	r0, r1, d0
 8019980:	e7e6      	b.n	8019950 <sin+0x30>
 8019982:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019986:	ed9d 0b00 	vldr	d0, [sp]
 801998a:	f001 fb91 	bl	801b0b0 <__kernel_cos>
 801998e:	e7f5      	b.n	801997c <sin+0x5c>
 8019990:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019994:	ed9d 0b00 	vldr	d0, [sp]
 8019998:	2001      	movs	r0, #1
 801999a:	f001 fc51 	bl	801b240 <__kernel_sin>
 801999e:	ec53 2b10 	vmov	r2, r3, d0
 80199a2:	ee10 0a10 	vmov	r0, s0
 80199a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80199aa:	e7d1      	b.n	8019950 <sin+0x30>
 80199ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80199b0:	ed9d 0b00 	vldr	d0, [sp]
 80199b4:	f001 fb7c 	bl	801b0b0 <__kernel_cos>
 80199b8:	e7f1      	b.n	801999e <sin+0x7e>
 80199ba:	bf00      	nop
 80199bc:	f3af 8000 	nop.w
	...
 80199c8:	3fe921fb 	.word	0x3fe921fb
 80199cc:	7fefffff 	.word	0x7fefffff

080199d0 <__kernel_cosf>:
 80199d0:	ee10 3a10 	vmov	r3, s0
 80199d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80199d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80199dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80199e0:	da05      	bge.n	80199ee <__kernel_cosf+0x1e>
 80199e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80199e6:	ee17 2a90 	vmov	r2, s15
 80199ea:	2a00      	cmp	r2, #0
 80199ec:	d03b      	beq.n	8019a66 <__kernel_cosf+0x96>
 80199ee:	ee20 7a00 	vmul.f32	s14, s0, s0
 80199f2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8019a6c <__kernel_cosf+0x9c>
 80199f6:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8019a70 <__kernel_cosf+0xa0>
 80199fa:	4a1e      	ldr	r2, [pc, #120]	; (8019a74 <__kernel_cosf+0xa4>)
 80199fc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019a00:	4293      	cmp	r3, r2
 8019a02:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8019a78 <__kernel_cosf+0xa8>
 8019a06:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019a0a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8019a7c <__kernel_cosf+0xac>
 8019a0e:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019a12:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8019a80 <__kernel_cosf+0xb0>
 8019a16:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019a1a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8019a84 <__kernel_cosf+0xb4>
 8019a1e:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019a22:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8019a26:	ee26 6a07 	vmul.f32	s12, s12, s14
 8019a2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019a2e:	eee7 0a06 	vfma.f32	s1, s14, s12
 8019a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019a36:	dc04      	bgt.n	8019a42 <__kernel_cosf+0x72>
 8019a38:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019a3c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8019a40:	4770      	bx	lr
 8019a42:	4a11      	ldr	r2, [pc, #68]	; (8019a88 <__kernel_cosf+0xb8>)
 8019a44:	4293      	cmp	r3, r2
 8019a46:	bfda      	itte	le
 8019a48:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8019a4c:	ee07 3a10 	vmovle	s14, r3
 8019a50:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8019a54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a58:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8019a5c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019a60:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019a64:	4770      	bx	lr
 8019a66:	eeb0 0a66 	vmov.f32	s0, s13
 8019a6a:	4770      	bx	lr
 8019a6c:	ad47d74e 	.word	0xad47d74e
 8019a70:	310f74f6 	.word	0x310f74f6
 8019a74:	3e999999 	.word	0x3e999999
 8019a78:	b493f27c 	.word	0xb493f27c
 8019a7c:	37d00d01 	.word	0x37d00d01
 8019a80:	bab60b61 	.word	0xbab60b61
 8019a84:	3d2aaaab 	.word	0x3d2aaaab
 8019a88:	3f480000 	.word	0x3f480000

08019a8c <__kernel_sinf>:
 8019a8c:	ee10 3a10 	vmov	r3, s0
 8019a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019a94:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019a98:	da04      	bge.n	8019aa4 <__kernel_sinf+0x18>
 8019a9a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019a9e:	ee17 3a90 	vmov	r3, s15
 8019aa2:	b35b      	cbz	r3, 8019afc <__kernel_sinf+0x70>
 8019aa4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019aa8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019b00 <__kernel_sinf+0x74>
 8019aac:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8019b04 <__kernel_sinf+0x78>
 8019ab0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019ab4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8019b08 <__kernel_sinf+0x7c>
 8019ab8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019abc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8019b0c <__kernel_sinf+0x80>
 8019ac0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019ac4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8019b10 <__kernel_sinf+0x84>
 8019ac8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8019acc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019ad0:	b930      	cbnz	r0, 8019ae0 <__kernel_sinf+0x54>
 8019ad2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8019b14 <__kernel_sinf+0x88>
 8019ad6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019ada:	eea6 0a26 	vfma.f32	s0, s12, s13
 8019ade:	4770      	bx	lr
 8019ae0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019ae4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019ae8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8019aec:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8019af0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8019b18 <__kernel_sinf+0x8c>
 8019af4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019af8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019afc:	4770      	bx	lr
 8019afe:	bf00      	nop
 8019b00:	2f2ec9d3 	.word	0x2f2ec9d3
 8019b04:	b2d72f34 	.word	0xb2d72f34
 8019b08:	3638ef1b 	.word	0x3638ef1b
 8019b0c:	b9500d01 	.word	0xb9500d01
 8019b10:	3c088889 	.word	0x3c088889
 8019b14:	be2aaaab 	.word	0xbe2aaaab
 8019b18:	3e2aaaab 	.word	0x3e2aaaab

08019b1c <__kernel_tanf>:
 8019b1c:	b508      	push	{r3, lr}
 8019b1e:	ee10 3a10 	vmov	r3, s0
 8019b22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019b26:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8019b2a:	eef0 7a40 	vmov.f32	s15, s0
 8019b2e:	da17      	bge.n	8019b60 <__kernel_tanf+0x44>
 8019b30:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8019b34:	ee17 1a10 	vmov	r1, s14
 8019b38:	bb41      	cbnz	r1, 8019b8c <__kernel_tanf+0x70>
 8019b3a:	1c43      	adds	r3, r0, #1
 8019b3c:	4313      	orrs	r3, r2
 8019b3e:	d108      	bne.n	8019b52 <__kernel_tanf+0x36>
 8019b40:	f7ff fc70 	bl	8019424 <fabsf>
 8019b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019b48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8019b50:	bd08      	pop	{r3, pc}
 8019b52:	2801      	cmp	r0, #1
 8019b54:	d0fa      	beq.n	8019b4c <__kernel_tanf+0x30>
 8019b56:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019b5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019b5e:	e7f5      	b.n	8019b4c <__kernel_tanf+0x30>
 8019b60:	494c      	ldr	r1, [pc, #304]	; (8019c94 <__kernel_tanf+0x178>)
 8019b62:	428a      	cmp	r2, r1
 8019b64:	db12      	blt.n	8019b8c <__kernel_tanf+0x70>
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8019c98 <__kernel_tanf+0x17c>
 8019b6c:	bfb8      	it	lt
 8019b6e:	eef1 7a40 	vneglt.f32	s15, s0
 8019b72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019b76:	eddf 7a49 	vldr	s15, [pc, #292]	; 8019c9c <__kernel_tanf+0x180>
 8019b7a:	bfb8      	it	lt
 8019b7c:	eef1 0a60 	vneglt.f32	s1, s1
 8019b80:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019b84:	eddf 0a46 	vldr	s1, [pc, #280]	; 8019ca0 <__kernel_tanf+0x184>
 8019b88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b8c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8019b90:	eddf 5a44 	vldr	s11, [pc, #272]	; 8019ca4 <__kernel_tanf+0x188>
 8019b94:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8019ca8 <__kernel_tanf+0x18c>
 8019b98:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8019cac <__kernel_tanf+0x190>
 8019b9c:	493d      	ldr	r1, [pc, #244]	; (8019c94 <__kernel_tanf+0x178>)
 8019b9e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019ba2:	428a      	cmp	r2, r1
 8019ba4:	eea7 6a25 	vfma.f32	s12, s14, s11
 8019ba8:	eddf 5a41 	vldr	s11, [pc, #260]	; 8019cb0 <__kernel_tanf+0x194>
 8019bac:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019bb0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8019cb4 <__kernel_tanf+0x198>
 8019bb4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019bb8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8019cb8 <__kernel_tanf+0x19c>
 8019bbc:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019bc0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8019cbc <__kernel_tanf+0x1a0>
 8019bc4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019bc8:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8019cc0 <__kernel_tanf+0x1a4>
 8019bcc:	eee7 5a05 	vfma.f32	s11, s14, s10
 8019bd0:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8019cc4 <__kernel_tanf+0x1a8>
 8019bd4:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019bd8:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8019cc8 <__kernel_tanf+0x1ac>
 8019bdc:	eee5 5a07 	vfma.f32	s11, s10, s14
 8019be0:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8019ccc <__kernel_tanf+0x1b0>
 8019be4:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019be8:	eddf 5a39 	vldr	s11, [pc, #228]	; 8019cd0 <__kernel_tanf+0x1b4>
 8019bec:	eee5 5a07 	vfma.f32	s11, s10, s14
 8019bf0:	eeb0 7a46 	vmov.f32	s14, s12
 8019bf4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019bf8:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8019bfc:	eeb0 6a60 	vmov.f32	s12, s1
 8019c00:	eea7 6a05 	vfma.f32	s12, s14, s10
 8019c04:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8019cd4 <__kernel_tanf+0x1b8>
 8019c08:	eee6 0a26 	vfma.f32	s1, s12, s13
 8019c0c:	eee5 0a07 	vfma.f32	s1, s10, s14
 8019c10:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8019c14:	db1d      	blt.n	8019c52 <__kernel_tanf+0x136>
 8019c16:	ee07 0a10 	vmov	s14, r0
 8019c1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019c1e:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8019c22:	ee76 6a87 	vadd.f32	s13, s13, s14
 8019c26:	179b      	asrs	r3, r3, #30
 8019c28:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8019c2c:	f003 0302 	and.w	r3, r3, #2
 8019c30:	f1c3 0301 	rsb	r3, r3, #1
 8019c34:	ee76 6a60 	vsub.f32	s13, s12, s1
 8019c38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019c3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019c40:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019c44:	ee07 3a90 	vmov	s15, r3
 8019c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019c50:	e77c      	b.n	8019b4c <__kernel_tanf+0x30>
 8019c52:	2801      	cmp	r0, #1
 8019c54:	d01b      	beq.n	8019c8e <__kernel_tanf+0x172>
 8019c56:	4b20      	ldr	r3, [pc, #128]	; (8019cd8 <__kernel_tanf+0x1bc>)
 8019c58:	ee16 2a90 	vmov	r2, s13
 8019c5c:	401a      	ands	r2, r3
 8019c5e:	ee05 2a90 	vmov	s11, r2
 8019c62:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8019c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019c6a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019c6e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019c72:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8019c76:	ee16 2a10 	vmov	r2, s12
 8019c7a:	4013      	ands	r3, r2
 8019c7c:	ee07 3a90 	vmov	s15, r3
 8019c80:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019c84:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8019c88:	eee7 7a06 	vfma.f32	s15, s14, s12
 8019c8c:	e75e      	b.n	8019b4c <__kernel_tanf+0x30>
 8019c8e:	eef0 7a66 	vmov.f32	s15, s13
 8019c92:	e75b      	b.n	8019b4c <__kernel_tanf+0x30>
 8019c94:	3f2ca140 	.word	0x3f2ca140
 8019c98:	3f490fda 	.word	0x3f490fda
 8019c9c:	33222168 	.word	0x33222168
 8019ca0:	00000000 	.word	0x00000000
 8019ca4:	b79bae5f 	.word	0xb79bae5f
 8019ca8:	38a3f445 	.word	0x38a3f445
 8019cac:	37d95384 	.word	0x37d95384
 8019cb0:	3a1a26c8 	.word	0x3a1a26c8
 8019cb4:	3b6b6916 	.word	0x3b6b6916
 8019cb8:	3cb327a4 	.word	0x3cb327a4
 8019cbc:	3e088889 	.word	0x3e088889
 8019cc0:	3895c07a 	.word	0x3895c07a
 8019cc4:	398137b9 	.word	0x398137b9
 8019cc8:	3abede48 	.word	0x3abede48
 8019ccc:	3c11371f 	.word	0x3c11371f
 8019cd0:	3d5d0dd1 	.word	0x3d5d0dd1
 8019cd4:	3eaaaaab 	.word	0x3eaaaaab
 8019cd8:	fffff000 	.word	0xfffff000

08019cdc <__ieee754_asinf>:
 8019cdc:	b538      	push	{r3, r4, r5, lr}
 8019cde:	ee10 5a10 	vmov	r5, s0
 8019ce2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8019ce6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8019cea:	ed2d 8b04 	vpush	{d8-d9}
 8019cee:	d10c      	bne.n	8019d0a <__ieee754_asinf+0x2e>
 8019cf0:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8019e68 <__ieee754_asinf+0x18c>
 8019cf4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8019e6c <__ieee754_asinf+0x190>
 8019cf8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019cfc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019d00:	eeb0 0a67 	vmov.f32	s0, s15
 8019d04:	ecbd 8b04 	vpop	{d8-d9}
 8019d08:	bd38      	pop	{r3, r4, r5, pc}
 8019d0a:	dd04      	ble.n	8019d16 <__ieee754_asinf+0x3a>
 8019d0c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019d10:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019d14:	e7f6      	b.n	8019d04 <__ieee754_asinf+0x28>
 8019d16:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8019d1a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8019d1e:	da0b      	bge.n	8019d38 <__ieee754_asinf+0x5c>
 8019d20:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8019d24:	da52      	bge.n	8019dcc <__ieee754_asinf+0xf0>
 8019d26:	eddf 7a52 	vldr	s15, [pc, #328]	; 8019e70 <__ieee754_asinf+0x194>
 8019d2a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8019d2e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8019d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d36:	dce5      	bgt.n	8019d04 <__ieee754_asinf+0x28>
 8019d38:	f7ff fb74 	bl	8019424 <fabsf>
 8019d3c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8019d40:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019d44:	ee20 8a27 	vmul.f32	s16, s0, s15
 8019d48:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8019e74 <__ieee754_asinf+0x198>
 8019d4c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8019e78 <__ieee754_asinf+0x19c>
 8019d50:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8019e7c <__ieee754_asinf+0x1a0>
 8019d54:	eea8 7a27 	vfma.f32	s14, s16, s15
 8019d58:	eddf 7a49 	vldr	s15, [pc, #292]	; 8019e80 <__ieee754_asinf+0x1a4>
 8019d5c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019d60:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8019e84 <__ieee754_asinf+0x1a8>
 8019d64:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019d68:	eddf 7a47 	vldr	s15, [pc, #284]	; 8019e88 <__ieee754_asinf+0x1ac>
 8019d6c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019d70:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8019e8c <__ieee754_asinf+0x1b0>
 8019d74:	eea7 9a88 	vfma.f32	s18, s15, s16
 8019d78:	eddf 7a45 	vldr	s15, [pc, #276]	; 8019e90 <__ieee754_asinf+0x1b4>
 8019d7c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8019d80:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8019e94 <__ieee754_asinf+0x1b8>
 8019d84:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019d88:	eddf 7a43 	vldr	s15, [pc, #268]	; 8019e98 <__ieee754_asinf+0x1bc>
 8019d8c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019d90:	eeb0 0a48 	vmov.f32	s0, s16
 8019d94:	eee7 8a88 	vfma.f32	s17, s15, s16
 8019d98:	f000 fa00 	bl	801a19c <__ieee754_sqrtf>
 8019d9c:	4b3f      	ldr	r3, [pc, #252]	; (8019e9c <__ieee754_asinf+0x1c0>)
 8019d9e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8019da2:	429c      	cmp	r4, r3
 8019da4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8019da8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019dac:	dd3d      	ble.n	8019e2a <__ieee754_asinf+0x14e>
 8019dae:	eea0 0a06 	vfma.f32	s0, s0, s12
 8019db2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8019ea0 <__ieee754_asinf+0x1c4>
 8019db6:	eee0 7a26 	vfma.f32	s15, s0, s13
 8019dba:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8019e6c <__ieee754_asinf+0x190>
 8019dbe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019dc2:	2d00      	cmp	r5, #0
 8019dc4:	bfd8      	it	le
 8019dc6:	eeb1 0a40 	vnegle.f32	s0, s0
 8019dca:	e79b      	b.n	8019d04 <__ieee754_asinf+0x28>
 8019dcc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8019dd0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019e78 <__ieee754_asinf+0x19c>
 8019dd4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8019e74 <__ieee754_asinf+0x198>
 8019dd8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8019e8c <__ieee754_asinf+0x1b0>
 8019ddc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019de0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8019e80 <__ieee754_asinf+0x1a4>
 8019de4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019de8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8019e84 <__ieee754_asinf+0x1a8>
 8019dec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019df0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8019e88 <__ieee754_asinf+0x1ac>
 8019df4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019df8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8019e7c <__ieee754_asinf+0x1a0>
 8019dfc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019e00:	eddf 6a23 	vldr	s13, [pc, #140]	; 8019e90 <__ieee754_asinf+0x1b4>
 8019e04:	eee7 6a86 	vfma.f32	s13, s15, s12
 8019e08:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8019e94 <__ieee754_asinf+0x1b8>
 8019e0c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8019e10:	eddf 6a21 	vldr	s13, [pc, #132]	; 8019e98 <__ieee754_asinf+0x1bc>
 8019e14:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019e1c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8019e20:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8019e24:	eea0 0a27 	vfma.f32	s0, s0, s15
 8019e28:	e76c      	b.n	8019d04 <__ieee754_asinf+0x28>
 8019e2a:	ee10 3a10 	vmov	r3, s0
 8019e2e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019e32:	f023 030f 	bic.w	r3, r3, #15
 8019e36:	ee07 3a10 	vmov	s14, r3
 8019e3a:	eea7 8a47 	vfms.f32	s16, s14, s14
 8019e3e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019e42:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019e46:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8019e4a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8019e68 <__ieee754_asinf+0x18c>
 8019e4e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8019e52:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8019e56:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8019ea4 <__ieee754_asinf+0x1c8>
 8019e5a:	eeb0 6a40 	vmov.f32	s12, s0
 8019e5e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019e62:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019e66:	e7aa      	b.n	8019dbe <__ieee754_asinf+0xe2>
 8019e68:	b33bbd2e 	.word	0xb33bbd2e
 8019e6c:	3fc90fdb 	.word	0x3fc90fdb
 8019e70:	7149f2ca 	.word	0x7149f2ca
 8019e74:	3a4f7f04 	.word	0x3a4f7f04
 8019e78:	3811ef08 	.word	0x3811ef08
 8019e7c:	3e2aaaab 	.word	0x3e2aaaab
 8019e80:	bd241146 	.word	0xbd241146
 8019e84:	3e4e0aa8 	.word	0x3e4e0aa8
 8019e88:	bea6b090 	.word	0xbea6b090
 8019e8c:	3d9dc62e 	.word	0x3d9dc62e
 8019e90:	bf303361 	.word	0xbf303361
 8019e94:	4001572d 	.word	0x4001572d
 8019e98:	c019d139 	.word	0xc019d139
 8019e9c:	3f799999 	.word	0x3f799999
 8019ea0:	333bbd2e 	.word	0x333bbd2e
 8019ea4:	3f490fdb 	.word	0x3f490fdb

08019ea8 <__ieee754_atan2f>:
 8019ea8:	ee10 2a90 	vmov	r2, s1
 8019eac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019eb0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019eb4:	b510      	push	{r4, lr}
 8019eb6:	eef0 7a40 	vmov.f32	s15, s0
 8019eba:	dc06      	bgt.n	8019eca <__ieee754_atan2f+0x22>
 8019ebc:	ee10 0a10 	vmov	r0, s0
 8019ec0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8019ec4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019ec8:	dd04      	ble.n	8019ed4 <__ieee754_atan2f+0x2c>
 8019eca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8019ece:	eeb0 0a67 	vmov.f32	s0, s15
 8019ed2:	bd10      	pop	{r4, pc}
 8019ed4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8019ed8:	d103      	bne.n	8019ee2 <__ieee754_atan2f+0x3a>
 8019eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ede:	f001 ba6d 	b.w	801b3bc <atanf>
 8019ee2:	1794      	asrs	r4, r2, #30
 8019ee4:	f004 0402 	and.w	r4, r4, #2
 8019ee8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019eec:	b943      	cbnz	r3, 8019f00 <__ieee754_atan2f+0x58>
 8019eee:	2c02      	cmp	r4, #2
 8019ef0:	d05e      	beq.n	8019fb0 <__ieee754_atan2f+0x108>
 8019ef2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8019fc4 <__ieee754_atan2f+0x11c>
 8019ef6:	2c03      	cmp	r4, #3
 8019ef8:	bf08      	it	eq
 8019efa:	eef0 7a47 	vmoveq.f32	s15, s14
 8019efe:	e7e6      	b.n	8019ece <__ieee754_atan2f+0x26>
 8019f00:	b941      	cbnz	r1, 8019f14 <__ieee754_atan2f+0x6c>
 8019f02:	eddf 7a31 	vldr	s15, [pc, #196]	; 8019fc8 <__ieee754_atan2f+0x120>
 8019f06:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8019fcc <__ieee754_atan2f+0x124>
 8019f0a:	2800      	cmp	r0, #0
 8019f0c:	bfb8      	it	lt
 8019f0e:	eef0 7a47 	vmovlt.f32	s15, s14
 8019f12:	e7dc      	b.n	8019ece <__ieee754_atan2f+0x26>
 8019f14:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019f18:	d110      	bne.n	8019f3c <__ieee754_atan2f+0x94>
 8019f1a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019f1e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8019f22:	d107      	bne.n	8019f34 <__ieee754_atan2f+0x8c>
 8019f24:	2c02      	cmp	r4, #2
 8019f26:	d846      	bhi.n	8019fb6 <__ieee754_atan2f+0x10e>
 8019f28:	4b29      	ldr	r3, [pc, #164]	; (8019fd0 <__ieee754_atan2f+0x128>)
 8019f2a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019f2e:	edd3 7a00 	vldr	s15, [r3]
 8019f32:	e7cc      	b.n	8019ece <__ieee754_atan2f+0x26>
 8019f34:	2c02      	cmp	r4, #2
 8019f36:	d841      	bhi.n	8019fbc <__ieee754_atan2f+0x114>
 8019f38:	4b26      	ldr	r3, [pc, #152]	; (8019fd4 <__ieee754_atan2f+0x12c>)
 8019f3a:	e7f6      	b.n	8019f2a <__ieee754_atan2f+0x82>
 8019f3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019f40:	d0df      	beq.n	8019f02 <__ieee754_atan2f+0x5a>
 8019f42:	1a5b      	subs	r3, r3, r1
 8019f44:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8019f48:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8019f4c:	da1a      	bge.n	8019f84 <__ieee754_atan2f+0xdc>
 8019f4e:	2a00      	cmp	r2, #0
 8019f50:	da01      	bge.n	8019f56 <__ieee754_atan2f+0xae>
 8019f52:	313c      	adds	r1, #60	; 0x3c
 8019f54:	db19      	blt.n	8019f8a <__ieee754_atan2f+0xe2>
 8019f56:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8019f5a:	f7ff fa63 	bl	8019424 <fabsf>
 8019f5e:	f001 fa2d 	bl	801b3bc <atanf>
 8019f62:	eef0 7a40 	vmov.f32	s15, s0
 8019f66:	2c01      	cmp	r4, #1
 8019f68:	d012      	beq.n	8019f90 <__ieee754_atan2f+0xe8>
 8019f6a:	2c02      	cmp	r4, #2
 8019f6c:	d017      	beq.n	8019f9e <__ieee754_atan2f+0xf6>
 8019f6e:	2c00      	cmp	r4, #0
 8019f70:	d0ad      	beq.n	8019ece <__ieee754_atan2f+0x26>
 8019f72:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8019fd8 <__ieee754_atan2f+0x130>
 8019f76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f7a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8019fdc <__ieee754_atan2f+0x134>
 8019f7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f82:	e7a4      	b.n	8019ece <__ieee754_atan2f+0x26>
 8019f84:	eddf 7a10 	vldr	s15, [pc, #64]	; 8019fc8 <__ieee754_atan2f+0x120>
 8019f88:	e7ed      	b.n	8019f66 <__ieee754_atan2f+0xbe>
 8019f8a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019fe0 <__ieee754_atan2f+0x138>
 8019f8e:	e7ea      	b.n	8019f66 <__ieee754_atan2f+0xbe>
 8019f90:	ee17 3a90 	vmov	r3, s15
 8019f94:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019f98:	ee07 3a90 	vmov	s15, r3
 8019f9c:	e797      	b.n	8019ece <__ieee754_atan2f+0x26>
 8019f9e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8019fd8 <__ieee754_atan2f+0x130>
 8019fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019fa6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8019fdc <__ieee754_atan2f+0x134>
 8019faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019fae:	e78e      	b.n	8019ece <__ieee754_atan2f+0x26>
 8019fb0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8019fdc <__ieee754_atan2f+0x134>
 8019fb4:	e78b      	b.n	8019ece <__ieee754_atan2f+0x26>
 8019fb6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019fe4 <__ieee754_atan2f+0x13c>
 8019fba:	e788      	b.n	8019ece <__ieee754_atan2f+0x26>
 8019fbc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019fe0 <__ieee754_atan2f+0x138>
 8019fc0:	e785      	b.n	8019ece <__ieee754_atan2f+0x26>
 8019fc2:	bf00      	nop
 8019fc4:	c0490fdb 	.word	0xc0490fdb
 8019fc8:	3fc90fdb 	.word	0x3fc90fdb
 8019fcc:	bfc90fdb 	.word	0xbfc90fdb
 8019fd0:	0801cb68 	.word	0x0801cb68
 8019fd4:	0801cb74 	.word	0x0801cb74
 8019fd8:	33bbbd2e 	.word	0x33bbbd2e
 8019fdc:	40490fdb 	.word	0x40490fdb
 8019fe0:	00000000 	.word	0x00000000
 8019fe4:	3f490fdb 	.word	0x3f490fdb

08019fe8 <__ieee754_sqrt>:
 8019fe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fec:	ec55 4b10 	vmov	r4, r5, d0
 8019ff0:	4e67      	ldr	r6, [pc, #412]	; (801a190 <__ieee754_sqrt+0x1a8>)
 8019ff2:	43ae      	bics	r6, r5
 8019ff4:	ee10 0a10 	vmov	r0, s0
 8019ff8:	ee10 2a10 	vmov	r2, s0
 8019ffc:	4629      	mov	r1, r5
 8019ffe:	462b      	mov	r3, r5
 801a000:	d10d      	bne.n	801a01e <__ieee754_sqrt+0x36>
 801a002:	f7e6 faf9 	bl	80005f8 <__aeabi_dmul>
 801a006:	4602      	mov	r2, r0
 801a008:	460b      	mov	r3, r1
 801a00a:	4620      	mov	r0, r4
 801a00c:	4629      	mov	r1, r5
 801a00e:	f7e6 f93d 	bl	800028c <__adddf3>
 801a012:	4604      	mov	r4, r0
 801a014:	460d      	mov	r5, r1
 801a016:	ec45 4b10 	vmov	d0, r4, r5
 801a01a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a01e:	2d00      	cmp	r5, #0
 801a020:	dc0b      	bgt.n	801a03a <__ieee754_sqrt+0x52>
 801a022:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a026:	4326      	orrs	r6, r4
 801a028:	d0f5      	beq.n	801a016 <__ieee754_sqrt+0x2e>
 801a02a:	b135      	cbz	r5, 801a03a <__ieee754_sqrt+0x52>
 801a02c:	f7e6 f92c 	bl	8000288 <__aeabi_dsub>
 801a030:	4602      	mov	r2, r0
 801a032:	460b      	mov	r3, r1
 801a034:	f7e6 fc0a 	bl	800084c <__aeabi_ddiv>
 801a038:	e7eb      	b.n	801a012 <__ieee754_sqrt+0x2a>
 801a03a:	1509      	asrs	r1, r1, #20
 801a03c:	f000 808d 	beq.w	801a15a <__ieee754_sqrt+0x172>
 801a040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a044:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801a048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a04c:	07c9      	lsls	r1, r1, #31
 801a04e:	bf5c      	itt	pl
 801a050:	005b      	lslpl	r3, r3, #1
 801a052:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801a056:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a05a:	bf58      	it	pl
 801a05c:	0052      	lslpl	r2, r2, #1
 801a05e:	2500      	movs	r5, #0
 801a060:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a064:	1076      	asrs	r6, r6, #1
 801a066:	0052      	lsls	r2, r2, #1
 801a068:	f04f 0e16 	mov.w	lr, #22
 801a06c:	46ac      	mov	ip, r5
 801a06e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a072:	eb0c 0001 	add.w	r0, ip, r1
 801a076:	4298      	cmp	r0, r3
 801a078:	bfde      	ittt	le
 801a07a:	1a1b      	suble	r3, r3, r0
 801a07c:	eb00 0c01 	addle.w	ip, r0, r1
 801a080:	186d      	addle	r5, r5, r1
 801a082:	005b      	lsls	r3, r3, #1
 801a084:	f1be 0e01 	subs.w	lr, lr, #1
 801a088:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a08c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a090:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a094:	d1ed      	bne.n	801a072 <__ieee754_sqrt+0x8a>
 801a096:	4674      	mov	r4, lr
 801a098:	2720      	movs	r7, #32
 801a09a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a09e:	4563      	cmp	r3, ip
 801a0a0:	eb01 000e 	add.w	r0, r1, lr
 801a0a4:	dc02      	bgt.n	801a0ac <__ieee754_sqrt+0xc4>
 801a0a6:	d113      	bne.n	801a0d0 <__ieee754_sqrt+0xe8>
 801a0a8:	4290      	cmp	r0, r2
 801a0aa:	d811      	bhi.n	801a0d0 <__ieee754_sqrt+0xe8>
 801a0ac:	2800      	cmp	r0, #0
 801a0ae:	eb00 0e01 	add.w	lr, r0, r1
 801a0b2:	da57      	bge.n	801a164 <__ieee754_sqrt+0x17c>
 801a0b4:	f1be 0f00 	cmp.w	lr, #0
 801a0b8:	db54      	blt.n	801a164 <__ieee754_sqrt+0x17c>
 801a0ba:	f10c 0801 	add.w	r8, ip, #1
 801a0be:	eba3 030c 	sub.w	r3, r3, ip
 801a0c2:	4290      	cmp	r0, r2
 801a0c4:	bf88      	it	hi
 801a0c6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 801a0ca:	1a12      	subs	r2, r2, r0
 801a0cc:	440c      	add	r4, r1
 801a0ce:	46c4      	mov	ip, r8
 801a0d0:	005b      	lsls	r3, r3, #1
 801a0d2:	3f01      	subs	r7, #1
 801a0d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a0d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a0dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a0e0:	d1dd      	bne.n	801a09e <__ieee754_sqrt+0xb6>
 801a0e2:	4313      	orrs	r3, r2
 801a0e4:	d01b      	beq.n	801a11e <__ieee754_sqrt+0x136>
 801a0e6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801a194 <__ieee754_sqrt+0x1ac>
 801a0ea:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801a198 <__ieee754_sqrt+0x1b0>
 801a0ee:	e9da 0100 	ldrd	r0, r1, [sl]
 801a0f2:	e9db 2300 	ldrd	r2, r3, [fp]
 801a0f6:	f7e6 f8c7 	bl	8000288 <__aeabi_dsub>
 801a0fa:	e9da 8900 	ldrd	r8, r9, [sl]
 801a0fe:	4602      	mov	r2, r0
 801a100:	460b      	mov	r3, r1
 801a102:	4640      	mov	r0, r8
 801a104:	4649      	mov	r1, r9
 801a106:	f7e6 fcf3 	bl	8000af0 <__aeabi_dcmple>
 801a10a:	b140      	cbz	r0, 801a11e <__ieee754_sqrt+0x136>
 801a10c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 801a110:	e9da 0100 	ldrd	r0, r1, [sl]
 801a114:	e9db 2300 	ldrd	r2, r3, [fp]
 801a118:	d126      	bne.n	801a168 <__ieee754_sqrt+0x180>
 801a11a:	3501      	adds	r5, #1
 801a11c:	463c      	mov	r4, r7
 801a11e:	106a      	asrs	r2, r5, #1
 801a120:	0863      	lsrs	r3, r4, #1
 801a122:	07e9      	lsls	r1, r5, #31
 801a124:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a128:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a12c:	bf48      	it	mi
 801a12e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a132:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801a136:	461c      	mov	r4, r3
 801a138:	e76d      	b.n	801a016 <__ieee754_sqrt+0x2e>
 801a13a:	0ad3      	lsrs	r3, r2, #11
 801a13c:	3815      	subs	r0, #21
 801a13e:	0552      	lsls	r2, r2, #21
 801a140:	2b00      	cmp	r3, #0
 801a142:	d0fa      	beq.n	801a13a <__ieee754_sqrt+0x152>
 801a144:	02dc      	lsls	r4, r3, #11
 801a146:	d50a      	bpl.n	801a15e <__ieee754_sqrt+0x176>
 801a148:	f1c1 0420 	rsb	r4, r1, #32
 801a14c:	fa22 f404 	lsr.w	r4, r2, r4
 801a150:	1e4d      	subs	r5, r1, #1
 801a152:	408a      	lsls	r2, r1
 801a154:	4323      	orrs	r3, r4
 801a156:	1b41      	subs	r1, r0, r5
 801a158:	e772      	b.n	801a040 <__ieee754_sqrt+0x58>
 801a15a:	4608      	mov	r0, r1
 801a15c:	e7f0      	b.n	801a140 <__ieee754_sqrt+0x158>
 801a15e:	005b      	lsls	r3, r3, #1
 801a160:	3101      	adds	r1, #1
 801a162:	e7ef      	b.n	801a144 <__ieee754_sqrt+0x15c>
 801a164:	46e0      	mov	r8, ip
 801a166:	e7aa      	b.n	801a0be <__ieee754_sqrt+0xd6>
 801a168:	f7e6 f890 	bl	800028c <__adddf3>
 801a16c:	e9da 8900 	ldrd	r8, r9, [sl]
 801a170:	4602      	mov	r2, r0
 801a172:	460b      	mov	r3, r1
 801a174:	4640      	mov	r0, r8
 801a176:	4649      	mov	r1, r9
 801a178:	f7e6 fcb0 	bl	8000adc <__aeabi_dcmplt>
 801a17c:	b120      	cbz	r0, 801a188 <__ieee754_sqrt+0x1a0>
 801a17e:	1ca0      	adds	r0, r4, #2
 801a180:	bf08      	it	eq
 801a182:	3501      	addeq	r5, #1
 801a184:	3402      	adds	r4, #2
 801a186:	e7ca      	b.n	801a11e <__ieee754_sqrt+0x136>
 801a188:	3401      	adds	r4, #1
 801a18a:	f024 0401 	bic.w	r4, r4, #1
 801a18e:	e7c6      	b.n	801a11e <__ieee754_sqrt+0x136>
 801a190:	7ff00000 	.word	0x7ff00000
 801a194:	200001f0 	.word	0x200001f0
 801a198:	200001f8 	.word	0x200001f8

0801a19c <__ieee754_sqrtf>:
 801a19c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a1a0:	4770      	bx	lr
 801a1a2:	0000      	movs	r0, r0
 801a1a4:	0000      	movs	r0, r0
	...

0801a1a8 <ceil>:
 801a1a8:	ec51 0b10 	vmov	r0, r1, d0
 801a1ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1b4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801a1b8:	2e13      	cmp	r6, #19
 801a1ba:	ee10 5a10 	vmov	r5, s0
 801a1be:	ee10 8a10 	vmov	r8, s0
 801a1c2:	460c      	mov	r4, r1
 801a1c4:	dc2f      	bgt.n	801a226 <ceil+0x7e>
 801a1c6:	2e00      	cmp	r6, #0
 801a1c8:	da12      	bge.n	801a1f0 <ceil+0x48>
 801a1ca:	a333      	add	r3, pc, #204	; (adr r3, 801a298 <ceil+0xf0>)
 801a1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1d0:	f7e6 f85c 	bl	800028c <__adddf3>
 801a1d4:	2200      	movs	r2, #0
 801a1d6:	2300      	movs	r3, #0
 801a1d8:	f7e6 fc9e 	bl	8000b18 <__aeabi_dcmpgt>
 801a1dc:	b128      	cbz	r0, 801a1ea <ceil+0x42>
 801a1de:	2c00      	cmp	r4, #0
 801a1e0:	db51      	blt.n	801a286 <ceil+0xde>
 801a1e2:	432c      	orrs	r4, r5
 801a1e4:	d053      	beq.n	801a28e <ceil+0xe6>
 801a1e6:	4c2e      	ldr	r4, [pc, #184]	; (801a2a0 <ceil+0xf8>)
 801a1e8:	2500      	movs	r5, #0
 801a1ea:	4621      	mov	r1, r4
 801a1ec:	4628      	mov	r0, r5
 801a1ee:	e024      	b.n	801a23a <ceil+0x92>
 801a1f0:	4f2c      	ldr	r7, [pc, #176]	; (801a2a4 <ceil+0xfc>)
 801a1f2:	4137      	asrs	r7, r6
 801a1f4:	ea01 0307 	and.w	r3, r1, r7
 801a1f8:	4303      	orrs	r3, r0
 801a1fa:	d01e      	beq.n	801a23a <ceil+0x92>
 801a1fc:	a326      	add	r3, pc, #152	; (adr r3, 801a298 <ceil+0xf0>)
 801a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a202:	f7e6 f843 	bl	800028c <__adddf3>
 801a206:	2200      	movs	r2, #0
 801a208:	2300      	movs	r3, #0
 801a20a:	f7e6 fc85 	bl	8000b18 <__aeabi_dcmpgt>
 801a20e:	2800      	cmp	r0, #0
 801a210:	d0eb      	beq.n	801a1ea <ceil+0x42>
 801a212:	2c00      	cmp	r4, #0
 801a214:	bfc2      	ittt	gt
 801a216:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801a21a:	4133      	asrgt	r3, r6
 801a21c:	18e4      	addgt	r4, r4, r3
 801a21e:	ea24 0407 	bic.w	r4, r4, r7
 801a222:	2500      	movs	r5, #0
 801a224:	e7e1      	b.n	801a1ea <ceil+0x42>
 801a226:	2e33      	cmp	r6, #51	; 0x33
 801a228:	dd0b      	ble.n	801a242 <ceil+0x9a>
 801a22a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a22e:	d104      	bne.n	801a23a <ceil+0x92>
 801a230:	ee10 2a10 	vmov	r2, s0
 801a234:	460b      	mov	r3, r1
 801a236:	f7e6 f829 	bl	800028c <__adddf3>
 801a23a:	ec41 0b10 	vmov	d0, r0, r1
 801a23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a242:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801a246:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a24a:	40df      	lsrs	r7, r3
 801a24c:	4238      	tst	r0, r7
 801a24e:	d0f4      	beq.n	801a23a <ceil+0x92>
 801a250:	a311      	add	r3, pc, #68	; (adr r3, 801a298 <ceil+0xf0>)
 801a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a256:	f7e6 f819 	bl	800028c <__adddf3>
 801a25a:	2200      	movs	r2, #0
 801a25c:	2300      	movs	r3, #0
 801a25e:	f7e6 fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 801a262:	2800      	cmp	r0, #0
 801a264:	d0c1      	beq.n	801a1ea <ceil+0x42>
 801a266:	2c00      	cmp	r4, #0
 801a268:	dd0a      	ble.n	801a280 <ceil+0xd8>
 801a26a:	2e14      	cmp	r6, #20
 801a26c:	d101      	bne.n	801a272 <ceil+0xca>
 801a26e:	3401      	adds	r4, #1
 801a270:	e006      	b.n	801a280 <ceil+0xd8>
 801a272:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a276:	2301      	movs	r3, #1
 801a278:	40b3      	lsls	r3, r6
 801a27a:	441d      	add	r5, r3
 801a27c:	45a8      	cmp	r8, r5
 801a27e:	d8f6      	bhi.n	801a26e <ceil+0xc6>
 801a280:	ea25 0507 	bic.w	r5, r5, r7
 801a284:	e7b1      	b.n	801a1ea <ceil+0x42>
 801a286:	2500      	movs	r5, #0
 801a288:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a28c:	e7ad      	b.n	801a1ea <ceil+0x42>
 801a28e:	4625      	mov	r5, r4
 801a290:	e7ab      	b.n	801a1ea <ceil+0x42>
 801a292:	bf00      	nop
 801a294:	f3af 8000 	nop.w
 801a298:	8800759c 	.word	0x8800759c
 801a29c:	7e37e43c 	.word	0x7e37e43c
 801a2a0:	3ff00000 	.word	0x3ff00000
 801a2a4:	000fffff 	.word	0x000fffff

0801a2a8 <floor>:
 801a2a8:	ec51 0b10 	vmov	r0, r1, d0
 801a2ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2b4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801a2b8:	2e13      	cmp	r6, #19
 801a2ba:	ee10 5a10 	vmov	r5, s0
 801a2be:	ee10 8a10 	vmov	r8, s0
 801a2c2:	460c      	mov	r4, r1
 801a2c4:	dc31      	bgt.n	801a32a <floor+0x82>
 801a2c6:	2e00      	cmp	r6, #0
 801a2c8:	da14      	bge.n	801a2f4 <floor+0x4c>
 801a2ca:	a333      	add	r3, pc, #204	; (adr r3, 801a398 <floor+0xf0>)
 801a2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d0:	f7e5 ffdc 	bl	800028c <__adddf3>
 801a2d4:	2200      	movs	r2, #0
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	f7e6 fc1e 	bl	8000b18 <__aeabi_dcmpgt>
 801a2dc:	b138      	cbz	r0, 801a2ee <floor+0x46>
 801a2de:	2c00      	cmp	r4, #0
 801a2e0:	da53      	bge.n	801a38a <floor+0xe2>
 801a2e2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801a2e6:	4325      	orrs	r5, r4
 801a2e8:	d052      	beq.n	801a390 <floor+0xe8>
 801a2ea:	4c2d      	ldr	r4, [pc, #180]	; (801a3a0 <floor+0xf8>)
 801a2ec:	2500      	movs	r5, #0
 801a2ee:	4621      	mov	r1, r4
 801a2f0:	4628      	mov	r0, r5
 801a2f2:	e024      	b.n	801a33e <floor+0x96>
 801a2f4:	4f2b      	ldr	r7, [pc, #172]	; (801a3a4 <floor+0xfc>)
 801a2f6:	4137      	asrs	r7, r6
 801a2f8:	ea01 0307 	and.w	r3, r1, r7
 801a2fc:	4303      	orrs	r3, r0
 801a2fe:	d01e      	beq.n	801a33e <floor+0x96>
 801a300:	a325      	add	r3, pc, #148	; (adr r3, 801a398 <floor+0xf0>)
 801a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a306:	f7e5 ffc1 	bl	800028c <__adddf3>
 801a30a:	2200      	movs	r2, #0
 801a30c:	2300      	movs	r3, #0
 801a30e:	f7e6 fc03 	bl	8000b18 <__aeabi_dcmpgt>
 801a312:	2800      	cmp	r0, #0
 801a314:	d0eb      	beq.n	801a2ee <floor+0x46>
 801a316:	2c00      	cmp	r4, #0
 801a318:	bfbe      	ittt	lt
 801a31a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801a31e:	4133      	asrlt	r3, r6
 801a320:	18e4      	addlt	r4, r4, r3
 801a322:	ea24 0407 	bic.w	r4, r4, r7
 801a326:	2500      	movs	r5, #0
 801a328:	e7e1      	b.n	801a2ee <floor+0x46>
 801a32a:	2e33      	cmp	r6, #51	; 0x33
 801a32c:	dd0b      	ble.n	801a346 <floor+0x9e>
 801a32e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a332:	d104      	bne.n	801a33e <floor+0x96>
 801a334:	ee10 2a10 	vmov	r2, s0
 801a338:	460b      	mov	r3, r1
 801a33a:	f7e5 ffa7 	bl	800028c <__adddf3>
 801a33e:	ec41 0b10 	vmov	d0, r0, r1
 801a342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a346:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801a34a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a34e:	40df      	lsrs	r7, r3
 801a350:	4238      	tst	r0, r7
 801a352:	d0f4      	beq.n	801a33e <floor+0x96>
 801a354:	a310      	add	r3, pc, #64	; (adr r3, 801a398 <floor+0xf0>)
 801a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a35a:	f7e5 ff97 	bl	800028c <__adddf3>
 801a35e:	2200      	movs	r2, #0
 801a360:	2300      	movs	r3, #0
 801a362:	f7e6 fbd9 	bl	8000b18 <__aeabi_dcmpgt>
 801a366:	2800      	cmp	r0, #0
 801a368:	d0c1      	beq.n	801a2ee <floor+0x46>
 801a36a:	2c00      	cmp	r4, #0
 801a36c:	da0a      	bge.n	801a384 <floor+0xdc>
 801a36e:	2e14      	cmp	r6, #20
 801a370:	d101      	bne.n	801a376 <floor+0xce>
 801a372:	3401      	adds	r4, #1
 801a374:	e006      	b.n	801a384 <floor+0xdc>
 801a376:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a37a:	2301      	movs	r3, #1
 801a37c:	40b3      	lsls	r3, r6
 801a37e:	441d      	add	r5, r3
 801a380:	45a8      	cmp	r8, r5
 801a382:	d8f6      	bhi.n	801a372 <floor+0xca>
 801a384:	ea25 0507 	bic.w	r5, r5, r7
 801a388:	e7b1      	b.n	801a2ee <floor+0x46>
 801a38a:	2500      	movs	r5, #0
 801a38c:	462c      	mov	r4, r5
 801a38e:	e7ae      	b.n	801a2ee <floor+0x46>
 801a390:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a394:	e7ab      	b.n	801a2ee <floor+0x46>
 801a396:	bf00      	nop
 801a398:	8800759c 	.word	0x8800759c
 801a39c:	7e37e43c 	.word	0x7e37e43c
 801a3a0:	bff00000 	.word	0xbff00000
 801a3a4:	000fffff 	.word	0x000fffff

0801a3a8 <__ieee754_rem_pio2f>:
 801a3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3aa:	ee10 6a10 	vmov	r6, s0
 801a3ae:	4b86      	ldr	r3, [pc, #536]	; (801a5c8 <__ieee754_rem_pio2f+0x220>)
 801a3b0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801a3b4:	429d      	cmp	r5, r3
 801a3b6:	b087      	sub	sp, #28
 801a3b8:	4604      	mov	r4, r0
 801a3ba:	dc05      	bgt.n	801a3c8 <__ieee754_rem_pio2f+0x20>
 801a3bc:	2300      	movs	r3, #0
 801a3be:	ed80 0a00 	vstr	s0, [r0]
 801a3c2:	6043      	str	r3, [r0, #4]
 801a3c4:	2000      	movs	r0, #0
 801a3c6:	e020      	b.n	801a40a <__ieee754_rem_pio2f+0x62>
 801a3c8:	4b80      	ldr	r3, [pc, #512]	; (801a5cc <__ieee754_rem_pio2f+0x224>)
 801a3ca:	429d      	cmp	r5, r3
 801a3cc:	dc38      	bgt.n	801a440 <__ieee754_rem_pio2f+0x98>
 801a3ce:	2e00      	cmp	r6, #0
 801a3d0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801a5d0 <__ieee754_rem_pio2f+0x228>
 801a3d4:	4b7f      	ldr	r3, [pc, #508]	; (801a5d4 <__ieee754_rem_pio2f+0x22c>)
 801a3d6:	f025 050f 	bic.w	r5, r5, #15
 801a3da:	dd18      	ble.n	801a40e <__ieee754_rem_pio2f+0x66>
 801a3dc:	429d      	cmp	r5, r3
 801a3de:	ee70 7a47 	vsub.f32	s15, s0, s14
 801a3e2:	bf09      	itett	eq
 801a3e4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801a5d8 <__ieee754_rem_pio2f+0x230>
 801a3e8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801a5dc <__ieee754_rem_pio2f+0x234>
 801a3ec:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801a3f0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801a5e0 <__ieee754_rem_pio2f+0x238>
 801a3f4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801a3f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a3fc:	edc0 6a00 	vstr	s13, [r0]
 801a400:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a404:	edc0 7a01 	vstr	s15, [r0, #4]
 801a408:	2001      	movs	r0, #1
 801a40a:	b007      	add	sp, #28
 801a40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a40e:	429d      	cmp	r5, r3
 801a410:	ee70 7a07 	vadd.f32	s15, s0, s14
 801a414:	bf09      	itett	eq
 801a416:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801a5d8 <__ieee754_rem_pio2f+0x230>
 801a41a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801a5dc <__ieee754_rem_pio2f+0x234>
 801a41e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801a422:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801a5e0 <__ieee754_rem_pio2f+0x238>
 801a426:	ee77 6a87 	vadd.f32	s13, s15, s14
 801a42a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a42e:	edc0 6a00 	vstr	s13, [r0]
 801a432:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a436:	edc0 7a01 	vstr	s15, [r0, #4]
 801a43a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a43e:	e7e4      	b.n	801a40a <__ieee754_rem_pio2f+0x62>
 801a440:	4b68      	ldr	r3, [pc, #416]	; (801a5e4 <__ieee754_rem_pio2f+0x23c>)
 801a442:	429d      	cmp	r5, r3
 801a444:	dc71      	bgt.n	801a52a <__ieee754_rem_pio2f+0x182>
 801a446:	f7fe ffed 	bl	8019424 <fabsf>
 801a44a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801a5e8 <__ieee754_rem_pio2f+0x240>
 801a44e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a452:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a45a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a45e:	ee17 0a90 	vmov	r0, s15
 801a462:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801a5d0 <__ieee754_rem_pio2f+0x228>
 801a466:	eea7 0a67 	vfms.f32	s0, s14, s15
 801a46a:	281f      	cmp	r0, #31
 801a46c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801a5dc <__ieee754_rem_pio2f+0x234>
 801a470:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a474:	eeb1 6a47 	vneg.f32	s12, s14
 801a478:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a47c:	ee16 2a90 	vmov	r2, s13
 801a480:	dc1c      	bgt.n	801a4bc <__ieee754_rem_pio2f+0x114>
 801a482:	495a      	ldr	r1, [pc, #360]	; (801a5ec <__ieee754_rem_pio2f+0x244>)
 801a484:	1e47      	subs	r7, r0, #1
 801a486:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801a48a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801a48e:	428b      	cmp	r3, r1
 801a490:	d014      	beq.n	801a4bc <__ieee754_rem_pio2f+0x114>
 801a492:	6022      	str	r2, [r4, #0]
 801a494:	ed94 7a00 	vldr	s14, [r4]
 801a498:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a49c:	2e00      	cmp	r6, #0
 801a49e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a4a2:	ed84 0a01 	vstr	s0, [r4, #4]
 801a4a6:	dab0      	bge.n	801a40a <__ieee754_rem_pio2f+0x62>
 801a4a8:	eeb1 7a47 	vneg.f32	s14, s14
 801a4ac:	eeb1 0a40 	vneg.f32	s0, s0
 801a4b0:	ed84 7a00 	vstr	s14, [r4]
 801a4b4:	ed84 0a01 	vstr	s0, [r4, #4]
 801a4b8:	4240      	negs	r0, r0
 801a4ba:	e7a6      	b.n	801a40a <__ieee754_rem_pio2f+0x62>
 801a4bc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a4c0:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801a4c4:	2908      	cmp	r1, #8
 801a4c6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801a4ca:	dde2      	ble.n	801a492 <__ieee754_rem_pio2f+0xea>
 801a4cc:	eddf 5a42 	vldr	s11, [pc, #264]	; 801a5d8 <__ieee754_rem_pio2f+0x230>
 801a4d0:	eef0 6a40 	vmov.f32	s13, s0
 801a4d4:	eee6 6a25 	vfma.f32	s13, s12, s11
 801a4d8:	ee70 7a66 	vsub.f32	s15, s0, s13
 801a4dc:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a4e0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801a5e0 <__ieee754_rem_pio2f+0x238>
 801a4e4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801a4e8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801a4ec:	ee15 2a90 	vmov	r2, s11
 801a4f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a4f4:	1a5b      	subs	r3, r3, r1
 801a4f6:	2b19      	cmp	r3, #25
 801a4f8:	dc04      	bgt.n	801a504 <__ieee754_rem_pio2f+0x15c>
 801a4fa:	edc4 5a00 	vstr	s11, [r4]
 801a4fe:	eeb0 0a66 	vmov.f32	s0, s13
 801a502:	e7c7      	b.n	801a494 <__ieee754_rem_pio2f+0xec>
 801a504:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801a5f0 <__ieee754_rem_pio2f+0x248>
 801a508:	eeb0 0a66 	vmov.f32	s0, s13
 801a50c:	eea6 0a25 	vfma.f32	s0, s12, s11
 801a510:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801a514:	eddf 6a37 	vldr	s13, [pc, #220]	; 801a5f4 <__ieee754_rem_pio2f+0x24c>
 801a518:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a51c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801a520:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a524:	ed84 7a00 	vstr	s14, [r4]
 801a528:	e7b4      	b.n	801a494 <__ieee754_rem_pio2f+0xec>
 801a52a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801a52e:	db06      	blt.n	801a53e <__ieee754_rem_pio2f+0x196>
 801a530:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a534:	edc0 7a01 	vstr	s15, [r0, #4]
 801a538:	edc0 7a00 	vstr	s15, [r0]
 801a53c:	e742      	b.n	801a3c4 <__ieee754_rem_pio2f+0x1c>
 801a53e:	15ea      	asrs	r2, r5, #23
 801a540:	3a86      	subs	r2, #134	; 0x86
 801a542:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801a546:	ee07 3a90 	vmov	s15, r3
 801a54a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a54e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801a5f8 <__ieee754_rem_pio2f+0x250>
 801a552:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a556:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a55a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801a55e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a562:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a566:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a56a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a56e:	ed8d 7a04 	vstr	s14, [sp, #16]
 801a572:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a576:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a57e:	edcd 7a05 	vstr	s15, [sp, #20]
 801a582:	d11e      	bne.n	801a5c2 <__ieee754_rem_pio2f+0x21a>
 801a584:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801a588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a58c:	bf14      	ite	ne
 801a58e:	2302      	movne	r3, #2
 801a590:	2301      	moveq	r3, #1
 801a592:	491a      	ldr	r1, [pc, #104]	; (801a5fc <__ieee754_rem_pio2f+0x254>)
 801a594:	9101      	str	r1, [sp, #4]
 801a596:	2102      	movs	r1, #2
 801a598:	9100      	str	r1, [sp, #0]
 801a59a:	a803      	add	r0, sp, #12
 801a59c:	4621      	mov	r1, r4
 801a59e:	f001 f861 	bl	801b664 <__kernel_rem_pio2f>
 801a5a2:	2e00      	cmp	r6, #0
 801a5a4:	f6bf af31 	bge.w	801a40a <__ieee754_rem_pio2f+0x62>
 801a5a8:	edd4 7a00 	vldr	s15, [r4]
 801a5ac:	eef1 7a67 	vneg.f32	s15, s15
 801a5b0:	edc4 7a00 	vstr	s15, [r4]
 801a5b4:	edd4 7a01 	vldr	s15, [r4, #4]
 801a5b8:	eef1 7a67 	vneg.f32	s15, s15
 801a5bc:	edc4 7a01 	vstr	s15, [r4, #4]
 801a5c0:	e77a      	b.n	801a4b8 <__ieee754_rem_pio2f+0x110>
 801a5c2:	2303      	movs	r3, #3
 801a5c4:	e7e5      	b.n	801a592 <__ieee754_rem_pio2f+0x1ea>
 801a5c6:	bf00      	nop
 801a5c8:	3f490fd8 	.word	0x3f490fd8
 801a5cc:	4016cbe3 	.word	0x4016cbe3
 801a5d0:	3fc90f80 	.word	0x3fc90f80
 801a5d4:	3fc90fd0 	.word	0x3fc90fd0
 801a5d8:	37354400 	.word	0x37354400
 801a5dc:	37354443 	.word	0x37354443
 801a5e0:	2e85a308 	.word	0x2e85a308
 801a5e4:	43490f80 	.word	0x43490f80
 801a5e8:	3f22f984 	.word	0x3f22f984
 801a5ec:	0801cb80 	.word	0x0801cb80
 801a5f0:	2e85a300 	.word	0x2e85a300
 801a5f4:	248d3132 	.word	0x248d3132
 801a5f8:	43800000 	.word	0x43800000
 801a5fc:	0801cc00 	.word	0x0801cc00

0801a600 <__ieee754_rem_pio2>:
 801a600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a604:	ed2d 8b02 	vpush	{d8}
 801a608:	ec55 4b10 	vmov	r4, r5, d0
 801a60c:	4bca      	ldr	r3, [pc, #808]	; (801a938 <__ieee754_rem_pio2+0x338>)
 801a60e:	b08b      	sub	sp, #44	; 0x2c
 801a610:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801a614:	4598      	cmp	r8, r3
 801a616:	4682      	mov	sl, r0
 801a618:	9502      	str	r5, [sp, #8]
 801a61a:	dc08      	bgt.n	801a62e <__ieee754_rem_pio2+0x2e>
 801a61c:	2200      	movs	r2, #0
 801a61e:	2300      	movs	r3, #0
 801a620:	ed80 0b00 	vstr	d0, [r0]
 801a624:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a628:	f04f 0b00 	mov.w	fp, #0
 801a62c:	e028      	b.n	801a680 <__ieee754_rem_pio2+0x80>
 801a62e:	4bc3      	ldr	r3, [pc, #780]	; (801a93c <__ieee754_rem_pio2+0x33c>)
 801a630:	4598      	cmp	r8, r3
 801a632:	dc78      	bgt.n	801a726 <__ieee754_rem_pio2+0x126>
 801a634:	9b02      	ldr	r3, [sp, #8]
 801a636:	4ec2      	ldr	r6, [pc, #776]	; (801a940 <__ieee754_rem_pio2+0x340>)
 801a638:	2b00      	cmp	r3, #0
 801a63a:	ee10 0a10 	vmov	r0, s0
 801a63e:	a3b0      	add	r3, pc, #704	; (adr r3, 801a900 <__ieee754_rem_pio2+0x300>)
 801a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a644:	4629      	mov	r1, r5
 801a646:	dd39      	ble.n	801a6bc <__ieee754_rem_pio2+0xbc>
 801a648:	f7e5 fe1e 	bl	8000288 <__aeabi_dsub>
 801a64c:	45b0      	cmp	r8, r6
 801a64e:	4604      	mov	r4, r0
 801a650:	460d      	mov	r5, r1
 801a652:	d01b      	beq.n	801a68c <__ieee754_rem_pio2+0x8c>
 801a654:	a3ac      	add	r3, pc, #688	; (adr r3, 801a908 <__ieee754_rem_pio2+0x308>)
 801a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a65a:	f7e5 fe15 	bl	8000288 <__aeabi_dsub>
 801a65e:	4602      	mov	r2, r0
 801a660:	460b      	mov	r3, r1
 801a662:	e9ca 2300 	strd	r2, r3, [sl]
 801a666:	4620      	mov	r0, r4
 801a668:	4629      	mov	r1, r5
 801a66a:	f7e5 fe0d 	bl	8000288 <__aeabi_dsub>
 801a66e:	a3a6      	add	r3, pc, #664	; (adr r3, 801a908 <__ieee754_rem_pio2+0x308>)
 801a670:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a674:	f7e5 fe08 	bl	8000288 <__aeabi_dsub>
 801a678:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a67c:	f04f 0b01 	mov.w	fp, #1
 801a680:	4658      	mov	r0, fp
 801a682:	b00b      	add	sp, #44	; 0x2c
 801a684:	ecbd 8b02 	vpop	{d8}
 801a688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a68c:	a3a0      	add	r3, pc, #640	; (adr r3, 801a910 <__ieee754_rem_pio2+0x310>)
 801a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a692:	f7e5 fdf9 	bl	8000288 <__aeabi_dsub>
 801a696:	a3a0      	add	r3, pc, #640	; (adr r3, 801a918 <__ieee754_rem_pio2+0x318>)
 801a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a69c:	4604      	mov	r4, r0
 801a69e:	460d      	mov	r5, r1
 801a6a0:	f7e5 fdf2 	bl	8000288 <__aeabi_dsub>
 801a6a4:	4602      	mov	r2, r0
 801a6a6:	460b      	mov	r3, r1
 801a6a8:	e9ca 2300 	strd	r2, r3, [sl]
 801a6ac:	4620      	mov	r0, r4
 801a6ae:	4629      	mov	r1, r5
 801a6b0:	f7e5 fdea 	bl	8000288 <__aeabi_dsub>
 801a6b4:	a398      	add	r3, pc, #608	; (adr r3, 801a918 <__ieee754_rem_pio2+0x318>)
 801a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ba:	e7db      	b.n	801a674 <__ieee754_rem_pio2+0x74>
 801a6bc:	f7e5 fde6 	bl	800028c <__adddf3>
 801a6c0:	45b0      	cmp	r8, r6
 801a6c2:	4604      	mov	r4, r0
 801a6c4:	460d      	mov	r5, r1
 801a6c6:	d016      	beq.n	801a6f6 <__ieee754_rem_pio2+0xf6>
 801a6c8:	a38f      	add	r3, pc, #572	; (adr r3, 801a908 <__ieee754_rem_pio2+0x308>)
 801a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ce:	f7e5 fddd 	bl	800028c <__adddf3>
 801a6d2:	4602      	mov	r2, r0
 801a6d4:	460b      	mov	r3, r1
 801a6d6:	e9ca 2300 	strd	r2, r3, [sl]
 801a6da:	4620      	mov	r0, r4
 801a6dc:	4629      	mov	r1, r5
 801a6de:	f7e5 fdd3 	bl	8000288 <__aeabi_dsub>
 801a6e2:	a389      	add	r3, pc, #548	; (adr r3, 801a908 <__ieee754_rem_pio2+0x308>)
 801a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6e8:	f7e5 fdd0 	bl	800028c <__adddf3>
 801a6ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 801a6f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a6f4:	e7c4      	b.n	801a680 <__ieee754_rem_pio2+0x80>
 801a6f6:	a386      	add	r3, pc, #536	; (adr r3, 801a910 <__ieee754_rem_pio2+0x310>)
 801a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6fc:	f7e5 fdc6 	bl	800028c <__adddf3>
 801a700:	a385      	add	r3, pc, #532	; (adr r3, 801a918 <__ieee754_rem_pio2+0x318>)
 801a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a706:	4604      	mov	r4, r0
 801a708:	460d      	mov	r5, r1
 801a70a:	f7e5 fdbf 	bl	800028c <__adddf3>
 801a70e:	4602      	mov	r2, r0
 801a710:	460b      	mov	r3, r1
 801a712:	e9ca 2300 	strd	r2, r3, [sl]
 801a716:	4620      	mov	r0, r4
 801a718:	4629      	mov	r1, r5
 801a71a:	f7e5 fdb5 	bl	8000288 <__aeabi_dsub>
 801a71e:	a37e      	add	r3, pc, #504	; (adr r3, 801a918 <__ieee754_rem_pio2+0x318>)
 801a720:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a724:	e7e0      	b.n	801a6e8 <__ieee754_rem_pio2+0xe8>
 801a726:	4b87      	ldr	r3, [pc, #540]	; (801a944 <__ieee754_rem_pio2+0x344>)
 801a728:	4598      	cmp	r8, r3
 801a72a:	f300 80d8 	bgt.w	801a8de <__ieee754_rem_pio2+0x2de>
 801a72e:	f7ff f8bf 	bl	80198b0 <fabs>
 801a732:	ec55 4b10 	vmov	r4, r5, d0
 801a736:	ee10 0a10 	vmov	r0, s0
 801a73a:	a379      	add	r3, pc, #484	; (adr r3, 801a920 <__ieee754_rem_pio2+0x320>)
 801a73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a740:	4629      	mov	r1, r5
 801a742:	f7e5 ff59 	bl	80005f8 <__aeabi_dmul>
 801a746:	4b80      	ldr	r3, [pc, #512]	; (801a948 <__ieee754_rem_pio2+0x348>)
 801a748:	2200      	movs	r2, #0
 801a74a:	f7e5 fd9f 	bl	800028c <__adddf3>
 801a74e:	f7e6 fa03 	bl	8000b58 <__aeabi_d2iz>
 801a752:	4683      	mov	fp, r0
 801a754:	f7e5 fee6 	bl	8000524 <__aeabi_i2d>
 801a758:	4602      	mov	r2, r0
 801a75a:	460b      	mov	r3, r1
 801a75c:	ec43 2b18 	vmov	d8, r2, r3
 801a760:	a367      	add	r3, pc, #412	; (adr r3, 801a900 <__ieee754_rem_pio2+0x300>)
 801a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a766:	f7e5 ff47 	bl	80005f8 <__aeabi_dmul>
 801a76a:	4602      	mov	r2, r0
 801a76c:	460b      	mov	r3, r1
 801a76e:	4620      	mov	r0, r4
 801a770:	4629      	mov	r1, r5
 801a772:	f7e5 fd89 	bl	8000288 <__aeabi_dsub>
 801a776:	a364      	add	r3, pc, #400	; (adr r3, 801a908 <__ieee754_rem_pio2+0x308>)
 801a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a77c:	4606      	mov	r6, r0
 801a77e:	460f      	mov	r7, r1
 801a780:	ec51 0b18 	vmov	r0, r1, d8
 801a784:	f7e5 ff38 	bl	80005f8 <__aeabi_dmul>
 801a788:	f1bb 0f1f 	cmp.w	fp, #31
 801a78c:	4604      	mov	r4, r0
 801a78e:	460d      	mov	r5, r1
 801a790:	dc0d      	bgt.n	801a7ae <__ieee754_rem_pio2+0x1ae>
 801a792:	4b6e      	ldr	r3, [pc, #440]	; (801a94c <__ieee754_rem_pio2+0x34c>)
 801a794:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 801a798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a79c:	4543      	cmp	r3, r8
 801a79e:	d006      	beq.n	801a7ae <__ieee754_rem_pio2+0x1ae>
 801a7a0:	4622      	mov	r2, r4
 801a7a2:	462b      	mov	r3, r5
 801a7a4:	4630      	mov	r0, r6
 801a7a6:	4639      	mov	r1, r7
 801a7a8:	f7e5 fd6e 	bl	8000288 <__aeabi_dsub>
 801a7ac:	e00e      	b.n	801a7cc <__ieee754_rem_pio2+0x1cc>
 801a7ae:	462b      	mov	r3, r5
 801a7b0:	4622      	mov	r2, r4
 801a7b2:	4630      	mov	r0, r6
 801a7b4:	4639      	mov	r1, r7
 801a7b6:	f7e5 fd67 	bl	8000288 <__aeabi_dsub>
 801a7ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a7be:	9303      	str	r3, [sp, #12]
 801a7c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a7c4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801a7c8:	2b10      	cmp	r3, #16
 801a7ca:	dc02      	bgt.n	801a7d2 <__ieee754_rem_pio2+0x1d2>
 801a7cc:	e9ca 0100 	strd	r0, r1, [sl]
 801a7d0:	e039      	b.n	801a846 <__ieee754_rem_pio2+0x246>
 801a7d2:	a34f      	add	r3, pc, #316	; (adr r3, 801a910 <__ieee754_rem_pio2+0x310>)
 801a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7d8:	ec51 0b18 	vmov	r0, r1, d8
 801a7dc:	f7e5 ff0c 	bl	80005f8 <__aeabi_dmul>
 801a7e0:	4604      	mov	r4, r0
 801a7e2:	460d      	mov	r5, r1
 801a7e4:	4602      	mov	r2, r0
 801a7e6:	460b      	mov	r3, r1
 801a7e8:	4630      	mov	r0, r6
 801a7ea:	4639      	mov	r1, r7
 801a7ec:	f7e5 fd4c 	bl	8000288 <__aeabi_dsub>
 801a7f0:	4602      	mov	r2, r0
 801a7f2:	460b      	mov	r3, r1
 801a7f4:	4680      	mov	r8, r0
 801a7f6:	4689      	mov	r9, r1
 801a7f8:	4630      	mov	r0, r6
 801a7fa:	4639      	mov	r1, r7
 801a7fc:	f7e5 fd44 	bl	8000288 <__aeabi_dsub>
 801a800:	4622      	mov	r2, r4
 801a802:	462b      	mov	r3, r5
 801a804:	f7e5 fd40 	bl	8000288 <__aeabi_dsub>
 801a808:	a343      	add	r3, pc, #268	; (adr r3, 801a918 <__ieee754_rem_pio2+0x318>)
 801a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a80e:	4604      	mov	r4, r0
 801a810:	460d      	mov	r5, r1
 801a812:	ec51 0b18 	vmov	r0, r1, d8
 801a816:	f7e5 feef 	bl	80005f8 <__aeabi_dmul>
 801a81a:	4622      	mov	r2, r4
 801a81c:	462b      	mov	r3, r5
 801a81e:	f7e5 fd33 	bl	8000288 <__aeabi_dsub>
 801a822:	4602      	mov	r2, r0
 801a824:	460b      	mov	r3, r1
 801a826:	4604      	mov	r4, r0
 801a828:	460d      	mov	r5, r1
 801a82a:	4640      	mov	r0, r8
 801a82c:	4649      	mov	r1, r9
 801a82e:	f7e5 fd2b 	bl	8000288 <__aeabi_dsub>
 801a832:	9a03      	ldr	r2, [sp, #12]
 801a834:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a838:	1ad3      	subs	r3, r2, r3
 801a83a:	2b31      	cmp	r3, #49	; 0x31
 801a83c:	dc24      	bgt.n	801a888 <__ieee754_rem_pio2+0x288>
 801a83e:	e9ca 0100 	strd	r0, r1, [sl]
 801a842:	4646      	mov	r6, r8
 801a844:	464f      	mov	r7, r9
 801a846:	e9da 8900 	ldrd	r8, r9, [sl]
 801a84a:	4630      	mov	r0, r6
 801a84c:	4642      	mov	r2, r8
 801a84e:	464b      	mov	r3, r9
 801a850:	4639      	mov	r1, r7
 801a852:	f7e5 fd19 	bl	8000288 <__aeabi_dsub>
 801a856:	462b      	mov	r3, r5
 801a858:	4622      	mov	r2, r4
 801a85a:	f7e5 fd15 	bl	8000288 <__aeabi_dsub>
 801a85e:	9b02      	ldr	r3, [sp, #8]
 801a860:	2b00      	cmp	r3, #0
 801a862:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a866:	f6bf af0b 	bge.w	801a680 <__ieee754_rem_pio2+0x80>
 801a86a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a86e:	f8ca 3004 	str.w	r3, [sl, #4]
 801a872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a876:	f8ca 8000 	str.w	r8, [sl]
 801a87a:	f8ca 0008 	str.w	r0, [sl, #8]
 801a87e:	f8ca 300c 	str.w	r3, [sl, #12]
 801a882:	f1cb 0b00 	rsb	fp, fp, #0
 801a886:	e6fb      	b.n	801a680 <__ieee754_rem_pio2+0x80>
 801a888:	a327      	add	r3, pc, #156	; (adr r3, 801a928 <__ieee754_rem_pio2+0x328>)
 801a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a88e:	ec51 0b18 	vmov	r0, r1, d8
 801a892:	f7e5 feb1 	bl	80005f8 <__aeabi_dmul>
 801a896:	4604      	mov	r4, r0
 801a898:	460d      	mov	r5, r1
 801a89a:	4602      	mov	r2, r0
 801a89c:	460b      	mov	r3, r1
 801a89e:	4640      	mov	r0, r8
 801a8a0:	4649      	mov	r1, r9
 801a8a2:	f7e5 fcf1 	bl	8000288 <__aeabi_dsub>
 801a8a6:	4602      	mov	r2, r0
 801a8a8:	460b      	mov	r3, r1
 801a8aa:	4606      	mov	r6, r0
 801a8ac:	460f      	mov	r7, r1
 801a8ae:	4640      	mov	r0, r8
 801a8b0:	4649      	mov	r1, r9
 801a8b2:	f7e5 fce9 	bl	8000288 <__aeabi_dsub>
 801a8b6:	4622      	mov	r2, r4
 801a8b8:	462b      	mov	r3, r5
 801a8ba:	f7e5 fce5 	bl	8000288 <__aeabi_dsub>
 801a8be:	a31c      	add	r3, pc, #112	; (adr r3, 801a930 <__ieee754_rem_pio2+0x330>)
 801a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8c4:	4604      	mov	r4, r0
 801a8c6:	460d      	mov	r5, r1
 801a8c8:	ec51 0b18 	vmov	r0, r1, d8
 801a8cc:	f7e5 fe94 	bl	80005f8 <__aeabi_dmul>
 801a8d0:	4622      	mov	r2, r4
 801a8d2:	462b      	mov	r3, r5
 801a8d4:	f7e5 fcd8 	bl	8000288 <__aeabi_dsub>
 801a8d8:	4604      	mov	r4, r0
 801a8da:	460d      	mov	r5, r1
 801a8dc:	e760      	b.n	801a7a0 <__ieee754_rem_pio2+0x1a0>
 801a8de:	4b1c      	ldr	r3, [pc, #112]	; (801a950 <__ieee754_rem_pio2+0x350>)
 801a8e0:	4598      	cmp	r8, r3
 801a8e2:	dd37      	ble.n	801a954 <__ieee754_rem_pio2+0x354>
 801a8e4:	ee10 2a10 	vmov	r2, s0
 801a8e8:	462b      	mov	r3, r5
 801a8ea:	4620      	mov	r0, r4
 801a8ec:	4629      	mov	r1, r5
 801a8ee:	f7e5 fccb 	bl	8000288 <__aeabi_dsub>
 801a8f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a8f6:	e9ca 0100 	strd	r0, r1, [sl]
 801a8fa:	e695      	b.n	801a628 <__ieee754_rem_pio2+0x28>
 801a8fc:	f3af 8000 	nop.w
 801a900:	54400000 	.word	0x54400000
 801a904:	3ff921fb 	.word	0x3ff921fb
 801a908:	1a626331 	.word	0x1a626331
 801a90c:	3dd0b461 	.word	0x3dd0b461
 801a910:	1a600000 	.word	0x1a600000
 801a914:	3dd0b461 	.word	0x3dd0b461
 801a918:	2e037073 	.word	0x2e037073
 801a91c:	3ba3198a 	.word	0x3ba3198a
 801a920:	6dc9c883 	.word	0x6dc9c883
 801a924:	3fe45f30 	.word	0x3fe45f30
 801a928:	2e000000 	.word	0x2e000000
 801a92c:	3ba3198a 	.word	0x3ba3198a
 801a930:	252049c1 	.word	0x252049c1
 801a934:	397b839a 	.word	0x397b839a
 801a938:	3fe921fb 	.word	0x3fe921fb
 801a93c:	4002d97b 	.word	0x4002d97b
 801a940:	3ff921fb 	.word	0x3ff921fb
 801a944:	413921fb 	.word	0x413921fb
 801a948:	3fe00000 	.word	0x3fe00000
 801a94c:	0801cf18 	.word	0x0801cf18
 801a950:	7fefffff 	.word	0x7fefffff
 801a954:	ea4f 5628 	mov.w	r6, r8, asr #20
 801a958:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801a95c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801a960:	4620      	mov	r0, r4
 801a962:	460d      	mov	r5, r1
 801a964:	f7e6 f8f8 	bl	8000b58 <__aeabi_d2iz>
 801a968:	f7e5 fddc 	bl	8000524 <__aeabi_i2d>
 801a96c:	4602      	mov	r2, r0
 801a96e:	460b      	mov	r3, r1
 801a970:	4620      	mov	r0, r4
 801a972:	4629      	mov	r1, r5
 801a974:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a978:	f7e5 fc86 	bl	8000288 <__aeabi_dsub>
 801a97c:	4b21      	ldr	r3, [pc, #132]	; (801aa04 <__ieee754_rem_pio2+0x404>)
 801a97e:	2200      	movs	r2, #0
 801a980:	f7e5 fe3a 	bl	80005f8 <__aeabi_dmul>
 801a984:	460d      	mov	r5, r1
 801a986:	4604      	mov	r4, r0
 801a988:	f7e6 f8e6 	bl	8000b58 <__aeabi_d2iz>
 801a98c:	f7e5 fdca 	bl	8000524 <__aeabi_i2d>
 801a990:	4602      	mov	r2, r0
 801a992:	460b      	mov	r3, r1
 801a994:	4620      	mov	r0, r4
 801a996:	4629      	mov	r1, r5
 801a998:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a99c:	f7e5 fc74 	bl	8000288 <__aeabi_dsub>
 801a9a0:	4b18      	ldr	r3, [pc, #96]	; (801aa04 <__ieee754_rem_pio2+0x404>)
 801a9a2:	2200      	movs	r2, #0
 801a9a4:	f7e5 fe28 	bl	80005f8 <__aeabi_dmul>
 801a9a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a9ac:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801a9b0:	2703      	movs	r7, #3
 801a9b2:	2400      	movs	r4, #0
 801a9b4:	2500      	movs	r5, #0
 801a9b6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801a9ba:	4622      	mov	r2, r4
 801a9bc:	462b      	mov	r3, r5
 801a9be:	46b9      	mov	r9, r7
 801a9c0:	3f01      	subs	r7, #1
 801a9c2:	f7e6 f881 	bl	8000ac8 <__aeabi_dcmpeq>
 801a9c6:	2800      	cmp	r0, #0
 801a9c8:	d1f5      	bne.n	801a9b6 <__ieee754_rem_pio2+0x3b6>
 801a9ca:	4b0f      	ldr	r3, [pc, #60]	; (801aa08 <__ieee754_rem_pio2+0x408>)
 801a9cc:	9301      	str	r3, [sp, #4]
 801a9ce:	2302      	movs	r3, #2
 801a9d0:	9300      	str	r3, [sp, #0]
 801a9d2:	4632      	mov	r2, r6
 801a9d4:	464b      	mov	r3, r9
 801a9d6:	4651      	mov	r1, sl
 801a9d8:	a804      	add	r0, sp, #16
 801a9da:	f000 f819 	bl	801aa10 <__kernel_rem_pio2>
 801a9de:	9b02      	ldr	r3, [sp, #8]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	4683      	mov	fp, r0
 801a9e4:	f6bf ae4c 	bge.w	801a680 <__ieee754_rem_pio2+0x80>
 801a9e8:	e9da 2100 	ldrd	r2, r1, [sl]
 801a9ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a9f0:	e9ca 2300 	strd	r2, r3, [sl]
 801a9f4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801a9f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a9fc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801aa00:	e73f      	b.n	801a882 <__ieee754_rem_pio2+0x282>
 801aa02:	bf00      	nop
 801aa04:	41700000 	.word	0x41700000
 801aa08:	0801cf98 	.word	0x0801cf98
 801aa0c:	00000000 	.word	0x00000000

0801aa10 <__kernel_rem_pio2>:
 801aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa14:	ed2d 8b02 	vpush	{d8}
 801aa18:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801aa1c:	f112 0f14 	cmn.w	r2, #20
 801aa20:	9306      	str	r3, [sp, #24]
 801aa22:	9104      	str	r1, [sp, #16]
 801aa24:	4bc2      	ldr	r3, [pc, #776]	; (801ad30 <__kernel_rem_pio2+0x320>)
 801aa26:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801aa28:	9009      	str	r0, [sp, #36]	; 0x24
 801aa2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801aa2e:	9300      	str	r3, [sp, #0]
 801aa30:	9b06      	ldr	r3, [sp, #24]
 801aa32:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801aa36:	bfa8      	it	ge
 801aa38:	1ed4      	subge	r4, r2, #3
 801aa3a:	9305      	str	r3, [sp, #20]
 801aa3c:	bfb2      	itee	lt
 801aa3e:	2400      	movlt	r4, #0
 801aa40:	2318      	movge	r3, #24
 801aa42:	fb94 f4f3 	sdivge	r4, r4, r3
 801aa46:	f06f 0317 	mvn.w	r3, #23
 801aa4a:	fb04 3303 	mla	r3, r4, r3, r3
 801aa4e:	eb03 0a02 	add.w	sl, r3, r2
 801aa52:	9b00      	ldr	r3, [sp, #0]
 801aa54:	9a05      	ldr	r2, [sp, #20]
 801aa56:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801ad20 <__kernel_rem_pio2+0x310>
 801aa5a:	eb03 0802 	add.w	r8, r3, r2
 801aa5e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801aa60:	1aa7      	subs	r7, r4, r2
 801aa62:	ae20      	add	r6, sp, #128	; 0x80
 801aa64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801aa68:	2500      	movs	r5, #0
 801aa6a:	4545      	cmp	r5, r8
 801aa6c:	dd13      	ble.n	801aa96 <__kernel_rem_pio2+0x86>
 801aa6e:	9b06      	ldr	r3, [sp, #24]
 801aa70:	aa20      	add	r2, sp, #128	; 0x80
 801aa72:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801aa76:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801aa7a:	f04f 0800 	mov.w	r8, #0
 801aa7e:	9b00      	ldr	r3, [sp, #0]
 801aa80:	4598      	cmp	r8, r3
 801aa82:	dc31      	bgt.n	801aae8 <__kernel_rem_pio2+0xd8>
 801aa84:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801ad20 <__kernel_rem_pio2+0x310>
 801aa88:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801aa8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aa90:	462f      	mov	r7, r5
 801aa92:	2600      	movs	r6, #0
 801aa94:	e01b      	b.n	801aace <__kernel_rem_pio2+0xbe>
 801aa96:	42ef      	cmn	r7, r5
 801aa98:	d407      	bmi.n	801aaaa <__kernel_rem_pio2+0x9a>
 801aa9a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801aa9e:	f7e5 fd41 	bl	8000524 <__aeabi_i2d>
 801aaa2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801aaa6:	3501      	adds	r5, #1
 801aaa8:	e7df      	b.n	801aa6a <__kernel_rem_pio2+0x5a>
 801aaaa:	ec51 0b18 	vmov	r0, r1, d8
 801aaae:	e7f8      	b.n	801aaa2 <__kernel_rem_pio2+0x92>
 801aab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801aab4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801aab8:	f7e5 fd9e 	bl	80005f8 <__aeabi_dmul>
 801aabc:	4602      	mov	r2, r0
 801aabe:	460b      	mov	r3, r1
 801aac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aac4:	f7e5 fbe2 	bl	800028c <__adddf3>
 801aac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aacc:	3601      	adds	r6, #1
 801aace:	9b05      	ldr	r3, [sp, #20]
 801aad0:	429e      	cmp	r6, r3
 801aad2:	f1a7 0708 	sub.w	r7, r7, #8
 801aad6:	ddeb      	ble.n	801aab0 <__kernel_rem_pio2+0xa0>
 801aad8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801aadc:	f108 0801 	add.w	r8, r8, #1
 801aae0:	ecab 7b02 	vstmia	fp!, {d7}
 801aae4:	3508      	adds	r5, #8
 801aae6:	e7ca      	b.n	801aa7e <__kernel_rem_pio2+0x6e>
 801aae8:	9b00      	ldr	r3, [sp, #0]
 801aaea:	aa0c      	add	r2, sp, #48	; 0x30
 801aaec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801aaf0:	930b      	str	r3, [sp, #44]	; 0x2c
 801aaf2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801aaf4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801aaf8:	9c00      	ldr	r4, [sp, #0]
 801aafa:	930a      	str	r3, [sp, #40]	; 0x28
 801aafc:	00e3      	lsls	r3, r4, #3
 801aafe:	9308      	str	r3, [sp, #32]
 801ab00:	ab98      	add	r3, sp, #608	; 0x260
 801ab02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ab06:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801ab0a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801ab0e:	ab70      	add	r3, sp, #448	; 0x1c0
 801ab10:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801ab14:	46c3      	mov	fp, r8
 801ab16:	46a1      	mov	r9, r4
 801ab18:	f1b9 0f00 	cmp.w	r9, #0
 801ab1c:	f1a5 0508 	sub.w	r5, r5, #8
 801ab20:	dc77      	bgt.n	801ac12 <__kernel_rem_pio2+0x202>
 801ab22:	ec47 6b10 	vmov	d0, r6, r7
 801ab26:	4650      	mov	r0, sl
 801ab28:	f000 fd1e 	bl	801b568 <scalbn>
 801ab2c:	ec57 6b10 	vmov	r6, r7, d0
 801ab30:	2200      	movs	r2, #0
 801ab32:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801ab36:	ee10 0a10 	vmov	r0, s0
 801ab3a:	4639      	mov	r1, r7
 801ab3c:	f7e5 fd5c 	bl	80005f8 <__aeabi_dmul>
 801ab40:	ec41 0b10 	vmov	d0, r0, r1
 801ab44:	f7ff fbb0 	bl	801a2a8 <floor>
 801ab48:	4b7a      	ldr	r3, [pc, #488]	; (801ad34 <__kernel_rem_pio2+0x324>)
 801ab4a:	ec51 0b10 	vmov	r0, r1, d0
 801ab4e:	2200      	movs	r2, #0
 801ab50:	f7e5 fd52 	bl	80005f8 <__aeabi_dmul>
 801ab54:	4602      	mov	r2, r0
 801ab56:	460b      	mov	r3, r1
 801ab58:	4630      	mov	r0, r6
 801ab5a:	4639      	mov	r1, r7
 801ab5c:	f7e5 fb94 	bl	8000288 <__aeabi_dsub>
 801ab60:	460f      	mov	r7, r1
 801ab62:	4606      	mov	r6, r0
 801ab64:	f7e5 fff8 	bl	8000b58 <__aeabi_d2iz>
 801ab68:	9002      	str	r0, [sp, #8]
 801ab6a:	f7e5 fcdb 	bl	8000524 <__aeabi_i2d>
 801ab6e:	4602      	mov	r2, r0
 801ab70:	460b      	mov	r3, r1
 801ab72:	4630      	mov	r0, r6
 801ab74:	4639      	mov	r1, r7
 801ab76:	f7e5 fb87 	bl	8000288 <__aeabi_dsub>
 801ab7a:	f1ba 0f00 	cmp.w	sl, #0
 801ab7e:	4606      	mov	r6, r0
 801ab80:	460f      	mov	r7, r1
 801ab82:	dd6d      	ble.n	801ac60 <__kernel_rem_pio2+0x250>
 801ab84:	1e61      	subs	r1, r4, #1
 801ab86:	ab0c      	add	r3, sp, #48	; 0x30
 801ab88:	9d02      	ldr	r5, [sp, #8]
 801ab8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ab8e:	f1ca 0018 	rsb	r0, sl, #24
 801ab92:	fa43 f200 	asr.w	r2, r3, r0
 801ab96:	4415      	add	r5, r2
 801ab98:	4082      	lsls	r2, r0
 801ab9a:	1a9b      	subs	r3, r3, r2
 801ab9c:	aa0c      	add	r2, sp, #48	; 0x30
 801ab9e:	9502      	str	r5, [sp, #8]
 801aba0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801aba4:	f1ca 0217 	rsb	r2, sl, #23
 801aba8:	fa43 fb02 	asr.w	fp, r3, r2
 801abac:	f1bb 0f00 	cmp.w	fp, #0
 801abb0:	dd65      	ble.n	801ac7e <__kernel_rem_pio2+0x26e>
 801abb2:	9b02      	ldr	r3, [sp, #8]
 801abb4:	2200      	movs	r2, #0
 801abb6:	3301      	adds	r3, #1
 801abb8:	9302      	str	r3, [sp, #8]
 801abba:	4615      	mov	r5, r2
 801abbc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801abc0:	4294      	cmp	r4, r2
 801abc2:	f300 809f 	bgt.w	801ad04 <__kernel_rem_pio2+0x2f4>
 801abc6:	f1ba 0f00 	cmp.w	sl, #0
 801abca:	dd07      	ble.n	801abdc <__kernel_rem_pio2+0x1cc>
 801abcc:	f1ba 0f01 	cmp.w	sl, #1
 801abd0:	f000 80c1 	beq.w	801ad56 <__kernel_rem_pio2+0x346>
 801abd4:	f1ba 0f02 	cmp.w	sl, #2
 801abd8:	f000 80c7 	beq.w	801ad6a <__kernel_rem_pio2+0x35a>
 801abdc:	f1bb 0f02 	cmp.w	fp, #2
 801abe0:	d14d      	bne.n	801ac7e <__kernel_rem_pio2+0x26e>
 801abe2:	4632      	mov	r2, r6
 801abe4:	463b      	mov	r3, r7
 801abe6:	4954      	ldr	r1, [pc, #336]	; (801ad38 <__kernel_rem_pio2+0x328>)
 801abe8:	2000      	movs	r0, #0
 801abea:	f7e5 fb4d 	bl	8000288 <__aeabi_dsub>
 801abee:	4606      	mov	r6, r0
 801abf0:	460f      	mov	r7, r1
 801abf2:	2d00      	cmp	r5, #0
 801abf4:	d043      	beq.n	801ac7e <__kernel_rem_pio2+0x26e>
 801abf6:	4650      	mov	r0, sl
 801abf8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801ad28 <__kernel_rem_pio2+0x318>
 801abfc:	f000 fcb4 	bl	801b568 <scalbn>
 801ac00:	4630      	mov	r0, r6
 801ac02:	4639      	mov	r1, r7
 801ac04:	ec53 2b10 	vmov	r2, r3, d0
 801ac08:	f7e5 fb3e 	bl	8000288 <__aeabi_dsub>
 801ac0c:	4606      	mov	r6, r0
 801ac0e:	460f      	mov	r7, r1
 801ac10:	e035      	b.n	801ac7e <__kernel_rem_pio2+0x26e>
 801ac12:	4b4a      	ldr	r3, [pc, #296]	; (801ad3c <__kernel_rem_pio2+0x32c>)
 801ac14:	2200      	movs	r2, #0
 801ac16:	4630      	mov	r0, r6
 801ac18:	4639      	mov	r1, r7
 801ac1a:	f7e5 fced 	bl	80005f8 <__aeabi_dmul>
 801ac1e:	f7e5 ff9b 	bl	8000b58 <__aeabi_d2iz>
 801ac22:	f7e5 fc7f 	bl	8000524 <__aeabi_i2d>
 801ac26:	4602      	mov	r2, r0
 801ac28:	460b      	mov	r3, r1
 801ac2a:	ec43 2b18 	vmov	d8, r2, r3
 801ac2e:	4b44      	ldr	r3, [pc, #272]	; (801ad40 <__kernel_rem_pio2+0x330>)
 801ac30:	2200      	movs	r2, #0
 801ac32:	f7e5 fce1 	bl	80005f8 <__aeabi_dmul>
 801ac36:	4602      	mov	r2, r0
 801ac38:	460b      	mov	r3, r1
 801ac3a:	4630      	mov	r0, r6
 801ac3c:	4639      	mov	r1, r7
 801ac3e:	f7e5 fb23 	bl	8000288 <__aeabi_dsub>
 801ac42:	f7e5 ff89 	bl	8000b58 <__aeabi_d2iz>
 801ac46:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ac4a:	f84b 0b04 	str.w	r0, [fp], #4
 801ac4e:	ec51 0b18 	vmov	r0, r1, d8
 801ac52:	f7e5 fb1b 	bl	800028c <__adddf3>
 801ac56:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801ac5a:	4606      	mov	r6, r0
 801ac5c:	460f      	mov	r7, r1
 801ac5e:	e75b      	b.n	801ab18 <__kernel_rem_pio2+0x108>
 801ac60:	d106      	bne.n	801ac70 <__kernel_rem_pio2+0x260>
 801ac62:	1e63      	subs	r3, r4, #1
 801ac64:	aa0c      	add	r2, sp, #48	; 0x30
 801ac66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac6a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801ac6e:	e79d      	b.n	801abac <__kernel_rem_pio2+0x19c>
 801ac70:	4b34      	ldr	r3, [pc, #208]	; (801ad44 <__kernel_rem_pio2+0x334>)
 801ac72:	2200      	movs	r2, #0
 801ac74:	f7e5 ff46 	bl	8000b04 <__aeabi_dcmpge>
 801ac78:	2800      	cmp	r0, #0
 801ac7a:	d140      	bne.n	801acfe <__kernel_rem_pio2+0x2ee>
 801ac7c:	4683      	mov	fp, r0
 801ac7e:	2200      	movs	r2, #0
 801ac80:	2300      	movs	r3, #0
 801ac82:	4630      	mov	r0, r6
 801ac84:	4639      	mov	r1, r7
 801ac86:	f7e5 ff1f 	bl	8000ac8 <__aeabi_dcmpeq>
 801ac8a:	2800      	cmp	r0, #0
 801ac8c:	f000 80c1 	beq.w	801ae12 <__kernel_rem_pio2+0x402>
 801ac90:	1e65      	subs	r5, r4, #1
 801ac92:	462b      	mov	r3, r5
 801ac94:	2200      	movs	r2, #0
 801ac96:	9900      	ldr	r1, [sp, #0]
 801ac98:	428b      	cmp	r3, r1
 801ac9a:	da6d      	bge.n	801ad78 <__kernel_rem_pio2+0x368>
 801ac9c:	2a00      	cmp	r2, #0
 801ac9e:	f000 808a 	beq.w	801adb6 <__kernel_rem_pio2+0x3a6>
 801aca2:	ab0c      	add	r3, sp, #48	; 0x30
 801aca4:	f1aa 0a18 	sub.w	sl, sl, #24
 801aca8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801acac:	2b00      	cmp	r3, #0
 801acae:	f000 80ae 	beq.w	801ae0e <__kernel_rem_pio2+0x3fe>
 801acb2:	4650      	mov	r0, sl
 801acb4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801ad28 <__kernel_rem_pio2+0x318>
 801acb8:	f000 fc56 	bl	801b568 <scalbn>
 801acbc:	1c6b      	adds	r3, r5, #1
 801acbe:	00da      	lsls	r2, r3, #3
 801acc0:	9205      	str	r2, [sp, #20]
 801acc2:	ec57 6b10 	vmov	r6, r7, d0
 801acc6:	aa70      	add	r2, sp, #448	; 0x1c0
 801acc8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801ad3c <__kernel_rem_pio2+0x32c>
 801accc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801acd0:	462c      	mov	r4, r5
 801acd2:	f04f 0800 	mov.w	r8, #0
 801acd6:	2c00      	cmp	r4, #0
 801acd8:	f280 80d4 	bge.w	801ae84 <__kernel_rem_pio2+0x474>
 801acdc:	462c      	mov	r4, r5
 801acde:	2c00      	cmp	r4, #0
 801ace0:	f2c0 8102 	blt.w	801aee8 <__kernel_rem_pio2+0x4d8>
 801ace4:	4b18      	ldr	r3, [pc, #96]	; (801ad48 <__kernel_rem_pio2+0x338>)
 801ace6:	461e      	mov	r6, r3
 801ace8:	ab70      	add	r3, sp, #448	; 0x1c0
 801acea:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801acee:	1b2b      	subs	r3, r5, r4
 801acf0:	f04f 0900 	mov.w	r9, #0
 801acf4:	f04f 0a00 	mov.w	sl, #0
 801acf8:	2700      	movs	r7, #0
 801acfa:	9306      	str	r3, [sp, #24]
 801acfc:	e0e6      	b.n	801aecc <__kernel_rem_pio2+0x4bc>
 801acfe:	f04f 0b02 	mov.w	fp, #2
 801ad02:	e756      	b.n	801abb2 <__kernel_rem_pio2+0x1a2>
 801ad04:	f8d8 3000 	ldr.w	r3, [r8]
 801ad08:	bb05      	cbnz	r5, 801ad4c <__kernel_rem_pio2+0x33c>
 801ad0a:	b123      	cbz	r3, 801ad16 <__kernel_rem_pio2+0x306>
 801ad0c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801ad10:	f8c8 3000 	str.w	r3, [r8]
 801ad14:	2301      	movs	r3, #1
 801ad16:	3201      	adds	r2, #1
 801ad18:	f108 0804 	add.w	r8, r8, #4
 801ad1c:	461d      	mov	r5, r3
 801ad1e:	e74f      	b.n	801abc0 <__kernel_rem_pio2+0x1b0>
	...
 801ad2c:	3ff00000 	.word	0x3ff00000
 801ad30:	0801d0e0 	.word	0x0801d0e0
 801ad34:	40200000 	.word	0x40200000
 801ad38:	3ff00000 	.word	0x3ff00000
 801ad3c:	3e700000 	.word	0x3e700000
 801ad40:	41700000 	.word	0x41700000
 801ad44:	3fe00000 	.word	0x3fe00000
 801ad48:	0801d0a0 	.word	0x0801d0a0
 801ad4c:	1acb      	subs	r3, r1, r3
 801ad4e:	f8c8 3000 	str.w	r3, [r8]
 801ad52:	462b      	mov	r3, r5
 801ad54:	e7df      	b.n	801ad16 <__kernel_rem_pio2+0x306>
 801ad56:	1e62      	subs	r2, r4, #1
 801ad58:	ab0c      	add	r3, sp, #48	; 0x30
 801ad5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ad5e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801ad62:	a90c      	add	r1, sp, #48	; 0x30
 801ad64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801ad68:	e738      	b.n	801abdc <__kernel_rem_pio2+0x1cc>
 801ad6a:	1e62      	subs	r2, r4, #1
 801ad6c:	ab0c      	add	r3, sp, #48	; 0x30
 801ad6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ad72:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801ad76:	e7f4      	b.n	801ad62 <__kernel_rem_pio2+0x352>
 801ad78:	a90c      	add	r1, sp, #48	; 0x30
 801ad7a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801ad7e:	3b01      	subs	r3, #1
 801ad80:	430a      	orrs	r2, r1
 801ad82:	e788      	b.n	801ac96 <__kernel_rem_pio2+0x286>
 801ad84:	3301      	adds	r3, #1
 801ad86:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801ad8a:	2900      	cmp	r1, #0
 801ad8c:	d0fa      	beq.n	801ad84 <__kernel_rem_pio2+0x374>
 801ad8e:	9a08      	ldr	r2, [sp, #32]
 801ad90:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801ad94:	446a      	add	r2, sp
 801ad96:	3a98      	subs	r2, #152	; 0x98
 801ad98:	9208      	str	r2, [sp, #32]
 801ad9a:	9a06      	ldr	r2, [sp, #24]
 801ad9c:	a920      	add	r1, sp, #128	; 0x80
 801ad9e:	18a2      	adds	r2, r4, r2
 801ada0:	18e3      	adds	r3, r4, r3
 801ada2:	f104 0801 	add.w	r8, r4, #1
 801ada6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801adaa:	9302      	str	r3, [sp, #8]
 801adac:	9b02      	ldr	r3, [sp, #8]
 801adae:	4543      	cmp	r3, r8
 801adb0:	da04      	bge.n	801adbc <__kernel_rem_pio2+0x3ac>
 801adb2:	461c      	mov	r4, r3
 801adb4:	e6a2      	b.n	801aafc <__kernel_rem_pio2+0xec>
 801adb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801adb8:	2301      	movs	r3, #1
 801adba:	e7e4      	b.n	801ad86 <__kernel_rem_pio2+0x376>
 801adbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801adbe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801adc2:	f7e5 fbaf 	bl	8000524 <__aeabi_i2d>
 801adc6:	e8e5 0102 	strd	r0, r1, [r5], #8
 801adca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adcc:	46ab      	mov	fp, r5
 801adce:	461c      	mov	r4, r3
 801add0:	f04f 0900 	mov.w	r9, #0
 801add4:	2600      	movs	r6, #0
 801add6:	2700      	movs	r7, #0
 801add8:	9b05      	ldr	r3, [sp, #20]
 801adda:	4599      	cmp	r9, r3
 801addc:	dd06      	ble.n	801adec <__kernel_rem_pio2+0x3dc>
 801adde:	9b08      	ldr	r3, [sp, #32]
 801ade0:	e8e3 6702 	strd	r6, r7, [r3], #8
 801ade4:	f108 0801 	add.w	r8, r8, #1
 801ade8:	9308      	str	r3, [sp, #32]
 801adea:	e7df      	b.n	801adac <__kernel_rem_pio2+0x39c>
 801adec:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801adf0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801adf4:	f7e5 fc00 	bl	80005f8 <__aeabi_dmul>
 801adf8:	4602      	mov	r2, r0
 801adfa:	460b      	mov	r3, r1
 801adfc:	4630      	mov	r0, r6
 801adfe:	4639      	mov	r1, r7
 801ae00:	f7e5 fa44 	bl	800028c <__adddf3>
 801ae04:	f109 0901 	add.w	r9, r9, #1
 801ae08:	4606      	mov	r6, r0
 801ae0a:	460f      	mov	r7, r1
 801ae0c:	e7e4      	b.n	801add8 <__kernel_rem_pio2+0x3c8>
 801ae0e:	3d01      	subs	r5, #1
 801ae10:	e747      	b.n	801aca2 <__kernel_rem_pio2+0x292>
 801ae12:	ec47 6b10 	vmov	d0, r6, r7
 801ae16:	f1ca 0000 	rsb	r0, sl, #0
 801ae1a:	f000 fba5 	bl	801b568 <scalbn>
 801ae1e:	ec57 6b10 	vmov	r6, r7, d0
 801ae22:	4ba0      	ldr	r3, [pc, #640]	; (801b0a4 <__kernel_rem_pio2+0x694>)
 801ae24:	ee10 0a10 	vmov	r0, s0
 801ae28:	2200      	movs	r2, #0
 801ae2a:	4639      	mov	r1, r7
 801ae2c:	f7e5 fe6a 	bl	8000b04 <__aeabi_dcmpge>
 801ae30:	b1f8      	cbz	r0, 801ae72 <__kernel_rem_pio2+0x462>
 801ae32:	4b9d      	ldr	r3, [pc, #628]	; (801b0a8 <__kernel_rem_pio2+0x698>)
 801ae34:	2200      	movs	r2, #0
 801ae36:	4630      	mov	r0, r6
 801ae38:	4639      	mov	r1, r7
 801ae3a:	f7e5 fbdd 	bl	80005f8 <__aeabi_dmul>
 801ae3e:	f7e5 fe8b 	bl	8000b58 <__aeabi_d2iz>
 801ae42:	4680      	mov	r8, r0
 801ae44:	f7e5 fb6e 	bl	8000524 <__aeabi_i2d>
 801ae48:	4b96      	ldr	r3, [pc, #600]	; (801b0a4 <__kernel_rem_pio2+0x694>)
 801ae4a:	2200      	movs	r2, #0
 801ae4c:	f7e5 fbd4 	bl	80005f8 <__aeabi_dmul>
 801ae50:	460b      	mov	r3, r1
 801ae52:	4602      	mov	r2, r0
 801ae54:	4639      	mov	r1, r7
 801ae56:	4630      	mov	r0, r6
 801ae58:	f7e5 fa16 	bl	8000288 <__aeabi_dsub>
 801ae5c:	f7e5 fe7c 	bl	8000b58 <__aeabi_d2iz>
 801ae60:	1c65      	adds	r5, r4, #1
 801ae62:	ab0c      	add	r3, sp, #48	; 0x30
 801ae64:	f10a 0a18 	add.w	sl, sl, #24
 801ae68:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ae6c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801ae70:	e71f      	b.n	801acb2 <__kernel_rem_pio2+0x2a2>
 801ae72:	4630      	mov	r0, r6
 801ae74:	4639      	mov	r1, r7
 801ae76:	f7e5 fe6f 	bl	8000b58 <__aeabi_d2iz>
 801ae7a:	ab0c      	add	r3, sp, #48	; 0x30
 801ae7c:	4625      	mov	r5, r4
 801ae7e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ae82:	e716      	b.n	801acb2 <__kernel_rem_pio2+0x2a2>
 801ae84:	ab0c      	add	r3, sp, #48	; 0x30
 801ae86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ae8a:	f7e5 fb4b 	bl	8000524 <__aeabi_i2d>
 801ae8e:	4632      	mov	r2, r6
 801ae90:	463b      	mov	r3, r7
 801ae92:	f7e5 fbb1 	bl	80005f8 <__aeabi_dmul>
 801ae96:	4642      	mov	r2, r8
 801ae98:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801ae9c:	464b      	mov	r3, r9
 801ae9e:	4630      	mov	r0, r6
 801aea0:	4639      	mov	r1, r7
 801aea2:	f7e5 fba9 	bl	80005f8 <__aeabi_dmul>
 801aea6:	3c01      	subs	r4, #1
 801aea8:	4606      	mov	r6, r0
 801aeaa:	460f      	mov	r7, r1
 801aeac:	e713      	b.n	801acd6 <__kernel_rem_pio2+0x2c6>
 801aeae:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801aeb2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801aeb6:	f7e5 fb9f 	bl	80005f8 <__aeabi_dmul>
 801aeba:	4602      	mov	r2, r0
 801aebc:	460b      	mov	r3, r1
 801aebe:	4648      	mov	r0, r9
 801aec0:	4651      	mov	r1, sl
 801aec2:	f7e5 f9e3 	bl	800028c <__adddf3>
 801aec6:	3701      	adds	r7, #1
 801aec8:	4681      	mov	r9, r0
 801aeca:	468a      	mov	sl, r1
 801aecc:	9b00      	ldr	r3, [sp, #0]
 801aece:	429f      	cmp	r7, r3
 801aed0:	dc02      	bgt.n	801aed8 <__kernel_rem_pio2+0x4c8>
 801aed2:	9b06      	ldr	r3, [sp, #24]
 801aed4:	429f      	cmp	r7, r3
 801aed6:	ddea      	ble.n	801aeae <__kernel_rem_pio2+0x49e>
 801aed8:	9a06      	ldr	r2, [sp, #24]
 801aeda:	ab48      	add	r3, sp, #288	; 0x120
 801aedc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801aee0:	e9c6 9a00 	strd	r9, sl, [r6]
 801aee4:	3c01      	subs	r4, #1
 801aee6:	e6fa      	b.n	801acde <__kernel_rem_pio2+0x2ce>
 801aee8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801aeea:	2b02      	cmp	r3, #2
 801aeec:	dc0b      	bgt.n	801af06 <__kernel_rem_pio2+0x4f6>
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	dc39      	bgt.n	801af66 <__kernel_rem_pio2+0x556>
 801aef2:	d05d      	beq.n	801afb0 <__kernel_rem_pio2+0x5a0>
 801aef4:	9b02      	ldr	r3, [sp, #8]
 801aef6:	f003 0007 	and.w	r0, r3, #7
 801aefa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801aefe:	ecbd 8b02 	vpop	{d8}
 801af02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af06:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801af08:	2b03      	cmp	r3, #3
 801af0a:	d1f3      	bne.n	801aef4 <__kernel_rem_pio2+0x4e4>
 801af0c:	9b05      	ldr	r3, [sp, #20]
 801af0e:	9500      	str	r5, [sp, #0]
 801af10:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801af14:	eb0d 0403 	add.w	r4, sp, r3
 801af18:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801af1c:	46a2      	mov	sl, r4
 801af1e:	9b00      	ldr	r3, [sp, #0]
 801af20:	2b00      	cmp	r3, #0
 801af22:	f1aa 0a08 	sub.w	sl, sl, #8
 801af26:	dc69      	bgt.n	801affc <__kernel_rem_pio2+0x5ec>
 801af28:	46aa      	mov	sl, r5
 801af2a:	f1ba 0f01 	cmp.w	sl, #1
 801af2e:	f1a4 0408 	sub.w	r4, r4, #8
 801af32:	f300 8083 	bgt.w	801b03c <__kernel_rem_pio2+0x62c>
 801af36:	9c05      	ldr	r4, [sp, #20]
 801af38:	ab48      	add	r3, sp, #288	; 0x120
 801af3a:	441c      	add	r4, r3
 801af3c:	2000      	movs	r0, #0
 801af3e:	2100      	movs	r1, #0
 801af40:	2d01      	cmp	r5, #1
 801af42:	f300 809a 	bgt.w	801b07a <__kernel_rem_pio2+0x66a>
 801af46:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801af4a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801af4e:	f1bb 0f00 	cmp.w	fp, #0
 801af52:	f040 8098 	bne.w	801b086 <__kernel_rem_pio2+0x676>
 801af56:	9b04      	ldr	r3, [sp, #16]
 801af58:	e9c3 7800 	strd	r7, r8, [r3]
 801af5c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801af60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801af64:	e7c6      	b.n	801aef4 <__kernel_rem_pio2+0x4e4>
 801af66:	9e05      	ldr	r6, [sp, #20]
 801af68:	ab48      	add	r3, sp, #288	; 0x120
 801af6a:	441e      	add	r6, r3
 801af6c:	462c      	mov	r4, r5
 801af6e:	2000      	movs	r0, #0
 801af70:	2100      	movs	r1, #0
 801af72:	2c00      	cmp	r4, #0
 801af74:	da33      	bge.n	801afde <__kernel_rem_pio2+0x5ce>
 801af76:	f1bb 0f00 	cmp.w	fp, #0
 801af7a:	d036      	beq.n	801afea <__kernel_rem_pio2+0x5da>
 801af7c:	4602      	mov	r2, r0
 801af7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801af82:	9c04      	ldr	r4, [sp, #16]
 801af84:	e9c4 2300 	strd	r2, r3, [r4]
 801af88:	4602      	mov	r2, r0
 801af8a:	460b      	mov	r3, r1
 801af8c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801af90:	f7e5 f97a 	bl	8000288 <__aeabi_dsub>
 801af94:	ae4a      	add	r6, sp, #296	; 0x128
 801af96:	2401      	movs	r4, #1
 801af98:	42a5      	cmp	r5, r4
 801af9a:	da29      	bge.n	801aff0 <__kernel_rem_pio2+0x5e0>
 801af9c:	f1bb 0f00 	cmp.w	fp, #0
 801afa0:	d002      	beq.n	801afa8 <__kernel_rem_pio2+0x598>
 801afa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801afa6:	4619      	mov	r1, r3
 801afa8:	9b04      	ldr	r3, [sp, #16]
 801afaa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801afae:	e7a1      	b.n	801aef4 <__kernel_rem_pio2+0x4e4>
 801afb0:	9c05      	ldr	r4, [sp, #20]
 801afb2:	ab48      	add	r3, sp, #288	; 0x120
 801afb4:	441c      	add	r4, r3
 801afb6:	2000      	movs	r0, #0
 801afb8:	2100      	movs	r1, #0
 801afba:	2d00      	cmp	r5, #0
 801afbc:	da09      	bge.n	801afd2 <__kernel_rem_pio2+0x5c2>
 801afbe:	f1bb 0f00 	cmp.w	fp, #0
 801afc2:	d002      	beq.n	801afca <__kernel_rem_pio2+0x5ba>
 801afc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801afc8:	4619      	mov	r1, r3
 801afca:	9b04      	ldr	r3, [sp, #16]
 801afcc:	e9c3 0100 	strd	r0, r1, [r3]
 801afd0:	e790      	b.n	801aef4 <__kernel_rem_pio2+0x4e4>
 801afd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801afd6:	f7e5 f959 	bl	800028c <__adddf3>
 801afda:	3d01      	subs	r5, #1
 801afdc:	e7ed      	b.n	801afba <__kernel_rem_pio2+0x5aa>
 801afde:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801afe2:	f7e5 f953 	bl	800028c <__adddf3>
 801afe6:	3c01      	subs	r4, #1
 801afe8:	e7c3      	b.n	801af72 <__kernel_rem_pio2+0x562>
 801afea:	4602      	mov	r2, r0
 801afec:	460b      	mov	r3, r1
 801afee:	e7c8      	b.n	801af82 <__kernel_rem_pio2+0x572>
 801aff0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801aff4:	f7e5 f94a 	bl	800028c <__adddf3>
 801aff8:	3401      	adds	r4, #1
 801affa:	e7cd      	b.n	801af98 <__kernel_rem_pio2+0x588>
 801affc:	e9da 8900 	ldrd	r8, r9, [sl]
 801b000:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801b004:	9b00      	ldr	r3, [sp, #0]
 801b006:	3b01      	subs	r3, #1
 801b008:	9300      	str	r3, [sp, #0]
 801b00a:	4632      	mov	r2, r6
 801b00c:	463b      	mov	r3, r7
 801b00e:	4640      	mov	r0, r8
 801b010:	4649      	mov	r1, r9
 801b012:	f7e5 f93b 	bl	800028c <__adddf3>
 801b016:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b01a:	4602      	mov	r2, r0
 801b01c:	460b      	mov	r3, r1
 801b01e:	4640      	mov	r0, r8
 801b020:	4649      	mov	r1, r9
 801b022:	f7e5 f931 	bl	8000288 <__aeabi_dsub>
 801b026:	4632      	mov	r2, r6
 801b028:	463b      	mov	r3, r7
 801b02a:	f7e5 f92f 	bl	800028c <__adddf3>
 801b02e:	ed9d 7b06 	vldr	d7, [sp, #24]
 801b032:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b036:	ed8a 7b00 	vstr	d7, [sl]
 801b03a:	e770      	b.n	801af1e <__kernel_rem_pio2+0x50e>
 801b03c:	e9d4 8900 	ldrd	r8, r9, [r4]
 801b040:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801b044:	4640      	mov	r0, r8
 801b046:	4632      	mov	r2, r6
 801b048:	463b      	mov	r3, r7
 801b04a:	4649      	mov	r1, r9
 801b04c:	f7e5 f91e 	bl	800028c <__adddf3>
 801b050:	e9cd 0100 	strd	r0, r1, [sp]
 801b054:	4602      	mov	r2, r0
 801b056:	460b      	mov	r3, r1
 801b058:	4640      	mov	r0, r8
 801b05a:	4649      	mov	r1, r9
 801b05c:	f7e5 f914 	bl	8000288 <__aeabi_dsub>
 801b060:	4632      	mov	r2, r6
 801b062:	463b      	mov	r3, r7
 801b064:	f7e5 f912 	bl	800028c <__adddf3>
 801b068:	ed9d 7b00 	vldr	d7, [sp]
 801b06c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801b070:	ed84 7b00 	vstr	d7, [r4]
 801b074:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b078:	e757      	b.n	801af2a <__kernel_rem_pio2+0x51a>
 801b07a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b07e:	f7e5 f905 	bl	800028c <__adddf3>
 801b082:	3d01      	subs	r5, #1
 801b084:	e75c      	b.n	801af40 <__kernel_rem_pio2+0x530>
 801b086:	9b04      	ldr	r3, [sp, #16]
 801b088:	9a04      	ldr	r2, [sp, #16]
 801b08a:	601f      	str	r7, [r3, #0]
 801b08c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801b090:	605c      	str	r4, [r3, #4]
 801b092:	609d      	str	r5, [r3, #8]
 801b094:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801b098:	60d3      	str	r3, [r2, #12]
 801b09a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b09e:	6110      	str	r0, [r2, #16]
 801b0a0:	6153      	str	r3, [r2, #20]
 801b0a2:	e727      	b.n	801aef4 <__kernel_rem_pio2+0x4e4>
 801b0a4:	41700000 	.word	0x41700000
 801b0a8:	3e700000 	.word	0x3e700000
 801b0ac:	00000000 	.word	0x00000000

0801b0b0 <__kernel_cos>:
 801b0b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0b4:	ec57 6b10 	vmov	r6, r7, d0
 801b0b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801b0bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801b0c0:	ed8d 1b00 	vstr	d1, [sp]
 801b0c4:	da07      	bge.n	801b0d6 <__kernel_cos+0x26>
 801b0c6:	ee10 0a10 	vmov	r0, s0
 801b0ca:	4639      	mov	r1, r7
 801b0cc:	f7e5 fd44 	bl	8000b58 <__aeabi_d2iz>
 801b0d0:	2800      	cmp	r0, #0
 801b0d2:	f000 8088 	beq.w	801b1e6 <__kernel_cos+0x136>
 801b0d6:	4632      	mov	r2, r6
 801b0d8:	463b      	mov	r3, r7
 801b0da:	4630      	mov	r0, r6
 801b0dc:	4639      	mov	r1, r7
 801b0de:	f7e5 fa8b 	bl	80005f8 <__aeabi_dmul>
 801b0e2:	4b51      	ldr	r3, [pc, #324]	; (801b228 <__kernel_cos+0x178>)
 801b0e4:	2200      	movs	r2, #0
 801b0e6:	4604      	mov	r4, r0
 801b0e8:	460d      	mov	r5, r1
 801b0ea:	f7e5 fa85 	bl	80005f8 <__aeabi_dmul>
 801b0ee:	a340      	add	r3, pc, #256	; (adr r3, 801b1f0 <__kernel_cos+0x140>)
 801b0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0f4:	4682      	mov	sl, r0
 801b0f6:	468b      	mov	fp, r1
 801b0f8:	4620      	mov	r0, r4
 801b0fa:	4629      	mov	r1, r5
 801b0fc:	f7e5 fa7c 	bl	80005f8 <__aeabi_dmul>
 801b100:	a33d      	add	r3, pc, #244	; (adr r3, 801b1f8 <__kernel_cos+0x148>)
 801b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b106:	f7e5 f8c1 	bl	800028c <__adddf3>
 801b10a:	4622      	mov	r2, r4
 801b10c:	462b      	mov	r3, r5
 801b10e:	f7e5 fa73 	bl	80005f8 <__aeabi_dmul>
 801b112:	a33b      	add	r3, pc, #236	; (adr r3, 801b200 <__kernel_cos+0x150>)
 801b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b118:	f7e5 f8b6 	bl	8000288 <__aeabi_dsub>
 801b11c:	4622      	mov	r2, r4
 801b11e:	462b      	mov	r3, r5
 801b120:	f7e5 fa6a 	bl	80005f8 <__aeabi_dmul>
 801b124:	a338      	add	r3, pc, #224	; (adr r3, 801b208 <__kernel_cos+0x158>)
 801b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b12a:	f7e5 f8af 	bl	800028c <__adddf3>
 801b12e:	4622      	mov	r2, r4
 801b130:	462b      	mov	r3, r5
 801b132:	f7e5 fa61 	bl	80005f8 <__aeabi_dmul>
 801b136:	a336      	add	r3, pc, #216	; (adr r3, 801b210 <__kernel_cos+0x160>)
 801b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b13c:	f7e5 f8a4 	bl	8000288 <__aeabi_dsub>
 801b140:	4622      	mov	r2, r4
 801b142:	462b      	mov	r3, r5
 801b144:	f7e5 fa58 	bl	80005f8 <__aeabi_dmul>
 801b148:	a333      	add	r3, pc, #204	; (adr r3, 801b218 <__kernel_cos+0x168>)
 801b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b14e:	f7e5 f89d 	bl	800028c <__adddf3>
 801b152:	4622      	mov	r2, r4
 801b154:	462b      	mov	r3, r5
 801b156:	f7e5 fa4f 	bl	80005f8 <__aeabi_dmul>
 801b15a:	4622      	mov	r2, r4
 801b15c:	462b      	mov	r3, r5
 801b15e:	f7e5 fa4b 	bl	80005f8 <__aeabi_dmul>
 801b162:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b166:	4604      	mov	r4, r0
 801b168:	460d      	mov	r5, r1
 801b16a:	4630      	mov	r0, r6
 801b16c:	4639      	mov	r1, r7
 801b16e:	f7e5 fa43 	bl	80005f8 <__aeabi_dmul>
 801b172:	460b      	mov	r3, r1
 801b174:	4602      	mov	r2, r0
 801b176:	4629      	mov	r1, r5
 801b178:	4620      	mov	r0, r4
 801b17a:	f7e5 f885 	bl	8000288 <__aeabi_dsub>
 801b17e:	4b2b      	ldr	r3, [pc, #172]	; (801b22c <__kernel_cos+0x17c>)
 801b180:	4598      	cmp	r8, r3
 801b182:	4606      	mov	r6, r0
 801b184:	460f      	mov	r7, r1
 801b186:	dc10      	bgt.n	801b1aa <__kernel_cos+0xfa>
 801b188:	4602      	mov	r2, r0
 801b18a:	460b      	mov	r3, r1
 801b18c:	4650      	mov	r0, sl
 801b18e:	4659      	mov	r1, fp
 801b190:	f7e5 f87a 	bl	8000288 <__aeabi_dsub>
 801b194:	460b      	mov	r3, r1
 801b196:	4926      	ldr	r1, [pc, #152]	; (801b230 <__kernel_cos+0x180>)
 801b198:	4602      	mov	r2, r0
 801b19a:	2000      	movs	r0, #0
 801b19c:	f7e5 f874 	bl	8000288 <__aeabi_dsub>
 801b1a0:	ec41 0b10 	vmov	d0, r0, r1
 801b1a4:	b003      	add	sp, #12
 801b1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1aa:	4b22      	ldr	r3, [pc, #136]	; (801b234 <__kernel_cos+0x184>)
 801b1ac:	4920      	ldr	r1, [pc, #128]	; (801b230 <__kernel_cos+0x180>)
 801b1ae:	4598      	cmp	r8, r3
 801b1b0:	bfcc      	ite	gt
 801b1b2:	4d21      	ldrgt	r5, [pc, #132]	; (801b238 <__kernel_cos+0x188>)
 801b1b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801b1b8:	2400      	movs	r4, #0
 801b1ba:	4622      	mov	r2, r4
 801b1bc:	462b      	mov	r3, r5
 801b1be:	2000      	movs	r0, #0
 801b1c0:	f7e5 f862 	bl	8000288 <__aeabi_dsub>
 801b1c4:	4622      	mov	r2, r4
 801b1c6:	4680      	mov	r8, r0
 801b1c8:	4689      	mov	r9, r1
 801b1ca:	462b      	mov	r3, r5
 801b1cc:	4650      	mov	r0, sl
 801b1ce:	4659      	mov	r1, fp
 801b1d0:	f7e5 f85a 	bl	8000288 <__aeabi_dsub>
 801b1d4:	4632      	mov	r2, r6
 801b1d6:	463b      	mov	r3, r7
 801b1d8:	f7e5 f856 	bl	8000288 <__aeabi_dsub>
 801b1dc:	4602      	mov	r2, r0
 801b1de:	460b      	mov	r3, r1
 801b1e0:	4640      	mov	r0, r8
 801b1e2:	4649      	mov	r1, r9
 801b1e4:	e7da      	b.n	801b19c <__kernel_cos+0xec>
 801b1e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801b220 <__kernel_cos+0x170>
 801b1ea:	e7db      	b.n	801b1a4 <__kernel_cos+0xf4>
 801b1ec:	f3af 8000 	nop.w
 801b1f0:	be8838d4 	.word	0xbe8838d4
 801b1f4:	bda8fae9 	.word	0xbda8fae9
 801b1f8:	bdb4b1c4 	.word	0xbdb4b1c4
 801b1fc:	3e21ee9e 	.word	0x3e21ee9e
 801b200:	809c52ad 	.word	0x809c52ad
 801b204:	3e927e4f 	.word	0x3e927e4f
 801b208:	19cb1590 	.word	0x19cb1590
 801b20c:	3efa01a0 	.word	0x3efa01a0
 801b210:	16c15177 	.word	0x16c15177
 801b214:	3f56c16c 	.word	0x3f56c16c
 801b218:	5555554c 	.word	0x5555554c
 801b21c:	3fa55555 	.word	0x3fa55555
 801b220:	00000000 	.word	0x00000000
 801b224:	3ff00000 	.word	0x3ff00000
 801b228:	3fe00000 	.word	0x3fe00000
 801b22c:	3fd33332 	.word	0x3fd33332
 801b230:	3ff00000 	.word	0x3ff00000
 801b234:	3fe90000 	.word	0x3fe90000
 801b238:	3fd20000 	.word	0x3fd20000
 801b23c:	00000000 	.word	0x00000000

0801b240 <__kernel_sin>:
 801b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b244:	ed2d 8b04 	vpush	{d8-d9}
 801b248:	eeb0 8a41 	vmov.f32	s16, s2
 801b24c:	eef0 8a61 	vmov.f32	s17, s3
 801b250:	ec55 4b10 	vmov	r4, r5, d0
 801b254:	b083      	sub	sp, #12
 801b256:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b25a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801b25e:	9001      	str	r0, [sp, #4]
 801b260:	da06      	bge.n	801b270 <__kernel_sin+0x30>
 801b262:	ee10 0a10 	vmov	r0, s0
 801b266:	4629      	mov	r1, r5
 801b268:	f7e5 fc76 	bl	8000b58 <__aeabi_d2iz>
 801b26c:	2800      	cmp	r0, #0
 801b26e:	d051      	beq.n	801b314 <__kernel_sin+0xd4>
 801b270:	4622      	mov	r2, r4
 801b272:	462b      	mov	r3, r5
 801b274:	4620      	mov	r0, r4
 801b276:	4629      	mov	r1, r5
 801b278:	f7e5 f9be 	bl	80005f8 <__aeabi_dmul>
 801b27c:	4682      	mov	sl, r0
 801b27e:	468b      	mov	fp, r1
 801b280:	4602      	mov	r2, r0
 801b282:	460b      	mov	r3, r1
 801b284:	4620      	mov	r0, r4
 801b286:	4629      	mov	r1, r5
 801b288:	f7e5 f9b6 	bl	80005f8 <__aeabi_dmul>
 801b28c:	a341      	add	r3, pc, #260	; (adr r3, 801b394 <__kernel_sin+0x154>)
 801b28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b292:	4680      	mov	r8, r0
 801b294:	4689      	mov	r9, r1
 801b296:	4650      	mov	r0, sl
 801b298:	4659      	mov	r1, fp
 801b29a:	f7e5 f9ad 	bl	80005f8 <__aeabi_dmul>
 801b29e:	a33f      	add	r3, pc, #252	; (adr r3, 801b39c <__kernel_sin+0x15c>)
 801b2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2a4:	f7e4 fff0 	bl	8000288 <__aeabi_dsub>
 801b2a8:	4652      	mov	r2, sl
 801b2aa:	465b      	mov	r3, fp
 801b2ac:	f7e5 f9a4 	bl	80005f8 <__aeabi_dmul>
 801b2b0:	a33c      	add	r3, pc, #240	; (adr r3, 801b3a4 <__kernel_sin+0x164>)
 801b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2b6:	f7e4 ffe9 	bl	800028c <__adddf3>
 801b2ba:	4652      	mov	r2, sl
 801b2bc:	465b      	mov	r3, fp
 801b2be:	f7e5 f99b 	bl	80005f8 <__aeabi_dmul>
 801b2c2:	a33a      	add	r3, pc, #232	; (adr r3, 801b3ac <__kernel_sin+0x16c>)
 801b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2c8:	f7e4 ffde 	bl	8000288 <__aeabi_dsub>
 801b2cc:	4652      	mov	r2, sl
 801b2ce:	465b      	mov	r3, fp
 801b2d0:	f7e5 f992 	bl	80005f8 <__aeabi_dmul>
 801b2d4:	a337      	add	r3, pc, #220	; (adr r3, 801b3b4 <__kernel_sin+0x174>)
 801b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2da:	f7e4 ffd7 	bl	800028c <__adddf3>
 801b2de:	9b01      	ldr	r3, [sp, #4]
 801b2e0:	4606      	mov	r6, r0
 801b2e2:	460f      	mov	r7, r1
 801b2e4:	b9eb      	cbnz	r3, 801b322 <__kernel_sin+0xe2>
 801b2e6:	4602      	mov	r2, r0
 801b2e8:	460b      	mov	r3, r1
 801b2ea:	4650      	mov	r0, sl
 801b2ec:	4659      	mov	r1, fp
 801b2ee:	f7e5 f983 	bl	80005f8 <__aeabi_dmul>
 801b2f2:	a325      	add	r3, pc, #148	; (adr r3, 801b388 <__kernel_sin+0x148>)
 801b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2f8:	f7e4 ffc6 	bl	8000288 <__aeabi_dsub>
 801b2fc:	4642      	mov	r2, r8
 801b2fe:	464b      	mov	r3, r9
 801b300:	f7e5 f97a 	bl	80005f8 <__aeabi_dmul>
 801b304:	4602      	mov	r2, r0
 801b306:	460b      	mov	r3, r1
 801b308:	4620      	mov	r0, r4
 801b30a:	4629      	mov	r1, r5
 801b30c:	f7e4 ffbe 	bl	800028c <__adddf3>
 801b310:	4604      	mov	r4, r0
 801b312:	460d      	mov	r5, r1
 801b314:	ec45 4b10 	vmov	d0, r4, r5
 801b318:	b003      	add	sp, #12
 801b31a:	ecbd 8b04 	vpop	{d8-d9}
 801b31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b322:	4b1b      	ldr	r3, [pc, #108]	; (801b390 <__kernel_sin+0x150>)
 801b324:	ec51 0b18 	vmov	r0, r1, d8
 801b328:	2200      	movs	r2, #0
 801b32a:	f7e5 f965 	bl	80005f8 <__aeabi_dmul>
 801b32e:	4632      	mov	r2, r6
 801b330:	ec41 0b19 	vmov	d9, r0, r1
 801b334:	463b      	mov	r3, r7
 801b336:	4640      	mov	r0, r8
 801b338:	4649      	mov	r1, r9
 801b33a:	f7e5 f95d 	bl	80005f8 <__aeabi_dmul>
 801b33e:	4602      	mov	r2, r0
 801b340:	460b      	mov	r3, r1
 801b342:	ec51 0b19 	vmov	r0, r1, d9
 801b346:	f7e4 ff9f 	bl	8000288 <__aeabi_dsub>
 801b34a:	4652      	mov	r2, sl
 801b34c:	465b      	mov	r3, fp
 801b34e:	f7e5 f953 	bl	80005f8 <__aeabi_dmul>
 801b352:	ec53 2b18 	vmov	r2, r3, d8
 801b356:	f7e4 ff97 	bl	8000288 <__aeabi_dsub>
 801b35a:	a30b      	add	r3, pc, #44	; (adr r3, 801b388 <__kernel_sin+0x148>)
 801b35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b360:	4606      	mov	r6, r0
 801b362:	460f      	mov	r7, r1
 801b364:	4640      	mov	r0, r8
 801b366:	4649      	mov	r1, r9
 801b368:	f7e5 f946 	bl	80005f8 <__aeabi_dmul>
 801b36c:	4602      	mov	r2, r0
 801b36e:	460b      	mov	r3, r1
 801b370:	4630      	mov	r0, r6
 801b372:	4639      	mov	r1, r7
 801b374:	f7e4 ff8a 	bl	800028c <__adddf3>
 801b378:	4602      	mov	r2, r0
 801b37a:	460b      	mov	r3, r1
 801b37c:	4620      	mov	r0, r4
 801b37e:	4629      	mov	r1, r5
 801b380:	f7e4 ff82 	bl	8000288 <__aeabi_dsub>
 801b384:	e7c4      	b.n	801b310 <__kernel_sin+0xd0>
 801b386:	bf00      	nop
 801b388:	55555549 	.word	0x55555549
 801b38c:	3fc55555 	.word	0x3fc55555
 801b390:	3fe00000 	.word	0x3fe00000
 801b394:	5acfd57c 	.word	0x5acfd57c
 801b398:	3de5d93a 	.word	0x3de5d93a
 801b39c:	8a2b9ceb 	.word	0x8a2b9ceb
 801b3a0:	3e5ae5e6 	.word	0x3e5ae5e6
 801b3a4:	57b1fe7d 	.word	0x57b1fe7d
 801b3a8:	3ec71de3 	.word	0x3ec71de3
 801b3ac:	19c161d5 	.word	0x19c161d5
 801b3b0:	3f2a01a0 	.word	0x3f2a01a0
 801b3b4:	1110f8a6 	.word	0x1110f8a6
 801b3b8:	3f811111 	.word	0x3f811111

0801b3bc <atanf>:
 801b3bc:	b538      	push	{r3, r4, r5, lr}
 801b3be:	ee10 5a10 	vmov	r5, s0
 801b3c2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801b3c6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801b3ca:	eef0 7a40 	vmov.f32	s15, s0
 801b3ce:	db10      	blt.n	801b3f2 <atanf+0x36>
 801b3d0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801b3d4:	dd04      	ble.n	801b3e0 <atanf+0x24>
 801b3d6:	ee70 7a00 	vadd.f32	s15, s0, s0
 801b3da:	eeb0 0a67 	vmov.f32	s0, s15
 801b3de:	bd38      	pop	{r3, r4, r5, pc}
 801b3e0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801b518 <atanf+0x15c>
 801b3e4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801b51c <atanf+0x160>
 801b3e8:	2d00      	cmp	r5, #0
 801b3ea:	bfd8      	it	le
 801b3ec:	eef0 7a47 	vmovle.f32	s15, s14
 801b3f0:	e7f3      	b.n	801b3da <atanf+0x1e>
 801b3f2:	4b4b      	ldr	r3, [pc, #300]	; (801b520 <atanf+0x164>)
 801b3f4:	429c      	cmp	r4, r3
 801b3f6:	dc10      	bgt.n	801b41a <atanf+0x5e>
 801b3f8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801b3fc:	da0a      	bge.n	801b414 <atanf+0x58>
 801b3fe:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801b524 <atanf+0x168>
 801b402:	ee30 7a07 	vadd.f32	s14, s0, s14
 801b406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b40a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b412:	dce2      	bgt.n	801b3da <atanf+0x1e>
 801b414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b418:	e013      	b.n	801b442 <atanf+0x86>
 801b41a:	f7fe f803 	bl	8019424 <fabsf>
 801b41e:	4b42      	ldr	r3, [pc, #264]	; (801b528 <atanf+0x16c>)
 801b420:	429c      	cmp	r4, r3
 801b422:	dc4f      	bgt.n	801b4c4 <atanf+0x108>
 801b424:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801b428:	429c      	cmp	r4, r3
 801b42a:	dc41      	bgt.n	801b4b0 <atanf+0xf4>
 801b42c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801b430:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b434:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b438:	2300      	movs	r3, #0
 801b43a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b43e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b442:	1c5a      	adds	r2, r3, #1
 801b444:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801b448:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801b52c <atanf+0x170>
 801b44c:	eddf 5a38 	vldr	s11, [pc, #224]	; 801b530 <atanf+0x174>
 801b450:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801b534 <atanf+0x178>
 801b454:	ee66 6a06 	vmul.f32	s13, s12, s12
 801b458:	eee6 5a87 	vfma.f32	s11, s13, s14
 801b45c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801b538 <atanf+0x17c>
 801b460:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b464:	eddf 5a35 	vldr	s11, [pc, #212]	; 801b53c <atanf+0x180>
 801b468:	eee7 5a26 	vfma.f32	s11, s14, s13
 801b46c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801b540 <atanf+0x184>
 801b470:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b474:	eddf 5a33 	vldr	s11, [pc, #204]	; 801b544 <atanf+0x188>
 801b478:	eee7 5a26 	vfma.f32	s11, s14, s13
 801b47c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801b548 <atanf+0x18c>
 801b480:	eea6 5a87 	vfma.f32	s10, s13, s14
 801b484:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801b54c <atanf+0x190>
 801b488:	eea5 7a26 	vfma.f32	s14, s10, s13
 801b48c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801b550 <atanf+0x194>
 801b490:	eea7 5a26 	vfma.f32	s10, s14, s13
 801b494:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801b554 <atanf+0x198>
 801b498:	eea5 7a26 	vfma.f32	s14, s10, s13
 801b49c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b4a0:	eea5 7a86 	vfma.f32	s14, s11, s12
 801b4a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 801b4a8:	d121      	bne.n	801b4ee <atanf+0x132>
 801b4aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b4ae:	e794      	b.n	801b3da <atanf+0x1e>
 801b4b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b4b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b4b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b4bc:	2301      	movs	r3, #1
 801b4be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b4c2:	e7be      	b.n	801b442 <atanf+0x86>
 801b4c4:	4b24      	ldr	r3, [pc, #144]	; (801b558 <atanf+0x19c>)
 801b4c6:	429c      	cmp	r4, r3
 801b4c8:	dc0b      	bgt.n	801b4e2 <atanf+0x126>
 801b4ca:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801b4ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b4d2:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b4d6:	2302      	movs	r3, #2
 801b4d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b4dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b4e0:	e7af      	b.n	801b442 <atanf+0x86>
 801b4e2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b4e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b4ea:	2303      	movs	r3, #3
 801b4ec:	e7a9      	b.n	801b442 <atanf+0x86>
 801b4ee:	4a1b      	ldr	r2, [pc, #108]	; (801b55c <atanf+0x1a0>)
 801b4f0:	491b      	ldr	r1, [pc, #108]	; (801b560 <atanf+0x1a4>)
 801b4f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b4f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b4fa:	edd3 6a00 	vldr	s13, [r3]
 801b4fe:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b502:	2d00      	cmp	r5, #0
 801b504:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b508:	edd2 7a00 	vldr	s15, [r2]
 801b50c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b510:	bfb8      	it	lt
 801b512:	eef1 7a67 	vneglt.f32	s15, s15
 801b516:	e760      	b.n	801b3da <atanf+0x1e>
 801b518:	3fc90fdb 	.word	0x3fc90fdb
 801b51c:	bfc90fdb 	.word	0xbfc90fdb
 801b520:	3edfffff 	.word	0x3edfffff
 801b524:	7149f2ca 	.word	0x7149f2ca
 801b528:	3f97ffff 	.word	0x3f97ffff
 801b52c:	3c8569d7 	.word	0x3c8569d7
 801b530:	3d4bda59 	.word	0x3d4bda59
 801b534:	bd6ef16b 	.word	0xbd6ef16b
 801b538:	3d886b35 	.word	0x3d886b35
 801b53c:	3dba2e6e 	.word	0x3dba2e6e
 801b540:	3e124925 	.word	0x3e124925
 801b544:	3eaaaaab 	.word	0x3eaaaaab
 801b548:	bd15a221 	.word	0xbd15a221
 801b54c:	bd9d8795 	.word	0xbd9d8795
 801b550:	bde38e38 	.word	0xbde38e38
 801b554:	be4ccccd 	.word	0xbe4ccccd
 801b558:	401bffff 	.word	0x401bffff
 801b55c:	0801d0f0 	.word	0x0801d0f0
 801b560:	0801d100 	.word	0x0801d100
 801b564:	00000000 	.word	0x00000000

0801b568 <scalbn>:
 801b568:	b570      	push	{r4, r5, r6, lr}
 801b56a:	ec55 4b10 	vmov	r4, r5, d0
 801b56e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801b572:	4606      	mov	r6, r0
 801b574:	462b      	mov	r3, r5
 801b576:	b999      	cbnz	r1, 801b5a0 <scalbn+0x38>
 801b578:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b57c:	4323      	orrs	r3, r4
 801b57e:	d03f      	beq.n	801b600 <scalbn+0x98>
 801b580:	4b35      	ldr	r3, [pc, #212]	; (801b658 <scalbn+0xf0>)
 801b582:	4629      	mov	r1, r5
 801b584:	ee10 0a10 	vmov	r0, s0
 801b588:	2200      	movs	r2, #0
 801b58a:	f7e5 f835 	bl	80005f8 <__aeabi_dmul>
 801b58e:	4b33      	ldr	r3, [pc, #204]	; (801b65c <scalbn+0xf4>)
 801b590:	429e      	cmp	r6, r3
 801b592:	4604      	mov	r4, r0
 801b594:	460d      	mov	r5, r1
 801b596:	da10      	bge.n	801b5ba <scalbn+0x52>
 801b598:	a327      	add	r3, pc, #156	; (adr r3, 801b638 <scalbn+0xd0>)
 801b59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b59e:	e01f      	b.n	801b5e0 <scalbn+0x78>
 801b5a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801b5a4:	4291      	cmp	r1, r2
 801b5a6:	d10c      	bne.n	801b5c2 <scalbn+0x5a>
 801b5a8:	ee10 2a10 	vmov	r2, s0
 801b5ac:	4620      	mov	r0, r4
 801b5ae:	4629      	mov	r1, r5
 801b5b0:	f7e4 fe6c 	bl	800028c <__adddf3>
 801b5b4:	4604      	mov	r4, r0
 801b5b6:	460d      	mov	r5, r1
 801b5b8:	e022      	b.n	801b600 <scalbn+0x98>
 801b5ba:	460b      	mov	r3, r1
 801b5bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801b5c0:	3936      	subs	r1, #54	; 0x36
 801b5c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 801b5c6:	4296      	cmp	r6, r2
 801b5c8:	dd0d      	ble.n	801b5e6 <scalbn+0x7e>
 801b5ca:	2d00      	cmp	r5, #0
 801b5cc:	a11c      	add	r1, pc, #112	; (adr r1, 801b640 <scalbn+0xd8>)
 801b5ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b5d2:	da02      	bge.n	801b5da <scalbn+0x72>
 801b5d4:	a11c      	add	r1, pc, #112	; (adr r1, 801b648 <scalbn+0xe0>)
 801b5d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b5da:	a319      	add	r3, pc, #100	; (adr r3, 801b640 <scalbn+0xd8>)
 801b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e0:	f7e5 f80a 	bl	80005f8 <__aeabi_dmul>
 801b5e4:	e7e6      	b.n	801b5b4 <scalbn+0x4c>
 801b5e6:	1872      	adds	r2, r6, r1
 801b5e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b5ec:	428a      	cmp	r2, r1
 801b5ee:	dcec      	bgt.n	801b5ca <scalbn+0x62>
 801b5f0:	2a00      	cmp	r2, #0
 801b5f2:	dd08      	ble.n	801b606 <scalbn+0x9e>
 801b5f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b5f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b5fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b600:	ec45 4b10 	vmov	d0, r4, r5
 801b604:	bd70      	pop	{r4, r5, r6, pc}
 801b606:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b60a:	da08      	bge.n	801b61e <scalbn+0xb6>
 801b60c:	2d00      	cmp	r5, #0
 801b60e:	a10a      	add	r1, pc, #40	; (adr r1, 801b638 <scalbn+0xd0>)
 801b610:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b614:	dac0      	bge.n	801b598 <scalbn+0x30>
 801b616:	a10e      	add	r1, pc, #56	; (adr r1, 801b650 <scalbn+0xe8>)
 801b618:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b61c:	e7bc      	b.n	801b598 <scalbn+0x30>
 801b61e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b622:	3236      	adds	r2, #54	; 0x36
 801b624:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b628:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b62c:	4620      	mov	r0, r4
 801b62e:	4b0c      	ldr	r3, [pc, #48]	; (801b660 <scalbn+0xf8>)
 801b630:	2200      	movs	r2, #0
 801b632:	e7d5      	b.n	801b5e0 <scalbn+0x78>
 801b634:	f3af 8000 	nop.w
 801b638:	c2f8f359 	.word	0xc2f8f359
 801b63c:	01a56e1f 	.word	0x01a56e1f
 801b640:	8800759c 	.word	0x8800759c
 801b644:	7e37e43c 	.word	0x7e37e43c
 801b648:	8800759c 	.word	0x8800759c
 801b64c:	fe37e43c 	.word	0xfe37e43c
 801b650:	c2f8f359 	.word	0xc2f8f359
 801b654:	81a56e1f 	.word	0x81a56e1f
 801b658:	43500000 	.word	0x43500000
 801b65c:	ffff3cb0 	.word	0xffff3cb0
 801b660:	3c900000 	.word	0x3c900000

0801b664 <__kernel_rem_pio2f>:
 801b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b668:	ed2d 8b04 	vpush	{d8-d9}
 801b66c:	b0d9      	sub	sp, #356	; 0x164
 801b66e:	4688      	mov	r8, r1
 801b670:	9002      	str	r0, [sp, #8]
 801b672:	49b8      	ldr	r1, [pc, #736]	; (801b954 <__kernel_rem_pio2f+0x2f0>)
 801b674:	9866      	ldr	r0, [sp, #408]	; 0x198
 801b676:	9301      	str	r3, [sp, #4]
 801b678:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801b67c:	9901      	ldr	r1, [sp, #4]
 801b67e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801b680:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 801b684:	1d11      	adds	r1, r2, #4
 801b686:	db25      	blt.n	801b6d4 <__kernel_rem_pio2f+0x70>
 801b688:	1ed0      	subs	r0, r2, #3
 801b68a:	bf48      	it	mi
 801b68c:	1d10      	addmi	r0, r2, #4
 801b68e:	10c0      	asrs	r0, r0, #3
 801b690:	1c45      	adds	r5, r0, #1
 801b692:	00e9      	lsls	r1, r5, #3
 801b694:	eba0 070b 	sub.w	r7, r0, fp
 801b698:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801b964 <__kernel_rem_pio2f+0x300>
 801b69c:	9103      	str	r1, [sp, #12]
 801b69e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801b6a2:	eb0a 0c0b 	add.w	ip, sl, fp
 801b6a6:	ae1c      	add	r6, sp, #112	; 0x70
 801b6a8:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801b6ac:	2400      	movs	r4, #0
 801b6ae:	4564      	cmp	r4, ip
 801b6b0:	dd12      	ble.n	801b6d8 <__kernel_rem_pio2f+0x74>
 801b6b2:	9901      	ldr	r1, [sp, #4]
 801b6b4:	ac1c      	add	r4, sp, #112	; 0x70
 801b6b6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801b6ba:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801b6be:	f04f 0c00 	mov.w	ip, #0
 801b6c2:	45d4      	cmp	ip, sl
 801b6c4:	dc27      	bgt.n	801b716 <__kernel_rem_pio2f+0xb2>
 801b6c6:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b6ca:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801b964 <__kernel_rem_pio2f+0x300>
 801b6ce:	4627      	mov	r7, r4
 801b6d0:	2600      	movs	r6, #0
 801b6d2:	e016      	b.n	801b702 <__kernel_rem_pio2f+0x9e>
 801b6d4:	2000      	movs	r0, #0
 801b6d6:	e7db      	b.n	801b690 <__kernel_rem_pio2f+0x2c>
 801b6d8:	42e7      	cmn	r7, r4
 801b6da:	bf5d      	ittte	pl
 801b6dc:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801b6e0:	ee07 1a90 	vmovpl	s15, r1
 801b6e4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801b6e8:	eef0 7a47 	vmovmi.f32	s15, s14
 801b6ec:	ece6 7a01 	vstmia	r6!, {s15}
 801b6f0:	3401      	adds	r4, #1
 801b6f2:	e7dc      	b.n	801b6ae <__kernel_rem_pio2f+0x4a>
 801b6f4:	ecfe 6a01 	vldmia	lr!, {s13}
 801b6f8:	ed97 7a00 	vldr	s14, [r7]
 801b6fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b700:	3601      	adds	r6, #1
 801b702:	455e      	cmp	r6, fp
 801b704:	f1a7 0704 	sub.w	r7, r7, #4
 801b708:	ddf4      	ble.n	801b6f4 <__kernel_rem_pio2f+0x90>
 801b70a:	ece9 7a01 	vstmia	r9!, {s15}
 801b70e:	f10c 0c01 	add.w	ip, ip, #1
 801b712:	3404      	adds	r4, #4
 801b714:	e7d5      	b.n	801b6c2 <__kernel_rem_pio2f+0x5e>
 801b716:	a908      	add	r1, sp, #32
 801b718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b71c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801b720:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801b960 <__kernel_rem_pio2f+0x2fc>
 801b724:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801b95c <__kernel_rem_pio2f+0x2f8>
 801b728:	9105      	str	r1, [sp, #20]
 801b72a:	9304      	str	r3, [sp, #16]
 801b72c:	4656      	mov	r6, sl
 801b72e:	00b3      	lsls	r3, r6, #2
 801b730:	9306      	str	r3, [sp, #24]
 801b732:	ab58      	add	r3, sp, #352	; 0x160
 801b734:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b738:	ac08      	add	r4, sp, #32
 801b73a:	ab44      	add	r3, sp, #272	; 0x110
 801b73c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801b740:	46a4      	mov	ip, r4
 801b742:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b746:	4637      	mov	r7, r6
 801b748:	2f00      	cmp	r7, #0
 801b74a:	f1a0 0004 	sub.w	r0, r0, #4
 801b74e:	dc4a      	bgt.n	801b7e6 <__kernel_rem_pio2f+0x182>
 801b750:	4628      	mov	r0, r5
 801b752:	9207      	str	r2, [sp, #28]
 801b754:	f000 fa3a 	bl	801bbcc <scalbnf>
 801b758:	eeb0 8a40 	vmov.f32	s16, s0
 801b75c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801b760:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b764:	f000 f9f0 	bl	801bb48 <floorf>
 801b768:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801b76c:	eea0 8a67 	vfms.f32	s16, s0, s15
 801b770:	2d00      	cmp	r5, #0
 801b772:	9a07      	ldr	r2, [sp, #28]
 801b774:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801b778:	ee17 9a90 	vmov	r9, s15
 801b77c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b780:	ee38 8a67 	vsub.f32	s16, s16, s15
 801b784:	dd41      	ble.n	801b80a <__kernel_rem_pio2f+0x1a6>
 801b786:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801b78a:	ab08      	add	r3, sp, #32
 801b78c:	f1c5 0e08 	rsb	lr, r5, #8
 801b790:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801b794:	fa47 f00e 	asr.w	r0, r7, lr
 801b798:	4481      	add	r9, r0
 801b79a:	fa00 f00e 	lsl.w	r0, r0, lr
 801b79e:	1a3f      	subs	r7, r7, r0
 801b7a0:	f1c5 0007 	rsb	r0, r5, #7
 801b7a4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801b7a8:	4107      	asrs	r7, r0
 801b7aa:	2f00      	cmp	r7, #0
 801b7ac:	dd3c      	ble.n	801b828 <__kernel_rem_pio2f+0x1c4>
 801b7ae:	f04f 0e00 	mov.w	lr, #0
 801b7b2:	f109 0901 	add.w	r9, r9, #1
 801b7b6:	4671      	mov	r1, lr
 801b7b8:	4576      	cmp	r6, lr
 801b7ba:	dc67      	bgt.n	801b88c <__kernel_rem_pio2f+0x228>
 801b7bc:	2d00      	cmp	r5, #0
 801b7be:	dd03      	ble.n	801b7c8 <__kernel_rem_pio2f+0x164>
 801b7c0:	2d01      	cmp	r5, #1
 801b7c2:	d074      	beq.n	801b8ae <__kernel_rem_pio2f+0x24a>
 801b7c4:	2d02      	cmp	r5, #2
 801b7c6:	d07b      	beq.n	801b8c0 <__kernel_rem_pio2f+0x25c>
 801b7c8:	2f02      	cmp	r7, #2
 801b7ca:	d12d      	bne.n	801b828 <__kernel_rem_pio2f+0x1c4>
 801b7cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b7d0:	ee30 8a48 	vsub.f32	s16, s0, s16
 801b7d4:	b341      	cbz	r1, 801b828 <__kernel_rem_pio2f+0x1c4>
 801b7d6:	4628      	mov	r0, r5
 801b7d8:	9207      	str	r2, [sp, #28]
 801b7da:	f000 f9f7 	bl	801bbcc <scalbnf>
 801b7de:	9a07      	ldr	r2, [sp, #28]
 801b7e0:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b7e4:	e020      	b.n	801b828 <__kernel_rem_pio2f+0x1c4>
 801b7e6:	ee60 7a28 	vmul.f32	s15, s0, s17
 801b7ea:	3f01      	subs	r7, #1
 801b7ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b7f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7f4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801b7f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b7fc:	ecac 0a01 	vstmia	ip!, {s0}
 801b800:	ed90 0a00 	vldr	s0, [r0]
 801b804:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b808:	e79e      	b.n	801b748 <__kernel_rem_pio2f+0xe4>
 801b80a:	d105      	bne.n	801b818 <__kernel_rem_pio2f+0x1b4>
 801b80c:	1e70      	subs	r0, r6, #1
 801b80e:	ab08      	add	r3, sp, #32
 801b810:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801b814:	11ff      	asrs	r7, r7, #7
 801b816:	e7c8      	b.n	801b7aa <__kernel_rem_pio2f+0x146>
 801b818:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b81c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b824:	da30      	bge.n	801b888 <__kernel_rem_pio2f+0x224>
 801b826:	2700      	movs	r7, #0
 801b828:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b830:	f040 809a 	bne.w	801b968 <__kernel_rem_pio2f+0x304>
 801b834:	1e74      	subs	r4, r6, #1
 801b836:	46a4      	mov	ip, r4
 801b838:	2100      	movs	r1, #0
 801b83a:	45d4      	cmp	ip, sl
 801b83c:	da47      	bge.n	801b8ce <__kernel_rem_pio2f+0x26a>
 801b83e:	2900      	cmp	r1, #0
 801b840:	d063      	beq.n	801b90a <__kernel_rem_pio2f+0x2a6>
 801b842:	ab08      	add	r3, sp, #32
 801b844:	3d08      	subs	r5, #8
 801b846:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d07f      	beq.n	801b94e <__kernel_rem_pio2f+0x2ea>
 801b84e:	4628      	mov	r0, r5
 801b850:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b854:	f000 f9ba 	bl	801bbcc <scalbnf>
 801b858:	1c63      	adds	r3, r4, #1
 801b85a:	aa44      	add	r2, sp, #272	; 0x110
 801b85c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801b960 <__kernel_rem_pio2f+0x2fc>
 801b860:	0099      	lsls	r1, r3, #2
 801b862:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b866:	4623      	mov	r3, r4
 801b868:	2b00      	cmp	r3, #0
 801b86a:	f280 80ad 	bge.w	801b9c8 <__kernel_rem_pio2f+0x364>
 801b86e:	4623      	mov	r3, r4
 801b870:	2b00      	cmp	r3, #0
 801b872:	f2c0 80cb 	blt.w	801ba0c <__kernel_rem_pio2f+0x3a8>
 801b876:	aa44      	add	r2, sp, #272	; 0x110
 801b878:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b87c:	4e36      	ldr	r6, [pc, #216]	; (801b958 <__kernel_rem_pio2f+0x2f4>)
 801b87e:	eddf 7a39 	vldr	s15, [pc, #228]	; 801b964 <__kernel_rem_pio2f+0x300>
 801b882:	2000      	movs	r0, #0
 801b884:	1ae2      	subs	r2, r4, r3
 801b886:	e0b6      	b.n	801b9f6 <__kernel_rem_pio2f+0x392>
 801b888:	2702      	movs	r7, #2
 801b88a:	e790      	b.n	801b7ae <__kernel_rem_pio2f+0x14a>
 801b88c:	6820      	ldr	r0, [r4, #0]
 801b88e:	b949      	cbnz	r1, 801b8a4 <__kernel_rem_pio2f+0x240>
 801b890:	b118      	cbz	r0, 801b89a <__kernel_rem_pio2f+0x236>
 801b892:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801b896:	6020      	str	r0, [r4, #0]
 801b898:	2001      	movs	r0, #1
 801b89a:	f10e 0e01 	add.w	lr, lr, #1
 801b89e:	3404      	adds	r4, #4
 801b8a0:	4601      	mov	r1, r0
 801b8a2:	e789      	b.n	801b7b8 <__kernel_rem_pio2f+0x154>
 801b8a4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801b8a8:	6020      	str	r0, [r4, #0]
 801b8aa:	4608      	mov	r0, r1
 801b8ac:	e7f5      	b.n	801b89a <__kernel_rem_pio2f+0x236>
 801b8ae:	1e74      	subs	r4, r6, #1
 801b8b0:	ab08      	add	r3, sp, #32
 801b8b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b8b6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801b8ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801b8be:	e783      	b.n	801b7c8 <__kernel_rem_pio2f+0x164>
 801b8c0:	1e74      	subs	r4, r6, #1
 801b8c2:	ab08      	add	r3, sp, #32
 801b8c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b8c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801b8cc:	e7f5      	b.n	801b8ba <__kernel_rem_pio2f+0x256>
 801b8ce:	ab08      	add	r3, sp, #32
 801b8d0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801b8d4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801b8d8:	4301      	orrs	r1, r0
 801b8da:	e7ae      	b.n	801b83a <__kernel_rem_pio2f+0x1d6>
 801b8dc:	3001      	adds	r0, #1
 801b8de:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801b8e2:	2f00      	cmp	r7, #0
 801b8e4:	d0fa      	beq.n	801b8dc <__kernel_rem_pio2f+0x278>
 801b8e6:	9b06      	ldr	r3, [sp, #24]
 801b8e8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801b8ec:	eb0d 0403 	add.w	r4, sp, r3
 801b8f0:	9b01      	ldr	r3, [sp, #4]
 801b8f2:	18f7      	adds	r7, r6, r3
 801b8f4:	ab1c      	add	r3, sp, #112	; 0x70
 801b8f6:	f106 0c01 	add.w	ip, r6, #1
 801b8fa:	3c4c      	subs	r4, #76	; 0x4c
 801b8fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b900:	4430      	add	r0, r6
 801b902:	4560      	cmp	r0, ip
 801b904:	da04      	bge.n	801b910 <__kernel_rem_pio2f+0x2ac>
 801b906:	4606      	mov	r6, r0
 801b908:	e711      	b.n	801b72e <__kernel_rem_pio2f+0xca>
 801b90a:	9c05      	ldr	r4, [sp, #20]
 801b90c:	2001      	movs	r0, #1
 801b90e:	e7e6      	b.n	801b8de <__kernel_rem_pio2f+0x27a>
 801b910:	9b04      	ldr	r3, [sp, #16]
 801b912:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b916:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801b91a:	9306      	str	r3, [sp, #24]
 801b91c:	ee07 3a90 	vmov	s15, r3
 801b920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b924:	2600      	movs	r6, #0
 801b926:	ece7 7a01 	vstmia	r7!, {s15}
 801b92a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801b964 <__kernel_rem_pio2f+0x300>
 801b92e:	46b9      	mov	r9, r7
 801b930:	455e      	cmp	r6, fp
 801b932:	dd04      	ble.n	801b93e <__kernel_rem_pio2f+0x2da>
 801b934:	ece4 7a01 	vstmia	r4!, {s15}
 801b938:	f10c 0c01 	add.w	ip, ip, #1
 801b93c:	e7e1      	b.n	801b902 <__kernel_rem_pio2f+0x29e>
 801b93e:	ecfe 6a01 	vldmia	lr!, {s13}
 801b942:	ed39 7a01 	vldmdb	r9!, {s14}
 801b946:	3601      	adds	r6, #1
 801b948:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b94c:	e7f0      	b.n	801b930 <__kernel_rem_pio2f+0x2cc>
 801b94e:	3c01      	subs	r4, #1
 801b950:	e777      	b.n	801b842 <__kernel_rem_pio2f+0x1de>
 801b952:	bf00      	nop
 801b954:	0801d13c 	.word	0x0801d13c
 801b958:	0801d110 	.word	0x0801d110
 801b95c:	43800000 	.word	0x43800000
 801b960:	3b800000 	.word	0x3b800000
 801b964:	00000000 	.word	0x00000000
 801b968:	9b03      	ldr	r3, [sp, #12]
 801b96a:	eeb0 0a48 	vmov.f32	s0, s16
 801b96e:	1a98      	subs	r0, r3, r2
 801b970:	f000 f92c 	bl	801bbcc <scalbnf>
 801b974:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801b95c <__kernel_rem_pio2f+0x2f8>
 801b978:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801b97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b980:	db19      	blt.n	801b9b6 <__kernel_rem_pio2f+0x352>
 801b982:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801b960 <__kernel_rem_pio2f+0x2fc>
 801b986:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b98a:	aa08      	add	r2, sp, #32
 801b98c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b990:	1c74      	adds	r4, r6, #1
 801b992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b996:	3508      	adds	r5, #8
 801b998:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b99c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b9a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b9a4:	ee10 3a10 	vmov	r3, s0
 801b9a8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801b9ac:	ee17 3a90 	vmov	r3, s15
 801b9b0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b9b4:	e74b      	b.n	801b84e <__kernel_rem_pio2f+0x1ea>
 801b9b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b9ba:	aa08      	add	r2, sp, #32
 801b9bc:	ee10 3a10 	vmov	r3, s0
 801b9c0:	4634      	mov	r4, r6
 801b9c2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801b9c6:	e742      	b.n	801b84e <__kernel_rem_pio2f+0x1ea>
 801b9c8:	a808      	add	r0, sp, #32
 801b9ca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801b9ce:	9001      	str	r0, [sp, #4]
 801b9d0:	ee07 0a90 	vmov	s15, r0
 801b9d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b9d8:	3b01      	subs	r3, #1
 801b9da:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b9de:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b9e2:	ed62 7a01 	vstmdb	r2!, {s15}
 801b9e6:	e73f      	b.n	801b868 <__kernel_rem_pio2f+0x204>
 801b9e8:	ecf6 6a01 	vldmia	r6!, {s13}
 801b9ec:	ecb5 7a01 	vldmia	r5!, {s14}
 801b9f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b9f4:	3001      	adds	r0, #1
 801b9f6:	4550      	cmp	r0, sl
 801b9f8:	dc01      	bgt.n	801b9fe <__kernel_rem_pio2f+0x39a>
 801b9fa:	4290      	cmp	r0, r2
 801b9fc:	ddf4      	ble.n	801b9e8 <__kernel_rem_pio2f+0x384>
 801b9fe:	a858      	add	r0, sp, #352	; 0x160
 801ba00:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801ba04:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801ba08:	3b01      	subs	r3, #1
 801ba0a:	e731      	b.n	801b870 <__kernel_rem_pio2f+0x20c>
 801ba0c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801ba0e:	2b02      	cmp	r3, #2
 801ba10:	dc09      	bgt.n	801ba26 <__kernel_rem_pio2f+0x3c2>
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	dc2b      	bgt.n	801ba6e <__kernel_rem_pio2f+0x40a>
 801ba16:	d044      	beq.n	801baa2 <__kernel_rem_pio2f+0x43e>
 801ba18:	f009 0007 	and.w	r0, r9, #7
 801ba1c:	b059      	add	sp, #356	; 0x164
 801ba1e:	ecbd 8b04 	vpop	{d8-d9}
 801ba22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba26:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801ba28:	2b03      	cmp	r3, #3
 801ba2a:	d1f5      	bne.n	801ba18 <__kernel_rem_pio2f+0x3b4>
 801ba2c:	aa30      	add	r2, sp, #192	; 0xc0
 801ba2e:	1f0b      	subs	r3, r1, #4
 801ba30:	4413      	add	r3, r2
 801ba32:	461a      	mov	r2, r3
 801ba34:	4620      	mov	r0, r4
 801ba36:	2800      	cmp	r0, #0
 801ba38:	f1a2 0204 	sub.w	r2, r2, #4
 801ba3c:	dc52      	bgt.n	801bae4 <__kernel_rem_pio2f+0x480>
 801ba3e:	4622      	mov	r2, r4
 801ba40:	2a01      	cmp	r2, #1
 801ba42:	f1a3 0304 	sub.w	r3, r3, #4
 801ba46:	dc5d      	bgt.n	801bb04 <__kernel_rem_pio2f+0x4a0>
 801ba48:	ab30      	add	r3, sp, #192	; 0xc0
 801ba4a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801b964 <__kernel_rem_pio2f+0x300>
 801ba4e:	440b      	add	r3, r1
 801ba50:	2c01      	cmp	r4, #1
 801ba52:	dc67      	bgt.n	801bb24 <__kernel_rem_pio2f+0x4c0>
 801ba54:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801ba58:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801ba5c:	2f00      	cmp	r7, #0
 801ba5e:	d167      	bne.n	801bb30 <__kernel_rem_pio2f+0x4cc>
 801ba60:	edc8 6a00 	vstr	s13, [r8]
 801ba64:	ed88 7a01 	vstr	s14, [r8, #4]
 801ba68:	edc8 7a02 	vstr	s15, [r8, #8]
 801ba6c:	e7d4      	b.n	801ba18 <__kernel_rem_pio2f+0x3b4>
 801ba6e:	ab30      	add	r3, sp, #192	; 0xc0
 801ba70:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801b964 <__kernel_rem_pio2f+0x300>
 801ba74:	440b      	add	r3, r1
 801ba76:	4622      	mov	r2, r4
 801ba78:	2a00      	cmp	r2, #0
 801ba7a:	da24      	bge.n	801bac6 <__kernel_rem_pio2f+0x462>
 801ba7c:	b34f      	cbz	r7, 801bad2 <__kernel_rem_pio2f+0x46e>
 801ba7e:	eef1 7a47 	vneg.f32	s15, s14
 801ba82:	edc8 7a00 	vstr	s15, [r8]
 801ba86:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801ba8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ba8e:	aa31      	add	r2, sp, #196	; 0xc4
 801ba90:	2301      	movs	r3, #1
 801ba92:	429c      	cmp	r4, r3
 801ba94:	da20      	bge.n	801bad8 <__kernel_rem_pio2f+0x474>
 801ba96:	b10f      	cbz	r7, 801ba9c <__kernel_rem_pio2f+0x438>
 801ba98:	eef1 7a67 	vneg.f32	s15, s15
 801ba9c:	edc8 7a01 	vstr	s15, [r8, #4]
 801baa0:	e7ba      	b.n	801ba18 <__kernel_rem_pio2f+0x3b4>
 801baa2:	ab30      	add	r3, sp, #192	; 0xc0
 801baa4:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801b964 <__kernel_rem_pio2f+0x300>
 801baa8:	440b      	add	r3, r1
 801baaa:	2c00      	cmp	r4, #0
 801baac:	da05      	bge.n	801baba <__kernel_rem_pio2f+0x456>
 801baae:	b10f      	cbz	r7, 801bab4 <__kernel_rem_pio2f+0x450>
 801bab0:	eef1 7a67 	vneg.f32	s15, s15
 801bab4:	edc8 7a00 	vstr	s15, [r8]
 801bab8:	e7ae      	b.n	801ba18 <__kernel_rem_pio2f+0x3b4>
 801baba:	ed33 7a01 	vldmdb	r3!, {s14}
 801babe:	3c01      	subs	r4, #1
 801bac0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bac4:	e7f1      	b.n	801baaa <__kernel_rem_pio2f+0x446>
 801bac6:	ed73 7a01 	vldmdb	r3!, {s15}
 801baca:	3a01      	subs	r2, #1
 801bacc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bad0:	e7d2      	b.n	801ba78 <__kernel_rem_pio2f+0x414>
 801bad2:	eef0 7a47 	vmov.f32	s15, s14
 801bad6:	e7d4      	b.n	801ba82 <__kernel_rem_pio2f+0x41e>
 801bad8:	ecb2 7a01 	vldmia	r2!, {s14}
 801badc:	3301      	adds	r3, #1
 801bade:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bae2:	e7d6      	b.n	801ba92 <__kernel_rem_pio2f+0x42e>
 801bae4:	edd2 7a00 	vldr	s15, [r2]
 801bae8:	edd2 6a01 	vldr	s13, [r2, #4]
 801baec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801baf0:	3801      	subs	r0, #1
 801baf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801baf6:	ed82 7a00 	vstr	s14, [r2]
 801bafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bafe:	edc2 7a01 	vstr	s15, [r2, #4]
 801bb02:	e798      	b.n	801ba36 <__kernel_rem_pio2f+0x3d2>
 801bb04:	edd3 7a00 	vldr	s15, [r3]
 801bb08:	edd3 6a01 	vldr	s13, [r3, #4]
 801bb0c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801bb10:	3a01      	subs	r2, #1
 801bb12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bb16:	ed83 7a00 	vstr	s14, [r3]
 801bb1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bb1e:	edc3 7a01 	vstr	s15, [r3, #4]
 801bb22:	e78d      	b.n	801ba40 <__kernel_rem_pio2f+0x3dc>
 801bb24:	ed33 7a01 	vldmdb	r3!, {s14}
 801bb28:	3c01      	subs	r4, #1
 801bb2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bb2e:	e78f      	b.n	801ba50 <__kernel_rem_pio2f+0x3ec>
 801bb30:	eef1 6a66 	vneg.f32	s13, s13
 801bb34:	eeb1 7a47 	vneg.f32	s14, s14
 801bb38:	edc8 6a00 	vstr	s13, [r8]
 801bb3c:	ed88 7a01 	vstr	s14, [r8, #4]
 801bb40:	eef1 7a67 	vneg.f32	s15, s15
 801bb44:	e790      	b.n	801ba68 <__kernel_rem_pio2f+0x404>
 801bb46:	bf00      	nop

0801bb48 <floorf>:
 801bb48:	ee10 3a10 	vmov	r3, s0
 801bb4c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801bb50:	3a7f      	subs	r2, #127	; 0x7f
 801bb52:	2a16      	cmp	r2, #22
 801bb54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801bb58:	dc2a      	bgt.n	801bbb0 <floorf+0x68>
 801bb5a:	2a00      	cmp	r2, #0
 801bb5c:	da11      	bge.n	801bb82 <floorf+0x3a>
 801bb5e:	eddf 7a18 	vldr	s15, [pc, #96]	; 801bbc0 <floorf+0x78>
 801bb62:	ee30 0a27 	vadd.f32	s0, s0, s15
 801bb66:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801bb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb6e:	dd05      	ble.n	801bb7c <floorf+0x34>
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	da23      	bge.n	801bbbc <floorf+0x74>
 801bb74:	4a13      	ldr	r2, [pc, #76]	; (801bbc4 <floorf+0x7c>)
 801bb76:	2900      	cmp	r1, #0
 801bb78:	bf18      	it	ne
 801bb7a:	4613      	movne	r3, r2
 801bb7c:	ee00 3a10 	vmov	s0, r3
 801bb80:	4770      	bx	lr
 801bb82:	4911      	ldr	r1, [pc, #68]	; (801bbc8 <floorf+0x80>)
 801bb84:	4111      	asrs	r1, r2
 801bb86:	420b      	tst	r3, r1
 801bb88:	d0fa      	beq.n	801bb80 <floorf+0x38>
 801bb8a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801bbc0 <floorf+0x78>
 801bb8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801bb92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801bb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb9a:	ddef      	ble.n	801bb7c <floorf+0x34>
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	bfbe      	ittt	lt
 801bba0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801bba4:	fa40 f202 	asrlt.w	r2, r0, r2
 801bba8:	189b      	addlt	r3, r3, r2
 801bbaa:	ea23 0301 	bic.w	r3, r3, r1
 801bbae:	e7e5      	b.n	801bb7c <floorf+0x34>
 801bbb0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801bbb4:	d3e4      	bcc.n	801bb80 <floorf+0x38>
 801bbb6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bbba:	4770      	bx	lr
 801bbbc:	2300      	movs	r3, #0
 801bbbe:	e7dd      	b.n	801bb7c <floorf+0x34>
 801bbc0:	7149f2ca 	.word	0x7149f2ca
 801bbc4:	bf800000 	.word	0xbf800000
 801bbc8:	007fffff 	.word	0x007fffff

0801bbcc <scalbnf>:
 801bbcc:	ee10 3a10 	vmov	r3, s0
 801bbd0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801bbd4:	d02b      	beq.n	801bc2e <scalbnf+0x62>
 801bbd6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801bbda:	d302      	bcc.n	801bbe2 <scalbnf+0x16>
 801bbdc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bbe0:	4770      	bx	lr
 801bbe2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801bbe6:	d123      	bne.n	801bc30 <scalbnf+0x64>
 801bbe8:	4b24      	ldr	r3, [pc, #144]	; (801bc7c <scalbnf+0xb0>)
 801bbea:	eddf 7a25 	vldr	s15, [pc, #148]	; 801bc80 <scalbnf+0xb4>
 801bbee:	4298      	cmp	r0, r3
 801bbf0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bbf4:	db17      	blt.n	801bc26 <scalbnf+0x5a>
 801bbf6:	ee10 3a10 	vmov	r3, s0
 801bbfa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801bbfe:	3a19      	subs	r2, #25
 801bc00:	f24c 3150 	movw	r1, #50000	; 0xc350
 801bc04:	4288      	cmp	r0, r1
 801bc06:	dd15      	ble.n	801bc34 <scalbnf+0x68>
 801bc08:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801bc84 <scalbnf+0xb8>
 801bc0c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801bc88 <scalbnf+0xbc>
 801bc10:	ee10 3a10 	vmov	r3, s0
 801bc14:	eeb0 7a67 	vmov.f32	s14, s15
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	bfb8      	it	lt
 801bc1c:	eef0 7a66 	vmovlt.f32	s15, s13
 801bc20:	ee27 0a87 	vmul.f32	s0, s15, s14
 801bc24:	4770      	bx	lr
 801bc26:	eddf 7a19 	vldr	s15, [pc, #100]	; 801bc8c <scalbnf+0xc0>
 801bc2a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801bc2e:	4770      	bx	lr
 801bc30:	0dd2      	lsrs	r2, r2, #23
 801bc32:	e7e5      	b.n	801bc00 <scalbnf+0x34>
 801bc34:	4410      	add	r0, r2
 801bc36:	28fe      	cmp	r0, #254	; 0xfe
 801bc38:	dce6      	bgt.n	801bc08 <scalbnf+0x3c>
 801bc3a:	2800      	cmp	r0, #0
 801bc3c:	dd06      	ble.n	801bc4c <scalbnf+0x80>
 801bc3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bc42:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801bc46:	ee00 3a10 	vmov	s0, r3
 801bc4a:	4770      	bx	lr
 801bc4c:	f110 0f16 	cmn.w	r0, #22
 801bc50:	da09      	bge.n	801bc66 <scalbnf+0x9a>
 801bc52:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801bc8c <scalbnf+0xc0>
 801bc56:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801bc90 <scalbnf+0xc4>
 801bc5a:	ee10 3a10 	vmov	r3, s0
 801bc5e:	eeb0 7a67 	vmov.f32	s14, s15
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	e7d9      	b.n	801bc1a <scalbnf+0x4e>
 801bc66:	3019      	adds	r0, #25
 801bc68:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bc6c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801bc70:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801bc94 <scalbnf+0xc8>
 801bc74:	ee07 3a90 	vmov	s15, r3
 801bc78:	e7d7      	b.n	801bc2a <scalbnf+0x5e>
 801bc7a:	bf00      	nop
 801bc7c:	ffff3cb0 	.word	0xffff3cb0
 801bc80:	4c000000 	.word	0x4c000000
 801bc84:	7149f2ca 	.word	0x7149f2ca
 801bc88:	f149f2ca 	.word	0xf149f2ca
 801bc8c:	0da24260 	.word	0x0da24260
 801bc90:	8da24260 	.word	0x8da24260
 801bc94:	33000000 	.word	0x33000000

0801bc98 <_init>:
 801bc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc9a:	bf00      	nop
 801bc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc9e:	bc08      	pop	{r3}
 801bca0:	469e      	mov	lr, r3
 801bca2:	4770      	bx	lr

0801bca4 <_fini>:
 801bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bca6:	bf00      	nop
 801bca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bcaa:	bc08      	pop	{r3}
 801bcac:	469e      	mov	lr, r3
 801bcae:	4770      	bx	lr
