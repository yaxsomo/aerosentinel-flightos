
AeroSentinel Flight Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e48c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dd8  0801e620  0801e620  0002e620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080203f8  080203f8  00040208  2**0
                  CONTENTS
  4 .ARM          00000008  080203f8  080203f8  000303f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020400  08020400  00040208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020400  08020400  00030400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020404  08020404  00030404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08020408  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040208  2**0
                  CONTENTS
 10 .bss          0000930c  20000208  20000208  00040208  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20009514  20009514  00040208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040208  2**0
                  CONTENTS, READONLY
 13 .comment      00000093  00000000  00000000  00040238  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003370c  00000000  00000000  000402cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006852  00000000  00000000  000739d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002c40  00000000  00000000  0007a230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000224d  00000000  00000000  0007ce70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ab28  00000000  00000000  0007f0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000339bd  00000000  00000000  000a9be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ee3b3  00000000  00000000  000dd5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000d57c  00000000  00000000  001cb958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  001d8ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e604 	.word	0x0801e604

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0801e604 	.word	0x0801e604

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb0:	f000 b9a6 	b.w	8001000 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f83c 	bl	8000d38 <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_d2lz>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	460d      	mov	r5, r1
 8000cd6:	f7ff ff0b 	bl	8000af0 <__aeabi_dcmplt>
 8000cda:	b928      	cbnz	r0, 8000ce8 <__aeabi_d2lz+0x1c>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	4629      	mov	r1, r5
 8000ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce4:	f000 b80a 	b.w	8000cfc <__aeabi_d2ulz>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cee:	f000 f805 	bl	8000cfc <__aeabi_d2ulz>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop

08000cfc <__aeabi_d2ulz>:
 8000cfc:	b5d0      	push	{r4, r6, r7, lr}
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__aeabi_d2ulz+0x34>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	4606      	mov	r6, r0
 8000d04:	460f      	mov	r7, r1
 8000d06:	f7ff fc81 	bl	800060c <__aeabi_dmul>
 8000d0a:	f7ff ff57 	bl	8000bbc <__aeabi_d2uiz>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	f7ff fc02 	bl	8000518 <__aeabi_ui2d>
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <__aeabi_d2ulz+0x38>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f7ff fc78 	bl	800060c <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4630      	mov	r0, r6
 8000d22:	4639      	mov	r1, r7
 8000d24:	f7ff faba 	bl	800029c <__aeabi_dsub>
 8000d28:	f7ff ff48 	bl	8000bbc <__aeabi_d2uiz>
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d30:	3df00000 	.word	0x3df00000
 8000d34:	41f00000 	.word	0x41f00000

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9e08      	ldr	r6, [sp, #32]
 8000d3e:	460d      	mov	r5, r1
 8000d40:	4604      	mov	r4, r0
 8000d42:	460f      	mov	r7, r1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d14a      	bne.n	8000dde <__udivmoddi4+0xa6>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4694      	mov	ip, r2
 8000d4c:	d965      	bls.n	8000e1a <__udivmoddi4+0xe2>
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	b143      	cbz	r3, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d58:	f1c3 0220 	rsb	r2, r3, #32
 8000d5c:	409f      	lsls	r7, r3
 8000d5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d62:	4317      	orrs	r7, r2
 8000d64:	409c      	lsls	r4, r3
 8000d66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d6a:	fa1f f58c 	uxth.w	r5, ip
 8000d6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d72:	0c22      	lsrs	r2, r4, #16
 8000d74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d7c:	fb01 f005 	mul.w	r0, r1, r5
 8000d80:	4290      	cmp	r0, r2
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x62>
 8000d84:	eb1c 0202 	adds.w	r2, ip, r2
 8000d88:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d8c:	f080 811c 	bcs.w	8000fc8 <__udivmoddi4+0x290>
 8000d90:	4290      	cmp	r0, r2
 8000d92:	f240 8119 	bls.w	8000fc8 <__udivmoddi4+0x290>
 8000d96:	3902      	subs	r1, #2
 8000d98:	4462      	add	r2, ip
 8000d9a:	1a12      	subs	r2, r2, r0
 8000d9c:	b2a4      	uxth	r4, r4
 8000d9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000da2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000daa:	fb00 f505 	mul.w	r5, r0, r5
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x90>
 8000db2:	eb1c 0404 	adds.w	r4, ip, r4
 8000db6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dba:	f080 8107 	bcs.w	8000fcc <__udivmoddi4+0x294>
 8000dbe:	42a5      	cmp	r5, r4
 8000dc0:	f240 8104 	bls.w	8000fcc <__udivmoddi4+0x294>
 8000dc4:	4464      	add	r4, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dcc:	1b64      	subs	r4, r4, r5
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11e      	cbz	r6, 8000dda <__udivmoddi4+0xa2>
 8000dd2:	40dc      	lsrs	r4, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0xbc>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	f000 80ed 	beq.w	8000fc2 <__udivmoddi4+0x28a>
 8000de8:	2100      	movs	r1, #0
 8000dea:	e9c6 0500 	strd	r0, r5, [r6]
 8000dee:	4608      	mov	r0, r1
 8000df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df4:	fab3 f183 	clz	r1, r3
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	d149      	bne.n	8000e90 <__udivmoddi4+0x158>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	d302      	bcc.n	8000e06 <__udivmoddi4+0xce>
 8000e00:	4282      	cmp	r2, r0
 8000e02:	f200 80f8 	bhi.w	8000ff6 <__udivmoddi4+0x2be>
 8000e06:	1a84      	subs	r4, r0, r2
 8000e08:	eb65 0203 	sbc.w	r2, r5, r3
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	4617      	mov	r7, r2
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d0e2      	beq.n	8000dda <__udivmoddi4+0xa2>
 8000e14:	e9c6 4700 	strd	r4, r7, [r6]
 8000e18:	e7df      	b.n	8000dda <__udivmoddi4+0xa2>
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xe6>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f382 	clz	r3, r2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x210>
 8000e28:	1a8a      	subs	r2, r1, r2
 8000e2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2e:	fa1f fe8c 	uxth.w	lr, ip
 8000e32:	2101      	movs	r1, #1
 8000e34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e38:	fb07 2015 	mls	r0, r7, r5, r2
 8000e3c:	0c22      	lsrs	r2, r4, #16
 8000e3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e42:	fb0e f005 	mul.w	r0, lr, r5
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x124>
 8000e4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x122>
 8000e54:	4290      	cmp	r0, r2
 8000e56:	f200 80cb 	bhi.w	8000ff0 <__udivmoddi4+0x2b8>
 8000e5a:	4645      	mov	r5, r8
 8000e5c:	1a12      	subs	r2, r2, r0
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e64:	fb07 2210 	mls	r2, r7, r0, r2
 8000e68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e70:	45a6      	cmp	lr, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x14e>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e7c:	d202      	bcs.n	8000e84 <__udivmoddi4+0x14c>
 8000e7e:	45a6      	cmp	lr, r4
 8000e80:	f200 80bb 	bhi.w	8000ffa <__udivmoddi4+0x2c2>
 8000e84:	4610      	mov	r0, r2
 8000e86:	eba4 040e 	sub.w	r4, r4, lr
 8000e8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8e:	e79f      	b.n	8000dd0 <__udivmoddi4+0x98>
 8000e90:	f1c1 0720 	rsb	r7, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000ea2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea6:	40fd      	lsrs	r5, r7
 8000ea8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ec0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec4:	42a5      	cmp	r5, r4
 8000ec6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eca:	fa00 f001 	lsl.w	r0, r0, r1
 8000ece:	d90b      	bls.n	8000ee8 <__udivmoddi4+0x1b0>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed8:	f080 8088 	bcs.w	8000fec <__udivmoddi4+0x2b4>
 8000edc:	42a5      	cmp	r5, r4
 8000ede:	f240 8085 	bls.w	8000fec <__udivmoddi4+0x2b4>
 8000ee2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee6:	4464      	add	r4, ip
 8000ee8:	1b64      	subs	r4, r4, r5
 8000eea:	b29d      	uxth	r5, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1da>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f08:	d26c      	bcs.n	8000fe4 <__udivmoddi4+0x2ac>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	d96a      	bls.n	8000fe4 <__udivmoddi4+0x2ac>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	4464      	add	r4, ip
 8000f12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f16:	fba3 9502 	umull	r9, r5, r3, r2
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	42ac      	cmp	r4, r5
 8000f20:	46c8      	mov	r8, r9
 8000f22:	46ae      	mov	lr, r5
 8000f24:	d356      	bcc.n	8000fd4 <__udivmoddi4+0x29c>
 8000f26:	d053      	beq.n	8000fd0 <__udivmoddi4+0x298>
 8000f28:	b156      	cbz	r6, 8000f40 <__udivmoddi4+0x208>
 8000f2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f32:	fa04 f707 	lsl.w	r7, r4, r7
 8000f36:	40ca      	lsrs	r2, r1
 8000f38:	40cc      	lsrs	r4, r1
 8000f3a:	4317      	orrs	r7, r2
 8000f3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f40:	4618      	mov	r0, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f48:	f1c3 0120 	rsb	r1, r3, #32
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	fa20 f201 	lsr.w	r2, r0, r1
 8000f54:	fa25 f101 	lsr.w	r1, r5, r1
 8000f58:	409d      	lsls	r5, r3
 8000f5a:	432a      	orrs	r2, r5
 8000f5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f68:	fb07 1510 	mls	r5, r7, r0, r1
 8000f6c:	0c11      	lsrs	r1, r2, #16
 8000f6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f72:	fb00 f50e 	mul.w	r5, r0, lr
 8000f76:	428d      	cmp	r5, r1
 8000f78:	fa04 f403 	lsl.w	r4, r4, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x258>
 8000f7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f82:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f86:	d22f      	bcs.n	8000fe8 <__udivmoddi4+0x2b0>
 8000f88:	428d      	cmp	r5, r1
 8000f8a:	d92d      	bls.n	8000fe8 <__udivmoddi4+0x2b0>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1b49      	subs	r1, r1, r5
 8000f92:	b292      	uxth	r2, r2
 8000f94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f98:	fb07 1115 	mls	r1, r7, r5, r1
 8000f9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa4:	4291      	cmp	r1, r2
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x282>
 8000fa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fb0:	d216      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000fb2:	4291      	cmp	r1, r2
 8000fb4:	d914      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000fb6:	3d02      	subs	r5, #2
 8000fb8:	4462      	add	r2, ip
 8000fba:	1a52      	subs	r2, r2, r1
 8000fbc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fc0:	e738      	b.n	8000e34 <__udivmoddi4+0xfc>
 8000fc2:	4631      	mov	r1, r6
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	e708      	b.n	8000dda <__udivmoddi4+0xa2>
 8000fc8:	4639      	mov	r1, r7
 8000fca:	e6e6      	b.n	8000d9a <__udivmoddi4+0x62>
 8000fcc:	4610      	mov	r0, r2
 8000fce:	e6fb      	b.n	8000dc8 <__udivmoddi4+0x90>
 8000fd0:	4548      	cmp	r0, r9
 8000fd2:	d2a9      	bcs.n	8000f28 <__udivmoddi4+0x1f0>
 8000fd4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	e7a3      	b.n	8000f28 <__udivmoddi4+0x1f0>
 8000fe0:	4645      	mov	r5, r8
 8000fe2:	e7ea      	b.n	8000fba <__udivmoddi4+0x282>
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	e794      	b.n	8000f12 <__udivmoddi4+0x1da>
 8000fe8:	4640      	mov	r0, r8
 8000fea:	e7d1      	b.n	8000f90 <__udivmoddi4+0x258>
 8000fec:	46d0      	mov	r8, sl
 8000fee:	e77b      	b.n	8000ee8 <__udivmoddi4+0x1b0>
 8000ff0:	3d02      	subs	r5, #2
 8000ff2:	4462      	add	r2, ip
 8000ff4:	e732      	b.n	8000e5c <__udivmoddi4+0x124>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e70a      	b.n	8000e10 <__udivmoddi4+0xd8>
 8000ffa:	4464      	add	r4, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e742      	b.n	8000e86 <__udivmoddi4+0x14e>

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <UART_Transmit_Messages_BlackBox>:

extern UART_HandleTypeDef huart1;


void UART_Transmit_Messages_BlackBox(const char* str)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff f92f 	bl	8000270 <strlen>
 8001012:	4603      	mov	r3, r0
 8001014:	b29a      	uxth	r2, r3
 8001016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <UART_Transmit_Messages_BlackBox+0x28>)
 800101e:	f008 fec8 	bl	8009db2 <HAL_UART_Transmit>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20004878 	.word	0x20004878

08001030 <file_exists>:



bool file_exists(const char* filename) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    FILINFO fno;
    FRESULT result = f_stat(filename, &fno);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4619      	mov	r1, r3
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f00c fa18 	bl	800d474 <f_stat>
 8001044:	4603      	mov	r3, r0
 8001046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    return result == FR_OK && !(fno.fattrib & AM_DIR);
 800104a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <file_exists+0x30>
 8001052:	7d3b      	ldrb	r3, [r7, #20]
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <file_exists+0x30>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <file_exists+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	3728      	adds	r7, #40	; 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <buf_clear>:
	while(*buf++ != '\0') i++;
	return i;

}

void buf_clear(void){
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++ ){
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	e007      	b.n	800108c <buf_clear+0x1c>
		data_buffer[i] = '\0';
 800107c:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <buf_clear+0x34>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++ ){
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3301      	adds	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001092:	dbf3      	blt.n	800107c <buf_clear+0xc>
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20002aec 	.word	0x20002aec

080010a8 <mount_sd_card>:


void mount_sd_card(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "",0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	490a      	ldr	r1, [pc, #40]	; (80010d8 <mount_sd_card+0x30>)
 80010b0:	480a      	ldr	r0, [pc, #40]	; (80010dc <mount_sd_card+0x34>)
 80010b2:	f00b fd2d 	bl	800cb10 <f_mount>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <mount_sd_card+0x38>)
 80010bc:	701a      	strb	r2, [r3, #0]
	//UART_Transmit_Messages_BlackBox(fresultStrings[fresult]);
	if(fresult != FR_OK)
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <mount_sd_card+0x38>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <mount_sd_card+0x26>
	{
		UART_Transmit_Messages_BlackBox("*               Error mounting the SD Card              *\r\n");
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <mount_sd_card+0x3c>)
 80010c8:	f7ff ff9c 	bl	8001004 <UART_Transmit_Messages_BlackBox>
	} else {
		UART_Transmit_Messages_BlackBox("*              SD Card mounted successfully!            *\r\n");
	}
}
 80010cc:	e002      	b.n	80010d4 <mount_sd_card+0x2c>
		UART_Transmit_Messages_BlackBox("*              SD Card mounted successfully!            *\r\n");
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <mount_sd_card+0x40>)
 80010d0:	f7ff ff98 	bl	8001004 <UART_Transmit_Messages_BlackBox>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	0801e75c 	.word	0x0801e75c
 80010dc:	20000a80 	.word	0x20000a80
 80010e0:	20002ae8 	.word	0x20002ae8
 80010e4:	0801e760 	.word	0x0801e760
 80010e8:	0801e79c 	.word	0x0801e79c

080010ec <check_free_space>:
}




void check_free_space() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
    f_getfree("", &fre_clust, &pfs);
 80010f2:	4a38      	ldr	r2, [pc, #224]	; (80011d4 <check_free_space+0xe8>)
 80010f4:	4938      	ldr	r1, [pc, #224]	; (80011d8 <check_free_space+0xec>)
 80010f6:	4839      	ldr	r0, [pc, #228]	; (80011dc <check_free_space+0xf0>)
 80010f8:	f00c f9fc 	bl	800d4f4 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80010fc:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <check_free_space+0xe8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	3b02      	subs	r3, #2
 8001104:	4a33      	ldr	r2, [pc, #204]	; (80011d4 <check_free_space+0xe8>)
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	8952      	ldrh	r2, [r2, #10]
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa02 	bl	8000518 <__aeabi_ui2d>
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <check_free_space+0xf4>)
 800111a:	f7ff fa77 	bl	800060c <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fd49 	bl	8000bbc <__aeabi_d2uiz>
 800112a:	4603      	mov	r3, r0
 800112c:	4a2d      	ldr	r2, [pc, #180]	; (80011e4 <check_free_space+0xf8>)
 800112e:	6013      	str	r3, [r2, #0]
    float total_GB = (float)total / (1024.0 * 1024.0);
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <check_free_space+0xf8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800113c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80011e8 <check_free_space+0xfc>
 8001140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001144:	edc7 7a01 	vstr	s15, [r7, #4]
    sprintf(data_buffer, "*              SD CARD Total Size: \t%.2f GB        *\r\n", total_GB);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fa07 	bl	800055c <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4926      	ldr	r1, [pc, #152]	; (80011ec <check_free_space+0x100>)
 8001154:	4826      	ldr	r0, [pc, #152]	; (80011f0 <check_free_space+0x104>)
 8001156:	f017 ff19 	bl	8018f8c <siprintf>

    UART_Transmit_Messages_BlackBox(data_buffer);
 800115a:	4825      	ldr	r0, [pc, #148]	; (80011f0 <check_free_space+0x104>)
 800115c:	f7ff ff52 	bl	8001004 <UART_Transmit_Messages_BlackBox>
    buf_clear();
 8001160:	f7ff ff86 	bl	8001070 <buf_clear>

    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <check_free_space+0xe8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	895b      	ldrh	r3, [r3, #10]
 800116a:	461a      	mov	r2, r3
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <check_free_space+0xec>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f9cf 	bl	8000518 <__aeabi_ui2d>
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <check_free_space+0xf4>)
 8001180:	f7ff fa44 	bl	800060c <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fd16 	bl	8000bbc <__aeabi_d2uiz>
 8001190:	4603      	mov	r3, r0
 8001192:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <check_free_space+0x108>)
 8001194:	6013      	str	r3, [r2, #0]
    float free_space_GB = (float)free_space / (1024.0 * 1024.0);
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <check_free_space+0x108>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011a2:	eddf 6a11 	vldr	s13, [pc, #68]	; 80011e8 <check_free_space+0xfc>
 80011a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011aa:	edc7 7a00 	vstr	s15, [r7]
    sprintf(data_buffer, "*              SD CARD Free Space: \t%.2f GB        *\r\n", free_space_GB);
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f7ff f9d4 	bl	800055c <__aeabi_f2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	490f      	ldr	r1, [pc, #60]	; (80011f8 <check_free_space+0x10c>)
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <check_free_space+0x104>)
 80011bc:	f017 fee6 	bl	8018f8c <siprintf>
    UART_Transmit_Messages_BlackBox(data_buffer);
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <check_free_space+0x104>)
 80011c2:	f7ff ff1f 	bl	8001004 <UART_Transmit_Messages_BlackBox>
	UART_Transmit_Messages_BlackBox("*********************************************************\r\n");
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <check_free_space+0x110>)
 80011c8:	f7ff ff1c 	bl	8001004 <UART_Transmit_Messages_BlackBox>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20002eec 	.word	0x20002eec
 80011d8:	20002ef0 	.word	0x20002ef0
 80011dc:	0801e75c 	.word	0x0801e75c
 80011e0:	3fe00000 	.word	0x3fe00000
 80011e4:	20002ef4 	.word	0x20002ef4
 80011e8:	49800000 	.word	0x49800000
 80011ec:	0801e848 	.word	0x0801e848
 80011f0:	20002aec 	.word	0x20002aec
 80011f4:	20002ef8 	.word	0x20002ef8
 80011f8:	0801e880 	.word	0x0801e880
 80011fc:	0801e8b8 	.word	0x0801e8b8

08001200 <create_file>:





void create_file(const char* filename) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b09c      	sub	sp, #112	; 0x70
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    // Open file to write OR create it if it does not exist
    fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001208:	220b      	movs	r2, #11
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4811      	ldr	r0, [pc, #68]	; (8001254 <create_file+0x54>)
 800120e:	f00b fce3 	bl	800cbd8 <f_open>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <create_file+0x58>)
 8001218:	701a      	strb	r2, [r3, #0]
    char err[100];

    if (fresult == FR_OK) {
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <create_file+0x58>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <create_file+0x30>
        UART_Transmit_Messages_BlackBox("File created successfully! \r\n");
 8001222:	480e      	ldr	r0, [pc, #56]	; (800125c <create_file+0x5c>)
 8001224:	f7ff feee 	bl	8001004 <UART_Transmit_Messages_BlackBox>
        f_close(&fil);
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <create_file+0x54>)
 800122a:	f00c f8f4 	bl	800d416 <f_close>
    } else {
    	sprintf(err,"Error creating the file:  %d \r\n", fresult);
        UART_Transmit_Messages_BlackBox(err);
    }
}
 800122e:	e00d      	b.n	800124c <create_file+0x4c>
    	sprintf(err,"Error creating the file:  %d \r\n", fresult);
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <create_file+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	4909      	ldr	r1, [pc, #36]	; (8001260 <create_file+0x60>)
 800123c:	4618      	mov	r0, r3
 800123e:	f017 fea5 	bl	8018f8c <siprintf>
        UART_Transmit_Messages_BlackBox(err);
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fedc 	bl	8001004 <UART_Transmit_Messages_BlackBox>
}
 800124c:	bf00      	nop
 800124e:	3770      	adds	r7, #112	; 0x70
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20001ab8 	.word	0x20001ab8
 8001258:	20002ae8 	.word	0x20002ae8
 800125c:	0801e8f4 	.word	0x0801e8f4
 8001260:	0801e914 	.word	0x0801e914

08001264 <append_data_to_file>:

void append_data_to_file(const char* filename, const char* data) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
    if (file_exists(filename)) {
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fede 	bl	8001030 <file_exists>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d009      	beq.n	800128e <append_data_to_file+0x2a>
        // Open file to append data at the end
        fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800127a:	2233      	movs	r2, #51	; 0x33
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	482d      	ldr	r0, [pc, #180]	; (8001334 <append_data_to_file+0xd0>)
 8001280:	f00b fcaa 	bl	800cbd8 <f_open>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <append_data_to_file+0xd4>)
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	e00b      	b.n	80012a6 <append_data_to_file+0x42>
    } else {
    	create_file(filename);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffb6 	bl	8001200 <create_file>
        // Open file to write OR create it if it does not exist
        fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001294:	220b      	movs	r2, #11
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4826      	ldr	r0, [pc, #152]	; (8001334 <append_data_to_file+0xd0>)
 800129a:	f00b fc9d 	bl	800cbd8 <f_open>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <append_data_to_file+0xd4>)
 80012a4:	701a      	strb	r2, [r3, #0]
    }

    if (fresult == FR_OK) {
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <append_data_to_file+0xd4>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d13b      	bne.n	8001326 <append_data_to_file+0xc2>
        // Write data to the file
        UINT bytes_written;
        fresult = f_write(&fil, data, strlen(data), &bytes_written);
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	f7fe ffde 	bl	8000270 <strlen>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	481d      	ldr	r0, [pc, #116]	; (8001334 <append_data_to_file+0xd0>)
 80012be:	f00b fe5e 	bl	800cf7e <f_write>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <append_data_to_file+0xd4>)
 80012c8:	701a      	strb	r2, [r3, #0]

        if (fresult == FR_OK && bytes_written == strlen(data)) {
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <append_data_to_file+0xd4>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10a      	bne.n	80012e8 <append_data_to_file+0x84>
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7fe ffcc 	bl	8000270 <strlen>
 80012d8:	4602      	mov	r2, r0
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d103      	bne.n	80012e8 <append_data_to_file+0x84>
            //UART_Transmit_Messages_BlackBox("Data written to the file successfully! \r\n");
            // Synchronize file information with the disk
            f_sync(&fil);
 80012e0:	4814      	ldr	r0, [pc, #80]	; (8001334 <append_data_to_file+0xd0>)
 80012e2:	f00c f80f 	bl	800d304 <f_sync>
 80012e6:	e01a      	b.n	800131e <append_data_to_file+0xba>
        } else {
            if (fresult != FR_OK) {
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <append_data_to_file+0xd4>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00a      	beq.n	8001306 <append_data_to_file+0xa2>
                sprintf(data_buffer, "Error writing data to the file. Error code: %d \r\n", fresult);
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <append_data_to_file+0xd4>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4911      	ldr	r1, [pc, #68]	; (800133c <append_data_to_file+0xd8>)
 80012f8:	4811      	ldr	r0, [pc, #68]	; (8001340 <append_data_to_file+0xdc>)
 80012fa:	f017 fe47 	bl	8018f8c <siprintf>
                UART_Transmit_Messages_BlackBox(data_buffer);
 80012fe:	4810      	ldr	r0, [pc, #64]	; (8001340 <append_data_to_file+0xdc>)
 8001300:	f7ff fe80 	bl	8001004 <UART_Transmit_Messages_BlackBox>
 8001304:	e00b      	b.n	800131e <append_data_to_file+0xba>
            } else {
                sprintf(data_buffer, "Error: Incorrect number of bytes written. Expected: %d, Actual: %d \r\n",
 8001306:	6838      	ldr	r0, [r7, #0]
 8001308:	f7fe ffb2 	bl	8000270 <strlen>
 800130c:	4602      	mov	r2, r0
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <append_data_to_file+0xe0>)
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <append_data_to_file+0xdc>)
 8001314:	f017 fe3a 	bl	8018f8c <siprintf>
                        strlen(data), bytes_written);
                UART_Transmit_Messages_BlackBox(data_buffer);
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <append_data_to_file+0xdc>)
 800131a:	f7ff fe73 	bl	8001004 <UART_Transmit_Messages_BlackBox>
            }
        }

        // Close file
        f_close(&fil);
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <append_data_to_file+0xd0>)
 8001320:	f00c f879 	bl	800d416 <f_close>
    } else {
        UART_Transmit_Messages_BlackBox("Error opening the file for writing. \r\n");
    }
}
 8001324:	e002      	b.n	800132c <append_data_to_file+0xc8>
        UART_Transmit_Messages_BlackBox("Error opening the file for writing. \r\n");
 8001326:	4808      	ldr	r0, [pc, #32]	; (8001348 <append_data_to_file+0xe4>)
 8001328:	f7ff fe6c 	bl	8001004 <UART_Transmit_Messages_BlackBox>
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20001ab8 	.word	0x20001ab8
 8001338:	20002ae8 	.word	0x20002ae8
 800133c:	0801e934 	.word	0x0801e934
 8001340:	20002aec 	.word	0x20002aec
 8001344:	0801e968 	.word	0x0801e968
 8001348:	0801e9b0 	.word	0x0801e9b0

0800134c <QMC_init>:



//###############################################################################################################
uint32_t QMC_init(I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af04      	add	r7, sp, #16
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	uint8_t array[2];
	magneto_sensor.i2c=i2c;
 8001358:	4a33      	ldr	r2, [pc, #204]	; (8001428 <QMC_init+0xdc>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
	magneto_sensor.Control_Register=0x11;
 800135e:	4b32      	ldr	r3, [pc, #200]	; (8001428 <QMC_init+0xdc>)
 8001360:	2211      	movs	r2, #17
 8001362:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 8001364:	2301      	movs	r3, #1
 8001366:	733b      	strb	r3, [r7, #12]
	array[1]=magneto_sensor.Control_Register;
 8001368:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <QMC_init+0xdc>)
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	737b      	strb	r3, [r7, #13]

	if(Output_Data_Rate==200)magneto_sensor.Control_Register|=0b00001100;
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	2bc8      	cmp	r3, #200	; 0xc8
 8001372:	d107      	bne.n	8001384 <QMC_init+0x38>
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <QMC_init+0xdc>)
 8001376:	791b      	ldrb	r3, [r3, #4]
 8001378:	f043 030c 	orr.w	r3, r3, #12
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <QMC_init+0xdc>)
 8001380:	711a      	strb	r2, [r3, #4]
 8001382:	e024      	b.n	80013ce <QMC_init+0x82>
	else if(Output_Data_Rate==100)magneto_sensor.Control_Register|=0b00001000;
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d107      	bne.n	800139a <QMC_init+0x4e>
 800138a:	4b27      	ldr	r3, [pc, #156]	; (8001428 <QMC_init+0xdc>)
 800138c:	791b      	ldrb	r3, [r3, #4]
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <QMC_init+0xdc>)
 8001396:	711a      	strb	r2, [r3, #4]
 8001398:	e019      	b.n	80013ce <QMC_init+0x82>
	else if(Output_Data_Rate==50)magneto_sensor.Control_Register|=0b00000100;
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	2b32      	cmp	r3, #50	; 0x32
 800139e:	d107      	bne.n	80013b0 <QMC_init+0x64>
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <QMC_init+0xdc>)
 80013a2:	791b      	ldrb	r3, [r3, #4]
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <QMC_init+0xdc>)
 80013ac:	711a      	strb	r2, [r3, #4]
 80013ae:	e00e      	b.n	80013ce <QMC_init+0x82>
	else if(Output_Data_Rate==10)magneto_sensor.Control_Register|=0b00000000;
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b0a      	cmp	r3, #10
 80013b4:	d104      	bne.n	80013c0 <QMC_init+0x74>
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <QMC_init+0xdc>)
 80013b8:	791a      	ldrb	r2, [r3, #4]
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <QMC_init+0xdc>)
 80013bc:	711a      	strb	r2, [r3, #4]
 80013be:	e006      	b.n	80013ce <QMC_init+0x82>
	else magneto_sensor.Control_Register|=0b00001100;
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <QMC_init+0xdc>)
 80013c2:	791b      	ldrb	r3, [r3, #4]
 80013c4:	f043 030c 	orr.w	r3, r3, #12
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <QMC_init+0xdc>)
 80013cc:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <QMC_init+0xdc>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	2364      	movs	r3, #100	; 0x64
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2301      	movs	r3, #1
 80013e2:	220b      	movs	r2, #11
 80013e4:	211a      	movs	r1, #26
 80013e6:	f005 fccd 	bl	8006d84 <HAL_I2C_Mem_Write>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <QMC_init+0xa8>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e014      	b.n	800141e <QMC_init+0xd2>
	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <QMC_init+0xdc>)
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	2364      	movs	r3, #100	; 0x64
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2301      	movs	r3, #1
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	3301      	adds	r3, #1
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2301      	movs	r3, #1
 800140a:	2209      	movs	r2, #9
 800140c:	211a      	movs	r1, #26
 800140e:	f005 fcb9 	bl	8006d84 <HAL_I2C_Mem_Write>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <QMC_init+0xd0>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <QMC_init+0xd2>

	return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20002efc 	.word	0x20002efc
 800142c:	00000000 	.word	0x00000000

08001430 <QMC_read>:

uint8_t QMC_read()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af04      	add	r7, sp, #16
	  magneto_sensor.datas[0]=0;
 8001436:	4b4c      	ldr	r3, [pc, #304]	; (8001568 <QMC_read+0x138>)
 8001438:	2200      	movs	r2, #0
 800143a:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x06, 1, magneto_sensor.datas, 1, 100);
 800143c:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <QMC_read+0x138>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	2364      	movs	r3, #100	; 0x64
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	4b48      	ldr	r3, [pc, #288]	; (800156c <QMC_read+0x13c>)
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	2206      	movs	r2, #6
 8001450:	211a      	movs	r1, #26
 8001452:	f005 fd91 	bl	8006f78 <HAL_I2C_Mem_Read>

	  if((magneto_sensor.datas[0]&0x01)==1)
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <QMC_read+0x138>)
 8001458:	795b      	ldrb	r3, [r3, #5]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d075      	beq.n	800154e <QMC_read+0x11e>
	  {
		  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x00, 1, magneto_sensor.datas, 6, 100);
 8001462:	4b41      	ldr	r3, [pc, #260]	; (8001568 <QMC_read+0x138>)
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	2364      	movs	r3, #100	; 0x64
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	2306      	movs	r3, #6
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <QMC_read+0x13c>)
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2301      	movs	r3, #1
 8001474:	2200      	movs	r2, #0
 8001476:	211a      	movs	r1, #26
 8001478:	f005 fd7e 	bl	8006f78 <HAL_I2C_Mem_Read>
		  magneto_sensor.Xaxis= (magneto_sensor.datas[1]<<8) | magneto_sensor.datas[0];
 800147c:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <QMC_read+0x138>)
 800147e:	799b      	ldrb	r3, [r3, #6]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	b21a      	sxth	r2, r3
 8001484:	4b38      	ldr	r3, [pc, #224]	; (8001568 <QMC_read+0x138>)
 8001486:	795b      	ldrb	r3, [r3, #5]
 8001488:	b21b      	sxth	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <QMC_read+0x138>)
 8001490:	819a      	strh	r2, [r3, #12]
		  magneto_sensor.Yaxis= (magneto_sensor.datas[3]<<8) | magneto_sensor.datas[2];
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <QMC_read+0x138>)
 8001494:	7a1b      	ldrb	r3, [r3, #8]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <QMC_read+0x138>)
 800149c:	79db      	ldrb	r3, [r3, #7]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b30      	ldr	r3, [pc, #192]	; (8001568 <QMC_read+0x138>)
 80014a6:	81da      	strh	r2, [r3, #14]
		  magneto_sensor.Zaxis= (magneto_sensor.datas[5]<<8) | magneto_sensor.datas[4];
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <QMC_read+0x138>)
 80014aa:	7a9b      	ldrb	r3, [r3, #10]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <QMC_read+0x138>)
 80014b2:	7a5b      	ldrb	r3, [r3, #9]
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <QMC_read+0x138>)
 80014bc:	821a      	strh	r2, [r3, #16]

		  magneto_sensor.compas=atan2f(magneto_sensor.Yaxis,magneto_sensor.Xaxis)*180.00/M_PI;
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <QMC_read+0x138>)
 80014c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <QMC_read+0x138>)
 80014ce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014d2:	ee07 3a10 	vmov	s14, r3
 80014d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014da:	eef0 0a47 	vmov.f32	s1, s14
 80014de:	eeb0 0a67 	vmov.f32	s0, s15
 80014e2:	f01b fb29 	bl	801cb38 <atan2f>
 80014e6:	ee10 3a10 	vmov	r3, s0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f836 	bl	800055c <__aeabi_f2d>
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <QMC_read+0x140>)
 80014f6:	f7ff f889 	bl	800060c <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a317      	add	r3, pc, #92	; (adr r3, 8001560 <QMC_read+0x130>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f9aa 	bl	8000860 <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb72 	bl	8000bfc <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <QMC_read+0x138>)
 800151c:	6193      	str	r3, [r2, #24]

		  if(magneto_sensor.compas>0)
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <QMC_read+0x138>)
 8001520:	edd3 7a06 	vldr	s15, [r3, #24]
 8001524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	dd04      	ble.n	8001538 <QMC_read+0x108>
		  {
			  magneto_sensor.heading= magneto_sensor.compas;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <QMC_read+0x138>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <QMC_read+0x138>)
 8001534:	6153      	str	r3, [r2, #20]
 8001536:	e00c      	b.n	8001552 <QMC_read+0x122>
		  }
		  else
		  {
			  magneto_sensor.heading=360+magneto_sensor.compas;
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <QMC_read+0x138>)
 800153a:	edd3 7a06 	vldr	s15, [r3, #24]
 800153e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001574 <QMC_read+0x144>
 8001542:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <QMC_read+0x138>)
 8001548:	edc3 7a05 	vstr	s15, [r3, #20]
 800154c:	e001      	b.n	8001552 <QMC_read+0x122>
		  }
	  }
	  else
	  {
		  return 1;
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <QMC_read+0x124>
	  }
return 0;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	f3af 8000 	nop.w
 8001560:	54442d18 	.word	0x54442d18
 8001564:	400921fb 	.word	0x400921fb
 8001568:	20002efc 	.word	0x20002efc
 800156c:	20002f01 	.word	0x20002f01
 8001570:	40668000 	.word	0x40668000
 8001574:	43b40000 	.word	0x43b40000

08001578 <Transmit_Compass_Data>:
}




CompassData Transmit_Compass_Data(){
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]


		if(QMC_read() == 0)
 8001580:	f7ff ff56 	bl	8001430 <QMC_read>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 8082 	bne.w	8001690 <Transmit_Compass_Data+0x118>
		{
			float heading = magneto_sensor.heading;
 800158c:	4b4e      	ldr	r3, [pc, #312]	; (80016c8 <Transmit_Compass_Data+0x150>)
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	61fb      	str	r3, [r7, #28]


	        // Calculate magDecRad based on your requirements
			double calculatedMagDecRad = heading * (M_PI / 180.0);
 8001592:	69f8      	ldr	r0, [r7, #28]
 8001594:	f7fe ffe2 	bl	800055c <__aeabi_f2d>
 8001598:	a349      	add	r3, pc, #292	; (adr r3, 80016c0 <Transmit_Compass_Data+0x148>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7ff f835 	bl	800060c <__aeabi_dmul>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	e9c7 2304 	strd	r2, r3, [r7, #16]


			//Compas_Value=magneto_sensor.heading;
			//char mag_buffer[100];
			compass_data.mag_unit_x = (double)magneto_sensor.Xaxis;
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <Transmit_Compass_Data+0x150>)
 80015ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffc1 	bl	8000538 <__aeabi_i2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4944      	ldr	r1, [pc, #272]	; (80016cc <Transmit_Compass_Data+0x154>)
 80015bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
			compass_data.mag_unit_y = (double)magneto_sensor.Yaxis;
 80015c0:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <Transmit_Compass_Data+0x150>)
 80015c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffb6 	bl	8000538 <__aeabi_i2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	493e      	ldr	r1, [pc, #248]	; (80016cc <Transmit_Compass_Data+0x154>)
 80015d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
			compass_data.mag_unit_z = (double)magneto_sensor.Zaxis;
 80015d6:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <Transmit_Compass_Data+0x150>)
 80015d8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffab 	bl	8000538 <__aeabi_i2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4939      	ldr	r1, [pc, #228]	; (80016cc <Transmit_Compass_Data+0x154>)
 80015e8:	e9c1 2308 	strd	r2, r3, [r1, #32]
			//sprintf(mag_buffer, "X=%d, Y=%d, Z=%d \r\n", magneto_sensor.Xaxis, magneto_sensor.Yaxis, magneto_sensor.Zaxis);
			//sprintf(mag_heading_buffer, "HEADING : %.1f\r\n",magneto_sensor.heading);
			//UART_Transmit_Messages_Magnetometer(mag_buffer);
			//UART_Transmit_Messages_Magnetometer(mag_heading_buffer);

	        const int numDirections = sizeof(directions) / sizeof(directions[0]);
 80015ec:	2309      	movs	r3, #9
 80015ee:	60fb      	str	r3, [r7, #12]
	        const char* direction = "Unknown";
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <Transmit_Compass_Data+0x158>)
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24

	        for (int i = 0; i < numDirections; ++i) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
 80015f8:	e02e      	b.n	8001658 <Transmit_Compass_Data+0xe0>
	            if (heading >= directions[i].min && heading <= directions[i].max) {
 80015fa:	4936      	ldr	r1, [pc, #216]	; (80016d4 <Transmit_Compass_Data+0x15c>)
 80015fc:	6a3a      	ldr	r2, [r7, #32]
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	db1b      	blt.n	8001652 <Transmit_Compass_Data+0xda>
 800161a:	492e      	ldr	r1, [pc, #184]	; (80016d4 <Transmit_Compass_Data+0x15c>)
 800161c:	6a3a      	ldr	r2, [r7, #32]
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3304      	adds	r3, #4
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	d80a      	bhi.n	8001652 <Transmit_Compass_Data+0xda>
	                direction = directions[i].direction;
 800163c:	4925      	ldr	r1, [pc, #148]	; (80016d4 <Transmit_Compass_Data+0x15c>)
 800163e:	6a3a      	ldr	r2, [r7, #32]
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	3308      	adds	r3, #8
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
	                break;
 8001650:	e006      	b.n	8001660 <Transmit_Compass_Data+0xe8>
	        for (int i = 0; i < numDirections; ++i) {
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	3301      	adds	r3, #1
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	6a3a      	ldr	r2, [r7, #32]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	dbcc      	blt.n	80015fa <Transmit_Compass_Data+0x82>
	            }
	        }

	        compass_data.heading = heading;
 8001660:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <Transmit_Compass_Data+0x154>)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	6013      	str	r3, [r2, #0]
	        compass_data.direction = direction;
 8001666:	4a19      	ldr	r2, [pc, #100]	; (80016cc <Transmit_Compass_Data+0x154>)
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	6293      	str	r3, [r2, #40]	; 0x28
	        compass_data.magDecRad = calculatedMagDecRad;
 800166c:	4917      	ldr	r1, [pc, #92]	; (80016cc <Transmit_Compass_Data+0x154>)
 800166e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001672:	e9c1 2302 	strd	r2, r3, [r1, #8]



	        return compass_data;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <Transmit_Compass_Data+0x154>)
 800167a:	461c      	mov	r4, r3
 800167c:	4615      	mov	r5, r2
 800167e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001686:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800168a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800168e:	e012      	b.n	80016b6 <Transmit_Compass_Data+0x13e>

		}
		else
		{
	        compass_data.heading = 0;
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <Transmit_Compass_Data+0x154>)
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
	        compass_data.direction = "ERR";
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <Transmit_Compass_Data+0x154>)
 800169a:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <Transmit_Compass_Data+0x160>)
 800169c:	629a      	str	r2, [r3, #40]	; 0x28

	        return compass_data;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <Transmit_Compass_Data+0x154>)
 80016a2:	461c      	mov	r4, r3
 80016a4:	4615      	mov	r5, r2
 80016a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}

}
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bdb0      	pop	{r4, r5, r7, pc}
 80016be:	bf00      	nop
 80016c0:	a2529d39 	.word	0xa2529d39
 80016c4:	3f91df46 	.word	0x3f91df46
 80016c8:	20002efc 	.word	0x20002efc
 80016cc:	20002f18 	.word	0x20002f18
 80016d0:	0801ea60 	.word	0x0801ea60
 80016d4:	0801f9ec 	.word	0x0801f9ec
 80016d8:	0801ea68 	.word	0x0801ea68

080016dc <UART_Transmit_String>:
	uint8_t all_reg_rx[8];
	struct LoRa_Handler LoraRX={0};
*/

void UART_Transmit_String(const char* str)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7fe fdc3 	bl	8000270 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <UART_Transmit_String+0x28>)
 80016f6:	f008 fb5c 	bl	8009db2 <HAL_UART_Transmit>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20004878 	.word	0x20004878

08001708 <UART_Transmit_Logo>:


void UART_Transmit_Logo() {
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
    UART_Transmit_String("                                                                \r\n");
 800170c:	482d      	ldr	r0, [pc, #180]	; (80017c4 <UART_Transmit_Logo+0xbc>)
 800170e:	f7ff ffe5 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                                                                \r\n");
 8001712:	482c      	ldr	r0, [pc, #176]	; (80017c4 <UART_Transmit_Logo+0xbc>)
 8001714:	f7ff ffe2 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                            ,,								  \r\n");
 8001718:	482b      	ldr	r0, [pc, #172]	; (80017c8 <UART_Transmit_Logo+0xc0>)
 800171a:	f7ff ffdf 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                           ^B$~								  \r\n");
 800171e:	482b      	ldr	r0, [pc, #172]	; (80017cc <UART_Transmit_Logo+0xc4>)
 8001720:	f7ff ffdc 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                          '$$$$|								  \r\n");
 8001724:	482a      	ldr	r0, [pc, #168]	; (80017d0 <UART_Transmit_Logo+0xc8>)
 8001726:	f7ff ffd9 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                           ,$$$$/							      \r\n");
 800172a:	482a      	ldr	r0, [pc, #168]	; (80017d4 <UART_Transmit_Logo+0xcc>)
 800172c:	f7ff ffd6 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                            _$$$$j							  \r\n");
 8001730:	4829      	ldr	r0, [pc, #164]	; (80017d8 <UART_Transmit_Logo+0xd0>)
 8001732:	f7ff ffd3 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                             {$$$$v'							  \r\n");
 8001736:	4829      	ldr	r0, [pc, #164]	; (80017dc <UART_Transmit_Logo+0xd4>)
 8001738:	f7ff ffd0 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                              <$$$$8.						      \r\n");
 800173c:	4828      	ldr	r0, [pc, #160]	; (80017e0 <UART_Transmit_Logo+0xd8>)
 800173e:	f7ff ffcd 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                               i$$$$x						      \r\n");
 8001742:	4828      	ldr	r0, [pc, #160]	; (80017e4 <UART_Transmit_Logo+0xdc>)
 8001744:	f7ff ffca 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                    ,'          I$$$$'						  \r\n");
 8001748:	4827      	ldr	r0, [pc, #156]	; (80017e8 <UART_Transmit_Logo+0xe0>)
 800174a:	f7ff ffc7 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                   +$8`     |M`  %$$$n.						  \r\n");
 800174e:	4827      	ldr	r0, [pc, #156]	; (80017ec <UART_Transmit_Logo+0xe4>)
 8001750:	f7ff ffc4 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                  |$$$@.   1$$@`  'W$$$W'					      \r\n");
 8001754:	4826      	ldr	r0, [pc, #152]	; (80017f0 <UART_Transmit_Logo+0xe8>)
 8001756:	f7ff ffc1 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                 t$$$$:   '*}|[M   '&$$$8'				      \r\n");
 800175a:	4826      	ldr	r0, [pc, #152]	; (80017f4 <UART_Transmit_Logo+0xec>)
 800175c:	f7ff ffbe 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("               .u$$$$!    x8/fx$,   `@$$$%,					  \r\n");
 8001760:	4825      	ldr	r0, [pc, #148]	; (80017f8 <UART_Transmit_Logo+0xf0>)
 8001762:	f7ff ffbb 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("              '&$$$$+     $$$$$${    `%$$$$'					  \r\n");
 8001766:	4825      	ldr	r0, [pc, #148]	; (80017fc <UART_Transmit_Logo+0xf4>)
 8001768:	f7ff ffb8 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("             .8$$$$>      $$$$$$|     `8$$$&.				      \r\n");
 800176c:	4824      	ldr	r0, [pc, #144]	; (8001800 <UART_Transmit_Logo+0xf8>)
 800176e:	f7ff ffb5 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("             x$$$$l       $$$$$$}      '&$$$W'				  \r\n");
 8001772:	4824      	ldr	r0, [pc, #144]	; (8001804 <UART_Transmit_Logo+0xfc>)
 8001774:	f7ff ffb2 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("           .r$$$%'        #$$$$$:       .n$$$8^				  \r\n");
 8001778:	4823      	ldr	r0, [pc, #140]	; (8001808 <UART_Transmit_Logo+0x100>)
 800177a:	f7ff ffaf 	bl	80016dc <UART_Transmit_String>
 	UART_Transmit_String("          'M$$$&'       .t+$$$$@>].       /$$$$;				  \r\n");
 800177e:	4823      	ldr	r0, [pc, #140]	; (800180c <UART_Transmit_Logo+0x104>)
 8001780:	f7ff ffac 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("         '&$$$W'       ,$$,$$$$)f$W        x$$$$!			      \r\n");
 8001784:	4822      	ldr	r0, [pc, #136]	; (8001810 <UART_Transmit_Logo+0x108>)
 8001786:	f7ff ffa9 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("        '8$$$&.        !$$;t$$$`@$$        '8$$$$<			  \r\n");
 800178a:	4822      	ldr	r0, [pc, #136]	; (8001814 <UART_Transmit_Logo+0x10c>)
 800178c:	f7ff ffa6 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("       ,B$$$B`         !$$>.^;..$$$         'c$$$$1			  \r\n");
 8001790:	4821      	ldr	r0, [pc, #132]	; (8001818 <UART_Transmit_Logo+0x110>)
 8001792:	f7ff ffa3 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("      '$$$$%`          '+^. ^>  ':{           j$$$$-			  \r\n");
 8001796:	4821      	ldr	r0, [pc, #132]	; (800181c <UART_Transmit_Logo+0x114>)
 8001798:	f7ff ffa0 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("     .&$$$8'            .^' ^!  '`             t$$$$:		      \r\n");
 800179c:	4820      	ldr	r0, [pc, #128]	; (8001820 <UART_Transmit_Logo+0x118>)
 800179e:	f7ff ff9d 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("    'W$$$&'            '`   `;   .^             /$$$$I		  \r\n");
 80017a2:	4820      	ldr	r0, [pc, #128]	; (8001824 <UART_Transmit_Logo+0x11c>)
 80017a4:	f7ff ff9a 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("   ^8$$$n.                  `,                   +$$$$]		  \r\n");
 80017a8:	481f      	ldr	r0, [pc, #124]	; (8001828 <UART_Transmit_Logo+0x120>)
 80017aa:	f7ff ff97 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("  ;$$$$/                    .^                    ,$$$$j		  \r\n");
 80017ae:	481f      	ldr	r0, [pc, #124]	; (800182c <UART_Transmit_Logo+0x124>)
 80017b0:	f7ff ff94 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String(" !$$$$x                     .'                     _$$$$x.	  \r\n");
 80017b4:	481e      	ldr	r0, [pc, #120]	; (8001830 <UART_Transmit_Logo+0x128>)
 80017b6:	f7ff ff91 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String(" .....                       .                      .....	      \r\n");
 80017ba:	481e      	ldr	r0, [pc, #120]	; (8001834 <UART_Transmit_Logo+0x12c>)
 80017bc:	f7ff ff8e 	bl	80016dc <UART_Transmit_String>

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	0801ea6c 	.word	0x0801ea6c
 80017c8:	0801eab0 	.word	0x0801eab0
 80017cc:	0801eadc 	.word	0x0801eadc
 80017d0:	0801eb08 	.word	0x0801eb08
 80017d4:	0801eb38 	.word	0x0801eb38
 80017d8:	0801eb6c 	.word	0x0801eb6c
 80017dc:	0801eb9c 	.word	0x0801eb9c
 80017e0:	0801ebcc 	.word	0x0801ebcc
 80017e4:	0801ec00 	.word	0x0801ec00
 80017e8:	0801ec34 	.word	0x0801ec34
 80017ec:	0801ec68 	.word	0x0801ec68
 80017f0:	0801ec9c 	.word	0x0801ec9c
 80017f4:	0801ecd4 	.word	0x0801ecd4
 80017f8:	0801ed0c 	.word	0x0801ed0c
 80017fc:	0801ed44 	.word	0x0801ed44
 8001800:	0801ed7c 	.word	0x0801ed7c
 8001804:	0801edb8 	.word	0x0801edb8
 8001808:	0801edf0 	.word	0x0801edf0
 800180c:	0801ee28 	.word	0x0801ee28
 8001810:	0801ee64 	.word	0x0801ee64
 8001814:	0801eea4 	.word	0x0801eea4
 8001818:	0801eee0 	.word	0x0801eee0
 800181c:	0801ef1c 	.word	0x0801ef1c
 8001820:	0801ef58 	.word	0x0801ef58
 8001824:	0801ef98 	.word	0x0801ef98
 8001828:	0801efd8 	.word	0x0801efd8
 800182c:	0801f018 	.word	0x0801f018
 8001830:	0801f058 	.word	0x0801f058
 8001834:	0801f098 	.word	0x0801f098

08001838 <waitForStartCommand>:

//-------------------------   RTOS DEDICATED FUNCTIONS --------------------------------//


// Function to wait for the start command ('00$')
bool waitForStartCommand(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
    char inputBuffer[4] = {0}; // Buffer to store received command
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]

    // Read user input character by character until we encounter '$'
    for (int bufferIndex = 0; bufferIndex < 3; bufferIndex++) {
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	e00b      	b.n	8001860 <waitForStartCommand+0x28>
        HAL_UART_Receive(&huart1, (uint8_t *)&inputBuffer[bufferIndex], sizeof(char), HAL_MAX_DELAY);
 8001848:	463a      	mov	r2, r7
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	18d1      	adds	r1, r2, r3
 800184e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001852:	2201      	movs	r2, #1
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <waitForStartCommand+0x50>)
 8001856:	f008 fb3e 	bl	8009ed6 <HAL_UART_Receive>
    for (int bufferIndex = 0; bufferIndex < 3; bufferIndex++) {
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3301      	adds	r3, #1
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	ddf0      	ble.n	8001848 <waitForStartCommand+0x10>
    }

    // Null-terminate the input buffer
    inputBuffer[3] = '\0';
 8001866:	2300      	movs	r3, #0
 8001868:	70fb      	strb	r3, [r7, #3]

    // Check if the received command is '00$'
    if (strcmp(inputBuffer, "00$") == 0) {
 800186a:	463b      	mov	r3, r7
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <waitForStartCommand+0x54>)
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fd06 	bl	8000280 <strcmp>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <waitForStartCommand+0x46>
        return true; // If '00$' is received, return true
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <waitForStartCommand+0x48>
    } else {
        return false; // If not received, return false
 800187e:	2300      	movs	r3, #0
    }
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20004878 	.word	0x20004878
 800188c:	0801f0dc 	.word	0x0801f0dc

08001890 <waitForUserInput>:



// Function to wait for user input
char waitForUserInput(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
    char userInput = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	71fb      	strb	r3, [r7, #7]

    // Wait for user input (single character)
    HAL_UART_Receive(&huart1, (uint8_t*)&userInput, 1, HAL_MAX_DELAY);
 800189a:	1df9      	adds	r1, r7, #7
 800189c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018a0:	2201      	movs	r2, #1
 80018a2:	4804      	ldr	r0, [pc, #16]	; (80018b4 <waitForUserInput+0x24>)
 80018a4:	f008 fb17 	bl	8009ed6 <HAL_UART_Receive>

    // Return the received character
    return userInput;
 80018a8:	79fb      	ldrb	r3, [r7, #7]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20004878 	.word	0x20004878

080018b8 <printMenu>:



// Function to print the menu based on the current state
void printMenu(enum MenuState state) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b07      	cmp	r3, #7
 80018c6:	d84b      	bhi.n	8001960 <printMenu+0xa8>
 80018c8:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <printMenu+0x18>)
 80018ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ce:	bf00      	nop
 80018d0:	080018f1 	.word	0x080018f1
 80018d4:	08001929 	.word	0x08001929
 80018d8:	08001931 	.word	0x08001931
 80018dc:	08001939 	.word	0x08001939
 80018e0:	08001941 	.word	0x08001941
 80018e4:	08001949 	.word	0x08001949
 80018e8:	08001951 	.word	0x08001951
 80018ec:	08001959 	.word	0x08001959
        case MENU_MAIN:
        	UART_Transmit_String("\r\n");
 80018f0:	481e      	ldr	r0, [pc, #120]	; (800196c <printMenu+0xb4>)
 80018f2:	f7ff fef3 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("0 - Initialize Flight Computer\r\n");
 80018f6:	481e      	ldr	r0, [pc, #120]	; (8001970 <printMenu+0xb8>)
 80018f8:	f7ff fef0 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("1 - Read All Sensors\r\n");
 80018fc:	481d      	ldr	r0, [pc, #116]	; (8001974 <printMenu+0xbc>)
 80018fe:	f7ff feed 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("2 - LoRa Test (Sender)\r\n");
 8001902:	481d      	ldr	r0, [pc, #116]	; (8001978 <printMenu+0xc0>)
 8001904:	f7ff feea 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("3 - LoRa Test (Receiver)\r\n");
 8001908:	481c      	ldr	r0, [pc, #112]	; (800197c <printMenu+0xc4>)
 800190a:	f7ff fee7 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("4 - Execute Pyro Test (Ignition)\r\n");
 800190e:	481c      	ldr	r0, [pc, #112]	; (8001980 <printMenu+0xc8>)
 8001910:	f7ff fee4 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("5 - Execute Pyro Test (Parachute)\r\n");
 8001914:	481b      	ldr	r0, [pc, #108]	; (8001984 <printMenu+0xcc>)
 8001916:	f7ff fee1 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("6 - Launch Procedure\r\n");
 800191a:	481b      	ldr	r0, [pc, #108]	; (8001988 <printMenu+0xd0>)
 800191c:	f7ff fede 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("\r\n");
 8001920:	4812      	ldr	r0, [pc, #72]	; (800196c <printMenu+0xb4>)
 8001922:	f7ff fedb 	bl	80016dc <UART_Transmit_String>
            break;
 8001926:	e01c      	b.n	8001962 <printMenu+0xaa>
        case MENU_INIT:
            UART_Transmit_String("Initializing the Flight Controller...\r\n");
 8001928:	4818      	ldr	r0, [pc, #96]	; (800198c <printMenu+0xd4>)
 800192a:	f7ff fed7 	bl	80016dc <UART_Transmit_String>
            break;
 800192e:	e018      	b.n	8001962 <printMenu+0xaa>
        case MENU_SENSOR_READINGS:
            UART_Transmit_String("Reading Sensors...\r\n");
 8001930:	4817      	ldr	r0, [pc, #92]	; (8001990 <printMenu+0xd8>)
 8001932:	f7ff fed3 	bl	80016dc <UART_Transmit_String>
            break;
 8001936:	e014      	b.n	8001962 <printMenu+0xaa>
        case MENU_LORA_SEND:
            UART_Transmit_String("Running LoRa SENDING Test...\r\n");
 8001938:	4816      	ldr	r0, [pc, #88]	; (8001994 <printMenu+0xdc>)
 800193a:	f7ff fecf 	bl	80016dc <UART_Transmit_String>
            break;
 800193e:	e010      	b.n	8001962 <printMenu+0xaa>
        case MENU_LORA_RECEIVE:
            UART_Transmit_String("Running LoRa RECEIVING Test...\r\n");
 8001940:	4815      	ldr	r0, [pc, #84]	; (8001998 <printMenu+0xe0>)
 8001942:	f7ff fecb 	bl	80016dc <UART_Transmit_String>
            break;
 8001946:	e00c      	b.n	8001962 <printMenu+0xaa>
        case MENU_IGNITION:
            UART_Transmit_String("Starting Firing test (Ignition)...\r\n");
 8001948:	4814      	ldr	r0, [pc, #80]	; (800199c <printMenu+0xe4>)
 800194a:	f7ff fec7 	bl	80016dc <UART_Transmit_String>
            break;
 800194e:	e008      	b.n	8001962 <printMenu+0xaa>
        case MENU_PARACHUTE:
            UART_Transmit_String("Starting Firing test (Parachute)...\r\n");
 8001950:	4813      	ldr	r0, [pc, #76]	; (80019a0 <printMenu+0xe8>)
 8001952:	f7ff fec3 	bl	80016dc <UART_Transmit_String>
            break;
 8001956:	e004      	b.n	8001962 <printMenu+0xaa>
        case MENU_LAUNCH:
            UART_Transmit_String("Launching Procedure...\r\n");
 8001958:	4812      	ldr	r0, [pc, #72]	; (80019a4 <printMenu+0xec>)
 800195a:	f7ff febf 	bl	80016dc <UART_Transmit_String>
            break;
 800195e:	e000      	b.n	8001962 <printMenu+0xaa>
        default:
            break;
 8001960:	bf00      	nop
    }
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	0801f0e0 	.word	0x0801f0e0
 8001970:	0801f0e4 	.word	0x0801f0e4
 8001974:	0801f108 	.word	0x0801f108
 8001978:	0801f120 	.word	0x0801f120
 800197c:	0801f13c 	.word	0x0801f13c
 8001980:	0801f158 	.word	0x0801f158
 8001984:	0801f17c 	.word	0x0801f17c
 8001988:	0801f1a0 	.word	0x0801f1a0
 800198c:	0801f1b8 	.word	0x0801f1b8
 8001990:	0801f1e0 	.word	0x0801f1e0
 8001994:	0801f1f8 	.word	0x0801f1f8
 8001998:	0801f218 	.word	0x0801f218
 800199c:	0801f23c 	.word	0x0801f23c
 80019a0:	0801f264 	.word	0x0801f264
 80019a4:	0801f28c 	.word	0x0801f28c

080019a8 <handleUserInput>:



// Function to handle user input and change the current state
void handleUserInput(char command) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
    switch (command) {
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	3b30      	subs	r3, #48	; 0x30
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d82c      	bhi.n	8001a14 <handleUserInput+0x6c>
 80019ba:	a201      	add	r2, pc, #4	; (adr r2, 80019c0 <handleUserInput+0x18>)
 80019bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c0:	080019dd 	.word	0x080019dd
 80019c4:	080019e5 	.word	0x080019e5
 80019c8:	080019ed 	.word	0x080019ed
 80019cc:	080019f5 	.word	0x080019f5
 80019d0:	080019fd 	.word	0x080019fd
 80019d4:	08001a05 	.word	0x08001a05
 80019d8:	08001a0d 	.word	0x08001a0d
        case '0':
            currentMenuState = MENU_INIT;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <handleUserInput+0x7c>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
            break;
 80019e2:	e01b      	b.n	8001a1c <handleUserInput+0x74>
        case '1':
            currentMenuState = MENU_SENSOR_READINGS;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <handleUserInput+0x7c>)
 80019e6:	2202      	movs	r2, #2
 80019e8:	701a      	strb	r2, [r3, #0]
            break;
 80019ea:	e017      	b.n	8001a1c <handleUserInput+0x74>
        case '2':
            currentMenuState = MENU_LORA_SEND;
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <handleUserInput+0x7c>)
 80019ee:	2203      	movs	r2, #3
 80019f0:	701a      	strb	r2, [r3, #0]
            break;
 80019f2:	e013      	b.n	8001a1c <handleUserInput+0x74>
        case '3':
            currentMenuState = MENU_LORA_RECEIVE;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <handleUserInput+0x7c>)
 80019f6:	2204      	movs	r2, #4
 80019f8:	701a      	strb	r2, [r3, #0]
            break;
 80019fa:	e00f      	b.n	8001a1c <handleUserInput+0x74>
        case '4':
            currentMenuState = MENU_IGNITION;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <handleUserInput+0x7c>)
 80019fe:	2205      	movs	r2, #5
 8001a00:	701a      	strb	r2, [r3, #0]
            break;
 8001a02:	e00b      	b.n	8001a1c <handleUserInput+0x74>
        case '5':
            currentMenuState = MENU_PARACHUTE;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <handleUserInput+0x7c>)
 8001a06:	2206      	movs	r2, #6
 8001a08:	701a      	strb	r2, [r3, #0]
            break;
 8001a0a:	e007      	b.n	8001a1c <handleUserInput+0x74>
        case '6':
            currentMenuState = MENU_LAUNCH;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <handleUserInput+0x7c>)
 8001a0e:	2207      	movs	r2, #7
 8001a10:	701a      	strb	r2, [r3, #0]
            break;
 8001a12:	e003      	b.n	8001a1c <handleUserInput+0x74>
        default:
            UART_Transmit_String("Invalid command! Try again.\r\n");
 8001a14:	4804      	ldr	r0, [pc, #16]	; (8001a28 <handleUserInput+0x80>)
 8001a16:	f7ff fe61 	bl	80016dc <UART_Transmit_String>
            break;
 8001a1a:	bf00      	nop
    }
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20002f48 	.word	0x20002f48
 8001a28:	0801f2a8 	.word	0x0801f2a8

08001a2c <printIntroTitle>:
//-------------------------   END RTOS DEDICATED FUNCTIONS --------------------------------//



void printIntroTitle()
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	UART_Transmit_Logo();
 8001a30:	f7ff fe6a 	bl	8001708 <UART_Transmit_Logo>
    UART_Transmit_String("*********************************************************\r\n");
 8001a34:	480a      	ldr	r0, [pc, #40]	; (8001a60 <printIntroTitle+0x34>)
 8001a36:	f7ff fe51 	bl	80016dc <UART_Transmit_String>
    UART_Transmit_String("*               AEROSENTINEL Flight OS                  *\r\n");
 8001a3a:	480a      	ldr	r0, [pc, #40]	; (8001a64 <printIntroTitle+0x38>)
 8001a3c:	f7ff fe4e 	bl	80016dc <UART_Transmit_String>
    UART_Transmit_String("*    A versatile flight control system for your rocket  *\r\n");
 8001a40:	4809      	ldr	r0, [pc, #36]	; (8001a68 <printIntroTitle+0x3c>)
 8001a42:	f7ff fe4b 	bl	80016dc <UART_Transmit_String>
    UART_Transmit_String("                Made by Yassine DEHHANI                  \r\n");
 8001a46:	4809      	ldr	r0, [pc, #36]	; (8001a6c <printIntroTitle+0x40>)
 8001a48:	f7ff fe48 	bl	80016dc <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <printIntroTitle+0x34>)
 8001a4e:	f7ff fe45 	bl	80016dc <UART_Transmit_String>
    mount_sd_card();
 8001a52:	f7ff fb29 	bl	80010a8 <mount_sd_card>
    check_free_space();
 8001a56:	f7ff fb49 	bl	80010ec <check_free_space>


    //scanSingleUARTDevice(&huart1); // Checks for UART devices connected


}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	0801f2c8 	.word	0x0801f2c8
 8001a64:	0801f304 	.word	0x0801f304
 8001a68:	0801f340 	.word	0x0801f340
 8001a6c:	0801f37c 	.word	0x0801f37c

08001a70 <main_lora_packet_receive>:

void main_lora_packet_receive(uint8_t* dataPacket, uint8_t size)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0be      	sub	sp, #248	; 0xf8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
	uint8_t loraPacket[MAX_DATA_PACKET_SIZE] = {0};
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	22ec      	movs	r2, #236	; 0xec
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f018 fa01 	bl	8019e90 <memset>
	//Copy data to the main layer
	memcpy(&loraPacket, dataPacket, size);
 8001a8e:	78fa      	ldrb	r2, [r7, #3]
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f018 fa88 	bl	8019fac <memcpy>
	// TODO: implement main layer packet handling
}
 8001a9c:	bf00      	nop
 8001a9e:	37f8      	adds	r7, #248	; 0xf8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_UART_TxCpltCallback>:
 * @brief 	UART data transmission complete callback over DMA
 *
 * @param 	huart	:	Pointer to the UART handler
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	//Change the TX line state to ready
	e22_lora_make_ready();
 8001aac:	f001 fcca 	bl	8003444 <e22_lora_make_ready>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_UARTEx_RxEventCallback>:
 * @param 	huart	:	Pointer to the UART handler
 *
 * @param 	Size	:	Packet size received over UART
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
	e22_lora_reception_complete(Size);
 8001ac4:	887b      	ldrh	r3, [r7, #2]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f001 fcc9 	bl	8003460 <e22_lora_reception_complete>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <main_e22_transceiverMode>:
 * @brief 	LoRa module transceiver mode selection.  when this mode is active, the module configuration can't be modified.
 *
 *
 */
void main_e22_transceiverMode(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	//M0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <main_e22_transceiverMode+0x20>)
 8001ae4:	f004 fca8 	bl	8006438 <HAL_GPIO_WritePin>
	//M1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2102      	movs	r1, #2
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <main_e22_transceiverMode+0x20>)
 8001aee:	f004 fca3 	bl	8006438 <HAL_GPIO_WritePin>

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40020000 	.word	0x40020000

08001afc <main_e22_configurationMode>:
/**
 * @brief 	LoRa module config mode selection. when this mode is active, wireless communication is inactive.
 *
 */
void main_e22_configurationMode(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	//M0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <main_e22_configurationMode+0x20>)
 8001b08:	f004 fc96 	bl	8006438 <HAL_GPIO_WritePin>
	//M1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2102      	movs	r1, #2
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <main_e22_configurationMode+0x20>)
 8001b12:	f004 fc91 	bl	8006438 <HAL_GPIO_WritePin>
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40020000 	.word	0x40020000

08001b20 <lora_transmit>:

void lora_transmit(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0

	 const uint8_t packetSize = 4;
 8001b26:	2304      	movs	r3, #4
 8001b28:	72fb      	strb	r3, [r7, #11]

	 const uint8_t receiverAddress = 0x09;
 8001b2a:	2309      	movs	r3, #9
 8001b2c:	72bb      	strb	r3, [r7, #10]

	 const uint8_t ComChannel = 0x12;
 8001b2e:	2312      	movs	r3, #18
 8001b30:	727b      	strb	r3, [r7, #9]

	 uint8_t packet[5] = "ping";
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <lora_transmit+0x4c>)
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b3a:	6018      	str	r0, [r3, #0]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	7019      	strb	r1, [r3, #0]

	for(int i=0; i< 20; i++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e00a      	b.n	8001b5c <lora_transmit+0x3c>
	{

		e22_lora_transnit(packet, packetSize, receiverAddress, ComChannel);
 8001b46:	7afb      	ldrb	r3, [r7, #11]
 8001b48:	b299      	uxth	r1, r3
 8001b4a:	7abb      	ldrb	r3, [r7, #10]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	7a7b      	ldrb	r3, [r7, #9]
 8001b50:	1d38      	adds	r0, r7, #4
 8001b52:	f001 fbe9 	bl	8003328 <e22_lora_transnit>
	for(int i=0; i< 20; i++)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b13      	cmp	r3, #19
 8001b60:	ddf1      	ble.n	8001b46 <lora_transmit+0x26>

	}
}
 8001b62:	bf00      	nop
 8001b64:	bf00      	nop
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	0801f3b8 	.word	0x0801f3b8

08001b70 <initialization_procedure>:


int32_t initialization_procedure(){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0d2      	sub	sp, #328	; 0x148
 8001b74:	af02      	add	r7, sp, #8


	  int32_t fc_initialization_state;


	  UART_Transmit_String("Starting initialization process.. \r\n");
 8001b76:	482f      	ldr	r0, [pc, #188]	; (8001c34 <initialization_procedure+0xc4>)
 8001b78:	f7ff fdb0 	bl	80016dc <UART_Transmit_String>
	  int32_t imu_init_state = IMU_Initialization();
 8001b7c:	f000 fc08 	bl	8002390 <IMU_Initialization>
 8001b80:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	  char imu_buffer[100];

	  HAL_Delay(100);
 8001b84:	2064      	movs	r0, #100	; 0x64
 8001b86:	f003 fe81 	bl	800588c <HAL_Delay>

	  sprintf(imu_buffer, "IMU Initialization. Code : %ld  \r\n", imu_init_state);
 8001b8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b8e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001b92:	4929      	ldr	r1, [pc, #164]	; (8001c38 <initialization_procedure+0xc8>)
 8001b94:	4618      	mov	r0, r3
 8001b96:	f017 f9f9 	bl	8018f8c <siprintf>
	  UART_Transmit_String(imu_buffer);
 8001b9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fd9c 	bl	80016dc <UART_Transmit_String>

	  HAL_Delay(100);
 8001ba4:	2064      	movs	r0, #100	; 0x64
 8001ba6:	f003 fe71 	bl	800588c <HAL_Delay>

	  int32_t pressure_init_state = Pressure_Init();
 8001baa:	f000 fe13 	bl	80027d4 <Pressure_Init>
 8001bae:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	  char pressure_buffer[100];
	  sprintf(pressure_buffer, "Pressure Initialization. Code : %ld  \r\n", pressure_init_state);
 8001bb2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bb6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001bba:	4920      	ldr	r1, [pc, #128]	; (8001c3c <initialization_procedure+0xcc>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f017 f9e5 	bl	8018f8c <siprintf>
	  UART_Transmit_String(pressure_buffer);
 8001bc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fd88 	bl	80016dc <UART_Transmit_String>

	  HAL_Delay(100);
 8001bcc:	2064      	movs	r0, #100	; 0x64
 8001bce:	f003 fe5d 	bl	800588c <HAL_Delay>

	  int32_t magnetometer_init_state = QMC_init(&hi2c1, 200);
 8001bd2:	21c8      	movs	r1, #200	; 0xc8
 8001bd4:	481a      	ldr	r0, [pc, #104]	; (8001c40 <initialization_procedure+0xd0>)
 8001bd6:	f7ff fbb9 	bl	800134c <QMC_init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  char magneto_buffer[100];
	  sprintf(magneto_buffer, "Magnetometer Initialization. Code : %ld  \r\n", magnetometer_init_state);
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001be6:	4917      	ldr	r1, [pc, #92]	; (8001c44 <initialization_procedure+0xd4>)
 8001be8:	4618      	mov	r0, r3
 8001bea:	f017 f9cf 	bl	8018f8c <siprintf>
	  UART_Transmit_String(magneto_buffer);
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fd73 	bl	80016dc <UART_Transmit_String>

	  HAL_Delay(100);
 8001bf6:	2064      	movs	r0, #100	; 0x64
 8001bf8:	f003 fe48 	bl	800588c <HAL_Delay>


	  e22_lora_init(&huart6, HAL_UART_Transmit_DMA, HAL_UARTEx_ReceiveToIdle_DMA,main_lora_packet_receive,main_e22_configurationMode,main_e22_transceiverMode);
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <initialization_procedure+0xd8>)
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <initialization_procedure+0xdc>)
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <initialization_procedure+0xe0>)
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <initialization_procedure+0xe4>)
 8001c08:	4913      	ldr	r1, [pc, #76]	; (8001c58 <initialization_procedure+0xe8>)
 8001c0a:	4814      	ldr	r0, [pc, #80]	; (8001c5c <initialization_procedure+0xec>)
 8001c0c:	f001 fb54 	bl	80032b8 <e22_lora_init>





	  fc_initialization_state = imu_init_state + pressure_init_state + magnetometer_init_state;
 8001c10:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001c14:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c18:	4413      	add	r3, r2
 8001c1a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001c1e:	4413      	add	r3, r2
 8001c20:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	  return fc_initialization_state;
 8001c24:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	0801f3c0 	.word	0x0801f3c0
 8001c38:	0801f3e8 	.word	0x0801f3e8
 8001c3c:	0801f40c 	.word	0x0801f40c
 8001c40:	20004680 	.word	0x20004680
 8001c44:	0801f434 	.word	0x0801f434
 8001c48:	08001ad9 	.word	0x08001ad9
 8001c4c:	08001afd 	.word	0x08001afd
 8001c50:	08001a71 	.word	0x08001a71
 8001c54:	0800a119 	.word	0x0800a119
 8001c58:	0800a01d 	.word	0x0800a01d
 8001c5c:	20004944 	.word	0x20004944

08001c60 <sensors_readings>:


void sensors_readings() {
 8001c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c64:	b0d8      	sub	sp, #352	; 0x160
 8001c66:	af0a      	add	r7, sp, #40	; 0x28
    // Call each sensor function and receive the data structures


    IMUData imu_data = IMU_Data_Read();
 8001c68:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fc79 	bl	8002564 <IMU_Data_Read>
    TemperatureData temperature_data = Transmit_Temperature();
 8001c72:	f001 f9e7 	bl	8003044 <Transmit_Temperature>
 8001c76:	eef0 7a40 	vmov.f32	s15, s0
 8001c7a:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
    PressureTempData pressure_temp_data = Transmit_Pressure_Temp_Data();
 8001c7e:	f001 f91b 	bl	8002eb8 <Transmit_Pressure_Temp_Data>
 8001c82:	eeb0 7a40 	vmov.f32	s14, s0
 8001c86:	eef0 7a60 	vmov.f32	s15, s1
 8001c8a:	ed87 7a42 	vstr	s14, [r7, #264]	; 0x108
 8001c8e:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
    CompassData compass_data = Transmit_Compass_Data();
 8001c92:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fc6e 	bl	8001578 <Transmit_Compass_Data>

    // Print the data for each sensor and append to the file
    char buffer[200];

    // Format IMU data into the buffer
    sprintf(buffer,"Roll=%.3f° | Pitch=%.3f° | Yaw=%.3f \r\n",imu_data.roll, imu_data.pitch, compass_data.heading);
 8001c9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc5b 	bl	800055c <__aeabi_f2d>
 8001ca6:	4680      	mov	r8, r0
 8001ca8:	4689      	mov	r9, r1
 8001caa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fc54 	bl	800055c <__aeabi_f2d>
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	460d      	mov	r5, r1
 8001cb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fc4d 	bl	800055c <__aeabi_f2d>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	f107 0010 	add.w	r0, r7, #16
 8001cca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cce:	e9cd 4500 	strd	r4, r5, [sp]
 8001cd2:	4642      	mov	r2, r8
 8001cd4:	464b      	mov	r3, r9
 8001cd6:	494d      	ldr	r1, [pc, #308]	; (8001e0c <sensors_readings+0x1ac>)
 8001cd8:	f017 f958 	bl	8018f8c <siprintf>
    UART_Transmit_String(buffer);
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fcfb 	bl	80016dc <UART_Transmit_String>

	sprintf(buffer, "IMU Data: \n"
		"Acceleration (X=%.3f g, Y=%.3f g, Z=%.3f g), \r\n"
		"Angular Rate (X=%4.2f dps, Y=%4.2f dps, Z=%4.2f dps), \r\n", // Note the '\r' to return to the beginning of the line
		imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 8001ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	sprintf(buffer, "IMU Data: \n"
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc36 	bl	800055c <__aeabi_f2d>
 8001cf0:	e9c7 0102 	strd	r0, r1, [r7, #8]
		imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 8001cf4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
	sprintf(buffer, "IMU Data: \n"
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc2f 	bl	800055c <__aeabi_f2d>
 8001cfe:	4604      	mov	r4, r0
 8001d00:	460d      	mov	r5, r1
		imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 8001d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
	sprintf(buffer, "IMU Data: \n"
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fc28 	bl	800055c <__aeabi_f2d>
 8001d0c:	4680      	mov	r8, r0
 8001d0e:	4689      	mov	r9, r1
		imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z);
 8001d10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
	sprintf(buffer, "IMU Data: \n"
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fc21 	bl	800055c <__aeabi_f2d>
 8001d1a:	4682      	mov	sl, r0
 8001d1c:	468b      	mov	fp, r1
		imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z);
 8001d1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
	sprintf(buffer, "IMU Data: \n"
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fc1a 	bl	800055c <__aeabi_f2d>
 8001d28:	e9c7 0100 	strd	r0, r1, [r7]
		imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z);
 8001d2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
	sprintf(buffer, "IMU Data: \n"
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fc13 	bl	800055c <__aeabi_f2d>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	f107 0010 	add.w	r0, r7, #16
 8001d3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d42:	ed97 7b00 	vldr	d7, [r7]
 8001d46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001d4a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001d4e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d52:	e9cd 4500 	strd	r4, r5, [sp]
 8001d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d5a:	492d      	ldr	r1, [pc, #180]	; (8001e10 <sensors_readings+0x1b0>)
 8001d5c:	f017 f916 	bl	8018f8c <siprintf>
    UART_Transmit_String(buffer);
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fcb9 	bl	80016dc <UART_Transmit_String>
    append_data_to_file("data.txt", buffer);
 8001d6a:	f107 0310 	add.w	r3, r7, #16
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4828      	ldr	r0, [pc, #160]	; (8001e14 <sensors_readings+0x1b4>)
 8001d72:	f7ff fa77 	bl	8001264 <append_data_to_file>

    // Concatenate temperature data to buffer
    sprintf(buffer, "Temperature: %.2f°C \r\n", temperature_data.temperature_celsius/100);
 8001d76:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8001d7a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001e18 <sensors_readings+0x1b8>
 8001d7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d82:	ee16 0a90 	vmov	r0, s13
 8001d86:	f7fe fbe9 	bl	800055c <__aeabi_f2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	f107 0010 	add.w	r0, r7, #16
 8001d92:	4922      	ldr	r1, [pc, #136]	; (8001e1c <sensors_readings+0x1bc>)
 8001d94:	f017 f8fa 	bl	8018f8c <siprintf>
    UART_Transmit_String(buffer);
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fc9d 	bl	80016dc <UART_Transmit_String>
    append_data_to_file("data.txt", buffer);
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	4619      	mov	r1, r3
 8001da8:	481a      	ldr	r0, [pc, #104]	; (8001e14 <sensors_readings+0x1b4>)
 8001daa:	f7ff fa5b 	bl	8001264 <append_data_to_file>

    // Concatenate pressure and temperature data to buffer
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
            pressure_temp_data.pressure_hpa, pressure_temp_data.temperature_celsius);
 8001dae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbd2 	bl	800055c <__aeabi_f2d>
 8001db8:	4604      	mov	r4, r0
 8001dba:	460d      	mov	r5, r1
            pressure_temp_data.pressure_hpa, pressure_temp_data.temperature_celsius);
 8001dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbcb 	bl	800055c <__aeabi_f2d>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	f107 0010 	add.w	r0, r7, #16
 8001dce:	e9cd 2300 	strd	r2, r3, [sp]
 8001dd2:	4622      	mov	r2, r4
 8001dd4:	462b      	mov	r3, r5
 8001dd6:	4912      	ldr	r1, [pc, #72]	; (8001e20 <sensors_readings+0x1c0>)
 8001dd8:	f017 f8d8 	bl	8018f8c <siprintf>
    UART_Transmit_String(buffer);
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fc7b 	bl	80016dc <UART_Transmit_String>
    append_data_to_file("data.txt", buffer);
 8001de6:	f107 0310 	add.w	r3, r7, #16
 8001dea:	4619      	mov	r1, r3
 8001dec:	4809      	ldr	r0, [pc, #36]	; (8001e14 <sensors_readings+0x1b4>)
 8001dee:	f7ff fa39 	bl	8001264 <append_data_to_file>
    // Concatenate compass data to buffer
    //sprintf(buffer, "HEADING (YAW): %.1f\r\n", compass_data.heading);
    //UART_Transmit_String(buffer);
    //append_data_to_file("data.txt", buffer);

    UART_Transmit_String("------------------------------------------------------ \r\n");
 8001df2:	480c      	ldr	r0, [pc, #48]	; (8001e24 <sensors_readings+0x1c4>)
 8001df4:	f7ff fc72 	bl	80016dc <UART_Transmit_String>
    // Append the separator to the file
    append_data_to_file("data.txt", "------------------------------------------------------ \r\n");
 8001df8:	490a      	ldr	r1, [pc, #40]	; (8001e24 <sensors_readings+0x1c4>)
 8001dfa:	4806      	ldr	r0, [pc, #24]	; (8001e14 <sensors_readings+0x1b4>)
 8001dfc:	f7ff fa32 	bl	8001264 <append_data_to_file>
}
 8001e00:	bf00      	nop
 8001e02:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001e06:	46bd      	mov	sp, r7
 8001e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e0c:	0801f460 	.word	0x0801f460
 8001e10:	0801f48c 	.word	0x0801f48c
 8001e14:	0801f500 	.word	0x0801f500
 8001e18:	42c80000 	.word	0x42c80000
 8001e1c:	0801f50c 	.word	0x0801f50c
 8001e20:	0801f524 	.word	0x0801f524
 8001e24:	0801f554 	.word	0x0801f554

08001e28 <send_data_to_gcs>:




// Send data to Ground Control System Software
void send_data_to_gcs(int datatype, float value) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b0b6      	sub	sp, #216	; 0xd8
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	ed87 0a00 	vstr	s0, [r7]
	// Print the data for each sensor and append to the file
	char gcs_buffer[200];


    // Print data in the specified format
    sprintf(gcs_buffer, "%d, %.2f;\r\n",
 8001e34:	6838      	ldr	r0, [r7, #0]
 8001e36:	f7fe fb91 	bl	800055c <__aeabi_f2d>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	f107 0008 	add.w	r0, r7, #8
 8001e42:	e9cd 2300 	strd	r2, r3, [sp]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4907      	ldr	r1, [pc, #28]	; (8001e68 <send_data_to_gcs+0x40>)
 8001e4a:	f017 f89f 	bl	8018f8c <siprintf>
            datatype, value);

    UART_Transmit_String(gcs_buffer);
 8001e4e:	f107 0308 	add.w	r3, r7, #8
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fc42 	bl	80016dc <UART_Transmit_String>

    HAL_Delay(15);
 8001e58:	200f      	movs	r0, #15
 8001e5a:	f003 fd17 	bl	800588c <HAL_Delay>


}
 8001e5e:	bf00      	nop
 8001e60:	37d0      	adds	r7, #208	; 0xd0
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	0801f590 	.word	0x0801f590

08001e6c <sensors_readings_graphs>:

void sensors_readings_graphs() {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b098      	sub	sp, #96	; 0x60
 8001e70:	af00      	add	r7, sp, #0
    // Call each sensor function and receive the data structures
    IMUData imu_data = IMU_Data_Read();
 8001e72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fb74 	bl	8002564 <IMU_Data_Read>
    TemperatureData temperature_data = Transmit_Temperature();
 8001e7c:	f001 f8e2 	bl	8003044 <Transmit_Temperature>
 8001e80:	eef0 7a40 	vmov.f32	s15, s0
 8001e84:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    PressureTempData pressure_temp_data = Transmit_Pressure_Temp_Data();
 8001e88:	f001 f816 	bl	8002eb8 <Transmit_Pressure_Temp_Data>
 8001e8c:	eeb0 7a40 	vmov.f32	s14, s0
 8001e90:	eef0 7a60 	vmov.f32	s15, s1
 8001e94:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001e98:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    CompassData compass_data = Transmit_Compass_Data();
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fb6a 	bl	8001578 <Transmit_Compass_Data>


    // Print IMU data
    send_data_to_gcs(1, imu_data.acceleration_x);
 8001ea4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8001eac:	2001      	movs	r0, #1
 8001eae:	f7ff ffbb 	bl	8001e28 <send_data_to_gcs>
    send_data_to_gcs(2, imu_data.acceleration_y);
 8001eb2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eba:	2002      	movs	r0, #2
 8001ebc:	f7ff ffb4 	bl	8001e28 <send_data_to_gcs>
    send_data_to_gcs(3, imu_data.acceleration_z);
 8001ec0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f7ff ffad 	bl	8001e28 <send_data_to_gcs>
    send_data_to_gcs(4, imu_data.angular_rate_x);
 8001ece:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed6:	2004      	movs	r0, #4
 8001ed8:	f7ff ffa6 	bl	8001e28 <send_data_to_gcs>
    send_data_to_gcs(5, imu_data.angular_rate_y);
 8001edc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee4:	2005      	movs	r0, #5
 8001ee6:	f7ff ff9f 	bl	8001e28 <send_data_to_gcs>
    send_data_to_gcs(6, imu_data.angular_rate_z);
 8001eea:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001eee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef2:	2006      	movs	r0, #6
 8001ef4:	f7ff ff98 	bl	8001e28 <send_data_to_gcs>

    //Print Roll and Pitch data
    send_data_to_gcs(7, imu_data.roll);
 8001ef8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001efc:	eeb0 0a67 	vmov.f32	s0, s15
 8001f00:	2007      	movs	r0, #7
 8001f02:	f7ff ff91 	bl	8001e28 <send_data_to_gcs>
    send_data_to_gcs(8, imu_data.pitch);
 8001f06:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0e:	2008      	movs	r0, #8
 8001f10:	f7ff ff8a 	bl	8001e28 <send_data_to_gcs>

    // Print temperature data
    send_data_to_gcs(9, temperature_data.temperature_celsius / 100);
 8001f14:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f18:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001f5c <sensors_readings_graphs+0xf0>
 8001f1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f20:	eeb0 0a47 	vmov.f32	s0, s14
 8001f24:	2009      	movs	r0, #9
 8001f26:	f7ff ff7f 	bl	8001e28 <send_data_to_gcs>

    // Print pressure and temperature data
    send_data_to_gcs(10, pressure_temp_data.pressure_hpa);
 8001f2a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f32:	200a      	movs	r0, #10
 8001f34:	f7ff ff78 	bl	8001e28 <send_data_to_gcs>
    send_data_to_gcs(11, pressure_temp_data.temperature_celsius);
 8001f38:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f40:	200b      	movs	r0, #11
 8001f42:	f7ff ff71 	bl	8001e28 <send_data_to_gcs>

    // Print compass data
    send_data_to_gcs(12, compass_data.heading);
 8001f46:	edd7 7a00 	vldr	s15, [r7]
 8001f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4e:	200c      	movs	r0, #12
 8001f50:	f7ff ff6a 	bl	8001e28 <send_data_to_gcs>
}
 8001f54:	bf00      	nop
 8001f56:	3760      	adds	r7, #96	; 0x60
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	42c80000 	.word	0x42c80000

08001f60 <menu>:




// Modify the menu function to use the current state
void menu(char command) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
    int transmission_delay = 50; // In Milliseconds
 8001f6a:	2332      	movs	r3, #50	; 0x32
 8001f6c:	613b      	str	r3, [r7, #16]
    handleUserInput(command);
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fd19 	bl	80019a8 <handleUserInput>
    switch (currentMenuState) {
 8001f76:	4b5a      	ldr	r3, [pc, #360]	; (80020e0 <menu+0x180>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b07      	cmp	r3, #7
 8001f7c:	f200 8098 	bhi.w	80020b0 <menu+0x150>
 8001f80:	a201      	add	r2, pc, #4	; (adr r2, 8001f88 <menu+0x28>)
 8001f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f86:	bf00      	nop
 8001f88:	080020b1 	.word	0x080020b1
 8001f8c:	08001fa9 	.word	0x08001fa9
 8001f90:	08001fd1 	.word	0x08001fd1
 8001f94:	08002007 	.word	0x08002007
 8001f98:	0800200d 	.word	0x0800200d
 8001f9c:	08002013 	.word	0x08002013
 8001fa0:	08002057 	.word	0x08002057
 8001fa4:	0800209b 	.word	0x0800209b
        case MENU_MAIN:

            break;
        case MENU_INIT:
            if (currentMenuState == MENU_INIT) {
 8001fa8:	4b4d      	ldr	r3, [pc, #308]	; (80020e0 <menu+0x180>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	f040 8081 	bne.w	80020b4 <menu+0x154>
                uint32_t initialization_state = initialization_procedure();
 8001fb2:	f7ff fddd 	bl	8001b70 <initialization_procedure>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	60bb      	str	r3, [r7, #8]
                if (initialization_state != 0) {
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <menu+0x68>
                    UART_Transmit_String("Error initializing the Flight Controller.\r\n");
 8001fc0:	4848      	ldr	r0, [pc, #288]	; (80020e4 <menu+0x184>)
 8001fc2:	f7ff fb8b 	bl	80016dc <UART_Transmit_String>
                } else {
                    UART_Transmit_String("Flight Controller Initialized successfully!\r\n");
                }
            }
            break;
 8001fc6:	e075      	b.n	80020b4 <menu+0x154>
                    UART_Transmit_String("Flight Controller Initialized successfully!\r\n");
 8001fc8:	4847      	ldr	r0, [pc, #284]	; (80020e8 <menu+0x188>)
 8001fca:	f7ff fb87 	bl	80016dc <UART_Transmit_String>
            break;
 8001fce:	e071      	b.n	80020b4 <menu+0x154>
        case MENU_SENSOR_READINGS:
            if (currentMenuState == MENU_SENSOR_READINGS) {
 8001fd0:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <menu+0x180>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d16f      	bne.n	80020b8 <menu+0x158>
                uint32_t numIterations = getNumberOfIterations();
 8001fd8:	f000 f894 	bl	8002104 <getNumberOfIterations>
 8001fdc:	60f8      	str	r0, [r7, #12]
                UART_Transmit_String("\r\n");
 8001fde:	4843      	ldr	r0, [pc, #268]	; (80020ec <menu+0x18c>)
 8001fe0:	f7ff fb7c 	bl	80016dc <UART_Transmit_String>
                for (uint32_t i = 0; i < numIterations; i++) {
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	e008      	b.n	8001ffc <menu+0x9c>
                    sensors_readings();
 8001fea:	f7ff fe39 	bl	8001c60 <sensors_readings>
                    HAL_Delay(transmission_delay);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 fc4b 	bl	800588c <HAL_Delay>
                for (uint32_t i = 0; i < numIterations; i++) {
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d3f2      	bcc.n	8001fea <menu+0x8a>
                }
            }
            break;
 8002004:	e058      	b.n	80020b8 <menu+0x158>
        case MENU_LORA_SEND:
            lora_transmit();
 8002006:	f7ff fd8b 	bl	8001b20 <lora_transmit>
            break;
 800200a:	e05c      	b.n	80020c6 <menu+0x166>
        case MENU_LORA_RECEIVE:
            e22_lora_manager();
 800200c:	f001 f9d0 	bl	80033b0 <e22_lora_manager>
            break;
 8002010:	e059      	b.n	80020c6 <menu+0x166>
        case MENU_IGNITION:
            if (currentMenuState == MENU_IGNITION) {
 8002012:	4b33      	ldr	r3, [pc, #204]	; (80020e0 <menu+0x180>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b05      	cmp	r3, #5
 8002018:	d150      	bne.n	80020bc <menu+0x15c>
                UART_Transmit_String("\r\n");
 800201a:	4834      	ldr	r0, [pc, #208]	; (80020ec <menu+0x18c>)
 800201c:	f7ff fb5e 	bl	80016dc <UART_Transmit_String>
                UART_Transmit_String("Starting Firing test (Ignition)\r\n");
 8002020:	4833      	ldr	r0, [pc, #204]	; (80020f0 <menu+0x190>)
 8002022:	f7ff fb5b 	bl	80016dc <UART_Transmit_String>
                UART_Transmit_String("Arming the igniter...");
 8002026:	4833      	ldr	r0, [pc, #204]	; (80020f4 <menu+0x194>)
 8002028:	f7ff fb58 	bl	80016dc <UART_Transmit_String>
                pyro_arm(1);
 800202c:	2001      	movs	r0, #1
 800202e:	f000 ffab 	bl	8002f88 <pyro_arm>
                UART_Transmit_String("Armed\r\n");
 8002032:	4831      	ldr	r0, [pc, #196]	; (80020f8 <menu+0x198>)
 8002034:	f7ff fb52 	bl	80016dc <UART_Transmit_String>
                count_down_sequence_fire_test(5000);
 8002038:	f241 3088 	movw	r0, #5000	; 0x1388
 800203c:	f000 f8f8 	bl	8002230 <count_down_sequence_fire_test>
                pyro_fire(1);
 8002040:	2001      	movs	r0, #1
 8002042:	f000 ffbf 	bl	8002fc4 <pyro_fire>
                UART_Transmit_String("Test Completed Successfully!\r\n");
 8002046:	482d      	ldr	r0, [pc, #180]	; (80020fc <menu+0x19c>)
 8002048:	f7ff fb48 	bl	80016dc <UART_Transmit_String>
                HAL_Delay(1000);
 800204c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002050:	f003 fc1c 	bl	800588c <HAL_Delay>
            }
            break;
 8002054:	e032      	b.n	80020bc <menu+0x15c>
        case MENU_PARACHUTE:
            if (currentMenuState == MENU_PARACHUTE) {
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <menu+0x180>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b06      	cmp	r3, #6
 800205c:	d130      	bne.n	80020c0 <menu+0x160>
                UART_Transmit_String("\r\n");
 800205e:	4823      	ldr	r0, [pc, #140]	; (80020ec <menu+0x18c>)
 8002060:	f7ff fb3c 	bl	80016dc <UART_Transmit_String>
                UART_Transmit_String("Starting Firing test (Parachute)\r\n");
 8002064:	4826      	ldr	r0, [pc, #152]	; (8002100 <menu+0x1a0>)
 8002066:	f7ff fb39 	bl	80016dc <UART_Transmit_String>
                UART_Transmit_String("Arming the igniter...");
 800206a:	4822      	ldr	r0, [pc, #136]	; (80020f4 <menu+0x194>)
 800206c:	f7ff fb36 	bl	80016dc <UART_Transmit_String>
                pyro_arm(2);
 8002070:	2002      	movs	r0, #2
 8002072:	f000 ff89 	bl	8002f88 <pyro_arm>
                UART_Transmit_String("Armed\r\n");
 8002076:	4820      	ldr	r0, [pc, #128]	; (80020f8 <menu+0x198>)
 8002078:	f7ff fb30 	bl	80016dc <UART_Transmit_String>
                count_down_sequence_fire_test(5000);
 800207c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002080:	f000 f8d6 	bl	8002230 <count_down_sequence_fire_test>
                pyro_fire(2);
 8002084:	2002      	movs	r0, #2
 8002086:	f000 ff9d 	bl	8002fc4 <pyro_fire>
                UART_Transmit_String("Test Completed Successfully!\r\n");
 800208a:	481c      	ldr	r0, [pc, #112]	; (80020fc <menu+0x19c>)
 800208c:	f7ff fb26 	bl	80016dc <UART_Transmit_String>
                HAL_Delay(1000);
 8002090:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002094:	f003 fbfa 	bl	800588c <HAL_Delay>
            }
            break;
 8002098:	e012      	b.n	80020c0 <menu+0x160>
        case MENU_LAUNCH:
            if (currentMenuState == MENU_LAUNCH) {
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <menu+0x180>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b07      	cmp	r3, #7
 80020a0:	d110      	bne.n	80020c4 <menu+0x164>
                launch_procedure(10000);
 80020a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80020a6:	f000 f85b 	bl	8002160 <launch_procedure>
                while (1) {
                    sensors_readings_graphs();
 80020aa:	f7ff fedf 	bl	8001e6c <sensors_readings_graphs>
 80020ae:	e7fc      	b.n	80020aa <menu+0x14a>
                }

            }
            break;
        default:
            break;
 80020b0:	bf00      	nop
 80020b2:	e008      	b.n	80020c6 <menu+0x166>
            break;
 80020b4:	bf00      	nop
 80020b6:	e006      	b.n	80020c6 <menu+0x166>
            break;
 80020b8:	bf00      	nop
 80020ba:	e004      	b.n	80020c6 <menu+0x166>
            break;
 80020bc:	bf00      	nop
 80020be:	e002      	b.n	80020c6 <menu+0x166>
            break;
 80020c0:	bf00      	nop
 80020c2:	e000      	b.n	80020c6 <menu+0x166>
            break;
 80020c4:	bf00      	nop
    }

    currentMenuState = MENU_MAIN; // Return to the main menu
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <menu+0x180>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
    printMenu(currentMenuState);
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <menu+0x180>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fbf1 	bl	80018b8 <printMenu>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20002f48 	.word	0x20002f48
 80020e4:	0801f59c 	.word	0x0801f59c
 80020e8:	0801f5c8 	.word	0x0801f5c8
 80020ec:	0801f0e0 	.word	0x0801f0e0
 80020f0:	0801f5f8 	.word	0x0801f5f8
 80020f4:	0801f61c 	.word	0x0801f61c
 80020f8:	0801f634 	.word	0x0801f634
 80020fc:	0801f63c 	.word	0x0801f63c
 8002100:	0801f65c 	.word	0x0801f65c

08002104 <getNumberOfIterations>:



// Function to get the number of iterations from the user
uint32_t getNumberOfIterations()
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
    char inputBuffer[10];
    char inputChar;
    int bufferIndex = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]

    // Ask for the number of iterations
    UART_Transmit_String("\r\nEnter the number of iterations[Finish the integer with '$']: ");
 800210e:	4812      	ldr	r0, [pc, #72]	; (8002158 <getNumberOfIterations+0x54>)
 8002110:	f7ff fae4 	bl	80016dc <UART_Transmit_String>

    // Read user input character by character until we encounter '\n'
    do
    {
        HAL_UART_Receive(&huart1, (uint8_t *)&inputChar, sizeof(inputChar), HAL_MAX_DELAY);
 8002114:	1cf9      	adds	r1, r7, #3
 8002116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800211a:	2201      	movs	r2, #1
 800211c:	480f      	ldr	r0, [pc, #60]	; (800215c <getNumberOfIterations+0x58>)
 800211e:	f007 feda 	bl	8009ed6 <HAL_UART_Receive>
        inputBuffer[bufferIndex++] = inputChar;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	617a      	str	r2, [r7, #20]
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	3318      	adds	r3, #24
 800212c:	443b      	add	r3, r7
 800212e:	f803 2c14 	strb.w	r2, [r3, #-20]
    } while (inputChar != '$');
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	2b24      	cmp	r3, #36	; 0x24
 8002136:	d1ed      	bne.n	8002114 <getNumberOfIterations+0x10>

    // Null-terminate the input buffer
    inputBuffer[bufferIndex] = '\0';
 8002138:	1d3a      	adds	r2, r7, #4
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	4413      	add	r3, r2
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]

    // Convert the input string to an integer using atoi
    int userInput = atoi(inputBuffer);
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	4618      	mov	r0, r3
 8002146:	f016 f8a7 	bl	8018298 <atoi>
 800214a:	6138      	str	r0, [r7, #16]

    return userInput;
 800214c:	693b      	ldr	r3, [r7, #16]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	0801f680 	.word	0x0801f680
 800215c:	20004878 	.word	0x20004878

08002160 <launch_procedure>:


void launch_procedure(int countdown_duration_ms) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

	UART_Transmit_String("Launch procedure starting.... \r\n");
 8002168:	482d      	ldr	r0, [pc, #180]	; (8002220 <launch_procedure+0xc0>)
 800216a:	f7ff fab7 	bl	80016dc <UART_Transmit_String>

    int count_down_print = countdown_duration_ms / 1000;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <launch_procedure+0xc4>)
 8002172:	fb82 1203 	smull	r1, r2, r2, r3
 8002176:	1192      	asrs	r2, r2, #6
 8002178:	17db      	asrs	r3, r3, #31
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	61fb      	str	r3, [r7, #28]

    // Calculate the number of SysTick ticks required for the countdown
    uint32_t ticks_start = HAL_GetTick();
 800217e:	f003 fb79 	bl	8005874 <HAL_GetTick>
 8002182:	61b8      	str	r0, [r7, #24]
    uint32_t ticks_end = ticks_start + countdown_duration_ms;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4413      	add	r3, r2
 800218a:	617b      	str	r3, [r7, #20]

    char count_down_str[5]; // Buffer to store the countdown value as a string

    // Loop until the countdown duration is over
    while (HAL_GetTick() < ticks_end) {
 800218c:	e029      	b.n	80021e2 <launch_procedure+0x82>
    	if(count_down_print <= (countdown_duration_ms / 1000)) {
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a24      	ldr	r2, [pc, #144]	; (8002224 <launch_procedure+0xc4>)
 8002192:	fb82 1203 	smull	r1, r2, r2, r3
 8002196:	1192      	asrs	r2, r2, #6
 8002198:	17db      	asrs	r3, r3, #31
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	429a      	cmp	r2, r3
 80021a0:	dc1c      	bgt.n	80021dc <launch_procedure+0x7c>
        // Toggle the buzzer (set the GPIO pin high and then low with a delay to produce sound)
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80021a2:	2201      	movs	r2, #1
 80021a4:	2120      	movs	r1, #32
 80021a6:	4820      	ldr	r0, [pc, #128]	; (8002228 <launch_procedure+0xc8>)
 80021a8:	f004 f946 	bl	8006438 <HAL_GPIO_WritePin>

        // Convert the countdown value to a string
        sprintf(count_down_str, "%d...", count_down_print);
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	69fa      	ldr	r2, [r7, #28]
 80021b2:	491e      	ldr	r1, [pc, #120]	; (800222c <launch_procedure+0xcc>)
 80021b4:	4618      	mov	r0, r3
 80021b6:	f016 fee9 	bl	8018f8c <siprintf>

        // Transmit the countdown value via UART
        UART_Transmit_String(count_down_str);
 80021ba:	f107 030c 	add.w	r3, r7, #12
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fa8c 	bl	80016dc <UART_Transmit_String>

        HAL_Delay(200); // Delay for 200 milliseconds (adjust the value as needed)
 80021c4:	20c8      	movs	r0, #200	; 0xc8
 80021c6:	f003 fb61 	bl	800588c <HAL_Delay>

        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2120      	movs	r1, #32
 80021ce:	4816      	ldr	r0, [pc, #88]	; (8002228 <launch_procedure+0xc8>)
 80021d0:	f004 f932 	bl	8006438 <HAL_GPIO_WritePin>
        HAL_Delay(800); // Delay for 800 milliseconds (adjust the value as needed)
 80021d4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80021d8:	f003 fb58 	bl	800588c <HAL_Delay>
    	}
        count_down_print--;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	3b01      	subs	r3, #1
 80021e0:	61fb      	str	r3, [r7, #28]
    while (HAL_GetTick() < ticks_end) {
 80021e2:	f003 fb47 	bl	8005874 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d8cf      	bhi.n	800218e <launch_procedure+0x2e>
    }

    pyro_arm(1);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f000 feca 	bl	8002f88 <pyro_arm>
    // Enable the buzzer at the end of the countdown (Launching the test!!!)
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80021f4:	2201      	movs	r2, #1
 80021f6:	2120      	movs	r1, #32
 80021f8:	480b      	ldr	r0, [pc, #44]	; (8002228 <launch_procedure+0xc8>)
 80021fa:	f004 f91d 	bl	8006438 <HAL_GPIO_WritePin>
    pyro_fire(1);
 80021fe:	2001      	movs	r0, #1
 8002200:	f000 fee0 	bl	8002fc4 <pyro_fire>
    HAL_Delay(800);
 8002204:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002208:	f003 fb40 	bl	800588c <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800220c:	2200      	movs	r2, #0
 800220e:	2120      	movs	r1, #32
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <launch_procedure+0xc8>)
 8002212:	f004 f911 	bl	8006438 <HAL_GPIO_WritePin>

}
 8002216:	bf00      	nop
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	0801f6c0 	.word	0x0801f6c0
 8002224:	10624dd3 	.word	0x10624dd3
 8002228:	40020800 	.word	0x40020800
 800222c:	0801f6e4 	.word	0x0801f6e4

08002230 <count_down_sequence_fire_test>:


void count_down_sequence_fire_test(int countdown_duration_ms) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

    int count_down_print = countdown_duration_ms / 1000;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <count_down_sequence_fire_test+0x98>)
 800223c:	fb82 1203 	smull	r1, r2, r2, r3
 8002240:	1192      	asrs	r2, r2, #6
 8002242:	17db      	asrs	r3, r3, #31
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	61fb      	str	r3, [r7, #28]

    // Calculate the number of SysTick ticks required for the countdown
    uint32_t ticks_start = HAL_GetTick();
 8002248:	f003 fb14 	bl	8005874 <HAL_GetTick>
 800224c:	61b8      	str	r0, [r7, #24]
    uint32_t ticks_end = ticks_start + countdown_duration_ms;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4413      	add	r3, r2
 8002254:	617b      	str	r3, [r7, #20]

    char count_down_str[5]; // Buffer to store the countdown value as a string

    // Loop until the countdown duration is over
    while (HAL_GetTick() < ticks_end) {
 8002256:	e01f      	b.n	8002298 <count_down_sequence_fire_test+0x68>
        // Toggle the buzzer (set the GPIO pin high and then low with a delay to produce sound)
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002258:	2201      	movs	r2, #1
 800225a:	2120      	movs	r1, #32
 800225c:	481b      	ldr	r0, [pc, #108]	; (80022cc <count_down_sequence_fire_test+0x9c>)
 800225e:	f004 f8eb 	bl	8006438 <HAL_GPIO_WritePin>

        // Convert the countdown value to a string
        sprintf(count_down_str, "%d...", count_down_print);
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	4919      	ldr	r1, [pc, #100]	; (80022d0 <count_down_sequence_fire_test+0xa0>)
 800226a:	4618      	mov	r0, r3
 800226c:	f016 fe8e 	bl	8018f8c <siprintf>

        // Transmit the countdown value via UART
        UART_Transmit_String(count_down_str);
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fa31 	bl	80016dc <UART_Transmit_String>

        HAL_Delay(200); // Delay for 200 milliseconds (adjust the value as needed)
 800227a:	20c8      	movs	r0, #200	; 0xc8
 800227c:	f003 fb06 	bl	800588c <HAL_Delay>

        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002280:	2200      	movs	r2, #0
 8002282:	2120      	movs	r1, #32
 8002284:	4811      	ldr	r0, [pc, #68]	; (80022cc <count_down_sequence_fire_test+0x9c>)
 8002286:	f004 f8d7 	bl	8006438 <HAL_GPIO_WritePin>
        HAL_Delay(800); // Delay for 800 milliseconds (adjust the value as needed)
 800228a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800228e:	f003 fafd 	bl	800588c <HAL_Delay>
        count_down_print--;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3b01      	subs	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
    while (HAL_GetTick() < ticks_end) {
 8002298:	f003 faec 	bl	8005874 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d8d9      	bhi.n	8002258 <count_down_sequence_fire_test+0x28>
    }

    // Enable the buzzer at the end of the countdown (Launching the test!!!)
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80022a4:	2201      	movs	r2, #1
 80022a6:	2120      	movs	r1, #32
 80022a8:	4808      	ldr	r0, [pc, #32]	; (80022cc <count_down_sequence_fire_test+0x9c>)
 80022aa:	f004 f8c5 	bl	8006438 <HAL_GPIO_WritePin>
    HAL_Delay(800);
 80022ae:	f44f 7048 	mov.w	r0, #800	; 0x320
 80022b2:	f003 faeb 	bl	800588c <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2120      	movs	r1, #32
 80022ba:	4804      	ldr	r0, [pc, #16]	; (80022cc <count_down_sequence_fire_test+0x9c>)
 80022bc:	f004 f8bc 	bl	8006438 <HAL_GPIO_WritePin>

}
 80022c0:	bf00      	nop
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	10624dd3 	.word	0x10624dd3
 80022cc:	40020800 	.word	0x40020800
 80022d0:	0801f6e4 	.word	0x0801f6e4

080022d4 <UART_Transmit_Messages_IMU>:
static uint8_t mfxstate[STATE_SIZE];


// TRASMIT MESSAGES VIA UART FUNCTION
void UART_Transmit_Messages_IMU(const char* str)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7fd ffc7 	bl	8000270 <strlen>
 80022e2:	4603      	mov	r3, r0
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <UART_Transmit_Messages_IMU+0x28>)
 80022ee:	f007 fd60 	bl	8009db2 <HAL_UART_Transmit>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20004878 	.word	0x20004878

08002300 <platform_read>:

// SENSOR READING FUNCTION DEFINITION
int32_t platform_read(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af04      	add	r7, sp, #16
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	461a      	mov	r2, r3
 800230c:	460b      	mov	r3, r1
 800230e:	72fb      	strb	r3, [r7, #11]
 8002310:	4613      	mov	r3, r2
 8002312:	813b      	strh	r3, [r7, #8]
  // Perform the I2C read operation using HAL_I2C_Mem_Read
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8002314:	7afb      	ldrb	r3, [r7, #11]
 8002316:	b29a      	uxth	r2, r3
 8002318:	2364      	movs	r3, #100	; 0x64
 800231a:	9302      	str	r3, [sp, #8]
 800231c:	893b      	ldrh	r3, [r7, #8]
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2301      	movs	r3, #1
 8002326:	21d6      	movs	r1, #214	; 0xd6
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f004 fe25 	bl	8006f78 <HAL_I2C_Mem_Read>
 800232e:	4603      	mov	r3, r0
 8002330:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <platform_read+0x3c>
 8002338:	2300      	movs	r3, #0
 800233a:	e001      	b.n	8002340 <platform_read+0x40>
 800233c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <platform_write>:

// SENSOR WRITING FUNCTION DEFINITION
int32_t platform_write(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af04      	add	r7, sp, #16
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	461a      	mov	r2, r3
 8002354:	460b      	mov	r3, r1
 8002356:	72fb      	strb	r3, [r7, #11]
 8002358:	4613      	mov	r3, r2
 800235a:	813b      	strh	r3, [r7, #8]
  // Perform the I2C write operation using HAL_I2C_Mem_Write
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 800235c:	7afb      	ldrb	r3, [r7, #11]
 800235e:	b29a      	uxth	r2, r3
 8002360:	2364      	movs	r3, #100	; 0x64
 8002362:	9302      	str	r3, [sp, #8]
 8002364:	893b      	ldrh	r3, [r7, #8]
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2301      	movs	r3, #1
 800236e:	21d6      	movs	r1, #214	; 0xd6
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f004 fd07 	bl	8006d84 <HAL_I2C_Mem_Write>
 8002376:	4603      	mov	r3, r0
 8002378:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 800237a:	7dfb      	ldrb	r3, [r7, #23]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <platform_write+0x3c>
 8002380:	2300      	movs	r3, #0
 8002382:	e001      	b.n	8002388 <platform_write+0x40>
 8002384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <IMU_Initialization>:


// IMU INITIALIZATION FUNCTION
int32_t IMU_Initialization(){
 8002390:	b580      	push	{r7, lr}
 8002392:	b0a4      	sub	sp, #144	; 0x90
 8002394:	af00      	add	r7, sp, #0


	/* Initialize MEMS driver interface */
	device.write_reg = platform_write;
 8002396:	4b65      	ldr	r3, [pc, #404]	; (800252c <IMU_Initialization+0x19c>)
 8002398:	4a65      	ldr	r2, [pc, #404]	; (8002530 <IMU_Initialization+0x1a0>)
 800239a:	601a      	str	r2, [r3, #0]
	device.read_reg = platform_read;
 800239c:	4b63      	ldr	r3, [pc, #396]	; (800252c <IMU_Initialization+0x19c>)
 800239e:	4a65      	ldr	r2, [pc, #404]	; (8002534 <IMU_Initialization+0x1a4>)
 80023a0:	605a      	str	r2, [r3, #4]
	device.handle = &hi2c1;
 80023a2:	4b62      	ldr	r3, [pc, #392]	; (800252c <IMU_Initialization+0x19c>)
 80023a4:	4a64      	ldr	r2, [pc, #400]	; (8002538 <IMU_Initialization+0x1a8>)
 80023a6:	60da      	str	r2, [r3, #12]

	//char init_state_buffer[200];

	/* Check device ID */
	whoamI = 0;
 80023a8:	4b64      	ldr	r3, [pc, #400]	; (800253c <IMU_Initialization+0x1ac>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
	lsm6ds3tr_c_device_id_get(&device, &whoamI);
 80023ae:	4963      	ldr	r1, [pc, #396]	; (800253c <IMU_Initialization+0x1ac>)
 80023b0:	485e      	ldr	r0, [pc, #376]	; (800252c <IMU_Initialization+0x19c>)
 80023b2:	f001 fef1 	bl	8004198 <lsm6ds3tr_c_device_id_get>



	if ( whoamI != LSM6DS3TR_C_ID ) {
 80023b6:	4b61      	ldr	r3, [pc, #388]	; (800253c <IMU_Initialization+0x1ac>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b6a      	cmp	r3, #106	; 0x6a
 80023bc:	d011      	beq.n	80023e2 <IMU_Initialization+0x52>
		char temp_buf[100];
		// Use sprintf to format the device ID into the buffer
		sprintf(temp_buf, "Device ID: 0x%02X | ", whoamI);
 80023be:	4b5f      	ldr	r3, [pc, #380]	; (800253c <IMU_Initialization+0x1ac>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	495e      	ldr	r1, [pc, #376]	; (8002540 <IMU_Initialization+0x1b0>)
 80023c8:	4618      	mov	r0, r3
 80023ca:	f016 fddf 	bl	8018f8c <siprintf>
		UART_Transmit_Messages_IMU("ERROR: IMU MALFUNCTION | ");
 80023ce:	485d      	ldr	r0, [pc, #372]	; (8002544 <IMU_Initialization+0x1b4>)
 80023d0:	f7ff ff80 	bl	80022d4 <UART_Transmit_Messages_IMU>
		UART_Transmit_Messages_IMU(temp_buf);
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff ff7c 	bl	80022d4 <UART_Transmit_Messages_IMU>
		return -1;
 80023dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023e0:	e0a0      	b.n	8002524 <IMU_Initialization+0x194>
	}



	/* Restore default configuration */
	lsm6ds3tr_c_reset_set(&device, PROPERTY_ENABLE);
 80023e2:	2101      	movs	r1, #1
 80023e4:	4851      	ldr	r0, [pc, #324]	; (800252c <IMU_Initialization+0x19c>)
 80023e6:	f001 fee8 	bl	80041ba <lsm6ds3tr_c_reset_set>

	do {
    lsm6ds3tr_c_reset_get(&device, &rst);
 80023ea:	4957      	ldr	r1, [pc, #348]	; (8002548 <IMU_Initialization+0x1b8>)
 80023ec:	484f      	ldr	r0, [pc, #316]	; (800252c <IMU_Initialization+0x19c>)
 80023ee:	f001 ff0a 	bl	8004206 <lsm6ds3tr_c_reset_get>
	} while (rst);
 80023f2:	4b55      	ldr	r3, [pc, #340]	; (8002548 <IMU_Initialization+0x1b8>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f7      	bne.n	80023ea <IMU_Initialization+0x5a>

	int32_t int_set,xl_fs,xl_dr,gy_fs,gy_dr,bdu,xl_fas,xl_lp,gy_bps,state;
	//int32_t dev_round_status,dev_round_mode;

	//Enabling I2C Communication
	int_set = lsm6ds3tr_c_i2c_interface_set(&device,LSM6DS3TR_C_I2C_ENABLE);
 80023fa:	2100      	movs	r1, #0
 80023fc:	484b      	ldr	r0, [pc, #300]	; (800252c <IMU_Initialization+0x19c>)
 80023fe:	f001 ffe6 	bl	80043ce <lsm6ds3tr_c_i2c_interface_set>
 8002402:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	  /* Enable Block Data Update */
	  bdu = lsm6ds3tr_c_block_data_update_set(&device, PROPERTY_ENABLE);
 8002406:	2101      	movs	r1, #1
 8002408:	4848      	ldr	r0, [pc, #288]	; (800252c <IMU_Initialization+0x19c>)
 800240a:	f001 fe09 	bl	8004020 <lsm6ds3tr_c_block_data_update_set>
 800240e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  /* Set Output Data Rate */
	  xl_dr= lsm6ds3tr_c_xl_data_rate_set(&device, LSM6DS3TR_C_XL_ODR_833Hz);
 8002412:	2107      	movs	r1, #7
 8002414:	4845      	ldr	r0, [pc, #276]	; (800252c <IMU_Initialization+0x19c>)
 8002416:	f001 fd91 	bl	8003f3c <lsm6ds3tr_c_xl_data_rate_set>
 800241a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  gy_dr= lsm6ds3tr_c_gy_data_rate_set(&device, LSM6DS3TR_C_GY_ODR_833Hz);
 800241e:	2107      	movs	r1, #7
 8002420:	4842      	ldr	r0, [pc, #264]	; (800252c <IMU_Initialization+0x19c>)
 8002422:	f001 fdd7 	bl	8003fd4 <lsm6ds3tr_c_gy_data_rate_set>
 8002426:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	  /* Set full scale */
	  xl_fs= lsm6ds3tr_c_xl_full_scale_set(&device, LSM6DS3TR_C_2g);
 800242a:	2100      	movs	r1, #0
 800242c:	483f      	ldr	r0, [pc, #252]	; (800252c <IMU_Initialization+0x19c>)
 800242e:	f001 fd5f 	bl	8003ef0 <lsm6ds3tr_c_xl_full_scale_set>
 8002432:	67f8      	str	r0, [r7, #124]	; 0x7c
	  gy_fs= lsm6ds3tr_c_gy_full_scale_set(&device, LSM6DS3TR_C_500dps);
 8002434:	2102      	movs	r1, #2
 8002436:	483d      	ldr	r0, [pc, #244]	; (800252c <IMU_Initialization+0x19c>)
 8002438:	f001 fda6 	bl	8003f88 <lsm6ds3tr_c_gy_full_scale_set>
 800243c:	67b8      	str	r0, [r7, #120]	; 0x78


	  /* Configure filtering chain(No aux interface) */
	  /* Accelerometer - analog filter */
	  xl_fas= lsm6ds3tr_c_xl_filter_analog_set(&device,
 800243e:	2101      	movs	r1, #1
 8002440:	483a      	ldr	r0, [pc, #232]	; (800252c <IMU_Initialization+0x19c>)
 8002442:	f001 fef9 	bl	8004238 <lsm6ds3tr_c_xl_filter_analog_set>
 8002446:	6778      	str	r0, [r7, #116]	; 0x74
	                                   LSM6DS3TR_C_XL_ANA_BW_400Hz);
	  /* Accelerometer - LPF1 path ( LPF2 not used )*/
	  //xl_lp = lsm6ds3tr_c_xl_lp1_bandwidth_set(&device, LSM6DS3TR_C_XL_LP1_ODR_DIV_4);
	  /* Accelerometer - LPF1 + LPF2 path */
	  xl_lp= lsm6ds3tr_c_xl_lp2_bandwidth_set(&device,LSM6DS3TR_C_XL_LOW_NOISE_LP_ODR_DIV_100);
 8002448:	2111      	movs	r1, #17
 800244a:	4838      	ldr	r0, [pc, #224]	; (800252c <IMU_Initialization+0x19c>)
 800244c:	f001 ff1a 	bl	8004284 <lsm6ds3tr_c_xl_lp2_bandwidth_set>
 8002450:	6738      	str	r0, [r7, #112]	; 0x70
	  /* Accelerometer - High Pass / Slope path */
	  //lsm6ds3tr_c_xl_reference_mode_set(&device, PROPERTY_DISABLE);
	  //lsm6ds3tr_c_xl_hp_bandwidth_set(&device, LSM6DS3TR_C_XL_HP_ODR_DIV_100);
	  /* Gyroscope - filtering chain */
	  gy_bps= lsm6ds3tr_c_gy_band_pass_set(&device,
 8002452:	21a8      	movs	r1, #168	; 0xa8
 8002454:	4835      	ldr	r0, [pc, #212]	; (800252c <IMU_Initialization+0x19c>)
 8002456:	f001 ff4c 	bl	80042f2 <lsm6ds3tr_c_gy_band_pass_set>
 800245a:	66f8      	str	r0, [r7, #108]	; 0x6c

	  //dev_round_status = lsm6ds3tr_c_rounding_on_status_set(&device,PROPERTY_ENABLE);
	  //dev_round_mode= lsm6ds3tr_c_rounding_mode_set(&device,LSM6DS3TR_C_ROUND_GY_XL);


		state = int_set + xl_fs + xl_dr + gy_fs + gy_dr + bdu + xl_fas + xl_lp + gy_bps;
 800245c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002460:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002462:	441a      	add	r2, r3
 8002464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002468:	441a      	add	r2, r3
 800246a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800246c:	441a      	add	r2, r3
 800246e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002472:	441a      	add	r2, r3
 8002474:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002478:	441a      	add	r2, r3
 800247a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800247c:	441a      	add	r2, r3
 800247e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002480:	4413      	add	r3, r2
 8002482:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002484:	4413      	add	r3, r2
 8002486:	66bb      	str	r3, [r7, #104]	; 0x68

		//sprintf(init_state_buffer,"int_set: %ld | xl_fs: %ld | xl_dr: %ld | gy_fs: %ld | gy_dr: %ld | bdu: %ld | xl_fas: %ld | xl_lp: %ld | gy_bps: %ld \r\n",int_set,xl_fs, xl_dr, gy_fs, gy_dr, bdu, xl_fas, xl_lp, gy_bps);
		//UART_Transmit_Messages_IMU(init_state_buffer);

		UART_Transmit_Messages_IMU("Kalman Filter initialization..!");
 8002488:	4830      	ldr	r0, [pc, #192]	; (800254c <IMU_Initialization+0x1bc>)
 800248a:	f7ff ff23 	bl	80022d4 <UART_Transmit_Messages_IMU>

		  MotionFX_initialize((MFXState_t *)mfxstate);
 800248e:	4830      	ldr	r0, [pc, #192]	; (8002550 <IMU_Initialization+0x1c0>)
 8002490:	f015 fc1e 	bl	8017cd0 <MotionFX_initialize>



		  MotionFX_getKnobs(mfxstate, ipKnobs);
 8002494:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <IMU_Initialization+0x1c4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	482d      	ldr	r0, [pc, #180]	; (8002550 <IMU_Initialization+0x1c0>)
 800249c:	f015 fd1e 	bl	8017edc <MotionFX_getKnobs>



		  ipKnobs->acc_orientation[0] = 'u';
 80024a0:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <IMU_Initialization+0x1c4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2275      	movs	r2, #117	; 0x75
 80024a6:	775a      	strb	r2, [r3, #29]
		  ipKnobs->acc_orientation[1] = 'w';
 80024a8:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <IMU_Initialization+0x1c4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2277      	movs	r2, #119	; 0x77
 80024ae:	779a      	strb	r2, [r3, #30]
		  ipKnobs->acc_orientation[2] = 'n';
 80024b0:	4b28      	ldr	r3, [pc, #160]	; (8002554 <IMU_Initialization+0x1c4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	226e      	movs	r2, #110	; 0x6e
 80024b6:	77da      	strb	r2, [r3, #31]
		  ipKnobs->gyro_orientation[0] = 'u';
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <IMU_Initialization+0x1c4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2275      	movs	r2, #117	; 0x75
 80024be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		  ipKnobs->gyro_orientation[1] = 'w';
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <IMU_Initialization+0x1c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2277      	movs	r2, #119	; 0x77
 80024c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		  ipKnobs->gyro_orientation[2] = 'n';
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <IMU_Initialization+0x1c4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	226e      	movs	r2, #110	; 0x6e
 80024d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 80024d6:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <IMU_Initialization+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <IMU_Initialization+0x1c8>)
 80024dc:	615a      	str	r2, [r3, #20]
		  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <IMU_Initialization+0x1c4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1e      	ldr	r2, [pc, #120]	; (800255c <IMU_Initialization+0x1cc>)
 80024e4:	619a      	str	r2, [r3, #24]

		  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 80024e6:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <IMU_Initialization+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		  ipKnobs->LMode = 1;
 80024f0:	4b18      	ldr	r3, [pc, #96]	; (8002554 <IMU_Initialization+0x1c4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2201      	movs	r2, #1
 80024f6:	731a      	strb	r2, [r3, #12]
		  ipKnobs->modx = DECIMATION;
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <IMU_Initialization+0x1c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2201      	movs	r2, #1
 80024fe:	771a      	strb	r2, [r3, #28]

		  MotionFX_setKnobs(mfxstate, ipKnobs);
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <IMU_Initialization+0x1c4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4619      	mov	r1, r3
 8002506:	4812      	ldr	r0, [pc, #72]	; (8002550 <IMU_Initialization+0x1c0>)
 8002508:	f015 fc9c 	bl	8017e44 <MotionFX_setKnobs>
		  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 800250c:	2101      	movs	r1, #1
 800250e:	4810      	ldr	r0, [pc, #64]	; (8002550 <IMU_Initialization+0x1c0>)
 8002510:	f015 fd22 	bl	8017f58 <MotionFX_enable_6X>
		  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002514:	2100      	movs	r1, #0
 8002516:	480e      	ldr	r0, [pc, #56]	; (8002550 <IMU_Initialization+0x1c0>)
 8002518:	f015 fd3e 	bl	8017f98 <MotionFX_enable_9X>

		  UART_Transmit_Messages_IMU("Done! \r\n");
 800251c:	4810      	ldr	r0, [pc, #64]	; (8002560 <IMU_Initialization+0x1d0>)
 800251e:	f7ff fed9 	bl	80022d4 <UART_Transmit_Messages_IMU>
		return state;
 8002522:	6ebb      	ldr	r3, [r7, #104]	; 0x68


}
 8002524:	4618      	mov	r0, r3
 8002526:	3790      	adds	r7, #144	; 0x90
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20002f5c 	.word	0x20002f5c
 8002530:	08002349 	.word	0x08002349
 8002534:	08002301 	.word	0x08002301
 8002538:	20004680 	.word	0x20004680
 800253c:	20002f5a 	.word	0x20002f5a
 8002540:	0801f7cc 	.word	0x0801f7cc
 8002544:	0801f7e4 	.word	0x0801f7e4
 8002548:	20002f5b 	.word	0x20002f5b
 800254c:	0801f800 	.word	0x0801f800
 8002550:	20002fc0 	.word	0x20002fc0
 8002554:	20000000 	.word	0x20000000
 8002558:	3ac88a48 	.word	0x3ac88a48
 800255c:	3b83126f 	.word	0x3b83126f
 8002560:	0801f820 	.word	0x0801f820

08002564 <IMU_Data_Read>:


//IMU DATA READING FUNCTION
IMUData IMU_Data_Read(){
 8002564:	b5b0      	push	{r4, r5, r7, lr}
 8002566:	b0a0      	sub	sp, #128	; 0x80
 8002568:	af02      	add	r7, sp, #8
 800256a:	6078      	str	r0, [r7, #4]

	int32_t reading_state, gyro_reading, acc_reading;
    MFX_input_t data_in;
    MFX_output_t data_out;
    float delta_time = TIME_ODR_104Hz;
 800256c:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <IMU_Data_Read+0x1b4>)
 800256e:	60bb      	str	r3, [r7, #8]
	//char test[100];


	//ACCELEROMETER RAW DATA READING
	acc_reading = lsm6ds3tr_c_acceleration_raw_get(&device,data_raw_acceleration);
 8002570:	496a      	ldr	r1, [pc, #424]	; (800271c <IMU_Data_Read+0x1b8>)
 8002572:	486b      	ldr	r0, [pc, #428]	; (8002720 <IMU_Data_Read+0x1bc>)
 8002574:	f001 fdc5 	bl	8004102 <lsm6ds3tr_c_acceleration_raw_get>
 8002578:	6778      	str	r0, [r7, #116]	; 0x74
	//GYROSCOPE
	gyro_reading = lsm6ds3tr_c_angular_rate_raw_get(&device,data_raw_angular_rate);
 800257a:	496a      	ldr	r1, [pc, #424]	; (8002724 <IMU_Data_Read+0x1c0>)
 800257c:	4868      	ldr	r0, [pc, #416]	; (8002720 <IMU_Data_Read+0x1bc>)
 800257e:	f001 fd75 	bl	800406c <lsm6ds3tr_c_angular_rate_raw_get>
 8002582:	6738      	str	r0, [r7, #112]	; 0x70
	// COMPASS
    //CompassData compass_data = Transmit_Compass_Data();


	reading_state = gyro_reading + acc_reading; // If 0 -> Success | Otherwise error code
 8002584:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002588:	4413      	add	r3, r2
 800258a:	66fb      	str	r3, [r7, #108]	; 0x6c



	  if (reading_state == 0){
 800258c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 8094 	bne.w	80026bc <IMU_Data_Read+0x158>

			data_in.acc[0] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[0]) * FROM_MG_TO_G);
 8002594:	4b61      	ldr	r3, [pc, #388]	; (800271c <IMU_Data_Read+0x1b8>)
 8002596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259a:	4618      	mov	r0, r3
 800259c:	f001 fc78 	bl	8003e90 <lsm6ds3tr_c_from_fs2g_to_mg>
 80025a0:	eef0 7a40 	vmov.f32	s15, s0
 80025a4:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002728 <IMU_Data_Read+0x1c4>
 80025a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ac:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			data_in.acc[1] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[1]) * FROM_MG_TO_G);
 80025b0:	4b5a      	ldr	r3, [pc, #360]	; (800271c <IMU_Data_Read+0x1b8>)
 80025b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f001 fc6a 	bl	8003e90 <lsm6ds3tr_c_from_fs2g_to_mg>
 80025bc:	eef0 7a40 	vmov.f32	s15, s0
 80025c0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002728 <IMU_Data_Read+0x1c4>
 80025c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			data_in.acc[2] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[2]) * FROM_MG_TO_G);
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <IMU_Data_Read+0x1b8>)
 80025ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f001 fc5c 	bl	8003e90 <lsm6ds3tr_c_from_fs2g_to_mg>
 80025d8:	eef0 7a40 	vmov.f32	s15, s0
 80025dc:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002728 <IMU_Data_Read+0x1c4>
 80025e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c


			data_in.gyro[0] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[0]) * FROM_MDPS_TO_DPS) ;
 80025e8:	4b4e      	ldr	r3, [pc, #312]	; (8002724 <IMU_Data_Read+0x1c0>)
 80025ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 fc66 	bl	8003ec0 <lsm6ds3tr_c_from_fs500dps_to_mdps>
 80025f4:	eef0 7a40 	vmov.f32	s15, s0
 80025f8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002728 <IMU_Data_Read+0x1c4>
 80025fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002600:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			data_in.gyro[1] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[1]) * FROM_MDPS_TO_DPS) ;
 8002604:	4b47      	ldr	r3, [pc, #284]	; (8002724 <IMU_Data_Read+0x1c0>)
 8002606:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800260a:	4618      	mov	r0, r3
 800260c:	f001 fc58 	bl	8003ec0 <lsm6ds3tr_c_from_fs500dps_to_mdps>
 8002610:	eef0 7a40 	vmov.f32	s15, s0
 8002614:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002728 <IMU_Data_Read+0x1c4>
 8002618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800261c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			data_in.gyro[2] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[2]) * FROM_MDPS_TO_DPS) ;
 8002620:	4b40      	ldr	r3, [pc, #256]	; (8002724 <IMU_Data_Read+0x1c0>)
 8002622:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002626:	4618      	mov	r0, r3
 8002628:	f001 fc4a 	bl	8003ec0 <lsm6ds3tr_c_from_fs500dps_to_mdps>
 800262c:	eef0 7a40 	vmov.f32	s15, s0
 8002630:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002728 <IMU_Data_Read+0x1c4>
 8002634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002638:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


		    /* Don't set mag values because we use only acc and gyro */
		    data_in.mag[0] = 0.0;
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	64bb      	str	r3, [r7, #72]	; 0x48
		    data_in.mag[1] = 0.0;
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	64fb      	str	r3, [r7, #76]	; 0x4c
		    data_in.mag[2] = 0.0;
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	653b      	str	r3, [r7, #80]	; 0x50



	      MotionFX_propagate(mfxstate, &data_out, &data_in, &delta_time);
 800264e:	f107 0308 	add.w	r3, r7, #8
 8002652:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002656:	f107 010c 	add.w	r1, r7, #12
 800265a:	4834      	ldr	r0, [pc, #208]	; (800272c <IMU_Data_Read+0x1c8>)
 800265c:	f015 fccc 	bl	8017ff8 <MotionFX_propagate>
	      MotionFX_update(mfxstate, &data_out, &data_in, &delta_time, NULL);
 8002660:	f107 0308 	add.w	r3, r7, #8
 8002664:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002668:	f107 010c 	add.w	r1, r7, #12
 800266c:	2000      	movs	r0, #0
 800266e:	9000      	str	r0, [sp, #0]
 8002670:	482e      	ldr	r0, [pc, #184]	; (800272c <IMU_Data_Read+0x1c8>)
 8002672:	f015 fcb1 	bl	8017fd8 <MotionFX_update>

	        // Update imu_data
	        imu_data.acceleration_x = data_out.gravity[0];
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	4a2d      	ldr	r2, [pc, #180]	; (8002730 <IMU_Data_Read+0x1cc>)
 800267a:	6013      	str	r3, [r2, #0]
	        imu_data.acceleration_y = data_out.gravity[1];
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	4a2c      	ldr	r2, [pc, #176]	; (8002730 <IMU_Data_Read+0x1cc>)
 8002680:	6053      	str	r3, [r2, #4]
	        imu_data.acceleration_z = data_out.gravity[2];
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <IMU_Data_Read+0x1cc>)
 8002686:	6093      	str	r3, [r2, #8]
	        imu_data.angular_rate_x = data_out.linear_acceleration[0];
 8002688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268a:	4a29      	ldr	r2, [pc, #164]	; (8002730 <IMU_Data_Read+0x1cc>)
 800268c:	60d3      	str	r3, [r2, #12]
	        imu_data.angular_rate_y = data_out.linear_acceleration[1];
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <IMU_Data_Read+0x1cc>)
 8002692:	6113      	str	r3, [r2, #16]
	        imu_data.angular_rate_z = data_out.linear_acceleration[2];
 8002694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002696:	4a26      	ldr	r2, [pc, #152]	; (8002730 <IMU_Data_Read+0x1cc>)
 8002698:	6153      	str	r3, [r2, #20]
	        //imu_data.yaw = (float)compass_data.heading;
	        imu_data.pitch = data_out.rotation[1];
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4a24      	ldr	r2, [pc, #144]	; (8002730 <IMU_Data_Read+0x1cc>)
 800269e:	6213      	str	r3, [r2, #32]
	        imu_data.roll = data_out.rotation[2];
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	4a23      	ldr	r2, [pc, #140]	; (8002730 <IMU_Data_Read+0x1cc>)
 80026a4:	61d3      	str	r3, [r2, #28]


	        return imu_data;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a21      	ldr	r2, [pc, #132]	; (8002730 <IMU_Data_Read+0x1cc>)
 80026aa:	461c      	mov	r4, r3
 80026ac:	4615      	mov	r5, r2
 80026ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026b6:	682b      	ldr	r3, [r5, #0]
 80026b8:	6023      	str	r3, [r4, #0]
 80026ba:	e029      	b.n	8002710 <IMU_Data_Read+0x1ac>
	  }	else	{

		  //Error State
		  imu_data.acceleration_x = 0.0;
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <IMU_Data_Read+0x1cc>)
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
		  imu_data.acceleration_y = 0.0;
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <IMU_Data_Read+0x1cc>)
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	605a      	str	r2, [r3, #4]
		  imu_data.acceleration_z = 0.0;
 80026cc:	4b18      	ldr	r3, [pc, #96]	; (8002730 <IMU_Data_Read+0x1cc>)
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
		  imu_data.angular_rate_x = 0.0;
 80026d4:	4b16      	ldr	r3, [pc, #88]	; (8002730 <IMU_Data_Read+0x1cc>)
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	60da      	str	r2, [r3, #12]
		  imu_data.angular_rate_y = 0.0;
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <IMU_Data_Read+0x1cc>)
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
		  imu_data.angular_rate_z = 0.0;
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <IMU_Data_Read+0x1cc>)
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
		  imu_data.pitch = 0.0;
 80026ec:	4b10      	ldr	r3, [pc, #64]	; (8002730 <IMU_Data_Read+0x1cc>)
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
		  imu_data.roll = 0.0;
 80026f4:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <IMU_Data_Read+0x1cc>)
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	61da      	str	r2, [r3, #28]

	        return imu_data;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0c      	ldr	r2, [pc, #48]	; (8002730 <IMU_Data_Read+0x1cc>)
 8002700:	461c      	mov	r4, r3
 8002702:	4615      	mov	r5, r2
 8002704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800270a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	6023      	str	r3, [r4, #0]
		}

}
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	3778      	adds	r7, #120	; 0x78
 8002714:	46bd      	mov	sp, r7
 8002716:	bdb0      	pop	{r4, r5, r7, pc}
 8002718:	3c1d4952 	.word	0x3c1d4952
 800271c:	20002f4c 	.word	0x20002f4c
 8002720:	20002f5c 	.word	0x20002f5c
 8002724:	20002f54 	.word	0x20002f54
 8002728:	3a83126f 	.word	0x3a83126f
 800272c:	20002fc0 	.word	0x20002fc0
 8002730:	20002f6c 	.word	0x20002f6c

08002734 <dps310_i2c_read>:
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}



int8_t dps310_i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af04      	add	r7, sp, #16
 800273a:	603a      	str	r2, [r7, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
 8002742:	460b      	mov	r3, r1
 8002744:	71bb      	strb	r3, [r7, #6]
 8002746:	4613      	mov	r3, r2
 8002748:	80bb      	strh	r3, [r7, #4]


	  // Perform the I2C read operation using HAL_I2C_Mem_Read
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	b299      	uxth	r1, r3
 800274e:	79bb      	ldrb	r3, [r7, #6]
 8002750:	b29a      	uxth	r2, r3
 8002752:	2364      	movs	r3, #100	; 0x64
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	88bb      	ldrh	r3, [r7, #4]
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	2301      	movs	r3, #1
 8002760:	4807      	ldr	r0, [pc, #28]	; (8002780 <dps310_i2c_read+0x4c>)
 8002762:	f004 fc09 	bl	8006f78 <HAL_I2C_Mem_Read>
 8002766:	4603      	mov	r3, r0
 8002768:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <dps310_i2c_read+0x40>
 8002770:	2300      	movs	r3, #0
 8002772:	e001      	b.n	8002778 <dps310_i2c_read+0x44>
 8002774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff


}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20004680 	.word	0x20004680

08002784 <dps310_i2c_write>:

int8_t dps310_i2c_write(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af04      	add	r7, sp, #16
 800278a:	603a      	str	r2, [r7, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
 8002792:	460b      	mov	r3, r1
 8002794:	71bb      	strb	r3, [r7, #6]
 8002796:	4613      	mov	r3, r2
 8002798:	80bb      	strh	r3, [r7, #4]

	  // Perform the I2C write operation using HAL_I2C_Mem_Write
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	b299      	uxth	r1, r3
 800279e:	79bb      	ldrb	r3, [r7, #6]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	2364      	movs	r3, #100	; 0x64
 80027a4:	9302      	str	r3, [sp, #8]
 80027a6:	88bb      	ldrh	r3, [r7, #4]
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2301      	movs	r3, #1
 80027b0:	4807      	ldr	r0, [pc, #28]	; (80027d0 <dps310_i2c_write+0x4c>)
 80027b2:	f004 fae7 	bl	8006d84 <HAL_I2C_Mem_Write>
 80027b6:	4603      	mov	r3, r0
 80027b8:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <dps310_i2c_write+0x40>
 80027c0:	2300      	movs	r3, #0
 80027c2:	e001      	b.n	80027c8 <dps310_i2c_write+0x44>
 80027c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20004680 	.word	0x20004680

080027d4 <Pressure_Init>:



int32_t Pressure_Init(){
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0

    int16_t ret;

    ret = product_id_check();
 80027da:	f000 fb21 	bl	8002e20 <product_id_check>
 80027de:	4603      	mov	r3, r0
 80027e0:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 80027e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <Pressure_Init+0x1c>
 80027ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ee:	e011      	b.n	8002814 <Pressure_Init+0x40>

    dps310_configure_temperature(
 80027f0:	2000      	movs	r0, #0
 80027f2:	f000 f8b1 	bl	8002958 <dps310_configure_temperature>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_TMP_CFG_TMP_PRC_SINGLE);

    dps310_configure_pressure(
 80027f6:	2001      	movs	r0, #1
 80027f8:	f000 f8da 	bl	80029b0 <dps310_configure_pressure>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_PRS_CFG_PM_PRC_2_TIMES);

    ret = read_coefs();
 80027fc:	f000 f80e 	bl	800281c <read_coefs>
 8002800:	4603      	mov	r3, r0
 8002802:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 8002804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <Pressure_Init+0x3e>
 800280c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002810:	e000      	b.n	8002814 <Pressure_Init+0x40>

    return 0;
 8002812:	2300      	movs	r3, #0

}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <read_coefs>:

int16_t dps310_reset() {
    return write_byte_to_reg(DPS310_RESET_REG, DPS310_RESET_SOFT_RST_VALUE);
}

int16_t read_coefs() {
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[18];

    ret = wait_for_reg_value(
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	2008      	movs	r0, #8
 8002828:	f000 fa3e 	bl	8002ca8 <wait_for_reg_value>
 800282c:	4603      	mov	r3, r0
 800282e:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE);

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_COEF_REG, buff, 18);
 8002830:	1d3a      	adds	r2, r7, #4
 8002832:	2312      	movs	r3, #18
 8002834:	2110      	movs	r1, #16
 8002836:	20ee      	movs	r0, #238	; 0xee
 8002838:	f7ff ff7c 	bl	8002734 <dps310_i2c_read>
 800283c:	4603      	mov	r3, r0
 800283e:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8002840:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <read_coefs+0x32>
 8002848:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800284c:	e07d      	b.n	800294a <read_coefs+0x12e>

    g_coefs.c0 = get_two_complement_of(
            ((uint16_t) buff[0] << 4u) | (((uint16_t) buff[1] >> 4u) & 0x0Fu),
 800284e:	793b      	ldrb	r3, [r7, #4]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	461a      	mov	r2, r3
 8002854:	797b      	ldrb	r3, [r7, #5]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	4313      	orrs	r3, r2
    g_coefs.c0 = get_two_complement_of(
 8002860:	210c      	movs	r1, #12
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fab8 	bl	8002dd8 <get_two_complement_of>
 8002868:	4603      	mov	r3, r0
 800286a:	b21a      	sxth	r2, r3
 800286c:	4b39      	ldr	r3, [pc, #228]	; (8002954 <read_coefs+0x138>)
 800286e:	801a      	strh	r2, [r3, #0]
            12);

    g_coefs.c1 = get_two_complement_of(
            ((((uint16_t) buff[1] & 0x0Fu) << 8u) | (uint16_t) buff[2]),
 8002870:	797b      	ldrb	r3, [r7, #5]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002878:	79ba      	ldrb	r2, [r7, #6]
 800287a:	4313      	orrs	r3, r2
    g_coefs.c1 = get_two_complement_of(
 800287c:	210c      	movs	r1, #12
 800287e:	4618      	mov	r0, r3
 8002880:	f000 faaa 	bl	8002dd8 <get_two_complement_of>
 8002884:	4603      	mov	r3, r0
 8002886:	b21a      	sxth	r2, r3
 8002888:	4b32      	ldr	r3, [pc, #200]	; (8002954 <read_coefs+0x138>)
 800288a:	805a      	strh	r2, [r3, #2]
            12);

    g_coefs.c00 = get_two_complement_of(
            ((uint32_t) buff[3] << 12u) | ((uint32_t) buff[4] << 4u) | (((uint32_t) buff[5] >> 4u) & 0x0Fu),
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	031a      	lsls	r2, r3, #12
 8002890:	7a3b      	ldrb	r3, [r7, #8]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	431a      	orrs	r2, r3
 8002896:	7a7b      	ldrb	r3, [r7, #9]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f003 030f 	and.w	r3, r3, #15
    g_coefs.c00 = get_two_complement_of(
 80028a0:	4313      	orrs	r3, r2
 80028a2:	2114      	movs	r1, #20
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fa97 	bl	8002dd8 <get_two_complement_of>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4a29      	ldr	r2, [pc, #164]	; (8002954 <read_coefs+0x138>)
 80028ae:	6053      	str	r3, [r2, #4]
            20);

    g_coefs.c10 = get_two_complement_of(
            (((uint32_t) buff[5] & 0x0Fu) << 16u) | ((uint32_t) buff[6] << 8u) | (uint32_t) buff[7],
 80028b0:	7a7b      	ldrb	r3, [r7, #9]
 80028b2:	041b      	lsls	r3, r3, #16
 80028b4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80028b8:	7abb      	ldrb	r3, [r7, #10]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	4313      	orrs	r3, r2
 80028be:	7afa      	ldrb	r2, [r7, #11]
    g_coefs.c10 = get_two_complement_of(
 80028c0:	4313      	orrs	r3, r2
 80028c2:	2114      	movs	r1, #20
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fa87 	bl	8002dd8 <get_two_complement_of>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4a21      	ldr	r2, [pc, #132]	; (8002954 <read_coefs+0x138>)
 80028ce:	6093      	str	r3, [r2, #8]
            20);

    g_coefs.c01 = get_two_complement_of(
            ((uint16_t) buff[8] << 8u) | (uint16_t) buff[9],
 80028d0:	7b3b      	ldrb	r3, [r7, #12]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	7b7a      	ldrb	r2, [r7, #13]
 80028d6:	4313      	orrs	r3, r2
    g_coefs.c01 = get_two_complement_of(
 80028d8:	2110      	movs	r1, #16
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fa7c 	bl	8002dd8 <get_two_complement_of>
 80028e0:	4603      	mov	r3, r0
 80028e2:	b21a      	sxth	r2, r3
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <read_coefs+0x138>)
 80028e6:	819a      	strh	r2, [r3, #12]
            16);

    g_coefs.c11 = get_two_complement_of(
            ((uint16_t) buff[10] << 8u) | (uint16_t) buff[11],
 80028e8:	7bbb      	ldrb	r3, [r7, #14]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	4313      	orrs	r3, r2
    g_coefs.c11 = get_two_complement_of(
 80028f0:	2110      	movs	r1, #16
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fa70 	bl	8002dd8 <get_two_complement_of>
 80028f8:	4603      	mov	r3, r0
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	4b15      	ldr	r3, [pc, #84]	; (8002954 <read_coefs+0x138>)
 80028fe:	81da      	strh	r2, [r3, #14]
            16);

    g_coefs.c20 = get_two_complement_of(
            ((uint16_t) buff[12] << 8u) | (uint16_t) buff[13],
 8002900:	7c3b      	ldrb	r3, [r7, #16]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	7c7a      	ldrb	r2, [r7, #17]
 8002906:	4313      	orrs	r3, r2
    g_coefs.c20 = get_two_complement_of(
 8002908:	2110      	movs	r1, #16
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fa64 	bl	8002dd8 <get_two_complement_of>
 8002910:	4603      	mov	r3, r0
 8002912:	b21a      	sxth	r2, r3
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <read_coefs+0x138>)
 8002916:	821a      	strh	r2, [r3, #16]
            16);

    g_coefs.c21 = get_two_complement_of(
            ((uint16_t) buff[14] << 8u) | (uint16_t) buff[15],
 8002918:	7cbb      	ldrb	r3, [r7, #18]
 800291a:	021b      	lsls	r3, r3, #8
 800291c:	7cfa      	ldrb	r2, [r7, #19]
 800291e:	4313      	orrs	r3, r2
    g_coefs.c21 = get_two_complement_of(
 8002920:	2110      	movs	r1, #16
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fa58 	bl	8002dd8 <get_two_complement_of>
 8002928:	4603      	mov	r3, r0
 800292a:	b21a      	sxth	r2, r3
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <read_coefs+0x138>)
 800292e:	825a      	strh	r2, [r3, #18]
            16);

    g_coefs.c30 = get_two_complement_of(
            ((uint16_t) buff[16] << 8u) | (uint16_t) buff[17],
 8002930:	7d3b      	ldrb	r3, [r7, #20]
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	7d7a      	ldrb	r2, [r7, #21]
 8002936:	4313      	orrs	r3, r2
    g_coefs.c30 = get_two_complement_of(
 8002938:	2110      	movs	r1, #16
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fa4c 	bl	8002dd8 <get_two_complement_of>
 8002940:	4603      	mov	r3, r0
 8002942:	b21a      	sxth	r2, r3
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <read_coefs+0x138>)
 8002946:	829a      	strh	r2, [r3, #20]
            16);

    return DPS310_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20003940 	.word	0x20003940

08002958 <dps310_configure_temperature>:

int16_t dps310_configure_temperature(uint8_t data) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
    int16_t ret;
    uint8_t temperature_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	737b      	strb	r3, [r7, #13]

    ret = get_temperature_sensor(&temperature_sensor);
 8002966:	f107 030d 	add.w	r3, r7, #13
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fa7e 	bl	8002e6c <get_temperature_sensor>
 8002970:	4603      	mov	r3, r0
 8002972:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 8002974:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <dps310_configure_temperature+0x2a>
 800297c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002980:	e00f      	b.n	80029a2 <dps310_configure_temperature+0x4a>

    g_temperature_rate = DPS310_TMP_CFG_TMP_RATE_MASK & data;
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <dps310_configure_temperature+0x54>)
 800298c:	701a      	strb	r2, [r3, #0]
    data |= temperature_sensor;
 800298e:	7b7a      	ldrb	r2, [r7, #13]
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	4313      	orrs	r3, r2
 8002994:	71fb      	strb	r3, [r7, #7]

    return write_byte_to_reg(DPS310_TMP_CFG_REG, data);
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4619      	mov	r1, r3
 800299a:	2007      	movs	r0, #7
 800299c:	f000 f820 	bl	80029e0 <write_byte_to_reg>
 80029a0:	4603      	mov	r3, r0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20003959 	.word	0x20003959

080029b0 <dps310_configure_pressure>:

int16_t dps310_configure_pressure(uint8_t data) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
    g_pressure_rate = DPS310_PRS_CFG_PM_RATE_MASK & data;
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <dps310_configure_pressure+0x2c>)
 80029c4:	701a      	strb	r2, [r3, #0]
    return write_byte_to_reg(DPS310_PRS_CFG_REG, data);
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	4619      	mov	r1, r3
 80029ca:	2006      	movs	r0, #6
 80029cc:	f000 f808 	bl	80029e0 <write_byte_to_reg>
 80029d0:	4603      	mov	r3, r0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20003958 	.word	0x20003958

080029e0 <write_byte_to_reg>:

int16_t write_byte_to_reg(uint8_t reg_addr, uint8_t data) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	460a      	mov	r2, r1
 80029ea:	71fb      	strb	r3, [r7, #7]
 80029ec:	4613      	mov	r3, r2
 80029ee:	71bb      	strb	r3, [r7, #6]
    int16_t ret;
    uint8_t buff[1];

    buff[0] = data;
 80029f0:	79bb      	ldrb	r3, [r7, #6]
 80029f2:	733b      	strb	r3, [r7, #12]
    ret = dps310_i2c_write(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 80029f4:	f107 020c 	add.w	r2, r7, #12
 80029f8:	79f9      	ldrb	r1, [r7, #7]
 80029fa:	2301      	movs	r3, #1
 80029fc:	20ee      	movs	r0, #238	; 0xee
 80029fe:	f7ff fec1 	bl	8002784 <dps310_i2c_write>
 8002a02:	4603      	mov	r3, r0
 8002a04:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 8002a06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <write_byte_to_reg+0x34>
 8002a0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a12:	e000      	b.n	8002a16 <write_byte_to_reg+0x36>

    return DPS310_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <read_temperature>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t read_temperature(float *p_temperature) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_TMP);
 8002a28:	2102      	movs	r1, #2
 8002a2a:	2008      	movs	r0, #8
 8002a2c:	f7ff ffd8 	bl	80029e0 <write_byte_to_reg>
 8002a30:	4603      	mov	r3, r0
 8002a32:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8002a34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <read_temperature+0x22>
 8002a3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a40:	e066      	b.n	8002b10 <read_temperature+0xf0>

    ret = wait_for_reg_value(
 8002a42:	2267      	movs	r2, #103	; 0x67
 8002a44:	2160      	movs	r1, #96	; 0x60
 8002a46:	2008      	movs	r0, #8
 8002a48:	f000 f92e 	bl	8002ca8 <wait_for_reg_value>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 8002a50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <read_temperature+0x3e>
 8002a58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a5c:	e058      	b.n	8002b10 <read_temperature+0xf0>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_B2_REG, buff, 3);
 8002a5e:	f107 020c 	add.w	r2, r7, #12
 8002a62:	2303      	movs	r3, #3
 8002a64:	2103      	movs	r1, #3
 8002a66:	20ee      	movs	r0, #238	; 0xee
 8002a68:	f7ff fe64 	bl	8002734 <dps310_i2c_read>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8002a70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <read_temperature+0x5e>
 8002a78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a7c:	e048      	b.n	8002b10 <read_temperature+0xf0>

    int32_t temp_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 8002a7e:	7b3b      	ldrb	r3, [r7, #12]
 8002a80:	041a      	lsls	r2, r3, #16
 8002a82:	7b7b      	ldrb	r3, [r7, #13]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	4313      	orrs	r3, r2
 8002a88:	7bba      	ldrb	r2, [r7, #14]
    int32_t temp_raw = get_two_complement_of(
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	2118      	movs	r1, #24
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f9a2 	bl	8002dd8 <get_two_complement_of>
 8002a94:	6138      	str	r0, [r7, #16]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_temperature_rate, &factor);
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <read_temperature+0xf8>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	f107 0208 	add.w	r2, r7, #8
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 f940 	bl	8002d26 <get_scale_factor_for>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8002aaa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <read_temperature+0x98>
 8002ab2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ab6:	e02b      	b.n	8002b10 <read_temperature+0xf0>

    g_last_temp_raw_sc = (float) temp_raw / factor;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	ee07 3a90 	vmov	s15, r3
 8002ac8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad0:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <read_temperature+0xfc>)
 8002ad2:	edc3 7a00 	vstr	s15, [r3]
    *p_temperature = (float) g_coefs.c0 * 0.5f + (float) g_coefs.c1 * g_last_temp_raw_sc;
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <read_temperature+0x100>)
 8002ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ae8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <read_temperature+0x100>)
 8002aee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <read_temperature+0xfc>)
 8002afc:	edd3 7a00 	vldr	s15, [r3]
 8002b00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20003959 	.word	0x20003959
 8002b1c:	2000395c 	.word	0x2000395c
 8002b20:	20003940 	.word	0x20003940

08002b24 <read_pressure>:

int16_t read_pressure(float *p_pressure) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_PRS);
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	2008      	movs	r0, #8
 8002b30:	f7ff ff56 	bl	80029e0 <write_byte_to_reg>
 8002b34:	4603      	mov	r3, r0
 8002b36:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 8002b38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <read_pressure+0x22>
 8002b40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b44:	e0a4      	b.n	8002c90 <read_pressure+0x16c>

    ret = wait_for_reg_value(
 8002b46:	2257      	movs	r2, #87	; 0x57
 8002b48:	2150      	movs	r1, #80	; 0x50
 8002b4a:	2008      	movs	r0, #8
 8002b4c:	f000 f8ac 	bl	8002ca8 <wait_for_reg_value>
 8002b50:	4603      	mov	r3, r0
 8002b52:	83fb      	strh	r3, [r7, #30]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 8002b54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <read_pressure+0x3e>
 8002b5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b60:	e096      	b.n	8002c90 <read_pressure+0x16c>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PSR_B2_REG, buff, 3);
 8002b62:	f107 0210 	add.w	r2, r7, #16
 8002b66:	2303      	movs	r3, #3
 8002b68:	2100      	movs	r1, #0
 8002b6a:	20ee      	movs	r0, #238	; 0xee
 8002b6c:	f7ff fde2 	bl	8002734 <dps310_i2c_read>
 8002b70:	4603      	mov	r3, r0
 8002b72:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 8002b74:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <read_pressure+0x5e>
 8002b7c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b80:	e086      	b.n	8002c90 <read_pressure+0x16c>

    int32_t pressure_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 8002b82:	7c3b      	ldrb	r3, [r7, #16]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	7c7b      	ldrb	r3, [r7, #17]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	7cba      	ldrb	r2, [r7, #18]
    int32_t pressure_raw = get_two_complement_of(
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	2118      	movs	r1, #24
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f920 	bl	8002dd8 <get_two_complement_of>
 8002b98:	61b8      	str	r0, [r7, #24]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_pressure_rate, &factor);
 8002b9a:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <read_pressure+0x174>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	f107 020c 	add.w	r2, r7, #12
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 f8be 	bl	8002d26 <get_scale_factor_for>
 8002baa:	4603      	mov	r3, r0
 8002bac:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 8002bae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <read_pressure+0x98>
 8002bb6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002bba:	e069      	b.n	8002c90 <read_pressure+0x16c>

    float pressure_raw_sc = (float) pressure_raw / factor;
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bd4:	edc7 7a05 	vstr	s15, [r7, #20]

    // *0.01f -> Convert compensated pressure measurement from Pa to hPa
    *p_pressure = (g_coefs.c00 +
 8002bd8:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <read_pressure+0x178>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	ee07 3a90 	vmov	s15, r3
 8002be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 8002be4:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <read_pressure+0x178>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bf0:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <read_pressure+0x178>)
 8002bf2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002bfe:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <read_pressure+0x178>)
 8002c00:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002c04:	ee07 3a90 	vmov	s15, r3
 8002c08:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002c0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c10:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c14:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c18:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c20:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c24:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c28:	ee66 7aa7 	vmul.f32	s15, s13, s15
    *p_pressure = (g_coefs.c00 +
 8002c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <read_pressure+0x178>)
 8002c32:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c3e:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <read_pressure+0x178>)
 8002c40:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <read_pressure+0x178>)
 8002c4e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002c52:	ee07 3a90 	vmov	s15, r3
 8002c56:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002c5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c5e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c62:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c6e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <read_pressure+0x17c>)
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 8002c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 8002c80:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002ca4 <read_pressure+0x180>
 8002c84:	ee67 7a87 	vmul.f32	s15, s15, s14
    *p_pressure = (g_coefs.c00 +
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20003958 	.word	0x20003958
 8002c9c:	20003940 	.word	0x20003940
 8002ca0:	2000395c 	.word	0x2000395c
 8002ca4:	3c23d70a 	.word	0x3c23d70a

08002ca8 <wait_for_reg_value>:

int16_t wait_for_reg_value(uint8_t reg_addr, uint8_t reg_value, uint8_t mask) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	71bb      	strb	r3, [r7, #6]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	717b      	strb	r3, [r7, #5]
    int16_t ret;
    uint8_t buff[1];
    uint16_t attempts = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	81fb      	strh	r3, [r7, #14]

    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 8002cbe:	e024      	b.n	8002d0a <wait_for_reg_value+0x62>
        attempts++;
 8002cc0:	89fb      	ldrh	r3, [r7, #14]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	81fb      	strh	r3, [r7, #14]

        ret = dps310_i2c_read(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 8002cc6:	f107 0208 	add.w	r2, r7, #8
 8002cca:	79f9      	ldrb	r1, [r7, #7]
 8002ccc:	2301      	movs	r3, #1
 8002cce:	20ee      	movs	r0, #238	; 0xee
 8002cd0:	f7ff fd30 	bl	8002734 <dps310_i2c_read>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	81bb      	strh	r3, [r7, #12]
        if (ret != DPS310_OK) return ret;
 8002cd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <wait_for_reg_value+0x3e>
 8002ce0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ce4:	e01b      	b.n	8002d1e <wait_for_reg_value+0x76>

        bool b_is_expected_value = ((buff[0] & mask) == reg_value);
 8002ce6:	7a3a      	ldrb	r2, [r7, #8]
 8002ce8:	797b      	ldrb	r3, [r7, #5]
 8002cea:	4013      	ands	r3, r2
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	79ba      	ldrb	r2, [r7, #6]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	72fb      	strb	r3, [r7, #11]
        if (b_is_expected_value) return DPS310_OK;
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <wait_for_reg_value+0x5c>
 8002d00:	2300      	movs	r3, #0
 8002d02:	e00c      	b.n	8002d1e <wait_for_reg_value+0x76>

        HAL_Delay(10);
 8002d04:	200a      	movs	r0, #10
 8002d06:	f002 fdc1 	bl	800588c <HAL_Delay>
    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 8002d0a:	89fb      	ldrh	r3, [r7, #14]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d9d7      	bls.n	8002cc0 <wait_for_reg_value+0x18>
    }

    if (attempts == DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 8002d10:	89fb      	ldrh	r3, [r7, #14]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d102      	bne.n	8002d1c <wait_for_reg_value+0x74>
        return DPS310_WAIT_TIMEOUT_ERROR;
 8002d16:	f06f 0303 	mvn.w	r3, #3
 8002d1a:	e000      	b.n	8002d1e <wait_for_reg_value+0x76>
    }

    return DPS310_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <get_scale_factor_for>:

int16_t get_scale_factor_for(uint8_t rate, uint32_t *p_factor) {
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	6039      	str	r1, [r7, #0]
 8002d30:	71fb      	strb	r3, [r7, #7]
    uint32_t ret = DPS310_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]

    switch (rate) {
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	2b70      	cmp	r3, #112	; 0x70
 8002d3a:	d03d      	beq.n	8002db8 <get_scale_factor_for+0x92>
 8002d3c:	2b70      	cmp	r3, #112	; 0x70
 8002d3e:	dc40      	bgt.n	8002dc2 <get_scale_factor_for+0x9c>
 8002d40:	2b60      	cmp	r3, #96	; 0x60
 8002d42:	d034      	beq.n	8002dae <get_scale_factor_for+0x88>
 8002d44:	2b60      	cmp	r3, #96	; 0x60
 8002d46:	dc3c      	bgt.n	8002dc2 <get_scale_factor_for+0x9c>
 8002d48:	2b50      	cmp	r3, #80	; 0x50
 8002d4a:	d02b      	beq.n	8002da4 <get_scale_factor_for+0x7e>
 8002d4c:	2b50      	cmp	r3, #80	; 0x50
 8002d4e:	dc38      	bgt.n	8002dc2 <get_scale_factor_for+0x9c>
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	d022      	beq.n	8002d9a <get_scale_factor_for+0x74>
 8002d54:	2b40      	cmp	r3, #64	; 0x40
 8002d56:	dc34      	bgt.n	8002dc2 <get_scale_factor_for+0x9c>
 8002d58:	2b30      	cmp	r3, #48	; 0x30
 8002d5a:	d019      	beq.n	8002d90 <get_scale_factor_for+0x6a>
 8002d5c:	2b30      	cmp	r3, #48	; 0x30
 8002d5e:	dc30      	bgt.n	8002dc2 <get_scale_factor_for+0x9c>
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d010      	beq.n	8002d86 <get_scale_factor_for+0x60>
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	dc2c      	bgt.n	8002dc2 <get_scale_factor_for+0x9c>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <get_scale_factor_for+0x4c>
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d005      	beq.n	8002d7c <get_scale_factor_for+0x56>
 8002d70:	e027      	b.n	8002dc2 <get_scale_factor_for+0x9c>
        case DPS310_CFG_RATE_1_MEAS:
            *p_factor = 524288;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d78:	601a      	str	r2, [r3, #0]
            break;
 8002d7a:	e025      	b.n	8002dc8 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_2_MEAS:
            *p_factor = 1572864;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8002d82:	601a      	str	r2, [r3, #0]
            break;
 8002d84:	e020      	b.n	8002dc8 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_4_MEAS:
            *p_factor = 3670016;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8002d8c:	601a      	str	r2, [r3, #0]
            break;
 8002d8e:	e01b      	b.n	8002dc8 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_8_MEAS:
            *p_factor = 7864320;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002d96:	601a      	str	r2, [r3, #0]
            break;
 8002d98:	e016      	b.n	8002dc8 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_16_MEAS:
            *p_factor = 253952;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 8002da0:	601a      	str	r2, [r3, #0]
            break;
 8002da2:	e011      	b.n	8002dc8 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_32_MEAS:
            *p_factor = 516096;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 8002daa:	601a      	str	r2, [r3, #0]
            break;
 8002dac:	e00c      	b.n	8002dc8 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_64_MEAS:
            *p_factor = 1040384;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 8002db4:	601a      	str	r2, [r3, #0]
            break;
 8002db6:	e007      	b.n	8002dc8 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_128_MEAS:
            *p_factor = 2088960;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8002dbe:	601a      	str	r2, [r3, #0]
            break;
 8002dc0:	e002      	b.n	8002dc8 <get_scale_factor_for+0xa2>
        default:
            ret = DPS310_UNKNOWN_RATE_ERROR;
 8002dc2:	f06f 0304 	mvn.w	r3, #4
 8002dc6:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	b21b      	sxth	r3, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <get_two_complement_of>:

int32_t get_two_complement_of(uint32_t value, uint8_t length) {
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70fb      	strb	r3, [r7, #3]
    int32_t ret = value;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	60fb      	str	r3, [r7, #12]
    bool b_is_negative = value & (1u << (length - 1u));
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	2201      	movs	r2, #1
 8002dee:	409a      	lsls	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	72fb      	strb	r3, [r7, #11]

    if (b_is_negative) {
 8002dfe:	7afb      	ldrb	r3, [r7, #11]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d006      	beq.n	8002e12 <get_two_complement_of+0x3a>
        ret -= ((uint32_t) 1 << length);
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8002e12:	68fb      	ldr	r3, [r7, #12]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <product_id_check>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t product_id_check() {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PRODUCT_ID_REG, buff, 1);
 8002e26:	1d3a      	adds	r2, r7, #4
 8002e28:	2301      	movs	r3, #1
 8002e2a:	210d      	movs	r1, #13
 8002e2c:	20ee      	movs	r0, #238	; 0xee
 8002e2e:	f7ff fc81 	bl	8002734 <dps310_i2c_read>
 8002e32:	4603      	mov	r3, r0
 8002e34:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 8002e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <product_id_check+0x24>
 8002e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e42:	e00f      	b.n	8002e64 <product_id_check+0x44>

    bool b_is_product_id_valid = buff[0] == DPS310_PRODUCT_ID_VALUE;
 8002e44:	793b      	ldrb	r3, [r7, #4]
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	bf0c      	ite	eq
 8002e4a:	2301      	moveq	r3, #1
 8002e4c:	2300      	movne	r3, #0
 8002e4e:	717b      	strb	r3, [r7, #5]
    if (!b_is_product_id_valid) return DPS310_PRODUCT_ID_ERROR;
 8002e50:	797b      	ldrb	r3, [r7, #5]
 8002e52:	f083 0301 	eor.w	r3, r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <product_id_check+0x42>
 8002e5c:	f06f 0301 	mvn.w	r3, #1
 8002e60:	e000      	b.n	8002e64 <product_id_check+0x44>

    return DPS310_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <get_temperature_sensor>:

int16_t get_temperature_sensor(uint8_t *p_sensor) {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
    uint16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_COEF_SRCE, buff, 1);
 8002e74:	f107 020c 	add.w	r2, r7, #12
 8002e78:	2301      	movs	r3, #1
 8002e7a:	2128      	movs	r1, #40	; 0x28
 8002e7c:	20ee      	movs	r0, #238	; 0xee
 8002e7e:	f7ff fc59 	bl	8002734 <dps310_i2c_read>
 8002e82:	4603      	mov	r3, r0
 8002e84:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 8002e86:	89fb      	ldrh	r3, [r7, #14]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <get_temperature_sensor+0x26>
 8002e8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e90:	e00e      	b.n	8002eb0 <get_temperature_sensor+0x44>

    uint8_t value = buff[0] & DPS310_TMP_COEF_SRCE_MASK;
 8002e92:	7b3b      	ldrb	r3, [r7, #12]
 8002e94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002e98:	737b      	strb	r3, [r7, #13]

    if (value) {
 8002e9a:	7b7b      	ldrb	r3, [r7, #13]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <get_temperature_sensor+0x3c>
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2280      	movs	r2, #128	; 0x80
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e002      	b.n	8002eae <get_temperature_sensor+0x42>
    } else {
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_INTERNAL;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
    }

    return DPS310_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <Transmit_Pressure_Temp_Data>:


PressureTempData Transmit_Pressure_Temp_Data(){
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0


	  pressure_read_state = read_pressure(&pressure_value);
 8002ebe:	4822      	ldr	r0, [pc, #136]	; (8002f48 <Transmit_Pressure_Temp_Data+0x90>)
 8002ec0:	f7ff fe30 	bl	8002b24 <read_pressure>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <Transmit_Pressure_Temp_Data+0x94>)
 8002eca:	801a      	strh	r2, [r3, #0]
	  temperature_p_state = read_temperature(&temperature_p_value);
 8002ecc:	4820      	ldr	r0, [pc, #128]	; (8002f50 <Transmit_Pressure_Temp_Data+0x98>)
 8002ece:	f7ff fda7 	bl	8002a20 <read_temperature>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <Transmit_Pressure_Temp_Data+0x9c>)
 8002ed8:	801a      	strh	r2, [r3, #0]

	  if(pressure_read_state == 0 && temperature_p_state == 0){
 8002eda:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <Transmit_Pressure_Temp_Data+0x94>)
 8002edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d114      	bne.n	8002f0e <Transmit_Pressure_Temp_Data+0x56>
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <Transmit_Pressure_Temp_Data+0x9c>)
 8002ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10f      	bne.n	8002f0e <Transmit_Pressure_Temp_Data+0x56>
		    pressure_temp_data.pressure_hpa = pressure_value;
 8002eee:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <Transmit_Pressure_Temp_Data+0x90>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <Transmit_Pressure_Temp_Data+0xa0>)
 8002ef4:	6013      	str	r3, [r2, #0]
		    pressure_temp_data.temperature_celsius = temperature_p_value;
 8002ef6:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <Transmit_Pressure_Temp_Data+0x98>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <Transmit_Pressure_Temp_Data+0xa0>)
 8002efc:	6053      	str	r3, [r2, #4]

		    return pressure_temp_data;
 8002efe:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <Transmit_Pressure_Temp_Data+0xa0>)
 8002f00:	f107 0308 	add.w	r3, r7, #8
 8002f04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f08:	e883 0003 	stmia.w	r3, {r0, r1}
 8002f0c:	e00e      	b.n	8002f2c <Transmit_Pressure_Temp_Data+0x74>
	  } else {
		    pressure_temp_data.pressure_hpa = 0;
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <Transmit_Pressure_Temp_Data+0xa0>)
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
		    pressure_temp_data.temperature_celsius = 0;
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <Transmit_Pressure_Temp_Data+0xa0>)
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	605a      	str	r2, [r3, #4]

		    return pressure_temp_data;
 8002f1e:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <Transmit_Pressure_Temp_Data+0xa0>)
 8002f20:	f107 0308 	add.w	r3, r7, #8
 8002f24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f28:	e883 0003 	stmia.w	r3, {r0, r1}
	  }


}
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	ee07 2a10 	vmov	s14, r2
 8002f34:	ee07 3a90 	vmov	s15, r3
 8002f38:	eeb0 0a47 	vmov.f32	s0, s14
 8002f3c:	eef0 0a67 	vmov.f32	s1, s15
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20003960 	.word	0x20003960
 8002f4c:	20003968 	.word	0x20003968
 8002f50:	20003964 	.word	0x20003964
 8002f54:	2000396a 	.word	0x2000396a
 8002f58:	2000396c 	.word	0x2000396c

08002f5c <UART_Transmit_Pyro>:
 */

#include "pyro.h"

void UART_Transmit_Pyro(const char* str)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fd f983 	bl	8000270 <strlen>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4803      	ldr	r0, [pc, #12]	; (8002f84 <UART_Transmit_Pyro+0x28>)
 8002f76:	f006 ff1c 	bl	8009db2 <HAL_UART_Transmit>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20004878 	.word	0x20004878

08002f88 <pyro_arm>:

// Function to arm the pyro charge
void pyro_arm(int pyroSlot) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
    if (pyroSlot == 1) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <pyro_arm+0x1a>
        // Arm Pyro 1 (set the GPIO pin low)
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_RESET);
 8002f96:	2200      	movs	r2, #0
 8002f98:	2140      	movs	r1, #64	; 0x40
 8002f9a:	4808      	ldr	r0, [pc, #32]	; (8002fbc <pyro_arm+0x34>)
 8002f9c:	f003 fa4c 	bl	8006438 <HAL_GPIO_WritePin>
    } else if (pyroSlot == 2) {
        // Arm Pyro 2 (set the GPIO pin low)
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
    }
}
 8002fa0:	e007      	b.n	8002fb2 <pyro_arm+0x2a>
    } else if (pyroSlot == 2) {
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d104      	bne.n	8002fb2 <pyro_arm+0x2a>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2101      	movs	r1, #1
 8002fac:	4804      	ldr	r0, [pc, #16]	; (8002fc0 <pyro_arm+0x38>)
 8002fae:	f003 fa43 	bl	8006438 <HAL_GPIO_WritePin>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40020400 	.word	0x40020400
 8002fc0:	40020000 	.word	0x40020000

08002fc4 <pyro_fire>:

// Function to fire the pyro charge
void pyro_fire(int pyroSlot) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
    if (pyroSlot == 1) {
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d114      	bne.n	8002ffc <pyro_fire+0x38>
        // Fire Pyro 1 (set the GPIO pin high)
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_SET);
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	2140      	movs	r1, #64	; 0x40
 8002fd6:	4817      	ldr	r0, [pc, #92]	; (8003034 <pyro_fire+0x70>)
 8002fd8:	f003 fa2e 	bl	8006438 <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Ignition..");
 8002fdc:	4816      	ldr	r0, [pc, #88]	; (8003038 <pyro_fire+0x74>)
 8002fde:	f7ff ffbd 	bl	8002f5c <UART_Transmit_Pyro>
        HAL_Delay(PYRO_IGNITION_TIME);
 8002fe2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002fe6:	f002 fc51 	bl	800588c <HAL_Delay>
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_RESET);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2140      	movs	r1, #64	; 0x40
 8002fee:	4811      	ldr	r0, [pc, #68]	; (8003034 <pyro_fire+0x70>)
 8002ff0:	f003 fa22 	bl	8006438 <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Finished.\r\n");
 8002ff4:	4811      	ldr	r0, [pc, #68]	; (800303c <pyro_fire+0x78>)
 8002ff6:	f7ff ffb1 	bl	8002f5c <UART_Transmit_Pyro>
        UART_Transmit_Pyro("Ignition..");
        HAL_Delay(PYRO_IGNITION_TIME);
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
        UART_Transmit_Pyro("Finished.\r\n");
    }
}
 8002ffa:	e016      	b.n	800302a <pyro_fire+0x66>
    } else if (pyroSlot == 2) {
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d113      	bne.n	800302a <pyro_fire+0x66>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_SET);
 8003002:	2201      	movs	r2, #1
 8003004:	2101      	movs	r1, #1
 8003006:	480e      	ldr	r0, [pc, #56]	; (8003040 <pyro_fire+0x7c>)
 8003008:	f003 fa16 	bl	8006438 <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Ignition..");
 800300c:	480a      	ldr	r0, [pc, #40]	; (8003038 <pyro_fire+0x74>)
 800300e:	f7ff ffa5 	bl	8002f5c <UART_Transmit_Pyro>
        HAL_Delay(PYRO_IGNITION_TIME);
 8003012:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003016:	f002 fc39 	bl	800588c <HAL_Delay>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
 800301a:	2200      	movs	r2, #0
 800301c:	2101      	movs	r1, #1
 800301e:	4808      	ldr	r0, [pc, #32]	; (8003040 <pyro_fire+0x7c>)
 8003020:	f003 fa0a 	bl	8006438 <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Finished.\r\n");
 8003024:	4805      	ldr	r0, [pc, #20]	; (800303c <pyro_fire+0x78>)
 8003026:	f7ff ff99 	bl	8002f5c <UART_Transmit_Pyro>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40020400 	.word	0x40020400
 8003038:	0801f82c 	.word	0x0801f82c
 800303c:	0801f838 	.word	0x0801f838
 8003040:	40020000 	.word	0x40020000

08003044 <Transmit_Temperature>:
{
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}


TemperatureData Transmit_Temperature(){
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af02      	add	r7, sp, #8


	buffer[0] = TEMP_READ_ADDRESS;
 800304a:	4b40      	ldr	r3, [pc, #256]	; (800314c <Transmit_Temperature+0x108>)
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
	//UART_Transmit_String("Reading temperature..\r\n");
	ret = HAL_I2C_Master_Transmit(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,1,HAL_MAX_DELAY);
 8003050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	2301      	movs	r3, #1
 8003058:	4a3c      	ldr	r2, [pc, #240]	; (800314c <Transmit_Temperature+0x108>)
 800305a:	2190      	movs	r1, #144	; 0x90
 800305c:	483c      	ldr	r0, [pc, #240]	; (8003150 <Transmit_Temperature+0x10c>)
 800305e:	f003 fb6d 	bl	800673c <HAL_I2C_Master_Transmit>
 8003062:	4603      	mov	r3, r0
 8003064:	461a      	mov	r2, r3
 8003066:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <Transmit_Temperature+0x110>)
 8003068:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK){
 800306a:	4b3a      	ldr	r3, [pc, #232]	; (8003154 <Transmit_Temperature+0x110>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <Transmit_Temperature+0x3c>
		UART_Transmit_String("Error communicating with Temperature sensor");
 8003072:	4839      	ldr	r0, [pc, #228]	; (8003158 <Transmit_Temperature+0x114>)
 8003074:	f7fe fb32 	bl	80016dc <UART_Transmit_String>
		UART_Transmit_String("\r\n");
 8003078:	4838      	ldr	r0, [pc, #224]	; (800315c <Transmit_Temperature+0x118>)
 800307a:	f7fe fb2f 	bl	80016dc <UART_Transmit_String>
 800307e:	e059      	b.n	8003134 <Transmit_Temperature+0xf0>
	} else{
		ret = HAL_I2C_Master_Receive(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,2,HAL_MAX_DELAY);
 8003080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	2302      	movs	r3, #2
 8003088:	4a30      	ldr	r2, [pc, #192]	; (800314c <Transmit_Temperature+0x108>)
 800308a:	2190      	movs	r1, #144	; 0x90
 800308c:	4830      	ldr	r0, [pc, #192]	; (8003150 <Transmit_Temperature+0x10c>)
 800308e:	f003 fc53 	bl	8006938 <HAL_I2C_Master_Receive>
 8003092:	4603      	mov	r3, r0
 8003094:	461a      	mov	r2, r3
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <Transmit_Temperature+0x110>)
 8003098:	701a      	strb	r2, [r3, #0]
		if (ret != HAL_OK){
 800309a:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <Transmit_Temperature+0x110>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d006      	beq.n	80030b0 <Transmit_Temperature+0x6c>
			UART_Transmit_String("Error receiving data from Temperature sensor");
 80030a2:	482f      	ldr	r0, [pc, #188]	; (8003160 <Transmit_Temperature+0x11c>)
 80030a4:	f7fe fb1a 	bl	80016dc <UART_Transmit_String>
			UART_Transmit_String("\r\n");
 80030a8:	482c      	ldr	r0, [pc, #176]	; (800315c <Transmit_Temperature+0x118>)
 80030aa:	f7fe fb17 	bl	80016dc <UART_Transmit_String>
 80030ae:	e041      	b.n	8003134 <Transmit_Temperature+0xf0>
		} else {
			//Combine the bytes
			val = ((int16_t)buffer[0] << 4) | (buffer[1] >> 4);
 80030b0:	4b26      	ldr	r3, [pc, #152]	; (800314c <Transmit_Temperature+0x108>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	b21a      	sxth	r2, r3
 80030b8:	4b24      	ldr	r3, [pc, #144]	; (800314c <Transmit_Temperature+0x108>)
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	b21b      	sxth	r3, r3
 80030c2:	4313      	orrs	r3, r2
 80030c4:	b21a      	sxth	r2, r3
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <Transmit_Temperature+0x120>)
 80030c8:	801a      	strh	r2, [r3, #0]

			//Convert to 2's complement (temperature can be negative)
			if(val > 0x7FF){
 80030ca:	4b26      	ldr	r3, [pc, #152]	; (8003164 <Transmit_Temperature+0x120>)
 80030cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d4:	db09      	blt.n	80030ea <Transmit_Temperature+0xa6>
				val |= 0xF000;
 80030d6:	4b23      	ldr	r3, [pc, #140]	; (8003164 <Transmit_Temperature+0x120>)
 80030d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030dc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80030e0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80030e4:	b21a      	sxth	r2, r3
 80030e6:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <Transmit_Temperature+0x120>)
 80030e8:	801a      	strh	r2, [r3, #0]
			}

			//Convert to float temperature value (Celsius)
			temp_c = val * 0.0625; // 0.0625 can be retreived into the datasheet
 80030ea:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <Transmit_Temperature+0x120>)
 80030ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fa21 	bl	8000538 <__aeabi_i2d>
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <Transmit_Temperature+0x124>)
 80030fc:	f7fd fa86 	bl	800060c <__aeabi_dmul>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	f7fd fd78 	bl	8000bfc <__aeabi_d2f>
 800310c:	4603      	mov	r3, r0
 800310e:	4a17      	ldr	r2, [pc, #92]	; (800316c <Transmit_Temperature+0x128>)
 8003110:	6013      	str	r3, [r2, #0]

			//Convert to temperature to decimal format
			temp_c *= 100;
 8003112:	4b16      	ldr	r3, [pc, #88]	; (800316c <Transmit_Temperature+0x128>)
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003170 <Transmit_Temperature+0x12c>
 800311c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <Transmit_Temperature+0x128>)
 8003122:	edc3 7a00 	vstr	s15, [r3]

			temperature_data.temperature_celsius = temp_c;
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <Transmit_Temperature+0x128>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <Transmit_Temperature+0x130>)
 800312c:	6013      	str	r3, [r2, #0]

			return temperature_data;
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <Transmit_Temperature+0x130>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	e004      	b.n	800313e <Transmit_Temperature+0xfa>

		}
	}

	//Error State
	temperature_data.temperature_celsius = -100.00;
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <Transmit_Temperature+0x130>)
 8003136:	4a10      	ldr	r2, [pc, #64]	; (8003178 <Transmit_Temperature+0x134>)
 8003138:	601a      	str	r2, [r3, #0]
	return temperature_data;
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <Transmit_Temperature+0x130>)
 800313c:	681b      	ldr	r3, [r3, #0]

}
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eeb0 0a67 	vmov.f32	s0, s15
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20003978 	.word	0x20003978
 8003150:	20004680 	.word	0x20004680
 8003154:	20003974 	.word	0x20003974
 8003158:	0801f844 	.word	0x0801f844
 800315c:	0801f870 	.word	0x0801f870
 8003160:	0801f874 	.word	0x0801f874
 8003164:	20003984 	.word	0x20003984
 8003168:	3fb00000 	.word	0x3fb00000
 800316c:	20003988 	.word	0x20003988
 8003170:	42c80000 	.word	0x42c80000
 8003174:	2000398c 	.word	0x2000398c
 8003178:	c2c80000 	.word	0xc2c80000

0800317c <circ_buffer_enqueue>:
 * @param 	data	: 	Array of bytes to add to the buffer
 *
 * @param 	size 	:	Size of the data array
 */
void circ_buffer_enqueue(circ_buffer_t *cb, uint8_t* data, uint8_t size)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	71fb      	strb	r3, [r7, #7]
	if ((cb->end + 1) % BUFFER_SIZE == cb->start)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 8003190:	1c59      	adds	r1, r3, #1
 8003192:	4b1e      	ldr	r3, [pc, #120]	; (800320c <circ_buffer_enqueue+0x90>)
 8003194:	fb83 2301 	smull	r2, r3, r3, r1
 8003198:	105a      	asrs	r2, r3, #1
 800319a:	17cb      	asrs	r3, r1, #31
 800319c:	1ad2      	subs	r2, r2, r3
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	1aca      	subs	r2, r1, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d029      	beq.n	8003204 <circ_buffer_enqueue+0x88>
	{
		// Buffer is full, do not add new element
		return;
	}
	memcpy(cb->buffer[cb->end], data, size * sizeof(uint8_t));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 80031b6:	461a      	mov	r2, r3
 80031b8:	23f5      	movs	r3, #245	; 0xf5
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4413      	add	r3, r2
 80031c2:	79fa      	ldrb	r2, [r7, #7]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f016 fef0 	bl	8019fac <memcpy>
	cb->elementSizes[cb->end] = size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 80031d2:	461a      	mov	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	79fa      	ldrb	r2, [r7, #7]
 80031da:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
	cb->end = (cb->end + 1) % BUFFER_SIZE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <circ_buffer_enqueue+0x90>)
 80031e8:	fb83 1302 	smull	r1, r3, r3, r2
 80031ec:	1059      	asrs	r1, r3, #1
 80031ee:	17d3      	asrs	r3, r2, #31
 80031f0:	1ac9      	subs	r1, r1, r3
 80031f2:	460b      	mov	r3, r1
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	1ad1      	subs	r1, r2, r3
 80031fa:	b2ca      	uxtb	r2, r1
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 8003202:	e000      	b.n	8003206 <circ_buffer_enqueue+0x8a>
		return;
 8003204:	bf00      	nop
}
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	66666667 	.word	0x66666667

08003210 <circ_buffer_dequeue>:
 * @param 	size	:	Pointer to an integer to store the size of the returned array
 *
 * @return 	Pointer to the first element in the buffer
 */
uint8_t* circ_buffer_dequeue(circ_buffer_t *cb, uint8_t *size)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
	uint8_t *element = cb->buffer[cb->start];
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 8003220:	461a      	mov	r2, r3
 8003222:	23f5      	movs	r3, #245	; 0xf5
 8003224:	fb02 f303 	mul.w	r3, r2, r3
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
	if (size)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d009      	beq.n	8003248 <circ_buffer_dequeue+0x38>
	{
		*size = cb->elementSizes[cb->start];
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 800323a:	461a      	mov	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4413      	add	r3, r2
 8003240:	f893 24cb 	ldrb.w	r2, [r3, #1227]	; 0x4cb
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	701a      	strb	r2, [r3, #0]
	}
	cb->start = (cb->start + 1) % BUFFER_SIZE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <circ_buffer_dequeue+0x6c>)
 8003252:	fb83 1302 	smull	r1, r3, r3, r2
 8003256:	1059      	asrs	r1, r3, #1
 8003258:	17d3      	asrs	r3, r2, #31
 800325a:	1ac9      	subs	r1, r1, r3
 800325c:	460b      	mov	r3, r1
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	1ad1      	subs	r1, r2, r3
 8003264:	b2ca      	uxtb	r2, r1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
	return element;
 800326c:	68fb      	ldr	r3, [r7, #12]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	66666667 	.word	0x66666667

08003280 <circ_buffer_getNextSize>:
 * @param 	cb		: 	Pointer to the circular buffer
 *
 * @return 	Number	: 	of arrays in the buffer
 */
uint8_t circ_buffer_getNextSize(circ_buffer_t *cb)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	if (cb->start == cb->end)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 24c9 	ldrb.w	r2, [r3, #1225]	; 0x4c9
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 8003294:	429a      	cmp	r2, r3
 8003296:	d101      	bne.n	800329c <circ_buffer_getNextSize+0x1c>
	{
		return 0;
 8003298:	2300      	movs	r3, #0
 800329a:	e007      	b.n	80032ac <circ_buffer_getNextSize+0x2c>
	}
	else
	{
		return cb->elementSizes[cb->start];
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 80032a2:	461a      	mov	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	f893 34cb 	ldrb.w	r3, [r3, #1227]	; 0x4cb
	}
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <e22_lora_init>:
					void* transmissionFunc,
					void* receptionFunc,
					void* receptionCallbackFunc,
					void* configModeFunc,
					void* TransceiverModeFunc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
	hE22.huart 						= huart;
 80032c6:	4a15      	ldr	r2, [pc, #84]	; (800331c <e22_lora_init+0x64>)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6013      	str	r3, [r2, #0]
	hE22.loraTransmit 				= transmissionFunc;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4a13      	ldr	r2, [pc, #76]	; (800331c <e22_lora_init+0x64>)
 80032d0:	6053      	str	r3, [r2, #4]
	hE22.loraStartReception 		= receptionFunc;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a11      	ldr	r2, [pc, #68]	; (800331c <e22_lora_init+0x64>)
 80032d6:	6093      	str	r3, [r2, #8]
	hE22.loraReceive		 		= receptionCallbackFunc;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	4a10      	ldr	r2, [pc, #64]	; (800331c <e22_lora_init+0x64>)
 80032dc:	60d3      	str	r3, [r2, #12]
	hE22.loraConfigurationMode 		= configModeFunc;
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4a0e      	ldr	r2, [pc, #56]	; (800331c <e22_lora_init+0x64>)
 80032e2:	6153      	str	r3, [r2, #20]
	hE22.loraTransceiverMode		= TransceiverModeFunc;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	4a0d      	ldr	r2, [pc, #52]	; (800331c <e22_lora_init+0x64>)
 80032e8:	6113      	str	r3, [r2, #16]

	//Assign DMA buffer pointers.
	hE22.pRxDmaBuffer = rxDmaBuffer;
 80032ea:	4b0c      	ldr	r3, [pc, #48]	; (800331c <e22_lora_init+0x64>)
 80032ec:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <e22_lora_init+0x68>)
 80032ee:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	hE22.pTxDmaBuffer = txDmaBuffer;
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <e22_lora_init+0x64>)
 80032f4:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <e22_lora_init+0x6c>)
 80032f6:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
	//transceiver mode as default
	hE22.loraTransceiverMode();
 80032fa:	4b08      	ldr	r3, [pc, #32]	; (800331c <e22_lora_init+0x64>)
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	4798      	blx	r3

	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <e22_lora_init+0x64>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4a05      	ldr	r2, [pc, #20]	; (800331c <e22_lora_init+0x64>)
 8003306:	6810      	ldr	r0, [r2, #0]
 8003308:	4a04      	ldr	r2, [pc, #16]	; (800331c <e22_lora_init+0x64>)
 800330a:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	; 0xab0
 800330e:	22f0      	movs	r2, #240	; 0xf0
 8003310:	4798      	blx	r3
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20003990 	.word	0x20003990
 8003320:	20004448 	.word	0x20004448
 8003324:	20004538 	.word	0x20004538

08003328 <e22_lora_transnit>:
 *
 * @param channel	:	RF channel to send data over
 *
 */
void e22_lora_transnit(uint8_t *pData, uint16_t size, uint16_t address, uint8_t channel)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	4608      	mov	r0, r1
 8003332:	4611      	mov	r1, r2
 8003334:	461a      	mov	r2, r3
 8003336:	4603      	mov	r3, r0
 8003338:	817b      	strh	r3, [r7, #10]
 800333a:	460b      	mov	r3, r1
 800333c:	813b      	strh	r3, [r7, #8]
 800333e:	4613      	mov	r3, r2
 8003340:	71fb      	strb	r3, [r7, #7]
	const uint8_t overheadSize = 3;
 8003342:	2303      	movs	r3, #3
 8003344:	75fb      	strb	r3, [r7, #23]

	memset(&hE22.packet, 0, sizeof(e22_packet_t));
 8003346:	22f4      	movs	r2, #244	; 0xf4
 8003348:	2100      	movs	r1, #0
 800334a:	4815      	ldr	r0, [pc, #84]	; (80033a0 <e22_lora_transnit+0x78>)
 800334c:	f016 fda0 	bl	8019e90 <memset>
	//Address 2 bytes swap
	hE22.packet.address = (address >> 8) | (address << 8);
 8003350:	893b      	ldrh	r3, [r7, #8]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	b29b      	uxth	r3, r3
 8003356:	b21a      	sxth	r2, r3
 8003358:	893b      	ldrh	r3, [r7, #8]
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	b21b      	sxth	r3, r3
 800335e:	4313      	orrs	r3, r2
 8003360:	b21b      	sxth	r3, r3
 8003362:	b29a      	uxth	r2, r3
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <e22_lora_transnit+0x7c>)
 8003366:	831a      	strh	r2, [r3, #24]

	hE22.packet.chanel = channel;
 8003368:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <e22_lora_transnit+0x7c>)
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	7693      	strb	r3, [r2, #26]

	hE22.txPortReady = true;
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <e22_lora_transnit+0x7c>)
 8003370:	2201      	movs	r2, #1
 8003372:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

	memcpy(&hE22.packet.dataBuffer, pData, size);
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	461a      	mov	r2, r3
 800337a:	68f9      	ldr	r1, [r7, #12]
 800337c:	480a      	ldr	r0, [pc, #40]	; (80033a8 <e22_lora_transnit+0x80>)
 800337e:	f016 fe15 	bl	8019fac <memcpy>

	circ_buffer_enqueue(&hE22.txBuffer, (uint8_t*)&hE22.packet, size + overheadSize);
 8003382:	897b      	ldrh	r3, [r7, #10]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	4413      	add	r3, r2
 800338a:	b2db      	uxtb	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	4904      	ldr	r1, [pc, #16]	; (80033a0 <e22_lora_transnit+0x78>)
 8003390:	4806      	ldr	r0, [pc, #24]	; (80033ac <e22_lora_transnit+0x84>)
 8003392:	f7ff fef3 	bl	800317c <circ_buffer_enqueue>
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200039a8 	.word	0x200039a8
 80033a4:	20003990 	.word	0x20003990
 80033a8:	200039ab 	.word	0x200039ab
 80033ac:	20003a9e 	.word	0x20003a9e

080033b0 <e22_lora_manager>:
 * 			This function manages the E22 LoRa module by checking for packets in the TX circular buffer, dequeuing them, and transmitting
 * 			them via the E22 module.
 *
 */
void e22_lora_manager(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
	uint8_t packetSize = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	70fb      	strb	r3, [r7, #3]
	uint8_t* pPacket = NULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
	//check for packet in TX circular buffer
	if(circ_buffer_getNextSize(&hE22.txBuffer))
 80033be:	481e      	ldr	r0, [pc, #120]	; (8003438 <e22_lora_manager+0x88>)
 80033c0:	f7ff ff5e 	bl	8003280 <circ_buffer_getNextSize>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d020      	beq.n	800340c <e22_lora_manager+0x5c>
	{
//		uint8_t packetSize = 0;
//		uint8_t* pPacket = NULL;
		if(hE22.txPortReady)
 80033ca:	4b1c      	ldr	r3, [pc, #112]	; (800343c <e22_lora_manager+0x8c>)
 80033cc:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <e22_lora_manager+0x5c>
		{
			hE22.txPortReady = false;
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <e22_lora_manager+0x8c>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			// Dequeue packet from circular buffer
			pPacket = circ_buffer_dequeue(&hE22.txBuffer, &packetSize);
 80033dc:	1cfb      	adds	r3, r7, #3
 80033de:	4619      	mov	r1, r3
 80033e0:	4815      	ldr	r0, [pc, #84]	; (8003438 <e22_lora_manager+0x88>)
 80033e2:	f7ff ff15 	bl	8003210 <circ_buffer_dequeue>
 80033e6:	6078      	str	r0, [r7, #4]
			// Copy packet to DMA buffer
			memcpy(hE22.pTxDmaBuffer ,pPacket, packetSize);
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <e22_lora_manager+0x8c>)
 80033ea:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f016 fdda 	bl	8019fac <memcpy>
			// Transmit packet via the E22 module
			hE22.loraTransmit(hE22.huart, hE22.pTxDmaBuffer, packetSize);
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <e22_lora_manager+0x8c>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a0f      	ldr	r2, [pc, #60]	; (800343c <e22_lora_manager+0x8c>)
 80033fe:	6810      	ldr	r0, [r2, #0]
 8003400:	4a0e      	ldr	r2, [pc, #56]	; (800343c <e22_lora_manager+0x8c>)
 8003402:	f8d2 1ab4 	ldr.w	r1, [r2, #2740]	; 0xab4
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	b292      	uxth	r2, r2
 800340a:	4798      	blx	r3
		}
	}
	//check for packet in RX circular buffer
	if(circ_buffer_getNextSize(&hE22.rxBuffer))
 800340c:	480c      	ldr	r0, [pc, #48]	; (8003440 <e22_lora_manager+0x90>)
 800340e:	f7ff ff37 	bl	8003280 <circ_buffer_getNextSize>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <e22_lora_manager+0x80>
	{
		pPacket = circ_buffer_dequeue(&hE22.rxBuffer, &packetSize);
 8003418:	1cfb      	adds	r3, r7, #3
 800341a:	4619      	mov	r1, r3
 800341c:	4808      	ldr	r0, [pc, #32]	; (8003440 <e22_lora_manager+0x90>)
 800341e:	f7ff fef7 	bl	8003210 <circ_buffer_dequeue>
 8003422:	6078      	str	r0, [r7, #4]
		hE22.loraReceive(pPacket, packetSize);
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <e22_lora_manager+0x8c>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	4611      	mov	r1, r2
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
	}
}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20003a9e 	.word	0x20003a9e
 800343c:	20003990 	.word	0x20003990
 8003440:	20003f6e 	.word	0x20003f6e

08003444 <e22_lora_make_ready>:
/**
 * @brief 	Make transmission line status ready at TX complete callback
 *
 */
void e22_lora_make_ready(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
	hE22.txPortReady = true;
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <e22_lora_make_ready+0x18>)
 800344a:	2201      	movs	r2, #1
 800344c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20003990 	.word	0x20003990

08003460 <e22_lora_reception_complete>:
/**
 * @brief 	this function should be called at the UART RX complete callback.
 *
 */
void e22_lora_reception_complete(uint8_t size)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
	circ_buffer_enqueue(&hE22.rxBuffer, (uint8_t*)hE22.pRxDmaBuffer, size);
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <e22_lora_reception_complete+0x34>)
 800346c:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8003470:	79fa      	ldrb	r2, [r7, #7]
 8003472:	4619      	mov	r1, r3
 8003474:	4808      	ldr	r0, [pc, #32]	; (8003498 <e22_lora_reception_complete+0x38>)
 8003476:	f7ff fe81 	bl	800317c <circ_buffer_enqueue>
	//Activate UART reception again
	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <e22_lora_reception_complete+0x34>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	4a05      	ldr	r2, [pc, #20]	; (8003494 <e22_lora_reception_complete+0x34>)
 8003480:	6810      	ldr	r0, [r2, #0]
 8003482:	4a04      	ldr	r2, [pc, #16]	; (8003494 <e22_lora_reception_complete+0x34>)
 8003484:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	; 0xab0
 8003488:	22f0      	movs	r2, #240	; 0xf0
 800348a:	4798      	blx	r3
}
 800348c:	bf00      	nop
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20003990 	.word	0x20003990
 8003498:	20003f6e 	.word	0x20003f6e

0800349c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80034a0:	2200      	movs	r2, #0
 80034a2:	2110      	movs	r1, #16
 80034a4:	4803      	ldr	r0, [pc, #12]	; (80034b4 <SELECT+0x18>)
 80034a6:	f002 ffc7 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80034aa:	2001      	movs	r0, #1
 80034ac:	f002 f9ee 	bl	800588c <HAL_Delay>
}
 80034b0:	bf00      	nop
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40020000 	.word	0x40020000

080034b8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80034bc:	2201      	movs	r2, #1
 80034be:	2110      	movs	r1, #16
 80034c0:	4803      	ldr	r0, [pc, #12]	; (80034d0 <DESELECT+0x18>)
 80034c2:	f002 ffb9 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80034c6:	2001      	movs	r0, #1
 80034c8:	f002 f9e0 	bl	800588c <HAL_Delay>
}
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40020000 	.word	0x40020000

080034d4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80034de:	bf00      	nop
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <SPI_TxByte+0x30>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d1f8      	bne.n	80034e0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80034ee:	1df9      	adds	r1, r7, #7
 80034f0:	2364      	movs	r3, #100	; 0x64
 80034f2:	2201      	movs	r2, #1
 80034f4:	4803      	ldr	r0, [pc, #12]	; (8003504 <SPI_TxByte+0x30>)
 80034f6:	f005 face 	bl	8008a96 <HAL_SPI_Transmit>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20004748 	.word	0x20004748

08003508 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003514:	bf00      	nop
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <SPI_TxBuffer+0x30>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b02      	cmp	r3, #2
 8003522:	d1f8      	bne.n	8003516 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8003524:	887a      	ldrh	r2, [r7, #2]
 8003526:	2364      	movs	r3, #100	; 0x64
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4803      	ldr	r0, [pc, #12]	; (8003538 <SPI_TxBuffer+0x30>)
 800352c:	f005 fab3 	bl	8008a96 <HAL_SPI_Transmit>
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20004748 	.word	0x20004748

0800353c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003542:	23ff      	movs	r3, #255	; 0xff
 8003544:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003546:	bf00      	nop
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <SPI_RxByte+0x34>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d1f8      	bne.n	8003548 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003556:	1dba      	adds	r2, r7, #6
 8003558:	1df9      	adds	r1, r7, #7
 800355a:	2364      	movs	r3, #100	; 0x64
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2301      	movs	r3, #1
 8003560:	4803      	ldr	r0, [pc, #12]	; (8003570 <SPI_RxByte+0x34>)
 8003562:	f005 fbd4 	bl	8008d0e <HAL_SPI_TransmitReceive>

	return data;
 8003566:	79bb      	ldrb	r3, [r7, #6]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20004748 	.word	0x20004748

08003574 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800357c:	f7ff ffde 	bl	800353c <SPI_RxByte>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	701a      	strb	r2, [r3, #0]
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <SD_ReadyWait+0x30>)
 8003598:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800359c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800359e:	f7ff ffcd 	bl	800353c <SPI_RxByte>
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2bff      	cmp	r3, #255	; 0xff
 80035aa:	d003      	beq.n	80035b4 <SD_ReadyWait+0x24>
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <SD_ReadyWait+0x30>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f4      	bne.n	800359e <SD_ReadyWait+0xe>

	return res;
 80035b4:	79fb      	ldrb	r3, [r7, #7]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	2000462a 	.word	0x2000462a

080035c4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80035ca:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80035ce:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80035d0:	f7ff ff72 	bl	80034b8 <DESELECT>
	for(int i = 0; i < 10; i++)
 80035d4:	2300      	movs	r3, #0
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	e005      	b.n	80035e6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80035da:	20ff      	movs	r0, #255	; 0xff
 80035dc:	f7ff ff7a 	bl	80034d4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	3301      	adds	r3, #1
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b09      	cmp	r3, #9
 80035ea:	ddf6      	ble.n	80035da <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80035ec:	f7ff ff56 	bl	800349c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80035f0:	2340      	movs	r3, #64	; 0x40
 80035f2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8003604:	2395      	movs	r3, #149	; 0x95
 8003606:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8003608:	463b      	mov	r3, r7
 800360a:	2106      	movs	r1, #6
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff7b 	bl	8003508 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8003612:	e002      	b.n	800361a <SD_PowerOn+0x56>
	{
		cnt--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3b01      	subs	r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800361a:	f7ff ff8f 	bl	800353c <SPI_RxByte>
 800361e:	4603      	mov	r3, r0
 8003620:	2b01      	cmp	r3, #1
 8003622:	d002      	beq.n	800362a <SD_PowerOn+0x66>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f4      	bne.n	8003614 <SD_PowerOn+0x50>
	}

	DESELECT();
 800362a:	f7ff ff45 	bl	80034b8 <DESELECT>
	SPI_TxByte(0XFF);
 800362e:	20ff      	movs	r0, #255	; 0xff
 8003630:	f7ff ff50 	bl	80034d4 <SPI_TxByte>

	PowerFlag = 1;
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <SD_PowerOn+0x80>)
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	2000462d 	.word	0x2000462d

08003648 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800364c:	4b03      	ldr	r3, [pc, #12]	; (800365c <SD_PowerOff+0x14>)
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]
}
 8003652:	bf00      	nop
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	2000462d 	.word	0x2000462d

08003660 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <SD_CheckPower+0x14>)
 8003666:	781b      	ldrb	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	2000462d 	.word	0x2000462d

08003678 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8003682:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <SD_RxDataBlock+0x58>)
 8003684:	22c8      	movs	r2, #200	; 0xc8
 8003686:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003688:	f7ff ff58 	bl	800353c <SPI_RxByte>
 800368c:	4603      	mov	r3, r0
 800368e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2bff      	cmp	r3, #255	; 0xff
 8003694:	d103      	bne.n	800369e <SD_RxDataBlock+0x26>
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <SD_RxDataBlock+0x58>)
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f4      	bne.n	8003688 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	2bfe      	cmp	r3, #254	; 0xfe
 80036a2:	d001      	beq.n	80036a8 <SD_RxDataBlock+0x30>
 80036a4:	2300      	movs	r3, #0
 80036a6:	e00f      	b.n	80036c8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff ff60 	bl	8003574 <SPI_RxBytePtr>
	} while(len--);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	1e5a      	subs	r2, r3, #1
 80036b8:	603a      	str	r2, [r7, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f4      	bne.n	80036a8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80036be:	f7ff ff3d 	bl	800353c <SPI_RxByte>
	SPI_RxByte();
 80036c2:	f7ff ff3b 	bl	800353c <SPI_RxByte>

	return TRUE;
 80036c6:	2301      	movs	r3, #1
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20004628 	.word	0x20004628

080036d4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80036e4:	f7ff ff54 	bl	8003590 <SD_ReadyWait>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2bff      	cmp	r3, #255	; 0xff
 80036ec:	d001      	beq.n	80036f2 <SD_TxDataBlock+0x1e>
 80036ee:	2300      	movs	r3, #0
 80036f0:	e02f      	b.n	8003752 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff feed 	bl	80034d4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	2bfd      	cmp	r3, #253	; 0xfd
 80036fe:	d020      	beq.n	8003742 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff feff 	bl	8003508 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800370a:	f7ff ff17 	bl	800353c <SPI_RxByte>
		SPI_RxByte();
 800370e:	f7ff ff15 	bl	800353c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003712:	e00b      	b.n	800372c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003714:	f7ff ff12 	bl	800353c <SPI_RxByte>
 8003718:	4603      	mov	r3, r0
 800371a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2b05      	cmp	r3, #5
 8003724:	d006      	beq.n	8003734 <SD_TxDataBlock+0x60>
			i++;
 8003726:	7bbb      	ldrb	r3, [r7, #14]
 8003728:	3301      	adds	r3, #1
 800372a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800372c:	7bbb      	ldrb	r3, [r7, #14]
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d9f0      	bls.n	8003714 <SD_TxDataBlock+0x40>
 8003732:	e000      	b.n	8003736 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003734:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003736:	bf00      	nop
 8003738:	f7ff ff00 	bl	800353c <SPI_RxByte>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0fa      	beq.n	8003738 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2b05      	cmp	r3, #5
 800374a:	d101      	bne.n	8003750 <SD_TxDataBlock+0x7c>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <SD_TxDataBlock+0x7e>

	return FALSE;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	4603      	mov	r3, r0
 8003762:	6039      	str	r1, [r7, #0]
 8003764:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003766:	f7ff ff13 	bl	8003590 <SD_ReadyWait>
 800376a:	4603      	mov	r3, r0
 800376c:	2bff      	cmp	r3, #255	; 0xff
 800376e:	d001      	beq.n	8003774 <SD_SendCmd+0x1a>
 8003770:	23ff      	movs	r3, #255	; 0xff
 8003772:	e042      	b.n	80037fa <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff feac 	bl	80034d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	0e1b      	lsrs	r3, r3, #24
 8003780:	b2db      	uxtb	r3, r3
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fea6 	bl	80034d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	0c1b      	lsrs	r3, r3, #16
 800378c:	b2db      	uxtb	r3, r3
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fea0 	bl	80034d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	b2db      	uxtb	r3, r3
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff fe9a 	bl	80034d4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fe95 	bl	80034d4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d102      	bne.n	80037b6 <SD_SendCmd+0x5c>
 80037b0:	2395      	movs	r3, #149	; 0x95
 80037b2:	73fb      	strb	r3, [r7, #15]
 80037b4:	e007      	b.n	80037c6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	2b48      	cmp	r3, #72	; 0x48
 80037ba:	d102      	bne.n	80037c2 <SD_SendCmd+0x68>
 80037bc:	2387      	movs	r3, #135	; 0x87
 80037be:	73fb      	strb	r3, [r7, #15]
 80037c0:	e001      	b.n	80037c6 <SD_SendCmd+0x6c>
	else crc = 1;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fe83 	bl	80034d4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	2b4c      	cmp	r3, #76	; 0x4c
 80037d2:	d101      	bne.n	80037d8 <SD_SendCmd+0x7e>
 80037d4:	f7ff feb2 	bl	800353c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80037d8:	230a      	movs	r3, #10
 80037da:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80037dc:	f7ff feae 	bl	800353c <SPI_RxByte>
 80037e0:	4603      	mov	r3, r0
 80037e2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80037e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	da05      	bge.n	80037f8 <SD_SendCmd+0x9e>
 80037ec:	7bbb      	ldrb	r3, [r7, #14]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	73bb      	strb	r3, [r7, #14]
 80037f2:	7bbb      	ldrb	r3, [r7, #14]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f1      	bne.n	80037dc <SD_SendCmd+0x82>

	return res;
 80037f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <SD_disk_initialize+0x14>
 8003814:	2301      	movs	r3, #1
 8003816:	e0d1      	b.n	80039bc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003818:	4b6a      	ldr	r3, [pc, #424]	; (80039c4 <SD_disk_initialize+0x1c0>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <SD_disk_initialize+0x2a>
 8003826:	4b67      	ldr	r3, [pc, #412]	; (80039c4 <SD_disk_initialize+0x1c0>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e0c6      	b.n	80039bc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800382e:	f7ff fec9 	bl	80035c4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8003832:	f7ff fe33 	bl	800349c <SELECT>

	/* check disk type */
	type = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800383a:	2100      	movs	r1, #0
 800383c:	2040      	movs	r0, #64	; 0x40
 800383e:	f7ff ff8c 	bl	800375a <SD_SendCmd>
 8003842:	4603      	mov	r3, r0
 8003844:	2b01      	cmp	r3, #1
 8003846:	f040 80a1 	bne.w	800398c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800384a:	4b5f      	ldr	r3, [pc, #380]	; (80039c8 <SD_disk_initialize+0x1c4>)
 800384c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003850:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003852:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003856:	2048      	movs	r0, #72	; 0x48
 8003858:	f7ff ff7f 	bl	800375a <SD_SendCmd>
 800385c:	4603      	mov	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	d155      	bne.n	800390e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]
 8003866:	e00c      	b.n	8003882 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8003868:	7bfc      	ldrb	r4, [r7, #15]
 800386a:	f7ff fe67 	bl	800353c <SPI_RxByte>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	f104 0310 	add.w	r3, r4, #16
 8003876:	443b      	add	r3, r7
 8003878:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	3301      	adds	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d9ef      	bls.n	8003868 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003888:	7abb      	ldrb	r3, [r7, #10]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d17e      	bne.n	800398c <SD_disk_initialize+0x188>
 800388e:	7afb      	ldrb	r3, [r7, #11]
 8003890:	2baa      	cmp	r3, #170	; 0xaa
 8003892:	d17b      	bne.n	800398c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003894:	2100      	movs	r1, #0
 8003896:	2077      	movs	r0, #119	; 0x77
 8003898:	f7ff ff5f 	bl	800375a <SD_SendCmd>
 800389c:	4603      	mov	r3, r0
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d807      	bhi.n	80038b2 <SD_disk_initialize+0xae>
 80038a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80038a6:	2069      	movs	r0, #105	; 0x69
 80038a8:	f7ff ff57 	bl	800375a <SD_SendCmd>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <SD_disk_initialize+0xb8>
				} while (Timer1);
 80038b2:	4b45      	ldr	r3, [pc, #276]	; (80039c8 <SD_disk_initialize+0x1c4>)
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1ec      	bne.n	8003894 <SD_disk_initialize+0x90>
 80038ba:	e000      	b.n	80038be <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80038bc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80038be:	4b42      	ldr	r3, [pc, #264]	; (80039c8 <SD_disk_initialize+0x1c4>)
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d062      	beq.n	800398c <SD_disk_initialize+0x188>
 80038c6:	2100      	movs	r1, #0
 80038c8:	207a      	movs	r0, #122	; 0x7a
 80038ca:	f7ff ff46 	bl	800375a <SD_SendCmd>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d15b      	bne.n	800398c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e00c      	b.n	80038f4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80038da:	7bfc      	ldrb	r4, [r7, #15]
 80038dc:	f7ff fe2e 	bl	800353c <SPI_RxByte>
 80038e0:	4603      	mov	r3, r0
 80038e2:	461a      	mov	r2, r3
 80038e4:	f104 0310 	add.w	r3, r4, #16
 80038e8:	443b      	add	r3, r7
 80038ea:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	3301      	adds	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d9ef      	bls.n	80038da <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80038fa:	7a3b      	ldrb	r3, [r7, #8]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <SD_disk_initialize+0x104>
 8003904:	230c      	movs	r3, #12
 8003906:	e000      	b.n	800390a <SD_disk_initialize+0x106>
 8003908:	2304      	movs	r3, #4
 800390a:	73bb      	strb	r3, [r7, #14]
 800390c:	e03e      	b.n	800398c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800390e:	2100      	movs	r1, #0
 8003910:	2077      	movs	r0, #119	; 0x77
 8003912:	f7ff ff22 	bl	800375a <SD_SendCmd>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d808      	bhi.n	800392e <SD_disk_initialize+0x12a>
 800391c:	2100      	movs	r1, #0
 800391e:	2069      	movs	r0, #105	; 0x69
 8003920:	f7ff ff1b 	bl	800375a <SD_SendCmd>
 8003924:	4603      	mov	r3, r0
 8003926:	2b01      	cmp	r3, #1
 8003928:	d801      	bhi.n	800392e <SD_disk_initialize+0x12a>
 800392a:	2302      	movs	r3, #2
 800392c:	e000      	b.n	8003930 <SD_disk_initialize+0x12c>
 800392e:	2301      	movs	r3, #1
 8003930:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8003932:	7bbb      	ldrb	r3, [r7, #14]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d10e      	bne.n	8003956 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003938:	2100      	movs	r1, #0
 800393a:	2077      	movs	r0, #119	; 0x77
 800393c:	f7ff ff0d 	bl	800375a <SD_SendCmd>
 8003940:	4603      	mov	r3, r0
 8003942:	2b01      	cmp	r3, #1
 8003944:	d80e      	bhi.n	8003964 <SD_disk_initialize+0x160>
 8003946:	2100      	movs	r1, #0
 8003948:	2069      	movs	r0, #105	; 0x69
 800394a:	f7ff ff06 	bl	800375a <SD_SendCmd>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d107      	bne.n	8003964 <SD_disk_initialize+0x160>
 8003954:	e00c      	b.n	8003970 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003956:	2100      	movs	r1, #0
 8003958:	2041      	movs	r0, #65	; 0x41
 800395a:	f7ff fefe 	bl	800375a <SD_SendCmd>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8003964:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <SD_disk_initialize+0x1c4>)
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e2      	bne.n	8003932 <SD_disk_initialize+0x12e>
 800396c:	e000      	b.n	8003970 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800396e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003970:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <SD_disk_initialize+0x1c4>)
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <SD_disk_initialize+0x184>
 8003978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800397c:	2050      	movs	r0, #80	; 0x50
 800397e:	f7ff feec 	bl	800375a <SD_SendCmd>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <SD_disk_initialize+0x188>
 8003988:	2300      	movs	r3, #0
 800398a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800398c:	4a0f      	ldr	r2, [pc, #60]	; (80039cc <SD_disk_initialize+0x1c8>)
 800398e:	7bbb      	ldrb	r3, [r7, #14]
 8003990:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8003992:	f7ff fd91 	bl	80034b8 <DESELECT>
	SPI_RxByte();
 8003996:	f7ff fdd1 	bl	800353c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800399a:	7bbb      	ldrb	r3, [r7, #14]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <SD_disk_initialize+0x1c0>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <SD_disk_initialize+0x1c0>)
 80039ae:	701a      	strb	r2, [r3, #0]
 80039b0:	e001      	b.n	80039b6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80039b2:	f7ff fe49 	bl	8003648 <SD_PowerOff>
	}

	return Stat;
 80039b6:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <SD_disk_initialize+0x1c0>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	b2db      	uxtb	r3, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd90      	pop	{r4, r7, pc}
 80039c4:	20000004 	.word	0x20000004
 80039c8:	20004628 	.word	0x20004628
 80039cc:	2000462c 	.word	0x2000462c

080039d0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <SD_disk_status+0x14>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e002      	b.n	80039ea <SD_disk_status+0x1a>
	return Stat;
 80039e4:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <SD_disk_status+0x28>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	b2db      	uxtb	r3, r3
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000004 	.word	0x20000004

080039fc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4603      	mov	r3, r0
 8003a0a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <SD_disk_read+0x1c>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <SD_disk_read+0x20>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	e051      	b.n	8003ac0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003a1c:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <SD_disk_read+0xcc>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <SD_disk_read+0x32>
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e048      	b.n	8003ac0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003a2e:	4b27      	ldr	r3, [pc, #156]	; (8003acc <SD_disk_read+0xd0>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d102      	bne.n	8003a40 <SD_disk_read+0x44>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	025b      	lsls	r3, r3, #9
 8003a3e:	607b      	str	r3, [r7, #4]

	SELECT();
 8003a40:	f7ff fd2c 	bl	800349c <SELECT>

	if (count == 1)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d111      	bne.n	8003a6e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	2051      	movs	r0, #81	; 0x51
 8003a4e:	f7ff fe84 	bl	800375a <SD_SendCmd>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d129      	bne.n	8003aac <SD_disk_read+0xb0>
 8003a58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a5c:	68b8      	ldr	r0, [r7, #8]
 8003a5e:	f7ff fe0b 	bl	8003678 <SD_RxDataBlock>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d021      	beq.n	8003aac <SD_disk_read+0xb0>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	e01e      	b.n	8003aac <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	2052      	movs	r0, #82	; 0x52
 8003a72:	f7ff fe72 	bl	800375a <SD_SendCmd>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d117      	bne.n	8003aac <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003a7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a80:	68b8      	ldr	r0, [r7, #8]
 8003a82:	f7ff fdf9 	bl	8003678 <SD_RxDataBlock>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <SD_disk_read+0xa6>
				buff += 512;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003a92:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ed      	bne.n	8003a7c <SD_disk_read+0x80>
 8003aa0:	e000      	b.n	8003aa4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8003aa2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	204c      	movs	r0, #76	; 0x4c
 8003aa8:	f7ff fe57 	bl	800375a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8003aac:	f7ff fd04 	bl	80034b8 <DESELECT>
	SPI_RxByte();
 8003ab0:	f7ff fd44 	bl	800353c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bf14      	ite	ne
 8003aba:	2301      	movne	r3, #1
 8003abc:	2300      	moveq	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000004 	.word	0x20000004
 8003acc:	2000462c 	.word	0x2000462c

08003ad0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <SD_disk_write+0x1c>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <SD_disk_write+0x20>
 8003aec:	2304      	movs	r3, #4
 8003aee:	e06b      	b.n	8003bc8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003af0:	4b37      	ldr	r3, [pc, #220]	; (8003bd0 <SD_disk_write+0x100>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <SD_disk_write+0x32>
 8003afe:	2303      	movs	r3, #3
 8003b00:	e062      	b.n	8003bc8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8003b02:	4b33      	ldr	r3, [pc, #204]	; (8003bd0 <SD_disk_write+0x100>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <SD_disk_write+0x44>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e059      	b.n	8003bc8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003b14:	4b2f      	ldr	r3, [pc, #188]	; (8003bd4 <SD_disk_write+0x104>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d102      	bne.n	8003b26 <SD_disk_write+0x56>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	025b      	lsls	r3, r3, #9
 8003b24:	607b      	str	r3, [r7, #4]

	SELECT();
 8003b26:	f7ff fcb9 	bl	800349c <SELECT>

	if (count == 1)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d110      	bne.n	8003b52 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	2058      	movs	r0, #88	; 0x58
 8003b34:	f7ff fe11 	bl	800375a <SD_SendCmd>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d13a      	bne.n	8003bb4 <SD_disk_write+0xe4>
 8003b3e:	21fe      	movs	r1, #254	; 0xfe
 8003b40:	68b8      	ldr	r0, [r7, #8]
 8003b42:	f7ff fdc7 	bl	80036d4 <SD_TxDataBlock>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d033      	beq.n	8003bb4 <SD_disk_write+0xe4>
			count = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	e030      	b.n	8003bb4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8003b52:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <SD_disk_write+0x104>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8003b5e:	2100      	movs	r1, #0
 8003b60:	2077      	movs	r0, #119	; 0x77
 8003b62:	f7ff fdfa 	bl	800375a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8003b66:	6839      	ldr	r1, [r7, #0]
 8003b68:	2057      	movs	r0, #87	; 0x57
 8003b6a:	f7ff fdf6 	bl	800375a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	2059      	movs	r0, #89	; 0x59
 8003b72:	f7ff fdf2 	bl	800375a <SD_SendCmd>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d11b      	bne.n	8003bb4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003b7c:	21fc      	movs	r1, #252	; 0xfc
 8003b7e:	68b8      	ldr	r0, [r7, #8]
 8003b80:	f7ff fda8 	bl	80036d4 <SD_TxDataBlock>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <SD_disk_write+0xd0>
				buff += 512;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003b90:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1ee      	bne.n	8003b7c <SD_disk_write+0xac>
 8003b9e:	e000      	b.n	8003ba2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003ba0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8003ba2:	21fd      	movs	r1, #253	; 0xfd
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f7ff fd95 	bl	80036d4 <SD_TxDataBlock>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <SD_disk_write+0xe4>
			{
				count = 1;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8003bb4:	f7ff fc80 	bl	80034b8 <DESELECT>
	SPI_RxByte();
 8003bb8:	f7ff fcc0 	bl	800353c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf14      	ite	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	2300      	moveq	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000004 	.word	0x20000004
 8003bd4:	2000462c 	.word	0x2000462c

08003bd8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8003bd8:	b590      	push	{r4, r7, lr}
 8003bda:	b08b      	sub	sp, #44	; 0x2c
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	603a      	str	r2, [r7, #0]
 8003be2:	71fb      	strb	r3, [r7, #7]
 8003be4:	460b      	mov	r3, r1
 8003be6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <SD_disk_ioctl+0x1e>
 8003bf2:	2304      	movs	r3, #4
 8003bf4:	e115      	b.n	8003e22 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8003bfc:	79bb      	ldrb	r3, [r7, #6]
 8003bfe:	2b05      	cmp	r3, #5
 8003c00:	d124      	bne.n	8003c4c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d012      	beq.n	8003c30 <SD_disk_ioctl+0x58>
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	dc1a      	bgt.n	8003c44 <SD_disk_ioctl+0x6c>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <SD_disk_ioctl+0x40>
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d006      	beq.n	8003c24 <SD_disk_ioctl+0x4c>
 8003c16:	e015      	b.n	8003c44 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8003c18:	f7ff fd16 	bl	8003648 <SD_PowerOff>
			res = RES_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003c22:	e0fc      	b.n	8003e1e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8003c24:	f7ff fcce 	bl	80035c4 <SD_PowerOn>
			res = RES_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003c2e:	e0f6      	b.n	8003e1e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	1c5c      	adds	r4, r3, #1
 8003c34:	f7ff fd14 	bl	8003660 <SD_CheckPower>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003c42:	e0ec      	b.n	8003e1e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8003c44:	2304      	movs	r3, #4
 8003c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c4a:	e0e8      	b.n	8003e1e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003c4c:	4b77      	ldr	r3, [pc, #476]	; (8003e2c <SD_disk_ioctl+0x254>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <SD_disk_ioctl+0x86>
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e0e1      	b.n	8003e22 <SD_disk_ioctl+0x24a>

		SELECT();
 8003c5e:	f7ff fc1d 	bl	800349c <SELECT>

		switch (ctrl)
 8003c62:	79bb      	ldrb	r3, [r7, #6]
 8003c64:	2b0d      	cmp	r3, #13
 8003c66:	f200 80cb 	bhi.w	8003e00 <SD_disk_ioctl+0x228>
 8003c6a:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <SD_disk_ioctl+0x98>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003d6b 	.word	0x08003d6b
 8003c74:	08003ca9 	.word	0x08003ca9
 8003c78:	08003d5b 	.word	0x08003d5b
 8003c7c:	08003e01 	.word	0x08003e01
 8003c80:	08003e01 	.word	0x08003e01
 8003c84:	08003e01 	.word	0x08003e01
 8003c88:	08003e01 	.word	0x08003e01
 8003c8c:	08003e01 	.word	0x08003e01
 8003c90:	08003e01 	.word	0x08003e01
 8003c94:	08003e01 	.word	0x08003e01
 8003c98:	08003e01 	.word	0x08003e01
 8003c9c:	08003d7d 	.word	0x08003d7d
 8003ca0:	08003da1 	.word	0x08003da1
 8003ca4:	08003dc5 	.word	0x08003dc5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003ca8:	2100      	movs	r1, #0
 8003caa:	2049      	movs	r0, #73	; 0x49
 8003cac:	f7ff fd55 	bl	800375a <SD_SendCmd>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f040 80a8 	bne.w	8003e08 <SD_disk_ioctl+0x230>
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	2110      	movs	r1, #16
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fcda 	bl	8003678 <SD_RxDataBlock>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 809e 	beq.w	8003e08 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8003ccc:	7b3b      	ldrb	r3, [r7, #12]
 8003cce:	099b      	lsrs	r3, r3, #6
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d10e      	bne.n	8003cf4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003cd6:	7d7b      	ldrb	r3, [r7, #21]
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	7d3b      	ldrb	r3, [r7, #20]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8003cea:	8bfb      	ldrh	r3, [r7, #30]
 8003cec:	029a      	lsls	r2, r3, #10
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e02e      	b.n	8003d52 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003cf4:	7c7b      	ldrb	r3, [r7, #17]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	7dbb      	ldrb	r3, [r7, #22]
 8003cfe:	09db      	lsrs	r3, r3, #7
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	7d7b      	ldrb	r3, [r7, #21]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f003 0306 	and.w	r3, r3, #6
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	3302      	adds	r3, #2
 8003d18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003d1c:	7d3b      	ldrb	r3, [r7, #20]
 8003d1e:	099b      	lsrs	r3, r3, #6
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	7cbb      	ldrb	r3, [r7, #18]
 8003d32:	029b      	lsls	r3, r3, #10
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3301      	adds	r3, #1
 8003d42:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003d44:	8bfa      	ldrh	r2, [r7, #30]
 8003d46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d4a:	3b09      	subs	r3, #9
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8003d58:	e056      	b.n	8003e08 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d60:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003d68:	e055      	b.n	8003e16 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003d6a:	f7ff fc11 	bl	8003590 <SD_ReadyWait>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2bff      	cmp	r3, #255	; 0xff
 8003d72:	d14b      	bne.n	8003e0c <SD_disk_ioctl+0x234>
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003d7a:	e047      	b.n	8003e0c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	2049      	movs	r0, #73	; 0x49
 8003d80:	f7ff fceb 	bl	800375a <SD_SendCmd>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d142      	bne.n	8003e10 <SD_disk_ioctl+0x238>
 8003d8a:	2110      	movs	r1, #16
 8003d8c:	6a38      	ldr	r0, [r7, #32]
 8003d8e:	f7ff fc73 	bl	8003678 <SD_RxDataBlock>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d03b      	beq.n	8003e10 <SD_disk_ioctl+0x238>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003d9e:	e037      	b.n	8003e10 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003da0:	2100      	movs	r1, #0
 8003da2:	204a      	movs	r0, #74	; 0x4a
 8003da4:	f7ff fcd9 	bl	800375a <SD_SendCmd>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d132      	bne.n	8003e14 <SD_disk_ioctl+0x23c>
 8003dae:	2110      	movs	r1, #16
 8003db0:	6a38      	ldr	r0, [r7, #32]
 8003db2:	f7ff fc61 	bl	8003678 <SD_RxDataBlock>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d02b      	beq.n	8003e14 <SD_disk_ioctl+0x23c>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003dc2:	e027      	b.n	8003e14 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	207a      	movs	r0, #122	; 0x7a
 8003dc8:	f7ff fcc7 	bl	800375a <SD_SendCmd>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d116      	bne.n	8003e00 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003dd8:	e00b      	b.n	8003df2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8003dda:	6a3c      	ldr	r4, [r7, #32]
 8003ddc:	1c63      	adds	r3, r4, #1
 8003dde:	623b      	str	r3, [r7, #32]
 8003de0:	f7ff fbac 	bl	800353c <SPI_RxByte>
 8003de4:	4603      	mov	r3, r0
 8003de6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003de8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003dec:	3301      	adds	r3, #1
 8003dee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003df2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d9ef      	bls.n	8003dda <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8003e00:	2304      	movs	r3, #4
 8003e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e06:	e006      	b.n	8003e16 <SD_disk_ioctl+0x23e>
			break;
 8003e08:	bf00      	nop
 8003e0a:	e004      	b.n	8003e16 <SD_disk_ioctl+0x23e>
			break;
 8003e0c:	bf00      	nop
 8003e0e:	e002      	b.n	8003e16 <SD_disk_ioctl+0x23e>
			break;
 8003e10:	bf00      	nop
 8003e12:	e000      	b.n	8003e16 <SD_disk_ioctl+0x23e>
			break;
 8003e14:	bf00      	nop
		}

		DESELECT();
 8003e16:	f7ff fb4f 	bl	80034b8 <DESELECT>
		SPI_RxByte();
 8003e1a:	f7ff fb8f 	bl	800353c <SPI_RxByte>
	}

	return res;
 8003e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	372c      	adds	r7, #44	; 0x2c
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd90      	pop	{r4, r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000004 	.word	0x20000004

08003e30 <lsm6ds3tr_c_read_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	72fb      	strb	r3, [r7, #11]
 8003e40:	4613      	mov	r3, r2
 8003e42:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	685c      	ldr	r4, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	68d8      	ldr	r0, [r3, #12]
 8003e4c:	893b      	ldrh	r3, [r7, #8]
 8003e4e:	7af9      	ldrb	r1, [r7, #11]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	47a0      	blx	r4
 8003e54:	6178      	str	r0, [r7, #20]

  return ret;
 8003e56:	697b      	ldr	r3, [r7, #20]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd90      	pop	{r4, r7, pc}

08003e60 <lsm6ds3tr_c_write_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	72fb      	strb	r3, [r7, #11]
 8003e70:	4613      	mov	r3, r2
 8003e72:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681c      	ldr	r4, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	68d8      	ldr	r0, [r3, #12]
 8003e7c:	893b      	ldrh	r3, [r7, #8]
 8003e7e:	7af9      	ldrb	r1, [r7, #11]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	47a0      	blx	r4
 8003e84:	6178      	str	r0, [r7, #20]

  return ret;
 8003e86:	697b      	ldr	r3, [r7, #20]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd90      	pop	{r4, r7, pc}

08003e90 <lsm6ds3tr_c_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6ds3tr_c_from_fs2g_to_mg(int16_t lsb)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8003e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ea6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003ebc <lsm6ds3tr_c_from_fs2g_to_mg+0x2c>
 8003eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003eae:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	3d79db23 	.word	0x3d79db23

08003ec0 <lsm6ds3tr_c_from_fs500dps_to_mdps>:
{
  return ((float_t)lsb * 8.750f);
}

float_t lsm6ds3tr_c_from_fs500dps_to_mdps(int16_t lsb)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 17.50f);
 8003eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ed6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003eec <lsm6ds3tr_c_from_fs500dps_to_mdps+0x2c>
 8003eda:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003ede:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	418c0000 	.word	0x418c0000

08003ef0 <lsm6ds3tr_c_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_xl_t val)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003efc:	f107 0208 	add.w	r2, r7, #8
 8003f00:	2301      	movs	r3, #1
 8003f02:	2110      	movs	r1, #16
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ff93 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 8003f0a:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10f      	bne.n	8003f32 <lsm6ds3tr_c_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	7a3b      	ldrb	r3, [r7, #8]
 8003f1c:	f362 0383 	bfi	r3, r2, #2, #2
 8003f20:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003f22:	f107 0208 	add.w	r2, r7, #8
 8003f26:	2301      	movs	r3, #1
 8003f28:	2110      	movs	r1, #16
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ff98 	bl	8003e60 <lsm6ds3tr_c_write_reg>
 8003f30:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003f32:	68fb      	ldr	r3, [r7, #12]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <lsm6ds3tr_c_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_xl_t val)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003f48:	f107 0208 	add.w	r2, r7, #8
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	2110      	movs	r1, #16
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff ff6d 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 8003f56:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10f      	bne.n	8003f7e <lsm6ds3tr_c_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	7a3b      	ldrb	r3, [r7, #8]
 8003f68:	f362 1307 	bfi	r3, r2, #4, #4
 8003f6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003f6e:	f107 0208 	add.w	r2, r7, #8
 8003f72:	2301      	movs	r3, #1
 8003f74:	2110      	movs	r1, #16
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff ff72 	bl	8003e60 <lsm6ds3tr_c_write_reg>
 8003f7c:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <lsm6ds3tr_c_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_g_t val)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003f94:	f107 0208 	add.w	r2, r7, #8
 8003f98:	2301      	movs	r3, #1
 8003f9a:	2111      	movs	r1, #17
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ff47 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 8003fa2:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10f      	bne.n	8003fca <lsm6ds3tr_c_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	7a3b      	ldrb	r3, [r7, #8]
 8003fb4:	f362 0343 	bfi	r3, r2, #1, #3
 8003fb8:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003fba:	f107 0208 	add.w	r2, r7, #8
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	2111      	movs	r1, #17
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ff4c 	bl	8003e60 <lsm6ds3tr_c_write_reg>
 8003fc8:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003fca:	68fb      	ldr	r3, [r7, #12]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <lsm6ds3tr_c_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_g_t val)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003fe0:	f107 0208 	add.w	r2, r7, #8
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	2111      	movs	r1, #17
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ff21 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 8003fee:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10f      	bne.n	8004016 <lsm6ds3tr_c_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	7a3b      	ldrb	r3, [r7, #8]
 8004000:	f362 1307 	bfi	r3, r2, #4, #4
 8004004:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8004006:	f107 0208 	add.w	r2, r7, #8
 800400a:	2301      	movs	r3, #1
 800400c:	2111      	movs	r1, #17
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff ff26 	bl	8003e60 <lsm6ds3tr_c_write_reg>
 8004014:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8004016:	68fb      	ldr	r3, [r7, #12]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <lsm6ds3tr_c_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_block_data_update_set(stmdev_ctx_t *ctx,
                                          uint8_t val)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 800402c:	f107 0208 	add.w	r2, r7, #8
 8004030:	2301      	movs	r3, #1
 8004032:	2112      	movs	r1, #18
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff fefb 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 800403a:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10f      	bne.n	8004062 <lsm6ds3tr_c_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	b2da      	uxtb	r2, r3
 800404a:	7a3b      	ldrb	r3, [r7, #8]
 800404c:	f362 1386 	bfi	r3, r2, #6, #1
 8004050:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8004052:	f107 0208 	add.w	r2, r7, #8
 8004056:	2301      	movs	r3, #1
 8004058:	2112      	movs	r1, #18
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ff00 	bl	8003e60 <lsm6ds3tr_c_write_reg>
 8004060:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004062:	68fb      	ldr	r3, [r7, #12]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <lsm6ds3tr_c_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_G, buff, 6);
 8004076:	f107 020c 	add.w	r2, r7, #12
 800407a:	2306      	movs	r3, #6
 800407c:	2122      	movs	r1, #34	; 0x22
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff fed6 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 8004084:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004086:	7b7b      	ldrb	r3, [r7, #13]
 8004088:	b21a      	sxth	r2, r3
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004094:	b29b      	uxth	r3, r3
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	b29a      	uxth	r2, r3
 800409a:	7b3b      	ldrb	r3, [r7, #12]
 800409c:	b29b      	uxth	r3, r3
 800409e:	4413      	add	r3, r2
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	b21a      	sxth	r2, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80040a8:	7bfa      	ldrb	r2, [r7, #15]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	3302      	adds	r3, #2
 80040ae:	b212      	sxth	r2, r2
 80040b0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	3302      	adds	r3, #2
 80040b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	b29a      	uxth	r2, r3
 80040c0:	7bbb      	ldrb	r3, [r7, #14]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	4413      	add	r3, r2
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	3302      	adds	r3, #2
 80040cc:	b212      	sxth	r2, r2
 80040ce:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80040d0:	7c7a      	ldrb	r2, [r7, #17]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	3304      	adds	r3, #4
 80040d6:	b212      	sxth	r2, r2
 80040d8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	3304      	adds	r3, #4
 80040de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	7c3b      	ldrb	r3, [r7, #16]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	3304      	adds	r3, #4
 80040f4:	b212      	sxth	r2, r2
 80040f6:	801a      	strh	r2, [r3, #0]

  return ret;
 80040f8:	697b      	ldr	r3, [r7, #20]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <lsm6ds3tr_c_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_acceleration_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_XL, buff, 6);
 800410c:	f107 020c 	add.w	r2, r7, #12
 8004110:	2306      	movs	r3, #6
 8004112:	2128      	movs	r1, #40	; 0x28
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fe8b 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 800411a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800411c:	7b7b      	ldrb	r3, [r7, #13]
 800411e:	b21a      	sxth	r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800412a:	b29b      	uxth	r3, r3
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	b29a      	uxth	r2, r3
 8004130:	7b3b      	ldrb	r3, [r7, #12]
 8004132:	b29b      	uxth	r3, r3
 8004134:	4413      	add	r3, r2
 8004136:	b29b      	uxth	r3, r3
 8004138:	b21a      	sxth	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	3302      	adds	r3, #2
 8004144:	b212      	sxth	r2, r2
 8004146:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	3302      	adds	r3, #2
 800414c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004150:	b29b      	uxth	r3, r3
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	b29a      	uxth	r2, r3
 8004156:	7bbb      	ldrb	r3, [r7, #14]
 8004158:	b29b      	uxth	r3, r3
 800415a:	4413      	add	r3, r2
 800415c:	b29a      	uxth	r2, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	3302      	adds	r3, #2
 8004162:	b212      	sxth	r2, r2
 8004164:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004166:	7c7a      	ldrb	r2, [r7, #17]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	3304      	adds	r3, #4
 800416c:	b212      	sxth	r2, r2
 800416e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	3304      	adds	r3, #4
 8004174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004178:	b29b      	uxth	r3, r3
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	b29a      	uxth	r2, r3
 800417e:	7c3b      	ldrb	r3, [r7, #16]
 8004180:	b29b      	uxth	r3, r3
 8004182:	4413      	add	r3, r2
 8004184:	b29a      	uxth	r2, r3
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	3304      	adds	r3, #4
 800418a:	b212      	sxth	r2, r2
 800418c:	801a      	strh	r2, [r3, #0]

  return ret;
 800418e:	697b      	ldr	r3, [r7, #20]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <lsm6ds3tr_c_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_WHO_AM_I, buff, 1);
 80041a2:	2301      	movs	r3, #1
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	210f      	movs	r1, #15
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff fe41 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 80041ae:	60f8      	str	r0, [r7, #12]

  return ret;
 80041b0:	68fb      	ldr	r3, [r7, #12]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <lsm6ds3tr_c_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 80041c6:	f107 0208 	add.w	r2, r7, #8
 80041ca:	2301      	movs	r3, #1
 80041cc:	2112      	movs	r1, #18
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff fe2e 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 80041d4:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10f      	bne.n	80041fc <lsm6ds3tr_c_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	7a3b      	ldrb	r3, [r7, #8]
 80041e6:	f362 0300 	bfi	r3, r2, #0, #1
 80041ea:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 80041ec:	f107 0208 	add.w	r2, r7, #8
 80041f0:	2301      	movs	r3, #1
 80041f2:	2112      	movs	r1, #18
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fe33 	bl	8003e60 <lsm6ds3tr_c_write_reg>
 80041fa:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80041fc:	68fb      	ldr	r3, [r7, #12]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <lsm6ds3tr_c_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8004210:	f107 0208 	add.w	r2, r7, #8
 8004214:	2301      	movs	r3, #1
 8004216:	2112      	movs	r1, #18
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff fe09 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 800421e:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 8004220:	7a3b      	ldrb	r3, [r7, #8]
 8004222:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	701a      	strb	r2, [r3, #0]

  return ret;
 800422e:	68fb      	ldr	r3, [r7, #12]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <lsm6ds3tr_c_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_filter_analog_set(stmdev_ctx_t *ctx,
                                         lsm6ds3tr_c_bw0_xl_t val)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8004244:	f107 0208 	add.w	r2, r7, #8
 8004248:	2301      	movs	r3, #1
 800424a:	2110      	movs	r1, #16
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff fdef 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 8004252:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10f      	bne.n	800427a <lsm6ds3tr_c_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	b2da      	uxtb	r2, r3
 8004262:	7a3b      	ldrb	r3, [r7, #8]
 8004264:	f362 0300 	bfi	r3, r2, #0, #1
 8004268:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 800426a:	f107 0208 	add.w	r2, r7, #8
 800426e:	2301      	movs	r3, #1
 8004270:	2110      	movs	r1, #16
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff fdf4 	bl	8003e60 <lsm6ds3tr_c_write_reg>
 8004278:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800427a:	68fb      	ldr	r3, [r7, #12]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <lsm6ds3tr_c_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                         lsm6ds3tr_c_input_composite_t val)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 8004290:	f107 0208 	add.w	r2, r7, #8
 8004294:	2301      	movs	r3, #1
 8004296:	2117      	movs	r1, #23
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff fdc9 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 800429e:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d120      	bne.n	80042e8 <lsm6ds3tr_c_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	7a3b      	ldrb	r3, [r7, #8]
 80042b2:	f362 03c3 	bfi	r3, r2, #3, #1
 80042b6:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	7a3b      	ldrb	r3, [r7, #8]
 80042c2:	f362 1346 	bfi	r3, r2, #5, #2
 80042c6:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 80042c8:	7a3b      	ldrb	r3, [r7, #8]
 80042ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ce:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 80042d0:	7a3b      	ldrb	r3, [r7, #8]
 80042d2:	f36f 0382 	bfc	r3, #2, #1
 80042d6:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 80042d8:	f107 0208 	add.w	r2, r7, #8
 80042dc:	2301      	movs	r3, #1
 80042de:	2117      	movs	r1, #23
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fdbd 	bl	8003e60 <lsm6ds3tr_c_write_reg>
 80042e6:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 80042e8:	68fb      	ldr	r3, [r7, #12]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <lsm6ds3tr_c_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_band_pass_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_lpf1_sel_g_t val)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	460b      	mov	r3, r1
 80042fc:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl4_c_t ctrl4_c;
  lsm6ds3tr_c_ctrl6_c_t ctrl6_c;
  lsm6ds3tr_c_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 80042fe:	f107 0208 	add.w	r2, r7, #8
 8004302:	2301      	movs	r3, #1
 8004304:	2116      	movs	r1, #22
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff fd92 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 800430c:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl7_g, 1);

  if (ret == 0)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d157      	bne.n	80043c4 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	b2da      	uxtb	r2, r3
 800431e:	7a3b      	ldrb	r3, [r7, #8]
 8004320:	f362 1305 	bfi	r3, r2, #4, #2
 8004324:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	09db      	lsrs	r3, r3, #7
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	b2da      	uxtb	r2, r3
 8004332:	7a3b      	ldrb	r3, [r7, #8]
 8004334:	f362 1386 	bfi	r3, r2, #6, #1
 8004338:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 800433a:	f107 0208 	add.w	r2, r7, #8
 800433e:	2301      	movs	r3, #1
 8004340:	2116      	movs	r1, #22
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff fd8c 	bl	8003e60 <lsm6ds3tr_c_write_reg>
 8004348:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl7_g, 1);

    if (ret == 0)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d139      	bne.n	80043c4 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
    {
      ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 8004350:	f107 020c 	add.w	r2, r7, #12
 8004354:	2301      	movs	r3, #1
 8004356:	2115      	movs	r1, #21
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff fd69 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 800435e:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl6_c, 1);

      if (ret == 0)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d12e      	bne.n	80043c4 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	b2da      	uxtb	r2, r3
 800436e:	7b3b      	ldrb	r3, [r7, #12]
 8004370:	f362 0301 	bfi	r3, r2, #0, #2
 8004374:	733b      	strb	r3, [r7, #12]
        ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 8004376:	f107 020c 	add.w	r2, r7, #12
 800437a:	2301      	movs	r3, #1
 800437c:	2115      	movs	r1, #21
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fd6e 	bl	8003e60 <lsm6ds3tr_c_write_reg>
 8004384:	6178      	str	r0, [r7, #20]
                                    (uint8_t *)&ctrl6_c, 1);

        if (ret == 0)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11b      	bne.n	80043c4 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
        {
          ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 800438c:	f107 0210 	add.w	r2, r7, #16
 8004390:	2301      	movs	r3, #1
 8004392:	2113      	movs	r1, #19
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff fd4b 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 800439a:	6178      	str	r0, [r7, #20]
                                     (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d110      	bne.n	80043c4 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	08db      	lsrs	r3, r3, #3
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	7c3b      	ldrb	r3, [r7, #16]
 80043ae:	f362 0341 	bfi	r3, r2, #1, #1
 80043b2:	743b      	strb	r3, [r7, #16]
            ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 80043b4:	f107 0210 	add.w	r2, r7, #16
 80043b8:	2301      	movs	r3, #1
 80043ba:	2113      	movs	r1, #19
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fd4f 	bl	8003e60 <lsm6ds3tr_c_write_reg>
 80043c2:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 80043c4:	697b      	ldr	r3, [r7, #20]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <lsm6ds3tr_c_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_i2c_interface_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_i2c_disable_t val)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 80043da:	f107 0208 	add.w	r2, r7, #8
 80043de:	2301      	movs	r3, #1
 80043e0:	2113      	movs	r1, #19
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff fd24 	bl	8003e30 <lsm6ds3tr_c_read_reg>
 80043e8:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl4_c, 1);

  if (ret == 0)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10f      	bne.n	8004410 <lsm6ds3tr_c_i2c_interface_set+0x42>
  {
    ctrl4_c.i2c_disable = (uint8_t)val;
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	7a3b      	ldrb	r3, [r7, #8]
 80043fa:	f362 0382 	bfi	r3, r2, #2, #1
 80043fe:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8004400:	f107 0208 	add.w	r2, r7, #8
 8004404:	2301      	movs	r3, #1
 8004406:	2113      	movs	r1, #19
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff fd29 	bl	8003e60 <lsm6ds3tr_c_write_reg>
 800440e:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl4_c, 1);
  }

  return ret;
 8004410:	68fb      	ldr	r3, [r7, #12]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004422:	f001 f9c1 	bl	80057a8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004426:	f000 f881 	bl	800452c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800442a:	f000 fbe1 	bl	8004bf0 <MX_GPIO_Init>
  MX_ADC3_Init();
 800442e:	f000 f8eb 	bl	8004608 <MX_ADC3_Init>
  MX_I2C1_Init();
 8004432:	f000 f94f 	bl	80046d4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004436:	f000 f97b 	bl	8004730 <MX_I2C2_Init>
  MX_SPI1_Init();
 800443a:	f000 f9cd 	bl	80047d8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800443e:	f000 fb27 	bl	8004a90 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004442:	f000 fb4f 	bl	8004ae4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004446:	f000 fb77 	bl	8004b38 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800444a:	f000 fb9f 	bl	8004b8c <MX_USART6_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800444e:	f000 fbc7 	bl	8004be0 <MX_USB_OTG_FS_USB_Init>
  MX_TIM2_Init();
 8004452:	f000 f9f7 	bl	8004844 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004456:	f000 fa41 	bl	80048dc <MX_TIM3_Init>
  MX_TIM5_Init();
 800445a:	f000 facb 	bl	80049f4 <MX_TIM5_Init>
  MX_FATFS_Init();
 800445e:	f006 fc47 	bl	800acf0 <MX_FATFS_Init>
  MX_RTC_Init();
 8004462:	f000 f993 	bl	800478c <MX_RTC_Init>
  MX_CRC_Init();
 8004466:	f000 f921 	bl	80046ac <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin, GPIO_PIN_SET); // LED_ON Pin enabled
 800446a:	2201      	movs	r2, #1
 800446c:	2101      	movs	r1, #1
 800446e:	4821      	ldr	r0, [pc, #132]	; (80044f4 <main+0xd8>)
 8004470:	f001 ffe2 	bl	8006438 <HAL_GPIO_WritePin>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004474:	f009 f9d0 	bl	800d818 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of menuSemaphore */
  menuSemaphoreHandle = osSemaphoreNew(1, 1, &menuSemaphore_attributes);
 8004478:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <main+0xdc>)
 800447a:	2101      	movs	r1, #1
 800447c:	2001      	movs	r0, #1
 800447e:	f009 fbb1 	bl	800dbe4 <osSemaphoreNew>
 8004482:	4603      	mov	r3, r0
 8004484:	4a1d      	ldr	r2, [pc, #116]	; (80044fc <main+0xe0>)
 8004486:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartCommand */
  StartCommandHandle = osThreadNew(StartCommandWaitTask, NULL, &StartCommand_attributes);
 8004488:	4a1d      	ldr	r2, [pc, #116]	; (8004500 <main+0xe4>)
 800448a:	2100      	movs	r1, #0
 800448c:	481d      	ldr	r0, [pc, #116]	; (8004504 <main+0xe8>)
 800448e:	f009 fa0d 	bl	800d8ac <osThreadNew>
 8004492:	4603      	mov	r3, r0
 8004494:	4a1c      	ldr	r2, [pc, #112]	; (8004508 <main+0xec>)
 8004496:	6013      	str	r3, [r2, #0]

  /* creation of Menu */
  MenuHandle = osThreadNew(MenuTask, NULL, &Menu_attributes);
 8004498:	4a1c      	ldr	r2, [pc, #112]	; (800450c <main+0xf0>)
 800449a:	2100      	movs	r1, #0
 800449c:	481c      	ldr	r0, [pc, #112]	; (8004510 <main+0xf4>)
 800449e:	f009 fa05 	bl	800d8ac <osThreadNew>
 80044a2:	4603      	mov	r3, r0
 80044a4:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <main+0xf8>)
 80044a6:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of startCommandEvent */
  startCommandEventHandle = osEventFlagsNew(&startCommandEvent_attributes);
 80044a8:	481b      	ldr	r0, [pc, #108]	; (8004518 <main+0xfc>)
 80044aa:	f009 fab2 	bl	800da12 <osEventFlagsNew>
 80044ae:	4603      	mov	r3, r0
 80044b0:	4a1a      	ldr	r2, [pc, #104]	; (800451c <main+0x100>)
 80044b2:	6013      	str	r3, [r2, #0]

  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80044b4:	f009 f9d4 	bl	800d860 <osKernelStart>
	  // Usage : screen /dev/tty.usbserial-1120 (OR tty.usbserial-1130)  115200
	  //MENU SECTOR ------------------------------------------------------------------------


	  char userInput;
	  UART_Transmit_String("\r\nChoice: ");
 80044b8:	4819      	ldr	r0, [pc, #100]	; (8004520 <main+0x104>)
 80044ba:	f7fd f90f 	bl	80016dc <UART_Transmit_String>
	         HAL_UART_Receive(&huart1, (uint8_t *)&userInput, sizeof(userInput), HAL_MAX_DELAY);
 80044be:	1df9      	adds	r1, r7, #7
 80044c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044c4:	2201      	movs	r2, #1
 80044c6:	4817      	ldr	r0, [pc, #92]	; (8004524 <main+0x108>)
 80044c8:	f005 fd05 	bl	8009ed6 <HAL_UART_Receive>

	         switch (userInput)
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	2b0a      	cmp	r3, #10
 80044d0:	d002      	beq.n	80044d8 <main+0xbc>
 80044d2:	2b0d      	cmp	r3, #13
 80044d4:	d104      	bne.n	80044e0 <main+0xc4>
	         {
	         case '\r': // Ignore carriage return characters
	             break;
 80044d6:	e008      	b.n	80044ea <main+0xce>
	         case '\n': // Process command on new line (Enter pressed)
	             UART_Transmit_String("\r\n"); // Move to a new line after the command
 80044d8:	4813      	ldr	r0, [pc, #76]	; (8004528 <main+0x10c>)
 80044da:	f7fd f8ff 	bl	80016dc <UART_Transmit_String>
	             break;
 80044de:	e004      	b.n	80044ea <main+0xce>
	         default:
	             menu(userInput);
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fd fd3c 	bl	8001f60 <menu>
	             break;
 80044e8:	bf00      	nop
	         }

	         HAL_Delay(100);
 80044ea:	2064      	movs	r0, #100	; 0x64
 80044ec:	f001 f9ce 	bl	800588c <HAL_Delay>
  {
 80044f0:	e7e2      	b.n	80044b8 <main+0x9c>
 80044f2:	bf00      	nop
 80044f4:	40020400 	.word	0x40020400
 80044f8:	0801faa0 	.word	0x0801faa0
 80044fc:	20004990 	.word	0x20004990
 8004500:	0801fa58 	.word	0x0801fa58
 8004504:	08004dd5 	.word	0x08004dd5
 8004508:	20004988 	.word	0x20004988
 800450c:	0801fa7c 	.word	0x0801fa7c
 8004510:	08004e0d 	.word	0x08004e0d
 8004514:	2000498c 	.word	0x2000498c
 8004518:	0801fab0 	.word	0x0801fab0
 800451c:	20004994 	.word	0x20004994
 8004520:	0801f90c 	.word	0x0801f90c
 8004524:	20004878 	.word	0x20004878
 8004528:	0801f918 	.word	0x0801f918

0800452c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b094      	sub	sp, #80	; 0x50
 8004530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004532:	f107 0320 	add.w	r3, r7, #32
 8004536:	2230      	movs	r2, #48	; 0x30
 8004538:	2100      	movs	r1, #0
 800453a:	4618      	mov	r0, r3
 800453c:	f015 fca8 	bl	8019e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004540:	f107 030c 	add.w	r3, r7, #12
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004550:	2300      	movs	r3, #0
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	4b2a      	ldr	r3, [pc, #168]	; (8004600 <SystemClock_Config+0xd4>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	4a29      	ldr	r2, [pc, #164]	; (8004600 <SystemClock_Config+0xd4>)
 800455a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455e:	6413      	str	r3, [r2, #64]	; 0x40
 8004560:	4b27      	ldr	r3, [pc, #156]	; (8004600 <SystemClock_Config+0xd4>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800456c:	2300      	movs	r3, #0
 800456e:	607b      	str	r3, [r7, #4]
 8004570:	4b24      	ldr	r3, [pc, #144]	; (8004604 <SystemClock_Config+0xd8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a23      	ldr	r2, [pc, #140]	; (8004604 <SystemClock_Config+0xd8>)
 8004576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	4b21      	ldr	r3, [pc, #132]	; (8004604 <SystemClock_Config+0xd8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8004588:	230b      	movs	r3, #11
 800458a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800458c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004592:	2301      	movs	r3, #1
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004596:	2310      	movs	r3, #16
 8004598:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800459a:	2301      	movs	r3, #1
 800459c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800459e:	2302      	movs	r3, #2
 80045a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80045a8:	230f      	movs	r3, #15
 80045aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80045ac:	2390      	movs	r3, #144	; 0x90
 80045ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045b0:	2302      	movs	r3, #2
 80045b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80045b4:	2305      	movs	r3, #5
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045b8:	f107 0320 	add.w	r3, r7, #32
 80045bc:	4618      	mov	r0, r3
 80045be:	f003 fbad 	bl	8007d1c <HAL_RCC_OscConfig>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80045c8:	f000 fc40 	bl	8004e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045cc:	230f      	movs	r3, #15
 80045ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80045d0:	2300      	movs	r3, #0
 80045d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80045e0:	f107 030c 	add.w	r3, r7, #12
 80045e4:	2100      	movs	r1, #0
 80045e6:	4618      	mov	r0, r3
 80045e8:	f003 fe10 	bl	800820c <HAL_RCC_ClockConfig>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80045f2:	f000 fc2b 	bl	8004e4c <Error_Handler>
  }
}
 80045f6:	bf00      	nop
 80045f8:	3750      	adds	r7, #80	; 0x50
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	40007000 	.word	0x40007000

08004608 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800460e:	463b      	mov	r3, r7
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800461a:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <MX_ADC3_Init+0x98>)
 800461c:	4a21      	ldr	r2, [pc, #132]	; (80046a4 <MX_ADC3_Init+0x9c>)
 800461e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004620:	4b1f      	ldr	r3, [pc, #124]	; (80046a0 <MX_ADC3_Init+0x98>)
 8004622:	2200      	movs	r2, #0
 8004624:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004626:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <MX_ADC3_Init+0x98>)
 8004628:	2200      	movs	r2, #0
 800462a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800462c:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <MX_ADC3_Init+0x98>)
 800462e:	2200      	movs	r2, #0
 8004630:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004632:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <MX_ADC3_Init+0x98>)
 8004634:	2200      	movs	r2, #0
 8004636:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <MX_ADC3_Init+0x98>)
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <MX_ADC3_Init+0x98>)
 8004642:	2200      	movs	r2, #0
 8004644:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004646:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <MX_ADC3_Init+0x98>)
 8004648:	4a17      	ldr	r2, [pc, #92]	; (80046a8 <MX_ADC3_Init+0xa0>)
 800464a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <MX_ADC3_Init+0x98>)
 800464e:	2200      	movs	r2, #0
 8004650:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8004652:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <MX_ADC3_Init+0x98>)
 8004654:	2201      	movs	r2, #1
 8004656:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <MX_ADC3_Init+0x98>)
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <MX_ADC3_Init+0x98>)
 8004662:	2201      	movs	r2, #1
 8004664:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004666:	480e      	ldr	r0, [pc, #56]	; (80046a0 <MX_ADC3_Init+0x98>)
 8004668:	f001 f934 	bl	80058d4 <HAL_ADC_Init>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8004672:	f000 fbeb 	bl	8004e4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004676:	230c      	movs	r3, #12
 8004678:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800467a:	2301      	movs	r3, #1
 800467c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004682:	463b      	mov	r3, r7
 8004684:	4619      	mov	r1, r3
 8004686:	4806      	ldr	r0, [pc, #24]	; (80046a0 <MX_ADC3_Init+0x98>)
 8004688:	f001 f968 	bl	800595c <HAL_ADC_ConfigChannel>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8004692:	f000 fbdb 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20004630 	.word	0x20004630
 80046a4:	40012200 	.word	0x40012200
 80046a8:	0f000001 	.word	0x0f000001

080046ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <MX_CRC_Init+0x20>)
 80046b2:	4a07      	ldr	r2, [pc, #28]	; (80046d0 <MX_CRC_Init+0x24>)
 80046b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80046b6:	4805      	ldr	r0, [pc, #20]	; (80046cc <MX_CRC_Init+0x20>)
 80046b8:	f001 fc7f 	bl	8005fba <HAL_CRC_Init>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80046c2:	f000 fbc3 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20004678 	.word	0x20004678
 80046d0:	40023000 	.word	0x40023000

080046d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80046d8:	4b12      	ldr	r3, [pc, #72]	; (8004724 <MX_I2C1_Init+0x50>)
 80046da:	4a13      	ldr	r2, [pc, #76]	; (8004728 <MX_I2C1_Init+0x54>)
 80046dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <MX_I2C1_Init+0x50>)
 80046e0:	4a12      	ldr	r2, [pc, #72]	; (800472c <MX_I2C1_Init+0x58>)
 80046e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <MX_I2C1_Init+0x50>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80046ea:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <MX_I2C1_Init+0x50>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <MX_I2C1_Init+0x50>)
 80046f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046f8:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <MX_I2C1_Init+0x50>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <MX_I2C1_Init+0x50>)
 8004700:	2200      	movs	r2, #0
 8004702:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004704:	4b07      	ldr	r3, [pc, #28]	; (8004724 <MX_I2C1_Init+0x50>)
 8004706:	2200      	movs	r2, #0
 8004708:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <MX_I2C1_Init+0x50>)
 800470c:	2200      	movs	r2, #0
 800470e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004710:	4804      	ldr	r0, [pc, #16]	; (8004724 <MX_I2C1_Init+0x50>)
 8004712:	f001 fecf 	bl	80064b4 <HAL_I2C_Init>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800471c:	f000 fb96 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004720:	bf00      	nop
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20004680 	.word	0x20004680
 8004728:	40005400 	.word	0x40005400
 800472c:	000186a0 	.word	0x000186a0

08004730 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004734:	4b12      	ldr	r3, [pc, #72]	; (8004780 <MX_I2C2_Init+0x50>)
 8004736:	4a13      	ldr	r2, [pc, #76]	; (8004784 <MX_I2C2_Init+0x54>)
 8004738:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800473a:	4b11      	ldr	r3, [pc, #68]	; (8004780 <MX_I2C2_Init+0x50>)
 800473c:	4a12      	ldr	r2, [pc, #72]	; (8004788 <MX_I2C2_Init+0x58>)
 800473e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <MX_I2C2_Init+0x50>)
 8004742:	2200      	movs	r2, #0
 8004744:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004746:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <MX_I2C2_Init+0x50>)
 8004748:	2200      	movs	r2, #0
 800474a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800474c:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <MX_I2C2_Init+0x50>)
 800474e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004752:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004754:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <MX_I2C2_Init+0x50>)
 8004756:	2200      	movs	r2, #0
 8004758:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800475a:	4b09      	ldr	r3, [pc, #36]	; (8004780 <MX_I2C2_Init+0x50>)
 800475c:	2200      	movs	r2, #0
 800475e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004760:	4b07      	ldr	r3, [pc, #28]	; (8004780 <MX_I2C2_Init+0x50>)
 8004762:	2200      	movs	r2, #0
 8004764:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004766:	4b06      	ldr	r3, [pc, #24]	; (8004780 <MX_I2C2_Init+0x50>)
 8004768:	2200      	movs	r2, #0
 800476a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800476c:	4804      	ldr	r0, [pc, #16]	; (8004780 <MX_I2C2_Init+0x50>)
 800476e:	f001 fea1 	bl	80064b4 <HAL_I2C_Init>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004778:	f000 fb68 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800477c:	bf00      	nop
 800477e:	bd80      	pop	{r7, pc}
 8004780:	200046d4 	.word	0x200046d4
 8004784:	40005800 	.word	0x40005800
 8004788:	000186a0 	.word	0x000186a0

0800478c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <MX_RTC_Init+0x44>)
 8004792:	4a10      	ldr	r2, [pc, #64]	; (80047d4 <MX_RTC_Init+0x48>)
 8004794:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004796:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <MX_RTC_Init+0x44>)
 8004798:	2200      	movs	r2, #0
 800479a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800479c:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <MX_RTC_Init+0x44>)
 800479e:	227f      	movs	r2, #127	; 0x7f
 80047a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <MX_RTC_Init+0x44>)
 80047a4:	22ff      	movs	r2, #255	; 0xff
 80047a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80047a8:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <MX_RTC_Init+0x44>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <MX_RTC_Init+0x44>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <MX_RTC_Init+0x44>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80047ba:	4805      	ldr	r0, [pc, #20]	; (80047d0 <MX_RTC_Init+0x44>)
 80047bc:	f003 ffe8 	bl	8008790 <HAL_RTC_Init>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80047c6:	f000 fb41 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20004728 	.word	0x20004728
 80047d4:	40002800 	.word	0x40002800

080047d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80047dc:	4b17      	ldr	r3, [pc, #92]	; (800483c <MX_SPI1_Init+0x64>)
 80047de:	4a18      	ldr	r2, [pc, #96]	; (8004840 <MX_SPI1_Init+0x68>)
 80047e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80047e2:	4b16      	ldr	r3, [pc, #88]	; (800483c <MX_SPI1_Init+0x64>)
 80047e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80047e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80047ea:	4b14      	ldr	r3, [pc, #80]	; (800483c <MX_SPI1_Init+0x64>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80047f0:	4b12      	ldr	r3, [pc, #72]	; (800483c <MX_SPI1_Init+0x64>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047f6:	4b11      	ldr	r3, [pc, #68]	; (800483c <MX_SPI1_Init+0x64>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047fc:	4b0f      	ldr	r3, [pc, #60]	; (800483c <MX_SPI1_Init+0x64>)
 80047fe:	2200      	movs	r2, #0
 8004800:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004802:	4b0e      	ldr	r3, [pc, #56]	; (800483c <MX_SPI1_Init+0x64>)
 8004804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004808:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800480a:	4b0c      	ldr	r3, [pc, #48]	; (800483c <MX_SPI1_Init+0x64>)
 800480c:	2230      	movs	r2, #48	; 0x30
 800480e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004810:	4b0a      	ldr	r3, [pc, #40]	; (800483c <MX_SPI1_Init+0x64>)
 8004812:	2200      	movs	r2, #0
 8004814:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004816:	4b09      	ldr	r3, [pc, #36]	; (800483c <MX_SPI1_Init+0x64>)
 8004818:	2200      	movs	r2, #0
 800481a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800481c:	4b07      	ldr	r3, [pc, #28]	; (800483c <MX_SPI1_Init+0x64>)
 800481e:	2200      	movs	r2, #0
 8004820:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <MX_SPI1_Init+0x64>)
 8004824:	220a      	movs	r2, #10
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004828:	4804      	ldr	r0, [pc, #16]	; (800483c <MX_SPI1_Init+0x64>)
 800482a:	f004 f8ab 	bl	8008984 <HAL_SPI_Init>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004834:	f000 fb0a 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004838:	bf00      	nop
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20004748 	.word	0x20004748
 8004840:	40013000 	.word	0x40013000

08004844 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800484a:	f107 0308 	add.w	r3, r7, #8
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	605a      	str	r2, [r3, #4]
 8004854:	609a      	str	r2, [r3, #8]
 8004856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004858:	463b      	mov	r3, r7
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <MX_TIM2_Init+0x94>)
 8004862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004866:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004868:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <MX_TIM2_Init+0x94>)
 800486a:	2200      	movs	r2, #0
 800486c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800486e:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <MX_TIM2_Init+0x94>)
 8004870:	2200      	movs	r2, #0
 8004872:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004874:	4b18      	ldr	r3, [pc, #96]	; (80048d8 <MX_TIM2_Init+0x94>)
 8004876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800487a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800487c:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <MX_TIM2_Init+0x94>)
 800487e:	2200      	movs	r2, #0
 8004880:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <MX_TIM2_Init+0x94>)
 8004884:	2200      	movs	r2, #0
 8004886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004888:	4813      	ldr	r0, [pc, #76]	; (80048d8 <MX_TIM2_Init+0x94>)
 800488a:	f004 fcad 	bl	80091e8 <HAL_TIM_Base_Init>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004894:	f000 fada 	bl	8004e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800489c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800489e:	f107 0308 	add.w	r3, r7, #8
 80048a2:	4619      	mov	r1, r3
 80048a4:	480c      	ldr	r0, [pc, #48]	; (80048d8 <MX_TIM2_Init+0x94>)
 80048a6:	f004 fe09 	bl	80094bc <HAL_TIM_ConfigClockSource>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80048b0:	f000 facc 	bl	8004e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048b4:	2300      	movs	r3, #0
 80048b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048b8:	2300      	movs	r3, #0
 80048ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048bc:	463b      	mov	r3, r7
 80048be:	4619      	mov	r1, r3
 80048c0:	4805      	ldr	r0, [pc, #20]	; (80048d8 <MX_TIM2_Init+0x94>)
 80048c2:	f005 f9ad 	bl	8009c20 <HAL_TIMEx_MasterConfigSynchronization>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80048cc:	f000 fabe 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80048d0:	bf00      	nop
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	200047a0 	.word	0x200047a0

080048dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08e      	sub	sp, #56	; 0x38
 80048e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	609a      	str	r2, [r3, #8]
 80048ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048f0:	f107 0320 	add.w	r3, r7, #32
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048fa:	1d3b      	adds	r3, r7, #4
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	611a      	str	r2, [r3, #16]
 8004908:	615a      	str	r2, [r3, #20]
 800490a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800490c:	4b37      	ldr	r3, [pc, #220]	; (80049ec <MX_TIM3_Init+0x110>)
 800490e:	4a38      	ldr	r2, [pc, #224]	; (80049f0 <MX_TIM3_Init+0x114>)
 8004910:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004912:	4b36      	ldr	r3, [pc, #216]	; (80049ec <MX_TIM3_Init+0x110>)
 8004914:	2200      	movs	r2, #0
 8004916:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004918:	4b34      	ldr	r3, [pc, #208]	; (80049ec <MX_TIM3_Init+0x110>)
 800491a:	2200      	movs	r2, #0
 800491c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800491e:	4b33      	ldr	r3, [pc, #204]	; (80049ec <MX_TIM3_Init+0x110>)
 8004920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004924:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004926:	4b31      	ldr	r3, [pc, #196]	; (80049ec <MX_TIM3_Init+0x110>)
 8004928:	2200      	movs	r2, #0
 800492a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800492c:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <MX_TIM3_Init+0x110>)
 800492e:	2200      	movs	r2, #0
 8004930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004932:	482e      	ldr	r0, [pc, #184]	; (80049ec <MX_TIM3_Init+0x110>)
 8004934:	f004 fc58 	bl	80091e8 <HAL_TIM_Base_Init>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800493e:	f000 fa85 	bl	8004e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004946:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004948:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800494c:	4619      	mov	r1, r3
 800494e:	4827      	ldr	r0, [pc, #156]	; (80049ec <MX_TIM3_Init+0x110>)
 8004950:	f004 fdb4 	bl	80094bc <HAL_TIM_ConfigClockSource>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800495a:	f000 fa77 	bl	8004e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800495e:	4823      	ldr	r0, [pc, #140]	; (80049ec <MX_TIM3_Init+0x110>)
 8004960:	f004 fc91 	bl	8009286 <HAL_TIM_PWM_Init>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800496a:	f000 fa6f 	bl	8004e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800496e:	2300      	movs	r3, #0
 8004970:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004972:	2300      	movs	r3, #0
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004976:	f107 0320 	add.w	r3, r7, #32
 800497a:	4619      	mov	r1, r3
 800497c:	481b      	ldr	r0, [pc, #108]	; (80049ec <MX_TIM3_Init+0x110>)
 800497e:	f005 f94f 	bl	8009c20 <HAL_TIMEx_MasterConfigSynchronization>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004988:	f000 fa60 	bl	8004e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800498c:	2360      	movs	r3, #96	; 0x60
 800498e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800499c:	1d3b      	adds	r3, r7, #4
 800499e:	2204      	movs	r2, #4
 80049a0:	4619      	mov	r1, r3
 80049a2:	4812      	ldr	r0, [pc, #72]	; (80049ec <MX_TIM3_Init+0x110>)
 80049a4:	f004 fcc8 	bl	8009338 <HAL_TIM_PWM_ConfigChannel>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80049ae:	f000 fa4d 	bl	8004e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80049b2:	1d3b      	adds	r3, r7, #4
 80049b4:	2208      	movs	r2, #8
 80049b6:	4619      	mov	r1, r3
 80049b8:	480c      	ldr	r0, [pc, #48]	; (80049ec <MX_TIM3_Init+0x110>)
 80049ba:	f004 fcbd 	bl	8009338 <HAL_TIM_PWM_ConfigChannel>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80049c4:	f000 fa42 	bl	8004e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80049c8:	1d3b      	adds	r3, r7, #4
 80049ca:	220c      	movs	r2, #12
 80049cc:	4619      	mov	r1, r3
 80049ce:	4807      	ldr	r0, [pc, #28]	; (80049ec <MX_TIM3_Init+0x110>)
 80049d0:	f004 fcb2 	bl	8009338 <HAL_TIM_PWM_ConfigChannel>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80049da:	f000 fa37 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80049de:	4803      	ldr	r0, [pc, #12]	; (80049ec <MX_TIM3_Init+0x110>)
 80049e0:	f000 fc08 	bl	80051f4 <HAL_TIM_MspPostInit>

}
 80049e4:	bf00      	nop
 80049e6:	3738      	adds	r7, #56	; 0x38
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	200047e8 	.word	0x200047e8
 80049f0:	40000400 	.word	0x40000400

080049f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049fa:	f107 0308 	add.w	r3, r7, #8
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	605a      	str	r2, [r3, #4]
 8004a04:	609a      	str	r2, [r3, #8]
 8004a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a08:	463b      	mov	r3, r7
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004a10:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <MX_TIM5_Init+0x94>)
 8004a12:	4a1e      	ldr	r2, [pc, #120]	; (8004a8c <MX_TIM5_Init+0x98>)
 8004a14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004a16:	4b1c      	ldr	r3, [pc, #112]	; (8004a88 <MX_TIM5_Init+0x94>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a1c:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <MX_TIM5_Init+0x94>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004a22:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <MX_TIM5_Init+0x94>)
 8004a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a2a:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <MX_TIM5_Init+0x94>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a30:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <MX_TIM5_Init+0x94>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004a36:	4814      	ldr	r0, [pc, #80]	; (8004a88 <MX_TIM5_Init+0x94>)
 8004a38:	f004 fbd6 	bl	80091e8 <HAL_TIM_Base_Init>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8004a42:	f000 fa03 	bl	8004e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004a4c:	f107 0308 	add.w	r3, r7, #8
 8004a50:	4619      	mov	r1, r3
 8004a52:	480d      	ldr	r0, [pc, #52]	; (8004a88 <MX_TIM5_Init+0x94>)
 8004a54:	f004 fd32 	bl	80094bc <HAL_TIM_ConfigClockSource>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8004a5e:	f000 f9f5 	bl	8004e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a62:	2300      	movs	r3, #0
 8004a64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004a6a:	463b      	mov	r3, r7
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4806      	ldr	r0, [pc, #24]	; (8004a88 <MX_TIM5_Init+0x94>)
 8004a70:	f005 f8d6 	bl	8009c20 <HAL_TIMEx_MasterConfigSynchronization>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8004a7a:	f000 f9e7 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004a7e:	bf00      	nop
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20004830 	.word	0x20004830
 8004a8c:	40000c00 	.word	0x40000c00

08004a90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a94:	4b11      	ldr	r3, [pc, #68]	; (8004adc <MX_USART1_UART_Init+0x4c>)
 8004a96:	4a12      	ldr	r2, [pc, #72]	; (8004ae0 <MX_USART1_UART_Init+0x50>)
 8004a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004a9a:	4b10      	ldr	r3, [pc, #64]	; (8004adc <MX_USART1_UART_Init+0x4c>)
 8004a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <MX_USART1_UART_Init+0x4c>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <MX_USART1_UART_Init+0x4c>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <MX_USART1_UART_Init+0x4c>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004ab4:	4b09      	ldr	r3, [pc, #36]	; (8004adc <MX_USART1_UART_Init+0x4c>)
 8004ab6:	220c      	movs	r2, #12
 8004ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aba:	4b08      	ldr	r3, [pc, #32]	; (8004adc <MX_USART1_UART_Init+0x4c>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ac0:	4b06      	ldr	r3, [pc, #24]	; (8004adc <MX_USART1_UART_Init+0x4c>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004ac6:	4805      	ldr	r0, [pc, #20]	; (8004adc <MX_USART1_UART_Init+0x4c>)
 8004ac8:	f005 f926 	bl	8009d18 <HAL_UART_Init>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004ad2:	f000 f9bb 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20004878 	.word	0x20004878
 8004ae0:	40011000 	.word	0x40011000

08004ae4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ae8:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <MX_USART2_UART_Init+0x4c>)
 8004aea:	4a12      	ldr	r2, [pc, #72]	; (8004b34 <MX_USART2_UART_Init+0x50>)
 8004aec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004aee:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <MX_USART2_UART_Init+0x4c>)
 8004af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004af4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004af6:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <MX_USART2_UART_Init+0x4c>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004afc:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <MX_USART2_UART_Init+0x4c>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004b02:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <MX_USART2_UART_Init+0x4c>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004b08:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <MX_USART2_UART_Init+0x4c>)
 8004b0a:	220c      	movs	r2, #12
 8004b0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b0e:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <MX_USART2_UART_Init+0x4c>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <MX_USART2_UART_Init+0x4c>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004b1a:	4805      	ldr	r0, [pc, #20]	; (8004b30 <MX_USART2_UART_Init+0x4c>)
 8004b1c:	f005 f8fc 	bl	8009d18 <HAL_UART_Init>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004b26:	f000 f991 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004b2a:	bf00      	nop
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	200048bc 	.word	0x200048bc
 8004b34:	40004400 	.word	0x40004400

08004b38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b3c:	4b11      	ldr	r3, [pc, #68]	; (8004b84 <MX_USART3_UART_Init+0x4c>)
 8004b3e:	4a12      	ldr	r2, [pc, #72]	; (8004b88 <MX_USART3_UART_Init+0x50>)
 8004b40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <MX_USART3_UART_Init+0x4c>)
 8004b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <MX_USART3_UART_Init+0x4c>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <MX_USART3_UART_Init+0x4c>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <MX_USART3_UART_Init+0x4c>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <MX_USART3_UART_Init+0x4c>)
 8004b5e:	220c      	movs	r2, #12
 8004b60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b62:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <MX_USART3_UART_Init+0x4c>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b68:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <MX_USART3_UART_Init+0x4c>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b6e:	4805      	ldr	r0, [pc, #20]	; (8004b84 <MX_USART3_UART_Init+0x4c>)
 8004b70:	f005 f8d2 	bl	8009d18 <HAL_UART_Init>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004b7a:	f000 f967 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20004900 	.word	0x20004900
 8004b88:	40004800 	.word	0x40004800

08004b8c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004b90:	4b11      	ldr	r3, [pc, #68]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004b92:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <MX_USART6_UART_Init+0x50>)
 8004b94:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b9c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004baa:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004bb0:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004bb2:	220c      	movs	r2, #12
 8004bb4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bb6:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bbc:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004bc2:	4805      	ldr	r0, [pc, #20]	; (8004bd8 <MX_USART6_UART_Init+0x4c>)
 8004bc4:	f005 f8a8 	bl	8009d18 <HAL_UART_Init>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004bce:	f000 f93d 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004bd2:	bf00      	nop
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20004944 	.word	0x20004944
 8004bdc:	40011400 	.word	0x40011400

08004be0 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004be4:	bf00      	nop
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	; 0x28
 8004bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf6:	f107 0314 	add.w	r3, r7, #20
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	605a      	str	r2, [r3, #4]
 8004c00:	609a      	str	r2, [r3, #8]
 8004c02:	60da      	str	r2, [r3, #12]
 8004c04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	4b6e      	ldr	r3, [pc, #440]	; (8004dc4 <MX_GPIO_Init+0x1d4>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	4a6d      	ldr	r2, [pc, #436]	; (8004dc4 <MX_GPIO_Init+0x1d4>)
 8004c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c14:	6313      	str	r3, [r2, #48]	; 0x30
 8004c16:	4b6b      	ldr	r3, [pc, #428]	; (8004dc4 <MX_GPIO_Init+0x1d4>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	4b67      	ldr	r3, [pc, #412]	; (8004dc4 <MX_GPIO_Init+0x1d4>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	4a66      	ldr	r2, [pc, #408]	; (8004dc4 <MX_GPIO_Init+0x1d4>)
 8004c2c:	f043 0304 	orr.w	r3, r3, #4
 8004c30:	6313      	str	r3, [r2, #48]	; 0x30
 8004c32:	4b64      	ldr	r3, [pc, #400]	; (8004dc4 <MX_GPIO_Init+0x1d4>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	4b60      	ldr	r3, [pc, #384]	; (8004dc4 <MX_GPIO_Init+0x1d4>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	4a5f      	ldr	r2, [pc, #380]	; (8004dc4 <MX_GPIO_Init+0x1d4>)
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4e:	4b5d      	ldr	r3, [pc, #372]	; (8004dc4 <MX_GPIO_Init+0x1d4>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	60bb      	str	r3, [r7, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
 8004c5e:	4b59      	ldr	r3, [pc, #356]	; (8004dc4 <MX_GPIO_Init+0x1d4>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	4a58      	ldr	r2, [pc, #352]	; (8004dc4 <MX_GPIO_Init+0x1d4>)
 8004c64:	f043 0302 	orr.w	r3, r3, #2
 8004c68:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6a:	4b56      	ldr	r3, [pc, #344]	; (8004dc4 <MX_GPIO_Init+0x1d4>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 8004c76:	2200      	movs	r2, #0
 8004c78:	f248 0103 	movw	r1, #32771	; 0x8003
 8004c7c:	4852      	ldr	r0, [pc, #328]	; (8004dc8 <MX_GPIO_Init+0x1d8>)
 8004c7e:	f001 fbdb 	bl	8006438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004c82:	2201      	movs	r2, #1
 8004c84:	2110      	movs	r1, #16
 8004c86:	4850      	ldr	r0, [pc, #320]	; (8004dc8 <MX_GPIO_Init+0x1d8>)
 8004c88:	f001 fbd6 	bl	8006438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2120      	movs	r1, #32
 8004c90:	484e      	ldr	r0, [pc, #312]	; (8004dcc <MX_GPIO_Init+0x1dc>)
 8004c92:	f001 fbd1 	bl	8006438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 8004c96:	2200      	movs	r2, #0
 8004c98:	2147      	movs	r1, #71	; 0x47
 8004c9a:	484d      	ldr	r0, [pc, #308]	; (8004dd0 <MX_GPIO_Init+0x1e0>)
 8004c9c:	f001 fbcc 	bl	8006438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8004ca0:	2313      	movs	r3, #19
 8004ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cac:	f107 0314 	add.w	r3, r7, #20
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4846      	ldr	r0, [pc, #280]	; (8004dcc <MX_GPIO_Init+0x1dc>)
 8004cb4:	f001 fa24 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 8004cb8:	f248 0303 	movw	r3, #32771	; 0x8003
 8004cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cca:	f107 0314 	add.w	r3, r7, #20
 8004cce:	4619      	mov	r1, r3
 8004cd0:	483d      	ldr	r0, [pc, #244]	; (8004dc8 <MX_GPIO_Init+0x1d8>)
 8004cd2:	f001 fa15 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004cd6:	2310      	movs	r3, #16
 8004cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce6:	f107 0314 	add.w	r3, r7, #20
 8004cea:	4619      	mov	r1, r3
 8004cec:	4836      	ldr	r0, [pc, #216]	; (8004dc8 <MX_GPIO_Init+0x1d8>)
 8004cee:	f001 fa07 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8004cf2:	2320      	movs	r3, #32
 8004cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004d02:	f107 0314 	add.w	r3, r7, #20
 8004d06:	4619      	mov	r1, r3
 8004d08:	4830      	ldr	r0, [pc, #192]	; (8004dcc <MX_GPIO_Init+0x1dc>)
 8004d0a:	f001 f9f9 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ON_Pin PB1 PB2 PB6 */
  GPIO_InitStruct.Pin = LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8004d0e:	2347      	movs	r3, #71	; 0x47
 8004d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d12:	2301      	movs	r3, #1
 8004d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d1e:	f107 0314 	add.w	r3, r7, #20
 8004d22:	4619      	mov	r1, r3
 8004d24:	482a      	ldr	r0, [pc, #168]	; (8004dd0 <MX_GPIO_Init+0x1e0>)
 8004d26:	f001 f9eb 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004d2a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d3a:	f107 0314 	add.w	r3, r7, #20
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4823      	ldr	r0, [pc, #140]	; (8004dd0 <MX_GPIO_Init+0x1e0>)
 8004d42:	f001 f9dd 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d56:	f107 0314 	add.w	r3, r7, #20
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	481a      	ldr	r0, [pc, #104]	; (8004dc8 <MX_GPIO_Init+0x1d8>)
 8004d5e:	f001 f9cf 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004d62:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d70:	2303      	movs	r3, #3
 8004d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004d74:	230a      	movs	r3, #10
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d78:	f107 0314 	add.w	r3, r7, #20
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4812      	ldr	r0, [pc, #72]	; (8004dc8 <MX_GPIO_Init+0x1d8>)
 8004d80:	f001 f9be 	bl	8006100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004d84:	2310      	movs	r3, #16
 8004d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d90:	f107 0314 	add.w	r3, r7, #20
 8004d94:	4619      	mov	r1, r3
 8004d96:	480e      	ldr	r0, [pc, #56]	; (8004dd0 <MX_GPIO_Init+0x1e0>)
 8004d98:	f001 f9b2 	bl	8006100 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2105      	movs	r1, #5
 8004da0:	2017      	movs	r0, #23
 8004da2:	f001 f8d4 	bl	8005f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004da6:	2017      	movs	r0, #23
 8004da8:	f001 f8ed 	bl	8005f86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004dac:	2200      	movs	r2, #0
 8004dae:	2105      	movs	r1, #5
 8004db0:	2028      	movs	r0, #40	; 0x28
 8004db2:	f001 f8cc 	bl	8005f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004db6:	2028      	movs	r0, #40	; 0x28
 8004db8:	f001 f8e5 	bl	8005f86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004dbc:	bf00      	nop
 8004dbe:	3728      	adds	r7, #40	; 0x28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40020000 	.word	0x40020000
 8004dcc:	40020800 	.word	0x40020800
 8004dd0:	40020400 	.word	0x40020400

08004dd4 <StartCommandWaitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCommandWaitTask */
void StartCommandWaitTask(void *argument)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	  if (waitForStartCommand()){
 8004ddc:	f7fc fd2c 	bl	8001838 <waitForStartCommand>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <StartCommandWaitTask+0x1c>
		  break;
	  }
      osDelay(1000);
 8004de6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dea:	f008 fdf7 	bl	800d9dc <osDelay>
	  if (waitForStartCommand()){
 8004dee:	e7f5      	b.n	8004ddc <StartCommandWaitTask+0x8>
		  break;
 8004df0:	bf00      	nop
  }

  // Start your main program here
  printIntroTitle();
 8004df2:	f7fc fe1b 	bl	8001a2c <printIntroTitle>

  // Set the event flag to signal that the start command has been received
  osEventFlagsSet(startCommandEventHandle, 0x0001U);
 8004df6:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <StartCommandWaitTask+0x34>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f008 fe47 	bl	800da90 <osEventFlagsSet>


  // Exit this task
  osThreadExit();
 8004e02:	f008 fde5 	bl	800d9d0 <osThreadExit>
 8004e06:	bf00      	nop
 8004e08:	20004994 	.word	0x20004994

08004e0c <MenuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MenuTask */
void MenuTask(void *argument)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MenuTask */
	  // Wait for the start command event to be set
	  osEventFlagsWait(startCommandEventHandle, 0x0001U, osFlagsWaitAny, osWaitForever);
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <MenuTask+0x38>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2101      	movs	r1, #1
 8004e20:	f008 fe7a 	bl	800db18 <osEventFlagsWait>

      // Print menu options and handle user input
      printMenu(MENU_MAIN);
 8004e24:	2000      	movs	r0, #0
 8004e26:	f7fc fd47 	bl	80018b8 <printMenu>


  /* Infinite loop */
  for(;;)
  {
	  UART_Transmit_String("Choose an option:\r\n");
 8004e2a:	4807      	ldr	r0, [pc, #28]	; (8004e48 <MenuTask+0x3c>)
 8004e2c:	f7fc fc56 	bl	80016dc <UART_Transmit_String>
      // Wait for user input and execute the corresponding command
      char userInput = waitForUserInput(); // Implement this function to get user input
 8004e30:	f7fc fd2e 	bl	8001890 <waitForUserInput>
 8004e34:	4603      	mov	r3, r0
 8004e36:	73fb      	strb	r3, [r7, #15]
      menu(userInput);
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fd f890 	bl	8001f60 <menu>
  {
 8004e40:	e7f3      	b.n	8004e2a <MenuTask+0x1e>
 8004e42:	bf00      	nop
 8004e44:	20004994 	.word	0x20004994
 8004e48:	0801f91c 	.word	0x0801f91c

08004e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e50:	b672      	cpsid	i
}
 8004e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e54:	e7fe      	b.n	8004e54 <Error_Handler+0x8>
	...

08004e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	607b      	str	r3, [r7, #4]
 8004e62:	4b12      	ldr	r3, [pc, #72]	; (8004eac <HAL_MspInit+0x54>)
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	4a11      	ldr	r2, [pc, #68]	; (8004eac <HAL_MspInit+0x54>)
 8004e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e6e:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <HAL_MspInit+0x54>)
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e76:	607b      	str	r3, [r7, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <HAL_MspInit+0x54>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <HAL_MspInit+0x54>)
 8004e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e88:	6413      	str	r3, [r2, #64]	; 0x40
 8004e8a:	4b08      	ldr	r3, [pc, #32]	; (8004eac <HAL_MspInit+0x54>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e96:	2200      	movs	r2, #0
 8004e98:	210f      	movs	r1, #15
 8004e9a:	f06f 0001 	mvn.w	r0, #1
 8004e9e:	f001 f856 	bl	8005f4e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40023800 	.word	0x40023800

08004eb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb8:	f107 0314 	add.w	r3, r7, #20
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	605a      	str	r2, [r3, #4]
 8004ec2:	609a      	str	r2, [r3, #8]
 8004ec4:	60da      	str	r2, [r3, #12]
 8004ec6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <HAL_ADC_MspInit+0x7c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d127      	bne.n	8004f22 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	4b16      	ldr	r3, [pc, #88]	; (8004f30 <HAL_ADC_MspInit+0x80>)
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <HAL_ADC_MspInit+0x80>)
 8004edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ee2:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <HAL_ADC_MspInit+0x80>)
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <HAL_ADC_MspInit+0x80>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	4a0e      	ldr	r2, [pc, #56]	; (8004f30 <HAL_ADC_MspInit+0x80>)
 8004ef8:	f043 0304 	orr.w	r3, r3, #4
 8004efc:	6313      	str	r3, [r2, #48]	; 0x30
 8004efe:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_ADC_MspInit+0x80>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f16:	f107 0314 	add.w	r3, r7, #20
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4805      	ldr	r0, [pc, #20]	; (8004f34 <HAL_ADC_MspInit+0x84>)
 8004f1e:	f001 f8ef 	bl	8006100 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004f22:	bf00      	nop
 8004f24:	3728      	adds	r7, #40	; 0x28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40012200 	.word	0x40012200
 8004f30:	40023800 	.word	0x40023800
 8004f34:	40020800 	.word	0x40020800

08004f38 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a0b      	ldr	r2, [pc, #44]	; (8004f74 <HAL_CRC_MspInit+0x3c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d10d      	bne.n	8004f66 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <HAL_CRC_MspInit+0x40>)
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	4a09      	ldr	r2, [pc, #36]	; (8004f78 <HAL_CRC_MspInit+0x40>)
 8004f54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f58:	6313      	str	r3, [r2, #48]	; 0x30
 8004f5a:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <HAL_CRC_MspInit+0x40>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40023000 	.word	0x40023000
 8004f78:	40023800 	.word	0x40023800

08004f7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08c      	sub	sp, #48	; 0x30
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f84:	f107 031c 	add.w	r3, r7, #28
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	609a      	str	r2, [r3, #8]
 8004f90:	60da      	str	r2, [r3, #12]
 8004f92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a33      	ldr	r2, [pc, #204]	; (8005068 <HAL_I2C_MspInit+0xec>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d12d      	bne.n	8004ffa <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	4b32      	ldr	r3, [pc, #200]	; (800506c <HAL_I2C_MspInit+0xf0>)
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	4a31      	ldr	r2, [pc, #196]	; (800506c <HAL_I2C_MspInit+0xf0>)
 8004fa8:	f043 0302 	orr.w	r3, r3, #2
 8004fac:	6313      	str	r3, [r2, #48]	; 0x30
 8004fae:	4b2f      	ldr	r3, [pc, #188]	; (800506c <HAL_I2C_MspInit+0xf0>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	61bb      	str	r3, [r7, #24]
 8004fb8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004fba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fc0:	2312      	movs	r3, #18
 8004fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004fcc:	2304      	movs	r3, #4
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd0:	f107 031c 	add.w	r3, r7, #28
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4826      	ldr	r0, [pc, #152]	; (8005070 <HAL_I2C_MspInit+0xf4>)
 8004fd8:	f001 f892 	bl	8006100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	4b22      	ldr	r3, [pc, #136]	; (800506c <HAL_I2C_MspInit+0xf0>)
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	4a21      	ldr	r2, [pc, #132]	; (800506c <HAL_I2C_MspInit+0xf0>)
 8004fe6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fea:	6413      	str	r3, [r2, #64]	; 0x40
 8004fec:	4b1f      	ldr	r3, [pc, #124]	; (800506c <HAL_I2C_MspInit+0xf0>)
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004ff8:	e031      	b.n	800505e <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <HAL_I2C_MspInit+0xf8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d12c      	bne.n	800505e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	4b18      	ldr	r3, [pc, #96]	; (800506c <HAL_I2C_MspInit+0xf0>)
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	4a17      	ldr	r2, [pc, #92]	; (800506c <HAL_I2C_MspInit+0xf0>)
 800500e:	f043 0302 	orr.w	r3, r3, #2
 8005012:	6313      	str	r3, [r2, #48]	; 0x30
 8005014:	4b15      	ldr	r3, [pc, #84]	; (800506c <HAL_I2C_MspInit+0xf0>)
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005020:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005026:	2312      	movs	r3, #18
 8005028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502a:	2300      	movs	r3, #0
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800502e:	2303      	movs	r3, #3
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005032:	2304      	movs	r3, #4
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005036:	f107 031c 	add.w	r3, r7, #28
 800503a:	4619      	mov	r1, r3
 800503c:	480c      	ldr	r0, [pc, #48]	; (8005070 <HAL_I2C_MspInit+0xf4>)
 800503e:	f001 f85f 	bl	8006100 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_I2C_MspInit+0xf0>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	4a08      	ldr	r2, [pc, #32]	; (800506c <HAL_I2C_MspInit+0xf0>)
 800504c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005050:	6413      	str	r3, [r2, #64]	; 0x40
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <HAL_I2C_MspInit+0xf0>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
}
 800505e:	bf00      	nop
 8005060:	3730      	adds	r7, #48	; 0x30
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40005400 	.word	0x40005400
 800506c:	40023800 	.word	0x40023800
 8005070:	40020400 	.word	0x40020400
 8005074:	40005800 	.word	0x40005800

08005078 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005080:	f107 0308 	add.w	r3, r7, #8
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	605a      	str	r2, [r3, #4]
 800508a:	609a      	str	r2, [r3, #8]
 800508c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a0c      	ldr	r2, [pc, #48]	; (80050c4 <HAL_RTC_MspInit+0x4c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d111      	bne.n	80050bc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005098:	2302      	movs	r3, #2
 800509a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800509c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050a0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050a2:	f107 0308 	add.w	r3, r7, #8
 80050a6:	4618      	mov	r0, r3
 80050a8:	f003 fa90 	bl	80085cc <HAL_RCCEx_PeriphCLKConfig>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80050b2:	f7ff fecb 	bl	8004e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80050b6:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <HAL_RTC_MspInit+0x50>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80050bc:	bf00      	nop
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40002800 	.word	0x40002800
 80050c8:	42470e3c 	.word	0x42470e3c

080050cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08a      	sub	sp, #40	; 0x28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d4:	f107 0314 	add.w	r3, r7, #20
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	605a      	str	r2, [r3, #4]
 80050de:	609a      	str	r2, [r3, #8]
 80050e0:	60da      	str	r2, [r3, #12]
 80050e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a19      	ldr	r2, [pc, #100]	; (8005150 <HAL_SPI_MspInit+0x84>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d12b      	bne.n	8005146 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	4b18      	ldr	r3, [pc, #96]	; (8005154 <HAL_SPI_MspInit+0x88>)
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	4a17      	ldr	r2, [pc, #92]	; (8005154 <HAL_SPI_MspInit+0x88>)
 80050f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050fc:	6453      	str	r3, [r2, #68]	; 0x44
 80050fe:	4b15      	ldr	r3, [pc, #84]	; (8005154 <HAL_SPI_MspInit+0x88>)
 8005100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <HAL_SPI_MspInit+0x88>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	4a10      	ldr	r2, [pc, #64]	; (8005154 <HAL_SPI_MspInit+0x88>)
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	6313      	str	r3, [r2, #48]	; 0x30
 800511a:	4b0e      	ldr	r3, [pc, #56]	; (8005154 <HAL_SPI_MspInit+0x88>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005126:	23e0      	movs	r3, #224	; 0xe0
 8005128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800512a:	2302      	movs	r3, #2
 800512c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005132:	2303      	movs	r3, #3
 8005134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005136:	2305      	movs	r3, #5
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800513a:	f107 0314 	add.w	r3, r7, #20
 800513e:	4619      	mov	r1, r3
 8005140:	4805      	ldr	r0, [pc, #20]	; (8005158 <HAL_SPI_MspInit+0x8c>)
 8005142:	f000 ffdd 	bl	8006100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005146:	bf00      	nop
 8005148:	3728      	adds	r7, #40	; 0x28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40013000 	.word	0x40013000
 8005154:	40023800 	.word	0x40023800
 8005158:	40020000 	.word	0x40020000

0800515c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516c:	d10e      	bne.n	800518c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <HAL_TIM_Base_MspInit+0x8c>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	4a1c      	ldr	r2, [pc, #112]	; (80051e8 <HAL_TIM_Base_MspInit+0x8c>)
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	6413      	str	r3, [r2, #64]	; 0x40
 800517e:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <HAL_TIM_Base_MspInit+0x8c>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800518a:	e026      	b.n	80051da <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a16      	ldr	r2, [pc, #88]	; (80051ec <HAL_TIM_Base_MspInit+0x90>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d10e      	bne.n	80051b4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005196:	2300      	movs	r3, #0
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <HAL_TIM_Base_MspInit+0x8c>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <HAL_TIM_Base_MspInit+0x8c>)
 80051a0:	f043 0302 	orr.w	r3, r3, #2
 80051a4:	6413      	str	r3, [r2, #64]	; 0x40
 80051a6:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <HAL_TIM_Base_MspInit+0x8c>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	613b      	str	r3, [r7, #16]
 80051b0:	693b      	ldr	r3, [r7, #16]
}
 80051b2:	e012      	b.n	80051da <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a0d      	ldr	r2, [pc, #52]	; (80051f0 <HAL_TIM_Base_MspInit+0x94>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10d      	bne.n	80051da <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <HAL_TIM_Base_MspInit+0x8c>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <HAL_TIM_Base_MspInit+0x8c>)
 80051c8:	f043 0308 	orr.w	r3, r3, #8
 80051cc:	6413      	str	r3, [r2, #64]	; 0x40
 80051ce:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_TIM_Base_MspInit+0x8c>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40023800 	.word	0x40023800
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000c00 	.word	0x40000c00

080051f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051fc:	f107 0314 	add.w	r3, r7, #20
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	609a      	str	r2, [r3, #8]
 8005208:	60da      	str	r2, [r3, #12]
 800520a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a21      	ldr	r2, [pc, #132]	; (8005298 <HAL_TIM_MspPostInit+0xa4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d13c      	bne.n	8005290 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005216:	2300      	movs	r3, #0
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	4b20      	ldr	r3, [pc, #128]	; (800529c <HAL_TIM_MspPostInit+0xa8>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	4a1f      	ldr	r2, [pc, #124]	; (800529c <HAL_TIM_MspPostInit+0xa8>)
 8005220:	f043 0304 	orr.w	r3, r3, #4
 8005224:	6313      	str	r3, [r2, #48]	; 0x30
 8005226:	4b1d      	ldr	r3, [pc, #116]	; (800529c <HAL_TIM_MspPostInit+0xa8>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	4b19      	ldr	r3, [pc, #100]	; (800529c <HAL_TIM_MspPostInit+0xa8>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	4a18      	ldr	r2, [pc, #96]	; (800529c <HAL_TIM_MspPostInit+0xa8>)
 800523c:	f043 0302 	orr.w	r3, r3, #2
 8005240:	6313      	str	r3, [r2, #48]	; 0x30
 8005242:	4b16      	ldr	r3, [pc, #88]	; (800529c <HAL_TIM_MspPostInit+0xa8>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800524e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005254:	2302      	movs	r3, #2
 8005256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005258:	2300      	movs	r3, #0
 800525a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800525c:	2300      	movs	r3, #0
 800525e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005260:	2302      	movs	r3, #2
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005264:	f107 0314 	add.w	r3, r7, #20
 8005268:	4619      	mov	r1, r3
 800526a:	480d      	ldr	r0, [pc, #52]	; (80052a0 <HAL_TIM_MspPostInit+0xac>)
 800526c:	f000 ff48 	bl	8006100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005270:	2320      	movs	r3, #32
 8005272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005274:	2302      	movs	r3, #2
 8005276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	2300      	movs	r3, #0
 800527a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800527c:	2300      	movs	r3, #0
 800527e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005280:	2302      	movs	r3, #2
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005284:	f107 0314 	add.w	r3, r7, #20
 8005288:	4619      	mov	r1, r3
 800528a:	4806      	ldr	r0, [pc, #24]	; (80052a4 <HAL_TIM_MspPostInit+0xb0>)
 800528c:	f000 ff38 	bl	8006100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005290:	bf00      	nop
 8005292:	3728      	adds	r7, #40	; 0x28
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40000400 	.word	0x40000400
 800529c:	40023800 	.word	0x40023800
 80052a0:	40020800 	.word	0x40020800
 80052a4:	40020400 	.word	0x40020400

080052a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b090      	sub	sp, #64	; 0x40
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	609a      	str	r2, [r3, #8]
 80052bc:	60da      	str	r2, [r3, #12]
 80052be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a74      	ldr	r2, [pc, #464]	; (8005498 <HAL_UART_MspInit+0x1f0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d14b      	bne.n	8005362 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ce:	4b73      	ldr	r3, [pc, #460]	; (800549c <HAL_UART_MspInit+0x1f4>)
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	4a72      	ldr	r2, [pc, #456]	; (800549c <HAL_UART_MspInit+0x1f4>)
 80052d4:	f043 0310 	orr.w	r3, r3, #16
 80052d8:	6453      	str	r3, [r2, #68]	; 0x44
 80052da:	4b70      	ldr	r3, [pc, #448]	; (800549c <HAL_UART_MspInit+0x1f4>)
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052e6:	2300      	movs	r3, #0
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ea:	4b6c      	ldr	r3, [pc, #432]	; (800549c <HAL_UART_MspInit+0x1f4>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	4a6b      	ldr	r2, [pc, #428]	; (800549c <HAL_UART_MspInit+0x1f4>)
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	6313      	str	r3, [r2, #48]	; 0x30
 80052f6:	4b69      	ldr	r3, [pc, #420]	; (800549c <HAL_UART_MspInit+0x1f4>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005302:	2300      	movs	r3, #0
 8005304:	623b      	str	r3, [r7, #32]
 8005306:	4b65      	ldr	r3, [pc, #404]	; (800549c <HAL_UART_MspInit+0x1f4>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	4a64      	ldr	r2, [pc, #400]	; (800549c <HAL_UART_MspInit+0x1f4>)
 800530c:	f043 0302 	orr.w	r3, r3, #2
 8005310:	6313      	str	r3, [r2, #48]	; 0x30
 8005312:	4b62      	ldr	r3, [pc, #392]	; (800549c <HAL_UART_MspInit+0x1f4>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	623b      	str	r3, [r7, #32]
 800531c:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800531e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005324:	2302      	movs	r3, #2
 8005326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005328:	2300      	movs	r3, #0
 800532a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800532c:	2303      	movs	r3, #3
 800532e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005330:	2307      	movs	r3, #7
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005338:	4619      	mov	r1, r3
 800533a:	4859      	ldr	r0, [pc, #356]	; (80054a0 <HAL_UART_MspInit+0x1f8>)
 800533c:	f000 fee0 	bl	8006100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005344:	2302      	movs	r3, #2
 8005346:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005348:	2300      	movs	r3, #0
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800534c:	2303      	movs	r3, #3
 800534e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005350:	2307      	movs	r3, #7
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005358:	4619      	mov	r1, r3
 800535a:	4852      	ldr	r0, [pc, #328]	; (80054a4 <HAL_UART_MspInit+0x1fc>)
 800535c:	f000 fed0 	bl	8006100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005360:	e095      	b.n	800548e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a50      	ldr	r2, [pc, #320]	; (80054a8 <HAL_UART_MspInit+0x200>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d12c      	bne.n	80053c6 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800536c:	2300      	movs	r3, #0
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	4b4a      	ldr	r3, [pc, #296]	; (800549c <HAL_UART_MspInit+0x1f4>)
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	4a49      	ldr	r2, [pc, #292]	; (800549c <HAL_UART_MspInit+0x1f4>)
 8005376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800537a:	6413      	str	r3, [r2, #64]	; 0x40
 800537c:	4b47      	ldr	r3, [pc, #284]	; (800549c <HAL_UART_MspInit+0x1f4>)
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005388:	2300      	movs	r3, #0
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	4b43      	ldr	r3, [pc, #268]	; (800549c <HAL_UART_MspInit+0x1f4>)
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	4a42      	ldr	r2, [pc, #264]	; (800549c <HAL_UART_MspInit+0x1f4>)
 8005392:	f043 0301 	orr.w	r3, r3, #1
 8005396:	6313      	str	r3, [r2, #48]	; 0x30
 8005398:	4b40      	ldr	r3, [pc, #256]	; (800549c <HAL_UART_MspInit+0x1f4>)
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80053a4:	230c      	movs	r3, #12
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a8:	2302      	movs	r3, #2
 80053aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b0:	2303      	movs	r3, #3
 80053b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053b4:	2307      	movs	r3, #7
 80053b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053bc:	4619      	mov	r1, r3
 80053be:	4838      	ldr	r0, [pc, #224]	; (80054a0 <HAL_UART_MspInit+0x1f8>)
 80053c0:	f000 fe9e 	bl	8006100 <HAL_GPIO_Init>
}
 80053c4:	e063      	b.n	800548e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART3)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a38      	ldr	r2, [pc, #224]	; (80054ac <HAL_UART_MspInit+0x204>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d12d      	bne.n	800542c <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	4b31      	ldr	r3, [pc, #196]	; (800549c <HAL_UART_MspInit+0x1f4>)
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	4a30      	ldr	r2, [pc, #192]	; (800549c <HAL_UART_MspInit+0x1f4>)
 80053da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053de:	6413      	str	r3, [r2, #64]	; 0x40
 80053e0:	4b2e      	ldr	r3, [pc, #184]	; (800549c <HAL_UART_MspInit+0x1f4>)
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	4b2a      	ldr	r3, [pc, #168]	; (800549c <HAL_UART_MspInit+0x1f4>)
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	4a29      	ldr	r2, [pc, #164]	; (800549c <HAL_UART_MspInit+0x1f4>)
 80053f6:	f043 0304 	orr.w	r3, r3, #4
 80053fa:	6313      	str	r3, [r2, #48]	; 0x30
 80053fc:	4b27      	ldr	r3, [pc, #156]	; (800549c <HAL_UART_MspInit+0x1f4>)
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005408:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800540c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540e:	2302      	movs	r3, #2
 8005410:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005412:	2300      	movs	r3, #0
 8005414:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005416:	2303      	movs	r3, #3
 8005418:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800541a:	2307      	movs	r3, #7
 800541c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800541e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005422:	4619      	mov	r1, r3
 8005424:	4822      	ldr	r0, [pc, #136]	; (80054b0 <HAL_UART_MspInit+0x208>)
 8005426:	f000 fe6b 	bl	8006100 <HAL_GPIO_Init>
}
 800542a:	e030      	b.n	800548e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART6)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a20      	ldr	r2, [pc, #128]	; (80054b4 <HAL_UART_MspInit+0x20c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d12b      	bne.n	800548e <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	4b18      	ldr	r3, [pc, #96]	; (800549c <HAL_UART_MspInit+0x1f4>)
 800543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543e:	4a17      	ldr	r2, [pc, #92]	; (800549c <HAL_UART_MspInit+0x1f4>)
 8005440:	f043 0320 	orr.w	r3, r3, #32
 8005444:	6453      	str	r3, [r2, #68]	; 0x44
 8005446:	4b15      	ldr	r3, [pc, #84]	; (800549c <HAL_UART_MspInit+0x1f4>)
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005452:	2300      	movs	r3, #0
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	4b11      	ldr	r3, [pc, #68]	; (800549c <HAL_UART_MspInit+0x1f4>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	4a10      	ldr	r2, [pc, #64]	; (800549c <HAL_UART_MspInit+0x1f4>)
 800545c:	f043 0304 	orr.w	r3, r3, #4
 8005460:	6313      	str	r3, [r2, #48]	; 0x30
 8005462:	4b0e      	ldr	r3, [pc, #56]	; (800549c <HAL_UART_MspInit+0x1f4>)
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	60bb      	str	r3, [r7, #8]
 800546c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800546e:	23c0      	movs	r3, #192	; 0xc0
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005472:	2302      	movs	r3, #2
 8005474:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005476:	2300      	movs	r3, #0
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800547a:	2303      	movs	r3, #3
 800547c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800547e:	2308      	movs	r3, #8
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005486:	4619      	mov	r1, r3
 8005488:	4809      	ldr	r0, [pc, #36]	; (80054b0 <HAL_UART_MspInit+0x208>)
 800548a:	f000 fe39 	bl	8006100 <HAL_GPIO_Init>
}
 800548e:	bf00      	nop
 8005490:	3740      	adds	r7, #64	; 0x40
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40011000 	.word	0x40011000
 800549c:	40023800 	.word	0x40023800
 80054a0:	40020000 	.word	0x40020000
 80054a4:	40020400 	.word	0x40020400
 80054a8:	40004400 	.word	0x40004400
 80054ac:	40004800 	.word	0x40004800
 80054b0:	40020800 	.word	0x40020800
 80054b4:	40011400 	.word	0x40011400

080054b8 <SDTimer_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80054bc:	4b0e      	ldr	r3, [pc, #56]	; (80054f8 <SDTimer_Handler+0x40>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d006      	beq.n	80054d4 <SDTimer_Handler+0x1c>
    Timer1--;
 80054c6:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <SDTimer_Handler+0x40>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <SDTimer_Handler+0x40>)
 80054d2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80054d4:	4b09      	ldr	r3, [pc, #36]	; (80054fc <SDTimer_Handler+0x44>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d006      	beq.n	80054ec <SDTimer_Handler+0x34>
    Timer2--;
 80054de:	4b07      	ldr	r3, [pc, #28]	; (80054fc <SDTimer_Handler+0x44>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	4b04      	ldr	r3, [pc, #16]	; (80054fc <SDTimer_Handler+0x44>)
 80054ea:	701a      	strb	r2, [r3, #0]
}
 80054ec:	bf00      	nop
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20004628 	.word	0x20004628
 80054fc:	2000462a 	.word	0x2000462a

08005500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005504:	e7fe      	b.n	8005504 <NMI_Handler+0x4>

08005506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005506:	b480      	push	{r7}
 8005508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800550a:	e7fe      	b.n	800550a <HardFault_Handler+0x4>

0800550c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005510:	e7fe      	b.n	8005510 <MemManage_Handler+0x4>

08005512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005512:	b480      	push	{r7}
 8005514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005516:	e7fe      	b.n	8005516 <BusFault_Handler+0x4>

08005518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800551c:	e7fe      	b.n	800551c <UsageFault_Handler+0x4>

0800551e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800551e:	b480      	push	{r7}
 8005520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005522:	bf00      	nop
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <SysTick_Handler+0x3c>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	3301      	adds	r3, #1
 8005538:	b2da      	uxtb	r2, r3
 800553a:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <SysTick_Handler+0x3c>)
 800553c:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800553e:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <SysTick_Handler+0x3c>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b09      	cmp	r3, #9
 8005546:	d904      	bls.n	8005552 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8005548:	4b07      	ldr	r3, [pc, #28]	; (8005568 <SysTick_Handler+0x3c>)
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800554e:	f7ff ffb3 	bl	80054b8 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005552:	f000 f97b 	bl	800584c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005556:	f00a fec5 	bl	80102e4 <xTaskGetSchedulerState>
 800555a:	4603      	mov	r3, r0
 800555c:	2b01      	cmp	r3, #1
 800555e:	d001      	beq.n	8005564 <SysTick_Handler+0x38>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005560:	f00b fde2 	bl	8011128 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005564:	bf00      	nop
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20004998 	.word	0x20004998

0800556c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005570:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005574:	f000 ff7a 	bl	800646c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005578:	bf00      	nop
 800557a:	bd80      	pop	{r7, pc}

0800557c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005580:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005584:	f000 ff72 	bl	800646c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005588:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800558c:	f000 ff6e 	bl	800646c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005590:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005594:	f000 ff6a 	bl	800646c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005598:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800559c:	f000 ff66 	bl	800646c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055a0:	bf00      	nop
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  return 1;
 80055a8:	2301      	movs	r3, #1
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <_kill>:

int _kill(int pid, int sig)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80055be:	f014 fcc9 	bl	8019f54 <__errno>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2216      	movs	r2, #22
 80055c6:	601a      	str	r2, [r3, #0]
  return -1;
 80055c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <_exit>:

void _exit (int status)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80055dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff ffe7 	bl	80055b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80055e6:	e7fe      	b.n	80055e6 <_exit+0x12>

080055e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	e00a      	b.n	8005610 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80055fa:	f3af 8000 	nop.w
 80055fe:	4601      	mov	r1, r0
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	60ba      	str	r2, [r7, #8]
 8005606:	b2ca      	uxtb	r2, r1
 8005608:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	3301      	adds	r3, #1
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	dbf0      	blt.n	80055fa <_read+0x12>
  }

  return len;
 8005618:	687b      	ldr	r3, [r7, #4]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b086      	sub	sp, #24
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	e009      	b.n	8005648 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	60ba      	str	r2, [r7, #8]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	3301      	adds	r3, #1
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	429a      	cmp	r2, r3
 800564e:	dbf1      	blt.n	8005634 <_write+0x12>
  }
  return len;
 8005650:	687b      	ldr	r3, [r7, #4]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <_close>:

int _close(int file)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005682:	605a      	str	r2, [r3, #4]
  return 0;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <_isatty>:

int _isatty(int file)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800569a:	2301      	movs	r3, #1
}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056cc:	4a14      	ldr	r2, [pc, #80]	; (8005720 <_sbrk+0x5c>)
 80056ce:	4b15      	ldr	r3, [pc, #84]	; (8005724 <_sbrk+0x60>)
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056d8:	4b13      	ldr	r3, [pc, #76]	; (8005728 <_sbrk+0x64>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d102      	bne.n	80056e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056e0:	4b11      	ldr	r3, [pc, #68]	; (8005728 <_sbrk+0x64>)
 80056e2:	4a12      	ldr	r2, [pc, #72]	; (800572c <_sbrk+0x68>)
 80056e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056e6:	4b10      	ldr	r3, [pc, #64]	; (8005728 <_sbrk+0x64>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4413      	add	r3, r2
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d207      	bcs.n	8005704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056f4:	f014 fc2e 	bl	8019f54 <__errno>
 80056f8:	4603      	mov	r3, r0
 80056fa:	220c      	movs	r2, #12
 80056fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005702:	e009      	b.n	8005718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005704:	4b08      	ldr	r3, [pc, #32]	; (8005728 <_sbrk+0x64>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800570a:	4b07      	ldr	r3, [pc, #28]	; (8005728 <_sbrk+0x64>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4413      	add	r3, r2
 8005712:	4a05      	ldr	r2, [pc, #20]	; (8005728 <_sbrk+0x64>)
 8005714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005716:	68fb      	ldr	r3, [r7, #12]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20020000 	.word	0x20020000
 8005724:	00000400 	.word	0x00000400
 8005728:	2000499c 	.word	0x2000499c
 800572c:	20009518 	.word	0x20009518

08005730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005734:	4b06      	ldr	r3, [pc, #24]	; (8005750 <SystemInit+0x20>)
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573a:	4a05      	ldr	r2, [pc, #20]	; (8005750 <SystemInit+0x20>)
 800573c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005744:	bf00      	nop
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	e000ed00 	.word	0xe000ed00

08005754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800578c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005758:	480d      	ldr	r0, [pc, #52]	; (8005790 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800575a:	490e      	ldr	r1, [pc, #56]	; (8005794 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800575c:	4a0e      	ldr	r2, [pc, #56]	; (8005798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800575e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005760:	e002      	b.n	8005768 <LoopCopyDataInit>

08005762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005766:	3304      	adds	r3, #4

08005768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800576a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800576c:	d3f9      	bcc.n	8005762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800576e:	4a0b      	ldr	r2, [pc, #44]	; (800579c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005770:	4c0b      	ldr	r4, [pc, #44]	; (80057a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005774:	e001      	b.n	800577a <LoopFillZerobss>

08005776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005778:	3204      	adds	r2, #4

0800577a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800577a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800577c:	d3fb      	bcc.n	8005776 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800577e:	f7ff ffd7 	bl	8005730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005782:	f014 fbed 	bl	8019f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005786:	f7fe fe49 	bl	800441c <main>
  bx  lr    
 800578a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800578c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005794:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8005798:	08020408 	.word	0x08020408
  ldr r2, =_sbss
 800579c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80057a0:	20009514 	.word	0x20009514

080057a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057a4:	e7fe      	b.n	80057a4 <ADC_IRQHandler>
	...

080057a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057ac:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <HAL_Init+0x40>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a0d      	ldr	r2, [pc, #52]	; (80057e8 <HAL_Init+0x40>)
 80057b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057b8:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <HAL_Init+0x40>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a0a      	ldr	r2, [pc, #40]	; (80057e8 <HAL_Init+0x40>)
 80057be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057c4:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <HAL_Init+0x40>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a07      	ldr	r2, [pc, #28]	; (80057e8 <HAL_Init+0x40>)
 80057ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057d0:	2003      	movs	r0, #3
 80057d2:	f000 fbb1 	bl	8005f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057d6:	200f      	movs	r0, #15
 80057d8:	f000 f808 	bl	80057ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057dc:	f7ff fb3c 	bl	8004e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40023c00 	.word	0x40023c00

080057ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057f4:	4b12      	ldr	r3, [pc, #72]	; (8005840 <HAL_InitTick+0x54>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	4b12      	ldr	r3, [pc, #72]	; (8005844 <HAL_InitTick+0x58>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	4619      	mov	r1, r3
 80057fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005802:	fbb3 f3f1 	udiv	r3, r3, r1
 8005806:	fbb2 f3f3 	udiv	r3, r2, r3
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fbc9 	bl	8005fa2 <HAL_SYSTICK_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e00e      	b.n	8005838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b0f      	cmp	r3, #15
 800581e:	d80a      	bhi.n	8005836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005820:	2200      	movs	r2, #0
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005828:	f000 fb91 	bl	8005f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800582c:	4a06      	ldr	r2, [pc, #24]	; (8005848 <HAL_InitTick+0x5c>)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	e000      	b.n	8005838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
}
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20000008 	.word	0x20000008
 8005844:	20000010 	.word	0x20000010
 8005848:	2000000c 	.word	0x2000000c

0800584c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005850:	4b06      	ldr	r3, [pc, #24]	; (800586c <HAL_IncTick+0x20>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	4b06      	ldr	r3, [pc, #24]	; (8005870 <HAL_IncTick+0x24>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4413      	add	r3, r2
 800585c:	4a04      	ldr	r2, [pc, #16]	; (8005870 <HAL_IncTick+0x24>)
 800585e:	6013      	str	r3, [r2, #0]
}
 8005860:	bf00      	nop
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	20000010 	.word	0x20000010
 8005870:	200049a0 	.word	0x200049a0

08005874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  return uwTick;
 8005878:	4b03      	ldr	r3, [pc, #12]	; (8005888 <HAL_GetTick+0x14>)
 800587a:	681b      	ldr	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	200049a0 	.word	0x200049a0

0800588c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005894:	f7ff ffee 	bl	8005874 <HAL_GetTick>
 8005898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a4:	d005      	beq.n	80058b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058a6:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <HAL_Delay+0x44>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058b2:	bf00      	nop
 80058b4:	f7ff ffde 	bl	8005874 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d8f7      	bhi.n	80058b4 <HAL_Delay+0x28>
  {
  }
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000010 	.word	0x20000010

080058d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e033      	b.n	8005952 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fadc 	bl	8004eb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f003 0310 	and.w	r3, r3, #16
 800590e:	2b00      	cmp	r3, #0
 8005910:	d118      	bne.n	8005944 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800591a:	f023 0302 	bic.w	r3, r3, #2
 800591e:	f043 0202 	orr.w	r2, r3, #2
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f93a 	bl	8005ba0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	f043 0201 	orr.w	r2, r3, #1
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	641a      	str	r2, [r3, #64]	; 0x40
 8005942:	e001      	b.n	8005948 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005950:	7bfb      	ldrb	r3, [r7, #15]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_ADC_ConfigChannel+0x1c>
 8005974:	2302      	movs	r3, #2
 8005976:	e105      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x228>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b09      	cmp	r3, #9
 8005986:	d925      	bls.n	80059d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68d9      	ldr	r1, [r3, #12]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	461a      	mov	r2, r3
 8005996:	4613      	mov	r3, r2
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	4413      	add	r3, r2
 800599c:	3b1e      	subs	r3, #30
 800599e:	2207      	movs	r2, #7
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	43da      	mvns	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	400a      	ands	r2, r1
 80059ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68d9      	ldr	r1, [r3, #12]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	4618      	mov	r0, r3
 80059c0:	4603      	mov	r3, r0
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	4403      	add	r3, r0
 80059c6:	3b1e      	subs	r3, #30
 80059c8:	409a      	lsls	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	60da      	str	r2, [r3, #12]
 80059d2:	e022      	b.n	8005a1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6919      	ldr	r1, [r3, #16]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	4613      	mov	r3, r2
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	4413      	add	r3, r2
 80059e8:	2207      	movs	r2, #7
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43da      	mvns	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	400a      	ands	r2, r1
 80059f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6919      	ldr	r1, [r3, #16]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	4618      	mov	r0, r3
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	4403      	add	r3, r0
 8005a10:	409a      	lsls	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b06      	cmp	r3, #6
 8005a20:	d824      	bhi.n	8005a6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	3b05      	subs	r3, #5
 8005a34:	221f      	movs	r2, #31
 8005a36:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3a:	43da      	mvns	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	400a      	ands	r2, r1
 8005a42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	4618      	mov	r0, r3
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	3b05      	subs	r3, #5
 8005a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	635a      	str	r2, [r3, #52]	; 0x34
 8005a6a:	e04c      	b.n	8005b06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b0c      	cmp	r3, #12
 8005a72:	d824      	bhi.n	8005abe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	3b23      	subs	r3, #35	; 0x23
 8005a86:	221f      	movs	r2, #31
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	43da      	mvns	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	400a      	ands	r2, r1
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	3b23      	subs	r3, #35	; 0x23
 8005ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
 8005abc:	e023      	b.n	8005b06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	3b41      	subs	r3, #65	; 0x41
 8005ad0:	221f      	movs	r2, #31
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	43da      	mvns	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	400a      	ands	r2, r1
 8005ade:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	4618      	mov	r0, r3
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	3b41      	subs	r3, #65	; 0x41
 8005afa:	fa00 f203 	lsl.w	r2, r0, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b06:	4b22      	ldr	r3, [pc, #136]	; (8005b90 <HAL_ADC_ConfigChannel+0x234>)
 8005b08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a21      	ldr	r2, [pc, #132]	; (8005b94 <HAL_ADC_ConfigChannel+0x238>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d109      	bne.n	8005b28 <HAL_ADC_ConfigChannel+0x1cc>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b12      	cmp	r3, #18
 8005b1a:	d105      	bne.n	8005b28 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a19      	ldr	r2, [pc, #100]	; (8005b94 <HAL_ADC_ConfigChannel+0x238>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d123      	bne.n	8005b7a <HAL_ADC_ConfigChannel+0x21e>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d003      	beq.n	8005b42 <HAL_ADC_ConfigChannel+0x1e6>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b11      	cmp	r3, #17
 8005b40:	d11b      	bne.n	8005b7a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b10      	cmp	r3, #16
 8005b54:	d111      	bne.n	8005b7a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b56:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <HAL_ADC_ConfigChannel+0x23c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a10      	ldr	r2, [pc, #64]	; (8005b9c <HAL_ADC_ConfigChannel+0x240>)
 8005b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b60:	0c9a      	lsrs	r2, r3, #18
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005b6c:	e002      	b.n	8005b74 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f9      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	40012300 	.word	0x40012300
 8005b94:	40012000 	.word	0x40012000
 8005b98:	20000008 	.word	0x20000008
 8005b9c:	431bde83 	.word	0x431bde83

08005ba0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ba8:	4b79      	ldr	r3, [pc, #484]	; (8005d90 <ADC_Init+0x1f0>)
 8005baa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6859      	ldr	r1, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	021a      	lsls	r2, r3, #8
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005bf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6859      	ldr	r1, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6899      	ldr	r1, [r3, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	4a58      	ldr	r2, [pc, #352]	; (8005d94 <ADC_Init+0x1f4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d022      	beq.n	8005c7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6899      	ldr	r1, [r3, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6899      	ldr	r1, [r3, #8]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	609a      	str	r2, [r3, #8]
 8005c7c:	e00f      	b.n	8005c9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0202 	bic.w	r2, r2, #2
 8005cac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6899      	ldr	r1, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	7e1b      	ldrb	r3, [r3, #24]
 8005cb8:	005a      	lsls	r2, r3, #1
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01b      	beq.n	8005d04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005cea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6859      	ldr	r1, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	035a      	lsls	r2, r3, #13
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
 8005d02:	e007      	b.n	8005d14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005d22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	051a      	lsls	r2, r3, #20
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6899      	ldr	r1, [r3, #8]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d56:	025a      	lsls	r2, r3, #9
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6899      	ldr	r1, [r3, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	029a      	lsls	r2, r3, #10
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]
}
 8005d84:	bf00      	nop
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40012300 	.word	0x40012300
 8005d94:	0f000001 	.word	0x0f000001

08005d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005da8:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <__NVIC_SetPriorityGrouping+0x44>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005db4:	4013      	ands	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dca:	4a04      	ldr	r2, [pc, #16]	; (8005ddc <__NVIC_SetPriorityGrouping+0x44>)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	60d3      	str	r3, [r2, #12]
}
 8005dd0:	bf00      	nop
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	e000ed00 	.word	0xe000ed00

08005de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005de4:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <__NVIC_GetPriorityGrouping+0x18>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	f003 0307 	and.w	r3, r3, #7
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	e000ed00 	.word	0xe000ed00

08005dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	db0b      	blt.n	8005e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	f003 021f 	and.w	r2, r3, #31
 8005e14:	4907      	ldr	r1, [pc, #28]	; (8005e34 <__NVIC_EnableIRQ+0x38>)
 8005e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	e000e100 	.word	0xe000e100

08005e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	6039      	str	r1, [r7, #0]
 8005e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	db0a      	blt.n	8005e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	490c      	ldr	r1, [pc, #48]	; (8005e84 <__NVIC_SetPriority+0x4c>)
 8005e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e56:	0112      	lsls	r2, r2, #4
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e60:	e00a      	b.n	8005e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	4908      	ldr	r1, [pc, #32]	; (8005e88 <__NVIC_SetPriority+0x50>)
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	3b04      	subs	r3, #4
 8005e70:	0112      	lsls	r2, r2, #4
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	440b      	add	r3, r1
 8005e76:	761a      	strb	r2, [r3, #24]
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	e000e100 	.word	0xe000e100
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b089      	sub	sp, #36	; 0x24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f1c3 0307 	rsb	r3, r3, #7
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	bf28      	it	cs
 8005eaa:	2304      	movcs	r3, #4
 8005eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	2b06      	cmp	r3, #6
 8005eb4:	d902      	bls.n	8005ebc <NVIC_EncodePriority+0x30>
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	3b03      	subs	r3, #3
 8005eba:	e000      	b.n	8005ebe <NVIC_EncodePriority+0x32>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	43da      	mvns	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	401a      	ands	r2, r3
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ed4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	43d9      	mvns	r1, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ee4:	4313      	orrs	r3, r2
         );
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3724      	adds	r7, #36	; 0x24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f04:	d301      	bcc.n	8005f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f06:	2301      	movs	r3, #1
 8005f08:	e00f      	b.n	8005f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f0a:	4a0a      	ldr	r2, [pc, #40]	; (8005f34 <SysTick_Config+0x40>)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f12:	210f      	movs	r1, #15
 8005f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f18:	f7ff ff8e 	bl	8005e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <SysTick_Config+0x40>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f22:	4b04      	ldr	r3, [pc, #16]	; (8005f34 <SysTick_Config+0x40>)
 8005f24:	2207      	movs	r2, #7
 8005f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	e000e010 	.word	0xe000e010

08005f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff ff29 	bl	8005d98 <__NVIC_SetPriorityGrouping>
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b086      	sub	sp, #24
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	4603      	mov	r3, r0
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f60:	f7ff ff3e 	bl	8005de0 <__NVIC_GetPriorityGrouping>
 8005f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	6978      	ldr	r0, [r7, #20]
 8005f6c:	f7ff ff8e 	bl	8005e8c <NVIC_EncodePriority>
 8005f70:	4602      	mov	r2, r0
 8005f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f76:	4611      	mov	r1, r2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff ff5d 	bl	8005e38 <__NVIC_SetPriority>
}
 8005f7e:	bf00      	nop
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff ff31 	bl	8005dfc <__NVIC_EnableIRQ>
}
 8005f9a:	bf00      	nop
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b082      	sub	sp, #8
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff ffa2 	bl	8005ef4 <SysTick_Config>
 8005fb0:	4603      	mov	r3, r0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e00e      	b.n	8005fea <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	795b      	ldrb	r3, [r3, #5]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d105      	bne.n	8005fe2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fe ffab 	bl	8004f38 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b086      	sub	sp, #24
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	607a      	str	r2, [r7, #4]
 8005ffe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006008:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_DMA_Start_IT+0x26>
 8006014:	2302      	movs	r3, #2
 8006016:	e040      	b.n	800609a <HAL_DMA_Start_IT+0xa8>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	d12f      	bne.n	800608c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 f82e 	bl	80060a2 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604a:	223f      	movs	r2, #63	; 0x3f
 800604c:	409a      	lsls	r2, r3
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0216 	orr.w	r2, r2, #22
 8006060:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d007      	beq.n	800607a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f042 0208 	orr.w	r2, r2, #8
 8006078:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f042 0201 	orr.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	e005      	b.n	8006098 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006094:	2302      	movs	r3, #2
 8006096:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b085      	sub	sp, #20
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	607a      	str	r2, [r7, #4]
 80060ae:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060be:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b40      	cmp	r3, #64	; 0x40
 80060ce:	d108      	bne.n	80060e2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060e0:	e007      	b.n	80060f2 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	60da      	str	r2, [r3, #12]
}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
	...

08006100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006100:	b480      	push	{r7}
 8006102:	b089      	sub	sp, #36	; 0x24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800610e:	2300      	movs	r3, #0
 8006110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006112:	2300      	movs	r3, #0
 8006114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
 800611a:	e16b      	b.n	80063f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800611c:	2201      	movs	r2, #1
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4013      	ands	r3, r2
 800612e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	429a      	cmp	r2, r3
 8006136:	f040 815a 	bne.w	80063ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	2b01      	cmp	r3, #1
 8006144:	d005      	beq.n	8006152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800614e:	2b02      	cmp	r3, #2
 8006150:	d130      	bne.n	80061b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	2203      	movs	r2, #3
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	43db      	mvns	r3, r3
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	4013      	ands	r3, r2
 8006168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4313      	orrs	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006188:	2201      	movs	r2, #1
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	43db      	mvns	r3, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	091b      	lsrs	r3, r3, #4
 800619e:	f003 0201 	and.w	r2, r3, #1
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d017      	beq.n	80061f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	2203      	movs	r2, #3
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	43db      	mvns	r3, r3
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	4013      	ands	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f003 0303 	and.w	r3, r3, #3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d123      	bne.n	8006244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	08da      	lsrs	r2, r3, #3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3208      	adds	r2, #8
 8006204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	220f      	movs	r2, #15
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	43db      	mvns	r3, r3
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	4013      	ands	r3, r2
 800621e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	4313      	orrs	r3, r2
 8006234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	08da      	lsrs	r2, r3, #3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	3208      	adds	r2, #8
 800623e:	69b9      	ldr	r1, [r7, #24]
 8006240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	2203      	movs	r2, #3
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	43db      	mvns	r3, r3
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	4013      	ands	r3, r2
 800625a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f003 0203 	and.w	r2, r3, #3
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	4313      	orrs	r3, r2
 8006270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 80b4 	beq.w	80063ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	4b60      	ldr	r3, [pc, #384]	; (800640c <HAL_GPIO_Init+0x30c>)
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	4a5f      	ldr	r2, [pc, #380]	; (800640c <HAL_GPIO_Init+0x30c>)
 8006290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006294:	6453      	str	r3, [r2, #68]	; 0x44
 8006296:	4b5d      	ldr	r3, [pc, #372]	; (800640c <HAL_GPIO_Init+0x30c>)
 8006298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062a2:	4a5b      	ldr	r2, [pc, #364]	; (8006410 <HAL_GPIO_Init+0x310>)
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	089b      	lsrs	r3, r3, #2
 80062a8:	3302      	adds	r3, #2
 80062aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	220f      	movs	r2, #15
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	43db      	mvns	r3, r3
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4013      	ands	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a52      	ldr	r2, [pc, #328]	; (8006414 <HAL_GPIO_Init+0x314>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d02b      	beq.n	8006326 <HAL_GPIO_Init+0x226>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a51      	ldr	r2, [pc, #324]	; (8006418 <HAL_GPIO_Init+0x318>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d025      	beq.n	8006322 <HAL_GPIO_Init+0x222>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a50      	ldr	r2, [pc, #320]	; (800641c <HAL_GPIO_Init+0x31c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d01f      	beq.n	800631e <HAL_GPIO_Init+0x21e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a4f      	ldr	r2, [pc, #316]	; (8006420 <HAL_GPIO_Init+0x320>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d019      	beq.n	800631a <HAL_GPIO_Init+0x21a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a4e      	ldr	r2, [pc, #312]	; (8006424 <HAL_GPIO_Init+0x324>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d013      	beq.n	8006316 <HAL_GPIO_Init+0x216>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a4d      	ldr	r2, [pc, #308]	; (8006428 <HAL_GPIO_Init+0x328>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00d      	beq.n	8006312 <HAL_GPIO_Init+0x212>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a4c      	ldr	r2, [pc, #304]	; (800642c <HAL_GPIO_Init+0x32c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d007      	beq.n	800630e <HAL_GPIO_Init+0x20e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a4b      	ldr	r2, [pc, #300]	; (8006430 <HAL_GPIO_Init+0x330>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d101      	bne.n	800630a <HAL_GPIO_Init+0x20a>
 8006306:	2307      	movs	r3, #7
 8006308:	e00e      	b.n	8006328 <HAL_GPIO_Init+0x228>
 800630a:	2308      	movs	r3, #8
 800630c:	e00c      	b.n	8006328 <HAL_GPIO_Init+0x228>
 800630e:	2306      	movs	r3, #6
 8006310:	e00a      	b.n	8006328 <HAL_GPIO_Init+0x228>
 8006312:	2305      	movs	r3, #5
 8006314:	e008      	b.n	8006328 <HAL_GPIO_Init+0x228>
 8006316:	2304      	movs	r3, #4
 8006318:	e006      	b.n	8006328 <HAL_GPIO_Init+0x228>
 800631a:	2303      	movs	r3, #3
 800631c:	e004      	b.n	8006328 <HAL_GPIO_Init+0x228>
 800631e:	2302      	movs	r3, #2
 8006320:	e002      	b.n	8006328 <HAL_GPIO_Init+0x228>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <HAL_GPIO_Init+0x228>
 8006326:	2300      	movs	r3, #0
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	f002 0203 	and.w	r2, r2, #3
 800632e:	0092      	lsls	r2, r2, #2
 8006330:	4093      	lsls	r3, r2
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4313      	orrs	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006338:	4935      	ldr	r1, [pc, #212]	; (8006410 <HAL_GPIO_Init+0x310>)
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	089b      	lsrs	r3, r3, #2
 800633e:	3302      	adds	r3, #2
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006346:	4b3b      	ldr	r3, [pc, #236]	; (8006434 <HAL_GPIO_Init+0x334>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	43db      	mvns	r3, r3
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	4013      	ands	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800636a:	4a32      	ldr	r2, [pc, #200]	; (8006434 <HAL_GPIO_Init+0x334>)
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006370:	4b30      	ldr	r3, [pc, #192]	; (8006434 <HAL_GPIO_Init+0x334>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	43db      	mvns	r3, r3
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	4013      	ands	r3, r2
 800637e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006394:	4a27      	ldr	r2, [pc, #156]	; (8006434 <HAL_GPIO_Init+0x334>)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800639a:	4b26      	ldr	r3, [pc, #152]	; (8006434 <HAL_GPIO_Init+0x334>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	43db      	mvns	r3, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4013      	ands	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063be:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <HAL_GPIO_Init+0x334>)
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063c4:	4b1b      	ldr	r3, [pc, #108]	; (8006434 <HAL_GPIO_Init+0x334>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	4013      	ands	r3, r2
 80063d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063e8:	4a12      	ldr	r2, [pc, #72]	; (8006434 <HAL_GPIO_Init+0x334>)
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	3301      	adds	r3, #1
 80063f2:	61fb      	str	r3, [r7, #28]
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	f67f ae90 	bls.w	800611c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80063fc:	bf00      	nop
 80063fe:	bf00      	nop
 8006400:	3724      	adds	r7, #36	; 0x24
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40023800 	.word	0x40023800
 8006410:	40013800 	.word	0x40013800
 8006414:	40020000 	.word	0x40020000
 8006418:	40020400 	.word	0x40020400
 800641c:	40020800 	.word	0x40020800
 8006420:	40020c00 	.word	0x40020c00
 8006424:	40021000 	.word	0x40021000
 8006428:	40021400 	.word	0x40021400
 800642c:	40021800 	.word	0x40021800
 8006430:	40021c00 	.word	0x40021c00
 8006434:	40013c00 	.word	0x40013c00

08006438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	807b      	strh	r3, [r7, #2]
 8006444:	4613      	mov	r3, r2
 8006446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006448:	787b      	ldrb	r3, [r7, #1]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800644e:	887a      	ldrh	r2, [r7, #2]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006454:	e003      	b.n	800645e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006456:	887b      	ldrh	r3, [r7, #2]
 8006458:	041a      	lsls	r2, r3, #16
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	619a      	str	r2, [r3, #24]
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006476:	4b08      	ldr	r3, [pc, #32]	; (8006498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006478:	695a      	ldr	r2, [r3, #20]
 800647a:	88fb      	ldrh	r3, [r7, #6]
 800647c:	4013      	ands	r3, r2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d006      	beq.n	8006490 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006482:	4a05      	ldr	r2, [pc, #20]	; (8006498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006488:	88fb      	ldrh	r3, [r7, #6]
 800648a:	4618      	mov	r0, r3
 800648c:	f000 f806 	bl	800649c <HAL_GPIO_EXTI_Callback>
  }
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	40013c00 	.word	0x40013c00

0800649c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
	...

080064b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e12b      	b.n	800671e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fe fd4e 	bl	8004f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2224      	movs	r2, #36	; 0x24
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006518:	f002 f830 	bl	800857c <HAL_RCC_GetPCLK1Freq>
 800651c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	4a81      	ldr	r2, [pc, #516]	; (8006728 <HAL_I2C_Init+0x274>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d807      	bhi.n	8006538 <HAL_I2C_Init+0x84>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4a80      	ldr	r2, [pc, #512]	; (800672c <HAL_I2C_Init+0x278>)
 800652c:	4293      	cmp	r3, r2
 800652e:	bf94      	ite	ls
 8006530:	2301      	movls	r3, #1
 8006532:	2300      	movhi	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	e006      	b.n	8006546 <HAL_I2C_Init+0x92>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4a7d      	ldr	r2, [pc, #500]	; (8006730 <HAL_I2C_Init+0x27c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	bf94      	ite	ls
 8006540:	2301      	movls	r3, #1
 8006542:	2300      	movhi	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e0e7      	b.n	800671e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a78      	ldr	r2, [pc, #480]	; (8006734 <HAL_I2C_Init+0x280>)
 8006552:	fba2 2303 	umull	r2, r3, r2, r3
 8006556:	0c9b      	lsrs	r3, r3, #18
 8006558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	4a6a      	ldr	r2, [pc, #424]	; (8006728 <HAL_I2C_Init+0x274>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d802      	bhi.n	8006588 <HAL_I2C_Init+0xd4>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	3301      	adds	r3, #1
 8006586:	e009      	b.n	800659c <HAL_I2C_Init+0xe8>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	4a69      	ldr	r2, [pc, #420]	; (8006738 <HAL_I2C_Init+0x284>)
 8006594:	fba2 2303 	umull	r2, r3, r2, r3
 8006598:	099b      	lsrs	r3, r3, #6
 800659a:	3301      	adds	r3, #1
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6812      	ldr	r2, [r2, #0]
 80065a0:	430b      	orrs	r3, r1
 80065a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	495c      	ldr	r1, [pc, #368]	; (8006728 <HAL_I2C_Init+0x274>)
 80065b8:	428b      	cmp	r3, r1
 80065ba:	d819      	bhi.n	80065f0 <HAL_I2C_Init+0x13c>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	1e59      	subs	r1, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80065ca:	1c59      	adds	r1, r3, #1
 80065cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065d0:	400b      	ands	r3, r1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <HAL_I2C_Init+0x138>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1e59      	subs	r1, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80065e4:	3301      	adds	r3, #1
 80065e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ea:	e051      	b.n	8006690 <HAL_I2C_Init+0x1dc>
 80065ec:	2304      	movs	r3, #4
 80065ee:	e04f      	b.n	8006690 <HAL_I2C_Init+0x1dc>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d111      	bne.n	800661c <HAL_I2C_Init+0x168>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	1e58      	subs	r0, r3, #1
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6859      	ldr	r1, [r3, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	440b      	add	r3, r1
 8006606:	fbb0 f3f3 	udiv	r3, r0, r3
 800660a:	3301      	adds	r3, #1
 800660c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006610:	2b00      	cmp	r3, #0
 8006612:	bf0c      	ite	eq
 8006614:	2301      	moveq	r3, #1
 8006616:	2300      	movne	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	e012      	b.n	8006642 <HAL_I2C_Init+0x18e>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	1e58      	subs	r0, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6859      	ldr	r1, [r3, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	0099      	lsls	r1, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006632:	3301      	adds	r3, #1
 8006634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006638:	2b00      	cmp	r3, #0
 800663a:	bf0c      	ite	eq
 800663c:	2301      	moveq	r3, #1
 800663e:	2300      	movne	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <HAL_I2C_Init+0x196>
 8006646:	2301      	movs	r3, #1
 8006648:	e022      	b.n	8006690 <HAL_I2C_Init+0x1dc>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10e      	bne.n	8006670 <HAL_I2C_Init+0x1bc>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1e58      	subs	r0, r3, #1
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6859      	ldr	r1, [r3, #4]
 800665a:	460b      	mov	r3, r1
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	440b      	add	r3, r1
 8006660:	fbb0 f3f3 	udiv	r3, r0, r3
 8006664:	3301      	adds	r3, #1
 8006666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800666a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666e:	e00f      	b.n	8006690 <HAL_I2C_Init+0x1dc>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	1e58      	subs	r0, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6859      	ldr	r1, [r3, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	440b      	add	r3, r1
 800667e:	0099      	lsls	r1, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	fbb0 f3f3 	udiv	r3, r0, r3
 8006686:	3301      	adds	r3, #1
 8006688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800668c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	6809      	ldr	r1, [r1, #0]
 8006694:	4313      	orrs	r3, r2
 8006696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69da      	ldr	r2, [r3, #28]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6911      	ldr	r1, [r2, #16]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	68d2      	ldr	r2, [r2, #12]
 80066ca:	4311      	orrs	r1, r2
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6812      	ldr	r2, [r2, #0]
 80066d0:	430b      	orrs	r3, r1
 80066d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2220      	movs	r2, #32
 800670a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	000186a0 	.word	0x000186a0
 800672c:	001e847f 	.word	0x001e847f
 8006730:	003d08ff 	.word	0x003d08ff
 8006734:	431bde83 	.word	0x431bde83
 8006738:	10624dd3 	.word	0x10624dd3

0800673c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	607a      	str	r2, [r7, #4]
 8006746:	461a      	mov	r2, r3
 8006748:	460b      	mov	r3, r1
 800674a:	817b      	strh	r3, [r7, #10]
 800674c:	4613      	mov	r3, r2
 800674e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006750:	f7ff f890 	bl	8005874 <HAL_GetTick>
 8006754:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b20      	cmp	r3, #32
 8006760:	f040 80e0 	bne.w	8006924 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	2319      	movs	r3, #25
 800676a:	2201      	movs	r2, #1
 800676c:	4970      	ldr	r1, [pc, #448]	; (8006930 <HAL_I2C_Master_Transmit+0x1f4>)
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f001 f8f6 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800677a:	2302      	movs	r3, #2
 800677c:	e0d3      	b.n	8006926 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_I2C_Master_Transmit+0x50>
 8006788:	2302      	movs	r3, #2
 800678a:	e0cc      	b.n	8006926 <HAL_I2C_Master_Transmit+0x1ea>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d007      	beq.n	80067b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2221      	movs	r2, #33	; 0x21
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2210      	movs	r2, #16
 80067ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	893a      	ldrh	r2, [r7, #8]
 80067e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4a50      	ldr	r2, [pc, #320]	; (8006934 <HAL_I2C_Master_Transmit+0x1f8>)
 80067f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80067f4:	8979      	ldrh	r1, [r7, #10]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	6a3a      	ldr	r2, [r7, #32]
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 fde2 	bl	80073c4 <I2C_MasterRequestWrite>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e08d      	b.n	8006926 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800680a:	2300      	movs	r3, #0
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006820:	e066      	b.n	80068f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	6a39      	ldr	r1, [r7, #32]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f001 f970 	bl	8007b0c <I2C_WaitOnTXEFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00d      	beq.n	800684e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	2b04      	cmp	r3, #4
 8006838:	d107      	bne.n	800684a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006848:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e06b      	b.n	8006926 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	781a      	ldrb	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b04      	cmp	r3, #4
 800688a:	d11b      	bne.n	80068c4 <HAL_I2C_Master_Transmit+0x188>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006890:	2b00      	cmp	r3, #0
 8006892:	d017      	beq.n	80068c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	781a      	ldrb	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	6a39      	ldr	r1, [r7, #32]
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f001 f960 	bl	8007b8e <I2C_WaitOnBTFFlagUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00d      	beq.n	80068f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d107      	bne.n	80068ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e01a      	b.n	8006926 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d194      	bne.n	8006822 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	e000      	b.n	8006926 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006924:	2302      	movs	r3, #2
  }
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	00100002 	.word	0x00100002
 8006934:	ffff0000 	.word	0xffff0000

08006938 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08c      	sub	sp, #48	; 0x30
 800693c:	af02      	add	r7, sp, #8
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	607a      	str	r2, [r7, #4]
 8006942:	461a      	mov	r2, r3
 8006944:	460b      	mov	r3, r1
 8006946:	817b      	strh	r3, [r7, #10]
 8006948:	4613      	mov	r3, r2
 800694a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800694c:	f7fe ff92 	bl	8005874 <HAL_GetTick>
 8006950:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b20      	cmp	r3, #32
 800695c:	f040 820b 	bne.w	8006d76 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	2319      	movs	r3, #25
 8006966:	2201      	movs	r2, #1
 8006968:	497c      	ldr	r1, [pc, #496]	; (8006b5c <HAL_I2C_Master_Receive+0x224>)
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 fff8 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006976:	2302      	movs	r3, #2
 8006978:	e1fe      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_I2C_Master_Receive+0x50>
 8006984:	2302      	movs	r3, #2
 8006986:	e1f7      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b01      	cmp	r3, #1
 800699c:	d007      	beq.n	80069ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0201 	orr.w	r2, r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2222      	movs	r2, #34	; 0x22
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2210      	movs	r2, #16
 80069ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	893a      	ldrh	r2, [r7, #8]
 80069de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4a5c      	ldr	r2, [pc, #368]	; (8006b60 <HAL_I2C_Master_Receive+0x228>)
 80069ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80069f0:	8979      	ldrh	r1, [r7, #10]
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fd66 	bl	80074c8 <I2C_MasterRequestRead>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e1b8      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d113      	bne.n	8006a36 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	623b      	str	r3, [r7, #32]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	623b      	str	r3, [r7, #32]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	623b      	str	r3, [r7, #32]
 8006a22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e18c      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d11b      	bne.n	8006a76 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	61fb      	str	r3, [r7, #28]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e16c      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d11b      	bne.n	8006ab6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	e14c      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ac4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006adc:	e138      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	f200 80f1 	bhi.w	8006cca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d123      	bne.n	8006b38 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f001 f88b 	bl	8007c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e139      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b36:	e10b      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d14e      	bne.n	8006bde <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	2200      	movs	r2, #0
 8006b48:	4906      	ldr	r1, [pc, #24]	; (8006b64 <HAL_I2C_Master_Receive+0x22c>)
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 ff08 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d008      	beq.n	8006b68 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e10e      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
 8006b5a:	bf00      	nop
 8006b5c:	00100002 	.word	0x00100002
 8006b60:	ffff0000 	.word	0xffff0000
 8006b64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bdc:	e0b8      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	2200      	movs	r2, #0
 8006be6:	4966      	ldr	r1, [pc, #408]	; (8006d80 <HAL_I2C_Master_Receive+0x448>)
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 feb9 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e0bf      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	2200      	movs	r2, #0
 8006c42:	494f      	ldr	r1, [pc, #316]	; (8006d80 <HAL_I2C_Master_Receive+0x448>)
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 fe8b 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e091      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	691a      	ldr	r2, [r3, #16]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cc8:	e042      	b.n	8006d50 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ccc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 ff9e 	bl	8007c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e04c      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691a      	ldr	r2, [r3, #16]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	b2d2      	uxtb	r2, r2
 8006cea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d118      	bne.n	8006d50 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f47f aec2 	bne.w	8006ade <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	e000      	b.n	8006d78 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d76:	2302      	movs	r3, #2
  }
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3728      	adds	r7, #40	; 0x28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	00010004 	.word	0x00010004

08006d84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af02      	add	r7, sp, #8
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	4611      	mov	r1, r2
 8006d90:	461a      	mov	r2, r3
 8006d92:	4603      	mov	r3, r0
 8006d94:	817b      	strh	r3, [r7, #10]
 8006d96:	460b      	mov	r3, r1
 8006d98:	813b      	strh	r3, [r7, #8]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d9e:	f7fe fd69 	bl	8005874 <HAL_GetTick>
 8006da2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b20      	cmp	r3, #32
 8006dae:	f040 80d9 	bne.w	8006f64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	2319      	movs	r3, #25
 8006db8:	2201      	movs	r2, #1
 8006dba:	496d      	ldr	r1, [pc, #436]	; (8006f70 <HAL_I2C_Mem_Write+0x1ec>)
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 fdcf 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e0cc      	b.n	8006f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d101      	bne.n	8006dda <HAL_I2C_Mem_Write+0x56>
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	e0c5      	b.n	8006f66 <HAL_I2C_Mem_Write+0x1e2>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d007      	beq.n	8006e00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2221      	movs	r2, #33	; 0x21
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2240      	movs	r2, #64	; 0x40
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a3a      	ldr	r2, [r7, #32]
 8006e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4a4d      	ldr	r2, [pc, #308]	; (8006f74 <HAL_I2C_Mem_Write+0x1f0>)
 8006e40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e42:	88f8      	ldrh	r0, [r7, #6]
 8006e44:	893a      	ldrh	r2, [r7, #8]
 8006e46:	8979      	ldrh	r1, [r7, #10]
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	4603      	mov	r3, r0
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 fc06 	bl	8007664 <I2C_RequestMemoryWrite>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d052      	beq.n	8006f04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e081      	b.n	8006f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 fe50 	bl	8007b0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00d      	beq.n	8006e8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d107      	bne.n	8006e8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e06b      	b.n	8006f66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	781a      	ldrb	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d11b      	bne.n	8006f04 <HAL_I2C_Mem_Write+0x180>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d017      	beq.n	8006f04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1aa      	bne.n	8006e62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 fe3c 	bl	8007b8e <I2C_WaitOnBTFFlagUntilTimeout>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00d      	beq.n	8006f38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f20:	2b04      	cmp	r3, #4
 8006f22:	d107      	bne.n	8006f34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e016      	b.n	8006f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	e000      	b.n	8006f66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006f64:	2302      	movs	r3, #2
  }
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	00100002 	.word	0x00100002
 8006f74:	ffff0000 	.word	0xffff0000

08006f78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08c      	sub	sp, #48	; 0x30
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	4608      	mov	r0, r1
 8006f82:	4611      	mov	r1, r2
 8006f84:	461a      	mov	r2, r3
 8006f86:	4603      	mov	r3, r0
 8006f88:	817b      	strh	r3, [r7, #10]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	813b      	strh	r3, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f92:	f7fe fc6f 	bl	8005874 <HAL_GetTick>
 8006f96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	f040 8208 	bne.w	80073b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	2319      	movs	r3, #25
 8006fac:	2201      	movs	r2, #1
 8006fae:	497b      	ldr	r1, [pc, #492]	; (800719c <HAL_I2C_Mem_Read+0x224>)
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 fcd5 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e1fb      	b.n	80073b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d101      	bne.n	8006fce <HAL_I2C_Mem_Read+0x56>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e1f4      	b.n	80073b8 <HAL_I2C_Mem_Read+0x440>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d007      	beq.n	8006ff4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0201 	orr.w	r2, r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007002:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2222      	movs	r2, #34	; 0x22
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2240      	movs	r2, #64	; 0x40
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800701e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007024:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4a5b      	ldr	r2, [pc, #364]	; (80071a0 <HAL_I2C_Mem_Read+0x228>)
 8007034:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007036:	88f8      	ldrh	r0, [r7, #6]
 8007038:	893a      	ldrh	r2, [r7, #8]
 800703a:	8979      	ldrh	r1, [r7, #10]
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	4603      	mov	r3, r0
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 fba2 	bl	8007790 <I2C_RequestMemoryRead>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e1b0      	b.n	80073b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800705a:	2b00      	cmp	r3, #0
 800705c:	d113      	bne.n	8007086 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800705e:	2300      	movs	r3, #0
 8007060:	623b      	str	r3, [r7, #32]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	623b      	str	r3, [r7, #32]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	623b      	str	r3, [r7, #32]
 8007072:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	e184      	b.n	8007390 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708a:	2b01      	cmp	r3, #1
 800708c:	d11b      	bne.n	80070c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800709c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800709e:	2300      	movs	r3, #0
 80070a0:	61fb      	str	r3, [r7, #28]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	61fb      	str	r3, [r7, #28]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	61fb      	str	r3, [r7, #28]
 80070b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	e164      	b.n	8007390 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d11b      	bne.n	8007106 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ee:	2300      	movs	r3, #0
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	61bb      	str	r3, [r7, #24]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	61bb      	str	r3, [r7, #24]
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	e144      	b.n	8007390 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007106:	2300      	movs	r3, #0
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	617b      	str	r3, [r7, #20]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	617b      	str	r3, [r7, #20]
 800711a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800711c:	e138      	b.n	8007390 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007122:	2b03      	cmp	r3, #3
 8007124:	f200 80f1 	bhi.w	800730a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712c:	2b01      	cmp	r3, #1
 800712e:	d123      	bne.n	8007178 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fd6b 	bl	8007c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e139      	b.n	80073b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691a      	ldr	r2, [r3, #16]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007160:	3b01      	subs	r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800716c:	b29b      	uxth	r3, r3
 800716e:	3b01      	subs	r3, #1
 8007170:	b29a      	uxth	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007176:	e10b      	b.n	8007390 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800717c:	2b02      	cmp	r3, #2
 800717e:	d14e      	bne.n	800721e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	2200      	movs	r2, #0
 8007188:	4906      	ldr	r1, [pc, #24]	; (80071a4 <HAL_I2C_Mem_Read+0x22c>)
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fbe8 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d008      	beq.n	80071a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e10e      	b.n	80073b8 <HAL_I2C_Mem_Read+0x440>
 800719a:	bf00      	nop
 800719c:	00100002 	.word	0x00100002
 80071a0:	ffff0000 	.word	0xffff0000
 80071a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691a      	ldr	r2, [r3, #16]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	3b01      	subs	r3, #1
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	691a      	ldr	r2, [r3, #16]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	1c5a      	adds	r2, r3, #1
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007212:	b29b      	uxth	r3, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	b29a      	uxth	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800721c:	e0b8      	b.n	8007390 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007224:	2200      	movs	r2, #0
 8007226:	4966      	ldr	r1, [pc, #408]	; (80073c0 <HAL_I2C_Mem_Read+0x448>)
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 fb99 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e0bf      	b.n	80073b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	691a      	ldr	r2, [r3, #16]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007264:	3b01      	subs	r3, #1
 8007266:	b29a      	uxth	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007270:	b29b      	uxth	r3, r3
 8007272:	3b01      	subs	r3, #1
 8007274:	b29a      	uxth	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	2200      	movs	r2, #0
 8007282:	494f      	ldr	r1, [pc, #316]	; (80073c0 <HAL_I2C_Mem_Read+0x448>)
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 fb6b 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e091      	b.n	80073b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691a      	ldr	r2, [r3, #16]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	691a      	ldr	r2, [r3, #16]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007308:	e042      	b.n	8007390 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800730a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fc7e 	bl	8007c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e04c      	b.n	80073b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691a      	ldr	r2, [r3, #16]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	b2d2      	uxtb	r2, r2
 800732a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733a:	3b01      	subs	r3, #1
 800733c:	b29a      	uxth	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007346:	b29b      	uxth	r3, r3
 8007348:	3b01      	subs	r3, #1
 800734a:	b29a      	uxth	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b04      	cmp	r3, #4
 800735c:	d118      	bne.n	8007390 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	691a      	ldr	r2, [r3, #16]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007386:	b29b      	uxth	r3, r3
 8007388:	3b01      	subs	r3, #1
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007394:	2b00      	cmp	r3, #0
 8007396:	f47f aec2 	bne.w	800711e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2220      	movs	r2, #32
 800739e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	e000      	b.n	80073b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80073b6:	2302      	movs	r3, #2
  }
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3728      	adds	r7, #40	; 0x28
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	00010004 	.word	0x00010004

080073c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af02      	add	r7, sp, #8
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	607a      	str	r2, [r7, #4]
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	460b      	mov	r3, r1
 80073d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d006      	beq.n	80073ee <I2C_MasterRequestWrite+0x2a>
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d003      	beq.n	80073ee <I2C_MasterRequestWrite+0x2a>
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073ec:	d108      	bne.n	8007400 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	e00b      	b.n	8007418 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	2b12      	cmp	r3, #18
 8007406:	d107      	bne.n	8007418 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007416:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 fa9b 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00d      	beq.n	800744c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743e:	d103      	bne.n	8007448 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007446:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e035      	b.n	80074b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007454:	d108      	bne.n	8007468 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007456:	897b      	ldrh	r3, [r7, #10]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	461a      	mov	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007464:	611a      	str	r2, [r3, #16]
 8007466:	e01b      	b.n	80074a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007468:	897b      	ldrh	r3, [r7, #10]
 800746a:	11db      	asrs	r3, r3, #7
 800746c:	b2db      	uxtb	r3, r3
 800746e:	f003 0306 	and.w	r3, r3, #6
 8007472:	b2db      	uxtb	r3, r3
 8007474:	f063 030f 	orn	r3, r3, #15
 8007478:	b2da      	uxtb	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	490e      	ldr	r1, [pc, #56]	; (80074c0 <I2C_MasterRequestWrite+0xfc>)
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fac1 	bl	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e010      	b.n	80074b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007496:	897b      	ldrh	r3, [r7, #10]
 8007498:	b2da      	uxtb	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	4907      	ldr	r1, [pc, #28]	; (80074c4 <I2C_MasterRequestWrite+0x100>)
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 fab1 	bl	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	00010008 	.word	0x00010008
 80074c4:	00010002 	.word	0x00010002

080074c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	607a      	str	r2, [r7, #4]
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	460b      	mov	r3, r1
 80074d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d006      	beq.n	8007502 <I2C_MasterRequestRead+0x3a>
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d003      	beq.n	8007502 <I2C_MasterRequestRead+0x3a>
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007500:	d108      	bne.n	8007514 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	e00b      	b.n	800752c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	2b11      	cmp	r3, #17
 800751a:	d107      	bne.n	800752c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800752a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 fa11 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00d      	beq.n	8007560 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007552:	d103      	bne.n	800755c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800755a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e079      	b.n	8007654 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007568:	d108      	bne.n	800757c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800756a:	897b      	ldrh	r3, [r7, #10]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	b2da      	uxtb	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	611a      	str	r2, [r3, #16]
 800757a:	e05f      	b.n	800763c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800757c:	897b      	ldrh	r3, [r7, #10]
 800757e:	11db      	asrs	r3, r3, #7
 8007580:	b2db      	uxtb	r3, r3
 8007582:	f003 0306 	and.w	r3, r3, #6
 8007586:	b2db      	uxtb	r3, r3
 8007588:	f063 030f 	orn	r3, r3, #15
 800758c:	b2da      	uxtb	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	4930      	ldr	r1, [pc, #192]	; (800765c <I2C_MasterRequestRead+0x194>)
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 fa37 	bl	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e054      	b.n	8007654 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80075aa:	897b      	ldrh	r3, [r7, #10]
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	4929      	ldr	r1, [pc, #164]	; (8007660 <I2C_MasterRequestRead+0x198>)
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 fa27 	bl	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e044      	b.n	8007654 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ca:	2300      	movs	r3, #0
 80075cc:	613b      	str	r3, [r7, #16]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	613b      	str	r3, [r7, #16]
 80075de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 f9af 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00d      	beq.n	8007624 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007616:	d103      	bne.n	8007620 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800761e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e017      	b.n	8007654 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007624:	897b      	ldrh	r3, [r7, #10]
 8007626:	11db      	asrs	r3, r3, #7
 8007628:	b2db      	uxtb	r3, r3
 800762a:	f003 0306 	and.w	r3, r3, #6
 800762e:	b2db      	uxtb	r3, r3
 8007630:	f063 030e 	orn	r3, r3, #14
 8007634:	b2da      	uxtb	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	4907      	ldr	r1, [pc, #28]	; (8007660 <I2C_MasterRequestRead+0x198>)
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 f9e3 	bl	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e000      	b.n	8007654 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	00010008 	.word	0x00010008
 8007660:	00010002 	.word	0x00010002

08007664 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af02      	add	r7, sp, #8
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	4608      	mov	r0, r1
 800766e:	4611      	mov	r1, r2
 8007670:	461a      	mov	r2, r3
 8007672:	4603      	mov	r3, r0
 8007674:	817b      	strh	r3, [r7, #10]
 8007676:	460b      	mov	r3, r1
 8007678:	813b      	strh	r3, [r7, #8]
 800767a:	4613      	mov	r3, r2
 800767c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800768c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	2200      	movs	r2, #0
 8007696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 f960 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00d      	beq.n	80076c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b4:	d103      	bne.n	80076be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e05f      	b.n	8007782 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076c2:	897b      	ldrh	r3, [r7, #10]
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	461a      	mov	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	6a3a      	ldr	r2, [r7, #32]
 80076d6:	492d      	ldr	r1, [pc, #180]	; (800778c <I2C_RequestMemoryWrite+0x128>)
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 f998 	bl	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e04c      	b.n	8007782 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076e8:	2300      	movs	r3, #0
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007700:	6a39      	ldr	r1, [r7, #32]
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fa02 	bl	8007b0c <I2C_WaitOnTXEFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00d      	beq.n	800772a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	2b04      	cmp	r3, #4
 8007714:	d107      	bne.n	8007726 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007724:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e02b      	b.n	8007782 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d105      	bne.n	800773c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007730:	893b      	ldrh	r3, [r7, #8]
 8007732:	b2da      	uxtb	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	611a      	str	r2, [r3, #16]
 800773a:	e021      	b.n	8007780 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800773c:	893b      	ldrh	r3, [r7, #8]
 800773e:	0a1b      	lsrs	r3, r3, #8
 8007740:	b29b      	uxth	r3, r3
 8007742:	b2da      	uxtb	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800774a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774c:	6a39      	ldr	r1, [r7, #32]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 f9dc 	bl	8007b0c <I2C_WaitOnTXEFlagUntilTimeout>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00d      	beq.n	8007776 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	2b04      	cmp	r3, #4
 8007760:	d107      	bne.n	8007772 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007770:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e005      	b.n	8007782 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007776:	893b      	ldrh	r3, [r7, #8]
 8007778:	b2da      	uxtb	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	00010002 	.word	0x00010002

08007790 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af02      	add	r7, sp, #8
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	4608      	mov	r0, r1
 800779a:	4611      	mov	r1, r2
 800779c:	461a      	mov	r2, r3
 800779e:	4603      	mov	r3, r0
 80077a0:	817b      	strh	r3, [r7, #10]
 80077a2:	460b      	mov	r3, r1
 80077a4:	813b      	strh	r3, [r7, #8]
 80077a6:	4613      	mov	r3, r2
 80077a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 f8c2 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00d      	beq.n	80077fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f0:	d103      	bne.n	80077fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e0aa      	b.n	8007954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077fe:	897b      	ldrh	r3, [r7, #10]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	461a      	mov	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800780c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	6a3a      	ldr	r2, [r7, #32]
 8007812:	4952      	ldr	r1, [pc, #328]	; (800795c <I2C_RequestMemoryRead+0x1cc>)
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 f8fa 	bl	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e097      	b.n	8007954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007824:	2300      	movs	r3, #0
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800783a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783c:	6a39      	ldr	r1, [r7, #32]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f964 	bl	8007b0c <I2C_WaitOnTXEFlagUntilTimeout>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00d      	beq.n	8007866 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	2b04      	cmp	r3, #4
 8007850:	d107      	bne.n	8007862 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007860:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e076      	b.n	8007954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007866:	88fb      	ldrh	r3, [r7, #6]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d105      	bne.n	8007878 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800786c:	893b      	ldrh	r3, [r7, #8]
 800786e:	b2da      	uxtb	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	611a      	str	r2, [r3, #16]
 8007876:	e021      	b.n	80078bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007878:	893b      	ldrh	r3, [r7, #8]
 800787a:	0a1b      	lsrs	r3, r3, #8
 800787c:	b29b      	uxth	r3, r3
 800787e:	b2da      	uxtb	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007888:	6a39      	ldr	r1, [r7, #32]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 f93e 	bl	8007b0c <I2C_WaitOnTXEFlagUntilTimeout>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00d      	beq.n	80078b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	2b04      	cmp	r3, #4
 800789c:	d107      	bne.n	80078ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e050      	b.n	8007954 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078b2:	893b      	ldrh	r3, [r7, #8]
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078be:	6a39      	ldr	r1, [r7, #32]
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f923 	bl	8007b0c <I2C_WaitOnTXEFlagUntilTimeout>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00d      	beq.n	80078e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	d107      	bne.n	80078e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e035      	b.n	8007954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	2200      	movs	r2, #0
 8007900:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 f82b 	bl	8007960 <I2C_WaitOnFlagUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00d      	beq.n	800792c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800791e:	d103      	bne.n	8007928 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007926:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e013      	b.n	8007954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800792c:	897b      	ldrh	r3, [r7, #10]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f043 0301 	orr.w	r3, r3, #1
 8007934:	b2da      	uxtb	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	6a3a      	ldr	r2, [r7, #32]
 8007940:	4906      	ldr	r1, [pc, #24]	; (800795c <I2C_RequestMemoryRead+0x1cc>)
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 f863 	bl	8007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e000      	b.n	8007954 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	00010002 	.word	0x00010002

08007960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	603b      	str	r3, [r7, #0]
 800796c:	4613      	mov	r3, r2
 800796e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007970:	e025      	b.n	80079be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007978:	d021      	beq.n	80079be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800797a:	f7fd ff7b 	bl	8005874 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d302      	bcc.n	8007990 <I2C_WaitOnFlagUntilTimeout+0x30>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d116      	bne.n	80079be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2220      	movs	r2, #32
 800799a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	f043 0220 	orr.w	r2, r3, #32
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e023      	b.n	8007a06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	0c1b      	lsrs	r3, r3, #16
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d10d      	bne.n	80079e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	43da      	mvns	r2, r3
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4013      	ands	r3, r2
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bf0c      	ite	eq
 80079da:	2301      	moveq	r3, #1
 80079dc:	2300      	movne	r3, #0
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	e00c      	b.n	80079fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	43da      	mvns	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4013      	ands	r3, r2
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bf0c      	ite	eq
 80079f6:	2301      	moveq	r3, #1
 80079f8:	2300      	movne	r3, #0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d0b6      	beq.n	8007972 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	607a      	str	r2, [r7, #4]
 8007a1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a1c:	e051      	b.n	8007ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a2c:	d123      	bne.n	8007a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	f043 0204 	orr.w	r2, r3, #4
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e046      	b.n	8007b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a7c:	d021      	beq.n	8007ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a7e:	f7fd fef9 	bl	8005874 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d302      	bcc.n	8007a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d116      	bne.n	8007ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	f043 0220 	orr.w	r2, r3, #32
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e020      	b.n	8007b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	0c1b      	lsrs	r3, r3, #16
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d10c      	bne.n	8007ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	43da      	mvns	r2, r3
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bf14      	ite	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	2300      	moveq	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	e00b      	b.n	8007afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	43da      	mvns	r2, r3
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	4013      	ands	r3, r2
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bf14      	ite	ne
 8007af8:	2301      	movne	r3, #1
 8007afa:	2300      	moveq	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d18d      	bne.n	8007a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b18:	e02d      	b.n	8007b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 f8ce 	bl	8007cbc <I2C_IsAcknowledgeFailed>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e02d      	b.n	8007b86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b30:	d021      	beq.n	8007b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b32:	f7fd fe9f 	bl	8005874 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d302      	bcc.n	8007b48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d116      	bne.n	8007b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	f043 0220 	orr.w	r2, r3, #32
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e007      	b.n	8007b86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b80:	2b80      	cmp	r3, #128	; 0x80
 8007b82:	d1ca      	bne.n	8007b1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b9a:	e02d      	b.n	8007bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 f88d 	bl	8007cbc <I2C_IsAcknowledgeFailed>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e02d      	b.n	8007c08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bb2:	d021      	beq.n	8007bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb4:	f7fd fe5e 	bl	8005874 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d302      	bcc.n	8007bca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d116      	bne.n	8007bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be4:	f043 0220 	orr.w	r2, r3, #32
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e007      	b.n	8007c08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	f003 0304 	and.w	r3, r3, #4
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d1ca      	bne.n	8007b9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c1c:	e042      	b.n	8007ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	f003 0310 	and.w	r3, r3, #16
 8007c28:	2b10      	cmp	r3, #16
 8007c2a:	d119      	bne.n	8007c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0210 	mvn.w	r2, #16
 8007c34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e029      	b.n	8007cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c60:	f7fd fe08 	bl	8005874 <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d302      	bcc.n	8007c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d116      	bne.n	8007ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	f043 0220 	orr.w	r2, r3, #32
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e007      	b.n	8007cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cae:	2b40      	cmp	r3, #64	; 0x40
 8007cb0:	d1b5      	bne.n	8007c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd2:	d11b      	bne.n	8007d0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf8:	f043 0204 	orr.w	r2, r3, #4
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
	...

08007d1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e267      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d075      	beq.n	8007e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d3a:	4b88      	ldr	r3, [pc, #544]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 030c 	and.w	r3, r3, #12
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d00c      	beq.n	8007d60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d46:	4b85      	ldr	r3, [pc, #532]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d4e:	2b08      	cmp	r3, #8
 8007d50:	d112      	bne.n	8007d78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d52:	4b82      	ldr	r3, [pc, #520]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d5e:	d10b      	bne.n	8007d78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d60:	4b7e      	ldr	r3, [pc, #504]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d05b      	beq.n	8007e24 <HAL_RCC_OscConfig+0x108>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d157      	bne.n	8007e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e242      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d80:	d106      	bne.n	8007d90 <HAL_RCC_OscConfig+0x74>
 8007d82:	4b76      	ldr	r3, [pc, #472]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a75      	ldr	r2, [pc, #468]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	e01d      	b.n	8007dcc <HAL_RCC_OscConfig+0xb0>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d98:	d10c      	bne.n	8007db4 <HAL_RCC_OscConfig+0x98>
 8007d9a:	4b70      	ldr	r3, [pc, #448]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a6f      	ldr	r2, [pc, #444]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	4b6d      	ldr	r3, [pc, #436]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a6c      	ldr	r2, [pc, #432]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	e00b      	b.n	8007dcc <HAL_RCC_OscConfig+0xb0>
 8007db4:	4b69      	ldr	r3, [pc, #420]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a68      	ldr	r2, [pc, #416]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	4b66      	ldr	r3, [pc, #408]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a65      	ldr	r2, [pc, #404]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d013      	beq.n	8007dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dd4:	f7fd fd4e 	bl	8005874 <HAL_GetTick>
 8007dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dda:	e008      	b.n	8007dee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ddc:	f7fd fd4a 	bl	8005874 <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	2b64      	cmp	r3, #100	; 0x64
 8007de8:	d901      	bls.n	8007dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e207      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dee:	4b5b      	ldr	r3, [pc, #364]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d0f0      	beq.n	8007ddc <HAL_RCC_OscConfig+0xc0>
 8007dfa:	e014      	b.n	8007e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dfc:	f7fd fd3a 	bl	8005874 <HAL_GetTick>
 8007e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e02:	e008      	b.n	8007e16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e04:	f7fd fd36 	bl	8005874 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	2b64      	cmp	r3, #100	; 0x64
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e1f3      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e16:	4b51      	ldr	r3, [pc, #324]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1f0      	bne.n	8007e04 <HAL_RCC_OscConfig+0xe8>
 8007e22:	e000      	b.n	8007e26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d063      	beq.n	8007efa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e32:	4b4a      	ldr	r3, [pc, #296]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 030c 	and.w	r3, r3, #12
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00b      	beq.n	8007e56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e3e:	4b47      	ldr	r3, [pc, #284]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e46:	2b08      	cmp	r3, #8
 8007e48:	d11c      	bne.n	8007e84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e4a:	4b44      	ldr	r3, [pc, #272]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d116      	bne.n	8007e84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e56:	4b41      	ldr	r3, [pc, #260]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d005      	beq.n	8007e6e <HAL_RCC_OscConfig+0x152>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d001      	beq.n	8007e6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e1c7      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e6e:	4b3b      	ldr	r3, [pc, #236]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	4937      	ldr	r1, [pc, #220]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e82:	e03a      	b.n	8007efa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d020      	beq.n	8007ece <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e8c:	4b34      	ldr	r3, [pc, #208]	; (8007f60 <HAL_RCC_OscConfig+0x244>)
 8007e8e:	2201      	movs	r2, #1
 8007e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e92:	f7fd fcef 	bl	8005874 <HAL_GetTick>
 8007e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e98:	e008      	b.n	8007eac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e9a:	f7fd fceb 	bl	8005874 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d901      	bls.n	8007eac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e1a8      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eac:	4b2b      	ldr	r3, [pc, #172]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0302 	and.w	r3, r3, #2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0f0      	beq.n	8007e9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eb8:	4b28      	ldr	r3, [pc, #160]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	00db      	lsls	r3, r3, #3
 8007ec6:	4925      	ldr	r1, [pc, #148]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	600b      	str	r3, [r1, #0]
 8007ecc:	e015      	b.n	8007efa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ece:	4b24      	ldr	r3, [pc, #144]	; (8007f60 <HAL_RCC_OscConfig+0x244>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed4:	f7fd fcce 	bl	8005874 <HAL_GetTick>
 8007ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007eda:	e008      	b.n	8007eee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007edc:	f7fd fcca 	bl	8005874 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d901      	bls.n	8007eee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e187      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007eee:	4b1b      	ldr	r3, [pc, #108]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1f0      	bne.n	8007edc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0308 	and.w	r3, r3, #8
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d036      	beq.n	8007f74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d016      	beq.n	8007f3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f0e:	4b15      	ldr	r3, [pc, #84]	; (8007f64 <HAL_RCC_OscConfig+0x248>)
 8007f10:	2201      	movs	r2, #1
 8007f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f14:	f7fd fcae 	bl	8005874 <HAL_GetTick>
 8007f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f1a:	e008      	b.n	8007f2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f1c:	f7fd fcaa 	bl	8005874 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d901      	bls.n	8007f2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e167      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f2e:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <HAL_RCC_OscConfig+0x240>)
 8007f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0f0      	beq.n	8007f1c <HAL_RCC_OscConfig+0x200>
 8007f3a:	e01b      	b.n	8007f74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f3c:	4b09      	ldr	r3, [pc, #36]	; (8007f64 <HAL_RCC_OscConfig+0x248>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f42:	f7fd fc97 	bl	8005874 <HAL_GetTick>
 8007f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f48:	e00e      	b.n	8007f68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f4a:	f7fd fc93 	bl	8005874 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d907      	bls.n	8007f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e150      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
 8007f5c:	40023800 	.word	0x40023800
 8007f60:	42470000 	.word	0x42470000
 8007f64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f68:	4b88      	ldr	r3, [pc, #544]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8007f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f6c:	f003 0302 	and.w	r3, r3, #2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1ea      	bne.n	8007f4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8097 	beq.w	80080b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f86:	4b81      	ldr	r3, [pc, #516]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10f      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f92:	2300      	movs	r3, #0
 8007f94:	60bb      	str	r3, [r7, #8]
 8007f96:	4b7d      	ldr	r3, [pc, #500]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	4a7c      	ldr	r2, [pc, #496]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8007f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8007fa2:	4b7a      	ldr	r3, [pc, #488]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007faa:	60bb      	str	r3, [r7, #8]
 8007fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fb2:	4b77      	ldr	r3, [pc, #476]	; (8008190 <HAL_RCC_OscConfig+0x474>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d118      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fbe:	4b74      	ldr	r3, [pc, #464]	; (8008190 <HAL_RCC_OscConfig+0x474>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a73      	ldr	r2, [pc, #460]	; (8008190 <HAL_RCC_OscConfig+0x474>)
 8007fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fca:	f7fd fc53 	bl	8005874 <HAL_GetTick>
 8007fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fd0:	e008      	b.n	8007fe4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fd2:	f7fd fc4f 	bl	8005874 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d901      	bls.n	8007fe4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e10c      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fe4:	4b6a      	ldr	r3, [pc, #424]	; (8008190 <HAL_RCC_OscConfig+0x474>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d0f0      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d106      	bne.n	8008006 <HAL_RCC_OscConfig+0x2ea>
 8007ff8:	4b64      	ldr	r3, [pc, #400]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8007ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffc:	4a63      	ldr	r2, [pc, #396]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8007ffe:	f043 0301 	orr.w	r3, r3, #1
 8008002:	6713      	str	r3, [r2, #112]	; 0x70
 8008004:	e01c      	b.n	8008040 <HAL_RCC_OscConfig+0x324>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	2b05      	cmp	r3, #5
 800800c:	d10c      	bne.n	8008028 <HAL_RCC_OscConfig+0x30c>
 800800e:	4b5f      	ldr	r3, [pc, #380]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8008010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008012:	4a5e      	ldr	r2, [pc, #376]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8008014:	f043 0304 	orr.w	r3, r3, #4
 8008018:	6713      	str	r3, [r2, #112]	; 0x70
 800801a:	4b5c      	ldr	r3, [pc, #368]	; (800818c <HAL_RCC_OscConfig+0x470>)
 800801c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801e:	4a5b      	ldr	r2, [pc, #364]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8008020:	f043 0301 	orr.w	r3, r3, #1
 8008024:	6713      	str	r3, [r2, #112]	; 0x70
 8008026:	e00b      	b.n	8008040 <HAL_RCC_OscConfig+0x324>
 8008028:	4b58      	ldr	r3, [pc, #352]	; (800818c <HAL_RCC_OscConfig+0x470>)
 800802a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802c:	4a57      	ldr	r2, [pc, #348]	; (800818c <HAL_RCC_OscConfig+0x470>)
 800802e:	f023 0301 	bic.w	r3, r3, #1
 8008032:	6713      	str	r3, [r2, #112]	; 0x70
 8008034:	4b55      	ldr	r3, [pc, #340]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8008036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008038:	4a54      	ldr	r2, [pc, #336]	; (800818c <HAL_RCC_OscConfig+0x470>)
 800803a:	f023 0304 	bic.w	r3, r3, #4
 800803e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d015      	beq.n	8008074 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008048:	f7fd fc14 	bl	8005874 <HAL_GetTick>
 800804c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800804e:	e00a      	b.n	8008066 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008050:	f7fd fc10 	bl	8005874 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	f241 3288 	movw	r2, #5000	; 0x1388
 800805e:	4293      	cmp	r3, r2
 8008060:	d901      	bls.n	8008066 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e0cb      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008066:	4b49      	ldr	r3, [pc, #292]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8008068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806a:	f003 0302 	and.w	r3, r3, #2
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0ee      	beq.n	8008050 <HAL_RCC_OscConfig+0x334>
 8008072:	e014      	b.n	800809e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008074:	f7fd fbfe 	bl	8005874 <HAL_GetTick>
 8008078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800807a:	e00a      	b.n	8008092 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800807c:	f7fd fbfa 	bl	8005874 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	f241 3288 	movw	r2, #5000	; 0x1388
 800808a:	4293      	cmp	r3, r2
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e0b5      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008092:	4b3e      	ldr	r3, [pc, #248]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8008094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1ee      	bne.n	800807c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d105      	bne.n	80080b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080a4:	4b39      	ldr	r3, [pc, #228]	; (800818c <HAL_RCC_OscConfig+0x470>)
 80080a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a8:	4a38      	ldr	r2, [pc, #224]	; (800818c <HAL_RCC_OscConfig+0x470>)
 80080aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 80a1 	beq.w	80081fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080ba:	4b34      	ldr	r3, [pc, #208]	; (800818c <HAL_RCC_OscConfig+0x470>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f003 030c 	and.w	r3, r3, #12
 80080c2:	2b08      	cmp	r3, #8
 80080c4:	d05c      	beq.n	8008180 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d141      	bne.n	8008152 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ce:	4b31      	ldr	r3, [pc, #196]	; (8008194 <HAL_RCC_OscConfig+0x478>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d4:	f7fd fbce 	bl	8005874 <HAL_GetTick>
 80080d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080da:	e008      	b.n	80080ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080dc:	f7fd fbca 	bl	8005874 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e087      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ee:	4b27      	ldr	r3, [pc, #156]	; (800818c <HAL_RCC_OscConfig+0x470>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1f0      	bne.n	80080dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	69da      	ldr	r2, [r3, #28]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	431a      	orrs	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	019b      	lsls	r3, r3, #6
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008110:	085b      	lsrs	r3, r3, #1
 8008112:	3b01      	subs	r3, #1
 8008114:	041b      	lsls	r3, r3, #16
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	061b      	lsls	r3, r3, #24
 800811e:	491b      	ldr	r1, [pc, #108]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8008120:	4313      	orrs	r3, r2
 8008122:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008124:	4b1b      	ldr	r3, [pc, #108]	; (8008194 <HAL_RCC_OscConfig+0x478>)
 8008126:	2201      	movs	r2, #1
 8008128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800812a:	f7fd fba3 	bl	8005874 <HAL_GetTick>
 800812e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008130:	e008      	b.n	8008144 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008132:	f7fd fb9f 	bl	8005874 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d901      	bls.n	8008144 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e05c      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008144:	4b11      	ldr	r3, [pc, #68]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0f0      	beq.n	8008132 <HAL_RCC_OscConfig+0x416>
 8008150:	e054      	b.n	80081fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008152:	4b10      	ldr	r3, [pc, #64]	; (8008194 <HAL_RCC_OscConfig+0x478>)
 8008154:	2200      	movs	r2, #0
 8008156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008158:	f7fd fb8c 	bl	8005874 <HAL_GetTick>
 800815c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800815e:	e008      	b.n	8008172 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008160:	f7fd fb88 	bl	8005874 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e045      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008172:	4b06      	ldr	r3, [pc, #24]	; (800818c <HAL_RCC_OscConfig+0x470>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1f0      	bne.n	8008160 <HAL_RCC_OscConfig+0x444>
 800817e:	e03d      	b.n	80081fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d107      	bne.n	8008198 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e038      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
 800818c:	40023800 	.word	0x40023800
 8008190:	40007000 	.word	0x40007000
 8008194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008198:	4b1b      	ldr	r3, [pc, #108]	; (8008208 <HAL_RCC_OscConfig+0x4ec>)
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d028      	beq.n	80081f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d121      	bne.n	80081f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081be:	429a      	cmp	r2, r3
 80081c0:	d11a      	bne.n	80081f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081c8:	4013      	ands	r3, r2
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d111      	bne.n	80081f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081de:	085b      	lsrs	r3, r3, #1
 80081e0:	3b01      	subs	r3, #1
 80081e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d107      	bne.n	80081f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d001      	beq.n	80081fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e000      	b.n	80081fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	40023800 	.word	0x40023800

0800820c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e0cc      	b.n	80083ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008220:	4b68      	ldr	r3, [pc, #416]	; (80083c4 <HAL_RCC_ClockConfig+0x1b8>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	429a      	cmp	r2, r3
 800822c:	d90c      	bls.n	8008248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800822e:	4b65      	ldr	r3, [pc, #404]	; (80083c4 <HAL_RCC_ClockConfig+0x1b8>)
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008236:	4b63      	ldr	r3, [pc, #396]	; (80083c4 <HAL_RCC_ClockConfig+0x1b8>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0307 	and.w	r3, r3, #7
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	429a      	cmp	r2, r3
 8008242:	d001      	beq.n	8008248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e0b8      	b.n	80083ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d020      	beq.n	8008296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b00      	cmp	r3, #0
 800825e:	d005      	beq.n	800826c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008260:	4b59      	ldr	r3, [pc, #356]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	4a58      	ldr	r2, [pc, #352]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800826a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0308 	and.w	r3, r3, #8
 8008274:	2b00      	cmp	r3, #0
 8008276:	d005      	beq.n	8008284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008278:	4b53      	ldr	r3, [pc, #332]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	4a52      	ldr	r2, [pc, #328]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 800827e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008284:	4b50      	ldr	r3, [pc, #320]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	494d      	ldr	r1, [pc, #308]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008292:	4313      	orrs	r3, r2
 8008294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d044      	beq.n	800832c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d107      	bne.n	80082ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082aa:	4b47      	ldr	r3, [pc, #284]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d119      	bne.n	80082ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e07f      	b.n	80083ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d003      	beq.n	80082ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d107      	bne.n	80082da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082ca:	4b3f      	ldr	r3, [pc, #252]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d109      	bne.n	80082ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e06f      	b.n	80083ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082da:	4b3b      	ldr	r3, [pc, #236]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0302 	and.w	r3, r3, #2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e067      	b.n	80083ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082ea:	4b37      	ldr	r3, [pc, #220]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f023 0203 	bic.w	r2, r3, #3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	4934      	ldr	r1, [pc, #208]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082fc:	f7fd faba 	bl	8005874 <HAL_GetTick>
 8008300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008302:	e00a      	b.n	800831a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008304:	f7fd fab6 	bl	8005874 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008312:	4293      	cmp	r3, r2
 8008314:	d901      	bls.n	800831a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e04f      	b.n	80083ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800831a:	4b2b      	ldr	r3, [pc, #172]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f003 020c 	and.w	r2, r3, #12
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	429a      	cmp	r2, r3
 800832a:	d1eb      	bne.n	8008304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800832c:	4b25      	ldr	r3, [pc, #148]	; (80083c4 <HAL_RCC_ClockConfig+0x1b8>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0307 	and.w	r3, r3, #7
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d20c      	bcs.n	8008354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800833a:	4b22      	ldr	r3, [pc, #136]	; (80083c4 <HAL_RCC_ClockConfig+0x1b8>)
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	b2d2      	uxtb	r2, r2
 8008340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008342:	4b20      	ldr	r3, [pc, #128]	; (80083c4 <HAL_RCC_ClockConfig+0x1b8>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0307 	and.w	r3, r3, #7
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	429a      	cmp	r2, r3
 800834e:	d001      	beq.n	8008354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e032      	b.n	80083ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0304 	and.w	r3, r3, #4
 800835c:	2b00      	cmp	r3, #0
 800835e:	d008      	beq.n	8008372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008360:	4b19      	ldr	r3, [pc, #100]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	4916      	ldr	r1, [pc, #88]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 800836e:	4313      	orrs	r3, r2
 8008370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0308 	and.w	r3, r3, #8
 800837a:	2b00      	cmp	r3, #0
 800837c:	d009      	beq.n	8008392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800837e:	4b12      	ldr	r3, [pc, #72]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	490e      	ldr	r1, [pc, #56]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 800838e:	4313      	orrs	r3, r2
 8008390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008392:	f000 f821 	bl	80083d8 <HAL_RCC_GetSysClockFreq>
 8008396:	4602      	mov	r2, r0
 8008398:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <HAL_RCC_ClockConfig+0x1bc>)
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	091b      	lsrs	r3, r3, #4
 800839e:	f003 030f 	and.w	r3, r3, #15
 80083a2:	490a      	ldr	r1, [pc, #40]	; (80083cc <HAL_RCC_ClockConfig+0x1c0>)
 80083a4:	5ccb      	ldrb	r3, [r1, r3]
 80083a6:	fa22 f303 	lsr.w	r3, r2, r3
 80083aa:	4a09      	ldr	r2, [pc, #36]	; (80083d0 <HAL_RCC_ClockConfig+0x1c4>)
 80083ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083ae:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <HAL_RCC_ClockConfig+0x1c8>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fd fa1a 	bl	80057ec <HAL_InitTick>

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	40023c00 	.word	0x40023c00
 80083c8:	40023800 	.word	0x40023800
 80083cc:	0801fac0 	.word	0x0801fac0
 80083d0:	20000008 	.word	0x20000008
 80083d4:	2000000c 	.word	0x2000000c

080083d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083dc:	b090      	sub	sp, #64	; 0x40
 80083de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80083e0:	2300      	movs	r3, #0
 80083e2:	637b      	str	r3, [r7, #52]	; 0x34
 80083e4:	2300      	movs	r3, #0
 80083e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083e8:	2300      	movs	r3, #0
 80083ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083f0:	4b59      	ldr	r3, [pc, #356]	; (8008558 <HAL_RCC_GetSysClockFreq+0x180>)
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f003 030c 	and.w	r3, r3, #12
 80083f8:	2b08      	cmp	r3, #8
 80083fa:	d00d      	beq.n	8008418 <HAL_RCC_GetSysClockFreq+0x40>
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	f200 80a1 	bhi.w	8008544 <HAL_RCC_GetSysClockFreq+0x16c>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d002      	beq.n	800840c <HAL_RCC_GetSysClockFreq+0x34>
 8008406:	2b04      	cmp	r3, #4
 8008408:	d003      	beq.n	8008412 <HAL_RCC_GetSysClockFreq+0x3a>
 800840a:	e09b      	b.n	8008544 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800840c:	4b53      	ldr	r3, [pc, #332]	; (800855c <HAL_RCC_GetSysClockFreq+0x184>)
 800840e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008410:	e09b      	b.n	800854a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008412:	4b53      	ldr	r3, [pc, #332]	; (8008560 <HAL_RCC_GetSysClockFreq+0x188>)
 8008414:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008416:	e098      	b.n	800854a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008418:	4b4f      	ldr	r3, [pc, #316]	; (8008558 <HAL_RCC_GetSysClockFreq+0x180>)
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008420:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008422:	4b4d      	ldr	r3, [pc, #308]	; (8008558 <HAL_RCC_GetSysClockFreq+0x180>)
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d028      	beq.n	8008480 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800842e:	4b4a      	ldr	r3, [pc, #296]	; (8008558 <HAL_RCC_GetSysClockFreq+0x180>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	099b      	lsrs	r3, r3, #6
 8008434:	2200      	movs	r2, #0
 8008436:	623b      	str	r3, [r7, #32]
 8008438:	627a      	str	r2, [r7, #36]	; 0x24
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008440:	2100      	movs	r1, #0
 8008442:	4b47      	ldr	r3, [pc, #284]	; (8008560 <HAL_RCC_GetSysClockFreq+0x188>)
 8008444:	fb03 f201 	mul.w	r2, r3, r1
 8008448:	2300      	movs	r3, #0
 800844a:	fb00 f303 	mul.w	r3, r0, r3
 800844e:	4413      	add	r3, r2
 8008450:	4a43      	ldr	r2, [pc, #268]	; (8008560 <HAL_RCC_GetSysClockFreq+0x188>)
 8008452:	fba0 1202 	umull	r1, r2, r0, r2
 8008456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008458:	460a      	mov	r2, r1
 800845a:	62ba      	str	r2, [r7, #40]	; 0x28
 800845c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800845e:	4413      	add	r3, r2
 8008460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008464:	2200      	movs	r2, #0
 8008466:	61bb      	str	r3, [r7, #24]
 8008468:	61fa      	str	r2, [r7, #28]
 800846a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800846e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008472:	f7f8 fc13 	bl	8000c9c <__aeabi_uldivmod>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4613      	mov	r3, r2
 800847c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800847e:	e053      	b.n	8008528 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008480:	4b35      	ldr	r3, [pc, #212]	; (8008558 <HAL_RCC_GetSysClockFreq+0x180>)
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	099b      	lsrs	r3, r3, #6
 8008486:	2200      	movs	r2, #0
 8008488:	613b      	str	r3, [r7, #16]
 800848a:	617a      	str	r2, [r7, #20]
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008492:	f04f 0b00 	mov.w	fp, #0
 8008496:	4652      	mov	r2, sl
 8008498:	465b      	mov	r3, fp
 800849a:	f04f 0000 	mov.w	r0, #0
 800849e:	f04f 0100 	mov.w	r1, #0
 80084a2:	0159      	lsls	r1, r3, #5
 80084a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084a8:	0150      	lsls	r0, r2, #5
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	ebb2 080a 	subs.w	r8, r2, sl
 80084b2:	eb63 090b 	sbc.w	r9, r3, fp
 80084b6:	f04f 0200 	mov.w	r2, #0
 80084ba:	f04f 0300 	mov.w	r3, #0
 80084be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80084c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80084c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80084ca:	ebb2 0408 	subs.w	r4, r2, r8
 80084ce:	eb63 0509 	sbc.w	r5, r3, r9
 80084d2:	f04f 0200 	mov.w	r2, #0
 80084d6:	f04f 0300 	mov.w	r3, #0
 80084da:	00eb      	lsls	r3, r5, #3
 80084dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084e0:	00e2      	lsls	r2, r4, #3
 80084e2:	4614      	mov	r4, r2
 80084e4:	461d      	mov	r5, r3
 80084e6:	eb14 030a 	adds.w	r3, r4, sl
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	eb45 030b 	adc.w	r3, r5, fp
 80084f0:	607b      	str	r3, [r7, #4]
 80084f2:	f04f 0200 	mov.w	r2, #0
 80084f6:	f04f 0300 	mov.w	r3, #0
 80084fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084fe:	4629      	mov	r1, r5
 8008500:	028b      	lsls	r3, r1, #10
 8008502:	4621      	mov	r1, r4
 8008504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008508:	4621      	mov	r1, r4
 800850a:	028a      	lsls	r2, r1, #10
 800850c:	4610      	mov	r0, r2
 800850e:	4619      	mov	r1, r3
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	2200      	movs	r2, #0
 8008514:	60bb      	str	r3, [r7, #8]
 8008516:	60fa      	str	r2, [r7, #12]
 8008518:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800851c:	f7f8 fbbe 	bl	8000c9c <__aeabi_uldivmod>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4613      	mov	r3, r2
 8008526:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008528:	4b0b      	ldr	r3, [pc, #44]	; (8008558 <HAL_RCC_GetSysClockFreq+0x180>)
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	0c1b      	lsrs	r3, r3, #16
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	3301      	adds	r3, #1
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008540:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008542:	e002      	b.n	800854a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008544:	4b05      	ldr	r3, [pc, #20]	; (800855c <HAL_RCC_GetSysClockFreq+0x184>)
 8008546:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800854c:	4618      	mov	r0, r3
 800854e:	3740      	adds	r7, #64	; 0x40
 8008550:	46bd      	mov	sp, r7
 8008552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008556:	bf00      	nop
 8008558:	40023800 	.word	0x40023800
 800855c:	00f42400 	.word	0x00f42400
 8008560:	017d7840 	.word	0x017d7840

08008564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008564:	b480      	push	{r7}
 8008566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008568:	4b03      	ldr	r3, [pc, #12]	; (8008578 <HAL_RCC_GetHCLKFreq+0x14>)
 800856a:	681b      	ldr	r3, [r3, #0]
}
 800856c:	4618      	mov	r0, r3
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	20000008 	.word	0x20000008

0800857c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008580:	f7ff fff0 	bl	8008564 <HAL_RCC_GetHCLKFreq>
 8008584:	4602      	mov	r2, r0
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	0a9b      	lsrs	r3, r3, #10
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	4903      	ldr	r1, [pc, #12]	; (80085a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008592:	5ccb      	ldrb	r3, [r1, r3]
 8008594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008598:	4618      	mov	r0, r3
 800859a:	bd80      	pop	{r7, pc}
 800859c:	40023800 	.word	0x40023800
 80085a0:	0801fad0 	.word	0x0801fad0

080085a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085a8:	f7ff ffdc 	bl	8008564 <HAL_RCC_GetHCLKFreq>
 80085ac:	4602      	mov	r2, r0
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	0b5b      	lsrs	r3, r3, #13
 80085b4:	f003 0307 	and.w	r3, r3, #7
 80085b8:	4903      	ldr	r1, [pc, #12]	; (80085c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085ba:	5ccb      	ldrb	r3, [r1, r3]
 80085bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	40023800 	.word	0x40023800
 80085c8:	0801fad0 	.word	0x0801fad0

080085cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085d4:	2300      	movs	r3, #0
 80085d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80085d8:	2300      	movs	r3, #0
 80085da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0301 	and.w	r3, r3, #1
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d105      	bne.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d035      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80085f4:	4b62      	ldr	r3, [pc, #392]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80085fa:	f7fd f93b 	bl	8005874 <HAL_GetTick>
 80085fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008600:	e008      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008602:	f7fd f937 	bl	8005874 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d901      	bls.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e0b0      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008614:	4b5b      	ldr	r3, [pc, #364]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1f0      	bne.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	019a      	lsls	r2, r3, #6
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	071b      	lsls	r3, r3, #28
 800862c:	4955      	ldr	r1, [pc, #340]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800862e:	4313      	orrs	r3, r2
 8008630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008634:	4b52      	ldr	r3, [pc, #328]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008636:	2201      	movs	r2, #1
 8008638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800863a:	f7fd f91b 	bl	8005874 <HAL_GetTick>
 800863e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008640:	e008      	b.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008642:	f7fd f917 	bl	8005874 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	2b02      	cmp	r3, #2
 800864e:	d901      	bls.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e090      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008654:	4b4b      	ldr	r3, [pc, #300]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d0f0      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 8083 	beq.w	8008774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800866e:	2300      	movs	r3, #0
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	4b44      	ldr	r3, [pc, #272]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008676:	4a43      	ldr	r2, [pc, #268]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800867c:	6413      	str	r3, [r2, #64]	; 0x40
 800867e:	4b41      	ldr	r3, [pc, #260]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800868a:	4b3f      	ldr	r3, [pc, #252]	; (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a3e      	ldr	r2, [pc, #248]	; (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008694:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008696:	f7fd f8ed 	bl	8005874 <HAL_GetTick>
 800869a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800869c:	e008      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800869e:	f7fd f8e9 	bl	8005874 <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d901      	bls.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e062      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086b0:	4b35      	ldr	r3, [pc, #212]	; (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0f0      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086bc:	4b31      	ldr	r3, [pc, #196]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d02f      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d028      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086da:	4b2a      	ldr	r3, [pc, #168]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086e4:	4b29      	ldr	r3, [pc, #164]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80086e6:	2201      	movs	r2, #1
 80086e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086ea:	4b28      	ldr	r3, [pc, #160]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80086f0:	4a24      	ldr	r2, [pc, #144]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086f6:	4b23      	ldr	r3, [pc, #140]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d114      	bne.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008702:	f7fd f8b7 	bl	8005874 <HAL_GetTick>
 8008706:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008708:	e00a      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800870a:	f7fd f8b3 	bl	8005874 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	f241 3288 	movw	r2, #5000	; 0x1388
 8008718:	4293      	cmp	r3, r2
 800871a:	d901      	bls.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e02a      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008720:	4b18      	ldr	r3, [pc, #96]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0ee      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008738:	d10d      	bne.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800873a:	4b12      	ldr	r3, [pc, #72]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800874a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800874e:	490d      	ldr	r1, [pc, #52]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008750:	4313      	orrs	r3, r2
 8008752:	608b      	str	r3, [r1, #8]
 8008754:	e005      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008756:	4b0b      	ldr	r3, [pc, #44]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	4a0a      	ldr	r2, [pc, #40]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800875c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008760:	6093      	str	r3, [r2, #8]
 8008762:	4b08      	ldr	r3, [pc, #32]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800876e:	4905      	ldr	r1, [pc, #20]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008770:	4313      	orrs	r3, r2
 8008772:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	42470068 	.word	0x42470068
 8008784:	40023800 	.word	0x40023800
 8008788:	40007000 	.word	0x40007000
 800878c:	42470e40 	.word	0x42470e40

08008790 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e066      	b.n	8008874 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	7f5b      	ldrb	r3, [r3, #29]
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d105      	bne.n	80087bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7fc fc5e 	bl	8005078 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2202      	movs	r2, #2
 80087c0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	22ca      	movs	r2, #202	; 0xca
 80087c8:	625a      	str	r2, [r3, #36]	; 0x24
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2253      	movs	r2, #83	; 0x53
 80087d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f87a 	bl	80088cc <RTC_EnterInitMode>
 80087d8:	4603      	mov	r3, r0
 80087da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d12c      	bne.n	800883c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	6812      	ldr	r2, [r2, #0]
 80087ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80087f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6899      	ldr	r1, [r3, #8]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	431a      	orrs	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	431a      	orrs	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	430a      	orrs	r2, r1
 8008812:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	68d2      	ldr	r2, [r2, #12]
 800881c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6919      	ldr	r1, [r3, #16]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	041a      	lsls	r2, r3, #16
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f881 	bl	800893a <RTC_ExitInitMode>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d113      	bne.n	800886a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008850:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	699a      	ldr	r2, [r3, #24]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	430a      	orrs	r2, r1
 8008862:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	22ff      	movs	r2, #255	; 0xff
 8008870:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008896:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008898:	f7fc ffec 	bl	8005874 <HAL_GetTick>
 800889c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800889e:	e009      	b.n	80088b4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80088a0:	f7fc ffe8 	bl	8005874 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088ae:	d901      	bls.n	80088b4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e007      	b.n	80088c4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0ee      	beq.n	80088a0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d122      	bne.n	8008930 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68da      	ldr	r2, [r3, #12]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088fa:	f7fc ffbb 	bl	8005874 <HAL_GetTick>
 80088fe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008900:	e00c      	b.n	800891c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008902:	f7fc ffb7 	bl	8005874 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008910:	d904      	bls.n	800891c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2204      	movs	r2, #4
 8008916:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008926:	2b00      	cmp	r3, #0
 8008928:	d102      	bne.n	8008930 <RTC_EnterInitMode+0x64>
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d1e8      	bne.n	8008902 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008930:	7bfb      	ldrb	r3, [r7, #15]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68da      	ldr	r2, [r3, #12]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008954:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f003 0320 	and.w	r3, r3, #32
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10a      	bne.n	800897a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff ff89 	bl	800887c <HAL_RTC_WaitForSynchro>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d004      	beq.n	800897a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2204      	movs	r2, #4
 8008974:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800897a:	7bfb      	ldrb	r3, [r7, #15]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e07b      	b.n	8008a8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	2b00      	cmp	r3, #0
 800899c:	d108      	bne.n	80089b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089a6:	d009      	beq.n	80089bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	61da      	str	r2, [r3, #28]
 80089ae:	e005      	b.n	80089bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d106      	bne.n	80089dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7fc fb78 	bl	80050cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2202      	movs	r2, #2
 80089e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a04:	431a      	orrs	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a1b      	ldr	r3, [r3, #32]
 8008a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a40:	ea42 0103 	orr.w	r1, r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	430a      	orrs	r2, r1
 8008a52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	0c1b      	lsrs	r3, r3, #16
 8008a5a:	f003 0104 	and.w	r1, r3, #4
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	f003 0210 	and.w	r2, r3, #16
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	69da      	ldr	r2, [r3, #28]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b088      	sub	sp, #32
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	60f8      	str	r0, [r7, #12]
 8008a9e:	60b9      	str	r1, [r7, #8]
 8008aa0:	603b      	str	r3, [r7, #0]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d101      	bne.n	8008ab8 <HAL_SPI_Transmit+0x22>
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e126      	b.n	8008d06 <HAL_SPI_Transmit+0x270>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ac0:	f7fc fed8 	bl	8005874 <HAL_GetTick>
 8008ac4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ac6:	88fb      	ldrh	r3, [r7, #6]
 8008ac8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d002      	beq.n	8008adc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ada:	e10b      	b.n	8008cf4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <HAL_SPI_Transmit+0x52>
 8008ae2:	88fb      	ldrh	r3, [r7, #6]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008aec:	e102      	b.n	8008cf4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2203      	movs	r2, #3
 8008af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	88fa      	ldrh	r2, [r7, #6]
 8008b06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	88fa      	ldrh	r2, [r7, #6]
 8008b0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b34:	d10f      	bne.n	8008b56 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	d007      	beq.n	8008b74 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b7c:	d14b      	bne.n	8008c16 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <HAL_SPI_Transmit+0xf6>
 8008b86:	8afb      	ldrh	r3, [r7, #22]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d13e      	bne.n	8008c0a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b90:	881a      	ldrh	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9c:	1c9a      	adds	r2, r3, #2
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008bb0:	e02b      	b.n	8008c0a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d112      	bne.n	8008be6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc4:	881a      	ldrh	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd0:	1c9a      	adds	r2, r3, #2
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	86da      	strh	r2, [r3, #54]	; 0x36
 8008be4:	e011      	b.n	8008c0a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008be6:	f7fc fe45 	bl	8005874 <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d803      	bhi.n	8008bfe <HAL_SPI_Transmit+0x168>
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bfc:	d102      	bne.n	8008c04 <HAL_SPI_Transmit+0x16e>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d102      	bne.n	8008c0a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c08:	e074      	b.n	8008cf4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1ce      	bne.n	8008bb2 <HAL_SPI_Transmit+0x11c>
 8008c14:	e04c      	b.n	8008cb0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d002      	beq.n	8008c24 <HAL_SPI_Transmit+0x18e>
 8008c1e:	8afb      	ldrh	r3, [r7, #22]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d140      	bne.n	8008ca6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	330c      	adds	r3, #12
 8008c2e:	7812      	ldrb	r2, [r2, #0]
 8008c30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	3b01      	subs	r3, #1
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c4a:	e02c      	b.n	8008ca6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d113      	bne.n	8008c82 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	330c      	adds	r3, #12
 8008c64:	7812      	ldrb	r2, [r2, #0]
 8008c66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c80:	e011      	b.n	8008ca6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c82:	f7fc fdf7 	bl	8005874 <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d803      	bhi.n	8008c9a <HAL_SPI_Transmit+0x204>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c98:	d102      	bne.n	8008ca0 <HAL_SPI_Transmit+0x20a>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d102      	bne.n	8008ca6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ca4:	e026      	b.n	8008cf4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1cd      	bne.n	8008c4c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 fa55 	bl	8009164 <SPI_EndRxTxTransaction>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10a      	bne.n	8008ce4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cce:	2300      	movs	r3, #0
 8008cd0:	613b      	str	r3, [r7, #16]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	613b      	str	r3, [r7, #16]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	613b      	str	r3, [r7, #16]
 8008ce2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	77fb      	strb	r3, [r7, #31]
 8008cf0:	e000      	b.n	8008cf4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008cf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d04:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b08c      	sub	sp, #48	; 0x30
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	607a      	str	r2, [r7, #4]
 8008d1a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d101      	bne.n	8008d34 <HAL_SPI_TransmitReceive+0x26>
 8008d30:	2302      	movs	r3, #2
 8008d32:	e18a      	b.n	800904a <HAL_SPI_TransmitReceive+0x33c>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d3c:	f7fc fd9a 	bl	8005874 <HAL_GetTick>
 8008d40:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d52:	887b      	ldrh	r3, [r7, #2]
 8008d54:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d00f      	beq.n	8008d7e <HAL_SPI_TransmitReceive+0x70>
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d64:	d107      	bne.n	8008d76 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d103      	bne.n	8008d76 <HAL_SPI_TransmitReceive+0x68>
 8008d6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	d003      	beq.n	8008d7e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d76:	2302      	movs	r3, #2
 8008d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d7c:	e15b      	b.n	8009036 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <HAL_SPI_TransmitReceive+0x82>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d002      	beq.n	8008d90 <HAL_SPI_TransmitReceive+0x82>
 8008d8a:	887b      	ldrh	r3, [r7, #2]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d96:	e14e      	b.n	8009036 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b04      	cmp	r3, #4
 8008da2:	d003      	beq.n	8008dac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2205      	movs	r2, #5
 8008da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	887a      	ldrh	r2, [r7, #2]
 8008dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	887a      	ldrh	r2, [r7, #2]
 8008dc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	887a      	ldrh	r2, [r7, #2]
 8008dce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	887a      	ldrh	r2, [r7, #2]
 8008dd4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dec:	2b40      	cmp	r3, #64	; 0x40
 8008dee:	d007      	beq.n	8008e00 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e08:	d178      	bne.n	8008efc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <HAL_SPI_TransmitReceive+0x10a>
 8008e12:	8b7b      	ldrh	r3, [r7, #26]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d166      	bne.n	8008ee6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	881a      	ldrh	r2, [r3, #0]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e28:	1c9a      	adds	r2, r3, #2
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b01      	subs	r3, #1
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e3c:	e053      	b.n	8008ee6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f003 0302 	and.w	r3, r3, #2
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d11b      	bne.n	8008e84 <HAL_SPI_TransmitReceive+0x176>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d016      	beq.n	8008e84 <HAL_SPI_TransmitReceive+0x176>
 8008e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d113      	bne.n	8008e84 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e60:	881a      	ldrh	r2, [r3, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6c:	1c9a      	adds	r2, r3, #2
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d119      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x1b8>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d014      	beq.n	8008ec6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68da      	ldr	r2, [r3, #12]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea6:	b292      	uxth	r2, r2
 8008ea8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eae:	1c9a      	adds	r2, r3, #2
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ec6:	f7fc fcd5 	bl	8005874 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d807      	bhi.n	8008ee6 <HAL_SPI_TransmitReceive+0x1d8>
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008edc:	d003      	beq.n	8008ee6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ee4:	e0a7      	b.n	8009036 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1a6      	bne.n	8008e3e <HAL_SPI_TransmitReceive+0x130>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1a1      	bne.n	8008e3e <HAL_SPI_TransmitReceive+0x130>
 8008efa:	e07c      	b.n	8008ff6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <HAL_SPI_TransmitReceive+0x1fc>
 8008f04:	8b7b      	ldrh	r3, [r7, #26]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d16b      	bne.n	8008fe2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	330c      	adds	r3, #12
 8008f14:	7812      	ldrb	r2, [r2, #0]
 8008f16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1c:	1c5a      	adds	r2, r3, #1
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f30:	e057      	b.n	8008fe2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d11c      	bne.n	8008f7a <HAL_SPI_TransmitReceive+0x26c>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d017      	beq.n	8008f7a <HAL_SPI_TransmitReceive+0x26c>
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d114      	bne.n	8008f7a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	330c      	adds	r3, #12
 8008f5a:	7812      	ldrb	r2, [r2, #0]
 8008f5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d119      	bne.n	8008fbc <HAL_SPI_TransmitReceive+0x2ae>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d014      	beq.n	8008fbc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9c:	b2d2      	uxtb	r2, r2
 8008f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fbc:	f7fc fc5a 	bl	8005874 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d803      	bhi.n	8008fd4 <HAL_SPI_TransmitReceive+0x2c6>
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fd2:	d102      	bne.n	8008fda <HAL_SPI_TransmitReceive+0x2cc>
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d103      	bne.n	8008fe2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008fe0:	e029      	b.n	8009036 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1a2      	bne.n	8008f32 <HAL_SPI_TransmitReceive+0x224>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d19d      	bne.n	8008f32 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f000 f8b2 	bl	8009164 <SPI_EndRxTxTransaction>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d006      	beq.n	8009014 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2220      	movs	r2, #32
 8009010:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009012:	e010      	b.n	8009036 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10b      	bne.n	8009034 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800901c:	2300      	movs	r3, #0
 800901e:	617b      	str	r3, [r7, #20]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	617b      	str	r3, [r7, #20]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	617b      	str	r3, [r7, #20]
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	e000      	b.n	8009036 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009034:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009046:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800904a:	4618      	mov	r0, r3
 800904c:	3730      	adds	r7, #48	; 0x30
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
	...

08009054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	603b      	str	r3, [r7, #0]
 8009060:	4613      	mov	r3, r2
 8009062:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009064:	f7fc fc06 	bl	8005874 <HAL_GetTick>
 8009068:	4602      	mov	r2, r0
 800906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906c:	1a9b      	subs	r3, r3, r2
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	4413      	add	r3, r2
 8009072:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009074:	f7fc fbfe 	bl	8005874 <HAL_GetTick>
 8009078:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800907a:	4b39      	ldr	r3, [pc, #228]	; (8009160 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	015b      	lsls	r3, r3, #5
 8009080:	0d1b      	lsrs	r3, r3, #20
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	fb02 f303 	mul.w	r3, r2, r3
 8009088:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800908a:	e054      	b.n	8009136 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009092:	d050      	beq.n	8009136 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009094:	f7fc fbee 	bl	8005874 <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	69fa      	ldr	r2, [r7, #28]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d902      	bls.n	80090aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d13d      	bne.n	8009126 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090c2:	d111      	bne.n	80090e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090cc:	d004      	beq.n	80090d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090d6:	d107      	bne.n	80090e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f0:	d10f      	bne.n	8009112 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2201      	movs	r2, #1
 8009116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e017      	b.n	8009156 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	3b01      	subs	r3, #1
 8009134:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689a      	ldr	r2, [r3, #8]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	4013      	ands	r3, r2
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	429a      	cmp	r2, r3
 8009144:	bf0c      	ite	eq
 8009146:	2301      	moveq	r3, #1
 8009148:	2300      	movne	r3, #0
 800914a:	b2db      	uxtb	r3, r3
 800914c:	461a      	mov	r2, r3
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	429a      	cmp	r2, r3
 8009152:	d19b      	bne.n	800908c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3720      	adds	r7, #32
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	20000008 	.word	0x20000008

08009164 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af02      	add	r7, sp, #8
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009170:	4b1b      	ldr	r3, [pc, #108]	; (80091e0 <SPI_EndRxTxTransaction+0x7c>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a1b      	ldr	r2, [pc, #108]	; (80091e4 <SPI_EndRxTxTransaction+0x80>)
 8009176:	fba2 2303 	umull	r2, r3, r2, r3
 800917a:	0d5b      	lsrs	r3, r3, #21
 800917c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009180:	fb02 f303 	mul.w	r3, r2, r3
 8009184:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800918e:	d112      	bne.n	80091b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2200      	movs	r2, #0
 8009198:	2180      	movs	r1, #128	; 0x80
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f7ff ff5a 	bl	8009054 <SPI_WaitFlagStateUntilTimeout>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d016      	beq.n	80091d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091aa:	f043 0220 	orr.w	r2, r3, #32
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e00f      	b.n	80091d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00a      	beq.n	80091d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	3b01      	subs	r3, #1
 80091c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091cc:	2b80      	cmp	r3, #128	; 0x80
 80091ce:	d0f2      	beq.n	80091b6 <SPI_EndRxTxTransaction+0x52>
 80091d0:	e000      	b.n	80091d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80091d2:	bf00      	nop
  }

  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20000008 	.word	0x20000008
 80091e4:	165e9f81 	.word	0x165e9f81

080091e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e041      	b.n	800927e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d106      	bne.n	8009214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7fb ffa4 	bl	800515c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3304      	adds	r3, #4
 8009224:	4619      	mov	r1, r3
 8009226:	4610      	mov	r0, r2
 8009228:	f000 fa10 	bl	800964c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b082      	sub	sp, #8
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e041      	b.n	800931c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d106      	bne.n	80092b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f839 	bl	8009324 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2202      	movs	r2, #2
 80092b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3304      	adds	r3, #4
 80092c2:	4619      	mov	r1, r3
 80092c4:	4610      	mov	r0, r2
 80092c6:	f000 f9c1 	bl	800964c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800934e:	2b01      	cmp	r3, #1
 8009350:	d101      	bne.n	8009356 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009352:	2302      	movs	r3, #2
 8009354:	e0ae      	b.n	80094b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b0c      	cmp	r3, #12
 8009362:	f200 809f 	bhi.w	80094a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009366:	a201      	add	r2, pc, #4	; (adr r2, 800936c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936c:	080093a1 	.word	0x080093a1
 8009370:	080094a5 	.word	0x080094a5
 8009374:	080094a5 	.word	0x080094a5
 8009378:	080094a5 	.word	0x080094a5
 800937c:	080093e1 	.word	0x080093e1
 8009380:	080094a5 	.word	0x080094a5
 8009384:	080094a5 	.word	0x080094a5
 8009388:	080094a5 	.word	0x080094a5
 800938c:	08009423 	.word	0x08009423
 8009390:	080094a5 	.word	0x080094a5
 8009394:	080094a5 	.word	0x080094a5
 8009398:	080094a5 	.word	0x080094a5
 800939c:	08009463 	.word	0x08009463
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68b9      	ldr	r1, [r7, #8]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 f9f0 	bl	800978c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	699a      	ldr	r2, [r3, #24]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f042 0208 	orr.w	r2, r2, #8
 80093ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699a      	ldr	r2, [r3, #24]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f022 0204 	bic.w	r2, r2, #4
 80093ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6999      	ldr	r1, [r3, #24]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	691a      	ldr	r2, [r3, #16]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	619a      	str	r2, [r3, #24]
      break;
 80093de:	e064      	b.n	80094aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68b9      	ldr	r1, [r7, #8]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 fa40 	bl	800986c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	699a      	ldr	r2, [r3, #24]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	699a      	ldr	r2, [r3, #24]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800940a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6999      	ldr	r1, [r3, #24]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	021a      	lsls	r2, r3, #8
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	619a      	str	r2, [r3, #24]
      break;
 8009420:	e043      	b.n	80094aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68b9      	ldr	r1, [r7, #8]
 8009428:	4618      	mov	r0, r3
 800942a:	f000 fa95 	bl	8009958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	69da      	ldr	r2, [r3, #28]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f042 0208 	orr.w	r2, r2, #8
 800943c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	69da      	ldr	r2, [r3, #28]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f022 0204 	bic.w	r2, r2, #4
 800944c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69d9      	ldr	r1, [r3, #28]
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	691a      	ldr	r2, [r3, #16]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	61da      	str	r2, [r3, #28]
      break;
 8009460:	e023      	b.n	80094aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68b9      	ldr	r1, [r7, #8]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 fae9 	bl	8009a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	69da      	ldr	r2, [r3, #28]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800947c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	69da      	ldr	r2, [r3, #28]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800948c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	69d9      	ldr	r1, [r3, #28]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	021a      	lsls	r2, r3, #8
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	430a      	orrs	r2, r1
 80094a0:	61da      	str	r2, [r3, #28]
      break;
 80094a2:	e002      	b.n	80094aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	75fb      	strb	r3, [r7, #23]
      break;
 80094a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3718      	adds	r7, #24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d101      	bne.n	80094d8 <HAL_TIM_ConfigClockSource+0x1c>
 80094d4:	2302      	movs	r3, #2
 80094d6:	e0b4      	b.n	8009642 <HAL_TIM_ConfigClockSource+0x186>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80094f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009510:	d03e      	beq.n	8009590 <HAL_TIM_ConfigClockSource+0xd4>
 8009512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009516:	f200 8087 	bhi.w	8009628 <HAL_TIM_ConfigClockSource+0x16c>
 800951a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800951e:	f000 8086 	beq.w	800962e <HAL_TIM_ConfigClockSource+0x172>
 8009522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009526:	d87f      	bhi.n	8009628 <HAL_TIM_ConfigClockSource+0x16c>
 8009528:	2b70      	cmp	r3, #112	; 0x70
 800952a:	d01a      	beq.n	8009562 <HAL_TIM_ConfigClockSource+0xa6>
 800952c:	2b70      	cmp	r3, #112	; 0x70
 800952e:	d87b      	bhi.n	8009628 <HAL_TIM_ConfigClockSource+0x16c>
 8009530:	2b60      	cmp	r3, #96	; 0x60
 8009532:	d050      	beq.n	80095d6 <HAL_TIM_ConfigClockSource+0x11a>
 8009534:	2b60      	cmp	r3, #96	; 0x60
 8009536:	d877      	bhi.n	8009628 <HAL_TIM_ConfigClockSource+0x16c>
 8009538:	2b50      	cmp	r3, #80	; 0x50
 800953a:	d03c      	beq.n	80095b6 <HAL_TIM_ConfigClockSource+0xfa>
 800953c:	2b50      	cmp	r3, #80	; 0x50
 800953e:	d873      	bhi.n	8009628 <HAL_TIM_ConfigClockSource+0x16c>
 8009540:	2b40      	cmp	r3, #64	; 0x40
 8009542:	d058      	beq.n	80095f6 <HAL_TIM_ConfigClockSource+0x13a>
 8009544:	2b40      	cmp	r3, #64	; 0x40
 8009546:	d86f      	bhi.n	8009628 <HAL_TIM_ConfigClockSource+0x16c>
 8009548:	2b30      	cmp	r3, #48	; 0x30
 800954a:	d064      	beq.n	8009616 <HAL_TIM_ConfigClockSource+0x15a>
 800954c:	2b30      	cmp	r3, #48	; 0x30
 800954e:	d86b      	bhi.n	8009628 <HAL_TIM_ConfigClockSource+0x16c>
 8009550:	2b20      	cmp	r3, #32
 8009552:	d060      	beq.n	8009616 <HAL_TIM_ConfigClockSource+0x15a>
 8009554:	2b20      	cmp	r3, #32
 8009556:	d867      	bhi.n	8009628 <HAL_TIM_ConfigClockSource+0x16c>
 8009558:	2b00      	cmp	r3, #0
 800955a:	d05c      	beq.n	8009616 <HAL_TIM_ConfigClockSource+0x15a>
 800955c:	2b10      	cmp	r3, #16
 800955e:	d05a      	beq.n	8009616 <HAL_TIM_ConfigClockSource+0x15a>
 8009560:	e062      	b.n	8009628 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	6899      	ldr	r1, [r3, #8]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	f000 fb35 	bl	8009be0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009584:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	609a      	str	r2, [r3, #8]
      break;
 800958e:	e04f      	b.n	8009630 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6818      	ldr	r0, [r3, #0]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	6899      	ldr	r1, [r3, #8]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	685a      	ldr	r2, [r3, #4]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	f000 fb1e 	bl	8009be0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689a      	ldr	r2, [r3, #8]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095b2:	609a      	str	r2, [r3, #8]
      break;
 80095b4:	e03c      	b.n	8009630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6818      	ldr	r0, [r3, #0]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	6859      	ldr	r1, [r3, #4]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	461a      	mov	r2, r3
 80095c4:	f000 fa92 	bl	8009aec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2150      	movs	r1, #80	; 0x50
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 faeb 	bl	8009baa <TIM_ITRx_SetConfig>
      break;
 80095d4:	e02c      	b.n	8009630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6818      	ldr	r0, [r3, #0]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	6859      	ldr	r1, [r3, #4]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	461a      	mov	r2, r3
 80095e4:	f000 fab1 	bl	8009b4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2160      	movs	r1, #96	; 0x60
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 fadb 	bl	8009baa <TIM_ITRx_SetConfig>
      break;
 80095f4:	e01c      	b.n	8009630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6818      	ldr	r0, [r3, #0]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	6859      	ldr	r1, [r3, #4]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	461a      	mov	r2, r3
 8009604:	f000 fa72 	bl	8009aec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2140      	movs	r1, #64	; 0x40
 800960e:	4618      	mov	r0, r3
 8009610:	f000 facb 	bl	8009baa <TIM_ITRx_SetConfig>
      break;
 8009614:	e00c      	b.n	8009630 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4619      	mov	r1, r3
 8009620:	4610      	mov	r0, r2
 8009622:	f000 fac2 	bl	8009baa <TIM_ITRx_SetConfig>
      break;
 8009626:	e003      	b.n	8009630 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	73fb      	strb	r3, [r7, #15]
      break;
 800962c:	e000      	b.n	8009630 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800962e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a40      	ldr	r2, [pc, #256]	; (8009760 <TIM_Base_SetConfig+0x114>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d013      	beq.n	800968c <TIM_Base_SetConfig+0x40>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800966a:	d00f      	beq.n	800968c <TIM_Base_SetConfig+0x40>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a3d      	ldr	r2, [pc, #244]	; (8009764 <TIM_Base_SetConfig+0x118>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d00b      	beq.n	800968c <TIM_Base_SetConfig+0x40>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a3c      	ldr	r2, [pc, #240]	; (8009768 <TIM_Base_SetConfig+0x11c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d007      	beq.n	800968c <TIM_Base_SetConfig+0x40>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a3b      	ldr	r2, [pc, #236]	; (800976c <TIM_Base_SetConfig+0x120>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d003      	beq.n	800968c <TIM_Base_SetConfig+0x40>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a3a      	ldr	r2, [pc, #232]	; (8009770 <TIM_Base_SetConfig+0x124>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d108      	bne.n	800969e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	4313      	orrs	r3, r2
 800969c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a2f      	ldr	r2, [pc, #188]	; (8009760 <TIM_Base_SetConfig+0x114>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d02b      	beq.n	80096fe <TIM_Base_SetConfig+0xb2>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ac:	d027      	beq.n	80096fe <TIM_Base_SetConfig+0xb2>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a2c      	ldr	r2, [pc, #176]	; (8009764 <TIM_Base_SetConfig+0x118>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d023      	beq.n	80096fe <TIM_Base_SetConfig+0xb2>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a2b      	ldr	r2, [pc, #172]	; (8009768 <TIM_Base_SetConfig+0x11c>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d01f      	beq.n	80096fe <TIM_Base_SetConfig+0xb2>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a2a      	ldr	r2, [pc, #168]	; (800976c <TIM_Base_SetConfig+0x120>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d01b      	beq.n	80096fe <TIM_Base_SetConfig+0xb2>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a29      	ldr	r2, [pc, #164]	; (8009770 <TIM_Base_SetConfig+0x124>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d017      	beq.n	80096fe <TIM_Base_SetConfig+0xb2>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a28      	ldr	r2, [pc, #160]	; (8009774 <TIM_Base_SetConfig+0x128>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d013      	beq.n	80096fe <TIM_Base_SetConfig+0xb2>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a27      	ldr	r2, [pc, #156]	; (8009778 <TIM_Base_SetConfig+0x12c>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d00f      	beq.n	80096fe <TIM_Base_SetConfig+0xb2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a26      	ldr	r2, [pc, #152]	; (800977c <TIM_Base_SetConfig+0x130>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00b      	beq.n	80096fe <TIM_Base_SetConfig+0xb2>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a25      	ldr	r2, [pc, #148]	; (8009780 <TIM_Base_SetConfig+0x134>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d007      	beq.n	80096fe <TIM_Base_SetConfig+0xb2>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a24      	ldr	r2, [pc, #144]	; (8009784 <TIM_Base_SetConfig+0x138>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d003      	beq.n	80096fe <TIM_Base_SetConfig+0xb2>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a23      	ldr	r2, [pc, #140]	; (8009788 <TIM_Base_SetConfig+0x13c>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d108      	bne.n	8009710 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	4313      	orrs	r3, r2
 800970e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	4313      	orrs	r3, r2
 800971c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a0a      	ldr	r2, [pc, #40]	; (8009760 <TIM_Base_SetConfig+0x114>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d003      	beq.n	8009744 <TIM_Base_SetConfig+0xf8>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a0c      	ldr	r2, [pc, #48]	; (8009770 <TIM_Base_SetConfig+0x124>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d103      	bne.n	800974c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	691a      	ldr	r2, [r3, #16]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	615a      	str	r2, [r3, #20]
}
 8009752:	bf00      	nop
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	40010000 	.word	0x40010000
 8009764:	40000400 	.word	0x40000400
 8009768:	40000800 	.word	0x40000800
 800976c:	40000c00 	.word	0x40000c00
 8009770:	40010400 	.word	0x40010400
 8009774:	40014000 	.word	0x40014000
 8009778:	40014400 	.word	0x40014400
 800977c:	40014800 	.word	0x40014800
 8009780:	40001800 	.word	0x40001800
 8009784:	40001c00 	.word	0x40001c00
 8009788:	40002000 	.word	0x40002000

0800978c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800978c:	b480      	push	{r7}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	f023 0201 	bic.w	r2, r3, #1
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f023 0303 	bic.w	r3, r3, #3
 80097c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	f023 0302 	bic.w	r3, r3, #2
 80097d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	4313      	orrs	r3, r2
 80097de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a20      	ldr	r2, [pc, #128]	; (8009864 <TIM_OC1_SetConfig+0xd8>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d003      	beq.n	80097f0 <TIM_OC1_SetConfig+0x64>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a1f      	ldr	r2, [pc, #124]	; (8009868 <TIM_OC1_SetConfig+0xdc>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d10c      	bne.n	800980a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f023 0308 	bic.w	r3, r3, #8
 80097f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	4313      	orrs	r3, r2
 8009800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f023 0304 	bic.w	r3, r3, #4
 8009808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a15      	ldr	r2, [pc, #84]	; (8009864 <TIM_OC1_SetConfig+0xd8>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d003      	beq.n	800981a <TIM_OC1_SetConfig+0x8e>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a14      	ldr	r2, [pc, #80]	; (8009868 <TIM_OC1_SetConfig+0xdc>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d111      	bne.n	800983e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	4313      	orrs	r3, r2
 8009832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	4313      	orrs	r3, r2
 800983c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	621a      	str	r2, [r3, #32]
}
 8009858:	bf00      	nop
 800985a:	371c      	adds	r7, #28
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	40010000 	.word	0x40010000
 8009868:	40010400 	.word	0x40010400

0800986c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	f023 0210 	bic.w	r2, r3, #16
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800989a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	021b      	lsls	r3, r3, #8
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f023 0320 	bic.w	r3, r3, #32
 80098b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a22      	ldr	r2, [pc, #136]	; (8009950 <TIM_OC2_SetConfig+0xe4>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d003      	beq.n	80098d4 <TIM_OC2_SetConfig+0x68>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a21      	ldr	r2, [pc, #132]	; (8009954 <TIM_OC2_SetConfig+0xe8>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d10d      	bne.n	80098f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	011b      	lsls	r3, r3, #4
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a17      	ldr	r2, [pc, #92]	; (8009950 <TIM_OC2_SetConfig+0xe4>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d003      	beq.n	8009900 <TIM_OC2_SetConfig+0x94>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a16      	ldr	r2, [pc, #88]	; (8009954 <TIM_OC2_SetConfig+0xe8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d113      	bne.n	8009928 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009906:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800990e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	4313      	orrs	r3, r2
 800991a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4313      	orrs	r3, r2
 8009926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	621a      	str	r2, [r3, #32]
}
 8009942:	bf00      	nop
 8009944:	371c      	adds	r7, #28
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	40010000 	.word	0x40010000
 8009954:	40010400 	.word	0x40010400

08009958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a1b      	ldr	r3, [r3, #32]
 8009966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f023 0303 	bic.w	r3, r3, #3
 800998e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	4313      	orrs	r3, r2
 8009998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	021b      	lsls	r3, r3, #8
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a21      	ldr	r2, [pc, #132]	; (8009a38 <TIM_OC3_SetConfig+0xe0>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d003      	beq.n	80099be <TIM_OC3_SetConfig+0x66>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a20      	ldr	r2, [pc, #128]	; (8009a3c <TIM_OC3_SetConfig+0xe4>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d10d      	bne.n	80099da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	021b      	lsls	r3, r3, #8
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a16      	ldr	r2, [pc, #88]	; (8009a38 <TIM_OC3_SetConfig+0xe0>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d003      	beq.n	80099ea <TIM_OC3_SetConfig+0x92>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a15      	ldr	r2, [pc, #84]	; (8009a3c <TIM_OC3_SetConfig+0xe4>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d113      	bne.n	8009a12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	011b      	lsls	r3, r3, #4
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	011b      	lsls	r3, r3, #4
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	685a      	ldr	r2, [r3, #4]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	621a      	str	r2, [r3, #32]
}
 8009a2c:	bf00      	nop
 8009a2e:	371c      	adds	r7, #28
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	40010000 	.word	0x40010000
 8009a3c:	40010400 	.word	0x40010400

08009a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	021b      	lsls	r3, r3, #8
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	031b      	lsls	r3, r3, #12
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a12      	ldr	r2, [pc, #72]	; (8009ae4 <TIM_OC4_SetConfig+0xa4>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d003      	beq.n	8009aa8 <TIM_OC4_SetConfig+0x68>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a11      	ldr	r2, [pc, #68]	; (8009ae8 <TIM_OC4_SetConfig+0xa8>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d109      	bne.n	8009abc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	019b      	lsls	r3, r3, #6
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	693a      	ldr	r2, [r7, #16]
 8009ad4:	621a      	str	r2, [r3, #32]
}
 8009ad6:	bf00      	nop
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	40010000 	.word	0x40010000
 8009ae8:	40010400 	.word	0x40010400

08009aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6a1b      	ldr	r3, [r3, #32]
 8009afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	f023 0201 	bic.w	r2, r3, #1
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f023 030a 	bic.w	r3, r3, #10
 8009b28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	621a      	str	r2, [r3, #32]
}
 8009b3e:	bf00      	nop
 8009b40:	371c      	adds	r7, #28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b087      	sub	sp, #28
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	60f8      	str	r0, [r7, #12]
 8009b52:	60b9      	str	r1, [r7, #8]
 8009b54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	f023 0210 	bic.w	r2, r3, #16
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6a1b      	ldr	r3, [r3, #32]
 8009b6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	031b      	lsls	r3, r3, #12
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	011b      	lsls	r3, r3, #4
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	697a      	ldr	r2, [r7, #20]
 8009b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	621a      	str	r2, [r3, #32]
}
 8009b9e:	bf00      	nop
 8009ba0:	371c      	adds	r7, #28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b085      	sub	sp, #20
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	f043 0307 	orr.w	r3, r3, #7
 8009bcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	609a      	str	r2, [r3, #8]
}
 8009bd4:	bf00      	nop
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b087      	sub	sp, #28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	021a      	lsls	r2, r3, #8
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	431a      	orrs	r2, r3
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	609a      	str	r2, [r3, #8]
}
 8009c14:	bf00      	nop
 8009c16:	371c      	adds	r7, #28
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d101      	bne.n	8009c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c34:	2302      	movs	r3, #2
 8009c36:	e05a      	b.n	8009cee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2202      	movs	r2, #2
 8009c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a21      	ldr	r2, [pc, #132]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d022      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c84:	d01d      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a1d      	ldr	r2, [pc, #116]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d018      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a1b      	ldr	r2, [pc, #108]	; (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d013      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a1a      	ldr	r2, [pc, #104]	; (8009d08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d00e      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a18      	ldr	r2, [pc, #96]	; (8009d0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d009      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a17      	ldr	r2, [pc, #92]	; (8009d10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d004      	beq.n	8009cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a15      	ldr	r2, [pc, #84]	; (8009d14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d10c      	bne.n	8009cdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	40010000 	.word	0x40010000
 8009d00:	40000400 	.word	0x40000400
 8009d04:	40000800 	.word	0x40000800
 8009d08:	40000c00 	.word	0x40000c00
 8009d0c:	40010400 	.word	0x40010400
 8009d10:	40014000 	.word	0x40014000
 8009d14:	40001800 	.word	0x40001800

08009d18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d101      	bne.n	8009d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e03f      	b.n	8009daa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d106      	bne.n	8009d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7fb fab2 	bl	80052a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2224      	movs	r2, #36	; 0x24
 8009d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68da      	ldr	r2, [r3, #12]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fd53 	bl	800a808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	695a      	ldr	r2, [r3, #20]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68da      	ldr	r2, [r3, #12]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2220      	movs	r2, #32
 8009d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2220      	movs	r2, #32
 8009da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b08a      	sub	sp, #40	; 0x28
 8009db6:	af02      	add	r7, sp, #8
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	603b      	str	r3, [r7, #0]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b20      	cmp	r3, #32
 8009dd0:	d17c      	bne.n	8009ecc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <HAL_UART_Transmit+0x2c>
 8009dd8:	88fb      	ldrh	r3, [r7, #6]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e075      	b.n	8009ece <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d101      	bne.n	8009df0 <HAL_UART_Transmit+0x3e>
 8009dec:	2302      	movs	r3, #2
 8009dee:	e06e      	b.n	8009ece <HAL_UART_Transmit+0x11c>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2221      	movs	r2, #33	; 0x21
 8009e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e06:	f7fb fd35 	bl	8005874 <HAL_GetTick>
 8009e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	88fa      	ldrh	r2, [r7, #6]
 8009e10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	88fa      	ldrh	r2, [r7, #6]
 8009e16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e20:	d108      	bne.n	8009e34 <HAL_UART_Transmit+0x82>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d104      	bne.n	8009e34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	61bb      	str	r3, [r7, #24]
 8009e32:	e003      	b.n	8009e3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009e44:	e02a      	b.n	8009e9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2180      	movs	r1, #128	; 0x80
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 fb41 	bl	800a4d8 <UART_WaitOnFlagUntilTimeout>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e036      	b.n	8009ece <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10b      	bne.n	8009e7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	3302      	adds	r3, #2
 8009e7a:	61bb      	str	r3, [r7, #24]
 8009e7c:	e007      	b.n	8009e8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	781a      	ldrb	r2, [r3, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	3b01      	subs	r3, #1
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1cf      	bne.n	8009e46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2200      	movs	r2, #0
 8009eae:	2140      	movs	r1, #64	; 0x40
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 fb11 	bl	800a4d8 <UART_WaitOnFlagUntilTimeout>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e006      	b.n	8009ece <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	e000      	b.n	8009ece <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009ecc:	2302      	movs	r3, #2
  }
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3720      	adds	r7, #32
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b08a      	sub	sp, #40	; 0x28
 8009eda:	af02      	add	r7, sp, #8
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	60b9      	str	r1, [r7, #8]
 8009ee0:	603b      	str	r3, [r7, #0]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b20      	cmp	r3, #32
 8009ef4:	f040 808c 	bne.w	800a010 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <HAL_UART_Receive+0x2e>
 8009efe:	88fb      	ldrh	r3, [r7, #6]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e084      	b.n	800a012 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d101      	bne.n	8009f16 <HAL_UART_Receive+0x40>
 8009f12:	2302      	movs	r3, #2
 8009f14:	e07d      	b.n	800a012 <HAL_UART_Receive+0x13c>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2222      	movs	r2, #34	; 0x22
 8009f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f32:	f7fb fc9f 	bl	8005874 <HAL_GetTick>
 8009f36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	88fa      	ldrh	r2, [r7, #6]
 8009f3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	88fa      	ldrh	r2, [r7, #6]
 8009f42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f4c:	d108      	bne.n	8009f60 <HAL_UART_Receive+0x8a>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d104      	bne.n	8009f60 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009f56:	2300      	movs	r3, #0
 8009f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	61bb      	str	r3, [r7, #24]
 8009f5e:	e003      	b.n	8009f68 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f64:	2300      	movs	r3, #0
 8009f66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009f70:	e043      	b.n	8009ffa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	2120      	movs	r1, #32
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 faab 	bl	800a4d8 <UART_WaitOnFlagUntilTimeout>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	e042      	b.n	800a012 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10c      	bne.n	8009fac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	3302      	adds	r3, #2
 8009fa8:	61bb      	str	r3, [r7, #24]
 8009faa:	e01f      	b.n	8009fec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb4:	d007      	beq.n	8009fc6 <HAL_UART_Receive+0xf0>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10a      	bne.n	8009fd4 <HAL_UART_Receive+0xfe>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d106      	bne.n	8009fd4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	701a      	strb	r2, [r3, #0]
 8009fd2:	e008      	b.n	8009fe6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fe0:	b2da      	uxtb	r2, r3
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	b29a      	uxth	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1b6      	bne.n	8009f72 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2220      	movs	r2, #32
 800a008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	e000      	b.n	800a012 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a010:	2302      	movs	r3, #2
  }
}
 800a012:	4618      	mov	r0, r3
 800a014:	3720      	adds	r7, #32
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
	...

0800a01c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b08c      	sub	sp, #48	; 0x30
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	4613      	mov	r3, r2
 800a028:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a030:	b2db      	uxtb	r3, r3
 800a032:	2b20      	cmp	r3, #32
 800a034:	d165      	bne.n	800a102 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <HAL_UART_Transmit_DMA+0x26>
 800a03c:	88fb      	ldrh	r3, [r7, #6]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e05e      	b.n	800a104 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d101      	bne.n	800a054 <HAL_UART_Transmit_DMA+0x38>
 800a050:	2302      	movs	r3, #2
 800a052:	e057      	b.n	800a104 <HAL_UART_Transmit_DMA+0xe8>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	88fa      	ldrh	r2, [r7, #6]
 800a066:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	88fa      	ldrh	r2, [r7, #6]
 800a06c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2221      	movs	r2, #33	; 0x21
 800a078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a080:	4a22      	ldr	r2, [pc, #136]	; (800a10c <HAL_UART_Transmit_DMA+0xf0>)
 800a082:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a088:	4a21      	ldr	r2, [pc, #132]	; (800a110 <HAL_UART_Transmit_DMA+0xf4>)
 800a08a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a090:	4a20      	ldr	r2, [pc, #128]	; (800a114 <HAL_UART_Transmit_DMA+0xf8>)
 800a092:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a098:	2200      	movs	r2, #0
 800a09a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a09c:	f107 0308 	add.w	r3, r7, #8
 800a0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a8:	6819      	ldr	r1, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	88fb      	ldrh	r3, [r7, #6]
 800a0b4:	f7fb ff9d 	bl	8005ff2 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0c0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	3314      	adds	r3, #20
 800a0d0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	e853 3f00 	ldrex	r3, [r3]
 800a0d8:	617b      	str	r3, [r7, #20]
   return(result);
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3314      	adds	r3, #20
 800a0e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0ea:	627a      	str	r2, [r7, #36]	; 0x24
 800a0ec:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ee:	6a39      	ldr	r1, [r7, #32]
 800a0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e5      	bne.n	800a0ca <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	e000      	b.n	800a104 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a102:	2302      	movs	r3, #2
  }
}
 800a104:	4618      	mov	r0, r3
 800a106:	3730      	adds	r7, #48	; 0x30
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	0800a233 	.word	0x0800a233
 800a110:	0800a2cd 	.word	0x0800a2cd
 800a114:	0800a445 	.word	0x0800a445

0800a118 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08c      	sub	sp, #48	; 0x30
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	4613      	mov	r3, r2
 800a124:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	2b20      	cmp	r3, #32
 800a130:	d152      	bne.n	800a1d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a138:	88fb      	ldrh	r3, [r7, #6]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d101      	bne.n	800a142 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e04b      	b.n	800a1da <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d101      	bne.n	800a150 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800a14c:	2302      	movs	r3, #2
 800a14e:	e044      	b.n	800a1da <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2201      	movs	r2, #1
 800a15c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a15e:	88fb      	ldrh	r3, [r7, #6]
 800a160:	461a      	mov	r2, r3
 800a162:	68b9      	ldr	r1, [r7, #8]
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f000 fa25 	bl	800a5b4 <UART_Start_Receive_DMA>
 800a16a:	4603      	mov	r3, r0
 800a16c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a170:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a174:	2b00      	cmp	r3, #0
 800a176:	d12c      	bne.n	800a1d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d125      	bne.n	800a1cc <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a180:	2300      	movs	r3, #0
 800a182:	613b      	str	r3, [r7, #16]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	613b      	str	r3, [r7, #16]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	613b      	str	r3, [r7, #16]
 800a194:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	330c      	adds	r3, #12
 800a19c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	e853 3f00 	ldrex	r3, [r3]
 800a1a4:	617b      	str	r3, [r7, #20]
   return(result);
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f043 0310 	orr.w	r3, r3, #16
 800a1ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	330c      	adds	r3, #12
 800a1b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1b6:	627a      	str	r2, [r7, #36]	; 0x24
 800a1b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ba:	6a39      	ldr	r1, [r7, #32]
 800a1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1be:	e841 2300 	strex	r3, r2, [r1]
 800a1c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1e5      	bne.n	800a196 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a1ca:	e002      	b.n	800a1d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a1d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1d6:	e000      	b.n	800a1da <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a1d8:	2302      	movs	r3, #2
  }
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3730      	adds	r7, #48	; 0x30
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b083      	sub	sp, #12
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a1ea:	bf00      	nop
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b083      	sub	sp, #12
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a1fe:	bf00      	nop
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b083      	sub	sp, #12
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a212:	bf00      	nop
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a21e:	b480      	push	{r7}
 800a220:	b083      	sub	sp, #12
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a226:	bf00      	nop
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b090      	sub	sp, #64	; 0x40
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d137      	bne.n	800a2be <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a250:	2200      	movs	r2, #0
 800a252:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	3314      	adds	r3, #20
 800a25a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	e853 3f00 	ldrex	r3, [r3]
 800a262:	623b      	str	r3, [r7, #32]
   return(result);
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a26a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	3314      	adds	r3, #20
 800a272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a274:	633a      	str	r2, [r7, #48]	; 0x30
 800a276:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a27a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a27c:	e841 2300 	strex	r3, r2, [r1]
 800a280:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1e5      	bne.n	800a254 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	330c      	adds	r3, #12
 800a28e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	e853 3f00 	ldrex	r3, [r3]
 800a296:	60fb      	str	r3, [r7, #12]
   return(result);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a29e:	637b      	str	r3, [r7, #52]	; 0x34
 800a2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	330c      	adds	r3, #12
 800a2a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2a8:	61fa      	str	r2, [r7, #28]
 800a2aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ac:	69b9      	ldr	r1, [r7, #24]
 800a2ae:	69fa      	ldr	r2, [r7, #28]
 800a2b0:	e841 2300 	strex	r3, r2, [r1]
 800a2b4:	617b      	str	r3, [r7, #20]
   return(result);
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1e5      	bne.n	800a288 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2bc:	e002      	b.n	800a2c4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a2be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a2c0:	f7f7 fbf0 	bl	8001aa4 <HAL_UART_TxCpltCallback>
}
 800a2c4:	bf00      	nop
 800a2c6:	3740      	adds	r7, #64	; 0x40
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f7ff ff81 	bl	800a1e2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2e0:	bf00      	nop
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b09c      	sub	sp, #112	; 0x70
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a300:	2b00      	cmp	r3, #0
 800a302:	d172      	bne.n	800a3ea <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a306:	2200      	movs	r2, #0
 800a308:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a30a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	330c      	adds	r3, #12
 800a310:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a314:	e853 3f00 	ldrex	r3, [r3]
 800a318:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a31a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a31c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a320:	66bb      	str	r3, [r7, #104]	; 0x68
 800a322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	330c      	adds	r3, #12
 800a328:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a32a:	65ba      	str	r2, [r7, #88]	; 0x58
 800a32c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a332:	e841 2300 	strex	r3, r2, [r1]
 800a336:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1e5      	bne.n	800a30a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a33e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3314      	adds	r3, #20
 800a344:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a348:	e853 3f00 	ldrex	r3, [r3]
 800a34c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a350:	f023 0301 	bic.w	r3, r3, #1
 800a354:	667b      	str	r3, [r7, #100]	; 0x64
 800a356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	3314      	adds	r3, #20
 800a35c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a35e:	647a      	str	r2, [r7, #68]	; 0x44
 800a360:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a362:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a366:	e841 2300 	strex	r3, r2, [r1]
 800a36a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a36c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1e5      	bne.n	800a33e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	3314      	adds	r3, #20
 800a378:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37c:	e853 3f00 	ldrex	r3, [r3]
 800a380:	623b      	str	r3, [r7, #32]
   return(result);
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a388:	663b      	str	r3, [r7, #96]	; 0x60
 800a38a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3314      	adds	r3, #20
 800a390:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a392:	633a      	str	r2, [r7, #48]	; 0x30
 800a394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a39a:	e841 2300 	strex	r3, r2, [r1]
 800a39e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1e5      	bne.n	800a372 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a3a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d119      	bne.n	800a3ea <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	330c      	adds	r3, #12
 800a3bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	e853 3f00 	ldrex	r3, [r3]
 800a3c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f023 0310 	bic.w	r3, r3, #16
 800a3cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	330c      	adds	r3, #12
 800a3d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3d6:	61fa      	str	r2, [r7, #28]
 800a3d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3da:	69b9      	ldr	r1, [r7, #24]
 800a3dc:	69fa      	ldr	r2, [r7, #28]
 800a3de:	e841 2300 	strex	r3, r2, [r1]
 800a3e2:	617b      	str	r3, [r7, #20]
   return(result);
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1e5      	bne.n	800a3b6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d106      	bne.n	800a400 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3fa:	f7f7 fb5d 	bl	8001ab8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3fe:	e002      	b.n	800a406 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a400:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a402:	f7ff fef8 	bl	800a1f6 <HAL_UART_RxCpltCallback>
}
 800a406:	bf00      	nop
 800a408:	3770      	adds	r7, #112	; 0x70
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b084      	sub	sp, #16
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a420:	2b01      	cmp	r3, #1
 800a422:	d108      	bne.n	800a436 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a428:	085b      	lsrs	r3, r3, #1
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	4619      	mov	r1, r3
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7f7 fb42 	bl	8001ab8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a434:	e002      	b.n	800a43c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f7ff fee7 	bl	800a20a <HAL_UART_RxHalfCpltCallback>
}
 800a43c:	bf00      	nop
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a454:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a460:	2b80      	cmp	r3, #128	; 0x80
 800a462:	bf0c      	ite	eq
 800a464:	2301      	moveq	r3, #1
 800a466:	2300      	movne	r3, #0
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a472:	b2db      	uxtb	r3, r3
 800a474:	2b21      	cmp	r3, #33	; 0x21
 800a476:	d108      	bne.n	800a48a <UART_DMAError+0x46>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d005      	beq.n	800a48a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2200      	movs	r2, #0
 800a482:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a484:	68b8      	ldr	r0, [r7, #8]
 800a486:	f000 f933 	bl	800a6f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a494:	2b40      	cmp	r3, #64	; 0x40
 800a496:	bf0c      	ite	eq
 800a498:	2301      	moveq	r3, #1
 800a49a:	2300      	movne	r3, #0
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b22      	cmp	r3, #34	; 0x22
 800a4aa:	d108      	bne.n	800a4be <UART_DMAError+0x7a>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d005      	beq.n	800a4be <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a4b8:	68b8      	ldr	r0, [r7, #8]
 800a4ba:	f000 f941 	bl	800a740 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c2:	f043 0210 	orr.w	r2, r3, #16
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4ca:	68b8      	ldr	r0, [r7, #8]
 800a4cc:	f7ff fea7 	bl	800a21e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b090      	sub	sp, #64	; 0x40
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	603b      	str	r3, [r7, #0]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4e8:	e050      	b.n	800a58c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4f0:	d04c      	beq.n	800a58c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d007      	beq.n	800a508 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4f8:	f7fb f9bc 	bl	8005874 <HAL_GetTick>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a504:	429a      	cmp	r2, r3
 800a506:	d241      	bcs.n	800a58c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	330c      	adds	r3, #12
 800a50e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	e853 3f00 	ldrex	r3, [r3]
 800a516:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	330c      	adds	r3, #12
 800a526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a528:	637a      	str	r2, [r7, #52]	; 0x34
 800a52a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a52e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a530:	e841 2300 	strex	r3, r2, [r1]
 800a534:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1e5      	bne.n	800a508 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3314      	adds	r3, #20
 800a542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	e853 3f00 	ldrex	r3, [r3]
 800a54a:	613b      	str	r3, [r7, #16]
   return(result);
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	f023 0301 	bic.w	r3, r3, #1
 800a552:	63bb      	str	r3, [r7, #56]	; 0x38
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3314      	adds	r3, #20
 800a55a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a55c:	623a      	str	r2, [r7, #32]
 800a55e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a560:	69f9      	ldr	r1, [r7, #28]
 800a562:	6a3a      	ldr	r2, [r7, #32]
 800a564:	e841 2300 	strex	r3, r2, [r1]
 800a568:	61bb      	str	r3, [r7, #24]
   return(result);
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1e5      	bne.n	800a53c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2220      	movs	r2, #32
 800a574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2220      	movs	r2, #32
 800a57c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e00f      	b.n	800a5ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	4013      	ands	r3, r2
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	429a      	cmp	r2, r3
 800a59a:	bf0c      	ite	eq
 800a59c:	2301      	moveq	r3, #1
 800a59e:	2300      	movne	r3, #0
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	79fb      	ldrb	r3, [r7, #7]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d09f      	beq.n	800a4ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3740      	adds	r7, #64	; 0x40
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b098      	sub	sp, #96	; 0x60
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	88fa      	ldrh	r2, [r7, #6]
 800a5cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2222      	movs	r2, #34	; 0x22
 800a5d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e0:	4a40      	ldr	r2, [pc, #256]	; (800a6e4 <UART_Start_Receive_DMA+0x130>)
 800a5e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e8:	4a3f      	ldr	r2, [pc, #252]	; (800a6e8 <UART_Start_Receive_DMA+0x134>)
 800a5ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f0:	4a3e      	ldr	r2, [pc, #248]	; (800a6ec <UART_Start_Receive_DMA+0x138>)
 800a5f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a5fc:	f107 0308 	add.w	r3, r7, #8
 800a600:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3304      	adds	r3, #4
 800a60c:	4619      	mov	r1, r3
 800a60e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	88fb      	ldrh	r3, [r7, #6]
 800a614:	f7fb fced 	bl	8005ff2 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a618:	2300      	movs	r3, #0
 800a61a:	613b      	str	r3, [r7, #16]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	613b      	str	r3, [r7, #16]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	613b      	str	r3, [r7, #16]
 800a62c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d019      	beq.n	800a672 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	330c      	adds	r3, #12
 800a644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a648:	e853 3f00 	ldrex	r3, [r3]
 800a64c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a654:	65bb      	str	r3, [r7, #88]	; 0x58
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	330c      	adds	r3, #12
 800a65c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a65e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a660:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a662:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a666:	e841 2300 	strex	r3, r2, [r1]
 800a66a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a66c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1e5      	bne.n	800a63e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3314      	adds	r3, #20
 800a678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a684:	f043 0301 	orr.w	r3, r3, #1
 800a688:	657b      	str	r3, [r7, #84]	; 0x54
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3314      	adds	r3, #20
 800a690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a692:	63ba      	str	r2, [r7, #56]	; 0x38
 800a694:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e5      	bne.n	800a672 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3314      	adds	r3, #20
 800a6ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	e853 3f00 	ldrex	r3, [r3]
 800a6b4:	617b      	str	r3, [r7, #20]
   return(result);
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6bc:	653b      	str	r3, [r7, #80]	; 0x50
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3314      	adds	r3, #20
 800a6c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6c6:	627a      	str	r2, [r7, #36]	; 0x24
 800a6c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ca:	6a39      	ldr	r1, [r7, #32]
 800a6cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ce:	e841 2300 	strex	r3, r2, [r1]
 800a6d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1e5      	bne.n	800a6a6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3760      	adds	r7, #96	; 0x60
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	0800a2e9 	.word	0x0800a2e9
 800a6e8:	0800a40f 	.word	0x0800a40f
 800a6ec:	0800a445 	.word	0x0800a445

0800a6f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b089      	sub	sp, #36	; 0x24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	330c      	adds	r3, #12
 800a6fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	e853 3f00 	ldrex	r3, [r3]
 800a706:	60bb      	str	r3, [r7, #8]
   return(result);
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a70e:	61fb      	str	r3, [r7, #28]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	330c      	adds	r3, #12
 800a716:	69fa      	ldr	r2, [r7, #28]
 800a718:	61ba      	str	r2, [r7, #24]
 800a71a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	6979      	ldr	r1, [r7, #20]
 800a71e:	69ba      	ldr	r2, [r7, #24]
 800a720:	e841 2300 	strex	r3, r2, [r1]
 800a724:	613b      	str	r3, [r7, #16]
   return(result);
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e5      	bne.n	800a6f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2220      	movs	r2, #32
 800a730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a734:	bf00      	nop
 800a736:	3724      	adds	r7, #36	; 0x24
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a740:	b480      	push	{r7}
 800a742:	b095      	sub	sp, #84	; 0x54
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	330c      	adds	r3, #12
 800a74e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a752:	e853 3f00 	ldrex	r3, [r3]
 800a756:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a75e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	330c      	adds	r3, #12
 800a766:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a768:	643a      	str	r2, [r7, #64]	; 0x40
 800a76a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a76e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a770:	e841 2300 	strex	r3, r2, [r1]
 800a774:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1e5      	bne.n	800a748 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3314      	adds	r3, #20
 800a782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a784:	6a3b      	ldr	r3, [r7, #32]
 800a786:	e853 3f00 	ldrex	r3, [r3]
 800a78a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	f023 0301 	bic.w	r3, r3, #1
 800a792:	64bb      	str	r3, [r7, #72]	; 0x48
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	3314      	adds	r3, #20
 800a79a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a79c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a79e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7a4:	e841 2300 	strex	r3, r2, [r1]
 800a7a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1e5      	bne.n	800a77c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d119      	bne.n	800a7ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	330c      	adds	r3, #12
 800a7be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	e853 3f00 	ldrex	r3, [r3]
 800a7c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	f023 0310 	bic.w	r3, r3, #16
 800a7ce:	647b      	str	r3, [r7, #68]	; 0x44
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	330c      	adds	r3, #12
 800a7d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7d8:	61ba      	str	r2, [r7, #24]
 800a7da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7dc:	6979      	ldr	r1, [r7, #20]
 800a7de:	69ba      	ldr	r2, [r7, #24]
 800a7e0:	e841 2300 	strex	r3, r2, [r1]
 800a7e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1e5      	bne.n	800a7b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2220      	movs	r2, #32
 800a7f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a7fa:	bf00      	nop
 800a7fc:	3754      	adds	r7, #84	; 0x54
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
	...

0800a808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a80c:	b0c0      	sub	sp, #256	; 0x100
 800a80e:	af00      	add	r7, sp, #0
 800a810:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a824:	68d9      	ldr	r1, [r3, #12]
 800a826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	ea40 0301 	orr.w	r3, r0, r1
 800a830:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a836:	689a      	ldr	r2, [r3, #8]
 800a838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	431a      	orrs	r2, r3
 800a840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	431a      	orrs	r2, r3
 800a848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	4313      	orrs	r3, r2
 800a850:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a860:	f021 010c 	bic.w	r1, r1, #12
 800a864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a86e:	430b      	orrs	r3, r1
 800a870:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a87e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a882:	6999      	ldr	r1, [r3, #24]
 800a884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	ea40 0301 	orr.w	r3, r0, r1
 800a88e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	4b8f      	ldr	r3, [pc, #572]	; (800aad4 <UART_SetConfig+0x2cc>)
 800a898:	429a      	cmp	r2, r3
 800a89a:	d005      	beq.n	800a8a8 <UART_SetConfig+0xa0>
 800a89c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	4b8d      	ldr	r3, [pc, #564]	; (800aad8 <UART_SetConfig+0x2d0>)
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d104      	bne.n	800a8b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a8a8:	f7fd fe7c 	bl	80085a4 <HAL_RCC_GetPCLK2Freq>
 800a8ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a8b0:	e003      	b.n	800a8ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a8b2:	f7fd fe63 	bl	800857c <HAL_RCC_GetPCLK1Freq>
 800a8b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8be:	69db      	ldr	r3, [r3, #28]
 800a8c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8c4:	f040 810c 	bne.w	800aae0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a8c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a8d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a8d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a8da:	4622      	mov	r2, r4
 800a8dc:	462b      	mov	r3, r5
 800a8de:	1891      	adds	r1, r2, r2
 800a8e0:	65b9      	str	r1, [r7, #88]	; 0x58
 800a8e2:	415b      	adcs	r3, r3
 800a8e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	eb12 0801 	adds.w	r8, r2, r1
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	eb43 0901 	adc.w	r9, r3, r1
 800a8f6:	f04f 0200 	mov.w	r2, #0
 800a8fa:	f04f 0300 	mov.w	r3, #0
 800a8fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a90a:	4690      	mov	r8, r2
 800a90c:	4699      	mov	r9, r3
 800a90e:	4623      	mov	r3, r4
 800a910:	eb18 0303 	adds.w	r3, r8, r3
 800a914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a918:	462b      	mov	r3, r5
 800a91a:	eb49 0303 	adc.w	r3, r9, r3
 800a91e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a92e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a932:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a936:	460b      	mov	r3, r1
 800a938:	18db      	adds	r3, r3, r3
 800a93a:	653b      	str	r3, [r7, #80]	; 0x50
 800a93c:	4613      	mov	r3, r2
 800a93e:	eb42 0303 	adc.w	r3, r2, r3
 800a942:	657b      	str	r3, [r7, #84]	; 0x54
 800a944:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a948:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a94c:	f7f6 f9a6 	bl	8000c9c <__aeabi_uldivmod>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4b61      	ldr	r3, [pc, #388]	; (800aadc <UART_SetConfig+0x2d4>)
 800a956:	fba3 2302 	umull	r2, r3, r3, r2
 800a95a:	095b      	lsrs	r3, r3, #5
 800a95c:	011c      	lsls	r4, r3, #4
 800a95e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a962:	2200      	movs	r2, #0
 800a964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a968:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a96c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a970:	4642      	mov	r2, r8
 800a972:	464b      	mov	r3, r9
 800a974:	1891      	adds	r1, r2, r2
 800a976:	64b9      	str	r1, [r7, #72]	; 0x48
 800a978:	415b      	adcs	r3, r3
 800a97a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a97c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a980:	4641      	mov	r1, r8
 800a982:	eb12 0a01 	adds.w	sl, r2, r1
 800a986:	4649      	mov	r1, r9
 800a988:	eb43 0b01 	adc.w	fp, r3, r1
 800a98c:	f04f 0200 	mov.w	r2, #0
 800a990:	f04f 0300 	mov.w	r3, #0
 800a994:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a998:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a99c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9a0:	4692      	mov	sl, r2
 800a9a2:	469b      	mov	fp, r3
 800a9a4:	4643      	mov	r3, r8
 800a9a6:	eb1a 0303 	adds.w	r3, sl, r3
 800a9aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a9ae:	464b      	mov	r3, r9
 800a9b0:	eb4b 0303 	adc.w	r3, fp, r3
 800a9b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a9b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a9c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	18db      	adds	r3, r3, r3
 800a9d0:	643b      	str	r3, [r7, #64]	; 0x40
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	eb42 0303 	adc.w	r3, r2, r3
 800a9d8:	647b      	str	r3, [r7, #68]	; 0x44
 800a9da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a9de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a9e2:	f7f6 f95b 	bl	8000c9c <__aeabi_uldivmod>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	4b3b      	ldr	r3, [pc, #236]	; (800aadc <UART_SetConfig+0x2d4>)
 800a9ee:	fba3 2301 	umull	r2, r3, r3, r1
 800a9f2:	095b      	lsrs	r3, r3, #5
 800a9f4:	2264      	movs	r2, #100	; 0x64
 800a9f6:	fb02 f303 	mul.w	r3, r2, r3
 800a9fa:	1acb      	subs	r3, r1, r3
 800a9fc:	00db      	lsls	r3, r3, #3
 800a9fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aa02:	4b36      	ldr	r3, [pc, #216]	; (800aadc <UART_SetConfig+0x2d4>)
 800aa04:	fba3 2302 	umull	r2, r3, r3, r2
 800aa08:	095b      	lsrs	r3, r3, #5
 800aa0a:	005b      	lsls	r3, r3, #1
 800aa0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aa10:	441c      	add	r4, r3
 800aa12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa16:	2200      	movs	r2, #0
 800aa18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aa20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aa24:	4642      	mov	r2, r8
 800aa26:	464b      	mov	r3, r9
 800aa28:	1891      	adds	r1, r2, r2
 800aa2a:	63b9      	str	r1, [r7, #56]	; 0x38
 800aa2c:	415b      	adcs	r3, r3
 800aa2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aa34:	4641      	mov	r1, r8
 800aa36:	1851      	adds	r1, r2, r1
 800aa38:	6339      	str	r1, [r7, #48]	; 0x30
 800aa3a:	4649      	mov	r1, r9
 800aa3c:	414b      	adcs	r3, r1
 800aa3e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa40:	f04f 0200 	mov.w	r2, #0
 800aa44:	f04f 0300 	mov.w	r3, #0
 800aa48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aa4c:	4659      	mov	r1, fp
 800aa4e:	00cb      	lsls	r3, r1, #3
 800aa50:	4651      	mov	r1, sl
 800aa52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa56:	4651      	mov	r1, sl
 800aa58:	00ca      	lsls	r2, r1, #3
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4603      	mov	r3, r0
 800aa60:	4642      	mov	r2, r8
 800aa62:	189b      	adds	r3, r3, r2
 800aa64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa68:	464b      	mov	r3, r9
 800aa6a:	460a      	mov	r2, r1
 800aa6c:	eb42 0303 	adc.w	r3, r2, r3
 800aa70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aa80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aa84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aa88:	460b      	mov	r3, r1
 800aa8a:	18db      	adds	r3, r3, r3
 800aa8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa8e:	4613      	mov	r3, r2
 800aa90:	eb42 0303 	adc.w	r3, r2, r3
 800aa94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aa9e:	f7f6 f8fd 	bl	8000c9c <__aeabi_uldivmod>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	4b0d      	ldr	r3, [pc, #52]	; (800aadc <UART_SetConfig+0x2d4>)
 800aaa8:	fba3 1302 	umull	r1, r3, r3, r2
 800aaac:	095b      	lsrs	r3, r3, #5
 800aaae:	2164      	movs	r1, #100	; 0x64
 800aab0:	fb01 f303 	mul.w	r3, r1, r3
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	00db      	lsls	r3, r3, #3
 800aab8:	3332      	adds	r3, #50	; 0x32
 800aaba:	4a08      	ldr	r2, [pc, #32]	; (800aadc <UART_SetConfig+0x2d4>)
 800aabc:	fba2 2303 	umull	r2, r3, r2, r3
 800aac0:	095b      	lsrs	r3, r3, #5
 800aac2:	f003 0207 	and.w	r2, r3, #7
 800aac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4422      	add	r2, r4
 800aace:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aad0:	e106      	b.n	800ace0 <UART_SetConfig+0x4d8>
 800aad2:	bf00      	nop
 800aad4:	40011000 	.word	0x40011000
 800aad8:	40011400 	.word	0x40011400
 800aadc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aae4:	2200      	movs	r2, #0
 800aae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aaea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aaee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aaf2:	4642      	mov	r2, r8
 800aaf4:	464b      	mov	r3, r9
 800aaf6:	1891      	adds	r1, r2, r2
 800aaf8:	6239      	str	r1, [r7, #32]
 800aafa:	415b      	adcs	r3, r3
 800aafc:	627b      	str	r3, [r7, #36]	; 0x24
 800aafe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ab02:	4641      	mov	r1, r8
 800ab04:	1854      	adds	r4, r2, r1
 800ab06:	4649      	mov	r1, r9
 800ab08:	eb43 0501 	adc.w	r5, r3, r1
 800ab0c:	f04f 0200 	mov.w	r2, #0
 800ab10:	f04f 0300 	mov.w	r3, #0
 800ab14:	00eb      	lsls	r3, r5, #3
 800ab16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab1a:	00e2      	lsls	r2, r4, #3
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	461d      	mov	r5, r3
 800ab20:	4643      	mov	r3, r8
 800ab22:	18e3      	adds	r3, r4, r3
 800ab24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ab28:	464b      	mov	r3, r9
 800ab2a:	eb45 0303 	adc.w	r3, r5, r3
 800ab2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ab42:	f04f 0200 	mov.w	r2, #0
 800ab46:	f04f 0300 	mov.w	r3, #0
 800ab4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ab4e:	4629      	mov	r1, r5
 800ab50:	008b      	lsls	r3, r1, #2
 800ab52:	4621      	mov	r1, r4
 800ab54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab58:	4621      	mov	r1, r4
 800ab5a:	008a      	lsls	r2, r1, #2
 800ab5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ab60:	f7f6 f89c 	bl	8000c9c <__aeabi_uldivmod>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4b60      	ldr	r3, [pc, #384]	; (800acec <UART_SetConfig+0x4e4>)
 800ab6a:	fba3 2302 	umull	r2, r3, r3, r2
 800ab6e:	095b      	lsrs	r3, r3, #5
 800ab70:	011c      	lsls	r4, r3, #4
 800ab72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab76:	2200      	movs	r2, #0
 800ab78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ab80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ab84:	4642      	mov	r2, r8
 800ab86:	464b      	mov	r3, r9
 800ab88:	1891      	adds	r1, r2, r2
 800ab8a:	61b9      	str	r1, [r7, #24]
 800ab8c:	415b      	adcs	r3, r3
 800ab8e:	61fb      	str	r3, [r7, #28]
 800ab90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab94:	4641      	mov	r1, r8
 800ab96:	1851      	adds	r1, r2, r1
 800ab98:	6139      	str	r1, [r7, #16]
 800ab9a:	4649      	mov	r1, r9
 800ab9c:	414b      	adcs	r3, r1
 800ab9e:	617b      	str	r3, [r7, #20]
 800aba0:	f04f 0200 	mov.w	r2, #0
 800aba4:	f04f 0300 	mov.w	r3, #0
 800aba8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800abac:	4659      	mov	r1, fp
 800abae:	00cb      	lsls	r3, r1, #3
 800abb0:	4651      	mov	r1, sl
 800abb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abb6:	4651      	mov	r1, sl
 800abb8:	00ca      	lsls	r2, r1, #3
 800abba:	4610      	mov	r0, r2
 800abbc:	4619      	mov	r1, r3
 800abbe:	4603      	mov	r3, r0
 800abc0:	4642      	mov	r2, r8
 800abc2:	189b      	adds	r3, r3, r2
 800abc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800abc8:	464b      	mov	r3, r9
 800abca:	460a      	mov	r2, r1
 800abcc:	eb42 0303 	adc.w	r3, r2, r3
 800abd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800abd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	67bb      	str	r3, [r7, #120]	; 0x78
 800abde:	67fa      	str	r2, [r7, #124]	; 0x7c
 800abe0:	f04f 0200 	mov.w	r2, #0
 800abe4:	f04f 0300 	mov.w	r3, #0
 800abe8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800abec:	4649      	mov	r1, r9
 800abee:	008b      	lsls	r3, r1, #2
 800abf0:	4641      	mov	r1, r8
 800abf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abf6:	4641      	mov	r1, r8
 800abf8:	008a      	lsls	r2, r1, #2
 800abfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800abfe:	f7f6 f84d 	bl	8000c9c <__aeabi_uldivmod>
 800ac02:	4602      	mov	r2, r0
 800ac04:	460b      	mov	r3, r1
 800ac06:	4611      	mov	r1, r2
 800ac08:	4b38      	ldr	r3, [pc, #224]	; (800acec <UART_SetConfig+0x4e4>)
 800ac0a:	fba3 2301 	umull	r2, r3, r3, r1
 800ac0e:	095b      	lsrs	r3, r3, #5
 800ac10:	2264      	movs	r2, #100	; 0x64
 800ac12:	fb02 f303 	mul.w	r3, r2, r3
 800ac16:	1acb      	subs	r3, r1, r3
 800ac18:	011b      	lsls	r3, r3, #4
 800ac1a:	3332      	adds	r3, #50	; 0x32
 800ac1c:	4a33      	ldr	r2, [pc, #204]	; (800acec <UART_SetConfig+0x4e4>)
 800ac1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac22:	095b      	lsrs	r3, r3, #5
 800ac24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac28:	441c      	add	r4, r3
 800ac2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac2e:	2200      	movs	r2, #0
 800ac30:	673b      	str	r3, [r7, #112]	; 0x70
 800ac32:	677a      	str	r2, [r7, #116]	; 0x74
 800ac34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ac38:	4642      	mov	r2, r8
 800ac3a:	464b      	mov	r3, r9
 800ac3c:	1891      	adds	r1, r2, r2
 800ac3e:	60b9      	str	r1, [r7, #8]
 800ac40:	415b      	adcs	r3, r3
 800ac42:	60fb      	str	r3, [r7, #12]
 800ac44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac48:	4641      	mov	r1, r8
 800ac4a:	1851      	adds	r1, r2, r1
 800ac4c:	6039      	str	r1, [r7, #0]
 800ac4e:	4649      	mov	r1, r9
 800ac50:	414b      	adcs	r3, r1
 800ac52:	607b      	str	r3, [r7, #4]
 800ac54:	f04f 0200 	mov.w	r2, #0
 800ac58:	f04f 0300 	mov.w	r3, #0
 800ac5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ac60:	4659      	mov	r1, fp
 800ac62:	00cb      	lsls	r3, r1, #3
 800ac64:	4651      	mov	r1, sl
 800ac66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac6a:	4651      	mov	r1, sl
 800ac6c:	00ca      	lsls	r2, r1, #3
 800ac6e:	4610      	mov	r0, r2
 800ac70:	4619      	mov	r1, r3
 800ac72:	4603      	mov	r3, r0
 800ac74:	4642      	mov	r2, r8
 800ac76:	189b      	adds	r3, r3, r2
 800ac78:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac7a:	464b      	mov	r3, r9
 800ac7c:	460a      	mov	r2, r1
 800ac7e:	eb42 0303 	adc.w	r3, r2, r3
 800ac82:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	663b      	str	r3, [r7, #96]	; 0x60
 800ac8e:	667a      	str	r2, [r7, #100]	; 0x64
 800ac90:	f04f 0200 	mov.w	r2, #0
 800ac94:	f04f 0300 	mov.w	r3, #0
 800ac98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ac9c:	4649      	mov	r1, r9
 800ac9e:	008b      	lsls	r3, r1, #2
 800aca0:	4641      	mov	r1, r8
 800aca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aca6:	4641      	mov	r1, r8
 800aca8:	008a      	lsls	r2, r1, #2
 800acaa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800acae:	f7f5 fff5 	bl	8000c9c <__aeabi_uldivmod>
 800acb2:	4602      	mov	r2, r0
 800acb4:	460b      	mov	r3, r1
 800acb6:	4b0d      	ldr	r3, [pc, #52]	; (800acec <UART_SetConfig+0x4e4>)
 800acb8:	fba3 1302 	umull	r1, r3, r3, r2
 800acbc:	095b      	lsrs	r3, r3, #5
 800acbe:	2164      	movs	r1, #100	; 0x64
 800acc0:	fb01 f303 	mul.w	r3, r1, r3
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	011b      	lsls	r3, r3, #4
 800acc8:	3332      	adds	r3, #50	; 0x32
 800acca:	4a08      	ldr	r2, [pc, #32]	; (800acec <UART_SetConfig+0x4e4>)
 800accc:	fba2 2303 	umull	r2, r3, r2, r3
 800acd0:	095b      	lsrs	r3, r3, #5
 800acd2:	f003 020f 	and.w	r2, r3, #15
 800acd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4422      	add	r2, r4
 800acde:	609a      	str	r2, [r3, #8]
}
 800ace0:	bf00      	nop
 800ace2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ace6:	46bd      	mov	sp, r7
 800ace8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acec:	51eb851f 	.word	0x51eb851f

0800acf0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800acf4:	4904      	ldr	r1, [pc, #16]	; (800ad08 <MX_FATFS_Init+0x18>)
 800acf6:	4805      	ldr	r0, [pc, #20]	; (800ad0c <MX_FATFS_Init+0x1c>)
 800acf8:	f002 fd04 	bl	800d704 <FATFS_LinkDriver>
 800acfc:	4603      	mov	r3, r0
 800acfe:	461a      	mov	r2, r3
 800ad00:	4b03      	ldr	r3, [pc, #12]	; (800ad10 <MX_FATFS_Init+0x20>)
 800ad02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ad04:	bf00      	nop
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	200049a8 	.word	0x200049a8
 800ad0c:	20000014 	.word	0x20000014
 800ad10:	200049a4 	.word	0x200049a4

0800ad14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ad14:	b480      	push	{r7}
 800ad16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ad18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800ad2e:	79fb      	ldrb	r3, [r7, #7]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7f8 fd67 	bl	8003804 <SD_disk_initialize>
 800ad36:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	4603      	mov	r3, r0
 800ad48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800ad4a:	79fb      	ldrb	r3, [r7, #7]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7f8 fe3f 	bl	80039d0 <SD_disk_status>
 800ad52:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60b9      	str	r1, [r7, #8]
 800ad64:	607a      	str	r2, [r7, #4]
 800ad66:	603b      	str	r3, [r7, #0]
 800ad68:	4603      	mov	r3, r0
 800ad6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800ad6c:	7bf8      	ldrb	r0, [r7, #15]
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	68b9      	ldr	r1, [r7, #8]
 800ad74:	f7f8 fe42 	bl	80039fc <SD_disk_read>
 800ad78:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b084      	sub	sp, #16
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	603b      	str	r3, [r7, #0]
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800ad92:	7bf8      	ldrb	r0, [r7, #15]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	68b9      	ldr	r1, [r7, #8]
 800ad9a:	f7f8 fe99 	bl	8003ad0 <SD_disk_write>
 800ad9e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	4603      	mov	r3, r0
 800adb0:	603a      	str	r2, [r7, #0]
 800adb2:	71fb      	strb	r3, [r7, #7]
 800adb4:	460b      	mov	r3, r1
 800adb6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800adb8:	79b9      	ldrb	r1, [r7, #6]
 800adba:	79fb      	ldrb	r3, [r7, #7]
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7f8 ff0a 	bl	8003bd8 <SD_disk_ioctl>
 800adc4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
	...

0800add0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	4603      	mov	r3, r0
 800add8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800adda:	79fb      	ldrb	r3, [r7, #7]
 800addc:	4a08      	ldr	r2, [pc, #32]	; (800ae00 <disk_status+0x30>)
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	4413      	add	r3, r2
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	79fa      	ldrb	r2, [r7, #7]
 800ade8:	4905      	ldr	r1, [pc, #20]	; (800ae00 <disk_status+0x30>)
 800adea:	440a      	add	r2, r1
 800adec:	7a12      	ldrb	r2, [r2, #8]
 800adee:	4610      	mov	r0, r2
 800adf0:	4798      	blx	r3
 800adf2:	4603      	mov	r3, r0
 800adf4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800adf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	200049d4 	.word	0x200049d4

0800ae04 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ae12:	79fb      	ldrb	r3, [r7, #7]
 800ae14:	4a0d      	ldr	r2, [pc, #52]	; (800ae4c <disk_initialize+0x48>)
 800ae16:	5cd3      	ldrb	r3, [r2, r3]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d111      	bne.n	800ae40 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ae1c:	79fb      	ldrb	r3, [r7, #7]
 800ae1e:	4a0b      	ldr	r2, [pc, #44]	; (800ae4c <disk_initialize+0x48>)
 800ae20:	2101      	movs	r1, #1
 800ae22:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ae24:	79fb      	ldrb	r3, [r7, #7]
 800ae26:	4a09      	ldr	r2, [pc, #36]	; (800ae4c <disk_initialize+0x48>)
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	79fa      	ldrb	r2, [r7, #7]
 800ae32:	4906      	ldr	r1, [pc, #24]	; (800ae4c <disk_initialize+0x48>)
 800ae34:	440a      	add	r2, r1
 800ae36:	7a12      	ldrb	r2, [r2, #8]
 800ae38:	4610      	mov	r0, r2
 800ae3a:	4798      	blx	r3
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	200049d4 	.word	0x200049d4

0800ae50 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ae50:	b590      	push	{r4, r7, lr}
 800ae52:	b087      	sub	sp, #28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60b9      	str	r1, [r7, #8]
 800ae58:	607a      	str	r2, [r7, #4]
 800ae5a:	603b      	str	r3, [r7, #0]
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	4a0a      	ldr	r2, [pc, #40]	; (800ae8c <disk_read+0x3c>)
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4413      	add	r3, r2
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	689c      	ldr	r4, [r3, #8]
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
 800ae6e:	4a07      	ldr	r2, [pc, #28]	; (800ae8c <disk_read+0x3c>)
 800ae70:	4413      	add	r3, r2
 800ae72:	7a18      	ldrb	r0, [r3, #8]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	68b9      	ldr	r1, [r7, #8]
 800ae7a:	47a0      	blx	r4
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ae80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	371c      	adds	r7, #28
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd90      	pop	{r4, r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	200049d4 	.word	0x200049d4

0800ae90 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ae90:	b590      	push	{r4, r7, lr}
 800ae92:	b087      	sub	sp, #28
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60b9      	str	r1, [r7, #8]
 800ae98:	607a      	str	r2, [r7, #4]
 800ae9a:	603b      	str	r3, [r7, #0]
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aea0:	7bfb      	ldrb	r3, [r7, #15]
 800aea2:	4a0a      	ldr	r2, [pc, #40]	; (800aecc <disk_write+0x3c>)
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	4413      	add	r3, r2
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	68dc      	ldr	r4, [r3, #12]
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
 800aeae:	4a07      	ldr	r2, [pc, #28]	; (800aecc <disk_write+0x3c>)
 800aeb0:	4413      	add	r3, r2
 800aeb2:	7a18      	ldrb	r0, [r3, #8]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	68b9      	ldr	r1, [r7, #8]
 800aeba:	47a0      	blx	r4
 800aebc:	4603      	mov	r3, r0
 800aebe:	75fb      	strb	r3, [r7, #23]
  return res;
 800aec0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	371c      	adds	r7, #28
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd90      	pop	{r4, r7, pc}
 800aeca:	bf00      	nop
 800aecc:	200049d4 	.word	0x200049d4

0800aed0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	603a      	str	r2, [r7, #0]
 800aeda:	71fb      	strb	r3, [r7, #7]
 800aedc:	460b      	mov	r3, r1
 800aede:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aee0:	79fb      	ldrb	r3, [r7, #7]
 800aee2:	4a09      	ldr	r2, [pc, #36]	; (800af08 <disk_ioctl+0x38>)
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	4413      	add	r3, r2
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	79fa      	ldrb	r2, [r7, #7]
 800aeee:	4906      	ldr	r1, [pc, #24]	; (800af08 <disk_ioctl+0x38>)
 800aef0:	440a      	add	r2, r1
 800aef2:	7a10      	ldrb	r0, [r2, #8]
 800aef4:	79b9      	ldrb	r1, [r7, #6]
 800aef6:	683a      	ldr	r2, [r7, #0]
 800aef8:	4798      	blx	r3
 800aefa:	4603      	mov	r3, r0
 800aefc:	73fb      	strb	r3, [r7, #15]
  return res;
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	200049d4 	.word	0x200049d4

0800af0c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	3301      	adds	r3, #1
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800af1c:	89fb      	ldrh	r3, [r7, #14]
 800af1e:	021b      	lsls	r3, r3, #8
 800af20:	b21a      	sxth	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	b21b      	sxth	r3, r3
 800af28:	4313      	orrs	r3, r2
 800af2a:	b21b      	sxth	r3, r3
 800af2c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800af2e:	89fb      	ldrh	r3, [r7, #14]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3303      	adds	r3, #3
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	021b      	lsls	r3, r3, #8
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	3202      	adds	r2, #2
 800af54:	7812      	ldrb	r2, [r2, #0]
 800af56:	4313      	orrs	r3, r2
 800af58:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	021b      	lsls	r3, r3, #8
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	3201      	adds	r2, #1
 800af62:	7812      	ldrb	r2, [r2, #0]
 800af64:	4313      	orrs	r3, r2
 800af66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	021b      	lsls	r3, r3, #8
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	7812      	ldrb	r2, [r2, #0]
 800af70:	4313      	orrs	r3, r2
 800af72:	60fb      	str	r3, [r7, #12]
	return rv;
 800af74:	68fb      	ldr	r3, [r7, #12]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3714      	adds	r7, #20
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800af82:	b480      	push	{r7}
 800af84:	b083      	sub	sp, #12
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
 800af8a:	460b      	mov	r3, r1
 800af8c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	1c5a      	adds	r2, r3, #1
 800af92:	607a      	str	r2, [r7, #4]
 800af94:	887a      	ldrh	r2, [r7, #2]
 800af96:	b2d2      	uxtb	r2, r2
 800af98:	701a      	strb	r2, [r3, #0]
 800af9a:	887b      	ldrh	r3, [r7, #2]
 800af9c:	0a1b      	lsrs	r3, r3, #8
 800af9e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	1c5a      	adds	r2, r3, #1
 800afa4:	607a      	str	r2, [r7, #4]
 800afa6:	887a      	ldrh	r2, [r7, #2]
 800afa8:	b2d2      	uxtb	r2, r2
 800afaa:	701a      	strb	r2, [r3, #0]
}
 800afac:	bf00      	nop
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	1c5a      	adds	r2, r3, #1
 800afc6:	607a      	str	r2, [r7, #4]
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	b2d2      	uxtb	r2, r2
 800afcc:	701a      	strb	r2, [r3, #0]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	0a1b      	lsrs	r3, r3, #8
 800afd2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	1c5a      	adds	r2, r3, #1
 800afd8:	607a      	str	r2, [r7, #4]
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	b2d2      	uxtb	r2, r2
 800afde:	701a      	strb	r2, [r3, #0]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	0a1b      	lsrs	r3, r3, #8
 800afe4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	1c5a      	adds	r2, r3, #1
 800afea:	607a      	str	r2, [r7, #4]
 800afec:	683a      	ldr	r2, [r7, #0]
 800afee:	b2d2      	uxtb	r2, r2
 800aff0:	701a      	strb	r2, [r3, #0]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	0a1b      	lsrs	r3, r3, #8
 800aff6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	1c5a      	adds	r2, r3, #1
 800affc:	607a      	str	r2, [r7, #4]
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	b2d2      	uxtb	r2, r2
 800b002:	701a      	strb	r2, [r3, #0]
}
 800b004:	bf00      	nop
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b010:	b480      	push	{r7}
 800b012:	b087      	sub	sp, #28
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00d      	beq.n	800b046 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	1c53      	adds	r3, r2, #1
 800b02e:	613b      	str	r3, [r7, #16]
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	1c59      	adds	r1, r3, #1
 800b034:	6179      	str	r1, [r7, #20]
 800b036:	7812      	ldrb	r2, [r2, #0]
 800b038:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	607b      	str	r3, [r7, #4]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1f1      	bne.n	800b02a <mem_cpy+0x1a>
	}
}
 800b046:	bf00      	nop
 800b048:	371c      	adds	r7, #28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b052:	b480      	push	{r7}
 800b054:	b087      	sub	sp, #28
 800b056:	af00      	add	r7, sp, #0
 800b058:	60f8      	str	r0, [r7, #12]
 800b05a:	60b9      	str	r1, [r7, #8]
 800b05c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	1c5a      	adds	r2, r3, #1
 800b066:	617a      	str	r2, [r7, #20]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	b2d2      	uxtb	r2, r2
 800b06c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	3b01      	subs	r3, #1
 800b072:	607b      	str	r3, [r7, #4]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1f3      	bne.n	800b062 <mem_set+0x10>
}
 800b07a:	bf00      	nop
 800b07c:	bf00      	nop
 800b07e:	371c      	adds	r7, #28
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b088:	b480      	push	{r7}
 800b08a:	b089      	sub	sp, #36	; 0x24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	61fb      	str	r3, [r7, #28]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b09c:	2300      	movs	r3, #0
 800b09e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	61fa      	str	r2, [r7, #28]
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	1c5a      	adds	r2, r3, #1
 800b0ae:	61ba      	str	r2, [r7, #24]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	1acb      	subs	r3, r1, r3
 800b0b4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	607b      	str	r3, [r7, #4]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d002      	beq.n	800b0c8 <mem_cmp+0x40>
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d0eb      	beq.n	800b0a0 <mem_cmp+0x18>

	return r;
 800b0c8:	697b      	ldr	r3, [r7, #20]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3724      	adds	r7, #36	; 0x24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr

0800b0d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b0d6:	b480      	push	{r7}
 800b0d8:	b083      	sub	sp, #12
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b0e0:	e002      	b.n	800b0e8 <chk_chr+0x12>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	607b      	str	r3, [r7, #4]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d005      	beq.n	800b0fc <chk_chr+0x26>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d1f2      	bne.n	800b0e2 <chk_chr+0xc>
	return *str;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
}
 800b100:	4618      	mov	r0, r3
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d009      	beq.n	800b12e <lock_fs+0x22>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	4618      	mov	r0, r3
 800b120:	f002 fb26 	bl	800d770 <ff_req_grant>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <lock_fs+0x22>
 800b12a:	2301      	movs	r3, #1
 800b12c:	e000      	b.n	800b130 <lock_fs+0x24>
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	460b      	mov	r3, r1
 800b142:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00d      	beq.n	800b166 <unlock_fs+0x2e>
 800b14a:	78fb      	ldrb	r3, [r7, #3]
 800b14c:	2b0c      	cmp	r3, #12
 800b14e:	d00a      	beq.n	800b166 <unlock_fs+0x2e>
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	2b0b      	cmp	r3, #11
 800b154:	d007      	beq.n	800b166 <unlock_fs+0x2e>
 800b156:	78fb      	ldrb	r3, [r7, #3]
 800b158:	2b0f      	cmp	r3, #15
 800b15a:	d004      	beq.n	800b166 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	4618      	mov	r0, r3
 800b162:	f002 fb1a 	bl	800d79a <ff_rel_grant>
	}
}
 800b166:	bf00      	nop
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
	...

0800b170 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b17a:	2300      	movs	r3, #0
 800b17c:	60bb      	str	r3, [r7, #8]
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	60fb      	str	r3, [r7, #12]
 800b182:	e029      	b.n	800b1d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b184:	4a27      	ldr	r2, [pc, #156]	; (800b224 <chk_lock+0xb4>)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	011b      	lsls	r3, r3, #4
 800b18a:	4413      	add	r3, r2
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d01d      	beq.n	800b1ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b192:	4a24      	ldr	r2, [pc, #144]	; (800b224 <chk_lock+0xb4>)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	011b      	lsls	r3, r3, #4
 800b198:	4413      	add	r3, r2
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d116      	bne.n	800b1d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b1a4:	4a1f      	ldr	r2, [pc, #124]	; (800b224 <chk_lock+0xb4>)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	011b      	lsls	r3, r3, #4
 800b1aa:	4413      	add	r3, r2
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d10c      	bne.n	800b1d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b1b8:	4a1a      	ldr	r2, [pc, #104]	; (800b224 <chk_lock+0xb4>)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	011b      	lsls	r3, r3, #4
 800b1be:	4413      	add	r3, r2
 800b1c0:	3308      	adds	r3, #8
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d102      	bne.n	800b1d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b1cc:	e007      	b.n	800b1de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	60fb      	str	r3, [r7, #12]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d9d2      	bls.n	800b184 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d109      	bne.n	800b1f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d102      	bne.n	800b1f0 <chk_lock+0x80>
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d101      	bne.n	800b1f4 <chk_lock+0x84>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e010      	b.n	800b216 <chk_lock+0xa6>
 800b1f4:	2312      	movs	r3, #18
 800b1f6:	e00e      	b.n	800b216 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d108      	bne.n	800b210 <chk_lock+0xa0>
 800b1fe:	4a09      	ldr	r2, [pc, #36]	; (800b224 <chk_lock+0xb4>)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	011b      	lsls	r3, r3, #4
 800b204:	4413      	add	r3, r2
 800b206:	330c      	adds	r3, #12
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b20e:	d101      	bne.n	800b214 <chk_lock+0xa4>
 800b210:	2310      	movs	r3, #16
 800b212:	e000      	b.n	800b216 <chk_lock+0xa6>
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	200049b4 	.word	0x200049b4

0800b228 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b22e:	2300      	movs	r3, #0
 800b230:	607b      	str	r3, [r7, #4]
 800b232:	e002      	b.n	800b23a <enq_lock+0x12>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	3301      	adds	r3, #1
 800b238:	607b      	str	r3, [r7, #4]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d806      	bhi.n	800b24e <enq_lock+0x26>
 800b240:	4a09      	ldr	r2, [pc, #36]	; (800b268 <enq_lock+0x40>)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	011b      	lsls	r3, r3, #4
 800b246:	4413      	add	r3, r2
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1f2      	bne.n	800b234 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2b02      	cmp	r3, #2
 800b252:	bf14      	ite	ne
 800b254:	2301      	movne	r3, #1
 800b256:	2300      	moveq	r3, #0
 800b258:	b2db      	uxtb	r3, r3
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	200049b4 	.word	0x200049b4

0800b26c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b276:	2300      	movs	r3, #0
 800b278:	60fb      	str	r3, [r7, #12]
 800b27a:	e01f      	b.n	800b2bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b27c:	4a41      	ldr	r2, [pc, #260]	; (800b384 <inc_lock+0x118>)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	011b      	lsls	r3, r3, #4
 800b282:	4413      	add	r3, r2
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d113      	bne.n	800b2b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b28e:	4a3d      	ldr	r2, [pc, #244]	; (800b384 <inc_lock+0x118>)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	011b      	lsls	r3, r3, #4
 800b294:	4413      	add	r3, r2
 800b296:	3304      	adds	r3, #4
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d109      	bne.n	800b2b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b2a2:	4a38      	ldr	r2, [pc, #224]	; (800b384 <inc_lock+0x118>)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	011b      	lsls	r3, r3, #4
 800b2a8:	4413      	add	r3, r2
 800b2aa:	3308      	adds	r3, #8
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d006      	beq.n	800b2c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d9dc      	bls.n	800b27c <inc_lock+0x10>
 800b2c2:	e000      	b.n	800b2c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b2c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d132      	bne.n	800b332 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	e002      	b.n	800b2d8 <inc_lock+0x6c>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d806      	bhi.n	800b2ec <inc_lock+0x80>
 800b2de:	4a29      	ldr	r2, [pc, #164]	; (800b384 <inc_lock+0x118>)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	011b      	lsls	r3, r3, #4
 800b2e4:	4413      	add	r3, r2
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1f2      	bne.n	800b2d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2b02      	cmp	r3, #2
 800b2f0:	d101      	bne.n	800b2f6 <inc_lock+0x8a>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	e040      	b.n	800b378 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	4922      	ldr	r1, [pc, #136]	; (800b384 <inc_lock+0x118>)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	011b      	lsls	r3, r3, #4
 800b300:	440b      	add	r3, r1
 800b302:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	689a      	ldr	r2, [r3, #8]
 800b308:	491e      	ldr	r1, [pc, #120]	; (800b384 <inc_lock+0x118>)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	011b      	lsls	r3, r3, #4
 800b30e:	440b      	add	r3, r1
 800b310:	3304      	adds	r3, #4
 800b312:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	695a      	ldr	r2, [r3, #20]
 800b318:	491a      	ldr	r1, [pc, #104]	; (800b384 <inc_lock+0x118>)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	011b      	lsls	r3, r3, #4
 800b31e:	440b      	add	r3, r1
 800b320:	3308      	adds	r3, #8
 800b322:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b324:	4a17      	ldr	r2, [pc, #92]	; (800b384 <inc_lock+0x118>)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	011b      	lsls	r3, r3, #4
 800b32a:	4413      	add	r3, r2
 800b32c:	330c      	adds	r3, #12
 800b32e:	2200      	movs	r2, #0
 800b330:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d009      	beq.n	800b34c <inc_lock+0xe0>
 800b338:	4a12      	ldr	r2, [pc, #72]	; (800b384 <inc_lock+0x118>)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	011b      	lsls	r3, r3, #4
 800b33e:	4413      	add	r3, r2
 800b340:	330c      	adds	r3, #12
 800b342:	881b      	ldrh	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d001      	beq.n	800b34c <inc_lock+0xe0>
 800b348:	2300      	movs	r3, #0
 800b34a:	e015      	b.n	800b378 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d108      	bne.n	800b364 <inc_lock+0xf8>
 800b352:	4a0c      	ldr	r2, [pc, #48]	; (800b384 <inc_lock+0x118>)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	011b      	lsls	r3, r3, #4
 800b358:	4413      	add	r3, r2
 800b35a:	330c      	adds	r3, #12
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	3301      	adds	r3, #1
 800b360:	b29a      	uxth	r2, r3
 800b362:	e001      	b.n	800b368 <inc_lock+0xfc>
 800b364:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b368:	4906      	ldr	r1, [pc, #24]	; (800b384 <inc_lock+0x118>)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	011b      	lsls	r3, r3, #4
 800b36e:	440b      	add	r3, r1
 800b370:	330c      	adds	r3, #12
 800b372:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	3301      	adds	r3, #1
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	200049b4 	.word	0x200049b4

0800b388 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3b01      	subs	r3, #1
 800b394:	607b      	str	r3, [r7, #4]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d825      	bhi.n	800b3e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800b39c:	4a17      	ldr	r2, [pc, #92]	; (800b3fc <dec_lock+0x74>)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	011b      	lsls	r3, r3, #4
 800b3a2:	4413      	add	r3, r2
 800b3a4:	330c      	adds	r3, #12
 800b3a6:	881b      	ldrh	r3, [r3, #0]
 800b3a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b3aa:	89fb      	ldrh	r3, [r7, #14]
 800b3ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3b0:	d101      	bne.n	800b3b6 <dec_lock+0x2e>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b3b6:	89fb      	ldrh	r3, [r7, #14]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <dec_lock+0x3a>
 800b3bc:	89fb      	ldrh	r3, [r7, #14]
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b3c2:	4a0e      	ldr	r2, [pc, #56]	; (800b3fc <dec_lock+0x74>)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	011b      	lsls	r3, r3, #4
 800b3c8:	4413      	add	r3, r2
 800b3ca:	330c      	adds	r3, #12
 800b3cc:	89fa      	ldrh	r2, [r7, #14]
 800b3ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b3d0:	89fb      	ldrh	r3, [r7, #14]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d105      	bne.n	800b3e2 <dec_lock+0x5a>
 800b3d6:	4a09      	ldr	r2, [pc, #36]	; (800b3fc <dec_lock+0x74>)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	011b      	lsls	r3, r3, #4
 800b3dc:	4413      	add	r3, r2
 800b3de:	2200      	movs	r2, #0
 800b3e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	737b      	strb	r3, [r7, #13]
 800b3e6:	e001      	b.n	800b3ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b3e8:	2302      	movs	r3, #2
 800b3ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b3ec:	7b7b      	ldrb	r3, [r7, #13]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	200049b4 	.word	0x200049b4

0800b400 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b408:	2300      	movs	r3, #0
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	e010      	b.n	800b430 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b40e:	4a0d      	ldr	r2, [pc, #52]	; (800b444 <clear_lock+0x44>)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	011b      	lsls	r3, r3, #4
 800b414:	4413      	add	r3, r2
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d105      	bne.n	800b42a <clear_lock+0x2a>
 800b41e:	4a09      	ldr	r2, [pc, #36]	; (800b444 <clear_lock+0x44>)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	011b      	lsls	r3, r3, #4
 800b424:	4413      	add	r3, r2
 800b426:	2200      	movs	r2, #0
 800b428:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3301      	adds	r3, #1
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b01      	cmp	r3, #1
 800b434:	d9eb      	bls.n	800b40e <clear_lock+0xe>
	}
}
 800b436:	bf00      	nop
 800b438:	bf00      	nop
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr
 800b444:	200049b4 	.word	0x200049b4

0800b448 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b450:	2300      	movs	r3, #0
 800b452:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	78db      	ldrb	r3, [r3, #3]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d034      	beq.n	800b4c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b460:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	7858      	ldrb	r0, [r3, #1]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b46c:	2301      	movs	r3, #1
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	f7ff fd0e 	bl	800ae90 <disk_write>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d002      	beq.n	800b480 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	73fb      	strb	r3, [r7, #15]
 800b47e:	e022      	b.n	800b4c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b48a:	697a      	ldr	r2, [r7, #20]
 800b48c:	1ad2      	subs	r2, r2, r3
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	429a      	cmp	r2, r3
 800b494:	d217      	bcs.n	800b4c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	789b      	ldrb	r3, [r3, #2]
 800b49a:	613b      	str	r3, [r7, #16]
 800b49c:	e010      	b.n	800b4c0 <sync_window+0x78>
					wsect += fs->fsize;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	7858      	ldrb	r0, [r3, #1]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	697a      	ldr	r2, [r7, #20]
 800b4b6:	f7ff fceb 	bl	800ae90 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	613b      	str	r3, [r7, #16]
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d8eb      	bhi.n	800b49e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3718      	adds	r7, #24
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d01b      	beq.n	800b520 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff ffad 	bl	800b448 <sync_window>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d113      	bne.n	800b520 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	7858      	ldrb	r0, [r3, #1]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b502:	2301      	movs	r3, #1
 800b504:	683a      	ldr	r2, [r7, #0]
 800b506:	f7ff fca3 	bl	800ae50 <disk_read>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d004      	beq.n	800b51a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b514:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b516:	2301      	movs	r3, #1
 800b518:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	683a      	ldr	r2, [r7, #0]
 800b51e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b520:	7bfb      	ldrb	r3, [r7, #15]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
	...

0800b52c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f7ff ff87 	bl	800b448 <sync_window>
 800b53a:	4603      	mov	r3, r0
 800b53c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d159      	bne.n	800b5f8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b03      	cmp	r3, #3
 800b54a:	d149      	bne.n	800b5e0 <sync_fs+0xb4>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	791b      	ldrb	r3, [r3, #4]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d145      	bne.n	800b5e0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	899b      	ldrh	r3, [r3, #12]
 800b55e:	461a      	mov	r2, r3
 800b560:	2100      	movs	r1, #0
 800b562:	f7ff fd76 	bl	800b052 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	3338      	adds	r3, #56	; 0x38
 800b56a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b56e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b572:	4618      	mov	r0, r3
 800b574:	f7ff fd05 	bl	800af82 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3338      	adds	r3, #56	; 0x38
 800b57c:	4921      	ldr	r1, [pc, #132]	; (800b604 <sync_fs+0xd8>)
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff fd1a 	bl	800afb8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3338      	adds	r3, #56	; 0x38
 800b588:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b58c:	491e      	ldr	r1, [pc, #120]	; (800b608 <sync_fs+0xdc>)
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff fd12 	bl	800afb8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	3338      	adds	r3, #56	; 0x38
 800b598:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4610      	mov	r0, r2
 800b5a4:	f7ff fd08 	bl	800afb8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3338      	adds	r3, #56	; 0x38
 800b5ac:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	695b      	ldr	r3, [r3, #20]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	f7ff fcfe 	bl	800afb8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c0:	1c5a      	adds	r2, r3, #1
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	7858      	ldrb	r0, [r3, #1]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	f7ff fc5b 	bl	800ae90 <disk_write>
			fs->fsi_flag = 0;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	785b      	ldrb	r3, [r3, #1]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7ff fc71 	bl	800aed0 <disk_ioctl>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d001      	beq.n	800b5f8 <sync_fs+0xcc>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	41615252 	.word	0x41615252
 800b608:	61417272 	.word	0x61417272

0800b60c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	3b02      	subs	r3, #2
 800b61a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	69db      	ldr	r3, [r3, #28]
 800b620:	3b02      	subs	r3, #2
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	429a      	cmp	r2, r3
 800b626:	d301      	bcc.n	800b62c <clust2sect+0x20>
 800b628:	2300      	movs	r3, #0
 800b62a:	e008      	b.n	800b63e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	895b      	ldrh	r3, [r3, #10]
 800b630:	461a      	mov	r2, r3
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	fb03 f202 	mul.w	r2, r3, r2
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63c:	4413      	add	r3, r2
}
 800b63e:	4618      	mov	r0, r3
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b086      	sub	sp, #24
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d904      	bls.n	800b66a <get_fat+0x20>
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	69db      	ldr	r3, [r3, #28]
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	429a      	cmp	r2, r3
 800b668:	d302      	bcc.n	800b670 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b66a:	2301      	movs	r3, #1
 800b66c:	617b      	str	r3, [r7, #20]
 800b66e:	e0bb      	b.n	800b7e8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b674:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	2b03      	cmp	r3, #3
 800b67c:	f000 8083 	beq.w	800b786 <get_fat+0x13c>
 800b680:	2b03      	cmp	r3, #3
 800b682:	f300 80a7 	bgt.w	800b7d4 <get_fat+0x18a>
 800b686:	2b01      	cmp	r3, #1
 800b688:	d002      	beq.n	800b690 <get_fat+0x46>
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	d056      	beq.n	800b73c <get_fat+0xf2>
 800b68e:	e0a1      	b.n	800b7d4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	60fb      	str	r3, [r7, #12]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	085b      	lsrs	r3, r3, #1
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	4413      	add	r3, r2
 800b69c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	899b      	ldrh	r3, [r3, #12]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6ae:	4413      	add	r3, r2
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	6938      	ldr	r0, [r7, #16]
 800b6b4:	f7ff ff0c 	bl	800b4d0 <move_window>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f040 808d 	bne.w	800b7da <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	1c5a      	adds	r2, r3, #1
 800b6c4:	60fa      	str	r2, [r7, #12]
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	8992      	ldrh	r2, [r2, #12]
 800b6ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6ce:	fb01 f202 	mul.w	r2, r1, r2
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b6dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	899b      	ldrh	r3, [r3, #12]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6ee:	4413      	add	r3, r2
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	6938      	ldr	r0, [r7, #16]
 800b6f4:	f7ff feec 	bl	800b4d0 <move_window>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d16f      	bne.n	800b7de <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	899b      	ldrh	r3, [r3, #12]
 800b702:	461a      	mov	r2, r3
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	fbb3 f1f2 	udiv	r1, r3, r2
 800b70a:	fb01 f202 	mul.w	r2, r1, r2
 800b70e:	1a9b      	subs	r3, r3, r2
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	4413      	add	r3, r2
 800b714:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b718:	021b      	lsls	r3, r3, #8
 800b71a:	461a      	mov	r2, r3
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	4313      	orrs	r3, r2
 800b720:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <get_fat+0xe8>
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	091b      	lsrs	r3, r3, #4
 800b730:	e002      	b.n	800b738 <get_fat+0xee>
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b738:	617b      	str	r3, [r7, #20]
			break;
 800b73a:	e055      	b.n	800b7e8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	899b      	ldrh	r3, [r3, #12]
 800b744:	085b      	lsrs	r3, r3, #1
 800b746:	b29b      	uxth	r3, r3
 800b748:	4619      	mov	r1, r3
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b750:	4413      	add	r3, r2
 800b752:	4619      	mov	r1, r3
 800b754:	6938      	ldr	r0, [r7, #16]
 800b756:	f7ff febb 	bl	800b4d0 <move_window>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d140      	bne.n	800b7e2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	8992      	ldrh	r2, [r2, #12]
 800b76e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b772:	fb00 f202 	mul.w	r2, r0, r2
 800b776:	1a9b      	subs	r3, r3, r2
 800b778:	440b      	add	r3, r1
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7ff fbc6 	bl	800af0c <ld_word>
 800b780:	4603      	mov	r3, r0
 800b782:	617b      	str	r3, [r7, #20]
			break;
 800b784:	e030      	b.n	800b7e8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	899b      	ldrh	r3, [r3, #12]
 800b78e:	089b      	lsrs	r3, r3, #2
 800b790:	b29b      	uxth	r3, r3
 800b792:	4619      	mov	r1, r3
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	fbb3 f3f1 	udiv	r3, r3, r1
 800b79a:	4413      	add	r3, r2
 800b79c:	4619      	mov	r1, r3
 800b79e:	6938      	ldr	r0, [r7, #16]
 800b7a0:	f7ff fe96 	bl	800b4d0 <move_window>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d11d      	bne.n	800b7e6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	693a      	ldr	r2, [r7, #16]
 800b7b6:	8992      	ldrh	r2, [r2, #12]
 800b7b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b7bc:	fb00 f202 	mul.w	r2, r0, r2
 800b7c0:	1a9b      	subs	r3, r3, r2
 800b7c2:	440b      	add	r3, r1
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7ff fbb9 	bl	800af3c <ld_dword>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b7d0:	617b      	str	r3, [r7, #20]
			break;
 800b7d2:	e009      	b.n	800b7e8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	e006      	b.n	800b7e8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7da:	bf00      	nop
 800b7dc:	e004      	b.n	800b7e8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7de:	bf00      	nop
 800b7e0:	e002      	b.n	800b7e8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b7e2:	bf00      	nop
 800b7e4:	e000      	b.n	800b7e8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b7e6:	bf00      	nop
		}
	}

	return val;
 800b7e8:	697b      	ldr	r3, [r7, #20]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3718      	adds	r7, #24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b7f2:	b590      	push	{r4, r7, lr}
 800b7f4:	b089      	sub	sp, #36	; 0x24
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	60f8      	str	r0, [r7, #12]
 800b7fa:	60b9      	str	r1, [r7, #8]
 800b7fc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b7fe:	2302      	movs	r3, #2
 800b800:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	2b01      	cmp	r3, #1
 800b806:	f240 8109 	bls.w	800ba1c <put_fat+0x22a>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	69db      	ldr	r3, [r3, #28]
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	429a      	cmp	r2, r3
 800b812:	f080 8103 	bcs.w	800ba1c <put_fat+0x22a>
		switch (fs->fs_type) {
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	f000 80b6 	beq.w	800b98c <put_fat+0x19a>
 800b820:	2b03      	cmp	r3, #3
 800b822:	f300 80fb 	bgt.w	800ba1c <put_fat+0x22a>
 800b826:	2b01      	cmp	r3, #1
 800b828:	d003      	beq.n	800b832 <put_fat+0x40>
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	f000 8083 	beq.w	800b936 <put_fat+0x144>
 800b830:	e0f4      	b.n	800ba1c <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	61bb      	str	r3, [r7, #24]
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	085b      	lsrs	r3, r3, #1
 800b83a:	69ba      	ldr	r2, [r7, #24]
 800b83c:	4413      	add	r3, r2
 800b83e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	899b      	ldrh	r3, [r3, #12]
 800b848:	4619      	mov	r1, r3
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b850:	4413      	add	r3, r2
 800b852:	4619      	mov	r1, r3
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f7ff fe3b 	bl	800b4d0 <move_window>
 800b85a:	4603      	mov	r3, r0
 800b85c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b85e:	7ffb      	ldrb	r3, [r7, #31]
 800b860:	2b00      	cmp	r3, #0
 800b862:	f040 80d4 	bne.w	800ba0e <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	1c5a      	adds	r2, r3, #1
 800b870:	61ba      	str	r2, [r7, #24]
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	8992      	ldrh	r2, [r2, #12]
 800b876:	fbb3 f0f2 	udiv	r0, r3, r2
 800b87a:	fb00 f202 	mul.w	r2, r0, r2
 800b87e:	1a9b      	subs	r3, r3, r2
 800b880:	440b      	add	r3, r1
 800b882:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	f003 0301 	and.w	r3, r3, #1
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00d      	beq.n	800b8aa <put_fat+0xb8>
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	b25b      	sxtb	r3, r3
 800b894:	f003 030f 	and.w	r3, r3, #15
 800b898:	b25a      	sxtb	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	011b      	lsls	r3, r3, #4
 800b8a0:	b25b      	sxtb	r3, r3
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	b25b      	sxtb	r3, r3
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	e001      	b.n	800b8ae <put_fat+0xbc>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	899b      	ldrh	r3, [r3, #12]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8c8:	4413      	add	r3, r2
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f7ff fdff 	bl	800b4d0 <move_window>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b8d6:	7ffb      	ldrb	r3, [r7, #31]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f040 809a 	bne.w	800ba12 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	899b      	ldrh	r3, [r3, #12]
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8f0:	fb00 f202 	mul.w	r2, r0, r2
 800b8f4:	1a9b      	subs	r3, r3, r2
 800b8f6:	440b      	add	r3, r1
 800b8f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	f003 0301 	and.w	r3, r3, #1
 800b900:	2b00      	cmp	r3, #0
 800b902:	d003      	beq.n	800b90c <put_fat+0x11a>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	091b      	lsrs	r3, r3, #4
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	e00e      	b.n	800b92a <put_fat+0x138>
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	b25b      	sxtb	r3, r3
 800b912:	f023 030f 	bic.w	r3, r3, #15
 800b916:	b25a      	sxtb	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	0a1b      	lsrs	r3, r3, #8
 800b91c:	b25b      	sxtb	r3, r3
 800b91e:	f003 030f 	and.w	r3, r3, #15
 800b922:	b25b      	sxtb	r3, r3
 800b924:	4313      	orrs	r3, r2
 800b926:	b25b      	sxtb	r3, r3
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	697a      	ldr	r2, [r7, #20]
 800b92c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2201      	movs	r2, #1
 800b932:	70da      	strb	r2, [r3, #3]
			break;
 800b934:	e072      	b.n	800ba1c <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	899b      	ldrh	r3, [r3, #12]
 800b93e:	085b      	lsrs	r3, r3, #1
 800b940:	b29b      	uxth	r3, r3
 800b942:	4619      	mov	r1, r3
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	fbb3 f3f1 	udiv	r3, r3, r1
 800b94a:	4413      	add	r3, r2
 800b94c:	4619      	mov	r1, r3
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f7ff fdbe 	bl	800b4d0 <move_window>
 800b954:	4603      	mov	r3, r0
 800b956:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b958:	7ffb      	ldrb	r3, [r7, #31]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d15b      	bne.n	800ba16 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	8992      	ldrh	r2, [r2, #12]
 800b96c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b970:	fb00 f202 	mul.w	r2, r0, r2
 800b974:	1a9b      	subs	r3, r3, r2
 800b976:	440b      	add	r3, r1
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	b292      	uxth	r2, r2
 800b97c:	4611      	mov	r1, r2
 800b97e:	4618      	mov	r0, r3
 800b980:	f7ff faff 	bl	800af82 <st_word>
			fs->wflag = 1;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2201      	movs	r2, #1
 800b988:	70da      	strb	r2, [r3, #3]
			break;
 800b98a:	e047      	b.n	800ba1c <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	899b      	ldrh	r3, [r3, #12]
 800b994:	089b      	lsrs	r3, r3, #2
 800b996:	b29b      	uxth	r3, r3
 800b998:	4619      	mov	r1, r3
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b9a0:	4413      	add	r3, r2
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f7ff fd93 	bl	800b4d0 <move_window>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9ae:	7ffb      	ldrb	r3, [r7, #31]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d132      	bne.n	800ba1a <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	8992      	ldrh	r2, [r2, #12]
 800b9c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9cc:	fb00 f202 	mul.w	r2, r0, r2
 800b9d0:	1a9b      	subs	r3, r3, r2
 800b9d2:	440b      	add	r3, r1
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7ff fab1 	bl	800af3c <ld_dword>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b9e0:	4323      	orrs	r3, r4
 800b9e2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	8992      	ldrh	r2, [r2, #12]
 800b9f2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9f6:	fb00 f202 	mul.w	r2, r0, r2
 800b9fa:	1a9b      	subs	r3, r3, r2
 800b9fc:	440b      	add	r3, r1
 800b9fe:	6879      	ldr	r1, [r7, #4]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7ff fad9 	bl	800afb8 <st_dword>
			fs->wflag = 1;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	70da      	strb	r2, [r3, #3]
			break;
 800ba0c:	e006      	b.n	800ba1c <put_fat+0x22a>
			if (res != FR_OK) break;
 800ba0e:	bf00      	nop
 800ba10:	e004      	b.n	800ba1c <put_fat+0x22a>
			if (res != FR_OK) break;
 800ba12:	bf00      	nop
 800ba14:	e002      	b.n	800ba1c <put_fat+0x22a>
			if (res != FR_OK) break;
 800ba16:	bf00      	nop
 800ba18:	e000      	b.n	800ba1c <put_fat+0x22a>
			if (res != FR_OK) break;
 800ba1a:	bf00      	nop
		}
	}
	return res;
 800ba1c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3724      	adds	r7, #36	; 0x24
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd90      	pop	{r4, r7, pc}

0800ba26 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b088      	sub	sp, #32
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	60f8      	str	r0, [r7, #12]
 800ba2e:	60b9      	str	r1, [r7, #8]
 800ba30:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d904      	bls.n	800ba4c <remove_chain+0x26>
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	69db      	ldr	r3, [r3, #28]
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d301      	bcc.n	800ba50 <remove_chain+0x2a>
 800ba4c:	2302      	movs	r3, #2
 800ba4e:	e04b      	b.n	800bae8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00c      	beq.n	800ba70 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ba56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba5a:	6879      	ldr	r1, [r7, #4]
 800ba5c:	69b8      	ldr	r0, [r7, #24]
 800ba5e:	f7ff fec8 	bl	800b7f2 <put_fat>
 800ba62:	4603      	mov	r3, r0
 800ba64:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ba66:	7ffb      	ldrb	r3, [r7, #31]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d001      	beq.n	800ba70 <remove_chain+0x4a>
 800ba6c:	7ffb      	ldrb	r3, [r7, #31]
 800ba6e:	e03b      	b.n	800bae8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ba70:	68b9      	ldr	r1, [r7, #8]
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f7ff fde9 	bl	800b64a <get_fat>
 800ba78:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d031      	beq.n	800bae4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d101      	bne.n	800ba8a <remove_chain+0x64>
 800ba86:	2302      	movs	r3, #2
 800ba88:	e02e      	b.n	800bae8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba90:	d101      	bne.n	800ba96 <remove_chain+0x70>
 800ba92:	2301      	movs	r3, #1
 800ba94:	e028      	b.n	800bae8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ba96:	2200      	movs	r2, #0
 800ba98:	68b9      	ldr	r1, [r7, #8]
 800ba9a:	69b8      	ldr	r0, [r7, #24]
 800ba9c:	f7ff fea9 	bl	800b7f2 <put_fat>
 800baa0:	4603      	mov	r3, r0
 800baa2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800baa4:	7ffb      	ldrb	r3, [r7, #31]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <remove_chain+0x88>
 800baaa:	7ffb      	ldrb	r3, [r7, #31]
 800baac:	e01c      	b.n	800bae8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	699a      	ldr	r2, [r3, #24]
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	69db      	ldr	r3, [r3, #28]
 800bab6:	3b02      	subs	r3, #2
 800bab8:	429a      	cmp	r2, r3
 800baba:	d20b      	bcs.n	800bad4 <remove_chain+0xae>
			fs->free_clst++;
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	699b      	ldr	r3, [r3, #24]
 800bac0:	1c5a      	adds	r2, r3, #1
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	791b      	ldrb	r3, [r3, #4]
 800baca:	f043 0301 	orr.w	r3, r3, #1
 800bace:	b2da      	uxtb	r2, r3
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	69db      	ldr	r3, [r3, #28]
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d3c6      	bcc.n	800ba70 <remove_chain+0x4a>
 800bae2:	e000      	b.n	800bae6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bae4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3720      	adds	r7, #32
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10d      	bne.n	800bb22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	695b      	ldr	r3, [r3, #20]
 800bb0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d004      	beq.n	800bb1c <create_chain+0x2c>
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	69db      	ldr	r3, [r3, #28]
 800bb16:	69ba      	ldr	r2, [r7, #24]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d31b      	bcc.n	800bb54 <create_chain+0x64>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	61bb      	str	r3, [r7, #24]
 800bb20:	e018      	b.n	800bb54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bb22:	6839      	ldr	r1, [r7, #0]
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7ff fd90 	bl	800b64a <get_fat>
 800bb2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d801      	bhi.n	800bb36 <create_chain+0x46>
 800bb32:	2301      	movs	r3, #1
 800bb34:	e070      	b.n	800bc18 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb3c:	d101      	bne.n	800bb42 <create_chain+0x52>
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	e06a      	b.n	800bc18 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	69db      	ldr	r3, [r3, #28]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d201      	bcs.n	800bb50 <create_chain+0x60>
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	e063      	b.n	800bc18 <create_chain+0x128>
		scl = clst;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	69db      	ldr	r3, [r3, #28]
 800bb62:	69fa      	ldr	r2, [r7, #28]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d307      	bcc.n	800bb78 <create_chain+0x88>
				ncl = 2;
 800bb68:	2302      	movs	r3, #2
 800bb6a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bb6c:	69fa      	ldr	r2, [r7, #28]
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d901      	bls.n	800bb78 <create_chain+0x88>
 800bb74:	2300      	movs	r3, #0
 800bb76:	e04f      	b.n	800bc18 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bb78:	69f9      	ldr	r1, [r7, #28]
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7ff fd65 	bl	800b64a <get_fat>
 800bb80:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00e      	beq.n	800bba6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d003      	beq.n	800bb96 <create_chain+0xa6>
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb94:	d101      	bne.n	800bb9a <create_chain+0xaa>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	e03e      	b.n	800bc18 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bb9a:	69fa      	ldr	r2, [r7, #28]
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d1da      	bne.n	800bb58 <create_chain+0x68>
 800bba2:	2300      	movs	r3, #0
 800bba4:	e038      	b.n	800bc18 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bba6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbac:	69f9      	ldr	r1, [r7, #28]
 800bbae:	6938      	ldr	r0, [r7, #16]
 800bbb0:	f7ff fe1f 	bl	800b7f2 <put_fat>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bbb8:	7dfb      	ldrb	r3, [r7, #23]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d109      	bne.n	800bbd2 <create_chain+0xe2>
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d006      	beq.n	800bbd2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bbc4:	69fa      	ldr	r2, [r7, #28]
 800bbc6:	6839      	ldr	r1, [r7, #0]
 800bbc8:	6938      	ldr	r0, [r7, #16]
 800bbca:	f7ff fe12 	bl	800b7f2 <put_fat>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bbd2:	7dfb      	ldrb	r3, [r7, #23]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d116      	bne.n	800bc06 <create_chain+0x116>
		fs->last_clst = ncl;
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	69fa      	ldr	r2, [r7, #28]
 800bbdc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	699a      	ldr	r2, [r3, #24]
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	3b02      	subs	r3, #2
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d804      	bhi.n	800bbf6 <create_chain+0x106>
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	699b      	ldr	r3, [r3, #24]
 800bbf0:	1e5a      	subs	r2, r3, #1
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	791b      	ldrb	r3, [r3, #4]
 800bbfa:	f043 0301 	orr.w	r3, r3, #1
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	711a      	strb	r2, [r3, #4]
 800bc04:	e007      	b.n	800bc16 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bc06:	7dfb      	ldrb	r3, [r7, #23]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d102      	bne.n	800bc12 <create_chain+0x122>
 800bc0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc10:	e000      	b.n	800bc14 <create_chain+0x124>
 800bc12:	2301      	movs	r3, #1
 800bc14:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bc16:	69fb      	ldr	r3, [r7, #28]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3720      	adds	r7, #32
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b087      	sub	sp, #28
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc34:	3304      	adds	r3, #4
 800bc36:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	899b      	ldrh	r3, [r3, #12]
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	8952      	ldrh	r2, [r2, #10]
 800bc48:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	1d1a      	adds	r2, r3, #4
 800bc52:	613a      	str	r2, [r7, #16]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <clmt_clust+0x42>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	e010      	b.n	800bc84 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d307      	bcc.n	800bc7a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800bc6a:	697a      	ldr	r2, [r7, #20]
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	1ad3      	subs	r3, r2, r3
 800bc70:	617b      	str	r3, [r7, #20]
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	3304      	adds	r3, #4
 800bc76:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bc78:	e7e9      	b.n	800bc4e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800bc7a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	4413      	add	r3, r2
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	371c      	adds	r7, #28
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bca6:	d204      	bcs.n	800bcb2 <dir_sdi+0x22>
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	f003 031f 	and.w	r3, r3, #31
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bcb2:	2302      	movs	r3, #2
 800bcb4:	e071      	b.n	800bd9a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	683a      	ldr	r2, [r7, #0]
 800bcba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d106      	bne.n	800bcd6 <dir_sdi+0x46>
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d902      	bls.n	800bcd6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10c      	bne.n	800bcf6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	095b      	lsrs	r3, r3, #5
 800bce0:	693a      	ldr	r2, [r7, #16]
 800bce2:	8912      	ldrh	r2, [r2, #8]
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d301      	bcc.n	800bcec <dir_sdi+0x5c>
 800bce8:	2302      	movs	r3, #2
 800bcea:	e056      	b.n	800bd9a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	61da      	str	r2, [r3, #28]
 800bcf4:	e02d      	b.n	800bd52 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	895b      	ldrh	r3, [r3, #10]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	899b      	ldrh	r3, [r3, #12]
 800bd00:	fb02 f303 	mul.w	r3, r2, r3
 800bd04:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bd06:	e019      	b.n	800bd3c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6979      	ldr	r1, [r7, #20]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7ff fc9c 	bl	800b64a <get_fat>
 800bd12:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd1a:	d101      	bne.n	800bd20 <dir_sdi+0x90>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e03c      	b.n	800bd9a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d904      	bls.n	800bd30 <dir_sdi+0xa0>
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	69db      	ldr	r3, [r3, #28]
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d301      	bcc.n	800bd34 <dir_sdi+0xa4>
 800bd30:	2302      	movs	r3, #2
 800bd32:	e032      	b.n	800bd9a <dir_sdi+0x10a>
			ofs -= csz;
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bd3c:	683a      	ldr	r2, [r7, #0]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d2e1      	bcs.n	800bd08 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800bd44:	6979      	ldr	r1, [r7, #20]
 800bd46:	6938      	ldr	r0, [r7, #16]
 800bd48:	f7ff fc60 	bl	800b60c <clust2sect>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	697a      	ldr	r2, [r7, #20]
 800bd56:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	69db      	ldr	r3, [r3, #28]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d101      	bne.n	800bd64 <dir_sdi+0xd4>
 800bd60:	2302      	movs	r3, #2
 800bd62:	e01a      	b.n	800bd9a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	69da      	ldr	r2, [r3, #28]
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	899b      	ldrh	r3, [r3, #12]
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd74:	441a      	add	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	899b      	ldrh	r3, [r3, #12]
 800bd84:	461a      	mov	r2, r3
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd8c:	fb00 f202 	mul.w	r2, r0, r2
 800bd90:	1a9b      	subs	r3, r3, r2
 800bd92:	18ca      	adds	r2, r1, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3718      	adds	r7, #24
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b086      	sub	sp, #24
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	695b      	ldr	r3, [r3, #20]
 800bdb6:	3320      	adds	r3, #32
 800bdb8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	69db      	ldr	r3, [r3, #28]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d003      	beq.n	800bdca <dir_next+0x28>
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdc8:	d301      	bcc.n	800bdce <dir_next+0x2c>
 800bdca:	2304      	movs	r3, #4
 800bdcc:	e0bb      	b.n	800bf46 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	899b      	ldrh	r3, [r3, #12]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdda:	fb01 f202 	mul.w	r2, r1, r2
 800bdde:	1a9b      	subs	r3, r3, r2
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f040 809d 	bne.w	800bf20 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	1c5a      	adds	r2, r3, #1
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10b      	bne.n	800be10 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	095b      	lsrs	r3, r3, #5
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	8912      	ldrh	r2, [r2, #8]
 800be00:	4293      	cmp	r3, r2
 800be02:	f0c0 808d 	bcc.w	800bf20 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	61da      	str	r2, [r3, #28]
 800be0c:	2304      	movs	r3, #4
 800be0e:	e09a      	b.n	800bf46 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	899b      	ldrh	r3, [r3, #12]
 800be14:	461a      	mov	r2, r3
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	fbb3 f3f2 	udiv	r3, r3, r2
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	8952      	ldrh	r2, [r2, #10]
 800be20:	3a01      	subs	r2, #1
 800be22:	4013      	ands	r3, r2
 800be24:	2b00      	cmp	r3, #0
 800be26:	d17b      	bne.n	800bf20 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	4619      	mov	r1, r3
 800be30:	4610      	mov	r0, r2
 800be32:	f7ff fc0a 	bl	800b64a <get_fat>
 800be36:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d801      	bhi.n	800be42 <dir_next+0xa0>
 800be3e:	2302      	movs	r3, #2
 800be40:	e081      	b.n	800bf46 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be48:	d101      	bne.n	800be4e <dir_next+0xac>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e07b      	b.n	800bf46 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	69db      	ldr	r3, [r3, #28]
 800be52:	697a      	ldr	r2, [r7, #20]
 800be54:	429a      	cmp	r2, r3
 800be56:	d359      	bcc.n	800bf0c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d104      	bne.n	800be68 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	61da      	str	r2, [r3, #28]
 800be64:	2304      	movs	r3, #4
 800be66:	e06e      	b.n	800bf46 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	699b      	ldr	r3, [r3, #24]
 800be6e:	4619      	mov	r1, r3
 800be70:	4610      	mov	r0, r2
 800be72:	f7ff fe3d 	bl	800baf0 <create_chain>
 800be76:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <dir_next+0xe0>
 800be7e:	2307      	movs	r3, #7
 800be80:	e061      	b.n	800bf46 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d101      	bne.n	800be8c <dir_next+0xea>
 800be88:	2302      	movs	r3, #2
 800be8a:	e05c      	b.n	800bf46 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be92:	d101      	bne.n	800be98 <dir_next+0xf6>
 800be94:	2301      	movs	r3, #1
 800be96:	e056      	b.n	800bf46 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f7ff fad5 	bl	800b448 <sync_window>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <dir_next+0x106>
 800bea4:	2301      	movs	r3, #1
 800bea6:	e04e      	b.n	800bf46 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	899b      	ldrh	r3, [r3, #12]
 800beb2:	461a      	mov	r2, r3
 800beb4:	2100      	movs	r1, #0
 800beb6:	f7ff f8cc 	bl	800b052 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800beba:	2300      	movs	r3, #0
 800bebc:	613b      	str	r3, [r7, #16]
 800bebe:	6979      	ldr	r1, [r7, #20]
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f7ff fba3 	bl	800b60c <clust2sect>
 800bec6:	4602      	mov	r2, r0
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	635a      	str	r2, [r3, #52]	; 0x34
 800becc:	e012      	b.n	800bef4 <dir_next+0x152>
						fs->wflag = 1;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2201      	movs	r2, #1
 800bed2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f7ff fab7 	bl	800b448 <sync_window>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <dir_next+0x142>
 800bee0:	2301      	movs	r3, #1
 800bee2:	e030      	b.n	800bf46 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	3301      	adds	r3, #1
 800bee8:	613b      	str	r3, [r7, #16]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beee:	1c5a      	adds	r2, r3, #1
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	635a      	str	r2, [r3, #52]	; 0x34
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	895b      	ldrh	r3, [r3, #10]
 800bef8:	461a      	mov	r2, r3
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	4293      	cmp	r3, r2
 800befe:	d3e6      	bcc.n	800bece <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	1ad2      	subs	r2, r2, r3
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	697a      	ldr	r2, [r7, #20]
 800bf10:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bf12:	6979      	ldr	r1, [r7, #20]
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f7ff fb79 	bl	800b60c <clust2sect>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	899b      	ldrh	r3, [r3, #12]
 800bf30:	461a      	mov	r2, r3
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf38:	fb00 f202 	mul.w	r2, r0, r2
 800bf3c:	1a9b      	subs	r3, r3, r2
 800bf3e:	18ca      	adds	r2, r1, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3718      	adds	r7, #24
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b086      	sub	sp, #24
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bf5e:	2100      	movs	r1, #0
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7ff fe95 	bl	800bc90 <dir_sdi>
 800bf66:	4603      	mov	r3, r0
 800bf68:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d12b      	bne.n	800bfc8 <dir_alloc+0x7a>
		n = 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	69db      	ldr	r3, [r3, #28]
 800bf78:	4619      	mov	r1, r3
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f7ff faa8 	bl	800b4d0 <move_window>
 800bf80:	4603      	mov	r3, r0
 800bf82:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bf84:	7dfb      	ldrb	r3, [r7, #23]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d11d      	bne.n	800bfc6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a1b      	ldr	r3, [r3, #32]
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	2be5      	cmp	r3, #229	; 0xe5
 800bf92:	d004      	beq.n	800bf9e <dir_alloc+0x50>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6a1b      	ldr	r3, [r3, #32]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d107      	bne.n	800bfae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	613b      	str	r3, [r7, #16]
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d102      	bne.n	800bfb2 <dir_alloc+0x64>
 800bfac:	e00c      	b.n	800bfc8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bfae:	2300      	movs	r3, #0
 800bfb0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f7ff fef4 	bl	800bda2 <dir_next>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bfbe:	7dfb      	ldrb	r3, [r7, #23]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d0d7      	beq.n	800bf74 <dir_alloc+0x26>
 800bfc4:	e000      	b.n	800bfc8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bfc6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bfc8:	7dfb      	ldrb	r3, [r7, #23]
 800bfca:	2b04      	cmp	r3, #4
 800bfcc:	d101      	bne.n	800bfd2 <dir_alloc+0x84>
 800bfce:	2307      	movs	r3, #7
 800bfd0:	75fb      	strb	r3, [r7, #23]
	return res;
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3718      	adds	r7, #24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	331a      	adds	r3, #26
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fe ff8e 	bl	800af0c <ld_word>
 800bff0:	4603      	mov	r3, r0
 800bff2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b03      	cmp	r3, #3
 800bffa:	d109      	bne.n	800c010 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	3314      	adds	r3, #20
 800c000:	4618      	mov	r0, r3
 800c002:	f7fe ff83 	bl	800af0c <ld_word>
 800c006:	4603      	mov	r3, r0
 800c008:	041b      	lsls	r3, r3, #16
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c010:	68fb      	ldr	r3, [r7, #12]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	af00      	add	r7, sp, #0
 800c020:	60f8      	str	r0, [r7, #12]
 800c022:	60b9      	str	r1, [r7, #8]
 800c024:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	331a      	adds	r3, #26
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	b292      	uxth	r2, r2
 800c02e:	4611      	mov	r1, r2
 800c030:	4618      	mov	r0, r3
 800c032:	f7fe ffa6 	bl	800af82 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	2b03      	cmp	r3, #3
 800c03c:	d109      	bne.n	800c052 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	f103 0214 	add.w	r2, r3, #20
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	0c1b      	lsrs	r3, r3, #16
 800c048:	b29b      	uxth	r3, r3
 800c04a:	4619      	mov	r1, r3
 800c04c:	4610      	mov	r0, r2
 800c04e:	f7fe ff98 	bl	800af82 <st_word>
	}
}
 800c052:	bf00      	nop
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b086      	sub	sp, #24
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c068:	2100      	movs	r1, #0
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7ff fe10 	bl	800bc90 <dir_sdi>
 800c070:	4603      	mov	r3, r0
 800c072:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c074:	7dfb      	ldrb	r3, [r7, #23]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <dir_find+0x24>
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	e03e      	b.n	800c0fc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	69db      	ldr	r3, [r3, #28]
 800c082:	4619      	mov	r1, r3
 800c084:	6938      	ldr	r0, [r7, #16]
 800c086:	f7ff fa23 	bl	800b4d0 <move_window>
 800c08a:	4603      	mov	r3, r0
 800c08c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d12f      	bne.n	800c0f4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d102      	bne.n	800c0a8 <dir_find+0x4e>
 800c0a2:	2304      	movs	r3, #4
 800c0a4:	75fb      	strb	r3, [r7, #23]
 800c0a6:	e028      	b.n	800c0fa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a1b      	ldr	r3, [r3, #32]
 800c0ac:	330b      	adds	r3, #11
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0b4:	b2da      	uxtb	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6a1b      	ldr	r3, [r3, #32]
 800c0be:	330b      	adds	r3, #11
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	f003 0308 	and.w	r3, r3, #8
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10a      	bne.n	800c0e0 <dir_find+0x86>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a18      	ldr	r0, [r3, #32]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	3324      	adds	r3, #36	; 0x24
 800c0d2:	220b      	movs	r2, #11
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	f7fe ffd7 	bl	800b088 <mem_cmp>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00b      	beq.n	800c0f8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7ff fe5d 	bl	800bda2 <dir_next>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c0ec:	7dfb      	ldrb	r3, [r7, #23]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d0c5      	beq.n	800c07e <dir_find+0x24>
 800c0f2:	e002      	b.n	800c0fa <dir_find+0xa0>
		if (res != FR_OK) break;
 800c0f4:	bf00      	nop
 800c0f6:	e000      	b.n	800c0fa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c0f8:	bf00      	nop

	return res;
 800c0fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c112:	2101      	movs	r1, #1
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7ff ff1a 	bl	800bf4e <dir_alloc>
 800c11a:	4603      	mov	r3, r0
 800c11c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c11e:	7bfb      	ldrb	r3, [r7, #15]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d11c      	bne.n	800c15e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	69db      	ldr	r3, [r3, #28]
 800c128:	4619      	mov	r1, r3
 800c12a:	68b8      	ldr	r0, [r7, #8]
 800c12c:	f7ff f9d0 	bl	800b4d0 <move_window>
 800c130:	4603      	mov	r3, r0
 800c132:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c134:	7bfb      	ldrb	r3, [r7, #15]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d111      	bne.n	800c15e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6a1b      	ldr	r3, [r3, #32]
 800c13e:	2220      	movs	r2, #32
 800c140:	2100      	movs	r1, #0
 800c142:	4618      	mov	r0, r3
 800c144:	f7fe ff85 	bl	800b052 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a18      	ldr	r0, [r3, #32]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	3324      	adds	r3, #36	; 0x24
 800c150:	220b      	movs	r2, #11
 800c152:	4619      	mov	r1, r3
 800c154:	f7fe ff5c 	bl	800b010 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	2201      	movs	r2, #1
 800c15c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	2200      	movs	r2, #0
 800c176:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	69db      	ldr	r3, [r3, #28]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d04e      	beq.n	800c21e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800c180:	2300      	movs	r3, #0
 800c182:	613b      	str	r3, [r7, #16]
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800c188:	e021      	b.n	800c1ce <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a1a      	ldr	r2, [r3, #32]
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	1c59      	adds	r1, r3, #1
 800c192:	6179      	str	r1, [r7, #20]
 800c194:	4413      	add	r3, r2
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c19a:	7bfb      	ldrb	r3, [r7, #15]
 800c19c:	2b20      	cmp	r3, #32
 800c19e:	d100      	bne.n	800c1a2 <get_fileinfo+0x3a>
 800c1a0:	e015      	b.n	800c1ce <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c1a2:	7bfb      	ldrb	r3, [r7, #15]
 800c1a4:	2b05      	cmp	r3, #5
 800c1a6:	d101      	bne.n	800c1ac <get_fileinfo+0x44>
 800c1a8:	23e5      	movs	r3, #229	; 0xe5
 800c1aa:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	2b09      	cmp	r3, #9
 800c1b0:	d106      	bne.n	800c1c0 <get_fileinfo+0x58>
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	1c5a      	adds	r2, r3, #1
 800c1b6:	613a      	str	r2, [r7, #16]
 800c1b8:	683a      	ldr	r2, [r7, #0]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	222e      	movs	r2, #46	; 0x2e
 800c1be:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	1c5a      	adds	r2, r3, #1
 800c1c4:	613a      	str	r2, [r7, #16]
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	7bfa      	ldrb	r2, [r7, #15]
 800c1cc:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	2b0a      	cmp	r3, #10
 800c1d2:	d9da      	bls.n	800c18a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800c1d4:	683a      	ldr	r2, [r7, #0]
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	4413      	add	r3, r2
 800c1da:	3309      	adds	r3, #9
 800c1dc:	2200      	movs	r2, #0
 800c1de:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6a1b      	ldr	r3, [r3, #32]
 800c1e4:	7ada      	ldrb	r2, [r3, #11]
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6a1b      	ldr	r3, [r3, #32]
 800c1ee:	331c      	adds	r3, #28
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fe fea3 	bl	800af3c <ld_dword>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a1b      	ldr	r3, [r3, #32]
 800c200:	3316      	adds	r3, #22
 800c202:	4618      	mov	r0, r3
 800c204:	f7fe fe9a 	bl	800af3c <ld_dword>
 800c208:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	80da      	strh	r2, [r3, #6]
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	0c1b      	lsrs	r3, r3, #16
 800c216:	b29a      	uxth	r2, r3
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	809a      	strh	r2, [r3, #4]
 800c21c:	e000      	b.n	800c220 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c21e:	bf00      	nop
}
 800c220:	3718      	adds	r7, #24
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
	...

0800c228 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b088      	sub	sp, #32
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	60fb      	str	r3, [r7, #12]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3324      	adds	r3, #36	; 0x24
 800c23c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c23e:	220b      	movs	r2, #11
 800c240:	2120      	movs	r1, #32
 800c242:	68b8      	ldr	r0, [r7, #8]
 800c244:	f7fe ff05 	bl	800b052 <mem_set>
	si = i = 0; ni = 8;
 800c248:	2300      	movs	r3, #0
 800c24a:	613b      	str	r3, [r7, #16]
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	61fb      	str	r3, [r7, #28]
 800c250:	2308      	movs	r3, #8
 800c252:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	1c5a      	adds	r2, r3, #1
 800c258:	61fa      	str	r2, [r7, #28]
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	4413      	add	r3, r2
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c262:	7efb      	ldrb	r3, [r7, #27]
 800c264:	2b20      	cmp	r3, #32
 800c266:	d94e      	bls.n	800c306 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c268:	7efb      	ldrb	r3, [r7, #27]
 800c26a:	2b2f      	cmp	r3, #47	; 0x2f
 800c26c:	d006      	beq.n	800c27c <create_name+0x54>
 800c26e:	7efb      	ldrb	r3, [r7, #27]
 800c270:	2b5c      	cmp	r3, #92	; 0x5c
 800c272:	d110      	bne.n	800c296 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c274:	e002      	b.n	800c27c <create_name+0x54>
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	3301      	adds	r3, #1
 800c27a:	61fb      	str	r3, [r7, #28]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	4413      	add	r3, r2
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b2f      	cmp	r3, #47	; 0x2f
 800c286:	d0f6      	beq.n	800c276 <create_name+0x4e>
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	4413      	add	r3, r2
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	2b5c      	cmp	r3, #92	; 0x5c
 800c292:	d0f0      	beq.n	800c276 <create_name+0x4e>
			break;
 800c294:	e038      	b.n	800c308 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c296:	7efb      	ldrb	r3, [r7, #27]
 800c298:	2b2e      	cmp	r3, #46	; 0x2e
 800c29a:	d003      	beq.n	800c2a4 <create_name+0x7c>
 800c29c:	693a      	ldr	r2, [r7, #16]
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d30c      	bcc.n	800c2be <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	2b0b      	cmp	r3, #11
 800c2a8:	d002      	beq.n	800c2b0 <create_name+0x88>
 800c2aa:	7efb      	ldrb	r3, [r7, #27]
 800c2ac:	2b2e      	cmp	r3, #46	; 0x2e
 800c2ae:	d001      	beq.n	800c2b4 <create_name+0x8c>
 800c2b0:	2306      	movs	r3, #6
 800c2b2:	e044      	b.n	800c33e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c2b4:	2308      	movs	r3, #8
 800c2b6:	613b      	str	r3, [r7, #16]
 800c2b8:	230b      	movs	r3, #11
 800c2ba:	617b      	str	r3, [r7, #20]
			continue;
 800c2bc:	e022      	b.n	800c304 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c2be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	da04      	bge.n	800c2d0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c2c6:	7efb      	ldrb	r3, [r7, #27]
 800c2c8:	3b80      	subs	r3, #128	; 0x80
 800c2ca:	4a1f      	ldr	r2, [pc, #124]	; (800c348 <create_name+0x120>)
 800c2cc:	5cd3      	ldrb	r3, [r2, r3]
 800c2ce:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c2d0:	7efb      	ldrb	r3, [r7, #27]
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	481d      	ldr	r0, [pc, #116]	; (800c34c <create_name+0x124>)
 800c2d6:	f7fe fefe 	bl	800b0d6 <chk_chr>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d001      	beq.n	800c2e4 <create_name+0xbc>
 800c2e0:	2306      	movs	r3, #6
 800c2e2:	e02c      	b.n	800c33e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c2e4:	7efb      	ldrb	r3, [r7, #27]
 800c2e6:	2b60      	cmp	r3, #96	; 0x60
 800c2e8:	d905      	bls.n	800c2f6 <create_name+0xce>
 800c2ea:	7efb      	ldrb	r3, [r7, #27]
 800c2ec:	2b7a      	cmp	r3, #122	; 0x7a
 800c2ee:	d802      	bhi.n	800c2f6 <create_name+0xce>
 800c2f0:	7efb      	ldrb	r3, [r7, #27]
 800c2f2:	3b20      	subs	r3, #32
 800c2f4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	1c5a      	adds	r2, r3, #1
 800c2fa:	613a      	str	r2, [r7, #16]
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	4413      	add	r3, r2
 800c300:	7efa      	ldrb	r2, [r7, #27]
 800c302:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c304:	e7a6      	b.n	800c254 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c306:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	441a      	add	r2, r3
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d101      	bne.n	800c31c <create_name+0xf4>
 800c318:	2306      	movs	r3, #6
 800c31a:	e010      	b.n	800c33e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	2be5      	cmp	r3, #229	; 0xe5
 800c322:	d102      	bne.n	800c32a <create_name+0x102>
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	2205      	movs	r2, #5
 800c328:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c32a:	7efb      	ldrb	r3, [r7, #27]
 800c32c:	2b20      	cmp	r3, #32
 800c32e:	d801      	bhi.n	800c334 <create_name+0x10c>
 800c330:	2204      	movs	r2, #4
 800c332:	e000      	b.n	800c336 <create_name+0x10e>
 800c334:	2200      	movs	r2, #0
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	330b      	adds	r3, #11
 800c33a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c33c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3720      	adds	r7, #32
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	0801fad8 	.word	0x0801fad8
 800c34c:	0801f930 	.word	0x0801f930

0800c350 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c364:	e002      	b.n	800c36c <follow_path+0x1c>
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	3301      	adds	r3, #1
 800c36a:	603b      	str	r3, [r7, #0]
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	2b2f      	cmp	r3, #47	; 0x2f
 800c372:	d0f8      	beq.n	800c366 <follow_path+0x16>
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	2b5c      	cmp	r3, #92	; 0x5c
 800c37a:	d0f4      	beq.n	800c366 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	2200      	movs	r2, #0
 800c380:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	2b1f      	cmp	r3, #31
 800c388:	d80a      	bhi.n	800c3a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2280      	movs	r2, #128	; 0x80
 800c38e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c392:	2100      	movs	r1, #0
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f7ff fc7b 	bl	800bc90 <dir_sdi>
 800c39a:	4603      	mov	r3, r0
 800c39c:	75fb      	strb	r3, [r7, #23]
 800c39e:	e048      	b.n	800c432 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c3a0:	463b      	mov	r3, r7
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f7ff ff3f 	bl	800c228 <create_name>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d139      	bne.n	800c428 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7ff fe50 	bl	800c05a <dir_find>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c3c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00a      	beq.n	800c3e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c3cc:	7dfb      	ldrb	r3, [r7, #23]
 800c3ce:	2b04      	cmp	r3, #4
 800c3d0:	d12c      	bne.n	800c42c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c3d2:	7afb      	ldrb	r3, [r7, #11]
 800c3d4:	f003 0304 	and.w	r3, r3, #4
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d127      	bne.n	800c42c <follow_path+0xdc>
 800c3dc:	2305      	movs	r3, #5
 800c3de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c3e0:	e024      	b.n	800c42c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c3e2:	7afb      	ldrb	r3, [r7, #11]
 800c3e4:	f003 0304 	and.w	r3, r3, #4
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d121      	bne.n	800c430 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	799b      	ldrb	r3, [r3, #6]
 800c3f0:	f003 0310 	and.w	r3, r3, #16
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d102      	bne.n	800c3fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c3f8:	2305      	movs	r3, #5
 800c3fa:	75fb      	strb	r3, [r7, #23]
 800c3fc:	e019      	b.n	800c432 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	8992      	ldrh	r2, [r2, #12]
 800c40c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c410:	fb00 f202 	mul.w	r2, r0, r2
 800c414:	1a9b      	subs	r3, r3, r2
 800c416:	440b      	add	r3, r1
 800c418:	4619      	mov	r1, r3
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f7ff fdde 	bl	800bfdc <ld_clust>
 800c420:	4602      	mov	r2, r0
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c426:	e7bb      	b.n	800c3a0 <follow_path+0x50>
			if (res != FR_OK) break;
 800c428:	bf00      	nop
 800c42a:	e002      	b.n	800c432 <follow_path+0xe2>
				break;
 800c42c:	bf00      	nop
 800c42e:	e000      	b.n	800c432 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c430:	bf00      	nop
			}
		}
	}

	return res;
 800c432:	7dfb      	ldrb	r3, [r7, #23]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b087      	sub	sp, #28
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c448:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d031      	beq.n	800c4b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	617b      	str	r3, [r7, #20]
 800c458:	e002      	b.n	800c460 <get_ldnumber+0x24>
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	3301      	adds	r3, #1
 800c45e:	617b      	str	r3, [r7, #20]
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	2b20      	cmp	r3, #32
 800c466:	d903      	bls.n	800c470 <get_ldnumber+0x34>
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b3a      	cmp	r3, #58	; 0x3a
 800c46e:	d1f4      	bne.n	800c45a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	2b3a      	cmp	r3, #58	; 0x3a
 800c476:	d11c      	bne.n	800c4b2 <get_ldnumber+0x76>
			tp = *path;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	1c5a      	adds	r2, r3, #1
 800c482:	60fa      	str	r2, [r7, #12]
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	3b30      	subs	r3, #48	; 0x30
 800c488:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	2b09      	cmp	r3, #9
 800c48e:	d80e      	bhi.n	800c4ae <get_ldnumber+0x72>
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	429a      	cmp	r2, r3
 800c496:	d10a      	bne.n	800c4ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d107      	bne.n	800c4ae <get_ldnumber+0x72>
					vol = (int)i;
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	617b      	str	r3, [r7, #20]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	697a      	ldr	r2, [r7, #20]
 800c4ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	e002      	b.n	800c4b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c4b6:	693b      	ldr	r3, [r7, #16]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	371c      	adds	r7, #28
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	70da      	strb	r2, [r3, #3]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4da:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7fe fff6 	bl	800b4d0 <move_window>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <check_fs+0x2a>
 800c4ea:	2304      	movs	r3, #4
 800c4ec:	e038      	b.n	800c560 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	3338      	adds	r3, #56	; 0x38
 800c4f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fe fd08 	bl	800af0c <ld_word>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	461a      	mov	r2, r3
 800c500:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c504:	429a      	cmp	r2, r3
 800c506:	d001      	beq.n	800c50c <check_fs+0x48>
 800c508:	2303      	movs	r3, #3
 800c50a:	e029      	b.n	800c560 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c512:	2be9      	cmp	r3, #233	; 0xe9
 800c514:	d009      	beq.n	800c52a <check_fs+0x66>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c51c:	2beb      	cmp	r3, #235	; 0xeb
 800c51e:	d11e      	bne.n	800c55e <check_fs+0x9a>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c526:	2b90      	cmp	r3, #144	; 0x90
 800c528:	d119      	bne.n	800c55e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	3338      	adds	r3, #56	; 0x38
 800c52e:	3336      	adds	r3, #54	; 0x36
 800c530:	4618      	mov	r0, r3
 800c532:	f7fe fd03 	bl	800af3c <ld_dword>
 800c536:	4603      	mov	r3, r0
 800c538:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c53c:	4a0a      	ldr	r2, [pc, #40]	; (800c568 <check_fs+0xa4>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d101      	bne.n	800c546 <check_fs+0x82>
 800c542:	2300      	movs	r3, #0
 800c544:	e00c      	b.n	800c560 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	3338      	adds	r3, #56	; 0x38
 800c54a:	3352      	adds	r3, #82	; 0x52
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7fe fcf5 	bl	800af3c <ld_dword>
 800c552:	4603      	mov	r3, r0
 800c554:	4a05      	ldr	r2, [pc, #20]	; (800c56c <check_fs+0xa8>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d101      	bne.n	800c55e <check_fs+0x9a>
 800c55a:	2300      	movs	r3, #0
 800c55c:	e000      	b.n	800c560 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c55e:	2302      	movs	r3, #2
}
 800c560:	4618      	mov	r0, r3
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	00544146 	.word	0x00544146
 800c56c:	33544146 	.word	0x33544146

0800c570 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b096      	sub	sp, #88	; 0x58
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	4613      	mov	r3, r2
 800c57c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	2200      	movs	r2, #0
 800c582:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f7ff ff59 	bl	800c43c <get_ldnumber>
 800c58a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c58e:	2b00      	cmp	r3, #0
 800c590:	da01      	bge.n	800c596 <find_volume+0x26>
 800c592:	230b      	movs	r3, #11
 800c594:	e26a      	b.n	800ca6c <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c596:	4aa3      	ldr	r2, [pc, #652]	; (800c824 <find_volume+0x2b4>)
 800c598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c59e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d101      	bne.n	800c5aa <find_volume+0x3a>
 800c5a6:	230c      	movs	r3, #12
 800c5a8:	e260      	b.n	800ca6c <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800c5aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5ac:	f7fe fdae 	bl	800b10c <lock_fs>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d101      	bne.n	800c5ba <find_volume+0x4a>
 800c5b6:	230f      	movs	r3, #15
 800c5b8:	e258      	b.n	800ca6c <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c5c0:	79fb      	ldrb	r3, [r7, #7]
 800c5c2:	f023 0301 	bic.w	r3, r3, #1
 800c5c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d01a      	beq.n	800c606 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800c5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d2:	785b      	ldrb	r3, [r3, #1]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fe fbfb 	bl	800add0 <disk_status>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c5e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5e4:	f003 0301 	and.w	r3, r3, #1
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10c      	bne.n	800c606 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c5ec:	79fb      	ldrb	r3, [r7, #7]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d007      	beq.n	800c602 <find_volume+0x92>
 800c5f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5f6:	f003 0304 	and.w	r3, r3, #4
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d001      	beq.n	800c602 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800c5fe:	230a      	movs	r3, #10
 800c600:	e234      	b.n	800ca6c <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800c602:	2300      	movs	r3, #0
 800c604:	e232      	b.n	800ca6c <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c608:	2200      	movs	r2, #0
 800c60a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c60e:	b2da      	uxtb	r2, r3
 800c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c612:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c616:	785b      	ldrb	r3, [r3, #1]
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fe fbf3 	bl	800ae04 <disk_initialize>
 800c61e:	4603      	mov	r3, r0
 800c620:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c624:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c630:	2303      	movs	r3, #3
 800c632:	e21b      	b.n	800ca6c <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c634:	79fb      	ldrb	r3, [r7, #7]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d007      	beq.n	800c64a <find_volume+0xda>
 800c63a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c63e:	f003 0304 	and.w	r3, r3, #4
 800c642:	2b00      	cmp	r3, #0
 800c644:	d001      	beq.n	800c64a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800c646:	230a      	movs	r3, #10
 800c648:	e210      	b.n	800ca6c <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64c:	7858      	ldrb	r0, [r3, #1]
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	330c      	adds	r3, #12
 800c652:	461a      	mov	r2, r3
 800c654:	2102      	movs	r1, #2
 800c656:	f7fe fc3b 	bl	800aed0 <disk_ioctl>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d001      	beq.n	800c664 <find_volume+0xf4>
 800c660:	2301      	movs	r3, #1
 800c662:	e203      	b.n	800ca6c <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c666:	899b      	ldrh	r3, [r3, #12]
 800c668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c66c:	d80d      	bhi.n	800c68a <find_volume+0x11a>
 800c66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c670:	899b      	ldrh	r3, [r3, #12]
 800c672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c676:	d308      	bcc.n	800c68a <find_volume+0x11a>
 800c678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67a:	899b      	ldrh	r3, [r3, #12]
 800c67c:	461a      	mov	r2, r3
 800c67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c680:	899b      	ldrh	r3, [r3, #12]
 800c682:	3b01      	subs	r3, #1
 800c684:	4013      	ands	r3, r2
 800c686:	2b00      	cmp	r3, #0
 800c688:	d001      	beq.n	800c68e <find_volume+0x11e>
 800c68a:	2301      	movs	r3, #1
 800c68c:	e1ee      	b.n	800ca6c <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c68e:	2300      	movs	r3, #0
 800c690:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c692:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c694:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c696:	f7ff ff15 	bl	800c4c4 <check_fs>
 800c69a:	4603      	mov	r3, r0
 800c69c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c6a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d149      	bne.n	800c73c <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	643b      	str	r3, [r7, #64]	; 0x40
 800c6ac:	e01e      	b.n	800c6ec <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c6b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6b6:	011b      	lsls	r3, r3, #4
 800c6b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c6bc:	4413      	add	r3, r2
 800c6be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d006      	beq.n	800c6d8 <find_volume+0x168>
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6cc:	3308      	adds	r3, #8
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fe fc34 	bl	800af3c <ld_dword>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	e000      	b.n	800c6da <find_volume+0x16a>
 800c6d8:	2200      	movs	r2, #0
 800c6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	3358      	adds	r3, #88	; 0x58
 800c6e0:	443b      	add	r3, r7
 800c6e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c6e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	643b      	str	r3, [r7, #64]	; 0x40
 800c6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	d9dd      	bls.n	800c6ae <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <find_volume+0x192>
 800c6fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6fe:	3b01      	subs	r3, #1
 800c700:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	3358      	adds	r3, #88	; 0x58
 800c708:	443b      	add	r3, r7
 800c70a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c70e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c712:	2b00      	cmp	r3, #0
 800c714:	d005      	beq.n	800c722 <find_volume+0x1b2>
 800c716:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c718:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c71a:	f7ff fed3 	bl	800c4c4 <check_fs>
 800c71e:	4603      	mov	r3, r0
 800c720:	e000      	b.n	800c724 <find_volume+0x1b4>
 800c722:	2303      	movs	r3, #3
 800c724:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d905      	bls.n	800c73c <find_volume+0x1cc>
 800c730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c732:	3301      	adds	r3, #1
 800c734:	643b      	str	r3, [r7, #64]	; 0x40
 800c736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c738:	2b03      	cmp	r3, #3
 800c73a:	d9e2      	bls.n	800c702 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c73c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c740:	2b04      	cmp	r3, #4
 800c742:	d101      	bne.n	800c748 <find_volume+0x1d8>
 800c744:	2301      	movs	r3, #1
 800c746:	e191      	b.n	800ca6c <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d901      	bls.n	800c754 <find_volume+0x1e4>
 800c750:	230d      	movs	r3, #13
 800c752:	e18b      	b.n	800ca6c <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c756:	3338      	adds	r3, #56	; 0x38
 800c758:	330b      	adds	r3, #11
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe fbd6 	bl	800af0c <ld_word>
 800c760:	4603      	mov	r3, r0
 800c762:	461a      	mov	r2, r3
 800c764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c766:	899b      	ldrh	r3, [r3, #12]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d001      	beq.n	800c770 <find_volume+0x200>
 800c76c:	230d      	movs	r3, #13
 800c76e:	e17d      	b.n	800ca6c <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c772:	3338      	adds	r3, #56	; 0x38
 800c774:	3316      	adds	r3, #22
 800c776:	4618      	mov	r0, r3
 800c778:	f7fe fbc8 	bl	800af0c <ld_word>
 800c77c:	4603      	mov	r3, r0
 800c77e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c782:	2b00      	cmp	r3, #0
 800c784:	d106      	bne.n	800c794 <find_volume+0x224>
 800c786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c788:	3338      	adds	r3, #56	; 0x38
 800c78a:	3324      	adds	r3, #36	; 0x24
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7fe fbd5 	bl	800af3c <ld_dword>
 800c792:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c798:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a6:	789b      	ldrb	r3, [r3, #2]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d005      	beq.n	800c7b8 <find_volume+0x248>
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ae:	789b      	ldrb	r3, [r3, #2]
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d001      	beq.n	800c7b8 <find_volume+0x248>
 800c7b4:	230d      	movs	r3, #13
 800c7b6:	e159      	b.n	800ca6c <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	789b      	ldrb	r3, [r3, #2]
 800c7bc:	461a      	mov	r2, r3
 800c7be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7c0:	fb02 f303 	mul.w	r3, r2, r3
 800c7c4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d4:	895b      	ldrh	r3, [r3, #10]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d008      	beq.n	800c7ec <find_volume+0x27c>
 800c7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7dc:	895b      	ldrh	r3, [r3, #10]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e2:	895b      	ldrh	r3, [r3, #10]
 800c7e4:	3b01      	subs	r3, #1
 800c7e6:	4013      	ands	r3, r2
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d001      	beq.n	800c7f0 <find_volume+0x280>
 800c7ec:	230d      	movs	r3, #13
 800c7ee:	e13d      	b.n	800ca6c <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f2:	3338      	adds	r3, #56	; 0x38
 800c7f4:	3311      	adds	r3, #17
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe fb88 	bl	800af0c <ld_word>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	461a      	mov	r2, r3
 800c800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c802:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c806:	891b      	ldrh	r3, [r3, #8]
 800c808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c80a:	8992      	ldrh	r2, [r2, #12]
 800c80c:	0952      	lsrs	r2, r2, #5
 800c80e:	b292      	uxth	r2, r2
 800c810:	fbb3 f1f2 	udiv	r1, r3, r2
 800c814:	fb01 f202 	mul.w	r2, r1, r2
 800c818:	1a9b      	subs	r3, r3, r2
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <find_volume+0x2b8>
 800c820:	230d      	movs	r3, #13
 800c822:	e123      	b.n	800ca6c <find_volume+0x4fc>
 800c824:	200049ac 	.word	0x200049ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82a:	3338      	adds	r3, #56	; 0x38
 800c82c:	3313      	adds	r3, #19
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fe fb6c 	bl	800af0c <ld_word>
 800c834:	4603      	mov	r3, r0
 800c836:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d106      	bne.n	800c84c <find_volume+0x2dc>
 800c83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c840:	3338      	adds	r3, #56	; 0x38
 800c842:	3320      	adds	r3, #32
 800c844:	4618      	mov	r0, r3
 800c846:	f7fe fb79 	bl	800af3c <ld_dword>
 800c84a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84e:	3338      	adds	r3, #56	; 0x38
 800c850:	330e      	adds	r3, #14
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe fb5a 	bl	800af0c <ld_word>
 800c858:	4603      	mov	r3, r0
 800c85a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c85c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d101      	bne.n	800c866 <find_volume+0x2f6>
 800c862:	230d      	movs	r3, #13
 800c864:	e102      	b.n	800ca6c <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c866:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c86a:	4413      	add	r3, r2
 800c86c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c86e:	8911      	ldrh	r1, [r2, #8]
 800c870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c872:	8992      	ldrh	r2, [r2, #12]
 800c874:	0952      	lsrs	r2, r2, #5
 800c876:	b292      	uxth	r2, r2
 800c878:	fbb1 f2f2 	udiv	r2, r1, r2
 800c87c:	b292      	uxth	r2, r2
 800c87e:	4413      	add	r3, r2
 800c880:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c886:	429a      	cmp	r2, r3
 800c888:	d201      	bcs.n	800c88e <find_volume+0x31e>
 800c88a:	230d      	movs	r3, #13
 800c88c:	e0ee      	b.n	800ca6c <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c88e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c896:	8952      	ldrh	r2, [r2, #10]
 800c898:	fbb3 f3f2 	udiv	r3, r3, r2
 800c89c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d101      	bne.n	800c8a8 <find_volume+0x338>
 800c8a4:	230d      	movs	r3, #13
 800c8a6:	e0e1      	b.n	800ca6c <find_volume+0x4fc>
		fmt = FS_FAT32;
 800c8a8:	2303      	movs	r3, #3
 800c8aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d802      	bhi.n	800c8be <find_volume+0x34e>
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d802      	bhi.n	800c8ce <find_volume+0x35e>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d0:	1c9a      	adds	r2, r3, #2
 800c8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8da:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c8dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8e0:	441a      	add	r2, r3
 800c8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c8e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ea:	441a      	add	r2, r3
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c8f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c8f4:	2b03      	cmp	r3, #3
 800c8f6:	d11e      	bne.n	800c936 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fa:	3338      	adds	r3, #56	; 0x38
 800c8fc:	332a      	adds	r3, #42	; 0x2a
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fe fb04 	bl	800af0c <ld_word>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d001      	beq.n	800c90e <find_volume+0x39e>
 800c90a:	230d      	movs	r3, #13
 800c90c:	e0ae      	b.n	800ca6c <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c910:	891b      	ldrh	r3, [r3, #8]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d001      	beq.n	800c91a <find_volume+0x3aa>
 800c916:	230d      	movs	r3, #13
 800c918:	e0a8      	b.n	800ca6c <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91c:	3338      	adds	r3, #56	; 0x38
 800c91e:	332c      	adds	r3, #44	; 0x2c
 800c920:	4618      	mov	r0, r3
 800c922:	f7fe fb0b 	bl	800af3c <ld_dword>
 800c926:	4602      	mov	r2, r0
 800c928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92e:	69db      	ldr	r3, [r3, #28]
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	647b      	str	r3, [r7, #68]	; 0x44
 800c934:	e01f      	b.n	800c976 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c938:	891b      	ldrh	r3, [r3, #8]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <find_volume+0x3d2>
 800c93e:	230d      	movs	r3, #13
 800c940:	e094      	b.n	800ca6c <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c948:	441a      	add	r2, r3
 800c94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c94e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c952:	2b02      	cmp	r3, #2
 800c954:	d103      	bne.n	800c95e <find_volume+0x3ee>
 800c956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c958:	69db      	ldr	r3, [r3, #28]
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	e00a      	b.n	800c974 <find_volume+0x404>
 800c95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c960:	69da      	ldr	r2, [r3, #28]
 800c962:	4613      	mov	r3, r2
 800c964:	005b      	lsls	r3, r3, #1
 800c966:	4413      	add	r3, r2
 800c968:	085a      	lsrs	r2, r3, #1
 800c96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96c:	69db      	ldr	r3, [r3, #28]
 800c96e:	f003 0301 	and.w	r3, r3, #1
 800c972:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c974:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c978:	6a1a      	ldr	r2, [r3, #32]
 800c97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97c:	899b      	ldrh	r3, [r3, #12]
 800c97e:	4619      	mov	r1, r3
 800c980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c982:	440b      	add	r3, r1
 800c984:	3b01      	subs	r3, #1
 800c986:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c988:	8989      	ldrh	r1, [r1, #12]
 800c98a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c98e:	429a      	cmp	r2, r3
 800c990:	d201      	bcs.n	800c996 <find_volume+0x426>
 800c992:	230d      	movs	r3, #13
 800c994:	e06a      	b.n	800ca6c <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c99c:	619a      	str	r2, [r3, #24]
 800c99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a0:	699a      	ldr	r2, [r3, #24]
 800c9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a8:	2280      	movs	r2, #128	; 0x80
 800c9aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c9ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9b0:	2b03      	cmp	r3, #3
 800c9b2:	d149      	bne.n	800ca48 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b6:	3338      	adds	r3, #56	; 0x38
 800c9b8:	3330      	adds	r3, #48	; 0x30
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7fe faa6 	bl	800af0c <ld_word>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d140      	bne.n	800ca48 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9ce:	f7fe fd7f 	bl	800b4d0 <move_window>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d137      	bne.n	800ca48 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800c9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9da:	2200      	movs	r2, #0
 800c9dc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e0:	3338      	adds	r3, #56	; 0x38
 800c9e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fe fa90 	bl	800af0c <ld_word>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d127      	bne.n	800ca48 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	3338      	adds	r3, #56	; 0x38
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7fe fa9d 	bl	800af3c <ld_dword>
 800ca02:	4603      	mov	r3, r0
 800ca04:	4a1b      	ldr	r2, [pc, #108]	; (800ca74 <find_volume+0x504>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d11e      	bne.n	800ca48 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0c:	3338      	adds	r3, #56	; 0x38
 800ca0e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fe fa92 	bl	800af3c <ld_dword>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	4a17      	ldr	r2, [pc, #92]	; (800ca78 <find_volume+0x508>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d113      	bne.n	800ca48 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ca20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca22:	3338      	adds	r3, #56	; 0x38
 800ca24:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fe fa87 	bl	800af3c <ld_dword>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca32:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	3338      	adds	r3, #56	; 0x38
 800ca38:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7fe fa7d 	bl	800af3c <ld_dword>
 800ca42:	4602      	mov	r2, r0
 800ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca46:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ca4e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ca50:	4b0a      	ldr	r3, [pc, #40]	; (800ca7c <find_volume+0x50c>)
 800ca52:	881b      	ldrh	r3, [r3, #0]
 800ca54:	3301      	adds	r3, #1
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	4b08      	ldr	r3, [pc, #32]	; (800ca7c <find_volume+0x50c>)
 800ca5a:	801a      	strh	r2, [r3, #0]
 800ca5c:	4b07      	ldr	r3, [pc, #28]	; (800ca7c <find_volume+0x50c>)
 800ca5e:	881a      	ldrh	r2, [r3, #0]
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ca64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca66:	f7fe fccb 	bl	800b400 <clear_lock>
#endif
	return FR_OK;
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3758      	adds	r7, #88	; 0x58
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	41615252 	.word	0x41615252
 800ca78:	61417272 	.word	0x61417272
 800ca7c:	200049b0 	.word	0x200049b0

0800ca80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ca8a:	2309      	movs	r3, #9
 800ca8c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d02e      	beq.n	800caf2 <validate+0x72>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d02a      	beq.n	800caf2 <validate+0x72>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d025      	beq.n	800caf2 <validate+0x72>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	889a      	ldrh	r2, [r3, #4]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	88db      	ldrh	r3, [r3, #6]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d11e      	bne.n	800caf2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4618      	mov	r0, r3
 800caba:	f7fe fb27 	bl	800b10c <lock_fs>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d014      	beq.n	800caee <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	785b      	ldrb	r3, [r3, #1]
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fe f980 	bl	800add0 <disk_status>
 800cad0:	4603      	mov	r3, r0
 800cad2:	f003 0301 	and.w	r3, r3, #1
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d102      	bne.n	800cae0 <validate+0x60>
				res = FR_OK;
 800cada:	2300      	movs	r3, #0
 800cadc:	73fb      	strb	r3, [r7, #15]
 800cade:	e008      	b.n	800caf2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2100      	movs	r1, #0
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fe fb26 	bl	800b138 <unlock_fs>
 800caec:	e001      	b.n	800caf2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800caee:	230f      	movs	r3, #15
 800caf0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800caf2:	7bfb      	ldrb	r3, [r7, #15]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d102      	bne.n	800cafe <validate+0x7e>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	e000      	b.n	800cb00 <validate+0x80>
 800cafe:	2300      	movs	r3, #0
 800cb00:	683a      	ldr	r2, [r7, #0]
 800cb02:	6013      	str	r3, [r2, #0]
	return res;
 800cb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b088      	sub	sp, #32
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cb22:	f107 0310 	add.w	r3, r7, #16
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7ff fc88 	bl	800c43c <get_ldnumber>
 800cb2c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	da01      	bge.n	800cb38 <f_mount+0x28>
 800cb34:	230b      	movs	r3, #11
 800cb36:	e048      	b.n	800cbca <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cb38:	4a26      	ldr	r2, [pc, #152]	; (800cbd4 <f_mount+0xc4>)
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb40:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00f      	beq.n	800cb68 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cb48:	69b8      	ldr	r0, [r7, #24]
 800cb4a:	f7fe fc59 	bl	800b400 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 fe00 	bl	800d758 <ff_del_syncobj>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d101      	bne.n	800cb62 <f_mount+0x52>
 800cb5e:	2302      	movs	r3, #2
 800cb60:	e033      	b.n	800cbca <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	2200      	movs	r2, #0
 800cb66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00f      	beq.n	800cb8e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2200      	movs	r2, #0
 800cb72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	3310      	adds	r3, #16
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	4610      	mov	r0, r2
 800cb80:	f000 fdcf 	bl	800d722 <ff_cre_syncobj>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d101      	bne.n	800cb8e <f_mount+0x7e>
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	e01d      	b.n	800cbca <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cb8e:	68fa      	ldr	r2, [r7, #12]
 800cb90:	4910      	ldr	r1, [pc, #64]	; (800cbd4 <f_mount+0xc4>)
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d002      	beq.n	800cba4 <f_mount+0x94>
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d001      	beq.n	800cba8 <f_mount+0x98>
 800cba4:	2300      	movs	r3, #0
 800cba6:	e010      	b.n	800cbca <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cba8:	f107 010c 	add.w	r1, r7, #12
 800cbac:	f107 0308 	add.w	r3, r7, #8
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7ff fcdc 	bl	800c570 <find_volume>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	7dfa      	ldrb	r2, [r7, #23]
 800cbc0:	4611      	mov	r1, r2
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7fe fab8 	bl	800b138 <unlock_fs>
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3720      	adds	r7, #32
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	200049ac 	.word	0x200049ac

0800cbd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b098      	sub	sp, #96	; 0x60
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d101      	bne.n	800cbf0 <f_open+0x18>
 800cbec:	2309      	movs	r3, #9
 800cbee:	e1c2      	b.n	800cf76 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cbf0:	79fb      	ldrb	r3, [r7, #7]
 800cbf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbf6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cbf8:	79fa      	ldrb	r2, [r7, #7]
 800cbfa:	f107 0110 	add.w	r1, r7, #16
 800cbfe:	f107 0308 	add.w	r3, r7, #8
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7ff fcb4 	bl	800c570 <find_volume>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800cc0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f040 819f 	bne.w	800cf56 <f_open+0x37e>
		dj.obj.fs = fs;
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cc1c:	68ba      	ldr	r2, [r7, #8]
 800cc1e:	f107 0314 	add.w	r3, r7, #20
 800cc22:	4611      	mov	r1, r2
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7ff fb93 	bl	800c350 <follow_path>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cc30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d11a      	bne.n	800cc6e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cc38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc3c:	b25b      	sxtb	r3, r3
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	da03      	bge.n	800cc4a <f_open+0x72>
				res = FR_INVALID_NAME;
 800cc42:	2306      	movs	r3, #6
 800cc44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cc48:	e011      	b.n	800cc6e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cc4a:	79fb      	ldrb	r3, [r7, #7]
 800cc4c:	f023 0301 	bic.w	r3, r3, #1
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	bf14      	ite	ne
 800cc54:	2301      	movne	r3, #1
 800cc56:	2300      	moveq	r3, #0
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	f107 0314 	add.w	r3, r7, #20
 800cc60:	4611      	mov	r1, r2
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fe fa84 	bl	800b170 <chk_lock>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cc6e:	79fb      	ldrb	r3, [r7, #7]
 800cc70:	f003 031c 	and.w	r3, r3, #28
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d07f      	beq.n	800cd78 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cc78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d017      	beq.n	800ccb0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cc80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc84:	2b04      	cmp	r3, #4
 800cc86:	d10e      	bne.n	800cca6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cc88:	f7fe face 	bl	800b228 <enq_lock>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d006      	beq.n	800cca0 <f_open+0xc8>
 800cc92:	f107 0314 	add.w	r3, r7, #20
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7ff fa34 	bl	800c104 <dir_register>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	e000      	b.n	800cca2 <f_open+0xca>
 800cca0:	2312      	movs	r3, #18
 800cca2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cca6:	79fb      	ldrb	r3, [r7, #7]
 800cca8:	f043 0308 	orr.w	r3, r3, #8
 800ccac:	71fb      	strb	r3, [r7, #7]
 800ccae:	e010      	b.n	800ccd2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ccb0:	7ebb      	ldrb	r3, [r7, #26]
 800ccb2:	f003 0311 	and.w	r3, r3, #17
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d003      	beq.n	800ccc2 <f_open+0xea>
					res = FR_DENIED;
 800ccba:	2307      	movs	r3, #7
 800ccbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ccc0:	e007      	b.n	800ccd2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ccc2:	79fb      	ldrb	r3, [r7, #7]
 800ccc4:	f003 0304 	and.w	r3, r3, #4
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d002      	beq.n	800ccd2 <f_open+0xfa>
 800cccc:	2308      	movs	r3, #8
 800ccce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ccd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d168      	bne.n	800cdac <f_open+0x1d4>
 800ccda:	79fb      	ldrb	r3, [r7, #7]
 800ccdc:	f003 0308 	and.w	r3, r3, #8
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d063      	beq.n	800cdac <f_open+0x1d4>
				dw = GET_FATTIME();
 800cce4:	f7fe f816 	bl	800ad14 <get_fattime>
 800cce8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ccea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccec:	330e      	adds	r3, #14
 800ccee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7fe f961 	bl	800afb8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ccf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf8:	3316      	adds	r3, #22
 800ccfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fe f95b 	bl	800afb8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cd02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd04:	330b      	adds	r3, #11
 800cd06:	2220      	movs	r2, #32
 800cd08:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd0e:	4611      	mov	r1, r2
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7ff f963 	bl	800bfdc <ld_clust>
 800cd16:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7ff f97b 	bl	800c01a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd26:	331c      	adds	r3, #28
 800cd28:	2100      	movs	r1, #0
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fe f944 	bl	800afb8 <st_dword>
					fs->wflag = 1;
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	2201      	movs	r2, #1
 800cd34:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cd36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d037      	beq.n	800cdac <f_open+0x1d4>
						dw = fs->winsect;
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd40:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cd42:	f107 0314 	add.w	r3, r7, #20
 800cd46:	2200      	movs	r2, #0
 800cd48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fe fe6b 	bl	800ba26 <remove_chain>
 800cd50:	4603      	mov	r3, r0
 800cd52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800cd56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d126      	bne.n	800cdac <f_open+0x1d4>
							res = move_window(fs, dw);
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7fe fbb4 	bl	800b4d0 <move_window>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd72:	3a01      	subs	r2, #1
 800cd74:	615a      	str	r2, [r3, #20]
 800cd76:	e019      	b.n	800cdac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cd78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d115      	bne.n	800cdac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cd80:	7ebb      	ldrb	r3, [r7, #26]
 800cd82:	f003 0310 	and.w	r3, r3, #16
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d003      	beq.n	800cd92 <f_open+0x1ba>
					res = FR_NO_FILE;
 800cd8a:	2304      	movs	r3, #4
 800cd8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cd90:	e00c      	b.n	800cdac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cd92:	79fb      	ldrb	r3, [r7, #7]
 800cd94:	f003 0302 	and.w	r3, r3, #2
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d007      	beq.n	800cdac <f_open+0x1d4>
 800cd9c:	7ebb      	ldrb	r3, [r7, #26]
 800cd9e:	f003 0301 	and.w	r3, r3, #1
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d002      	beq.n	800cdac <f_open+0x1d4>
						res = FR_DENIED;
 800cda6:	2307      	movs	r3, #7
 800cda8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cdac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d128      	bne.n	800ce06 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cdb4:	79fb      	ldrb	r3, [r7, #7]
 800cdb6:	f003 0308 	and.w	r3, r3, #8
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d003      	beq.n	800cdc6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cdbe:	79fb      	ldrb	r3, [r7, #7]
 800cdc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdc4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cdce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cdd4:	79fb      	ldrb	r3, [r7, #7]
 800cdd6:	f023 0301 	bic.w	r3, r3, #1
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	bf14      	ite	ne
 800cdde:	2301      	movne	r3, #1
 800cde0:	2300      	moveq	r3, #0
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	461a      	mov	r2, r3
 800cde6:	f107 0314 	add.w	r3, r7, #20
 800cdea:	4611      	mov	r1, r2
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7fe fa3d 	bl	800b26c <inc_lock>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	691b      	ldr	r3, [r3, #16]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d102      	bne.n	800ce06 <f_open+0x22e>
 800ce00:	2302      	movs	r3, #2
 800ce02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ce06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	f040 80a3 	bne.w	800cf56 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce14:	4611      	mov	r1, r2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff f8e0 	bl	800bfdc <ld_clust>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ce22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce24:	331c      	adds	r3, #28
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fe f888 	bl	800af3c <ld_dword>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2200      	movs	r2, #0
 800ce36:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ce38:	693a      	ldr	r2, [r7, #16]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	88da      	ldrh	r2, [r3, #6]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	79fa      	ldrb	r2, [r7, #7]
 800ce4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2200      	movs	r2, #0
 800ce56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	3330      	adds	r3, #48	; 0x30
 800ce62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ce66:	2100      	movs	r1, #0
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7fe f8f2 	bl	800b052 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ce6e:	79fb      	ldrb	r3, [r7, #7]
 800ce70:	f003 0320 	and.w	r3, r3, #32
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d06e      	beq.n	800cf56 <f_open+0x37e>
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d06a      	beq.n	800cf56 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	68da      	ldr	r2, [r3, #12]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	895b      	ldrh	r3, [r3, #10]
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	899b      	ldrh	r3, [r3, #12]
 800ce92:	fb02 f303 	mul.w	r3, r2, r3
 800ce96:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	657b      	str	r3, [r7, #84]	; 0x54
 800cea4:	e016      	b.n	800ced4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fe fbcd 	bl	800b64a <get_fat>
 800ceb0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ceb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d802      	bhi.n	800cebe <f_open+0x2e6>
 800ceb8:	2302      	movs	r3, #2
 800ceba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cec4:	d102      	bne.n	800cecc <f_open+0x2f4>
 800cec6:	2301      	movs	r3, #1
 800cec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cecc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ced0:	1ad3      	subs	r3, r2, r3
 800ced2:	657b      	str	r3, [r7, #84]	; 0x54
 800ced4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d103      	bne.n	800cee4 <f_open+0x30c>
 800cedc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d8e0      	bhi.n	800cea6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cee8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ceea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d131      	bne.n	800cf56 <f_open+0x37e>
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	899b      	ldrh	r3, [r3, #12]
 800cef6:	461a      	mov	r2, r3
 800cef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cefa:	fbb3 f1f2 	udiv	r1, r3, r2
 800cefe:	fb01 f202 	mul.w	r2, r1, r2
 800cf02:	1a9b      	subs	r3, r3, r2
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d026      	beq.n	800cf56 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fe fb7d 	bl	800b60c <clust2sect>
 800cf12:	6478      	str	r0, [r7, #68]	; 0x44
 800cf14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d103      	bne.n	800cf22 <f_open+0x34a>
						res = FR_INT_ERR;
 800cf1a:	2302      	movs	r3, #2
 800cf1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cf20:	e019      	b.n	800cf56 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	899b      	ldrh	r3, [r3, #12]
 800cf26:	461a      	mov	r2, r3
 800cf28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf30:	441a      	add	r2, r3
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	7858      	ldrb	r0, [r3, #1]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6a1a      	ldr	r2, [r3, #32]
 800cf44:	2301      	movs	r3, #1
 800cf46:	f7fd ff83 	bl	800ae50 <disk_read>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <f_open+0x37e>
 800cf50:	2301      	movs	r3, #1
 800cf52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cf56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d002      	beq.n	800cf64 <f_open+0x38c>
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2200      	movs	r2, #0
 800cf62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800cf6a:	4611      	mov	r1, r2
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7fe f8e3 	bl	800b138 <unlock_fs>
 800cf72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3760      	adds	r7, #96	; 0x60
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b08c      	sub	sp, #48	; 0x30
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	60f8      	str	r0, [r7, #12]
 800cf86:	60b9      	str	r1, [r7, #8]
 800cf88:	607a      	str	r2, [r7, #4]
 800cf8a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	2200      	movs	r2, #0
 800cf94:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f107 0210 	add.w	r2, r7, #16
 800cf9c:	4611      	mov	r1, r2
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7ff fd6e 	bl	800ca80 <validate>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cfaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d107      	bne.n	800cfc2 <f_write+0x44>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	7d5b      	ldrb	r3, [r3, #21]
 800cfb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cfba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d009      	beq.n	800cfd6 <f_write+0x58>
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cfc8:	4611      	mov	r1, r2
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7fe f8b4 	bl	800b138 <unlock_fs>
 800cfd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfd4:	e192      	b.n	800d2fc <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	7d1b      	ldrb	r3, [r3, #20]
 800cfda:	f003 0302 	and.w	r3, r3, #2
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d106      	bne.n	800cff0 <f_write+0x72>
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	2107      	movs	r1, #7
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fe f8a6 	bl	800b138 <unlock_fs>
 800cfec:	2307      	movs	r3, #7
 800cfee:	e185      	b.n	800d2fc <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	699a      	ldr	r2, [r3, #24]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	441a      	add	r2, r3
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	699b      	ldr	r3, [r3, #24]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	f080 816a 	bcs.w	800d2d6 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	699b      	ldr	r3, [r3, #24]
 800d006:	43db      	mvns	r3, r3
 800d008:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d00a:	e164      	b.n	800d2d6 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	699b      	ldr	r3, [r3, #24]
 800d010:	693a      	ldr	r2, [r7, #16]
 800d012:	8992      	ldrh	r2, [r2, #12]
 800d014:	fbb3 f1f2 	udiv	r1, r3, r2
 800d018:	fb01 f202 	mul.w	r2, r1, r2
 800d01c:	1a9b      	subs	r3, r3, r2
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f040 810f 	bne.w	800d242 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	693a      	ldr	r2, [r7, #16]
 800d02a:	8992      	ldrh	r2, [r2, #12]
 800d02c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d030:	693a      	ldr	r2, [r7, #16]
 800d032:	8952      	ldrh	r2, [r2, #10]
 800d034:	3a01      	subs	r2, #1
 800d036:	4013      	ands	r3, r2
 800d038:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d14d      	bne.n	800d0dc <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	699b      	ldr	r3, [r3, #24]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d10c      	bne.n	800d062 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	2b00      	cmp	r3, #0
 800d052:	d11a      	bne.n	800d08a <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2100      	movs	r1, #0
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fe fd49 	bl	800baf0 <create_chain>
 800d05e:	62b8      	str	r0, [r7, #40]	; 0x28
 800d060:	e013      	b.n	800d08a <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d066:	2b00      	cmp	r3, #0
 800d068:	d007      	beq.n	800d07a <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	4619      	mov	r1, r3
 800d070:	68f8      	ldr	r0, [r7, #12]
 800d072:	f7fe fdd5 	bl	800bc20 <clmt_clust>
 800d076:	62b8      	str	r0, [r7, #40]	; 0x28
 800d078:	e007      	b.n	800d08a <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	69db      	ldr	r3, [r3, #28]
 800d080:	4619      	mov	r1, r3
 800d082:	4610      	mov	r0, r2
 800d084:	f7fe fd34 	bl	800baf0 <create_chain>
 800d088:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f000 8127 	beq.w	800d2e0 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d094:	2b01      	cmp	r3, #1
 800d096:	d109      	bne.n	800d0ac <f_write+0x12e>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2202      	movs	r2, #2
 800d09c:	755a      	strb	r2, [r3, #21]
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	2102      	movs	r1, #2
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe f848 	bl	800b138 <unlock_fs>
 800d0a8:	2302      	movs	r3, #2
 800d0aa:	e127      	b.n	800d2fc <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0b2:	d109      	bne.n	800d0c8 <f_write+0x14a>
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	755a      	strb	r2, [r3, #21]
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	2101      	movs	r1, #1
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7fe f83a 	bl	800b138 <unlock_fs>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e119      	b.n	800d2fc <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0cc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d102      	bne.n	800d0dc <f_write+0x15e>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0da:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	7d1b      	ldrb	r3, [r3, #20]
 800d0e0:	b25b      	sxtb	r3, r3
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	da1d      	bge.n	800d122 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	7858      	ldrb	r0, [r3, #1]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6a1a      	ldr	r2, [r3, #32]
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	f7fd fecb 	bl	800ae90 <disk_write>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d009      	beq.n	800d114 <f_write+0x196>
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2201      	movs	r2, #1
 800d104:	755a      	strb	r2, [r3, #21]
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	2101      	movs	r1, #1
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fe f814 	bl	800b138 <unlock_fs>
 800d110:	2301      	movs	r3, #1
 800d112:	e0f3      	b.n	800d2fc <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	7d1b      	ldrb	r3, [r3, #20]
 800d118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d122:	693a      	ldr	r2, [r7, #16]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	69db      	ldr	r3, [r3, #28]
 800d128:	4619      	mov	r1, r3
 800d12a:	4610      	mov	r0, r2
 800d12c:	f7fe fa6e 	bl	800b60c <clust2sect>
 800d130:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d109      	bne.n	800d14c <f_write+0x1ce>
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2202      	movs	r2, #2
 800d13c:	755a      	strb	r2, [r3, #21]
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	2102      	movs	r1, #2
 800d142:	4618      	mov	r0, r3
 800d144:	f7fd fff8 	bl	800b138 <unlock_fs>
 800d148:	2302      	movs	r3, #2
 800d14a:	e0d7      	b.n	800d2fc <f_write+0x37e>
			sect += csect;
 800d14c:	697a      	ldr	r2, [r7, #20]
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	4413      	add	r3, r2
 800d152:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	899b      	ldrh	r3, [r3, #12]
 800d158:	461a      	mov	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d160:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d162:	6a3b      	ldr	r3, [r7, #32]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d048      	beq.n	800d1fa <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d168:	69ba      	ldr	r2, [r7, #24]
 800d16a:	6a3b      	ldr	r3, [r7, #32]
 800d16c:	4413      	add	r3, r2
 800d16e:	693a      	ldr	r2, [r7, #16]
 800d170:	8952      	ldrh	r2, [r2, #10]
 800d172:	4293      	cmp	r3, r2
 800d174:	d905      	bls.n	800d182 <f_write+0x204>
					cc = fs->csize - csect;
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	895b      	ldrh	r3, [r3, #10]
 800d17a:	461a      	mov	r2, r3
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	7858      	ldrb	r0, [r3, #1]
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	697a      	ldr	r2, [r7, #20]
 800d18a:	69f9      	ldr	r1, [r7, #28]
 800d18c:	f7fd fe80 	bl	800ae90 <disk_write>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d009      	beq.n	800d1aa <f_write+0x22c>
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2201      	movs	r2, #1
 800d19a:	755a      	strb	r2, [r3, #21]
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	2101      	movs	r1, #1
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fd ffc9 	bl	800b138 <unlock_fs>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e0a8      	b.n	800d2fc <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6a1a      	ldr	r2, [r3, #32]
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	6a3a      	ldr	r2, [r7, #32]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d918      	bls.n	800d1ea <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	6a1a      	ldr	r2, [r3, #32]
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	1ad3      	subs	r3, r2, r3
 800d1c6:	693a      	ldr	r2, [r7, #16]
 800d1c8:	8992      	ldrh	r2, [r2, #12]
 800d1ca:	fb02 f303 	mul.w	r3, r2, r3
 800d1ce:	69fa      	ldr	r2, [r7, #28]
 800d1d0:	18d1      	adds	r1, r2, r3
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	899b      	ldrh	r3, [r3, #12]
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	f7fd ff1a 	bl	800b010 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	7d1b      	ldrb	r3, [r3, #20]
 800d1e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1e4:	b2da      	uxtb	r2, r3
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	899b      	ldrh	r3, [r3, #12]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	6a3b      	ldr	r3, [r7, #32]
 800d1f2:	fb02 f303 	mul.w	r3, r2, r3
 800d1f6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d1f8:	e050      	b.n	800d29c <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	6a1b      	ldr	r3, [r3, #32]
 800d1fe:	697a      	ldr	r2, [r7, #20]
 800d200:	429a      	cmp	r2, r3
 800d202:	d01b      	beq.n	800d23c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	699a      	ldr	r2, [r3, #24]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d215      	bcs.n	800d23c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	7858      	ldrb	r0, [r3, #1]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d21a:	2301      	movs	r3, #1
 800d21c:	697a      	ldr	r2, [r7, #20]
 800d21e:	f7fd fe17 	bl	800ae50 <disk_read>
 800d222:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d224:	2b00      	cmp	r3, #0
 800d226:	d009      	beq.n	800d23c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2201      	movs	r2, #1
 800d22c:	755a      	strb	r2, [r3, #21]
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	2101      	movs	r1, #1
 800d232:	4618      	mov	r0, r3
 800d234:	f7fd ff80 	bl	800b138 <unlock_fs>
 800d238:	2301      	movs	r3, #1
 800d23a:	e05f      	b.n	800d2fc <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	697a      	ldr	r2, [r7, #20]
 800d240:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	899b      	ldrh	r3, [r3, #12]
 800d246:	4618      	mov	r0, r3
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	699b      	ldr	r3, [r3, #24]
 800d24c:	693a      	ldr	r2, [r7, #16]
 800d24e:	8992      	ldrh	r2, [r2, #12]
 800d250:	fbb3 f1f2 	udiv	r1, r3, r2
 800d254:	fb01 f202 	mul.w	r2, r1, r2
 800d258:	1a9b      	subs	r3, r3, r2
 800d25a:	1ac3      	subs	r3, r0, r3
 800d25c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d25e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	429a      	cmp	r2, r3
 800d264:	d901      	bls.n	800d26a <f_write+0x2ec>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	699b      	ldr	r3, [r3, #24]
 800d274:	693a      	ldr	r2, [r7, #16]
 800d276:	8992      	ldrh	r2, [r2, #12]
 800d278:	fbb3 f0f2 	udiv	r0, r3, r2
 800d27c:	fb00 f202 	mul.w	r2, r0, r2
 800d280:	1a9b      	subs	r3, r3, r2
 800d282:	440b      	add	r3, r1
 800d284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d286:	69f9      	ldr	r1, [r7, #28]
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fd fec1 	bl	800b010 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	7d1b      	ldrb	r3, [r3, #20]
 800d292:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d296:	b2da      	uxtb	r2, r3
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d29c:	69fa      	ldr	r2, [r7, #28]
 800d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a0:	4413      	add	r3, r2
 800d2a2:	61fb      	str	r3, [r7, #28]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	699a      	ldr	r2, [r3, #24]
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2aa:	441a      	add	r2, r3
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	619a      	str	r2, [r3, #24]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	68da      	ldr	r2, [r3, #12]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	699b      	ldr	r3, [r3, #24]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	bf38      	it	cc
 800d2bc:	461a      	movcc	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	60da      	str	r2, [r3, #12]
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c8:	441a      	add	r2, r3
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	601a      	str	r2, [r3, #0]
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d2:	1ad3      	subs	r3, r2, r3
 800d2d4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f47f ae97 	bne.w	800d00c <f_write+0x8e>
 800d2de:	e000      	b.n	800d2e2 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d2e0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	7d1b      	ldrb	r3, [r3, #20]
 800d2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ea:	b2da      	uxtb	r2, r3
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	2100      	movs	r1, #0
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7fd ff1f 	bl	800b138 <unlock_fs>
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3730      	adds	r7, #48	; 0x30
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f107 0208 	add.w	r2, r7, #8
 800d312:	4611      	mov	r1, r2
 800d314:	4618      	mov	r0, r3
 800d316:	f7ff fbb3 	bl	800ca80 <validate>
 800d31a:	4603      	mov	r3, r0
 800d31c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d31e:	7dfb      	ldrb	r3, [r7, #23]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d16d      	bne.n	800d400 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	7d1b      	ldrb	r3, [r3, #20]
 800d328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d067      	beq.n	800d400 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	7d1b      	ldrb	r3, [r3, #20]
 800d334:	b25b      	sxtb	r3, r3
 800d336:	2b00      	cmp	r3, #0
 800d338:	da1a      	bge.n	800d370 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	7858      	ldrb	r0, [r3, #1]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6a1a      	ldr	r2, [r3, #32]
 800d348:	2301      	movs	r3, #1
 800d34a:	f7fd fda1 	bl	800ae90 <disk_write>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d006      	beq.n	800d362 <f_sync+0x5e>
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	2101      	movs	r1, #1
 800d358:	4618      	mov	r0, r3
 800d35a:	f7fd feed 	bl	800b138 <unlock_fs>
 800d35e:	2301      	movs	r3, #1
 800d360:	e055      	b.n	800d40e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	7d1b      	ldrb	r3, [r3, #20]
 800d366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d36a:	b2da      	uxtb	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d370:	f7fd fcd0 	bl	800ad14 <get_fattime>
 800d374:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37c:	4619      	mov	r1, r3
 800d37e:	4610      	mov	r0, r2
 800d380:	f7fe f8a6 	bl	800b4d0 <move_window>
 800d384:	4603      	mov	r3, r0
 800d386:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d388:	7dfb      	ldrb	r3, [r7, #23]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d138      	bne.n	800d400 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d392:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	330b      	adds	r3, #11
 800d398:	781a      	ldrb	r2, [r3, #0]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	330b      	adds	r3, #11
 800d39e:	f042 0220 	orr.w	r2, r2, #32
 800d3a2:	b2d2      	uxtb	r2, r2
 800d3a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6818      	ldr	r0, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	68f9      	ldr	r1, [r7, #12]
 800d3b2:	f7fe fe32 	bl	800c01a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f103 021c 	add.w	r2, r3, #28
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	4610      	mov	r0, r2
 800d3c4:	f7fd fdf8 	bl	800afb8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	3316      	adds	r3, #22
 800d3cc:	6939      	ldr	r1, [r7, #16]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7fd fdf2 	bl	800afb8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	3312      	adds	r3, #18
 800d3d8:	2100      	movs	r1, #0
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fd fdd1 	bl	800af82 <st_word>
					fs->wflag = 1;
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fe f89f 	bl	800b52c <sync_fs>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	7d1b      	ldrb	r3, [r3, #20]
 800d3f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3fa:	b2da      	uxtb	r2, r3
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	7dfa      	ldrb	r2, [r7, #23]
 800d404:	4611      	mov	r1, r2
 800d406:	4618      	mov	r0, r3
 800d408:	f7fd fe96 	bl	800b138 <unlock_fs>
 800d40c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3718      	adds	r7, #24
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b084      	sub	sp, #16
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f7ff ff70 	bl	800d304 <f_sync>
 800d424:	4603      	mov	r3, r0
 800d426:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d428:	7bfb      	ldrb	r3, [r7, #15]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d11d      	bne.n	800d46a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f107 0208 	add.w	r2, r7, #8
 800d434:	4611      	mov	r1, r2
 800d436:	4618      	mov	r0, r3
 800d438:	f7ff fb22 	bl	800ca80 <validate>
 800d43c:	4603      	mov	r3, r0
 800d43e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d440:	7bfb      	ldrb	r3, [r7, #15]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d111      	bne.n	800d46a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	691b      	ldr	r3, [r3, #16]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fd ff9c 	bl	800b388 <dec_lock>
 800d450:	4603      	mov	r3, r0
 800d452:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d454:	7bfb      	ldrb	r3, [r7, #15]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d102      	bne.n	800d460 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2200      	movs	r2, #0
 800d45e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	2100      	movs	r1, #0
 800d464:	4618      	mov	r0, r3
 800d466:	f7fd fe67 	bl	800b138 <unlock_fs>
#endif
		}
	}
	return res;
 800d46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b090      	sub	sp, #64	; 0x40
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d47e:	f107 010c 	add.w	r1, r7, #12
 800d482:	1d3b      	adds	r3, r7, #4
 800d484:	2200      	movs	r2, #0
 800d486:	4618      	mov	r0, r3
 800d488:	f7ff f872 	bl	800c570 <find_volume>
 800d48c:	4603      	mov	r3, r0
 800d48e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800d492:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d496:	2b00      	cmp	r3, #0
 800d498:	d11f      	bne.n	800d4da <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	f107 030c 	add.w	r3, r7, #12
 800d4a0:	4611      	mov	r1, r2
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fe ff54 	bl	800c350 <follow_path>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d4ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d111      	bne.n	800d4da <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d4b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d4ba:	b25b      	sxtb	r3, r3
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	da03      	bge.n	800d4c8 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d4c0:	2306      	movs	r3, #6
 800d4c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d4c6:	e008      	b.n	800d4da <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d005      	beq.n	800d4da <f_stat+0x66>
 800d4ce:	f107 030c 	add.w	r3, r7, #12
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7fe fe47 	bl	800c168 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d4e0:	4611      	mov	r1, r2
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fd fe28 	bl	800b138 <unlock_fs>
 800d4e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3740      	adds	r7, #64	; 0x40
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b092      	sub	sp, #72	; 0x48
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d500:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d504:	f107 030c 	add.w	r3, r7, #12
 800d508:	2200      	movs	r2, #0
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7ff f830 	bl	800c570 <find_volume>
 800d510:	4603      	mov	r3, r0
 800d512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d516:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f040 8099 	bne.w	800d652 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d528:	699a      	ldr	r2, [r3, #24]
 800d52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52c:	69db      	ldr	r3, [r3, #28]
 800d52e:	3b02      	subs	r3, #2
 800d530:	429a      	cmp	r2, r3
 800d532:	d804      	bhi.n	800d53e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d536:	699a      	ldr	r2, [r3, #24]
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	601a      	str	r2, [r3, #0]
 800d53c:	e089      	b.n	800d652 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	2b01      	cmp	r3, #1
 800d548:	d128      	bne.n	800d59c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d54a:	2302      	movs	r3, #2
 800d54c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d550:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d552:	f107 0314 	add.w	r3, r7, #20
 800d556:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fe f876 	bl	800b64a <get_fat>
 800d55e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d566:	d103      	bne.n	800d570 <f_getfree+0x7c>
 800d568:	2301      	movs	r3, #1
 800d56a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d56e:	e063      	b.n	800d638 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d572:	2b01      	cmp	r3, #1
 800d574:	d103      	bne.n	800d57e <f_getfree+0x8a>
 800d576:	2302      	movs	r3, #2
 800d578:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d57c:	e05c      	b.n	800d638 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d580:	2b00      	cmp	r3, #0
 800d582:	d102      	bne.n	800d58a <f_getfree+0x96>
 800d584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d586:	3301      	adds	r3, #1
 800d588:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d58c:	3301      	adds	r3, #1
 800d58e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d592:	69db      	ldr	r3, [r3, #28]
 800d594:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d596:	429a      	cmp	r2, r3
 800d598:	d3db      	bcc.n	800d552 <f_getfree+0x5e>
 800d59a:	e04d      	b.n	800d638 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59e:	69db      	ldr	r3, [r3, #28]
 800d5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5a6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	637b      	str	r3, [r7, #52]	; 0x34
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d113      	bne.n	800d5de <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d5b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ba:	1c5a      	adds	r2, r3, #1
 800d5bc:	63ba      	str	r2, [r7, #56]	; 0x38
 800d5be:	4619      	mov	r1, r3
 800d5c0:	f7fd ff86 	bl	800b4d0 <move_window>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800d5ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d131      	bne.n	800d636 <f_getfree+0x142>
							p = fs->win;
 800d5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d4:	3338      	adds	r3, #56	; 0x38
 800d5d6:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800d5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5da:	899b      	ldrh	r3, [r3, #12]
 800d5dc:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	d10f      	bne.n	800d606 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d5e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5e8:	f7fd fc90 	bl	800af0c <ld_word>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d102      	bne.n	800d5f8 <f_getfree+0x104>
 800d5f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fa:	3302      	adds	r3, #2
 800d5fc:	633b      	str	r3, [r7, #48]	; 0x30
 800d5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d600:	3b02      	subs	r3, #2
 800d602:	637b      	str	r3, [r7, #52]	; 0x34
 800d604:	e010      	b.n	800d628 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d608:	f7fd fc98 	bl	800af3c <ld_dword>
 800d60c:	4603      	mov	r3, r0
 800d60e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d612:	2b00      	cmp	r3, #0
 800d614:	d102      	bne.n	800d61c <f_getfree+0x128>
 800d616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d618:	3301      	adds	r3, #1
 800d61a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61e:	3304      	adds	r3, #4
 800d620:	633b      	str	r3, [r7, #48]	; 0x30
 800d622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d624:	3b04      	subs	r3, #4
 800d626:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d62a:	3b01      	subs	r3, #1
 800d62c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d630:	2b00      	cmp	r3, #0
 800d632:	d1bd      	bne.n	800d5b0 <f_getfree+0xbc>
 800d634:	e000      	b.n	800d638 <f_getfree+0x144>
							if (res != FR_OK) break;
 800d636:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d63c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d640:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d642:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d646:	791a      	ldrb	r2, [r3, #4]
 800d648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64a:	f042 0201 	orr.w	r2, r2, #1
 800d64e:	b2d2      	uxtb	r2, r2
 800d650:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d654:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800d658:	4611      	mov	r1, r2
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fd fd6c 	bl	800b138 <unlock_fs>
 800d660:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d664:	4618      	mov	r0, r3
 800d666:	3748      	adds	r7, #72	; 0x48
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b087      	sub	sp, #28
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	4613      	mov	r3, r2
 800d678:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d67a:	2301      	movs	r3, #1
 800d67c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d682:	4b1f      	ldr	r3, [pc, #124]	; (800d700 <FATFS_LinkDriverEx+0x94>)
 800d684:	7a5b      	ldrb	r3, [r3, #9]
 800d686:	b2db      	uxtb	r3, r3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d131      	bne.n	800d6f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d68c:	4b1c      	ldr	r3, [pc, #112]	; (800d700 <FATFS_LinkDriverEx+0x94>)
 800d68e:	7a5b      	ldrb	r3, [r3, #9]
 800d690:	b2db      	uxtb	r3, r3
 800d692:	461a      	mov	r2, r3
 800d694:	4b1a      	ldr	r3, [pc, #104]	; (800d700 <FATFS_LinkDriverEx+0x94>)
 800d696:	2100      	movs	r1, #0
 800d698:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d69a:	4b19      	ldr	r3, [pc, #100]	; (800d700 <FATFS_LinkDriverEx+0x94>)
 800d69c:	7a5b      	ldrb	r3, [r3, #9]
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	4a17      	ldr	r2, [pc, #92]	; (800d700 <FATFS_LinkDriverEx+0x94>)
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	4413      	add	r3, r2
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d6aa:	4b15      	ldr	r3, [pc, #84]	; (800d700 <FATFS_LinkDriverEx+0x94>)
 800d6ac:	7a5b      	ldrb	r3, [r3, #9]
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	4b13      	ldr	r3, [pc, #76]	; (800d700 <FATFS_LinkDriverEx+0x94>)
 800d6b4:	4413      	add	r3, r2
 800d6b6:	79fa      	ldrb	r2, [r7, #7]
 800d6b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d6ba:	4b11      	ldr	r3, [pc, #68]	; (800d700 <FATFS_LinkDriverEx+0x94>)
 800d6bc:	7a5b      	ldrb	r3, [r3, #9]
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	1c5a      	adds	r2, r3, #1
 800d6c2:	b2d1      	uxtb	r1, r2
 800d6c4:	4a0e      	ldr	r2, [pc, #56]	; (800d700 <FATFS_LinkDriverEx+0x94>)
 800d6c6:	7251      	strb	r1, [r2, #9]
 800d6c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d6ca:	7dbb      	ldrb	r3, [r7, #22]
 800d6cc:	3330      	adds	r3, #48	; 0x30
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	223a      	movs	r2, #58	; 0x3a
 800d6da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	3302      	adds	r3, #2
 800d6e0:	222f      	movs	r2, #47	; 0x2f
 800d6e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	3303      	adds	r3, #3
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	371c      	adds	r7, #28
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop
 800d700:	200049d4 	.word	0x200049d4

0800d704 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b082      	sub	sp, #8
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d70e:	2200      	movs	r2, #0
 800d710:	6839      	ldr	r1, [r7, #0]
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f7ff ffaa 	bl	800d66c <FATFS_LinkDriverEx>
 800d718:	4603      	mov	r3, r0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b084      	sub	sp, #16
 800d726:	af00      	add	r7, sp, #0
 800d728:	4603      	mov	r3, r0
 800d72a:	6039      	str	r1, [r7, #0]
 800d72c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800d72e:	2200      	movs	r2, #0
 800d730:	2101      	movs	r1, #1
 800d732:	2001      	movs	r0, #1
 800d734:	f000 fa56 	bl	800dbe4 <osSemaphoreNew>
 800d738:	4602      	mov	r2, r0
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	bf14      	ite	ne
 800d746:	2301      	movne	r3, #1
 800d748:	2300      	moveq	r3, #0
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	60fb      	str	r3, [r7, #12]

    return ret;
 800d74e:	68fb      	ldr	r3, [r7, #12]
}
 800d750:	4618      	mov	r0, r3
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fb5f 	bl	800de24 <osSemaphoreDelete>
#endif
    return 1;
 800d766:	2301      	movs	r3, #1
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800d778:	2300      	movs	r3, #0
 800d77a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800d77c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fab9 	bl	800dcf8 <osSemaphoreAcquire>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d101      	bne.n	800d790 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800d78c:	2301      	movs	r3, #1
 800d78e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d790:	68fb      	ldr	r3, [r7, #12]
}
 800d792:	4618      	mov	r0, r3
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b082      	sub	sp, #8
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fafa 	bl	800dd9c <osSemaphoreRelease>
#endif
}
 800d7a8:	bf00      	nop
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <__NVIC_SetPriority>:
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	6039      	str	r1, [r7, #0]
 800d7ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d7bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	db0a      	blt.n	800d7da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	b2da      	uxtb	r2, r3
 800d7c8:	490c      	ldr	r1, [pc, #48]	; (800d7fc <__NVIC_SetPriority+0x4c>)
 800d7ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7ce:	0112      	lsls	r2, r2, #4
 800d7d0:	b2d2      	uxtb	r2, r2
 800d7d2:	440b      	add	r3, r1
 800d7d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d7d8:	e00a      	b.n	800d7f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	4908      	ldr	r1, [pc, #32]	; (800d800 <__NVIC_SetPriority+0x50>)
 800d7e0:	79fb      	ldrb	r3, [r7, #7]
 800d7e2:	f003 030f 	and.w	r3, r3, #15
 800d7e6:	3b04      	subs	r3, #4
 800d7e8:	0112      	lsls	r2, r2, #4
 800d7ea:	b2d2      	uxtb	r2, r2
 800d7ec:	440b      	add	r3, r1
 800d7ee:	761a      	strb	r2, [r3, #24]
}
 800d7f0:	bf00      	nop
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	e000e100 	.word	0xe000e100
 800d800:	e000ed00 	.word	0xe000ed00

0800d804 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d804:	b580      	push	{r7, lr}
 800d806:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d808:	2100      	movs	r1, #0
 800d80a:	f06f 0004 	mvn.w	r0, #4
 800d80e:	f7ff ffcf 	bl	800d7b0 <__NVIC_SetPriority>
#endif
}
 800d812:	bf00      	nop
 800d814:	bd80      	pop	{r7, pc}
	...

0800d818 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d818:	b480      	push	{r7}
 800d81a:	b083      	sub	sp, #12
 800d81c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d81e:	f3ef 8305 	mrs	r3, IPSR
 800d822:	603b      	str	r3, [r7, #0]
  return(result);
 800d824:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d826:	2b00      	cmp	r3, #0
 800d828:	d003      	beq.n	800d832 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d82a:	f06f 0305 	mvn.w	r3, #5
 800d82e:	607b      	str	r3, [r7, #4]
 800d830:	e00c      	b.n	800d84c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d832:	4b0a      	ldr	r3, [pc, #40]	; (800d85c <osKernelInitialize+0x44>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d105      	bne.n	800d846 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d83a:	4b08      	ldr	r3, [pc, #32]	; (800d85c <osKernelInitialize+0x44>)
 800d83c:	2201      	movs	r2, #1
 800d83e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d840:	2300      	movs	r3, #0
 800d842:	607b      	str	r3, [r7, #4]
 800d844:	e002      	b.n	800d84c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d84a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d84c:	687b      	ldr	r3, [r7, #4]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	370c      	adds	r7, #12
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	200049e0 	.word	0x200049e0

0800d860 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d866:	f3ef 8305 	mrs	r3, IPSR
 800d86a:	603b      	str	r3, [r7, #0]
  return(result);
 800d86c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d003      	beq.n	800d87a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d872:	f06f 0305 	mvn.w	r3, #5
 800d876:	607b      	str	r3, [r7, #4]
 800d878:	e010      	b.n	800d89c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d87a:	4b0b      	ldr	r3, [pc, #44]	; (800d8a8 <osKernelStart+0x48>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d109      	bne.n	800d896 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d882:	f7ff ffbf 	bl	800d804 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d886:	4b08      	ldr	r3, [pc, #32]	; (800d8a8 <osKernelStart+0x48>)
 800d888:	2202      	movs	r2, #2
 800d88a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d88c:	f002 f830 	bl	800f8f0 <vTaskStartScheduler>
      stat = osOK;
 800d890:	2300      	movs	r3, #0
 800d892:	607b      	str	r3, [r7, #4]
 800d894:	e002      	b.n	800d89c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d89a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d89c:	687b      	ldr	r3, [r7, #4]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3708      	adds	r7, #8
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	200049e0 	.word	0x200049e0

0800d8ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b08e      	sub	sp, #56	; 0x38
 800d8b0:	af04      	add	r7, sp, #16
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8bc:	f3ef 8305 	mrs	r3, IPSR
 800d8c0:	617b      	str	r3, [r7, #20]
  return(result);
 800d8c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d17e      	bne.n	800d9c6 <osThreadNew+0x11a>
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d07b      	beq.n	800d9c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d8ce:	2380      	movs	r3, #128	; 0x80
 800d8d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d8d2:	2318      	movs	r3, #24
 800d8d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d8da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d045      	beq.n	800d972 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d002      	beq.n	800d8f4 <osThreadNew+0x48>
        name = attr->name;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	699b      	ldr	r3, [r3, #24]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d002      	beq.n	800d902 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	699b      	ldr	r3, [r3, #24]
 800d900:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d008      	beq.n	800d91a <osThreadNew+0x6e>
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	2b38      	cmp	r3, #56	; 0x38
 800d90c:	d805      	bhi.n	800d91a <osThreadNew+0x6e>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	f003 0301 	and.w	r3, r3, #1
 800d916:	2b00      	cmp	r3, #0
 800d918:	d001      	beq.n	800d91e <osThreadNew+0x72>
        return (NULL);
 800d91a:	2300      	movs	r3, #0
 800d91c:	e054      	b.n	800d9c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	695b      	ldr	r3, [r3, #20]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d003      	beq.n	800d92e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	695b      	ldr	r3, [r3, #20]
 800d92a:	089b      	lsrs	r3, r3, #2
 800d92c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00e      	beq.n	800d954 <osThreadNew+0xa8>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	2ba7      	cmp	r3, #167	; 0xa7
 800d93c:	d90a      	bls.n	800d954 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d942:	2b00      	cmp	r3, #0
 800d944:	d006      	beq.n	800d954 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	695b      	ldr	r3, [r3, #20]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d002      	beq.n	800d954 <osThreadNew+0xa8>
        mem = 1;
 800d94e:	2301      	movs	r3, #1
 800d950:	61bb      	str	r3, [r7, #24]
 800d952:	e010      	b.n	800d976 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	689b      	ldr	r3, [r3, #8]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d10c      	bne.n	800d976 <osThreadNew+0xca>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d108      	bne.n	800d976 <osThreadNew+0xca>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d104      	bne.n	800d976 <osThreadNew+0xca>
          mem = 0;
 800d96c:	2300      	movs	r3, #0
 800d96e:	61bb      	str	r3, [r7, #24]
 800d970:	e001      	b.n	800d976 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d972:	2300      	movs	r3, #0
 800d974:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d110      	bne.n	800d99e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d984:	9202      	str	r2, [sp, #8]
 800d986:	9301      	str	r3, [sp, #4]
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	6a3a      	ldr	r2, [r7, #32]
 800d990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f001 fd4e 	bl	800f434 <xTaskCreateStatic>
 800d998:	4603      	mov	r3, r0
 800d99a:	613b      	str	r3, [r7, #16]
 800d99c:	e013      	b.n	800d9c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d110      	bne.n	800d9c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d9a4:	6a3b      	ldr	r3, [r7, #32]
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	f107 0310 	add.w	r3, r7, #16
 800d9ac:	9301      	str	r3, [sp, #4]
 800d9ae:	69fb      	ldr	r3, [r7, #28]
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	f001 fd99 	bl	800f4ee <xTaskCreate>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d001      	beq.n	800d9c6 <osThreadNew+0x11a>
            hTask = NULL;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d9c6:	693b      	ldr	r3, [r7, #16]
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3728      	adds	r7, #40	; 0x28
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	f001 fee5 	bl	800f7a4 <vTaskDelete>
#endif
  for (;;);
 800d9da:	e7fe      	b.n	800d9da <osThreadExit+0xa>

0800d9dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9e4:	f3ef 8305 	mrs	r3, IPSR
 800d9e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d003      	beq.n	800d9f8 <osDelay+0x1c>
    stat = osErrorISR;
 800d9f0:	f06f 0305 	mvn.w	r3, #5
 800d9f4:	60fb      	str	r3, [r7, #12]
 800d9f6:	e007      	b.n	800da08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d002      	beq.n	800da08 <osDelay+0x2c>
      vTaskDelay(ticks);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f001 ff40 	bl	800f888 <vTaskDelay>
    }
  }

  return (stat);
 800da08:	68fb      	ldr	r3, [r7, #12]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800da12:	b580      	push	{r7, lr}
 800da14:	b086      	sub	sp, #24
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800da1a:	2300      	movs	r3, #0
 800da1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da1e:	f3ef 8305 	mrs	r3, IPSR
 800da22:	60fb      	str	r3, [r7, #12]
  return(result);
 800da24:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800da26:	2b00      	cmp	r3, #0
 800da28:	d12d      	bne.n	800da86 <osEventFlagsNew+0x74>
    mem = -1;
 800da2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da2e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d015      	beq.n	800da62 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d006      	beq.n	800da4c <osEventFlagsNew+0x3a>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	2b1f      	cmp	r3, #31
 800da44:	d902      	bls.n	800da4c <osEventFlagsNew+0x3a>
        mem = 1;
 800da46:	2301      	movs	r3, #1
 800da48:	613b      	str	r3, [r7, #16]
 800da4a:	e00c      	b.n	800da66 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d108      	bne.n	800da66 <osEventFlagsNew+0x54>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d104      	bne.n	800da66 <osEventFlagsNew+0x54>
          mem = 0;
 800da5c:	2300      	movs	r3, #0
 800da5e:	613b      	str	r3, [r7, #16]
 800da60:	e001      	b.n	800da66 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800da62:	2300      	movs	r3, #0
 800da64:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d106      	bne.n	800da7a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	4618      	mov	r0, r3
 800da72:	f000 fa2f 	bl	800ded4 <xEventGroupCreateStatic>
 800da76:	6178      	str	r0, [r7, #20]
 800da78:	e005      	b.n	800da86 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d102      	bne.n	800da86 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800da80:	f000 fa5f 	bl	800df42 <xEventGroupCreate>
 800da84:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800da86:	697b      	ldr	r3, [r7, #20]
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3718      	adds	r7, #24
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d004      	beq.n	800daae <osEventFlagsSet+0x1e>
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d003      	beq.n	800dab6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800daae:	f06f 0303 	mvn.w	r3, #3
 800dab2:	617b      	str	r3, [r7, #20]
 800dab4:	e028      	b.n	800db08 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dab6:	f3ef 8305 	mrs	r3, IPSR
 800daba:	60fb      	str	r3, [r7, #12]
  return(result);
 800dabc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d01d      	beq.n	800dafe <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800dac2:	2300      	movs	r3, #0
 800dac4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800dac6:	f107 0308 	add.w	r3, r7, #8
 800daca:	461a      	mov	r2, r3
 800dacc:	6839      	ldr	r1, [r7, #0]
 800dace:	6938      	ldr	r0, [r7, #16]
 800dad0:	f000 fbda 	bl	800e288 <xEventGroupSetBitsFromISR>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d103      	bne.n	800dae2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800dada:	f06f 0302 	mvn.w	r3, #2
 800dade:	617b      	str	r3, [r7, #20]
 800dae0:	e012      	b.n	800db08 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d00d      	beq.n	800db08 <osEventFlagsSet+0x78>
 800daec:	4b09      	ldr	r3, [pc, #36]	; (800db14 <osEventFlagsSet+0x84>)
 800daee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daf2:	601a      	str	r2, [r3, #0]
 800daf4:	f3bf 8f4f 	dsb	sy
 800daf8:	f3bf 8f6f 	isb	sy
 800dafc:	e004      	b.n	800db08 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	6938      	ldr	r0, [r7, #16]
 800db02:	f000 fb07 	bl	800e114 <xEventGroupSetBits>
 800db06:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800db08:	697b      	ldr	r3, [r7, #20]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3718      	adds	r7, #24
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	e000ed04 	.word	0xe000ed04

0800db18 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800db18:	b580      	push	{r7, lr}
 800db1a:	b08c      	sub	sp, #48	; 0x30
 800db1c:	af02      	add	r7, sp, #8
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	607a      	str	r2, [r7, #4]
 800db24:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d004      	beq.n	800db3a <osEventFlagsWait+0x22>
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800db36:	2b00      	cmp	r3, #0
 800db38:	d003      	beq.n	800db42 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800db3a:	f06f 0303 	mvn.w	r3, #3
 800db3e:	61fb      	str	r3, [r7, #28]
 800db40:	e04b      	b.n	800dbda <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db42:	f3ef 8305 	mrs	r3, IPSR
 800db46:	617b      	str	r3, [r7, #20]
  return(result);
 800db48:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d003      	beq.n	800db56 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800db4e:	f06f 0305 	mvn.w	r3, #5
 800db52:	61fb      	str	r3, [r7, #28]
 800db54:	e041      	b.n	800dbda <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f003 0301 	and.w	r3, r3, #1
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800db60:	2301      	movs	r3, #1
 800db62:	627b      	str	r3, [r7, #36]	; 0x24
 800db64:	e001      	b.n	800db6a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800db66:	2300      	movs	r3, #0
 800db68:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f003 0302 	and.w	r3, r3, #2
 800db70:	2b00      	cmp	r3, #0
 800db72:	d002      	beq.n	800db7a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800db74:	2300      	movs	r3, #0
 800db76:	623b      	str	r3, [r7, #32]
 800db78:	e001      	b.n	800db7e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800db7a:	2301      	movs	r3, #1
 800db7c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	9300      	str	r3, [sp, #0]
 800db82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db84:	6a3a      	ldr	r2, [r7, #32]
 800db86:	68b9      	ldr	r1, [r7, #8]
 800db88:	69b8      	ldr	r0, [r7, #24]
 800db8a:	f000 f9f5 	bl	800df78 <xEventGroupWaitBits>
 800db8e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f003 0301 	and.w	r3, r3, #1
 800db96:	2b00      	cmp	r3, #0
 800db98:	d010      	beq.n	800dbbc <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	4013      	ands	r3, r2
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d019      	beq.n	800dbda <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d003      	beq.n	800dbb4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800dbac:	f06f 0301 	mvn.w	r3, #1
 800dbb0:	61fb      	str	r3, [r7, #28]
 800dbb2:	e012      	b.n	800dbda <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800dbb4:	f06f 0302 	mvn.w	r3, #2
 800dbb8:	61fb      	str	r3, [r7, #28]
 800dbba:	e00e      	b.n	800dbda <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d109      	bne.n	800dbda <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d003      	beq.n	800dbd4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800dbcc:	f06f 0301 	mvn.w	r3, #1
 800dbd0:	61fb      	str	r3, [r7, #28]
 800dbd2:	e002      	b.n	800dbda <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800dbd4:	f06f 0302 	mvn.w	r3, #2
 800dbd8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800dbda:	69fb      	ldr	r3, [r7, #28]
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3728      	adds	r7, #40	; 0x28
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b08a      	sub	sp, #40	; 0x28
 800dbe8:	af02      	add	r7, sp, #8
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbf4:	f3ef 8305 	mrs	r3, IPSR
 800dbf8:	613b      	str	r3, [r7, #16]
  return(result);
 800dbfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d175      	bne.n	800dcec <osSemaphoreNew+0x108>
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d072      	beq.n	800dcec <osSemaphoreNew+0x108>
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d86e      	bhi.n	800dcec <osSemaphoreNew+0x108>
    mem = -1;
 800dc0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d015      	beq.n	800dc46 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d006      	beq.n	800dc30 <osSemaphoreNew+0x4c>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	2b4f      	cmp	r3, #79	; 0x4f
 800dc28:	d902      	bls.n	800dc30 <osSemaphoreNew+0x4c>
        mem = 1;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	61bb      	str	r3, [r7, #24]
 800dc2e:	e00c      	b.n	800dc4a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d108      	bne.n	800dc4a <osSemaphoreNew+0x66>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d104      	bne.n	800dc4a <osSemaphoreNew+0x66>
          mem = 0;
 800dc40:	2300      	movs	r3, #0
 800dc42:	61bb      	str	r3, [r7, #24]
 800dc44:	e001      	b.n	800dc4a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800dc46:	2300      	movs	r3, #0
 800dc48:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc50:	d04c      	beq.n	800dcec <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d128      	bne.n	800dcaa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d10a      	bne.n	800dc74 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	2203      	movs	r2, #3
 800dc64:	9200      	str	r2, [sp, #0]
 800dc66:	2200      	movs	r2, #0
 800dc68:	2100      	movs	r1, #0
 800dc6a:	2001      	movs	r0, #1
 800dc6c:	f000 fc3c 	bl	800e4e8 <xQueueGenericCreateStatic>
 800dc70:	61f8      	str	r0, [r7, #28]
 800dc72:	e005      	b.n	800dc80 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800dc74:	2203      	movs	r2, #3
 800dc76:	2100      	movs	r1, #0
 800dc78:	2001      	movs	r0, #1
 800dc7a:	f000 fcad 	bl	800e5d8 <xQueueGenericCreate>
 800dc7e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d022      	beq.n	800dccc <osSemaphoreNew+0xe8>
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d01f      	beq.n	800dccc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	2200      	movs	r2, #0
 800dc90:	2100      	movs	r1, #0
 800dc92:	69f8      	ldr	r0, [r7, #28]
 800dc94:	f000 fd68 	bl	800e768 <xQueueGenericSend>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d016      	beq.n	800dccc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800dc9e:	69f8      	ldr	r0, [r7, #28]
 800dca0:	f001 f9f4 	bl	800f08c <vQueueDelete>
            hSemaphore = NULL;
 800dca4:	2300      	movs	r3, #0
 800dca6:	61fb      	str	r3, [r7, #28]
 800dca8:	e010      	b.n	800dccc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d108      	bne.n	800dcc2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	68b9      	ldr	r1, [r7, #8]
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	f000 fcea 	bl	800e692 <xQueueCreateCountingSemaphoreStatic>
 800dcbe:	61f8      	str	r0, [r7, #28]
 800dcc0:	e004      	b.n	800dccc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800dcc2:	68b9      	ldr	r1, [r7, #8]
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f000 fd1b 	bl	800e700 <xQueueCreateCountingSemaphore>
 800dcca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00c      	beq.n	800dcec <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d003      	beq.n	800dce0 <osSemaphoreNew+0xfc>
          name = attr->name;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	617b      	str	r3, [r7, #20]
 800dcde:	e001      	b.n	800dce4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800dce0:	2300      	movs	r3, #0
 800dce2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800dce4:	6979      	ldr	r1, [r7, #20]
 800dce6:	69f8      	ldr	r0, [r7, #28]
 800dce8:	f001 fb1c 	bl	800f324 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800dcec:	69fb      	ldr	r3, [r7, #28]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3720      	adds	r7, #32
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
	...

0800dcf8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dd06:	2300      	movs	r3, #0
 800dd08:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d103      	bne.n	800dd18 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800dd10:	f06f 0303 	mvn.w	r3, #3
 800dd14:	617b      	str	r3, [r7, #20]
 800dd16:	e039      	b.n	800dd8c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd18:	f3ef 8305 	mrs	r3, IPSR
 800dd1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d022      	beq.n	800dd6a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d003      	beq.n	800dd32 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800dd2a:	f06f 0303 	mvn.w	r3, #3
 800dd2e:	617b      	str	r3, [r7, #20]
 800dd30:	e02c      	b.n	800dd8c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800dd32:	2300      	movs	r3, #0
 800dd34:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dd36:	f107 0308 	add.w	r3, r7, #8
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	6938      	ldr	r0, [r7, #16]
 800dd40:	f001 f924 	bl	800ef8c <xQueueReceiveFromISR>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d003      	beq.n	800dd52 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800dd4a:	f06f 0302 	mvn.w	r3, #2
 800dd4e:	617b      	str	r3, [r7, #20]
 800dd50:	e01c      	b.n	800dd8c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d019      	beq.n	800dd8c <osSemaphoreAcquire+0x94>
 800dd58:	4b0f      	ldr	r3, [pc, #60]	; (800dd98 <osSemaphoreAcquire+0xa0>)
 800dd5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd5e:	601a      	str	r2, [r3, #0]
 800dd60:	f3bf 8f4f 	dsb	sy
 800dd64:	f3bf 8f6f 	isb	sy
 800dd68:	e010      	b.n	800dd8c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800dd6a:	6839      	ldr	r1, [r7, #0]
 800dd6c:	6938      	ldr	r0, [r7, #16]
 800dd6e:	f001 f801 	bl	800ed74 <xQueueSemaphoreTake>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d009      	beq.n	800dd8c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d003      	beq.n	800dd86 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800dd7e:	f06f 0301 	mvn.w	r3, #1
 800dd82:	617b      	str	r3, [r7, #20]
 800dd84:	e002      	b.n	800dd8c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800dd86:	f06f 0302 	mvn.w	r3, #2
 800dd8a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800dd8c:	697b      	ldr	r3, [r7, #20]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3718      	adds	r7, #24
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	e000ed04 	.word	0xe000ed04

0800dd9c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b086      	sub	sp, #24
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d103      	bne.n	800ddba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ddb2:	f06f 0303 	mvn.w	r3, #3
 800ddb6:	617b      	str	r3, [r7, #20]
 800ddb8:	e02c      	b.n	800de14 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddba:	f3ef 8305 	mrs	r3, IPSR
 800ddbe:	60fb      	str	r3, [r7, #12]
  return(result);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d01a      	beq.n	800ddfc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ddca:	f107 0308 	add.w	r3, r7, #8
 800ddce:	4619      	mov	r1, r3
 800ddd0:	6938      	ldr	r0, [r7, #16]
 800ddd2:	f000 fe62 	bl	800ea9a <xQueueGiveFromISR>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d003      	beq.n	800dde4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800dddc:	f06f 0302 	mvn.w	r3, #2
 800dde0:	617b      	str	r3, [r7, #20]
 800dde2:	e017      	b.n	800de14 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d014      	beq.n	800de14 <osSemaphoreRelease+0x78>
 800ddea:	4b0d      	ldr	r3, [pc, #52]	; (800de20 <osSemaphoreRelease+0x84>)
 800ddec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddf0:	601a      	str	r2, [r3, #0]
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	e00b      	b.n	800de14 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	2200      	movs	r2, #0
 800de00:	2100      	movs	r1, #0
 800de02:	6938      	ldr	r0, [r7, #16]
 800de04:	f000 fcb0 	bl	800e768 <xQueueGenericSend>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d002      	beq.n	800de14 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800de0e:	f06f 0302 	mvn.w	r3, #2
 800de12:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800de14:	697b      	ldr	r3, [r7, #20]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3718      	adds	r7, #24
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	e000ed04 	.word	0xe000ed04

0800de24 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de30:	f3ef 8305 	mrs	r3, IPSR
 800de34:	60fb      	str	r3, [r7, #12]
  return(result);
 800de36:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d003      	beq.n	800de44 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800de3c:	f06f 0305 	mvn.w	r3, #5
 800de40:	617b      	str	r3, [r7, #20]
 800de42:	e00e      	b.n	800de62 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d103      	bne.n	800de52 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800de4a:	f06f 0303 	mvn.w	r3, #3
 800de4e:	617b      	str	r3, [r7, #20]
 800de50:	e007      	b.n	800de62 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800de52:	6938      	ldr	r0, [r7, #16]
 800de54:	f001 fa90 	bl	800f378 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800de58:	2300      	movs	r3, #0
 800de5a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800de5c:	6938      	ldr	r0, [r7, #16]
 800de5e:	f001 f915 	bl	800f08c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800de62:	697b      	ldr	r3, [r7, #20]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3718      	adds	r7, #24
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de6c:	b480      	push	{r7}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	4a07      	ldr	r2, [pc, #28]	; (800de98 <vApplicationGetIdleTaskMemory+0x2c>)
 800de7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	4a06      	ldr	r2, [pc, #24]	; (800de9c <vApplicationGetIdleTaskMemory+0x30>)
 800de82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2280      	movs	r2, #128	; 0x80
 800de88:	601a      	str	r2, [r3, #0]
}
 800de8a:	bf00      	nop
 800de8c:	3714      	adds	r7, #20
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr
 800de96:	bf00      	nop
 800de98:	200049e4 	.word	0x200049e4
 800de9c:	20004a8c 	.word	0x20004a8c

0800dea0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dea0:	b480      	push	{r7}
 800dea2:	b085      	sub	sp, #20
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	4a07      	ldr	r2, [pc, #28]	; (800decc <vApplicationGetTimerTaskMemory+0x2c>)
 800deb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	4a06      	ldr	r2, [pc, #24]	; (800ded0 <vApplicationGetTimerTaskMemory+0x30>)
 800deb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800debe:	601a      	str	r2, [r3, #0]
}
 800dec0:	bf00      	nop
 800dec2:	3714      	adds	r7, #20
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr
 800decc:	20004c8c 	.word	0x20004c8c
 800ded0:	20004d34 	.word	0x20004d34

0800ded4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b086      	sub	sp, #24
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d10a      	bne.n	800def8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee6:	f383 8811 	msr	BASEPRI, r3
 800deea:	f3bf 8f6f 	isb	sy
 800deee:	f3bf 8f4f 	dsb	sy
 800def2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800def4:	bf00      	nop
 800def6:	e7fe      	b.n	800def6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800def8:	2320      	movs	r3, #32
 800defa:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	2b20      	cmp	r3, #32
 800df00:	d00a      	beq.n	800df18 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800df02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df06:	f383 8811 	msr	BASEPRI, r3
 800df0a:	f3bf 8f6f 	isb	sy
 800df0e:	f3bf 8f4f 	dsb	sy
 800df12:	60fb      	str	r3, [r7, #12]
}
 800df14:	bf00      	nop
 800df16:	e7fe      	b.n	800df16 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d00a      	beq.n	800df38 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	2200      	movs	r2, #0
 800df26:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	3304      	adds	r3, #4
 800df2c:	4618      	mov	r0, r3
 800df2e:	f000 f9bf 	bl	800e2b0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	2201      	movs	r2, #1
 800df36:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800df38:	697b      	ldr	r3, [r7, #20]
	}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3718      	adds	r7, #24
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800df42:	b580      	push	{r7, lr}
 800df44:	b082      	sub	sp, #8
 800df46:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800df48:	2020      	movs	r0, #32
 800df4a:	f003 f97d 	bl	8011248 <pvPortMalloc>
 800df4e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00a      	beq.n	800df6c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2200      	movs	r2, #0
 800df5a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	3304      	adds	r3, #4
 800df60:	4618      	mov	r0, r3
 800df62:	f000 f9a5 	bl	800e2b0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2200      	movs	r2, #0
 800df6a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800df6c:	687b      	ldr	r3, [r7, #4]
	}
 800df6e:	4618      	mov	r0, r3
 800df70:	3708      	adds	r7, #8
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
	...

0800df78 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b090      	sub	sp, #64	; 0x40
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
 800df84:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800df8a:	2300      	movs	r3, #0
 800df8c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800df8e:	2300      	movs	r3, #0
 800df90:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d10a      	bne.n	800dfae <xEventGroupWaitBits+0x36>
	__asm volatile
 800df98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9c:	f383 8811 	msr	BASEPRI, r3
 800dfa0:	f3bf 8f6f 	isb	sy
 800dfa4:	f3bf 8f4f 	dsb	sy
 800dfa8:	623b      	str	r3, [r7, #32]
}
 800dfaa:	bf00      	nop
 800dfac:	e7fe      	b.n	800dfac <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00a      	beq.n	800dfce <xEventGroupWaitBits+0x56>
	__asm volatile
 800dfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbc:	f383 8811 	msr	BASEPRI, r3
 800dfc0:	f3bf 8f6f 	isb	sy
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	61fb      	str	r3, [r7, #28]
}
 800dfca:	bf00      	nop
 800dfcc:	e7fe      	b.n	800dfcc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10a      	bne.n	800dfea <xEventGroupWaitBits+0x72>
	__asm volatile
 800dfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd8:	f383 8811 	msr	BASEPRI, r3
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	61bb      	str	r3, [r7, #24]
}
 800dfe6:	bf00      	nop
 800dfe8:	e7fe      	b.n	800dfe8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dfea:	f002 f97b 	bl	80102e4 <xTaskGetSchedulerState>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d102      	bne.n	800dffa <xEventGroupWaitBits+0x82>
 800dff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d101      	bne.n	800dffe <xEventGroupWaitBits+0x86>
 800dffa:	2301      	movs	r3, #1
 800dffc:	e000      	b.n	800e000 <xEventGroupWaitBits+0x88>
 800dffe:	2300      	movs	r3, #0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d10a      	bne.n	800e01a <xEventGroupWaitBits+0xa2>
	__asm volatile
 800e004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e008:	f383 8811 	msr	BASEPRI, r3
 800e00c:	f3bf 8f6f 	isb	sy
 800e010:	f3bf 8f4f 	dsb	sy
 800e014:	617b      	str	r3, [r7, #20]
}
 800e016:	bf00      	nop
 800e018:	e7fe      	b.n	800e018 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800e01a:	f001 fcd9 	bl	800f9d0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800e01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800e024:	683a      	ldr	r2, [r7, #0]
 800e026:	68b9      	ldr	r1, [r7, #8]
 800e028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e02a:	f000 f90b 	bl	800e244 <prvTestWaitCondition>
 800e02e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800e030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e032:	2b00      	cmp	r3, #0
 800e034:	d00e      	beq.n	800e054 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800e036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e038:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d028      	beq.n	800e096 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	43db      	mvns	r3, r3
 800e04c:	401a      	ands	r2, r3
 800e04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e050:	601a      	str	r2, [r3, #0]
 800e052:	e020      	b.n	800e096 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800e054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e056:	2b00      	cmp	r3, #0
 800e058:	d104      	bne.n	800e064 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800e05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800e05e:	2301      	movs	r3, #1
 800e060:	633b      	str	r3, [r7, #48]	; 0x30
 800e062:	e018      	b.n	800e096 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d003      	beq.n	800e072 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800e06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e070:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d003      	beq.n	800e080 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800e078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e07e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800e080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e082:	1d18      	adds	r0, r3, #4
 800e084:	68ba      	ldr	r2, [r7, #8]
 800e086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e088:	4313      	orrs	r3, r2
 800e08a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e08c:	4619      	mov	r1, r3
 800e08e:	f001 fe9d 	bl	800fdcc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800e092:	2300      	movs	r3, #0
 800e094:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800e096:	f001 fca9 	bl	800f9ec <xTaskResumeAll>
 800e09a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800e09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d031      	beq.n	800e106 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800e0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d107      	bne.n	800e0b8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800e0a8:	4b19      	ldr	r3, [pc, #100]	; (800e110 <xEventGroupWaitBits+0x198>)
 800e0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0ae:	601a      	str	r2, [r3, #0]
 800e0b0:	f3bf 8f4f 	dsb	sy
 800e0b4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800e0b8:	f002 fa8a 	bl	80105d0 <uxTaskResetEventItemValue>
 800e0bc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800e0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d11a      	bne.n	800e0fe <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800e0c8:	f002 ff9c 	bl	8011004 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800e0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800e0d2:	683a      	ldr	r2, [r7, #0]
 800e0d4:	68b9      	ldr	r1, [r7, #8]
 800e0d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e0d8:	f000 f8b4 	bl	800e244 <prvTestWaitCondition>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d009      	beq.n	800e0f6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d006      	beq.n	800e0f6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	43db      	mvns	r3, r3
 800e0f0:	401a      	ands	r2, r3
 800e0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0f4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800e0fa:	f002 ffb3 	bl	8011064 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e0fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e100:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e104:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800e106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3740      	adds	r7, #64	; 0x40
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	e000ed04 	.word	0xe000ed04

0800e114 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08e      	sub	sp, #56	; 0x38
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800e11e:	2300      	movs	r3, #0
 800e120:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800e126:	2300      	movs	r3, #0
 800e128:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10a      	bne.n	800e146 <xEventGroupSetBits+0x32>
	__asm volatile
 800e130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e134:	f383 8811 	msr	BASEPRI, r3
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	613b      	str	r3, [r7, #16]
}
 800e142:	bf00      	nop
 800e144:	e7fe      	b.n	800e144 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00a      	beq.n	800e166 <xEventGroupSetBits+0x52>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	60fb      	str	r3, [r7, #12]
}
 800e162:	bf00      	nop
 800e164:	e7fe      	b.n	800e164 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800e166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e168:	3304      	adds	r3, #4
 800e16a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16e:	3308      	adds	r3, #8
 800e170:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800e172:	f001 fc2d 	bl	800f9d0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800e176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800e17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	431a      	orrs	r2, r3
 800e184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e186:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800e188:	e03c      	b.n	800e204 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800e18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800e190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800e196:	2300      	movs	r3, #0
 800e198:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e1a0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e1a8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d108      	bne.n	800e1c6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800e1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	4013      	ands	r3, r2
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00b      	beq.n	800e1d8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1c4:	e008      	b.n	800e1d8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800e1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	4013      	ands	r3, r2
 800e1ce:	69ba      	ldr	r2, [r7, #24]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d101      	bne.n	800e1d8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800e1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d010      	beq.n	800e200 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d003      	beq.n	800e1f0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800e1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800e1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e1fc:	f001 feb2 	bl	800ff64 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800e204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e206:	6a3b      	ldr	r3, [r7, #32]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d1be      	bne.n	800e18a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800e20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20e:	681a      	ldr	r2, [r3, #0]
 800e210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e212:	43db      	mvns	r3, r3
 800e214:	401a      	ands	r2, r3
 800e216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e218:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800e21a:	f001 fbe7 	bl	800f9ec <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800e21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e220:	681b      	ldr	r3, [r3, #0]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3738      	adds	r7, #56	; 0x38
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b082      	sub	sp, #8
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
 800e232:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800e234:	6839      	ldr	r1, [r7, #0]
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7ff ff6c 	bl	800e114 <xEventGroupSetBits>
}
 800e23c:	bf00      	nop
 800e23e:	3708      	adds	r7, #8
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800e244:	b480      	push	{r7}
 800e246:	b087      	sub	sp, #28
 800e248:	af00      	add	r7, sp, #0
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800e250:	2300      	movs	r3, #0
 800e252:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d107      	bne.n	800e26a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800e25a:	68fa      	ldr	r2, [r7, #12]
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	4013      	ands	r3, r2
 800e260:	2b00      	cmp	r3, #0
 800e262:	d00a      	beq.n	800e27a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e264:	2301      	movs	r3, #1
 800e266:	617b      	str	r3, [r7, #20]
 800e268:	e007      	b.n	800e27a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800e26a:	68fa      	ldr	r2, [r7, #12]
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	4013      	ands	r3, r2
 800e270:	68ba      	ldr	r2, [r7, #8]
 800e272:	429a      	cmp	r2, r3
 800e274:	d101      	bne.n	800e27a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e276:	2301      	movs	r3, #1
 800e278:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800e27a:	697b      	ldr	r3, [r7, #20]
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	371c      	adds	r7, #28
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b086      	sub	sp, #24
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	68ba      	ldr	r2, [r7, #8]
 800e298:	68f9      	ldr	r1, [r7, #12]
 800e29a:	4804      	ldr	r0, [pc, #16]	; (800e2ac <xEventGroupSetBitsFromISR+0x24>)
 800e29c:	f002 fd66 	bl	8010d6c <xTimerPendFunctionCallFromISR>
 800e2a0:	6178      	str	r0, [r7, #20]

		return xReturn;
 800e2a2:	697b      	ldr	r3, [r7, #20]
	}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3718      	adds	r7, #24
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	0800e22b 	.word	0x0800e22b

0800e2b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b083      	sub	sp, #12
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f103 0208 	add.w	r2, r3, #8
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f103 0208 	add.w	r2, r3, #8
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f103 0208 	add.w	r2, r3, #8
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e2e4:	bf00      	nop
 800e2e6:	370c      	adds	r7, #12
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b083      	sub	sp, #12
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e2fe:	bf00      	nop
 800e300:	370c      	adds	r7, #12
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr

0800e30a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e30a:	b480      	push	{r7}
 800e30c:	b085      	sub	sp, #20
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
 800e312:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	68fa      	ldr	r2, [r7, #12]
 800e31e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	689a      	ldr	r2, [r3, #8]
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	683a      	ldr	r2, [r7, #0]
 800e32e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	683a      	ldr	r2, [r7, #0]
 800e334:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	1c5a      	adds	r2, r3, #1
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	601a      	str	r2, [r3, #0]
}
 800e346:	bf00      	nop
 800e348:	3714      	adds	r7, #20
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr

0800e352 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e352:	b480      	push	{r7}
 800e354:	b085      	sub	sp, #20
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
 800e35a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e368:	d103      	bne.n	800e372 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	691b      	ldr	r3, [r3, #16]
 800e36e:	60fb      	str	r3, [r7, #12]
 800e370:	e00c      	b.n	800e38c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	3308      	adds	r3, #8
 800e376:	60fb      	str	r3, [r7, #12]
 800e378:	e002      	b.n	800e380 <vListInsert+0x2e>
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	60fb      	str	r3, [r7, #12]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	68ba      	ldr	r2, [r7, #8]
 800e388:	429a      	cmp	r2, r3
 800e38a:	d2f6      	bcs.n	800e37a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	685a      	ldr	r2, [r3, #4]
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	683a      	ldr	r2, [r7, #0]
 800e39a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	68fa      	ldr	r2, [r7, #12]
 800e3a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	683a      	ldr	r2, [r7, #0]
 800e3a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	1c5a      	adds	r2, r3, #1
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	601a      	str	r2, [r3, #0]
}
 800e3b8:	bf00      	nop
 800e3ba:	3714      	adds	r7, #20
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b085      	sub	sp, #20
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	691b      	ldr	r3, [r3, #16]
 800e3d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	6892      	ldr	r2, [r2, #8]
 800e3da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	689b      	ldr	r3, [r3, #8]
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	6852      	ldr	r2, [r2, #4]
 800e3e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	685b      	ldr	r3, [r3, #4]
 800e3ea:	687a      	ldr	r2, [r7, #4]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d103      	bne.n	800e3f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	689a      	ldr	r2, [r3, #8]
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	1e5a      	subs	r2, r3, #1
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3714      	adds	r7, #20
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10a      	bne.n	800e442 <xQueueGenericReset+0x2a>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e430:	f383 8811 	msr	BASEPRI, r3
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	60bb      	str	r3, [r7, #8]
}
 800e43e:	bf00      	nop
 800e440:	e7fe      	b.n	800e440 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e442:	f002 fddf 	bl	8011004 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e44e:	68f9      	ldr	r1, [r7, #12]
 800e450:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e452:	fb01 f303 	mul.w	r3, r1, r3
 800e456:	441a      	add	r2, r3
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2200      	movs	r2, #0
 800e460:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e472:	3b01      	subs	r3, #1
 800e474:	68f9      	ldr	r1, [r7, #12]
 800e476:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e478:	fb01 f303 	mul.w	r3, r1, r3
 800e47c:	441a      	add	r2, r3
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	22ff      	movs	r2, #255	; 0xff
 800e486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	22ff      	movs	r2, #255	; 0xff
 800e48e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d114      	bne.n	800e4c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	691b      	ldr	r3, [r3, #16]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d01a      	beq.n	800e4d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	3310      	adds	r3, #16
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f001 fcf9 	bl	800fe9c <xTaskRemoveFromEventList>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d012      	beq.n	800e4d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e4b0:	4b0c      	ldr	r3, [pc, #48]	; (800e4e4 <xQueueGenericReset+0xcc>)
 800e4b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4b6:	601a      	str	r2, [r3, #0]
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	e009      	b.n	800e4d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	3310      	adds	r3, #16
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7ff fef2 	bl	800e2b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	3324      	adds	r3, #36	; 0x24
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7ff feed 	bl	800e2b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e4d6:	f002 fdc5 	bl	8011064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e4da:	2301      	movs	r3, #1
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3710      	adds	r7, #16
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	e000ed04 	.word	0xe000ed04

0800e4e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b08e      	sub	sp, #56	; 0x38
 800e4ec:	af02      	add	r7, sp, #8
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
 800e4f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d10a      	bne.n	800e512 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e500:	f383 8811 	msr	BASEPRI, r3
 800e504:	f3bf 8f6f 	isb	sy
 800e508:	f3bf 8f4f 	dsb	sy
 800e50c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e50e:	bf00      	nop
 800e510:	e7fe      	b.n	800e510 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d10a      	bne.n	800e52e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51c:	f383 8811 	msr	BASEPRI, r3
 800e520:	f3bf 8f6f 	isb	sy
 800e524:	f3bf 8f4f 	dsb	sy
 800e528:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e52a:	bf00      	nop
 800e52c:	e7fe      	b.n	800e52c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d002      	beq.n	800e53a <xQueueGenericCreateStatic+0x52>
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d001      	beq.n	800e53e <xQueueGenericCreateStatic+0x56>
 800e53a:	2301      	movs	r3, #1
 800e53c:	e000      	b.n	800e540 <xQueueGenericCreateStatic+0x58>
 800e53e:	2300      	movs	r3, #0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d10a      	bne.n	800e55a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e548:	f383 8811 	msr	BASEPRI, r3
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	f3bf 8f4f 	dsb	sy
 800e554:	623b      	str	r3, [r7, #32]
}
 800e556:	bf00      	nop
 800e558:	e7fe      	b.n	800e558 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d102      	bne.n	800e566 <xQueueGenericCreateStatic+0x7e>
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d101      	bne.n	800e56a <xQueueGenericCreateStatic+0x82>
 800e566:	2301      	movs	r3, #1
 800e568:	e000      	b.n	800e56c <xQueueGenericCreateStatic+0x84>
 800e56a:	2300      	movs	r3, #0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d10a      	bne.n	800e586 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e574:	f383 8811 	msr	BASEPRI, r3
 800e578:	f3bf 8f6f 	isb	sy
 800e57c:	f3bf 8f4f 	dsb	sy
 800e580:	61fb      	str	r3, [r7, #28]
}
 800e582:	bf00      	nop
 800e584:	e7fe      	b.n	800e584 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e586:	2350      	movs	r3, #80	; 0x50
 800e588:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	2b50      	cmp	r3, #80	; 0x50
 800e58e:	d00a      	beq.n	800e5a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	61bb      	str	r3, [r7, #24]
}
 800e5a2:	bf00      	nop
 800e5a4:	e7fe      	b.n	800e5a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e5a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d00d      	beq.n	800e5ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e5ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	68b9      	ldr	r1, [r7, #8]
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	f000 f83f 	bl	800e64c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3730      	adds	r7, #48	; 0x30
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b08a      	sub	sp, #40	; 0x28
 800e5dc:	af02      	add	r7, sp, #8
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d10a      	bne.n	800e602 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	613b      	str	r3, [r7, #16]
}
 800e5fe:	bf00      	nop
 800e600:	e7fe      	b.n	800e600 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	68ba      	ldr	r2, [r7, #8]
 800e606:	fb02 f303 	mul.w	r3, r2, r3
 800e60a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	3350      	adds	r3, #80	; 0x50
 800e610:	4618      	mov	r0, r3
 800e612:	f002 fe19 	bl	8011248 <pvPortMalloc>
 800e616:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e618:	69bb      	ldr	r3, [r7, #24]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d011      	beq.n	800e642 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e61e:	69bb      	ldr	r3, [r7, #24]
 800e620:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	3350      	adds	r3, #80	; 0x50
 800e626:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e630:	79fa      	ldrb	r2, [r7, #7]
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	9300      	str	r3, [sp, #0]
 800e636:	4613      	mov	r3, r2
 800e638:	697a      	ldr	r2, [r7, #20]
 800e63a:	68b9      	ldr	r1, [r7, #8]
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f000 f805 	bl	800e64c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e642:	69bb      	ldr	r3, [r7, #24]
	}
 800e644:	4618      	mov	r0, r3
 800e646:	3720      	adds	r7, #32
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	607a      	str	r2, [r7, #4]
 800e658:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d103      	bne.n	800e668 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	69ba      	ldr	r2, [r7, #24]
 800e664:	601a      	str	r2, [r3, #0]
 800e666:	e002      	b.n	800e66e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	68ba      	ldr	r2, [r7, #8]
 800e678:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e67a:	2101      	movs	r1, #1
 800e67c:	69b8      	ldr	r0, [r7, #24]
 800e67e:	f7ff fecb 	bl	800e418 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	78fa      	ldrb	r2, [r7, #3]
 800e686:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e68a:	bf00      	nop
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e692:	b580      	push	{r7, lr}
 800e694:	b08a      	sub	sp, #40	; 0x28
 800e696:	af02      	add	r7, sp, #8
 800e698:	60f8      	str	r0, [r7, #12]
 800e69a:	60b9      	str	r1, [r7, #8]
 800e69c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d10a      	bne.n	800e6ba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a8:	f383 8811 	msr	BASEPRI, r3
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f3bf 8f4f 	dsb	sy
 800e6b4:	61bb      	str	r3, [r7, #24]
}
 800e6b6:	bf00      	nop
 800e6b8:	e7fe      	b.n	800e6b8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d90a      	bls.n	800e6d8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	617b      	str	r3, [r7, #20]
}
 800e6d4:	bf00      	nop
 800e6d6:	e7fe      	b.n	800e6d6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e6d8:	2302      	movs	r3, #2
 800e6da:	9300      	str	r3, [sp, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f7ff ff00 	bl	800e4e8 <xQueueGenericCreateStatic>
 800e6e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d002      	beq.n	800e6f6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	68ba      	ldr	r2, [r7, #8]
 800e6f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e6f6:	69fb      	ldr	r3, [r7, #28]
	}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3720      	adds	r7, #32
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e700:	b580      	push	{r7, lr}
 800e702:	b086      	sub	sp, #24
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d10a      	bne.n	800e726 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e714:	f383 8811 	msr	BASEPRI, r3
 800e718:	f3bf 8f6f 	isb	sy
 800e71c:	f3bf 8f4f 	dsb	sy
 800e720:	613b      	str	r3, [r7, #16]
}
 800e722:	bf00      	nop
 800e724:	e7fe      	b.n	800e724 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e726:	683a      	ldr	r2, [r7, #0]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d90a      	bls.n	800e744 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	60fb      	str	r3, [r7, #12]
}
 800e740:	bf00      	nop
 800e742:	e7fe      	b.n	800e742 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e744:	2202      	movs	r2, #2
 800e746:	2100      	movs	r1, #0
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7ff ff45 	bl	800e5d8 <xQueueGenericCreate>
 800e74e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d002      	beq.n	800e75c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	683a      	ldr	r2, [r7, #0]
 800e75a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e75c:	697b      	ldr	r3, [r7, #20]
	}
 800e75e:	4618      	mov	r0, r3
 800e760:	3718      	adds	r7, #24
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
	...

0800e768 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b08e      	sub	sp, #56	; 0x38
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
 800e774:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e776:	2300      	movs	r3, #0
 800e778:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e780:	2b00      	cmp	r3, #0
 800e782:	d10a      	bne.n	800e79a <xQueueGenericSend+0x32>
	__asm volatile
 800e784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e796:	bf00      	nop
 800e798:	e7fe      	b.n	800e798 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d103      	bne.n	800e7a8 <xQueueGenericSend+0x40>
 800e7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d101      	bne.n	800e7ac <xQueueGenericSend+0x44>
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	e000      	b.n	800e7ae <xQueueGenericSend+0x46>
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d10a      	bne.n	800e7c8 <xQueueGenericSend+0x60>
	__asm volatile
 800e7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b6:	f383 8811 	msr	BASEPRI, r3
 800e7ba:	f3bf 8f6f 	isb	sy
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e7c4:	bf00      	nop
 800e7c6:	e7fe      	b.n	800e7c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	2b02      	cmp	r3, #2
 800e7cc:	d103      	bne.n	800e7d6 <xQueueGenericSend+0x6e>
 800e7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d101      	bne.n	800e7da <xQueueGenericSend+0x72>
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	e000      	b.n	800e7dc <xQueueGenericSend+0x74>
 800e7da:	2300      	movs	r3, #0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10a      	bne.n	800e7f6 <xQueueGenericSend+0x8e>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	623b      	str	r3, [r7, #32]
}
 800e7f2:	bf00      	nop
 800e7f4:	e7fe      	b.n	800e7f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e7f6:	f001 fd75 	bl	80102e4 <xTaskGetSchedulerState>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d102      	bne.n	800e806 <xQueueGenericSend+0x9e>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <xQueueGenericSend+0xa2>
 800e806:	2301      	movs	r3, #1
 800e808:	e000      	b.n	800e80c <xQueueGenericSend+0xa4>
 800e80a:	2300      	movs	r3, #0
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d10a      	bne.n	800e826 <xQueueGenericSend+0xbe>
	__asm volatile
 800e810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e814:	f383 8811 	msr	BASEPRI, r3
 800e818:	f3bf 8f6f 	isb	sy
 800e81c:	f3bf 8f4f 	dsb	sy
 800e820:	61fb      	str	r3, [r7, #28]
}
 800e822:	bf00      	nop
 800e824:	e7fe      	b.n	800e824 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e826:	f002 fbed 	bl	8011004 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e832:	429a      	cmp	r2, r3
 800e834:	d302      	bcc.n	800e83c <xQueueGenericSend+0xd4>
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	2b02      	cmp	r3, #2
 800e83a:	d129      	bne.n	800e890 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e83c:	683a      	ldr	r2, [r7, #0]
 800e83e:	68b9      	ldr	r1, [r7, #8]
 800e840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e842:	f000 fc5e 	bl	800f102 <prvCopyDataToQueue>
 800e846:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d010      	beq.n	800e872 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e852:	3324      	adds	r3, #36	; 0x24
 800e854:	4618      	mov	r0, r3
 800e856:	f001 fb21 	bl	800fe9c <xTaskRemoveFromEventList>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d013      	beq.n	800e888 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e860:	4b3f      	ldr	r3, [pc, #252]	; (800e960 <xQueueGenericSend+0x1f8>)
 800e862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e866:	601a      	str	r2, [r3, #0]
 800e868:	f3bf 8f4f 	dsb	sy
 800e86c:	f3bf 8f6f 	isb	sy
 800e870:	e00a      	b.n	800e888 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e874:	2b00      	cmp	r3, #0
 800e876:	d007      	beq.n	800e888 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e878:	4b39      	ldr	r3, [pc, #228]	; (800e960 <xQueueGenericSend+0x1f8>)
 800e87a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e87e:	601a      	str	r2, [r3, #0]
 800e880:	f3bf 8f4f 	dsb	sy
 800e884:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e888:	f002 fbec 	bl	8011064 <vPortExitCritical>
				return pdPASS;
 800e88c:	2301      	movs	r3, #1
 800e88e:	e063      	b.n	800e958 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d103      	bne.n	800e89e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e896:	f002 fbe5 	bl	8011064 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e89a:	2300      	movs	r3, #0
 800e89c:	e05c      	b.n	800e958 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d106      	bne.n	800e8b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e8a4:	f107 0314 	add.w	r3, r7, #20
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f001 fbbd 	bl	8010028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e8b2:	f002 fbd7 	bl	8011064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e8b6:	f001 f88b 	bl	800f9d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e8ba:	f002 fba3 	bl	8011004 <vPortEnterCritical>
 800e8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8c4:	b25b      	sxtb	r3, r3
 800e8c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8ca:	d103      	bne.n	800e8d4 <xQueueGenericSend+0x16c>
 800e8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8da:	b25b      	sxtb	r3, r3
 800e8dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8e0:	d103      	bne.n	800e8ea <xQueueGenericSend+0x182>
 800e8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8ea:	f002 fbbb 	bl	8011064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e8ee:	1d3a      	adds	r2, r7, #4
 800e8f0:	f107 0314 	add.w	r3, r7, #20
 800e8f4:	4611      	mov	r1, r2
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f001 fbac 	bl	8010054 <xTaskCheckForTimeOut>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d124      	bne.n	800e94c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e904:	f000 fcf5 	bl	800f2f2 <prvIsQueueFull>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d018      	beq.n	800e940 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e910:	3310      	adds	r3, #16
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	4611      	mov	r1, r2
 800e916:	4618      	mov	r0, r3
 800e918:	f001 fa34 	bl	800fd84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e91c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e91e:	f000 fc80 	bl	800f222 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e922:	f001 f863 	bl	800f9ec <xTaskResumeAll>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f47f af7c 	bne.w	800e826 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e92e:	4b0c      	ldr	r3, [pc, #48]	; (800e960 <xQueueGenericSend+0x1f8>)
 800e930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e934:	601a      	str	r2, [r3, #0]
 800e936:	f3bf 8f4f 	dsb	sy
 800e93a:	f3bf 8f6f 	isb	sy
 800e93e:	e772      	b.n	800e826 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e942:	f000 fc6e 	bl	800f222 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e946:	f001 f851 	bl	800f9ec <xTaskResumeAll>
 800e94a:	e76c      	b.n	800e826 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e94c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e94e:	f000 fc68 	bl	800f222 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e952:	f001 f84b 	bl	800f9ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e956:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3738      	adds	r7, #56	; 0x38
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	e000ed04 	.word	0xe000ed04

0800e964 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b090      	sub	sp, #64	; 0x40
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	607a      	str	r2, [r7, #4]
 800e970:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10a      	bne.n	800e992 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e98e:	bf00      	nop
 800e990:	e7fe      	b.n	800e990 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d103      	bne.n	800e9a0 <xQueueGenericSendFromISR+0x3c>
 800e998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d101      	bne.n	800e9a4 <xQueueGenericSendFromISR+0x40>
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	e000      	b.n	800e9a6 <xQueueGenericSendFromISR+0x42>
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d10a      	bne.n	800e9c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ae:	f383 8811 	msr	BASEPRI, r3
 800e9b2:	f3bf 8f6f 	isb	sy
 800e9b6:	f3bf 8f4f 	dsb	sy
 800e9ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e9bc:	bf00      	nop
 800e9be:	e7fe      	b.n	800e9be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	2b02      	cmp	r3, #2
 800e9c4:	d103      	bne.n	800e9ce <xQueueGenericSendFromISR+0x6a>
 800e9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	d101      	bne.n	800e9d2 <xQueueGenericSendFromISR+0x6e>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	e000      	b.n	800e9d4 <xQueueGenericSendFromISR+0x70>
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d10a      	bne.n	800e9ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9dc:	f383 8811 	msr	BASEPRI, r3
 800e9e0:	f3bf 8f6f 	isb	sy
 800e9e4:	f3bf 8f4f 	dsb	sy
 800e9e8:	623b      	str	r3, [r7, #32]
}
 800e9ea:	bf00      	nop
 800e9ec:	e7fe      	b.n	800e9ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e9ee:	f002 fbeb 	bl	80111c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e9f2:	f3ef 8211 	mrs	r2, BASEPRI
 800e9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9fa:	f383 8811 	msr	BASEPRI, r3
 800e9fe:	f3bf 8f6f 	isb	sy
 800ea02:	f3bf 8f4f 	dsb	sy
 800ea06:	61fa      	str	r2, [r7, #28]
 800ea08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ea0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d302      	bcc.n	800ea20 <xQueueGenericSendFromISR+0xbc>
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	d12f      	bne.n	800ea80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ea20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea30:	683a      	ldr	r2, [r7, #0]
 800ea32:	68b9      	ldr	r1, [r7, #8]
 800ea34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea36:	f000 fb64 	bl	800f102 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ea3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ea3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea42:	d112      	bne.n	800ea6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d016      	beq.n	800ea7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4e:	3324      	adds	r3, #36	; 0x24
 800ea50:	4618      	mov	r0, r3
 800ea52:	f001 fa23 	bl	800fe9c <xTaskRemoveFromEventList>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d00e      	beq.n	800ea7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00b      	beq.n	800ea7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2201      	movs	r2, #1
 800ea66:	601a      	str	r2, [r3, #0]
 800ea68:	e007      	b.n	800ea7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ea6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ea6e:	3301      	adds	r3, #1
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	b25a      	sxtb	r2, r3
 800ea74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ea7e:	e001      	b.n	800ea84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ea80:	2300      	movs	r3, #0
 800ea82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ea8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3740      	adds	r7, #64	; 0x40
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b08e      	sub	sp, #56	; 0x38
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
 800eaa2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800eaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d10a      	bne.n	800eac4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800eaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab2:	f383 8811 	msr	BASEPRI, r3
 800eab6:	f3bf 8f6f 	isb	sy
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	623b      	str	r3, [r7, #32]
}
 800eac0:	bf00      	nop
 800eac2:	e7fe      	b.n	800eac2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d00a      	beq.n	800eae2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800eacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead0:	f383 8811 	msr	BASEPRI, r3
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	61fb      	str	r3, [r7, #28]
}
 800eade:	bf00      	nop
 800eae0:	e7fe      	b.n	800eae0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800eae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d103      	bne.n	800eaf2 <xQueueGiveFromISR+0x58>
 800eaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d101      	bne.n	800eaf6 <xQueueGiveFromISR+0x5c>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e000      	b.n	800eaf8 <xQueueGiveFromISR+0x5e>
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10a      	bne.n	800eb12 <xQueueGiveFromISR+0x78>
	__asm volatile
 800eafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb00:	f383 8811 	msr	BASEPRI, r3
 800eb04:	f3bf 8f6f 	isb	sy
 800eb08:	f3bf 8f4f 	dsb	sy
 800eb0c:	61bb      	str	r3, [r7, #24]
}
 800eb0e:	bf00      	nop
 800eb10:	e7fe      	b.n	800eb10 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb12:	f002 fb59 	bl	80111c8 <vPortValidateInterruptPriority>
	__asm volatile
 800eb16:	f3ef 8211 	mrs	r2, BASEPRI
 800eb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb1e:	f383 8811 	msr	BASEPRI, r3
 800eb22:	f3bf 8f6f 	isb	sy
 800eb26:	f3bf 8f4f 	dsb	sy
 800eb2a:	617a      	str	r2, [r7, #20]
 800eb2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800eb2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800eb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d22b      	bcs.n	800eb9a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4e:	1c5a      	adds	r2, r3, #1
 800eb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eb54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb5c:	d112      	bne.n	800eb84 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d016      	beq.n	800eb94 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb68:	3324      	adds	r3, #36	; 0x24
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f001 f996 	bl	800fe9c <xTaskRemoveFromEventList>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00e      	beq.n	800eb94 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d00b      	beq.n	800eb94 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	2201      	movs	r2, #1
 800eb80:	601a      	str	r2, [r3, #0]
 800eb82:	e007      	b.n	800eb94 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eb84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb88:	3301      	adds	r3, #1
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	b25a      	sxtb	r2, r3
 800eb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eb94:	2301      	movs	r3, #1
 800eb96:	637b      	str	r3, [r7, #52]	; 0x34
 800eb98:	e001      	b.n	800eb9e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	637b      	str	r3, [r7, #52]	; 0x34
 800eb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f383 8811 	msr	BASEPRI, r3
}
 800eba8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ebaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3738      	adds	r7, #56	; 0x38
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b08c      	sub	sp, #48	; 0x30
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ebc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d10a      	bne.n	800ebe4 <xQueueReceive+0x30>
	__asm volatile
 800ebce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd2:	f383 8811 	msr	BASEPRI, r3
 800ebd6:	f3bf 8f6f 	isb	sy
 800ebda:	f3bf 8f4f 	dsb	sy
 800ebde:	623b      	str	r3, [r7, #32]
}
 800ebe0:	bf00      	nop
 800ebe2:	e7fe      	b.n	800ebe2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d103      	bne.n	800ebf2 <xQueueReceive+0x3e>
 800ebea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d101      	bne.n	800ebf6 <xQueueReceive+0x42>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	e000      	b.n	800ebf8 <xQueueReceive+0x44>
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d10a      	bne.n	800ec12 <xQueueReceive+0x5e>
	__asm volatile
 800ebfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec00:	f383 8811 	msr	BASEPRI, r3
 800ec04:	f3bf 8f6f 	isb	sy
 800ec08:	f3bf 8f4f 	dsb	sy
 800ec0c:	61fb      	str	r3, [r7, #28]
}
 800ec0e:	bf00      	nop
 800ec10:	e7fe      	b.n	800ec10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec12:	f001 fb67 	bl	80102e4 <xTaskGetSchedulerState>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d102      	bne.n	800ec22 <xQueueReceive+0x6e>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d101      	bne.n	800ec26 <xQueueReceive+0x72>
 800ec22:	2301      	movs	r3, #1
 800ec24:	e000      	b.n	800ec28 <xQueueReceive+0x74>
 800ec26:	2300      	movs	r3, #0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d10a      	bne.n	800ec42 <xQueueReceive+0x8e>
	__asm volatile
 800ec2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec30:	f383 8811 	msr	BASEPRI, r3
 800ec34:	f3bf 8f6f 	isb	sy
 800ec38:	f3bf 8f4f 	dsb	sy
 800ec3c:	61bb      	str	r3, [r7, #24]
}
 800ec3e:	bf00      	nop
 800ec40:	e7fe      	b.n	800ec40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec42:	f002 f9df 	bl	8011004 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d01f      	beq.n	800ec92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ec52:	68b9      	ldr	r1, [r7, #8]
 800ec54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec56:	f000 fabe 	bl	800f1d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ec5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5c:	1e5a      	subs	r2, r3, #1
 800ec5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec64:	691b      	ldr	r3, [r3, #16]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d00f      	beq.n	800ec8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6c:	3310      	adds	r3, #16
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f001 f914 	bl	800fe9c <xTaskRemoveFromEventList>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d007      	beq.n	800ec8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ec7a:	4b3d      	ldr	r3, [pc, #244]	; (800ed70 <xQueueReceive+0x1bc>)
 800ec7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec80:	601a      	str	r2, [r3, #0]
 800ec82:	f3bf 8f4f 	dsb	sy
 800ec86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ec8a:	f002 f9eb 	bl	8011064 <vPortExitCritical>
				return pdPASS;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e069      	b.n	800ed66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d103      	bne.n	800eca0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec98:	f002 f9e4 	bl	8011064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	e062      	b.n	800ed66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d106      	bne.n	800ecb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eca6:	f107 0310 	add.w	r3, r7, #16
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f001 f9bc 	bl	8010028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ecb4:	f002 f9d6 	bl	8011064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ecb8:	f000 fe8a 	bl	800f9d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ecbc:	f002 f9a2 	bl	8011004 <vPortEnterCritical>
 800ecc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ecc6:	b25b      	sxtb	r3, r3
 800ecc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eccc:	d103      	bne.n	800ecd6 <xQueueReceive+0x122>
 800ecce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ecd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecdc:	b25b      	sxtb	r3, r3
 800ecde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ece2:	d103      	bne.n	800ecec <xQueueReceive+0x138>
 800ece4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece6:	2200      	movs	r2, #0
 800ece8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ecec:	f002 f9ba 	bl	8011064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ecf0:	1d3a      	adds	r2, r7, #4
 800ecf2:	f107 0310 	add.w	r3, r7, #16
 800ecf6:	4611      	mov	r1, r2
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f001 f9ab 	bl	8010054 <xTaskCheckForTimeOut>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d123      	bne.n	800ed4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed06:	f000 fade 	bl	800f2c6 <prvIsQueueEmpty>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d017      	beq.n	800ed40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ed10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed12:	3324      	adds	r3, #36	; 0x24
 800ed14:	687a      	ldr	r2, [r7, #4]
 800ed16:	4611      	mov	r1, r2
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f001 f833 	bl	800fd84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ed1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed20:	f000 fa7f 	bl	800f222 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ed24:	f000 fe62 	bl	800f9ec <xTaskResumeAll>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d189      	bne.n	800ec42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ed2e:	4b10      	ldr	r3, [pc, #64]	; (800ed70 <xQueueReceive+0x1bc>)
 800ed30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed34:	601a      	str	r2, [r3, #0]
 800ed36:	f3bf 8f4f 	dsb	sy
 800ed3a:	f3bf 8f6f 	isb	sy
 800ed3e:	e780      	b.n	800ec42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ed40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed42:	f000 fa6e 	bl	800f222 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed46:	f000 fe51 	bl	800f9ec <xTaskResumeAll>
 800ed4a:	e77a      	b.n	800ec42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ed4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed4e:	f000 fa68 	bl	800f222 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed52:	f000 fe4b 	bl	800f9ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed58:	f000 fab5 	bl	800f2c6 <prvIsQueueEmpty>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	f43f af6f 	beq.w	800ec42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ed64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3730      	adds	r7, #48	; 0x30
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	e000ed04 	.word	0xe000ed04

0800ed74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b08e      	sub	sp, #56	; 0x38
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ed86:	2300      	movs	r3, #0
 800ed88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ed8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d10a      	bne.n	800eda6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ed90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed94:	f383 8811 	msr	BASEPRI, r3
 800ed98:	f3bf 8f6f 	isb	sy
 800ed9c:	f3bf 8f4f 	dsb	sy
 800eda0:	623b      	str	r3, [r7, #32]
}
 800eda2:	bf00      	nop
 800eda4:	e7fe      	b.n	800eda4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d00a      	beq.n	800edc4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800edae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb2:	f383 8811 	msr	BASEPRI, r3
 800edb6:	f3bf 8f6f 	isb	sy
 800edba:	f3bf 8f4f 	dsb	sy
 800edbe:	61fb      	str	r3, [r7, #28]
}
 800edc0:	bf00      	nop
 800edc2:	e7fe      	b.n	800edc2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800edc4:	f001 fa8e 	bl	80102e4 <xTaskGetSchedulerState>
 800edc8:	4603      	mov	r3, r0
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d102      	bne.n	800edd4 <xQueueSemaphoreTake+0x60>
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d101      	bne.n	800edd8 <xQueueSemaphoreTake+0x64>
 800edd4:	2301      	movs	r3, #1
 800edd6:	e000      	b.n	800edda <xQueueSemaphoreTake+0x66>
 800edd8:	2300      	movs	r3, #0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d10a      	bne.n	800edf4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800edde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede2:	f383 8811 	msr	BASEPRI, r3
 800ede6:	f3bf 8f6f 	isb	sy
 800edea:	f3bf 8f4f 	dsb	sy
 800edee:	61bb      	str	r3, [r7, #24]
}
 800edf0:	bf00      	nop
 800edf2:	e7fe      	b.n	800edf2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800edf4:	f002 f906 	bl	8011004 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800edf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edfc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800edfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d024      	beq.n	800ee4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ee04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee06:	1e5a      	subs	r2, r3, #1
 800ee08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d104      	bne.n	800ee1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ee14:	f001 fbf4 	bl	8010600 <pvTaskIncrementMutexHeldCount>
 800ee18:	4602      	mov	r2, r0
 800ee1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee20:	691b      	ldr	r3, [r3, #16]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00f      	beq.n	800ee46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee28:	3310      	adds	r3, #16
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f001 f836 	bl	800fe9c <xTaskRemoveFromEventList>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d007      	beq.n	800ee46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ee36:	4b54      	ldr	r3, [pc, #336]	; (800ef88 <xQueueSemaphoreTake+0x214>)
 800ee38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee3c:	601a      	str	r2, [r3, #0]
 800ee3e:	f3bf 8f4f 	dsb	sy
 800ee42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ee46:	f002 f90d 	bl	8011064 <vPortExitCritical>
				return pdPASS;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	e097      	b.n	800ef7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d111      	bne.n	800ee78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ee54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00a      	beq.n	800ee70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ee5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5e:	f383 8811 	msr	BASEPRI, r3
 800ee62:	f3bf 8f6f 	isb	sy
 800ee66:	f3bf 8f4f 	dsb	sy
 800ee6a:	617b      	str	r3, [r7, #20]
}
 800ee6c:	bf00      	nop
 800ee6e:	e7fe      	b.n	800ee6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ee70:	f002 f8f8 	bl	8011064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ee74:	2300      	movs	r3, #0
 800ee76:	e082      	b.n	800ef7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d106      	bne.n	800ee8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee7e:	f107 030c 	add.w	r3, r7, #12
 800ee82:	4618      	mov	r0, r3
 800ee84:	f001 f8d0 	bl	8010028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee8c:	f002 f8ea 	bl	8011064 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee90:	f000 fd9e 	bl	800f9d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee94:	f002 f8b6 	bl	8011004 <vPortEnterCritical>
 800ee98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee9e:	b25b      	sxtb	r3, r3
 800eea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eea4:	d103      	bne.n	800eeae <xQueueSemaphoreTake+0x13a>
 800eea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eeae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eeb4:	b25b      	sxtb	r3, r3
 800eeb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eeba:	d103      	bne.n	800eec4 <xQueueSemaphoreTake+0x150>
 800eebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eebe:	2200      	movs	r2, #0
 800eec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eec4:	f002 f8ce 	bl	8011064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eec8:	463a      	mov	r2, r7
 800eeca:	f107 030c 	add.w	r3, r7, #12
 800eece:	4611      	mov	r1, r2
 800eed0:	4618      	mov	r0, r3
 800eed2:	f001 f8bf 	bl	8010054 <xTaskCheckForTimeOut>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d132      	bne.n	800ef42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eedc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eede:	f000 f9f2 	bl	800f2c6 <prvIsQueueEmpty>
 800eee2:	4603      	mov	r3, r0
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d026      	beq.n	800ef36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d109      	bne.n	800ef04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800eef0:	f002 f888 	bl	8011004 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef6:	689b      	ldr	r3, [r3, #8]
 800eef8:	4618      	mov	r0, r3
 800eefa:	f001 fa11 	bl	8010320 <xTaskPriorityInherit>
 800eefe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ef00:	f002 f8b0 	bl	8011064 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef06:	3324      	adds	r3, #36	; 0x24
 800ef08:	683a      	ldr	r2, [r7, #0]
 800ef0a:	4611      	mov	r1, r2
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f000 ff39 	bl	800fd84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef14:	f000 f985 	bl	800f222 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef18:	f000 fd68 	bl	800f9ec <xTaskResumeAll>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	f47f af68 	bne.w	800edf4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ef24:	4b18      	ldr	r3, [pc, #96]	; (800ef88 <xQueueSemaphoreTake+0x214>)
 800ef26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef2a:	601a      	str	r2, [r3, #0]
 800ef2c:	f3bf 8f4f 	dsb	sy
 800ef30:	f3bf 8f6f 	isb	sy
 800ef34:	e75e      	b.n	800edf4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ef36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef38:	f000 f973 	bl	800f222 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef3c:	f000 fd56 	bl	800f9ec <xTaskResumeAll>
 800ef40:	e758      	b.n	800edf4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ef42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef44:	f000 f96d 	bl	800f222 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef48:	f000 fd50 	bl	800f9ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef4e:	f000 f9ba 	bl	800f2c6 <prvIsQueueEmpty>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	f43f af4d 	beq.w	800edf4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ef5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d00d      	beq.n	800ef7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ef60:	f002 f850 	bl	8011004 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ef64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef66:	f000 f8b4 	bl	800f0d2 <prvGetDisinheritPriorityAfterTimeout>
 800ef6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ef6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6e:	689b      	ldr	r3, [r3, #8]
 800ef70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef72:	4618      	mov	r0, r3
 800ef74:	f001 faaa 	bl	80104cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ef78:	f002 f874 	bl	8011064 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ef7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3738      	adds	r7, #56	; 0x38
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	e000ed04 	.word	0xe000ed04

0800ef8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b08e      	sub	sp, #56	; 0x38
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ef9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d10a      	bne.n	800efb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800efa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa6:	f383 8811 	msr	BASEPRI, r3
 800efaa:	f3bf 8f6f 	isb	sy
 800efae:	f3bf 8f4f 	dsb	sy
 800efb2:	623b      	str	r3, [r7, #32]
}
 800efb4:	bf00      	nop
 800efb6:	e7fe      	b.n	800efb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d103      	bne.n	800efc6 <xQueueReceiveFromISR+0x3a>
 800efbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d101      	bne.n	800efca <xQueueReceiveFromISR+0x3e>
 800efc6:	2301      	movs	r3, #1
 800efc8:	e000      	b.n	800efcc <xQueueReceiveFromISR+0x40>
 800efca:	2300      	movs	r3, #0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d10a      	bne.n	800efe6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800efd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd4:	f383 8811 	msr	BASEPRI, r3
 800efd8:	f3bf 8f6f 	isb	sy
 800efdc:	f3bf 8f4f 	dsb	sy
 800efe0:	61fb      	str	r3, [r7, #28]
}
 800efe2:	bf00      	nop
 800efe4:	e7fe      	b.n	800efe4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800efe6:	f002 f8ef 	bl	80111c8 <vPortValidateInterruptPriority>
	__asm volatile
 800efea:	f3ef 8211 	mrs	r2, BASEPRI
 800efee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff2:	f383 8811 	msr	BASEPRI, r3
 800eff6:	f3bf 8f6f 	isb	sy
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	61ba      	str	r2, [r7, #24]
 800f000:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f002:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f004:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f00a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d02f      	beq.n	800f072 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f01c:	68b9      	ldr	r1, [r7, #8]
 800f01e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f020:	f000 f8d9 	bl	800f1d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f026:	1e5a      	subs	r2, r3, #1
 800f028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f02c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f034:	d112      	bne.n	800f05c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f038:	691b      	ldr	r3, [r3, #16]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d016      	beq.n	800f06c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f040:	3310      	adds	r3, #16
 800f042:	4618      	mov	r0, r3
 800f044:	f000 ff2a 	bl	800fe9c <xTaskRemoveFromEventList>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00e      	beq.n	800f06c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d00b      	beq.n	800f06c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2201      	movs	r2, #1
 800f058:	601a      	str	r2, [r3, #0]
 800f05a:	e007      	b.n	800f06c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f05c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f060:	3301      	adds	r3, #1
 800f062:	b2db      	uxtb	r3, r3
 800f064:	b25a      	sxtb	r2, r3
 800f066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f06c:	2301      	movs	r3, #1
 800f06e:	637b      	str	r3, [r7, #52]	; 0x34
 800f070:	e001      	b.n	800f076 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f072:	2300      	movs	r3, #0
 800f074:	637b      	str	r3, [r7, #52]	; 0x34
 800f076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f078:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	f383 8811 	msr	BASEPRI, r3
}
 800f080:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f084:	4618      	mov	r0, r3
 800f086:	3738      	adds	r7, #56	; 0x38
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}

0800f08c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b084      	sub	sp, #16
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d10a      	bne.n	800f0b4 <vQueueDelete+0x28>
	__asm volatile
 800f09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a2:	f383 8811 	msr	BASEPRI, r3
 800f0a6:	f3bf 8f6f 	isb	sy
 800f0aa:	f3bf 8f4f 	dsb	sy
 800f0ae:	60bb      	str	r3, [r7, #8]
}
 800f0b0:	bf00      	nop
 800f0b2:	e7fe      	b.n	800f0b2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f0b4:	68f8      	ldr	r0, [r7, #12]
 800f0b6:	f000 f95f 	bl	800f378 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d102      	bne.n	800f0ca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f0c4:	68f8      	ldr	r0, [r7, #12]
 800f0c6:	f002 f98b 	bl	80113e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f0ca:	bf00      	nop
 800f0cc:	3710      	adds	r7, #16
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}

0800f0d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f0d2:	b480      	push	{r7}
 800f0d4:	b085      	sub	sp, #20
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d006      	beq.n	800f0f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f0ec:	60fb      	str	r3, [r7, #12]
 800f0ee:	e001      	b.n	800f0f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
	}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3714      	adds	r7, #20
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr

0800f102 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f102:	b580      	push	{r7, lr}
 800f104:	b086      	sub	sp, #24
 800f106:	af00      	add	r7, sp, #0
 800f108:	60f8      	str	r0, [r7, #12]
 800f10a:	60b9      	str	r1, [r7, #8]
 800f10c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f10e:	2300      	movs	r3, #0
 800f110:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f116:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d10d      	bne.n	800f13c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d14d      	bne.n	800f1c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	4618      	mov	r0, r3
 800f12e:	f001 f95f 	bl	80103f0 <xTaskPriorityDisinherit>
 800f132:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2200      	movs	r2, #0
 800f138:	609a      	str	r2, [r3, #8]
 800f13a:	e043      	b.n	800f1c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d119      	bne.n	800f176 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	6858      	ldr	r0, [r3, #4]
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f14a:	461a      	mov	r2, r3
 800f14c:	68b9      	ldr	r1, [r7, #8]
 800f14e:	f00a ff2d 	bl	8019fac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	685a      	ldr	r2, [r3, #4]
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f15a:	441a      	add	r2, r3
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	685a      	ldr	r2, [r3, #4]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d32b      	bcc.n	800f1c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	605a      	str	r2, [r3, #4]
 800f174:	e026      	b.n	800f1c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	68d8      	ldr	r0, [r3, #12]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f17e:	461a      	mov	r2, r3
 800f180:	68b9      	ldr	r1, [r7, #8]
 800f182:	f00a ff13 	bl	8019fac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	68da      	ldr	r2, [r3, #12]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f18e:	425b      	negs	r3, r3
 800f190:	441a      	add	r2, r3
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	68da      	ldr	r2, [r3, #12]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d207      	bcs.n	800f1b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	689a      	ldr	r2, [r3, #8]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1aa:	425b      	negs	r3, r3
 800f1ac:	441a      	add	r2, r3
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2b02      	cmp	r3, #2
 800f1b6:	d105      	bne.n	800f1c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d002      	beq.n	800f1c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	3b01      	subs	r3, #1
 800f1c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	1c5a      	adds	r2, r3, #1
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f1cc:	697b      	ldr	r3, [r7, #20]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3718      	adds	r7, #24
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b082      	sub	sp, #8
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
 800f1de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d018      	beq.n	800f21a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	68da      	ldr	r2, [r3, #12]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f0:	441a      	add	r2, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	68da      	ldr	r2, [r3, #12]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	689b      	ldr	r3, [r3, #8]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d303      	bcc.n	800f20a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	68d9      	ldr	r1, [r3, #12]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f212:	461a      	mov	r2, r3
 800f214:	6838      	ldr	r0, [r7, #0]
 800f216:	f00a fec9 	bl	8019fac <memcpy>
	}
}
 800f21a:	bf00      	nop
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b084      	sub	sp, #16
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f22a:	f001 feeb 	bl	8011004 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f234:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f236:	e011      	b.n	800f25c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d012      	beq.n	800f266 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	3324      	adds	r3, #36	; 0x24
 800f244:	4618      	mov	r0, r3
 800f246:	f000 fe29 	bl	800fe9c <xTaskRemoveFromEventList>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d001      	beq.n	800f254 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f250:	f000 ff62 	bl	8010118 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f254:	7bfb      	ldrb	r3, [r7, #15]
 800f256:	3b01      	subs	r3, #1
 800f258:	b2db      	uxtb	r3, r3
 800f25a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f25c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f260:	2b00      	cmp	r3, #0
 800f262:	dce9      	bgt.n	800f238 <prvUnlockQueue+0x16>
 800f264:	e000      	b.n	800f268 <prvUnlockQueue+0x46>
					break;
 800f266:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	22ff      	movs	r2, #255	; 0xff
 800f26c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f270:	f001 fef8 	bl	8011064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f274:	f001 fec6 	bl	8011004 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f27e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f280:	e011      	b.n	800f2a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	691b      	ldr	r3, [r3, #16]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d012      	beq.n	800f2b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	3310      	adds	r3, #16
 800f28e:	4618      	mov	r0, r3
 800f290:	f000 fe04 	bl	800fe9c <xTaskRemoveFromEventList>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d001      	beq.n	800f29e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f29a:	f000 ff3d 	bl	8010118 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f29e:	7bbb      	ldrb	r3, [r7, #14]
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f2a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	dce9      	bgt.n	800f282 <prvUnlockQueue+0x60>
 800f2ae:	e000      	b.n	800f2b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f2b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	22ff      	movs	r2, #255	; 0xff
 800f2b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f2ba:	f001 fed3 	bl	8011064 <vPortExitCritical>
}
 800f2be:	bf00      	nop
 800f2c0:	3710      	adds	r7, #16
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}

0800f2c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f2c6:	b580      	push	{r7, lr}
 800f2c8:	b084      	sub	sp, #16
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f2ce:	f001 fe99 	bl	8011004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d102      	bne.n	800f2e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	60fb      	str	r3, [r7, #12]
 800f2de:	e001      	b.n	800f2e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f2e4:	f001 febe 	bl	8011064 <vPortExitCritical>

	return xReturn;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}

0800f2f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b084      	sub	sp, #16
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f2fa:	f001 fe83 	bl	8011004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f306:	429a      	cmp	r2, r3
 800f308:	d102      	bne.n	800f310 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f30a:	2301      	movs	r3, #1
 800f30c:	60fb      	str	r3, [r7, #12]
 800f30e:	e001      	b.n	800f314 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f310:	2300      	movs	r3, #0
 800f312:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f314:	f001 fea6 	bl	8011064 <vPortExitCritical>

	return xReturn;
 800f318:	68fb      	ldr	r3, [r7, #12]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3710      	adds	r7, #16
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
	...

0800f324 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f324:	b480      	push	{r7}
 800f326:	b085      	sub	sp, #20
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f32e:	2300      	movs	r3, #0
 800f330:	60fb      	str	r3, [r7, #12]
 800f332:	e014      	b.n	800f35e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f334:	4a0f      	ldr	r2, [pc, #60]	; (800f374 <vQueueAddToRegistry+0x50>)
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d10b      	bne.n	800f358 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f340:	490c      	ldr	r1, [pc, #48]	; (800f374 <vQueueAddToRegistry+0x50>)
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	683a      	ldr	r2, [r7, #0]
 800f346:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f34a:	4a0a      	ldr	r2, [pc, #40]	; (800f374 <vQueueAddToRegistry+0x50>)
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	00db      	lsls	r3, r3, #3
 800f350:	4413      	add	r3, r2
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f356:	e006      	b.n	800f366 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	3301      	adds	r3, #1
 800f35c:	60fb      	str	r3, [r7, #12]
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2b07      	cmp	r3, #7
 800f362:	d9e7      	bls.n	800f334 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f364:	bf00      	nop
 800f366:	bf00      	nop
 800f368:	3714      	adds	r7, #20
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr
 800f372:	bf00      	nop
 800f374:	20005134 	.word	0x20005134

0800f378 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f378:	b480      	push	{r7}
 800f37a:	b085      	sub	sp, #20
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f380:	2300      	movs	r3, #0
 800f382:	60fb      	str	r3, [r7, #12]
 800f384:	e016      	b.n	800f3b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f386:	4a10      	ldr	r2, [pc, #64]	; (800f3c8 <vQueueUnregisterQueue+0x50>)
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	00db      	lsls	r3, r3, #3
 800f38c:	4413      	add	r3, r2
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	687a      	ldr	r2, [r7, #4]
 800f392:	429a      	cmp	r2, r3
 800f394:	d10b      	bne.n	800f3ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f396:	4a0c      	ldr	r2, [pc, #48]	; (800f3c8 <vQueueUnregisterQueue+0x50>)
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2100      	movs	r1, #0
 800f39c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f3a0:	4a09      	ldr	r2, [pc, #36]	; (800f3c8 <vQueueUnregisterQueue+0x50>)
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	00db      	lsls	r3, r3, #3
 800f3a6:	4413      	add	r3, r2
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	605a      	str	r2, [r3, #4]
				break;
 800f3ac:	e006      	b.n	800f3bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	60fb      	str	r3, [r7, #12]
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2b07      	cmp	r3, #7
 800f3b8:	d9e5      	bls.n	800f386 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f3ba:	bf00      	nop
 800f3bc:	bf00      	nop
 800f3be:	3714      	adds	r7, #20
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr
 800f3c8:	20005134 	.word	0x20005134

0800f3cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b086      	sub	sp, #24
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	60b9      	str	r1, [r7, #8]
 800f3d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f3dc:	f001 fe12 	bl	8011004 <vPortEnterCritical>
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3e6:	b25b      	sxtb	r3, r3
 800f3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3ec:	d103      	bne.n	800f3f6 <vQueueWaitForMessageRestricted+0x2a>
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3fc:	b25b      	sxtb	r3, r3
 800f3fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f402:	d103      	bne.n	800f40c <vQueueWaitForMessageRestricted+0x40>
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	2200      	movs	r2, #0
 800f408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f40c:	f001 fe2a 	bl	8011064 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f414:	2b00      	cmp	r3, #0
 800f416:	d106      	bne.n	800f426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	3324      	adds	r3, #36	; 0x24
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	68b9      	ldr	r1, [r7, #8]
 800f420:	4618      	mov	r0, r3
 800f422:	f000 fd0f 	bl	800fe44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f426:	6978      	ldr	r0, [r7, #20]
 800f428:	f7ff fefb 	bl	800f222 <prvUnlockQueue>
	}
 800f42c:	bf00      	nop
 800f42e:	3718      	adds	r7, #24
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f434:	b580      	push	{r7, lr}
 800f436:	b08e      	sub	sp, #56	; 0x38
 800f438:	af04      	add	r7, sp, #16
 800f43a:	60f8      	str	r0, [r7, #12]
 800f43c:	60b9      	str	r1, [r7, #8]
 800f43e:	607a      	str	r2, [r7, #4]
 800f440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f444:	2b00      	cmp	r3, #0
 800f446:	d10a      	bne.n	800f45e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44c:	f383 8811 	msr	BASEPRI, r3
 800f450:	f3bf 8f6f 	isb	sy
 800f454:	f3bf 8f4f 	dsb	sy
 800f458:	623b      	str	r3, [r7, #32]
}
 800f45a:	bf00      	nop
 800f45c:	e7fe      	b.n	800f45c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f460:	2b00      	cmp	r3, #0
 800f462:	d10a      	bne.n	800f47a <xTaskCreateStatic+0x46>
	__asm volatile
 800f464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f468:	f383 8811 	msr	BASEPRI, r3
 800f46c:	f3bf 8f6f 	isb	sy
 800f470:	f3bf 8f4f 	dsb	sy
 800f474:	61fb      	str	r3, [r7, #28]
}
 800f476:	bf00      	nop
 800f478:	e7fe      	b.n	800f478 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f47a:	23a8      	movs	r3, #168	; 0xa8
 800f47c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	2ba8      	cmp	r3, #168	; 0xa8
 800f482:	d00a      	beq.n	800f49a <xTaskCreateStatic+0x66>
	__asm volatile
 800f484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f488:	f383 8811 	msr	BASEPRI, r3
 800f48c:	f3bf 8f6f 	isb	sy
 800f490:	f3bf 8f4f 	dsb	sy
 800f494:	61bb      	str	r3, [r7, #24]
}
 800f496:	bf00      	nop
 800f498:	e7fe      	b.n	800f498 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f49a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d01e      	beq.n	800f4e0 <xTaskCreateStatic+0xac>
 800f4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d01b      	beq.n	800f4e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b4:	2202      	movs	r2, #2
 800f4b6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	9303      	str	r3, [sp, #12]
 800f4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c0:	9302      	str	r3, [sp, #8]
 800f4c2:	f107 0314 	add.w	r3, r7, #20
 800f4c6:	9301      	str	r3, [sp, #4]
 800f4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ca:	9300      	str	r3, [sp, #0]
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	68b9      	ldr	r1, [r7, #8]
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f000 f850 	bl	800f578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f4d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4da:	f000 f8f3 	bl	800f6c4 <prvAddNewTaskToReadyList>
 800f4de:	e001      	b.n	800f4e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f4e4:	697b      	ldr	r3, [r7, #20]
	}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3728      	adds	r7, #40	; 0x28
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}

0800f4ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f4ee:	b580      	push	{r7, lr}
 800f4f0:	b08c      	sub	sp, #48	; 0x30
 800f4f2:	af04      	add	r7, sp, #16
 800f4f4:	60f8      	str	r0, [r7, #12]
 800f4f6:	60b9      	str	r1, [r7, #8]
 800f4f8:	603b      	str	r3, [r7, #0]
 800f4fa:	4613      	mov	r3, r2
 800f4fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f4fe:	88fb      	ldrh	r3, [r7, #6]
 800f500:	009b      	lsls	r3, r3, #2
 800f502:	4618      	mov	r0, r3
 800f504:	f001 fea0 	bl	8011248 <pvPortMalloc>
 800f508:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00e      	beq.n	800f52e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f510:	20a8      	movs	r0, #168	; 0xa8
 800f512:	f001 fe99 	bl	8011248 <pvPortMalloc>
 800f516:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f518:	69fb      	ldr	r3, [r7, #28]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d003      	beq.n	800f526 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f51e:	69fb      	ldr	r3, [r7, #28]
 800f520:	697a      	ldr	r2, [r7, #20]
 800f522:	631a      	str	r2, [r3, #48]	; 0x30
 800f524:	e005      	b.n	800f532 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f526:	6978      	ldr	r0, [r7, #20]
 800f528:	f001 ff5a 	bl	80113e0 <vPortFree>
 800f52c:	e001      	b.n	800f532 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f52e:	2300      	movs	r3, #0
 800f530:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d017      	beq.n	800f568 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	2200      	movs	r2, #0
 800f53c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f540:	88fa      	ldrh	r2, [r7, #6]
 800f542:	2300      	movs	r3, #0
 800f544:	9303      	str	r3, [sp, #12]
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	9302      	str	r3, [sp, #8]
 800f54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f54c:	9301      	str	r3, [sp, #4]
 800f54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f550:	9300      	str	r3, [sp, #0]
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	68b9      	ldr	r1, [r7, #8]
 800f556:	68f8      	ldr	r0, [r7, #12]
 800f558:	f000 f80e 	bl	800f578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f55c:	69f8      	ldr	r0, [r7, #28]
 800f55e:	f000 f8b1 	bl	800f6c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f562:	2301      	movs	r3, #1
 800f564:	61bb      	str	r3, [r7, #24]
 800f566:	e002      	b.n	800f56e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f56c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f56e:	69bb      	ldr	r3, [r7, #24]
	}
 800f570:	4618      	mov	r0, r3
 800f572:	3720      	adds	r7, #32
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b088      	sub	sp, #32
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	60f8      	str	r0, [r7, #12]
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	607a      	str	r2, [r7, #4]
 800f584:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f588:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	461a      	mov	r2, r3
 800f590:	21a5      	movs	r1, #165	; 0xa5
 800f592:	f00a fc7d 	bl	8019e90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f5a0:	3b01      	subs	r3, #1
 800f5a2:	009b      	lsls	r3, r3, #2
 800f5a4:	4413      	add	r3, r2
 800f5a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f5a8:	69bb      	ldr	r3, [r7, #24]
 800f5aa:	f023 0307 	bic.w	r3, r3, #7
 800f5ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f5b0:	69bb      	ldr	r3, [r7, #24]
 800f5b2:	f003 0307 	and.w	r3, r3, #7
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d00a      	beq.n	800f5d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5be:	f383 8811 	msr	BASEPRI, r3
 800f5c2:	f3bf 8f6f 	isb	sy
 800f5c6:	f3bf 8f4f 	dsb	sy
 800f5ca:	617b      	str	r3, [r7, #20]
}
 800f5cc:	bf00      	nop
 800f5ce:	e7fe      	b.n	800f5ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d01f      	beq.n	800f616 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	61fb      	str	r3, [r7, #28]
 800f5da:	e012      	b.n	800f602 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f5dc:	68ba      	ldr	r2, [r7, #8]
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	4413      	add	r3, r2
 800f5e2:	7819      	ldrb	r1, [r3, #0]
 800f5e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5e6:	69fb      	ldr	r3, [r7, #28]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	3334      	adds	r3, #52	; 0x34
 800f5ec:	460a      	mov	r2, r1
 800f5ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f5f0:	68ba      	ldr	r2, [r7, #8]
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d006      	beq.n	800f60a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	3301      	adds	r3, #1
 800f600:	61fb      	str	r3, [r7, #28]
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	2b0f      	cmp	r3, #15
 800f606:	d9e9      	bls.n	800f5dc <prvInitialiseNewTask+0x64>
 800f608:	e000      	b.n	800f60c <prvInitialiseNewTask+0x94>
			{
				break;
 800f60a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60e:	2200      	movs	r2, #0
 800f610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f614:	e003      	b.n	800f61e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f618:	2200      	movs	r2, #0
 800f61a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f620:	2b37      	cmp	r3, #55	; 0x37
 800f622:	d901      	bls.n	800f628 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f624:	2337      	movs	r3, #55	; 0x37
 800f626:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f62c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f632:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f636:	2200      	movs	r2, #0
 800f638:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63c:	3304      	adds	r3, #4
 800f63e:	4618      	mov	r0, r3
 800f640:	f7fe fe56 	bl	800e2f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f646:	3318      	adds	r3, #24
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fe fe51 	bl	800e2f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f652:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f656:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f662:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f666:	2200      	movs	r2, #0
 800f668:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f676:	3354      	adds	r3, #84	; 0x54
 800f678:	224c      	movs	r2, #76	; 0x4c
 800f67a:	2100      	movs	r1, #0
 800f67c:	4618      	mov	r0, r3
 800f67e:	f00a fc07 	bl	8019e90 <memset>
 800f682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f684:	4a0c      	ldr	r2, [pc, #48]	; (800f6b8 <prvInitialiseNewTask+0x140>)
 800f686:	659a      	str	r2, [r3, #88]	; 0x58
 800f688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68a:	4a0c      	ldr	r2, [pc, #48]	; (800f6bc <prvInitialiseNewTask+0x144>)
 800f68c:	65da      	str	r2, [r3, #92]	; 0x5c
 800f68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f690:	4a0b      	ldr	r2, [pc, #44]	; (800f6c0 <prvInitialiseNewTask+0x148>)
 800f692:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f694:	683a      	ldr	r2, [r7, #0]
 800f696:	68f9      	ldr	r1, [r7, #12]
 800f698:	69b8      	ldr	r0, [r7, #24]
 800f69a:	f001 fb87 	bl	8010dac <pxPortInitialiseStack>
 800f69e:	4602      	mov	r2, r0
 800f6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d002      	beq.n	800f6b0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6b0:	bf00      	nop
 800f6b2:	3720      	adds	r7, #32
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}
 800f6b8:	200093c8 	.word	0x200093c8
 800f6bc:	20009430 	.word	0x20009430
 800f6c0:	20009498 	.word	0x20009498

0800f6c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f6cc:	f001 fc9a 	bl	8011004 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f6d0:	4b2d      	ldr	r3, [pc, #180]	; (800f788 <prvAddNewTaskToReadyList+0xc4>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	4a2c      	ldr	r2, [pc, #176]	; (800f788 <prvAddNewTaskToReadyList+0xc4>)
 800f6d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f6da:	4b2c      	ldr	r3, [pc, #176]	; (800f78c <prvAddNewTaskToReadyList+0xc8>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d109      	bne.n	800f6f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f6e2:	4a2a      	ldr	r2, [pc, #168]	; (800f78c <prvAddNewTaskToReadyList+0xc8>)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f6e8:	4b27      	ldr	r3, [pc, #156]	; (800f788 <prvAddNewTaskToReadyList+0xc4>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2b01      	cmp	r3, #1
 800f6ee:	d110      	bne.n	800f712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f6f0:	f000 fd36 	bl	8010160 <prvInitialiseTaskLists>
 800f6f4:	e00d      	b.n	800f712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f6f6:	4b26      	ldr	r3, [pc, #152]	; (800f790 <prvAddNewTaskToReadyList+0xcc>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d109      	bne.n	800f712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f6fe:	4b23      	ldr	r3, [pc, #140]	; (800f78c <prvAddNewTaskToReadyList+0xc8>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f708:	429a      	cmp	r2, r3
 800f70a:	d802      	bhi.n	800f712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f70c:	4a1f      	ldr	r2, [pc, #124]	; (800f78c <prvAddNewTaskToReadyList+0xc8>)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f712:	4b20      	ldr	r3, [pc, #128]	; (800f794 <prvAddNewTaskToReadyList+0xd0>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	3301      	adds	r3, #1
 800f718:	4a1e      	ldr	r2, [pc, #120]	; (800f794 <prvAddNewTaskToReadyList+0xd0>)
 800f71a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f71c:	4b1d      	ldr	r3, [pc, #116]	; (800f794 <prvAddNewTaskToReadyList+0xd0>)
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f728:	4b1b      	ldr	r3, [pc, #108]	; (800f798 <prvAddNewTaskToReadyList+0xd4>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d903      	bls.n	800f738 <prvAddNewTaskToReadyList+0x74>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f734:	4a18      	ldr	r2, [pc, #96]	; (800f798 <prvAddNewTaskToReadyList+0xd4>)
 800f736:	6013      	str	r3, [r2, #0]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f73c:	4613      	mov	r3, r2
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	4413      	add	r3, r2
 800f742:	009b      	lsls	r3, r3, #2
 800f744:	4a15      	ldr	r2, [pc, #84]	; (800f79c <prvAddNewTaskToReadyList+0xd8>)
 800f746:	441a      	add	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	3304      	adds	r3, #4
 800f74c:	4619      	mov	r1, r3
 800f74e:	4610      	mov	r0, r2
 800f750:	f7fe fddb 	bl	800e30a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f754:	f001 fc86 	bl	8011064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f758:	4b0d      	ldr	r3, [pc, #52]	; (800f790 <prvAddNewTaskToReadyList+0xcc>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00e      	beq.n	800f77e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f760:	4b0a      	ldr	r3, [pc, #40]	; (800f78c <prvAddNewTaskToReadyList+0xc8>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d207      	bcs.n	800f77e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f76e:	4b0c      	ldr	r3, [pc, #48]	; (800f7a0 <prvAddNewTaskToReadyList+0xdc>)
 800f770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f774:	601a      	str	r2, [r3, #0]
 800f776:	f3bf 8f4f 	dsb	sy
 800f77a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f77e:	bf00      	nop
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	20005648 	.word	0x20005648
 800f78c:	20005174 	.word	0x20005174
 800f790:	20005654 	.word	0x20005654
 800f794:	20005664 	.word	0x20005664
 800f798:	20005650 	.word	0x20005650
 800f79c:	20005178 	.word	0x20005178
 800f7a0:	e000ed04 	.word	0xe000ed04

0800f7a4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f7ac:	f001 fc2a 	bl	8011004 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d102      	bne.n	800f7bc <vTaskDelete+0x18>
 800f7b6:	4b2c      	ldr	r3, [pc, #176]	; (800f868 <vTaskDelete+0xc4>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	e000      	b.n	800f7be <vTaskDelete+0x1a>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	3304      	adds	r3, #4
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7fe fdfd 	bl	800e3c4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d004      	beq.n	800f7dc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	3318      	adds	r3, #24
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fe fdf4 	bl	800e3c4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800f7dc:	4b23      	ldr	r3, [pc, #140]	; (800f86c <vTaskDelete+0xc8>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	4a22      	ldr	r2, [pc, #136]	; (800f86c <vTaskDelete+0xc8>)
 800f7e4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800f7e6:	4b20      	ldr	r3, [pc, #128]	; (800f868 <vTaskDelete+0xc4>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d10b      	bne.n	800f808 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	3304      	adds	r3, #4
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	481e      	ldr	r0, [pc, #120]	; (800f870 <vTaskDelete+0xcc>)
 800f7f8:	f7fe fd87 	bl	800e30a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800f7fc:	4b1d      	ldr	r3, [pc, #116]	; (800f874 <vTaskDelete+0xd0>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	3301      	adds	r3, #1
 800f802:	4a1c      	ldr	r2, [pc, #112]	; (800f874 <vTaskDelete+0xd0>)
 800f804:	6013      	str	r3, [r2, #0]
 800f806:	e009      	b.n	800f81c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800f808:	4b1b      	ldr	r3, [pc, #108]	; (800f878 <vTaskDelete+0xd4>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	3b01      	subs	r3, #1
 800f80e:	4a1a      	ldr	r2, [pc, #104]	; (800f878 <vTaskDelete+0xd4>)
 800f810:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f000 fd12 	bl	801023c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800f818:	f000 fd44 	bl	80102a4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800f81c:	f001 fc22 	bl	8011064 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800f820:	4b16      	ldr	r3, [pc, #88]	; (800f87c <vTaskDelete+0xd8>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d01b      	beq.n	800f860 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800f828:	4b0f      	ldr	r3, [pc, #60]	; (800f868 <vTaskDelete+0xc4>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	68fa      	ldr	r2, [r7, #12]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d116      	bne.n	800f860 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800f832:	4b13      	ldr	r3, [pc, #76]	; (800f880 <vTaskDelete+0xdc>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00a      	beq.n	800f850 <vTaskDelete+0xac>
	__asm volatile
 800f83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f83e:	f383 8811 	msr	BASEPRI, r3
 800f842:	f3bf 8f6f 	isb	sy
 800f846:	f3bf 8f4f 	dsb	sy
 800f84a:	60bb      	str	r3, [r7, #8]
}
 800f84c:	bf00      	nop
 800f84e:	e7fe      	b.n	800f84e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800f850:	4b0c      	ldr	r3, [pc, #48]	; (800f884 <vTaskDelete+0xe0>)
 800f852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f856:	601a      	str	r2, [r3, #0]
 800f858:	f3bf 8f4f 	dsb	sy
 800f85c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f860:	bf00      	nop
 800f862:	3710      	adds	r7, #16
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	20005174 	.word	0x20005174
 800f86c:	20005664 	.word	0x20005664
 800f870:	2000561c 	.word	0x2000561c
 800f874:	20005630 	.word	0x20005630
 800f878:	20005648 	.word	0x20005648
 800f87c:	20005654 	.word	0x20005654
 800f880:	20005670 	.word	0x20005670
 800f884:	e000ed04 	.word	0xe000ed04

0800f888 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f890:	2300      	movs	r3, #0
 800f892:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d017      	beq.n	800f8ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f89a:	4b13      	ldr	r3, [pc, #76]	; (800f8e8 <vTaskDelay+0x60>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d00a      	beq.n	800f8b8 <vTaskDelay+0x30>
	__asm volatile
 800f8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a6:	f383 8811 	msr	BASEPRI, r3
 800f8aa:	f3bf 8f6f 	isb	sy
 800f8ae:	f3bf 8f4f 	dsb	sy
 800f8b2:	60bb      	str	r3, [r7, #8]
}
 800f8b4:	bf00      	nop
 800f8b6:	e7fe      	b.n	800f8b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f8b8:	f000 f88a 	bl	800f9d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f8bc:	2100      	movs	r1, #0
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 feb2 	bl	8010628 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f8c4:	f000 f892 	bl	800f9ec <xTaskResumeAll>
 800f8c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d107      	bne.n	800f8e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f8d0:	4b06      	ldr	r3, [pc, #24]	; (800f8ec <vTaskDelay+0x64>)
 800f8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8d6:	601a      	str	r2, [r3, #0]
 800f8d8:	f3bf 8f4f 	dsb	sy
 800f8dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f8e0:	bf00      	nop
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	20005670 	.word	0x20005670
 800f8ec:	e000ed04 	.word	0xe000ed04

0800f8f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b08a      	sub	sp, #40	; 0x28
 800f8f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f8fe:	463a      	mov	r2, r7
 800f900:	1d39      	adds	r1, r7, #4
 800f902:	f107 0308 	add.w	r3, r7, #8
 800f906:	4618      	mov	r0, r3
 800f908:	f7fe fab0 	bl	800de6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f90c:	6839      	ldr	r1, [r7, #0]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	68ba      	ldr	r2, [r7, #8]
 800f912:	9202      	str	r2, [sp, #8]
 800f914:	9301      	str	r3, [sp, #4]
 800f916:	2300      	movs	r3, #0
 800f918:	9300      	str	r3, [sp, #0]
 800f91a:	2300      	movs	r3, #0
 800f91c:	460a      	mov	r2, r1
 800f91e:	4924      	ldr	r1, [pc, #144]	; (800f9b0 <vTaskStartScheduler+0xc0>)
 800f920:	4824      	ldr	r0, [pc, #144]	; (800f9b4 <vTaskStartScheduler+0xc4>)
 800f922:	f7ff fd87 	bl	800f434 <xTaskCreateStatic>
 800f926:	4603      	mov	r3, r0
 800f928:	4a23      	ldr	r2, [pc, #140]	; (800f9b8 <vTaskStartScheduler+0xc8>)
 800f92a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f92c:	4b22      	ldr	r3, [pc, #136]	; (800f9b8 <vTaskStartScheduler+0xc8>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d002      	beq.n	800f93a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f934:	2301      	movs	r3, #1
 800f936:	617b      	str	r3, [r7, #20]
 800f938:	e001      	b.n	800f93e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f93a:	2300      	movs	r3, #0
 800f93c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	2b01      	cmp	r3, #1
 800f942:	d102      	bne.n	800f94a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f944:	f000 fec4 	bl	80106d0 <xTimerCreateTimerTask>
 800f948:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	2b01      	cmp	r3, #1
 800f94e:	d11b      	bne.n	800f988 <vTaskStartScheduler+0x98>
	__asm volatile
 800f950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f954:	f383 8811 	msr	BASEPRI, r3
 800f958:	f3bf 8f6f 	isb	sy
 800f95c:	f3bf 8f4f 	dsb	sy
 800f960:	613b      	str	r3, [r7, #16]
}
 800f962:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f964:	4b15      	ldr	r3, [pc, #84]	; (800f9bc <vTaskStartScheduler+0xcc>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	3354      	adds	r3, #84	; 0x54
 800f96a:	4a15      	ldr	r2, [pc, #84]	; (800f9c0 <vTaskStartScheduler+0xd0>)
 800f96c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f96e:	4b15      	ldr	r3, [pc, #84]	; (800f9c4 <vTaskStartScheduler+0xd4>)
 800f970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f974:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f976:	4b14      	ldr	r3, [pc, #80]	; (800f9c8 <vTaskStartScheduler+0xd8>)
 800f978:	2201      	movs	r2, #1
 800f97a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f97c:	4b13      	ldr	r3, [pc, #76]	; (800f9cc <vTaskStartScheduler+0xdc>)
 800f97e:	2200      	movs	r2, #0
 800f980:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f982:	f001 fa9d 	bl	8010ec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f986:	e00e      	b.n	800f9a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f98e:	d10a      	bne.n	800f9a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800f990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f994:	f383 8811 	msr	BASEPRI, r3
 800f998:	f3bf 8f6f 	isb	sy
 800f99c:	f3bf 8f4f 	dsb	sy
 800f9a0:	60fb      	str	r3, [r7, #12]
}
 800f9a2:	bf00      	nop
 800f9a4:	e7fe      	b.n	800f9a4 <vTaskStartScheduler+0xb4>
}
 800f9a6:	bf00      	nop
 800f9a8:	3718      	adds	r7, #24
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	0801f974 	.word	0x0801f974
 800f9b4:	08010131 	.word	0x08010131
 800f9b8:	2000566c 	.word	0x2000566c
 800f9bc:	20005174 	.word	0x20005174
 800f9c0:	200001f0 	.word	0x200001f0
 800f9c4:	20005668 	.word	0x20005668
 800f9c8:	20005654 	.word	0x20005654
 800f9cc:	2000564c 	.word	0x2000564c

0800f9d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f9d4:	4b04      	ldr	r3, [pc, #16]	; (800f9e8 <vTaskSuspendAll+0x18>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	4a03      	ldr	r2, [pc, #12]	; (800f9e8 <vTaskSuspendAll+0x18>)
 800f9dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f9de:	bf00      	nop
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr
 800f9e8:	20005670 	.word	0x20005670

0800f9ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f9fa:	4b42      	ldr	r3, [pc, #264]	; (800fb04 <xTaskResumeAll+0x118>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d10a      	bne.n	800fa18 <xTaskResumeAll+0x2c>
	__asm volatile
 800fa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa06:	f383 8811 	msr	BASEPRI, r3
 800fa0a:	f3bf 8f6f 	isb	sy
 800fa0e:	f3bf 8f4f 	dsb	sy
 800fa12:	603b      	str	r3, [r7, #0]
}
 800fa14:	bf00      	nop
 800fa16:	e7fe      	b.n	800fa16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fa18:	f001 faf4 	bl	8011004 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fa1c:	4b39      	ldr	r3, [pc, #228]	; (800fb04 <xTaskResumeAll+0x118>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	3b01      	subs	r3, #1
 800fa22:	4a38      	ldr	r2, [pc, #224]	; (800fb04 <xTaskResumeAll+0x118>)
 800fa24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa26:	4b37      	ldr	r3, [pc, #220]	; (800fb04 <xTaskResumeAll+0x118>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d162      	bne.n	800faf4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fa2e:	4b36      	ldr	r3, [pc, #216]	; (800fb08 <xTaskResumeAll+0x11c>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d05e      	beq.n	800faf4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa36:	e02f      	b.n	800fa98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa38:	4b34      	ldr	r3, [pc, #208]	; (800fb0c <xTaskResumeAll+0x120>)
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	68db      	ldr	r3, [r3, #12]
 800fa3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	3318      	adds	r3, #24
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fe fcbd 	bl	800e3c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	3304      	adds	r3, #4
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7fe fcb8 	bl	800e3c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa58:	4b2d      	ldr	r3, [pc, #180]	; (800fb10 <xTaskResumeAll+0x124>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d903      	bls.n	800fa68 <xTaskResumeAll+0x7c>
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa64:	4a2a      	ldr	r2, [pc, #168]	; (800fb10 <xTaskResumeAll+0x124>)
 800fa66:	6013      	str	r3, [r2, #0]
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa6c:	4613      	mov	r3, r2
 800fa6e:	009b      	lsls	r3, r3, #2
 800fa70:	4413      	add	r3, r2
 800fa72:	009b      	lsls	r3, r3, #2
 800fa74:	4a27      	ldr	r2, [pc, #156]	; (800fb14 <xTaskResumeAll+0x128>)
 800fa76:	441a      	add	r2, r3
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	3304      	adds	r3, #4
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	4610      	mov	r0, r2
 800fa80:	f7fe fc43 	bl	800e30a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa88:	4b23      	ldr	r3, [pc, #140]	; (800fb18 <xTaskResumeAll+0x12c>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d302      	bcc.n	800fa98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fa92:	4b22      	ldr	r3, [pc, #136]	; (800fb1c <xTaskResumeAll+0x130>)
 800fa94:	2201      	movs	r2, #1
 800fa96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa98:	4b1c      	ldr	r3, [pc, #112]	; (800fb0c <xTaskResumeAll+0x120>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1cb      	bne.n	800fa38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d001      	beq.n	800faaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800faa6:	f000 fbfd 	bl	80102a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800faaa:	4b1d      	ldr	r3, [pc, #116]	; (800fb20 <xTaskResumeAll+0x134>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d010      	beq.n	800fad8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fab6:	f000 f847 	bl	800fb48 <xTaskIncrementTick>
 800faba:	4603      	mov	r3, r0
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d002      	beq.n	800fac6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fac0:	4b16      	ldr	r3, [pc, #88]	; (800fb1c <xTaskResumeAll+0x130>)
 800fac2:	2201      	movs	r2, #1
 800fac4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	3b01      	subs	r3, #1
 800faca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d1f1      	bne.n	800fab6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fad2:	4b13      	ldr	r3, [pc, #76]	; (800fb20 <xTaskResumeAll+0x134>)
 800fad4:	2200      	movs	r2, #0
 800fad6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fad8:	4b10      	ldr	r3, [pc, #64]	; (800fb1c <xTaskResumeAll+0x130>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d009      	beq.n	800faf4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fae0:	2301      	movs	r3, #1
 800fae2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fae4:	4b0f      	ldr	r3, [pc, #60]	; (800fb24 <xTaskResumeAll+0x138>)
 800fae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faea:	601a      	str	r2, [r3, #0]
 800faec:	f3bf 8f4f 	dsb	sy
 800faf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800faf4:	f001 fab6 	bl	8011064 <vPortExitCritical>

	return xAlreadyYielded;
 800faf8:	68bb      	ldr	r3, [r7, #8]
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3710      	adds	r7, #16
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	20005670 	.word	0x20005670
 800fb08:	20005648 	.word	0x20005648
 800fb0c:	20005608 	.word	0x20005608
 800fb10:	20005650 	.word	0x20005650
 800fb14:	20005178 	.word	0x20005178
 800fb18:	20005174 	.word	0x20005174
 800fb1c:	2000565c 	.word	0x2000565c
 800fb20:	20005658 	.word	0x20005658
 800fb24:	e000ed04 	.word	0xe000ed04

0800fb28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fb2e:	4b05      	ldr	r3, [pc, #20]	; (800fb44 <xTaskGetTickCount+0x1c>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fb34:	687b      	ldr	r3, [r7, #4]
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	370c      	adds	r7, #12
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop
 800fb44:	2000564c 	.word	0x2000564c

0800fb48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b086      	sub	sp, #24
 800fb4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb52:	4b4f      	ldr	r3, [pc, #316]	; (800fc90 <xTaskIncrementTick+0x148>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	f040 808f 	bne.w	800fc7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fb5c:	4b4d      	ldr	r3, [pc, #308]	; (800fc94 <xTaskIncrementTick+0x14c>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	3301      	adds	r3, #1
 800fb62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fb64:	4a4b      	ldr	r2, [pc, #300]	; (800fc94 <xTaskIncrementTick+0x14c>)
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d120      	bne.n	800fbb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fb70:	4b49      	ldr	r3, [pc, #292]	; (800fc98 <xTaskIncrementTick+0x150>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d00a      	beq.n	800fb90 <xTaskIncrementTick+0x48>
	__asm volatile
 800fb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7e:	f383 8811 	msr	BASEPRI, r3
 800fb82:	f3bf 8f6f 	isb	sy
 800fb86:	f3bf 8f4f 	dsb	sy
 800fb8a:	603b      	str	r3, [r7, #0]
}
 800fb8c:	bf00      	nop
 800fb8e:	e7fe      	b.n	800fb8e <xTaskIncrementTick+0x46>
 800fb90:	4b41      	ldr	r3, [pc, #260]	; (800fc98 <xTaskIncrementTick+0x150>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	60fb      	str	r3, [r7, #12]
 800fb96:	4b41      	ldr	r3, [pc, #260]	; (800fc9c <xTaskIncrementTick+0x154>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	4a3f      	ldr	r2, [pc, #252]	; (800fc98 <xTaskIncrementTick+0x150>)
 800fb9c:	6013      	str	r3, [r2, #0]
 800fb9e:	4a3f      	ldr	r2, [pc, #252]	; (800fc9c <xTaskIncrementTick+0x154>)
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	6013      	str	r3, [r2, #0]
 800fba4:	4b3e      	ldr	r3, [pc, #248]	; (800fca0 <xTaskIncrementTick+0x158>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	4a3d      	ldr	r2, [pc, #244]	; (800fca0 <xTaskIncrementTick+0x158>)
 800fbac:	6013      	str	r3, [r2, #0]
 800fbae:	f000 fb79 	bl	80102a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fbb2:	4b3c      	ldr	r3, [pc, #240]	; (800fca4 <xTaskIncrementTick+0x15c>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	693a      	ldr	r2, [r7, #16]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d349      	bcc.n	800fc50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbbc:	4b36      	ldr	r3, [pc, #216]	; (800fc98 <xTaskIncrementTick+0x150>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d104      	bne.n	800fbd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbc6:	4b37      	ldr	r3, [pc, #220]	; (800fca4 <xTaskIncrementTick+0x15c>)
 800fbc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbcc:	601a      	str	r2, [r3, #0]
					break;
 800fbce:	e03f      	b.n	800fc50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbd0:	4b31      	ldr	r3, [pc, #196]	; (800fc98 <xTaskIncrementTick+0x150>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	68db      	ldr	r3, [r3, #12]
 800fbd6:	68db      	ldr	r3, [r3, #12]
 800fbd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fbe0:	693a      	ldr	r2, [r7, #16]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d203      	bcs.n	800fbf0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fbe8:	4a2e      	ldr	r2, [pc, #184]	; (800fca4 <xTaskIncrementTick+0x15c>)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fbee:	e02f      	b.n	800fc50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	3304      	adds	r3, #4
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7fe fbe5 	bl	800e3c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d004      	beq.n	800fc0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	3318      	adds	r3, #24
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7fe fbdc 	bl	800e3c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc10:	4b25      	ldr	r3, [pc, #148]	; (800fca8 <xTaskIncrementTick+0x160>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d903      	bls.n	800fc20 <xTaskIncrementTick+0xd8>
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc1c:	4a22      	ldr	r2, [pc, #136]	; (800fca8 <xTaskIncrementTick+0x160>)
 800fc1e:	6013      	str	r3, [r2, #0]
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc24:	4613      	mov	r3, r2
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	4413      	add	r3, r2
 800fc2a:	009b      	lsls	r3, r3, #2
 800fc2c:	4a1f      	ldr	r2, [pc, #124]	; (800fcac <xTaskIncrementTick+0x164>)
 800fc2e:	441a      	add	r2, r3
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	3304      	adds	r3, #4
 800fc34:	4619      	mov	r1, r3
 800fc36:	4610      	mov	r0, r2
 800fc38:	f7fe fb67 	bl	800e30a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc40:	4b1b      	ldr	r3, [pc, #108]	; (800fcb0 <xTaskIncrementTick+0x168>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d3b8      	bcc.n	800fbbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc4e:	e7b5      	b.n	800fbbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fc50:	4b17      	ldr	r3, [pc, #92]	; (800fcb0 <xTaskIncrementTick+0x168>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc56:	4915      	ldr	r1, [pc, #84]	; (800fcac <xTaskIncrementTick+0x164>)
 800fc58:	4613      	mov	r3, r2
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	4413      	add	r3, r2
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	440b      	add	r3, r1
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	d901      	bls.n	800fc6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fc6c:	4b11      	ldr	r3, [pc, #68]	; (800fcb4 <xTaskIncrementTick+0x16c>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d007      	beq.n	800fc84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fc74:	2301      	movs	r3, #1
 800fc76:	617b      	str	r3, [r7, #20]
 800fc78:	e004      	b.n	800fc84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fc7a:	4b0f      	ldr	r3, [pc, #60]	; (800fcb8 <xTaskIncrementTick+0x170>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	4a0d      	ldr	r2, [pc, #52]	; (800fcb8 <xTaskIncrementTick+0x170>)
 800fc82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fc84:	697b      	ldr	r3, [r7, #20]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3718      	adds	r7, #24
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	20005670 	.word	0x20005670
 800fc94:	2000564c 	.word	0x2000564c
 800fc98:	20005600 	.word	0x20005600
 800fc9c:	20005604 	.word	0x20005604
 800fca0:	20005660 	.word	0x20005660
 800fca4:	20005668 	.word	0x20005668
 800fca8:	20005650 	.word	0x20005650
 800fcac:	20005178 	.word	0x20005178
 800fcb0:	20005174 	.word	0x20005174
 800fcb4:	2000565c 	.word	0x2000565c
 800fcb8:	20005658 	.word	0x20005658

0800fcbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b085      	sub	sp, #20
 800fcc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fcc2:	4b2a      	ldr	r3, [pc, #168]	; (800fd6c <vTaskSwitchContext+0xb0>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d003      	beq.n	800fcd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fcca:	4b29      	ldr	r3, [pc, #164]	; (800fd70 <vTaskSwitchContext+0xb4>)
 800fccc:	2201      	movs	r2, #1
 800fcce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fcd0:	e046      	b.n	800fd60 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800fcd2:	4b27      	ldr	r3, [pc, #156]	; (800fd70 <vTaskSwitchContext+0xb4>)
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcd8:	4b26      	ldr	r3, [pc, #152]	; (800fd74 <vTaskSwitchContext+0xb8>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	60fb      	str	r3, [r7, #12]
 800fcde:	e010      	b.n	800fd02 <vTaskSwitchContext+0x46>
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d10a      	bne.n	800fcfc <vTaskSwitchContext+0x40>
	__asm volatile
 800fce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcea:	f383 8811 	msr	BASEPRI, r3
 800fcee:	f3bf 8f6f 	isb	sy
 800fcf2:	f3bf 8f4f 	dsb	sy
 800fcf6:	607b      	str	r3, [r7, #4]
}
 800fcf8:	bf00      	nop
 800fcfa:	e7fe      	b.n	800fcfa <vTaskSwitchContext+0x3e>
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	3b01      	subs	r3, #1
 800fd00:	60fb      	str	r3, [r7, #12]
 800fd02:	491d      	ldr	r1, [pc, #116]	; (800fd78 <vTaskSwitchContext+0xbc>)
 800fd04:	68fa      	ldr	r2, [r7, #12]
 800fd06:	4613      	mov	r3, r2
 800fd08:	009b      	lsls	r3, r3, #2
 800fd0a:	4413      	add	r3, r2
 800fd0c:	009b      	lsls	r3, r3, #2
 800fd0e:	440b      	add	r3, r1
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d0e4      	beq.n	800fce0 <vTaskSwitchContext+0x24>
 800fd16:	68fa      	ldr	r2, [r7, #12]
 800fd18:	4613      	mov	r3, r2
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	4413      	add	r3, r2
 800fd1e:	009b      	lsls	r3, r3, #2
 800fd20:	4a15      	ldr	r2, [pc, #84]	; (800fd78 <vTaskSwitchContext+0xbc>)
 800fd22:	4413      	add	r3, r2
 800fd24:	60bb      	str	r3, [r7, #8]
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	685a      	ldr	r2, [r3, #4]
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	605a      	str	r2, [r3, #4]
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	685a      	ldr	r2, [r3, #4]
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	3308      	adds	r3, #8
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d104      	bne.n	800fd46 <vTaskSwitchContext+0x8a>
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	685a      	ldr	r2, [r3, #4]
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	605a      	str	r2, [r3, #4]
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	68db      	ldr	r3, [r3, #12]
 800fd4c:	4a0b      	ldr	r2, [pc, #44]	; (800fd7c <vTaskSwitchContext+0xc0>)
 800fd4e:	6013      	str	r3, [r2, #0]
 800fd50:	4a08      	ldr	r2, [pc, #32]	; (800fd74 <vTaskSwitchContext+0xb8>)
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fd56:	4b09      	ldr	r3, [pc, #36]	; (800fd7c <vTaskSwitchContext+0xc0>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	3354      	adds	r3, #84	; 0x54
 800fd5c:	4a08      	ldr	r2, [pc, #32]	; (800fd80 <vTaskSwitchContext+0xc4>)
 800fd5e:	6013      	str	r3, [r2, #0]
}
 800fd60:	bf00      	nop
 800fd62:	3714      	adds	r7, #20
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr
 800fd6c:	20005670 	.word	0x20005670
 800fd70:	2000565c 	.word	0x2000565c
 800fd74:	20005650 	.word	0x20005650
 800fd78:	20005178 	.word	0x20005178
 800fd7c:	20005174 	.word	0x20005174
 800fd80:	200001f0 	.word	0x200001f0

0800fd84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d10a      	bne.n	800fdaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd98:	f383 8811 	msr	BASEPRI, r3
 800fd9c:	f3bf 8f6f 	isb	sy
 800fda0:	f3bf 8f4f 	dsb	sy
 800fda4:	60fb      	str	r3, [r7, #12]
}
 800fda6:	bf00      	nop
 800fda8:	e7fe      	b.n	800fda8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fdaa:	4b07      	ldr	r3, [pc, #28]	; (800fdc8 <vTaskPlaceOnEventList+0x44>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	3318      	adds	r3, #24
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f7fe facd 	bl	800e352 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fdb8:	2101      	movs	r1, #1
 800fdba:	6838      	ldr	r0, [r7, #0]
 800fdbc:	f000 fc34 	bl	8010628 <prvAddCurrentTaskToDelayedList>
}
 800fdc0:	bf00      	nop
 800fdc2:	3710      	adds	r7, #16
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	20005174 	.word	0x20005174

0800fdcc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b086      	sub	sp, #24
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	60f8      	str	r0, [r7, #12]
 800fdd4:	60b9      	str	r1, [r7, #8]
 800fdd6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d10a      	bne.n	800fdf4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800fdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde2:	f383 8811 	msr	BASEPRI, r3
 800fde6:	f3bf 8f6f 	isb	sy
 800fdea:	f3bf 8f4f 	dsb	sy
 800fdee:	617b      	str	r3, [r7, #20]
}
 800fdf0:	bf00      	nop
 800fdf2:	e7fe      	b.n	800fdf2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800fdf4:	4b11      	ldr	r3, [pc, #68]	; (800fe3c <vTaskPlaceOnUnorderedEventList+0x70>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d10a      	bne.n	800fe12 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800fdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe00:	f383 8811 	msr	BASEPRI, r3
 800fe04:	f3bf 8f6f 	isb	sy
 800fe08:	f3bf 8f4f 	dsb	sy
 800fe0c:	613b      	str	r3, [r7, #16]
}
 800fe0e:	bf00      	nop
 800fe10:	e7fe      	b.n	800fe10 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fe12:	4b0b      	ldr	r3, [pc, #44]	; (800fe40 <vTaskPlaceOnUnorderedEventList+0x74>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	68ba      	ldr	r2, [r7, #8]
 800fe18:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800fe1c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe1e:	4b08      	ldr	r3, [pc, #32]	; (800fe40 <vTaskPlaceOnUnorderedEventList+0x74>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	3318      	adds	r3, #24
 800fe24:	4619      	mov	r1, r3
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f7fe fa6f 	bl	800e30a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe2c:	2101      	movs	r1, #1
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f000 fbfa 	bl	8010628 <prvAddCurrentTaskToDelayedList>
}
 800fe34:	bf00      	nop
 800fe36:	3718      	adds	r7, #24
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	20005670 	.word	0x20005670
 800fe40:	20005174 	.word	0x20005174

0800fe44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b086      	sub	sp, #24
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	60f8      	str	r0, [r7, #12]
 800fe4c:	60b9      	str	r1, [r7, #8]
 800fe4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d10a      	bne.n	800fe6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fe56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe5a:	f383 8811 	msr	BASEPRI, r3
 800fe5e:	f3bf 8f6f 	isb	sy
 800fe62:	f3bf 8f4f 	dsb	sy
 800fe66:	617b      	str	r3, [r7, #20]
}
 800fe68:	bf00      	nop
 800fe6a:	e7fe      	b.n	800fe6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe6c:	4b0a      	ldr	r3, [pc, #40]	; (800fe98 <vTaskPlaceOnEventListRestricted+0x54>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	3318      	adds	r3, #24
 800fe72:	4619      	mov	r1, r3
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f7fe fa48 	bl	800e30a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d002      	beq.n	800fe86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fe80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fe86:	6879      	ldr	r1, [r7, #4]
 800fe88:	68b8      	ldr	r0, [r7, #8]
 800fe8a:	f000 fbcd 	bl	8010628 <prvAddCurrentTaskToDelayedList>
	}
 800fe8e:	bf00      	nop
 800fe90:	3718      	adds	r7, #24
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	20005174 	.word	0x20005174

0800fe9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b086      	sub	sp, #24
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	68db      	ldr	r3, [r3, #12]
 800fea8:	68db      	ldr	r3, [r3, #12]
 800feaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d10a      	bne.n	800fec8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800feb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb6:	f383 8811 	msr	BASEPRI, r3
 800feba:	f3bf 8f6f 	isb	sy
 800febe:	f3bf 8f4f 	dsb	sy
 800fec2:	60fb      	str	r3, [r7, #12]
}
 800fec4:	bf00      	nop
 800fec6:	e7fe      	b.n	800fec6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	3318      	adds	r3, #24
 800fecc:	4618      	mov	r0, r3
 800fece:	f7fe fa79 	bl	800e3c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fed2:	4b1e      	ldr	r3, [pc, #120]	; (800ff4c <xTaskRemoveFromEventList+0xb0>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d11d      	bne.n	800ff16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	3304      	adds	r3, #4
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fe fa70 	bl	800e3c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fee8:	4b19      	ldr	r3, [pc, #100]	; (800ff50 <xTaskRemoveFromEventList+0xb4>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	429a      	cmp	r2, r3
 800feee:	d903      	bls.n	800fef8 <xTaskRemoveFromEventList+0x5c>
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef4:	4a16      	ldr	r2, [pc, #88]	; (800ff50 <xTaskRemoveFromEventList+0xb4>)
 800fef6:	6013      	str	r3, [r2, #0]
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fefc:	4613      	mov	r3, r2
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	4413      	add	r3, r2
 800ff02:	009b      	lsls	r3, r3, #2
 800ff04:	4a13      	ldr	r2, [pc, #76]	; (800ff54 <xTaskRemoveFromEventList+0xb8>)
 800ff06:	441a      	add	r2, r3
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	3304      	adds	r3, #4
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	4610      	mov	r0, r2
 800ff10:	f7fe f9fb 	bl	800e30a <vListInsertEnd>
 800ff14:	e005      	b.n	800ff22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	3318      	adds	r3, #24
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	480e      	ldr	r0, [pc, #56]	; (800ff58 <xTaskRemoveFromEventList+0xbc>)
 800ff1e:	f7fe f9f4 	bl	800e30a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff26:	4b0d      	ldr	r3, [pc, #52]	; (800ff5c <xTaskRemoveFromEventList+0xc0>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d905      	bls.n	800ff3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ff30:	2301      	movs	r3, #1
 800ff32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ff34:	4b0a      	ldr	r3, [pc, #40]	; (800ff60 <xTaskRemoveFromEventList+0xc4>)
 800ff36:	2201      	movs	r2, #1
 800ff38:	601a      	str	r2, [r3, #0]
 800ff3a:	e001      	b.n	800ff40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ff40:	697b      	ldr	r3, [r7, #20]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3718      	adds	r7, #24
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	20005670 	.word	0x20005670
 800ff50:	20005650 	.word	0x20005650
 800ff54:	20005178 	.word	0x20005178
 800ff58:	20005608 	.word	0x20005608
 800ff5c:	20005174 	.word	0x20005174
 800ff60:	2000565c 	.word	0x2000565c

0800ff64 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b086      	sub	sp, #24
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800ff6e:	4b29      	ldr	r3, [pc, #164]	; (8010014 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d10a      	bne.n	800ff8c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800ff76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff7a:	f383 8811 	msr	BASEPRI, r3
 800ff7e:	f3bf 8f6f 	isb	sy
 800ff82:	f3bf 8f4f 	dsb	sy
 800ff86:	613b      	str	r3, [r7, #16]
}
 800ff88:	bf00      	nop
 800ff8a:	e7fe      	b.n	800ff8a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	68db      	ldr	r3, [r3, #12]
 800ff9a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d10a      	bne.n	800ffb8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800ffa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa6:	f383 8811 	msr	BASEPRI, r3
 800ffaa:	f3bf 8f6f 	isb	sy
 800ffae:	f3bf 8f4f 	dsb	sy
 800ffb2:	60fb      	str	r3, [r7, #12]
}
 800ffb4:	bf00      	nop
 800ffb6:	e7fe      	b.n	800ffb6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f7fe fa03 	bl	800e3c4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	3304      	adds	r3, #4
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fe f9fe 	bl	800e3c4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffcc:	4b12      	ldr	r3, [pc, #72]	; (8010018 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d903      	bls.n	800ffdc <vTaskRemoveFromUnorderedEventList+0x78>
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd8:	4a0f      	ldr	r2, [pc, #60]	; (8010018 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ffda:	6013      	str	r3, [r2, #0]
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	009b      	lsls	r3, r3, #2
 800ffe4:	4413      	add	r3, r2
 800ffe6:	009b      	lsls	r3, r3, #2
 800ffe8:	4a0c      	ldr	r2, [pc, #48]	; (801001c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800ffea:	441a      	add	r2, r3
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	3304      	adds	r3, #4
 800fff0:	4619      	mov	r1, r3
 800fff2:	4610      	mov	r0, r2
 800fff4:	f7fe f989 	bl	800e30a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fffc:	4b08      	ldr	r3, [pc, #32]	; (8010020 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010002:	429a      	cmp	r2, r3
 8010004:	d902      	bls.n	801000c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8010006:	4b07      	ldr	r3, [pc, #28]	; (8010024 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8010008:	2201      	movs	r2, #1
 801000a:	601a      	str	r2, [r3, #0]
	}
}
 801000c:	bf00      	nop
 801000e:	3718      	adds	r7, #24
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}
 8010014:	20005670 	.word	0x20005670
 8010018:	20005650 	.word	0x20005650
 801001c:	20005178 	.word	0x20005178
 8010020:	20005174 	.word	0x20005174
 8010024:	2000565c 	.word	0x2000565c

08010028 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010028:	b480      	push	{r7}
 801002a:	b083      	sub	sp, #12
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010030:	4b06      	ldr	r3, [pc, #24]	; (801004c <vTaskInternalSetTimeOutState+0x24>)
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010038:	4b05      	ldr	r3, [pc, #20]	; (8010050 <vTaskInternalSetTimeOutState+0x28>)
 801003a:	681a      	ldr	r2, [r3, #0]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	605a      	str	r2, [r3, #4]
}
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr
 801004c:	20005660 	.word	0x20005660
 8010050:	2000564c 	.word	0x2000564c

08010054 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b088      	sub	sp, #32
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d10a      	bne.n	801007a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010068:	f383 8811 	msr	BASEPRI, r3
 801006c:	f3bf 8f6f 	isb	sy
 8010070:	f3bf 8f4f 	dsb	sy
 8010074:	613b      	str	r3, [r7, #16]
}
 8010076:	bf00      	nop
 8010078:	e7fe      	b.n	8010078 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d10a      	bne.n	8010096 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010084:	f383 8811 	msr	BASEPRI, r3
 8010088:	f3bf 8f6f 	isb	sy
 801008c:	f3bf 8f4f 	dsb	sy
 8010090:	60fb      	str	r3, [r7, #12]
}
 8010092:	bf00      	nop
 8010094:	e7fe      	b.n	8010094 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010096:	f000 ffb5 	bl	8011004 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801009a:	4b1d      	ldr	r3, [pc, #116]	; (8010110 <xTaskCheckForTimeOut+0xbc>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	69ba      	ldr	r2, [r7, #24]
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100b2:	d102      	bne.n	80100ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80100b4:	2300      	movs	r3, #0
 80100b6:	61fb      	str	r3, [r7, #28]
 80100b8:	e023      	b.n	8010102 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	4b15      	ldr	r3, [pc, #84]	; (8010114 <xTaskCheckForTimeOut+0xc0>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d007      	beq.n	80100d6 <xTaskCheckForTimeOut+0x82>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	69ba      	ldr	r2, [r7, #24]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d302      	bcc.n	80100d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100d0:	2301      	movs	r3, #1
 80100d2:	61fb      	str	r3, [r7, #28]
 80100d4:	e015      	b.n	8010102 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	697a      	ldr	r2, [r7, #20]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d20b      	bcs.n	80100f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	1ad2      	subs	r2, r2, r3
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f7ff ff9b 	bl	8010028 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80100f2:	2300      	movs	r3, #0
 80100f4:	61fb      	str	r3, [r7, #28]
 80100f6:	e004      	b.n	8010102 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	2200      	movs	r2, #0
 80100fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80100fe:	2301      	movs	r3, #1
 8010100:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010102:	f000 ffaf 	bl	8011064 <vPortExitCritical>

	return xReturn;
 8010106:	69fb      	ldr	r3, [r7, #28]
}
 8010108:	4618      	mov	r0, r3
 801010a:	3720      	adds	r7, #32
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}
 8010110:	2000564c 	.word	0x2000564c
 8010114:	20005660 	.word	0x20005660

08010118 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010118:	b480      	push	{r7}
 801011a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801011c:	4b03      	ldr	r3, [pc, #12]	; (801012c <vTaskMissedYield+0x14>)
 801011e:	2201      	movs	r2, #1
 8010120:	601a      	str	r2, [r3, #0]
}
 8010122:	bf00      	nop
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr
 801012c:	2000565c 	.word	0x2000565c

08010130 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010138:	f000 f852 	bl	80101e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801013c:	4b06      	ldr	r3, [pc, #24]	; (8010158 <prvIdleTask+0x28>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	2b01      	cmp	r3, #1
 8010142:	d9f9      	bls.n	8010138 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010144:	4b05      	ldr	r3, [pc, #20]	; (801015c <prvIdleTask+0x2c>)
 8010146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801014a:	601a      	str	r2, [r3, #0]
 801014c:	f3bf 8f4f 	dsb	sy
 8010150:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010154:	e7f0      	b.n	8010138 <prvIdleTask+0x8>
 8010156:	bf00      	nop
 8010158:	20005178 	.word	0x20005178
 801015c:	e000ed04 	.word	0xe000ed04

08010160 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010166:	2300      	movs	r3, #0
 8010168:	607b      	str	r3, [r7, #4]
 801016a:	e00c      	b.n	8010186 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	4613      	mov	r3, r2
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	4413      	add	r3, r2
 8010174:	009b      	lsls	r3, r3, #2
 8010176:	4a12      	ldr	r2, [pc, #72]	; (80101c0 <prvInitialiseTaskLists+0x60>)
 8010178:	4413      	add	r3, r2
 801017a:	4618      	mov	r0, r3
 801017c:	f7fe f898 	bl	800e2b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	3301      	adds	r3, #1
 8010184:	607b      	str	r3, [r7, #4]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2b37      	cmp	r3, #55	; 0x37
 801018a:	d9ef      	bls.n	801016c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801018c:	480d      	ldr	r0, [pc, #52]	; (80101c4 <prvInitialiseTaskLists+0x64>)
 801018e:	f7fe f88f 	bl	800e2b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010192:	480d      	ldr	r0, [pc, #52]	; (80101c8 <prvInitialiseTaskLists+0x68>)
 8010194:	f7fe f88c 	bl	800e2b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010198:	480c      	ldr	r0, [pc, #48]	; (80101cc <prvInitialiseTaskLists+0x6c>)
 801019a:	f7fe f889 	bl	800e2b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801019e:	480c      	ldr	r0, [pc, #48]	; (80101d0 <prvInitialiseTaskLists+0x70>)
 80101a0:	f7fe f886 	bl	800e2b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80101a4:	480b      	ldr	r0, [pc, #44]	; (80101d4 <prvInitialiseTaskLists+0x74>)
 80101a6:	f7fe f883 	bl	800e2b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80101aa:	4b0b      	ldr	r3, [pc, #44]	; (80101d8 <prvInitialiseTaskLists+0x78>)
 80101ac:	4a05      	ldr	r2, [pc, #20]	; (80101c4 <prvInitialiseTaskLists+0x64>)
 80101ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101b0:	4b0a      	ldr	r3, [pc, #40]	; (80101dc <prvInitialiseTaskLists+0x7c>)
 80101b2:	4a05      	ldr	r2, [pc, #20]	; (80101c8 <prvInitialiseTaskLists+0x68>)
 80101b4:	601a      	str	r2, [r3, #0]
}
 80101b6:	bf00      	nop
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	20005178 	.word	0x20005178
 80101c4:	200055d8 	.word	0x200055d8
 80101c8:	200055ec 	.word	0x200055ec
 80101cc:	20005608 	.word	0x20005608
 80101d0:	2000561c 	.word	0x2000561c
 80101d4:	20005634 	.word	0x20005634
 80101d8:	20005600 	.word	0x20005600
 80101dc:	20005604 	.word	0x20005604

080101e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101e6:	e019      	b.n	801021c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80101e8:	f000 ff0c 	bl	8011004 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101ec:	4b10      	ldr	r3, [pc, #64]	; (8010230 <prvCheckTasksWaitingTermination+0x50>)
 80101ee:	68db      	ldr	r3, [r3, #12]
 80101f0:	68db      	ldr	r3, [r3, #12]
 80101f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	3304      	adds	r3, #4
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fe f8e3 	bl	800e3c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80101fe:	4b0d      	ldr	r3, [pc, #52]	; (8010234 <prvCheckTasksWaitingTermination+0x54>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	3b01      	subs	r3, #1
 8010204:	4a0b      	ldr	r2, [pc, #44]	; (8010234 <prvCheckTasksWaitingTermination+0x54>)
 8010206:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010208:	4b0b      	ldr	r3, [pc, #44]	; (8010238 <prvCheckTasksWaitingTermination+0x58>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	3b01      	subs	r3, #1
 801020e:	4a0a      	ldr	r2, [pc, #40]	; (8010238 <prvCheckTasksWaitingTermination+0x58>)
 8010210:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010212:	f000 ff27 	bl	8011064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f000 f810 	bl	801023c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801021c:	4b06      	ldr	r3, [pc, #24]	; (8010238 <prvCheckTasksWaitingTermination+0x58>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d1e1      	bne.n	80101e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010224:	bf00      	nop
 8010226:	bf00      	nop
 8010228:	3708      	adds	r7, #8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	2000561c 	.word	0x2000561c
 8010234:	20005648 	.word	0x20005648
 8010238:	20005630 	.word	0x20005630

0801023c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801023c:	b580      	push	{r7, lr}
 801023e:	b084      	sub	sp, #16
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	3354      	adds	r3, #84	; 0x54
 8010248:	4618      	mov	r0, r3
 801024a:	f009 fe2d 	bl	8019ea8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8010254:	2b00      	cmp	r3, #0
 8010256:	d108      	bne.n	801026a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801025c:	4618      	mov	r0, r3
 801025e:	f001 f8bf 	bl	80113e0 <vPortFree>
				vPortFree( pxTCB );
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f001 f8bc 	bl	80113e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010268:	e018      	b.n	801029c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8010270:	2b01      	cmp	r3, #1
 8010272:	d103      	bne.n	801027c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f001 f8b3 	bl	80113e0 <vPortFree>
	}
 801027a:	e00f      	b.n	801029c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8010282:	2b02      	cmp	r3, #2
 8010284:	d00a      	beq.n	801029c <prvDeleteTCB+0x60>
	__asm volatile
 8010286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028a:	f383 8811 	msr	BASEPRI, r3
 801028e:	f3bf 8f6f 	isb	sy
 8010292:	f3bf 8f4f 	dsb	sy
 8010296:	60fb      	str	r3, [r7, #12]
}
 8010298:	bf00      	nop
 801029a:	e7fe      	b.n	801029a <prvDeleteTCB+0x5e>
	}
 801029c:	bf00      	nop
 801029e:	3710      	adds	r7, #16
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80102a4:	b480      	push	{r7}
 80102a6:	b083      	sub	sp, #12
 80102a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102aa:	4b0c      	ldr	r3, [pc, #48]	; (80102dc <prvResetNextTaskUnblockTime+0x38>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d104      	bne.n	80102be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80102b4:	4b0a      	ldr	r3, [pc, #40]	; (80102e0 <prvResetNextTaskUnblockTime+0x3c>)
 80102b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80102ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80102bc:	e008      	b.n	80102d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102be:	4b07      	ldr	r3, [pc, #28]	; (80102dc <prvResetNextTaskUnblockTime+0x38>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	68db      	ldr	r3, [r3, #12]
 80102c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	4a04      	ldr	r2, [pc, #16]	; (80102e0 <prvResetNextTaskUnblockTime+0x3c>)
 80102ce:	6013      	str	r3, [r2, #0]
}
 80102d0:	bf00      	nop
 80102d2:	370c      	adds	r7, #12
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr
 80102dc:	20005600 	.word	0x20005600
 80102e0:	20005668 	.word	0x20005668

080102e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80102e4:	b480      	push	{r7}
 80102e6:	b083      	sub	sp, #12
 80102e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80102ea:	4b0b      	ldr	r3, [pc, #44]	; (8010318 <xTaskGetSchedulerState+0x34>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d102      	bne.n	80102f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80102f2:	2301      	movs	r3, #1
 80102f4:	607b      	str	r3, [r7, #4]
 80102f6:	e008      	b.n	801030a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102f8:	4b08      	ldr	r3, [pc, #32]	; (801031c <xTaskGetSchedulerState+0x38>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d102      	bne.n	8010306 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010300:	2302      	movs	r3, #2
 8010302:	607b      	str	r3, [r7, #4]
 8010304:	e001      	b.n	801030a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010306:	2300      	movs	r3, #0
 8010308:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801030a:	687b      	ldr	r3, [r7, #4]
	}
 801030c:	4618      	mov	r0, r3
 801030e:	370c      	adds	r7, #12
 8010310:	46bd      	mov	sp, r7
 8010312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010316:	4770      	bx	lr
 8010318:	20005654 	.word	0x20005654
 801031c:	20005670 	.word	0x20005670

08010320 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010320:	b580      	push	{r7, lr}
 8010322:	b084      	sub	sp, #16
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801032c:	2300      	movs	r3, #0
 801032e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d051      	beq.n	80103da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801033a:	4b2a      	ldr	r3, [pc, #168]	; (80103e4 <xTaskPriorityInherit+0xc4>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010340:	429a      	cmp	r2, r3
 8010342:	d241      	bcs.n	80103c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	699b      	ldr	r3, [r3, #24]
 8010348:	2b00      	cmp	r3, #0
 801034a:	db06      	blt.n	801035a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801034c:	4b25      	ldr	r3, [pc, #148]	; (80103e4 <xTaskPriorityInherit+0xc4>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010352:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	6959      	ldr	r1, [r3, #20]
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010362:	4613      	mov	r3, r2
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	4413      	add	r3, r2
 8010368:	009b      	lsls	r3, r3, #2
 801036a:	4a1f      	ldr	r2, [pc, #124]	; (80103e8 <xTaskPriorityInherit+0xc8>)
 801036c:	4413      	add	r3, r2
 801036e:	4299      	cmp	r1, r3
 8010370:	d122      	bne.n	80103b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	3304      	adds	r3, #4
 8010376:	4618      	mov	r0, r3
 8010378:	f7fe f824 	bl	800e3c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801037c:	4b19      	ldr	r3, [pc, #100]	; (80103e4 <xTaskPriorityInherit+0xc4>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801038a:	4b18      	ldr	r3, [pc, #96]	; (80103ec <xTaskPriorityInherit+0xcc>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	429a      	cmp	r2, r3
 8010390:	d903      	bls.n	801039a <xTaskPriorityInherit+0x7a>
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010396:	4a15      	ldr	r2, [pc, #84]	; (80103ec <xTaskPriorityInherit+0xcc>)
 8010398:	6013      	str	r3, [r2, #0]
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801039e:	4613      	mov	r3, r2
 80103a0:	009b      	lsls	r3, r3, #2
 80103a2:	4413      	add	r3, r2
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	4a10      	ldr	r2, [pc, #64]	; (80103e8 <xTaskPriorityInherit+0xc8>)
 80103a8:	441a      	add	r2, r3
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	3304      	adds	r3, #4
 80103ae:	4619      	mov	r1, r3
 80103b0:	4610      	mov	r0, r2
 80103b2:	f7fd ffaa 	bl	800e30a <vListInsertEnd>
 80103b6:	e004      	b.n	80103c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80103b8:	4b0a      	ldr	r3, [pc, #40]	; (80103e4 <xTaskPriorityInherit+0xc4>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80103c2:	2301      	movs	r3, #1
 80103c4:	60fb      	str	r3, [r7, #12]
 80103c6:	e008      	b.n	80103da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80103cc:	4b05      	ldr	r3, [pc, #20]	; (80103e4 <xTaskPriorityInherit+0xc4>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d201      	bcs.n	80103da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80103d6:	2301      	movs	r3, #1
 80103d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103da:	68fb      	ldr	r3, [r7, #12]
	}
 80103dc:	4618      	mov	r0, r3
 80103de:	3710      	adds	r7, #16
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	20005174 	.word	0x20005174
 80103e8:	20005178 	.word	0x20005178
 80103ec:	20005650 	.word	0x20005650

080103f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b086      	sub	sp, #24
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80103fc:	2300      	movs	r3, #0
 80103fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d056      	beq.n	80104b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010406:	4b2e      	ldr	r3, [pc, #184]	; (80104c0 <xTaskPriorityDisinherit+0xd0>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	693a      	ldr	r2, [r7, #16]
 801040c:	429a      	cmp	r2, r3
 801040e:	d00a      	beq.n	8010426 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010414:	f383 8811 	msr	BASEPRI, r3
 8010418:	f3bf 8f6f 	isb	sy
 801041c:	f3bf 8f4f 	dsb	sy
 8010420:	60fb      	str	r3, [r7, #12]
}
 8010422:	bf00      	nop
 8010424:	e7fe      	b.n	8010424 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801042a:	2b00      	cmp	r3, #0
 801042c:	d10a      	bne.n	8010444 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801042e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010432:	f383 8811 	msr	BASEPRI, r3
 8010436:	f3bf 8f6f 	isb	sy
 801043a:	f3bf 8f4f 	dsb	sy
 801043e:	60bb      	str	r3, [r7, #8]
}
 8010440:	bf00      	nop
 8010442:	e7fe      	b.n	8010442 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010448:	1e5a      	subs	r2, r3, #1
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010456:	429a      	cmp	r2, r3
 8010458:	d02c      	beq.n	80104b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801045e:	2b00      	cmp	r3, #0
 8010460:	d128      	bne.n	80104b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	3304      	adds	r3, #4
 8010466:	4618      	mov	r0, r3
 8010468:	f7fd ffac 	bl	800e3c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010474:	693b      	ldr	r3, [r7, #16]
 8010476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010478:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010484:	4b0f      	ldr	r3, [pc, #60]	; (80104c4 <xTaskPriorityDisinherit+0xd4>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	429a      	cmp	r2, r3
 801048a:	d903      	bls.n	8010494 <xTaskPriorityDisinherit+0xa4>
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010490:	4a0c      	ldr	r2, [pc, #48]	; (80104c4 <xTaskPriorityDisinherit+0xd4>)
 8010492:	6013      	str	r3, [r2, #0]
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010498:	4613      	mov	r3, r2
 801049a:	009b      	lsls	r3, r3, #2
 801049c:	4413      	add	r3, r2
 801049e:	009b      	lsls	r3, r3, #2
 80104a0:	4a09      	ldr	r2, [pc, #36]	; (80104c8 <xTaskPriorityDisinherit+0xd8>)
 80104a2:	441a      	add	r2, r3
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	3304      	adds	r3, #4
 80104a8:	4619      	mov	r1, r3
 80104aa:	4610      	mov	r0, r2
 80104ac:	f7fd ff2d 	bl	800e30a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80104b0:	2301      	movs	r3, #1
 80104b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80104b4:	697b      	ldr	r3, [r7, #20]
	}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3718      	adds	r7, #24
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	20005174 	.word	0x20005174
 80104c4:	20005650 	.word	0x20005650
 80104c8:	20005178 	.word	0x20005178

080104cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b088      	sub	sp, #32
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80104da:	2301      	movs	r3, #1
 80104dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d06a      	beq.n	80105ba <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80104e4:	69bb      	ldr	r3, [r7, #24]
 80104e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d10a      	bne.n	8010502 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80104ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f0:	f383 8811 	msr	BASEPRI, r3
 80104f4:	f3bf 8f6f 	isb	sy
 80104f8:	f3bf 8f4f 	dsb	sy
 80104fc:	60fb      	str	r3, [r7, #12]
}
 80104fe:	bf00      	nop
 8010500:	e7fe      	b.n	8010500 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010502:	69bb      	ldr	r3, [r7, #24]
 8010504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010506:	683a      	ldr	r2, [r7, #0]
 8010508:	429a      	cmp	r2, r3
 801050a:	d902      	bls.n	8010512 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	61fb      	str	r3, [r7, #28]
 8010510:	e002      	b.n	8010518 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010512:	69bb      	ldr	r3, [r7, #24]
 8010514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010516:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010518:	69bb      	ldr	r3, [r7, #24]
 801051a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801051c:	69fa      	ldr	r2, [r7, #28]
 801051e:	429a      	cmp	r2, r3
 8010520:	d04b      	beq.n	80105ba <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010522:	69bb      	ldr	r3, [r7, #24]
 8010524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010526:	697a      	ldr	r2, [r7, #20]
 8010528:	429a      	cmp	r2, r3
 801052a:	d146      	bne.n	80105ba <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801052c:	4b25      	ldr	r3, [pc, #148]	; (80105c4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	69ba      	ldr	r2, [r7, #24]
 8010532:	429a      	cmp	r2, r3
 8010534:	d10a      	bne.n	801054c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010536:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053a:	f383 8811 	msr	BASEPRI, r3
 801053e:	f3bf 8f6f 	isb	sy
 8010542:	f3bf 8f4f 	dsb	sy
 8010546:	60bb      	str	r3, [r7, #8]
}
 8010548:	bf00      	nop
 801054a:	e7fe      	b.n	801054a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801054c:	69bb      	ldr	r3, [r7, #24]
 801054e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010550:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	69fa      	ldr	r2, [r7, #28]
 8010556:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010558:	69bb      	ldr	r3, [r7, #24]
 801055a:	699b      	ldr	r3, [r3, #24]
 801055c:	2b00      	cmp	r3, #0
 801055e:	db04      	blt.n	801056a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801056a:	69bb      	ldr	r3, [r7, #24]
 801056c:	6959      	ldr	r1, [r3, #20]
 801056e:	693a      	ldr	r2, [r7, #16]
 8010570:	4613      	mov	r3, r2
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	4413      	add	r3, r2
 8010576:	009b      	lsls	r3, r3, #2
 8010578:	4a13      	ldr	r2, [pc, #76]	; (80105c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801057a:	4413      	add	r3, r2
 801057c:	4299      	cmp	r1, r3
 801057e:	d11c      	bne.n	80105ba <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010580:	69bb      	ldr	r3, [r7, #24]
 8010582:	3304      	adds	r3, #4
 8010584:	4618      	mov	r0, r3
 8010586:	f7fd ff1d 	bl	800e3c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801058e:	4b0f      	ldr	r3, [pc, #60]	; (80105cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	429a      	cmp	r2, r3
 8010594:	d903      	bls.n	801059e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801059a:	4a0c      	ldr	r2, [pc, #48]	; (80105cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801059c:	6013      	str	r3, [r2, #0]
 801059e:	69bb      	ldr	r3, [r7, #24]
 80105a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105a2:	4613      	mov	r3, r2
 80105a4:	009b      	lsls	r3, r3, #2
 80105a6:	4413      	add	r3, r2
 80105a8:	009b      	lsls	r3, r3, #2
 80105aa:	4a07      	ldr	r2, [pc, #28]	; (80105c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80105ac:	441a      	add	r2, r3
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	3304      	adds	r3, #4
 80105b2:	4619      	mov	r1, r3
 80105b4:	4610      	mov	r0, r2
 80105b6:	f7fd fea8 	bl	800e30a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105ba:	bf00      	nop
 80105bc:	3720      	adds	r7, #32
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	20005174 	.word	0x20005174
 80105c8:	20005178 	.word	0x20005178
 80105cc:	20005650 	.word	0x20005650

080105d0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80105d0:	b480      	push	{r7}
 80105d2:	b083      	sub	sp, #12
 80105d4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80105d6:	4b09      	ldr	r3, [pc, #36]	; (80105fc <uxTaskResetEventItemValue+0x2c>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	699b      	ldr	r3, [r3, #24]
 80105dc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105de:	4b07      	ldr	r3, [pc, #28]	; (80105fc <uxTaskResetEventItemValue+0x2c>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105e4:	4b05      	ldr	r3, [pc, #20]	; (80105fc <uxTaskResetEventItemValue+0x2c>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80105ec:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80105ee:	687b      	ldr	r3, [r7, #4]
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr
 80105fc:	20005174 	.word	0x20005174

08010600 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010600:	b480      	push	{r7}
 8010602:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010604:	4b07      	ldr	r3, [pc, #28]	; (8010624 <pvTaskIncrementMutexHeldCount+0x24>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d004      	beq.n	8010616 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801060c:	4b05      	ldr	r3, [pc, #20]	; (8010624 <pvTaskIncrementMutexHeldCount+0x24>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010612:	3201      	adds	r2, #1
 8010614:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010616:	4b03      	ldr	r3, [pc, #12]	; (8010624 <pvTaskIncrementMutexHeldCount+0x24>)
 8010618:	681b      	ldr	r3, [r3, #0]
	}
 801061a:	4618      	mov	r0, r3
 801061c:	46bd      	mov	sp, r7
 801061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010622:	4770      	bx	lr
 8010624:	20005174 	.word	0x20005174

08010628 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010632:	4b21      	ldr	r3, [pc, #132]	; (80106b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010638:	4b20      	ldr	r3, [pc, #128]	; (80106bc <prvAddCurrentTaskToDelayedList+0x94>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	3304      	adds	r3, #4
 801063e:	4618      	mov	r0, r3
 8010640:	f7fd fec0 	bl	800e3c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801064a:	d10a      	bne.n	8010662 <prvAddCurrentTaskToDelayedList+0x3a>
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d007      	beq.n	8010662 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010652:	4b1a      	ldr	r3, [pc, #104]	; (80106bc <prvAddCurrentTaskToDelayedList+0x94>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	3304      	adds	r3, #4
 8010658:	4619      	mov	r1, r3
 801065a:	4819      	ldr	r0, [pc, #100]	; (80106c0 <prvAddCurrentTaskToDelayedList+0x98>)
 801065c:	f7fd fe55 	bl	800e30a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010660:	e026      	b.n	80106b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010662:	68fa      	ldr	r2, [r7, #12]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	4413      	add	r3, r2
 8010668:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801066a:	4b14      	ldr	r3, [pc, #80]	; (80106bc <prvAddCurrentTaskToDelayedList+0x94>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	68ba      	ldr	r2, [r7, #8]
 8010670:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010672:	68ba      	ldr	r2, [r7, #8]
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	429a      	cmp	r2, r3
 8010678:	d209      	bcs.n	801068e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801067a:	4b12      	ldr	r3, [pc, #72]	; (80106c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801067c:	681a      	ldr	r2, [r3, #0]
 801067e:	4b0f      	ldr	r3, [pc, #60]	; (80106bc <prvAddCurrentTaskToDelayedList+0x94>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	3304      	adds	r3, #4
 8010684:	4619      	mov	r1, r3
 8010686:	4610      	mov	r0, r2
 8010688:	f7fd fe63 	bl	800e352 <vListInsert>
}
 801068c:	e010      	b.n	80106b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801068e:	4b0e      	ldr	r3, [pc, #56]	; (80106c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010690:	681a      	ldr	r2, [r3, #0]
 8010692:	4b0a      	ldr	r3, [pc, #40]	; (80106bc <prvAddCurrentTaskToDelayedList+0x94>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	3304      	adds	r3, #4
 8010698:	4619      	mov	r1, r3
 801069a:	4610      	mov	r0, r2
 801069c:	f7fd fe59 	bl	800e352 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80106a0:	4b0a      	ldr	r3, [pc, #40]	; (80106cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	68ba      	ldr	r2, [r7, #8]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d202      	bcs.n	80106b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80106aa:	4a08      	ldr	r2, [pc, #32]	; (80106cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	6013      	str	r3, [r2, #0]
}
 80106b0:	bf00      	nop
 80106b2:	3710      	adds	r7, #16
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	2000564c 	.word	0x2000564c
 80106bc:	20005174 	.word	0x20005174
 80106c0:	20005634 	.word	0x20005634
 80106c4:	20005604 	.word	0x20005604
 80106c8:	20005600 	.word	0x20005600
 80106cc:	20005668 	.word	0x20005668

080106d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b08a      	sub	sp, #40	; 0x28
 80106d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80106d6:	2300      	movs	r3, #0
 80106d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80106da:	f000 fb07 	bl	8010cec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80106de:	4b1c      	ldr	r3, [pc, #112]	; (8010750 <xTimerCreateTimerTask+0x80>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d021      	beq.n	801072a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80106e6:	2300      	movs	r3, #0
 80106e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80106ea:	2300      	movs	r3, #0
 80106ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80106ee:	1d3a      	adds	r2, r7, #4
 80106f0:	f107 0108 	add.w	r1, r7, #8
 80106f4:	f107 030c 	add.w	r3, r7, #12
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7fd fbd1 	bl	800dea0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80106fe:	6879      	ldr	r1, [r7, #4]
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	68fa      	ldr	r2, [r7, #12]
 8010704:	9202      	str	r2, [sp, #8]
 8010706:	9301      	str	r3, [sp, #4]
 8010708:	2302      	movs	r3, #2
 801070a:	9300      	str	r3, [sp, #0]
 801070c:	2300      	movs	r3, #0
 801070e:	460a      	mov	r2, r1
 8010710:	4910      	ldr	r1, [pc, #64]	; (8010754 <xTimerCreateTimerTask+0x84>)
 8010712:	4811      	ldr	r0, [pc, #68]	; (8010758 <xTimerCreateTimerTask+0x88>)
 8010714:	f7fe fe8e 	bl	800f434 <xTaskCreateStatic>
 8010718:	4603      	mov	r3, r0
 801071a:	4a10      	ldr	r2, [pc, #64]	; (801075c <xTimerCreateTimerTask+0x8c>)
 801071c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801071e:	4b0f      	ldr	r3, [pc, #60]	; (801075c <xTimerCreateTimerTask+0x8c>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d001      	beq.n	801072a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010726:	2301      	movs	r3, #1
 8010728:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d10a      	bne.n	8010746 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010734:	f383 8811 	msr	BASEPRI, r3
 8010738:	f3bf 8f6f 	isb	sy
 801073c:	f3bf 8f4f 	dsb	sy
 8010740:	613b      	str	r3, [r7, #16]
}
 8010742:	bf00      	nop
 8010744:	e7fe      	b.n	8010744 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010746:	697b      	ldr	r3, [r7, #20]
}
 8010748:	4618      	mov	r0, r3
 801074a:	3718      	adds	r7, #24
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}
 8010750:	200056a4 	.word	0x200056a4
 8010754:	0801f97c 	.word	0x0801f97c
 8010758:	08010895 	.word	0x08010895
 801075c:	200056a8 	.word	0x200056a8

08010760 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b08a      	sub	sp, #40	; 0x28
 8010764:	af00      	add	r7, sp, #0
 8010766:	60f8      	str	r0, [r7, #12]
 8010768:	60b9      	str	r1, [r7, #8]
 801076a:	607a      	str	r2, [r7, #4]
 801076c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801076e:	2300      	movs	r3, #0
 8010770:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d10a      	bne.n	801078e <xTimerGenericCommand+0x2e>
	__asm volatile
 8010778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801077c:	f383 8811 	msr	BASEPRI, r3
 8010780:	f3bf 8f6f 	isb	sy
 8010784:	f3bf 8f4f 	dsb	sy
 8010788:	623b      	str	r3, [r7, #32]
}
 801078a:	bf00      	nop
 801078c:	e7fe      	b.n	801078c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801078e:	4b1a      	ldr	r3, [pc, #104]	; (80107f8 <xTimerGenericCommand+0x98>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d02a      	beq.n	80107ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	2b05      	cmp	r3, #5
 80107a6:	dc18      	bgt.n	80107da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80107a8:	f7ff fd9c 	bl	80102e4 <xTaskGetSchedulerState>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b02      	cmp	r3, #2
 80107b0:	d109      	bne.n	80107c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80107b2:	4b11      	ldr	r3, [pc, #68]	; (80107f8 <xTimerGenericCommand+0x98>)
 80107b4:	6818      	ldr	r0, [r3, #0]
 80107b6:	f107 0110 	add.w	r1, r7, #16
 80107ba:	2300      	movs	r3, #0
 80107bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107be:	f7fd ffd3 	bl	800e768 <xQueueGenericSend>
 80107c2:	6278      	str	r0, [r7, #36]	; 0x24
 80107c4:	e012      	b.n	80107ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80107c6:	4b0c      	ldr	r3, [pc, #48]	; (80107f8 <xTimerGenericCommand+0x98>)
 80107c8:	6818      	ldr	r0, [r3, #0]
 80107ca:	f107 0110 	add.w	r1, r7, #16
 80107ce:	2300      	movs	r3, #0
 80107d0:	2200      	movs	r2, #0
 80107d2:	f7fd ffc9 	bl	800e768 <xQueueGenericSend>
 80107d6:	6278      	str	r0, [r7, #36]	; 0x24
 80107d8:	e008      	b.n	80107ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80107da:	4b07      	ldr	r3, [pc, #28]	; (80107f8 <xTimerGenericCommand+0x98>)
 80107dc:	6818      	ldr	r0, [r3, #0]
 80107de:	f107 0110 	add.w	r1, r7, #16
 80107e2:	2300      	movs	r3, #0
 80107e4:	683a      	ldr	r2, [r7, #0]
 80107e6:	f7fe f8bd 	bl	800e964 <xQueueGenericSendFromISR>
 80107ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80107ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3728      	adds	r7, #40	; 0x28
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	200056a4 	.word	0x200056a4

080107fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b088      	sub	sp, #32
 8010800:	af02      	add	r7, sp, #8
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010806:	4b22      	ldr	r3, [pc, #136]	; (8010890 <prvProcessExpiredTimer+0x94>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	3304      	adds	r3, #4
 8010814:	4618      	mov	r0, r3
 8010816:	f7fd fdd5 	bl	800e3c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010820:	f003 0304 	and.w	r3, r3, #4
 8010824:	2b00      	cmp	r3, #0
 8010826:	d022      	beq.n	801086e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	699a      	ldr	r2, [r3, #24]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	18d1      	adds	r1, r2, r3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	683a      	ldr	r2, [r7, #0]
 8010834:	6978      	ldr	r0, [r7, #20]
 8010836:	f000 f8d1 	bl	80109dc <prvInsertTimerInActiveList>
 801083a:	4603      	mov	r3, r0
 801083c:	2b00      	cmp	r3, #0
 801083e:	d01f      	beq.n	8010880 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010840:	2300      	movs	r3, #0
 8010842:	9300      	str	r3, [sp, #0]
 8010844:	2300      	movs	r3, #0
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	2100      	movs	r1, #0
 801084a:	6978      	ldr	r0, [r7, #20]
 801084c:	f7ff ff88 	bl	8010760 <xTimerGenericCommand>
 8010850:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d113      	bne.n	8010880 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801085c:	f383 8811 	msr	BASEPRI, r3
 8010860:	f3bf 8f6f 	isb	sy
 8010864:	f3bf 8f4f 	dsb	sy
 8010868:	60fb      	str	r3, [r7, #12]
}
 801086a:	bf00      	nop
 801086c:	e7fe      	b.n	801086c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010874:	f023 0301 	bic.w	r3, r3, #1
 8010878:	b2da      	uxtb	r2, r3
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	6a1b      	ldr	r3, [r3, #32]
 8010884:	6978      	ldr	r0, [r7, #20]
 8010886:	4798      	blx	r3
}
 8010888:	bf00      	nop
 801088a:	3718      	adds	r7, #24
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}
 8010890:	2000569c 	.word	0x2000569c

08010894 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b084      	sub	sp, #16
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801089c:	f107 0308 	add.w	r3, r7, #8
 80108a0:	4618      	mov	r0, r3
 80108a2:	f000 f857 	bl	8010954 <prvGetNextExpireTime>
 80108a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	4619      	mov	r1, r3
 80108ac:	68f8      	ldr	r0, [r7, #12]
 80108ae:	f000 f803 	bl	80108b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80108b2:	f000 f8d5 	bl	8010a60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80108b6:	e7f1      	b.n	801089c <prvTimerTask+0x8>

080108b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b084      	sub	sp, #16
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
 80108c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80108c2:	f7ff f885 	bl	800f9d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80108c6:	f107 0308 	add.w	r3, r7, #8
 80108ca:	4618      	mov	r0, r3
 80108cc:	f000 f866 	bl	801099c <prvSampleTimeNow>
 80108d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d130      	bne.n	801093a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d10a      	bne.n	80108f4 <prvProcessTimerOrBlockTask+0x3c>
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d806      	bhi.n	80108f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80108e6:	f7ff f881 	bl	800f9ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80108ea:	68f9      	ldr	r1, [r7, #12]
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f7ff ff85 	bl	80107fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80108f2:	e024      	b.n	801093e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d008      	beq.n	801090c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80108fa:	4b13      	ldr	r3, [pc, #76]	; (8010948 <prvProcessTimerOrBlockTask+0x90>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d101      	bne.n	8010908 <prvProcessTimerOrBlockTask+0x50>
 8010904:	2301      	movs	r3, #1
 8010906:	e000      	b.n	801090a <prvProcessTimerOrBlockTask+0x52>
 8010908:	2300      	movs	r3, #0
 801090a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801090c:	4b0f      	ldr	r3, [pc, #60]	; (801094c <prvProcessTimerOrBlockTask+0x94>)
 801090e:	6818      	ldr	r0, [r3, #0]
 8010910:	687a      	ldr	r2, [r7, #4]
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	1ad3      	subs	r3, r2, r3
 8010916:	683a      	ldr	r2, [r7, #0]
 8010918:	4619      	mov	r1, r3
 801091a:	f7fe fd57 	bl	800f3cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801091e:	f7ff f865 	bl	800f9ec <xTaskResumeAll>
 8010922:	4603      	mov	r3, r0
 8010924:	2b00      	cmp	r3, #0
 8010926:	d10a      	bne.n	801093e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010928:	4b09      	ldr	r3, [pc, #36]	; (8010950 <prvProcessTimerOrBlockTask+0x98>)
 801092a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801092e:	601a      	str	r2, [r3, #0]
 8010930:	f3bf 8f4f 	dsb	sy
 8010934:	f3bf 8f6f 	isb	sy
}
 8010938:	e001      	b.n	801093e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801093a:	f7ff f857 	bl	800f9ec <xTaskResumeAll>
}
 801093e:	bf00      	nop
 8010940:	3710      	adds	r7, #16
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	200056a0 	.word	0x200056a0
 801094c:	200056a4 	.word	0x200056a4
 8010950:	e000ed04 	.word	0xe000ed04

08010954 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010954:	b480      	push	{r7}
 8010956:	b085      	sub	sp, #20
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801095c:	4b0e      	ldr	r3, [pc, #56]	; (8010998 <prvGetNextExpireTime+0x44>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d101      	bne.n	801096a <prvGetNextExpireTime+0x16>
 8010966:	2201      	movs	r2, #1
 8010968:	e000      	b.n	801096c <prvGetNextExpireTime+0x18>
 801096a:	2200      	movs	r2, #0
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d105      	bne.n	8010984 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010978:	4b07      	ldr	r3, [pc, #28]	; (8010998 <prvGetNextExpireTime+0x44>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	60fb      	str	r3, [r7, #12]
 8010982:	e001      	b.n	8010988 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010984:	2300      	movs	r3, #0
 8010986:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010988:	68fb      	ldr	r3, [r7, #12]
}
 801098a:	4618      	mov	r0, r3
 801098c:	3714      	adds	r7, #20
 801098e:	46bd      	mov	sp, r7
 8010990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010994:	4770      	bx	lr
 8010996:	bf00      	nop
 8010998:	2000569c 	.word	0x2000569c

0801099c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b084      	sub	sp, #16
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80109a4:	f7ff f8c0 	bl	800fb28 <xTaskGetTickCount>
 80109a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80109aa:	4b0b      	ldr	r3, [pc, #44]	; (80109d8 <prvSampleTimeNow+0x3c>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	68fa      	ldr	r2, [r7, #12]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d205      	bcs.n	80109c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80109b4:	f000 f936 	bl	8010c24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2201      	movs	r2, #1
 80109bc:	601a      	str	r2, [r3, #0]
 80109be:	e002      	b.n	80109c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2200      	movs	r2, #0
 80109c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80109c6:	4a04      	ldr	r2, [pc, #16]	; (80109d8 <prvSampleTimeNow+0x3c>)
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80109cc:	68fb      	ldr	r3, [r7, #12]
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3710      	adds	r7, #16
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	200056ac 	.word	0x200056ac

080109dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b086      	sub	sp, #24
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	60f8      	str	r0, [r7, #12]
 80109e4:	60b9      	str	r1, [r7, #8]
 80109e6:	607a      	str	r2, [r7, #4]
 80109e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80109ea:	2300      	movs	r3, #0
 80109ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	68ba      	ldr	r2, [r7, #8]
 80109f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	68fa      	ldr	r2, [r7, #12]
 80109f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80109fa:	68ba      	ldr	r2, [r7, #8]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d812      	bhi.n	8010a28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a02:	687a      	ldr	r2, [r7, #4]
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	1ad2      	subs	r2, r2, r3
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	699b      	ldr	r3, [r3, #24]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d302      	bcc.n	8010a16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010a10:	2301      	movs	r3, #1
 8010a12:	617b      	str	r3, [r7, #20]
 8010a14:	e01b      	b.n	8010a4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010a16:	4b10      	ldr	r3, [pc, #64]	; (8010a58 <prvInsertTimerInActiveList+0x7c>)
 8010a18:	681a      	ldr	r2, [r3, #0]
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	3304      	adds	r3, #4
 8010a1e:	4619      	mov	r1, r3
 8010a20:	4610      	mov	r0, r2
 8010a22:	f7fd fc96 	bl	800e352 <vListInsert>
 8010a26:	e012      	b.n	8010a4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010a28:	687a      	ldr	r2, [r7, #4]
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d206      	bcs.n	8010a3e <prvInsertTimerInActiveList+0x62>
 8010a30:	68ba      	ldr	r2, [r7, #8]
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d302      	bcc.n	8010a3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010a38:	2301      	movs	r3, #1
 8010a3a:	617b      	str	r3, [r7, #20]
 8010a3c:	e007      	b.n	8010a4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a3e:	4b07      	ldr	r3, [pc, #28]	; (8010a5c <prvInsertTimerInActiveList+0x80>)
 8010a40:	681a      	ldr	r2, [r3, #0]
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	3304      	adds	r3, #4
 8010a46:	4619      	mov	r1, r3
 8010a48:	4610      	mov	r0, r2
 8010a4a:	f7fd fc82 	bl	800e352 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010a4e:	697b      	ldr	r3, [r7, #20]
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3718      	adds	r7, #24
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	200056a0 	.word	0x200056a0
 8010a5c:	2000569c 	.word	0x2000569c

08010a60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b08e      	sub	sp, #56	; 0x38
 8010a64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010a66:	e0ca      	b.n	8010bfe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	da18      	bge.n	8010aa0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010a6e:	1d3b      	adds	r3, r7, #4
 8010a70:	3304      	adds	r3, #4
 8010a72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d10a      	bne.n	8010a90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a7e:	f383 8811 	msr	BASEPRI, r3
 8010a82:	f3bf 8f6f 	isb	sy
 8010a86:	f3bf 8f4f 	dsb	sy
 8010a8a:	61fb      	str	r3, [r7, #28]
}
 8010a8c:	bf00      	nop
 8010a8e:	e7fe      	b.n	8010a8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a96:	6850      	ldr	r0, [r2, #4]
 8010a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a9a:	6892      	ldr	r2, [r2, #8]
 8010a9c:	4611      	mov	r1, r2
 8010a9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	f2c0 80ab 	blt.w	8010bfe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aae:	695b      	ldr	r3, [r3, #20]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d004      	beq.n	8010abe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab6:	3304      	adds	r3, #4
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7fd fc83 	bl	800e3c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010abe:	463b      	mov	r3, r7
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7ff ff6b 	bl	801099c <prvSampleTimeNow>
 8010ac6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2b09      	cmp	r3, #9
 8010acc:	f200 8096 	bhi.w	8010bfc <prvProcessReceivedCommands+0x19c>
 8010ad0:	a201      	add	r2, pc, #4	; (adr r2, 8010ad8 <prvProcessReceivedCommands+0x78>)
 8010ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ad6:	bf00      	nop
 8010ad8:	08010b01 	.word	0x08010b01
 8010adc:	08010b01 	.word	0x08010b01
 8010ae0:	08010b01 	.word	0x08010b01
 8010ae4:	08010b75 	.word	0x08010b75
 8010ae8:	08010b89 	.word	0x08010b89
 8010aec:	08010bd3 	.word	0x08010bd3
 8010af0:	08010b01 	.word	0x08010b01
 8010af4:	08010b01 	.word	0x08010b01
 8010af8:	08010b75 	.word	0x08010b75
 8010afc:	08010b89 	.word	0x08010b89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b06:	f043 0301 	orr.w	r3, r3, #1
 8010b0a:	b2da      	uxtb	r2, r3
 8010b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010b12:	68ba      	ldr	r2, [r7, #8]
 8010b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b16:	699b      	ldr	r3, [r3, #24]
 8010b18:	18d1      	adds	r1, r2, r3
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b20:	f7ff ff5c 	bl	80109dc <prvInsertTimerInActiveList>
 8010b24:	4603      	mov	r3, r0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d069      	beq.n	8010bfe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2c:	6a1b      	ldr	r3, [r3, #32]
 8010b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b38:	f003 0304 	and.w	r3, r3, #4
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d05e      	beq.n	8010bfe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010b40:	68ba      	ldr	r2, [r7, #8]
 8010b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b44:	699b      	ldr	r3, [r3, #24]
 8010b46:	441a      	add	r2, r3
 8010b48:	2300      	movs	r3, #0
 8010b4a:	9300      	str	r3, [sp, #0]
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	2100      	movs	r1, #0
 8010b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b52:	f7ff fe05 	bl	8010760 <xTimerGenericCommand>
 8010b56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010b58:	6a3b      	ldr	r3, [r7, #32]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d14f      	bne.n	8010bfe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b62:	f383 8811 	msr	BASEPRI, r3
 8010b66:	f3bf 8f6f 	isb	sy
 8010b6a:	f3bf 8f4f 	dsb	sy
 8010b6e:	61bb      	str	r3, [r7, #24]
}
 8010b70:	bf00      	nop
 8010b72:	e7fe      	b.n	8010b72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b7a:	f023 0301 	bic.w	r3, r3, #1
 8010b7e:	b2da      	uxtb	r2, r3
 8010b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010b86:	e03a      	b.n	8010bfe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b8e:	f043 0301 	orr.w	r3, r3, #1
 8010b92:	b2da      	uxtb	r2, r3
 8010b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010b9a:	68ba      	ldr	r2, [r7, #8]
 8010b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba2:	699b      	ldr	r3, [r3, #24]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d10a      	bne.n	8010bbe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bac:	f383 8811 	msr	BASEPRI, r3
 8010bb0:	f3bf 8f6f 	isb	sy
 8010bb4:	f3bf 8f4f 	dsb	sy
 8010bb8:	617b      	str	r3, [r7, #20]
}
 8010bba:	bf00      	nop
 8010bbc:	e7fe      	b.n	8010bbc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc0:	699a      	ldr	r2, [r3, #24]
 8010bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc4:	18d1      	adds	r1, r2, r3
 8010bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bcc:	f7ff ff06 	bl	80109dc <prvInsertTimerInActiveList>
					break;
 8010bd0:	e015      	b.n	8010bfe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bd8:	f003 0302 	and.w	r3, r3, #2
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d103      	bne.n	8010be8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010be2:	f000 fbfd 	bl	80113e0 <vPortFree>
 8010be6:	e00a      	b.n	8010bfe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bee:	f023 0301 	bic.w	r3, r3, #1
 8010bf2:	b2da      	uxtb	r2, r3
 8010bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010bfa:	e000      	b.n	8010bfe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8010bfc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010bfe:	4b08      	ldr	r3, [pc, #32]	; (8010c20 <prvProcessReceivedCommands+0x1c0>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	1d39      	adds	r1, r7, #4
 8010c04:	2200      	movs	r2, #0
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fd ffd4 	bl	800ebb4 <xQueueReceive>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	f47f af2a 	bne.w	8010a68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010c14:	bf00      	nop
 8010c16:	bf00      	nop
 8010c18:	3730      	adds	r7, #48	; 0x30
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}
 8010c1e:	bf00      	nop
 8010c20:	200056a4 	.word	0x200056a4

08010c24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b088      	sub	sp, #32
 8010c28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c2a:	e048      	b.n	8010cbe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c2c:	4b2d      	ldr	r3, [pc, #180]	; (8010ce4 <prvSwitchTimerLists+0xc0>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	68db      	ldr	r3, [r3, #12]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c36:	4b2b      	ldr	r3, [pc, #172]	; (8010ce4 <prvSwitchTimerLists+0xc0>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	68db      	ldr	r3, [r3, #12]
 8010c3c:	68db      	ldr	r3, [r3, #12]
 8010c3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	3304      	adds	r3, #4
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7fd fbbd 	bl	800e3c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	6a1b      	ldr	r3, [r3, #32]
 8010c4e:	68f8      	ldr	r0, [r7, #12]
 8010c50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c58:	f003 0304 	and.w	r3, r3, #4
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d02e      	beq.n	8010cbe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	699b      	ldr	r3, [r3, #24]
 8010c64:	693a      	ldr	r2, [r7, #16]
 8010c66:	4413      	add	r3, r2
 8010c68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010c6a:	68ba      	ldr	r2, [r7, #8]
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d90e      	bls.n	8010c90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	68ba      	ldr	r2, [r7, #8]
 8010c76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	68fa      	ldr	r2, [r7, #12]
 8010c7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c7e:	4b19      	ldr	r3, [pc, #100]	; (8010ce4 <prvSwitchTimerLists+0xc0>)
 8010c80:	681a      	ldr	r2, [r3, #0]
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	3304      	adds	r3, #4
 8010c86:	4619      	mov	r1, r3
 8010c88:	4610      	mov	r0, r2
 8010c8a:	f7fd fb62 	bl	800e352 <vListInsert>
 8010c8e:	e016      	b.n	8010cbe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c90:	2300      	movs	r3, #0
 8010c92:	9300      	str	r3, [sp, #0]
 8010c94:	2300      	movs	r3, #0
 8010c96:	693a      	ldr	r2, [r7, #16]
 8010c98:	2100      	movs	r1, #0
 8010c9a:	68f8      	ldr	r0, [r7, #12]
 8010c9c:	f7ff fd60 	bl	8010760 <xTimerGenericCommand>
 8010ca0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d10a      	bne.n	8010cbe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cac:	f383 8811 	msr	BASEPRI, r3
 8010cb0:	f3bf 8f6f 	isb	sy
 8010cb4:	f3bf 8f4f 	dsb	sy
 8010cb8:	603b      	str	r3, [r7, #0]
}
 8010cba:	bf00      	nop
 8010cbc:	e7fe      	b.n	8010cbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010cbe:	4b09      	ldr	r3, [pc, #36]	; (8010ce4 <prvSwitchTimerLists+0xc0>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d1b1      	bne.n	8010c2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010cc8:	4b06      	ldr	r3, [pc, #24]	; (8010ce4 <prvSwitchTimerLists+0xc0>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010cce:	4b06      	ldr	r3, [pc, #24]	; (8010ce8 <prvSwitchTimerLists+0xc4>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	4a04      	ldr	r2, [pc, #16]	; (8010ce4 <prvSwitchTimerLists+0xc0>)
 8010cd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010cd6:	4a04      	ldr	r2, [pc, #16]	; (8010ce8 <prvSwitchTimerLists+0xc4>)
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	6013      	str	r3, [r2, #0]
}
 8010cdc:	bf00      	nop
 8010cde:	3718      	adds	r7, #24
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	2000569c 	.word	0x2000569c
 8010ce8:	200056a0 	.word	0x200056a0

08010cec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010cf2:	f000 f987 	bl	8011004 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010cf6:	4b15      	ldr	r3, [pc, #84]	; (8010d4c <prvCheckForValidListAndQueue+0x60>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d120      	bne.n	8010d40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010cfe:	4814      	ldr	r0, [pc, #80]	; (8010d50 <prvCheckForValidListAndQueue+0x64>)
 8010d00:	f7fd fad6 	bl	800e2b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010d04:	4813      	ldr	r0, [pc, #76]	; (8010d54 <prvCheckForValidListAndQueue+0x68>)
 8010d06:	f7fd fad3 	bl	800e2b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010d0a:	4b13      	ldr	r3, [pc, #76]	; (8010d58 <prvCheckForValidListAndQueue+0x6c>)
 8010d0c:	4a10      	ldr	r2, [pc, #64]	; (8010d50 <prvCheckForValidListAndQueue+0x64>)
 8010d0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010d10:	4b12      	ldr	r3, [pc, #72]	; (8010d5c <prvCheckForValidListAndQueue+0x70>)
 8010d12:	4a10      	ldr	r2, [pc, #64]	; (8010d54 <prvCheckForValidListAndQueue+0x68>)
 8010d14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010d16:	2300      	movs	r3, #0
 8010d18:	9300      	str	r3, [sp, #0]
 8010d1a:	4b11      	ldr	r3, [pc, #68]	; (8010d60 <prvCheckForValidListAndQueue+0x74>)
 8010d1c:	4a11      	ldr	r2, [pc, #68]	; (8010d64 <prvCheckForValidListAndQueue+0x78>)
 8010d1e:	2110      	movs	r1, #16
 8010d20:	200a      	movs	r0, #10
 8010d22:	f7fd fbe1 	bl	800e4e8 <xQueueGenericCreateStatic>
 8010d26:	4603      	mov	r3, r0
 8010d28:	4a08      	ldr	r2, [pc, #32]	; (8010d4c <prvCheckForValidListAndQueue+0x60>)
 8010d2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010d2c:	4b07      	ldr	r3, [pc, #28]	; (8010d4c <prvCheckForValidListAndQueue+0x60>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d005      	beq.n	8010d40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010d34:	4b05      	ldr	r3, [pc, #20]	; (8010d4c <prvCheckForValidListAndQueue+0x60>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	490b      	ldr	r1, [pc, #44]	; (8010d68 <prvCheckForValidListAndQueue+0x7c>)
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7fe faf2 	bl	800f324 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d40:	f000 f990 	bl	8011064 <vPortExitCritical>
}
 8010d44:	bf00      	nop
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	200056a4 	.word	0x200056a4
 8010d50:	20005674 	.word	0x20005674
 8010d54:	20005688 	.word	0x20005688
 8010d58:	2000569c 	.word	0x2000569c
 8010d5c:	200056a0 	.word	0x200056a0
 8010d60:	20005750 	.word	0x20005750
 8010d64:	200056b0 	.word	0x200056b0
 8010d68:	0801f984 	.word	0x0801f984

08010d6c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b08a      	sub	sp, #40	; 0x28
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	60f8      	str	r0, [r7, #12]
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	607a      	str	r2, [r7, #4]
 8010d78:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010d7a:	f06f 0301 	mvn.w	r3, #1
 8010d7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010d8c:	4b06      	ldr	r3, [pc, #24]	; (8010da8 <xTimerPendFunctionCallFromISR+0x3c>)
 8010d8e:	6818      	ldr	r0, [r3, #0]
 8010d90:	f107 0114 	add.w	r1, r7, #20
 8010d94:	2300      	movs	r3, #0
 8010d96:	683a      	ldr	r2, [r7, #0]
 8010d98:	f7fd fde4 	bl	800e964 <xQueueGenericSendFromISR>
 8010d9c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3728      	adds	r7, #40	; 0x28
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}
 8010da8:	200056a4 	.word	0x200056a4

08010dac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010dac:	b480      	push	{r7}
 8010dae:	b085      	sub	sp, #20
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	60b9      	str	r1, [r7, #8]
 8010db6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	3b04      	subs	r3, #4
 8010dbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010dc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	3b04      	subs	r3, #4
 8010dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	f023 0201 	bic.w	r2, r3, #1
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	3b04      	subs	r3, #4
 8010dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ddc:	4a0c      	ldr	r2, [pc, #48]	; (8010e10 <pxPortInitialiseStack+0x64>)
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	3b14      	subs	r3, #20
 8010de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010de8:	687a      	ldr	r2, [r7, #4]
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	3b04      	subs	r3, #4
 8010df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f06f 0202 	mvn.w	r2, #2
 8010dfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	3b20      	subs	r3, #32
 8010e00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010e02:	68fb      	ldr	r3, [r7, #12]
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3714      	adds	r7, #20
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0e:	4770      	bx	lr
 8010e10:	08010e15 	.word	0x08010e15

08010e14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010e14:	b480      	push	{r7}
 8010e16:	b085      	sub	sp, #20
 8010e18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010e1e:	4b12      	ldr	r3, [pc, #72]	; (8010e68 <prvTaskExitError+0x54>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e26:	d00a      	beq.n	8010e3e <prvTaskExitError+0x2a>
	__asm volatile
 8010e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e2c:	f383 8811 	msr	BASEPRI, r3
 8010e30:	f3bf 8f6f 	isb	sy
 8010e34:	f3bf 8f4f 	dsb	sy
 8010e38:	60fb      	str	r3, [r7, #12]
}
 8010e3a:	bf00      	nop
 8010e3c:	e7fe      	b.n	8010e3c <prvTaskExitError+0x28>
	__asm volatile
 8010e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e42:	f383 8811 	msr	BASEPRI, r3
 8010e46:	f3bf 8f6f 	isb	sy
 8010e4a:	f3bf 8f4f 	dsb	sy
 8010e4e:	60bb      	str	r3, [r7, #8]
}
 8010e50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010e52:	bf00      	nop
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d0fc      	beq.n	8010e54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010e5a:	bf00      	nop
 8010e5c:	bf00      	nop
 8010e5e:	3714      	adds	r7, #20
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr
 8010e68:	20000028 	.word	0x20000028
 8010e6c:	00000000 	.word	0x00000000

08010e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010e70:	4b07      	ldr	r3, [pc, #28]	; (8010e90 <pxCurrentTCBConst2>)
 8010e72:	6819      	ldr	r1, [r3, #0]
 8010e74:	6808      	ldr	r0, [r1, #0]
 8010e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e7a:	f380 8809 	msr	PSP, r0
 8010e7e:	f3bf 8f6f 	isb	sy
 8010e82:	f04f 0000 	mov.w	r0, #0
 8010e86:	f380 8811 	msr	BASEPRI, r0
 8010e8a:	4770      	bx	lr
 8010e8c:	f3af 8000 	nop.w

08010e90 <pxCurrentTCBConst2>:
 8010e90:	20005174 	.word	0x20005174
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010e94:	bf00      	nop
 8010e96:	bf00      	nop

08010e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010e98:	4808      	ldr	r0, [pc, #32]	; (8010ebc <prvPortStartFirstTask+0x24>)
 8010e9a:	6800      	ldr	r0, [r0, #0]
 8010e9c:	6800      	ldr	r0, [r0, #0]
 8010e9e:	f380 8808 	msr	MSP, r0
 8010ea2:	f04f 0000 	mov.w	r0, #0
 8010ea6:	f380 8814 	msr	CONTROL, r0
 8010eaa:	b662      	cpsie	i
 8010eac:	b661      	cpsie	f
 8010eae:	f3bf 8f4f 	dsb	sy
 8010eb2:	f3bf 8f6f 	isb	sy
 8010eb6:	df00      	svc	0
 8010eb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010eba:	bf00      	nop
 8010ebc:	e000ed08 	.word	0xe000ed08

08010ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b086      	sub	sp, #24
 8010ec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010ec6:	4b46      	ldr	r3, [pc, #280]	; (8010fe0 <xPortStartScheduler+0x120>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	4a46      	ldr	r2, [pc, #280]	; (8010fe4 <xPortStartScheduler+0x124>)
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	d10a      	bne.n	8010ee6 <xPortStartScheduler+0x26>
	__asm volatile
 8010ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed4:	f383 8811 	msr	BASEPRI, r3
 8010ed8:	f3bf 8f6f 	isb	sy
 8010edc:	f3bf 8f4f 	dsb	sy
 8010ee0:	613b      	str	r3, [r7, #16]
}
 8010ee2:	bf00      	nop
 8010ee4:	e7fe      	b.n	8010ee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010ee6:	4b3e      	ldr	r3, [pc, #248]	; (8010fe0 <xPortStartScheduler+0x120>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	4a3f      	ldr	r2, [pc, #252]	; (8010fe8 <xPortStartScheduler+0x128>)
 8010eec:	4293      	cmp	r3, r2
 8010eee:	d10a      	bne.n	8010f06 <xPortStartScheduler+0x46>
	__asm volatile
 8010ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef4:	f383 8811 	msr	BASEPRI, r3
 8010ef8:	f3bf 8f6f 	isb	sy
 8010efc:	f3bf 8f4f 	dsb	sy
 8010f00:	60fb      	str	r3, [r7, #12]
}
 8010f02:	bf00      	nop
 8010f04:	e7fe      	b.n	8010f04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010f06:	4b39      	ldr	r3, [pc, #228]	; (8010fec <xPortStartScheduler+0x12c>)
 8010f08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	b2db      	uxtb	r3, r3
 8010f10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	22ff      	movs	r2, #255	; 0xff
 8010f16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010f20:	78fb      	ldrb	r3, [r7, #3]
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010f28:	b2da      	uxtb	r2, r3
 8010f2a:	4b31      	ldr	r3, [pc, #196]	; (8010ff0 <xPortStartScheduler+0x130>)
 8010f2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010f2e:	4b31      	ldr	r3, [pc, #196]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f30:	2207      	movs	r2, #7
 8010f32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010f34:	e009      	b.n	8010f4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010f36:	4b2f      	ldr	r3, [pc, #188]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	3b01      	subs	r3, #1
 8010f3c:	4a2d      	ldr	r2, [pc, #180]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010f40:	78fb      	ldrb	r3, [r7, #3]
 8010f42:	b2db      	uxtb	r3, r3
 8010f44:	005b      	lsls	r3, r3, #1
 8010f46:	b2db      	uxtb	r3, r3
 8010f48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010f4a:	78fb      	ldrb	r3, [r7, #3]
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f52:	2b80      	cmp	r3, #128	; 0x80
 8010f54:	d0ef      	beq.n	8010f36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010f56:	4b27      	ldr	r3, [pc, #156]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	f1c3 0307 	rsb	r3, r3, #7
 8010f5e:	2b04      	cmp	r3, #4
 8010f60:	d00a      	beq.n	8010f78 <xPortStartScheduler+0xb8>
	__asm volatile
 8010f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f66:	f383 8811 	msr	BASEPRI, r3
 8010f6a:	f3bf 8f6f 	isb	sy
 8010f6e:	f3bf 8f4f 	dsb	sy
 8010f72:	60bb      	str	r3, [r7, #8]
}
 8010f74:	bf00      	nop
 8010f76:	e7fe      	b.n	8010f76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010f78:	4b1e      	ldr	r3, [pc, #120]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	021b      	lsls	r3, r3, #8
 8010f7e:	4a1d      	ldr	r2, [pc, #116]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010f82:	4b1c      	ldr	r3, [pc, #112]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010f8a:	4a1a      	ldr	r2, [pc, #104]	; (8010ff4 <xPortStartScheduler+0x134>)
 8010f8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	b2da      	uxtb	r2, r3
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010f96:	4b18      	ldr	r3, [pc, #96]	; (8010ff8 <xPortStartScheduler+0x138>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4a17      	ldr	r2, [pc, #92]	; (8010ff8 <xPortStartScheduler+0x138>)
 8010f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010fa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010fa2:	4b15      	ldr	r3, [pc, #84]	; (8010ff8 <xPortStartScheduler+0x138>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4a14      	ldr	r2, [pc, #80]	; (8010ff8 <xPortStartScheduler+0x138>)
 8010fa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010fac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010fae:	f000 f8dd 	bl	801116c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010fb2:	4b12      	ldr	r3, [pc, #72]	; (8010ffc <xPortStartScheduler+0x13c>)
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010fb8:	f000 f8fc 	bl	80111b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010fbc:	4b10      	ldr	r3, [pc, #64]	; (8011000 <xPortStartScheduler+0x140>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	4a0f      	ldr	r2, [pc, #60]	; (8011000 <xPortStartScheduler+0x140>)
 8010fc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010fc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010fc8:	f7ff ff66 	bl	8010e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010fcc:	f7fe fe76 	bl	800fcbc <vTaskSwitchContext>
	prvTaskExitError();
 8010fd0:	f7ff ff20 	bl	8010e14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010fd4:	2300      	movs	r3, #0
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3718      	adds	r7, #24
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}
 8010fde:	bf00      	nop
 8010fe0:	e000ed00 	.word	0xe000ed00
 8010fe4:	410fc271 	.word	0x410fc271
 8010fe8:	410fc270 	.word	0x410fc270
 8010fec:	e000e400 	.word	0xe000e400
 8010ff0:	200057a0 	.word	0x200057a0
 8010ff4:	200057a4 	.word	0x200057a4
 8010ff8:	e000ed20 	.word	0xe000ed20
 8010ffc:	20000028 	.word	0x20000028
 8011000:	e000ef34 	.word	0xe000ef34

08011004 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011004:	b480      	push	{r7}
 8011006:	b083      	sub	sp, #12
 8011008:	af00      	add	r7, sp, #0
	__asm volatile
 801100a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801100e:	f383 8811 	msr	BASEPRI, r3
 8011012:	f3bf 8f6f 	isb	sy
 8011016:	f3bf 8f4f 	dsb	sy
 801101a:	607b      	str	r3, [r7, #4]
}
 801101c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801101e:	4b0f      	ldr	r3, [pc, #60]	; (801105c <vPortEnterCritical+0x58>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	3301      	adds	r3, #1
 8011024:	4a0d      	ldr	r2, [pc, #52]	; (801105c <vPortEnterCritical+0x58>)
 8011026:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011028:	4b0c      	ldr	r3, [pc, #48]	; (801105c <vPortEnterCritical+0x58>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b01      	cmp	r3, #1
 801102e:	d10f      	bne.n	8011050 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011030:	4b0b      	ldr	r3, [pc, #44]	; (8011060 <vPortEnterCritical+0x5c>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	b2db      	uxtb	r3, r3
 8011036:	2b00      	cmp	r3, #0
 8011038:	d00a      	beq.n	8011050 <vPortEnterCritical+0x4c>
	__asm volatile
 801103a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801103e:	f383 8811 	msr	BASEPRI, r3
 8011042:	f3bf 8f6f 	isb	sy
 8011046:	f3bf 8f4f 	dsb	sy
 801104a:	603b      	str	r3, [r7, #0]
}
 801104c:	bf00      	nop
 801104e:	e7fe      	b.n	801104e <vPortEnterCritical+0x4a>
	}
}
 8011050:	bf00      	nop
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr
 801105c:	20000028 	.word	0x20000028
 8011060:	e000ed04 	.word	0xe000ed04

08011064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011064:	b480      	push	{r7}
 8011066:	b083      	sub	sp, #12
 8011068:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801106a:	4b12      	ldr	r3, [pc, #72]	; (80110b4 <vPortExitCritical+0x50>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d10a      	bne.n	8011088 <vPortExitCritical+0x24>
	__asm volatile
 8011072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011076:	f383 8811 	msr	BASEPRI, r3
 801107a:	f3bf 8f6f 	isb	sy
 801107e:	f3bf 8f4f 	dsb	sy
 8011082:	607b      	str	r3, [r7, #4]
}
 8011084:	bf00      	nop
 8011086:	e7fe      	b.n	8011086 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011088:	4b0a      	ldr	r3, [pc, #40]	; (80110b4 <vPortExitCritical+0x50>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	3b01      	subs	r3, #1
 801108e:	4a09      	ldr	r2, [pc, #36]	; (80110b4 <vPortExitCritical+0x50>)
 8011090:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011092:	4b08      	ldr	r3, [pc, #32]	; (80110b4 <vPortExitCritical+0x50>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d105      	bne.n	80110a6 <vPortExitCritical+0x42>
 801109a:	2300      	movs	r3, #0
 801109c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	f383 8811 	msr	BASEPRI, r3
}
 80110a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80110a6:	bf00      	nop
 80110a8:	370c      	adds	r7, #12
 80110aa:	46bd      	mov	sp, r7
 80110ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b0:	4770      	bx	lr
 80110b2:	bf00      	nop
 80110b4:	20000028 	.word	0x20000028
	...

080110c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80110c0:	f3ef 8009 	mrs	r0, PSP
 80110c4:	f3bf 8f6f 	isb	sy
 80110c8:	4b15      	ldr	r3, [pc, #84]	; (8011120 <pxCurrentTCBConst>)
 80110ca:	681a      	ldr	r2, [r3, #0]
 80110cc:	f01e 0f10 	tst.w	lr, #16
 80110d0:	bf08      	it	eq
 80110d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80110d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110da:	6010      	str	r0, [r2, #0]
 80110dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80110e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80110e4:	f380 8811 	msr	BASEPRI, r0
 80110e8:	f3bf 8f4f 	dsb	sy
 80110ec:	f3bf 8f6f 	isb	sy
 80110f0:	f7fe fde4 	bl	800fcbc <vTaskSwitchContext>
 80110f4:	f04f 0000 	mov.w	r0, #0
 80110f8:	f380 8811 	msr	BASEPRI, r0
 80110fc:	bc09      	pop	{r0, r3}
 80110fe:	6819      	ldr	r1, [r3, #0]
 8011100:	6808      	ldr	r0, [r1, #0]
 8011102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011106:	f01e 0f10 	tst.w	lr, #16
 801110a:	bf08      	it	eq
 801110c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011110:	f380 8809 	msr	PSP, r0
 8011114:	f3bf 8f6f 	isb	sy
 8011118:	4770      	bx	lr
 801111a:	bf00      	nop
 801111c:	f3af 8000 	nop.w

08011120 <pxCurrentTCBConst>:
 8011120:	20005174 	.word	0x20005174
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011124:	bf00      	nop
 8011126:	bf00      	nop

08011128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
	__asm volatile
 801112e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011132:	f383 8811 	msr	BASEPRI, r3
 8011136:	f3bf 8f6f 	isb	sy
 801113a:	f3bf 8f4f 	dsb	sy
 801113e:	607b      	str	r3, [r7, #4]
}
 8011140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011142:	f7fe fd01 	bl	800fb48 <xTaskIncrementTick>
 8011146:	4603      	mov	r3, r0
 8011148:	2b00      	cmp	r3, #0
 801114a:	d003      	beq.n	8011154 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801114c:	4b06      	ldr	r3, [pc, #24]	; (8011168 <xPortSysTickHandler+0x40>)
 801114e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011152:	601a      	str	r2, [r3, #0]
 8011154:	2300      	movs	r3, #0
 8011156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	f383 8811 	msr	BASEPRI, r3
}
 801115e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011160:	bf00      	nop
 8011162:	3708      	adds	r7, #8
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}
 8011168:	e000ed04 	.word	0xe000ed04

0801116c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801116c:	b480      	push	{r7}
 801116e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011170:	4b0b      	ldr	r3, [pc, #44]	; (80111a0 <vPortSetupTimerInterrupt+0x34>)
 8011172:	2200      	movs	r2, #0
 8011174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011176:	4b0b      	ldr	r3, [pc, #44]	; (80111a4 <vPortSetupTimerInterrupt+0x38>)
 8011178:	2200      	movs	r2, #0
 801117a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801117c:	4b0a      	ldr	r3, [pc, #40]	; (80111a8 <vPortSetupTimerInterrupt+0x3c>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4a0a      	ldr	r2, [pc, #40]	; (80111ac <vPortSetupTimerInterrupt+0x40>)
 8011182:	fba2 2303 	umull	r2, r3, r2, r3
 8011186:	099b      	lsrs	r3, r3, #6
 8011188:	4a09      	ldr	r2, [pc, #36]	; (80111b0 <vPortSetupTimerInterrupt+0x44>)
 801118a:	3b01      	subs	r3, #1
 801118c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801118e:	4b04      	ldr	r3, [pc, #16]	; (80111a0 <vPortSetupTimerInterrupt+0x34>)
 8011190:	2207      	movs	r2, #7
 8011192:	601a      	str	r2, [r3, #0]
}
 8011194:	bf00      	nop
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr
 801119e:	bf00      	nop
 80111a0:	e000e010 	.word	0xe000e010
 80111a4:	e000e018 	.word	0xe000e018
 80111a8:	20000008 	.word	0x20000008
 80111ac:	10624dd3 	.word	0x10624dd3
 80111b0:	e000e014 	.word	0xe000e014

080111b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80111b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80111c4 <vPortEnableVFP+0x10>
 80111b8:	6801      	ldr	r1, [r0, #0]
 80111ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80111be:	6001      	str	r1, [r0, #0]
 80111c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80111c2:	bf00      	nop
 80111c4:	e000ed88 	.word	0xe000ed88

080111c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80111c8:	b480      	push	{r7}
 80111ca:	b085      	sub	sp, #20
 80111cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80111ce:	f3ef 8305 	mrs	r3, IPSR
 80111d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2b0f      	cmp	r3, #15
 80111d8:	d914      	bls.n	8011204 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80111da:	4a17      	ldr	r2, [pc, #92]	; (8011238 <vPortValidateInterruptPriority+0x70>)
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	4413      	add	r3, r2
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80111e4:	4b15      	ldr	r3, [pc, #84]	; (801123c <vPortValidateInterruptPriority+0x74>)
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	7afa      	ldrb	r2, [r7, #11]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d20a      	bcs.n	8011204 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80111ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f2:	f383 8811 	msr	BASEPRI, r3
 80111f6:	f3bf 8f6f 	isb	sy
 80111fa:	f3bf 8f4f 	dsb	sy
 80111fe:	607b      	str	r3, [r7, #4]
}
 8011200:	bf00      	nop
 8011202:	e7fe      	b.n	8011202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011204:	4b0e      	ldr	r3, [pc, #56]	; (8011240 <vPortValidateInterruptPriority+0x78>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801120c:	4b0d      	ldr	r3, [pc, #52]	; (8011244 <vPortValidateInterruptPriority+0x7c>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	429a      	cmp	r2, r3
 8011212:	d90a      	bls.n	801122a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011218:	f383 8811 	msr	BASEPRI, r3
 801121c:	f3bf 8f6f 	isb	sy
 8011220:	f3bf 8f4f 	dsb	sy
 8011224:	603b      	str	r3, [r7, #0]
}
 8011226:	bf00      	nop
 8011228:	e7fe      	b.n	8011228 <vPortValidateInterruptPriority+0x60>
	}
 801122a:	bf00      	nop
 801122c:	3714      	adds	r7, #20
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr
 8011236:	bf00      	nop
 8011238:	e000e3f0 	.word	0xe000e3f0
 801123c:	200057a0 	.word	0x200057a0
 8011240:	e000ed0c 	.word	0xe000ed0c
 8011244:	200057a4 	.word	0x200057a4

08011248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b08a      	sub	sp, #40	; 0x28
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011250:	2300      	movs	r3, #0
 8011252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011254:	f7fe fbbc 	bl	800f9d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011258:	4b5b      	ldr	r3, [pc, #364]	; (80113c8 <pvPortMalloc+0x180>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d101      	bne.n	8011264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011260:	f000 f920 	bl	80114a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011264:	4b59      	ldr	r3, [pc, #356]	; (80113cc <pvPortMalloc+0x184>)
 8011266:	681a      	ldr	r2, [r3, #0]
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	4013      	ands	r3, r2
 801126c:	2b00      	cmp	r3, #0
 801126e:	f040 8093 	bne.w	8011398 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d01d      	beq.n	80112b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011278:	2208      	movs	r2, #8
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	4413      	add	r3, r2
 801127e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f003 0307 	and.w	r3, r3, #7
 8011286:	2b00      	cmp	r3, #0
 8011288:	d014      	beq.n	80112b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f023 0307 	bic.w	r3, r3, #7
 8011290:	3308      	adds	r3, #8
 8011292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f003 0307 	and.w	r3, r3, #7
 801129a:	2b00      	cmp	r3, #0
 801129c:	d00a      	beq.n	80112b4 <pvPortMalloc+0x6c>
	__asm volatile
 801129e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a2:	f383 8811 	msr	BASEPRI, r3
 80112a6:	f3bf 8f6f 	isb	sy
 80112aa:	f3bf 8f4f 	dsb	sy
 80112ae:	617b      	str	r3, [r7, #20]
}
 80112b0:	bf00      	nop
 80112b2:	e7fe      	b.n	80112b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d06e      	beq.n	8011398 <pvPortMalloc+0x150>
 80112ba:	4b45      	ldr	r3, [pc, #276]	; (80113d0 <pvPortMalloc+0x188>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d869      	bhi.n	8011398 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80112c4:	4b43      	ldr	r3, [pc, #268]	; (80113d4 <pvPortMalloc+0x18c>)
 80112c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80112c8:	4b42      	ldr	r3, [pc, #264]	; (80113d4 <pvPortMalloc+0x18c>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80112ce:	e004      	b.n	80112da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80112d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80112d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80112da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	687a      	ldr	r2, [r7, #4]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d903      	bls.n	80112ec <pvPortMalloc+0xa4>
 80112e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d1f1      	bne.n	80112d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80112ec:	4b36      	ldr	r3, [pc, #216]	; (80113c8 <pvPortMalloc+0x180>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d050      	beq.n	8011398 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80112f6:	6a3b      	ldr	r3, [r7, #32]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	2208      	movs	r2, #8
 80112fc:	4413      	add	r3, r2
 80112fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011302:	681a      	ldr	r2, [r3, #0]
 8011304:	6a3b      	ldr	r3, [r7, #32]
 8011306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130a:	685a      	ldr	r2, [r3, #4]
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	1ad2      	subs	r2, r2, r3
 8011310:	2308      	movs	r3, #8
 8011312:	005b      	lsls	r3, r3, #1
 8011314:	429a      	cmp	r2, r3
 8011316:	d91f      	bls.n	8011358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	4413      	add	r3, r2
 801131e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	f003 0307 	and.w	r3, r3, #7
 8011326:	2b00      	cmp	r3, #0
 8011328:	d00a      	beq.n	8011340 <pvPortMalloc+0xf8>
	__asm volatile
 801132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132e:	f383 8811 	msr	BASEPRI, r3
 8011332:	f3bf 8f6f 	isb	sy
 8011336:	f3bf 8f4f 	dsb	sy
 801133a:	613b      	str	r3, [r7, #16]
}
 801133c:	bf00      	nop
 801133e:	e7fe      	b.n	801133e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011342:	685a      	ldr	r2, [r3, #4]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	1ad2      	subs	r2, r2, r3
 8011348:	69bb      	ldr	r3, [r7, #24]
 801134a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134e:	687a      	ldr	r2, [r7, #4]
 8011350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011352:	69b8      	ldr	r0, [r7, #24]
 8011354:	f000 f908 	bl	8011568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011358:	4b1d      	ldr	r3, [pc, #116]	; (80113d0 <pvPortMalloc+0x188>)
 801135a:	681a      	ldr	r2, [r3, #0]
 801135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135e:	685b      	ldr	r3, [r3, #4]
 8011360:	1ad3      	subs	r3, r2, r3
 8011362:	4a1b      	ldr	r2, [pc, #108]	; (80113d0 <pvPortMalloc+0x188>)
 8011364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011366:	4b1a      	ldr	r3, [pc, #104]	; (80113d0 <pvPortMalloc+0x188>)
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	4b1b      	ldr	r3, [pc, #108]	; (80113d8 <pvPortMalloc+0x190>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	429a      	cmp	r2, r3
 8011370:	d203      	bcs.n	801137a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011372:	4b17      	ldr	r3, [pc, #92]	; (80113d0 <pvPortMalloc+0x188>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	4a18      	ldr	r2, [pc, #96]	; (80113d8 <pvPortMalloc+0x190>)
 8011378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137c:	685a      	ldr	r2, [r3, #4]
 801137e:	4b13      	ldr	r3, [pc, #76]	; (80113cc <pvPortMalloc+0x184>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	431a      	orrs	r2, r3
 8011384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138a:	2200      	movs	r2, #0
 801138c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801138e:	4b13      	ldr	r3, [pc, #76]	; (80113dc <pvPortMalloc+0x194>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	3301      	adds	r3, #1
 8011394:	4a11      	ldr	r2, [pc, #68]	; (80113dc <pvPortMalloc+0x194>)
 8011396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011398:	f7fe fb28 	bl	800f9ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801139c:	69fb      	ldr	r3, [r7, #28]
 801139e:	f003 0307 	and.w	r3, r3, #7
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d00a      	beq.n	80113bc <pvPortMalloc+0x174>
	__asm volatile
 80113a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113aa:	f383 8811 	msr	BASEPRI, r3
 80113ae:	f3bf 8f6f 	isb	sy
 80113b2:	f3bf 8f4f 	dsb	sy
 80113b6:	60fb      	str	r3, [r7, #12]
}
 80113b8:	bf00      	nop
 80113ba:	e7fe      	b.n	80113ba <pvPortMalloc+0x172>
	return pvReturn;
 80113bc:	69fb      	ldr	r3, [r7, #28]
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3728      	adds	r7, #40	; 0x28
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	bf00      	nop
 80113c8:	200093b0 	.word	0x200093b0
 80113cc:	200093c4 	.word	0x200093c4
 80113d0:	200093b4 	.word	0x200093b4
 80113d4:	200093a8 	.word	0x200093a8
 80113d8:	200093b8 	.word	0x200093b8
 80113dc:	200093bc 	.word	0x200093bc

080113e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b086      	sub	sp, #24
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d04d      	beq.n	801148e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80113f2:	2308      	movs	r3, #8
 80113f4:	425b      	negs	r3, r3
 80113f6:	697a      	ldr	r2, [r7, #20]
 80113f8:	4413      	add	r3, r2
 80113fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	685a      	ldr	r2, [r3, #4]
 8011404:	4b24      	ldr	r3, [pc, #144]	; (8011498 <vPortFree+0xb8>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	4013      	ands	r3, r2
 801140a:	2b00      	cmp	r3, #0
 801140c:	d10a      	bne.n	8011424 <vPortFree+0x44>
	__asm volatile
 801140e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011412:	f383 8811 	msr	BASEPRI, r3
 8011416:	f3bf 8f6f 	isb	sy
 801141a:	f3bf 8f4f 	dsb	sy
 801141e:	60fb      	str	r3, [r7, #12]
}
 8011420:	bf00      	nop
 8011422:	e7fe      	b.n	8011422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d00a      	beq.n	8011442 <vPortFree+0x62>
	__asm volatile
 801142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011430:	f383 8811 	msr	BASEPRI, r3
 8011434:	f3bf 8f6f 	isb	sy
 8011438:	f3bf 8f4f 	dsb	sy
 801143c:	60bb      	str	r3, [r7, #8]
}
 801143e:	bf00      	nop
 8011440:	e7fe      	b.n	8011440 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	685a      	ldr	r2, [r3, #4]
 8011446:	4b14      	ldr	r3, [pc, #80]	; (8011498 <vPortFree+0xb8>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	4013      	ands	r3, r2
 801144c:	2b00      	cmp	r3, #0
 801144e:	d01e      	beq.n	801148e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d11a      	bne.n	801148e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	685a      	ldr	r2, [r3, #4]
 801145c:	4b0e      	ldr	r3, [pc, #56]	; (8011498 <vPortFree+0xb8>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	43db      	mvns	r3, r3
 8011462:	401a      	ands	r2, r3
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011468:	f7fe fab2 	bl	800f9d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	685a      	ldr	r2, [r3, #4]
 8011470:	4b0a      	ldr	r3, [pc, #40]	; (801149c <vPortFree+0xbc>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4413      	add	r3, r2
 8011476:	4a09      	ldr	r2, [pc, #36]	; (801149c <vPortFree+0xbc>)
 8011478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801147a:	6938      	ldr	r0, [r7, #16]
 801147c:	f000 f874 	bl	8011568 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011480:	4b07      	ldr	r3, [pc, #28]	; (80114a0 <vPortFree+0xc0>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	3301      	adds	r3, #1
 8011486:	4a06      	ldr	r2, [pc, #24]	; (80114a0 <vPortFree+0xc0>)
 8011488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801148a:	f7fe faaf 	bl	800f9ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801148e:	bf00      	nop
 8011490:	3718      	adds	r7, #24
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}
 8011496:	bf00      	nop
 8011498:	200093c4 	.word	0x200093c4
 801149c:	200093b4 	.word	0x200093b4
 80114a0:	200093c0 	.word	0x200093c0

080114a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80114a4:	b480      	push	{r7}
 80114a6:	b085      	sub	sp, #20
 80114a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80114aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80114ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80114b0:	4b27      	ldr	r3, [pc, #156]	; (8011550 <prvHeapInit+0xac>)
 80114b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	f003 0307 	and.w	r3, r3, #7
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00c      	beq.n	80114d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	3307      	adds	r3, #7
 80114c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	f023 0307 	bic.w	r3, r3, #7
 80114ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80114cc:	68ba      	ldr	r2, [r7, #8]
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	1ad3      	subs	r3, r2, r3
 80114d2:	4a1f      	ldr	r2, [pc, #124]	; (8011550 <prvHeapInit+0xac>)
 80114d4:	4413      	add	r3, r2
 80114d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80114dc:	4a1d      	ldr	r2, [pc, #116]	; (8011554 <prvHeapInit+0xb0>)
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80114e2:	4b1c      	ldr	r3, [pc, #112]	; (8011554 <prvHeapInit+0xb0>)
 80114e4:	2200      	movs	r2, #0
 80114e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	68ba      	ldr	r2, [r7, #8]
 80114ec:	4413      	add	r3, r2
 80114ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80114f0:	2208      	movs	r2, #8
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	1a9b      	subs	r3, r3, r2
 80114f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f023 0307 	bic.w	r3, r3, #7
 80114fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	4a15      	ldr	r2, [pc, #84]	; (8011558 <prvHeapInit+0xb4>)
 8011504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011506:	4b14      	ldr	r3, [pc, #80]	; (8011558 <prvHeapInit+0xb4>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	2200      	movs	r2, #0
 801150c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801150e:	4b12      	ldr	r3, [pc, #72]	; (8011558 <prvHeapInit+0xb4>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	2200      	movs	r2, #0
 8011514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	68fa      	ldr	r2, [r7, #12]
 801151e:	1ad2      	subs	r2, r2, r3
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011524:	4b0c      	ldr	r3, [pc, #48]	; (8011558 <prvHeapInit+0xb4>)
 8011526:	681a      	ldr	r2, [r3, #0]
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	4a0a      	ldr	r2, [pc, #40]	; (801155c <prvHeapInit+0xb8>)
 8011532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	4a09      	ldr	r2, [pc, #36]	; (8011560 <prvHeapInit+0xbc>)
 801153a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801153c:	4b09      	ldr	r3, [pc, #36]	; (8011564 <prvHeapInit+0xc0>)
 801153e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011542:	601a      	str	r2, [r3, #0]
}
 8011544:	bf00      	nop
 8011546:	3714      	adds	r7, #20
 8011548:	46bd      	mov	sp, r7
 801154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154e:	4770      	bx	lr
 8011550:	200057a8 	.word	0x200057a8
 8011554:	200093a8 	.word	0x200093a8
 8011558:	200093b0 	.word	0x200093b0
 801155c:	200093b8 	.word	0x200093b8
 8011560:	200093b4 	.word	0x200093b4
 8011564:	200093c4 	.word	0x200093c4

08011568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011568:	b480      	push	{r7}
 801156a:	b085      	sub	sp, #20
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011570:	4b28      	ldr	r3, [pc, #160]	; (8011614 <prvInsertBlockIntoFreeList+0xac>)
 8011572:	60fb      	str	r3, [r7, #12]
 8011574:	e002      	b.n	801157c <prvInsertBlockIntoFreeList+0x14>
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	60fb      	str	r3, [r7, #12]
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	687a      	ldr	r2, [r7, #4]
 8011582:	429a      	cmp	r2, r3
 8011584:	d8f7      	bhi.n	8011576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	68ba      	ldr	r2, [r7, #8]
 8011590:	4413      	add	r3, r2
 8011592:	687a      	ldr	r2, [r7, #4]
 8011594:	429a      	cmp	r2, r3
 8011596:	d108      	bne.n	80115aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	685a      	ldr	r2, [r3, #4]
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	685b      	ldr	r3, [r3, #4]
 80115a0:	441a      	add	r2, r3
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	68ba      	ldr	r2, [r7, #8]
 80115b4:	441a      	add	r2, r3
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d118      	bne.n	80115f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	681a      	ldr	r2, [r3, #0]
 80115c2:	4b15      	ldr	r3, [pc, #84]	; (8011618 <prvInsertBlockIntoFreeList+0xb0>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d00d      	beq.n	80115e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	685a      	ldr	r2, [r3, #4]
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	685b      	ldr	r3, [r3, #4]
 80115d4:	441a      	add	r2, r3
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	601a      	str	r2, [r3, #0]
 80115e4:	e008      	b.n	80115f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80115e6:	4b0c      	ldr	r3, [pc, #48]	; (8011618 <prvInsertBlockIntoFreeList+0xb0>)
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	601a      	str	r2, [r3, #0]
 80115ee:	e003      	b.n	80115f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	681a      	ldr	r2, [r3, #0]
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80115f8:	68fa      	ldr	r2, [r7, #12]
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d002      	beq.n	8011606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	687a      	ldr	r2, [r7, #4]
 8011604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011606:	bf00      	nop
 8011608:	3714      	adds	r7, #20
 801160a:	46bd      	mov	sp, r7
 801160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011610:	4770      	bx	lr
 8011612:	bf00      	nop
 8011614:	200093a8 	.word	0x200093a8
 8011618:	200093b0 	.word	0x200093b0

0801161c <DataHist_parameters>:
 801161c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011620:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011622:	f8dd c018 	ldr.w	ip, [sp, #24]
 8011626:	7020      	strb	r0, [r4, #0]
 8011628:	6808      	ldr	r0, [r1, #0]
 801162a:	6060      	str	r0, [r4, #4]
 801162c:	6848      	ldr	r0, [r1, #4]
 801162e:	60a0      	str	r0, [r4, #8]
 8011630:	6888      	ldr	r0, [r1, #8]
 8011632:	60e0      	str	r0, [r4, #12]
 8011634:	68c8      	ldr	r0, [r1, #12]
 8011636:	6120      	str	r0, [r4, #16]
 8011638:	6908      	ldr	r0, [r1, #16]
 801163a:	6160      	str	r0, [r4, #20]
 801163c:	6948      	ldr	r0, [r1, #20]
 801163e:	61a0      	str	r0, [r4, #24]
 8011640:	6988      	ldr	r0, [r1, #24]
 8011642:	61e0      	str	r0, [r4, #28]
 8011644:	69c8      	ldr	r0, [r1, #28]
 8011646:	6220      	str	r0, [r4, #32]
 8011648:	6a09      	ldr	r1, [r1, #32]
 801164a:	6261      	str	r1, [r4, #36]	; 0x24
 801164c:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 8011650:	8811      	ldrh	r1, [r2, #0]
 8011652:	edd2 7a01 	vldr	s15, [r2, #4]
 8011656:	8521      	strh	r1, [r4, #40]	; 0x28
 8011658:	f102 0e80 	add.w	lr, r2, #128	; 0x80
 801165c:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8011660:	2700      	movs	r7, #0
 8011662:	f1ae 0278 	sub.w	r2, lr, #120	; 0x78
 8011666:	4641      	mov	r1, r8
 8011668:	f852 0b04 	ldr.w	r0, [r2], #4
 801166c:	f841 0b04 	str.w	r0, [r1], #4
 8011670:	4572      	cmp	r2, lr
 8011672:	d1f9      	bne.n	8011668 <DataHist_parameters+0x4c>
 8011674:	371e      	adds	r7, #30
 8011676:	2f5a      	cmp	r7, #90	; 0x5a
 8011678:	f108 0878 	add.w	r8, r8, #120	; 0x78
 801167c:	f102 0e78 	add.w	lr, r2, #120	; 0x78
 8011680:	d1ef      	bne.n	8011662 <DataHist_parameters+0x46>
 8011682:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
 8011686:	881a      	ldrh	r2, [r3, #0]
 8011688:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801168c:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 8011690:	f103 0e80 	add.w	lr, r3, #128	; 0x80
 8011694:	f504 77d0 	add.w	r7, r4, #416	; 0x1a0
 8011698:	2000      	movs	r0, #0
 801169a:	f1ae 0378 	sub.w	r3, lr, #120	; 0x78
 801169e:	463a      	mov	r2, r7
 80116a0:	f853 1b04 	ldr.w	r1, [r3], #4
 80116a4:	f842 1b04 	str.w	r1, [r2], #4
 80116a8:	4573      	cmp	r3, lr
 80116aa:	d1f9      	bne.n	80116a0 <DataHist_parameters+0x84>
 80116ac:	301e      	adds	r0, #30
 80116ae:	285a      	cmp	r0, #90	; 0x5a
 80116b0:	f107 0778 	add.w	r7, r7, #120	; 0x78
 80116b4:	f103 0e78 	add.w	lr, r3, #120	; 0x78
 80116b8:	d1ef      	bne.n	801169a <DataHist_parameters+0x7e>
 80116ba:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 80116be:	f8bc 3000 	ldrh.w	r3, [ip]
 80116c2:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80116c6:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 80116ca:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 80116ce:	f504 7e44 	add.w	lr, r4, #784	; 0x310
 80116d2:	2000      	movs	r0, #0
 80116d4:	f1ac 0378 	sub.w	r3, ip, #120	; 0x78
 80116d8:	4672      	mov	r2, lr
 80116da:	f853 1b04 	ldr.w	r1, [r3], #4
 80116de:	f842 1b04 	str.w	r1, [r2], #4
 80116e2:	4563      	cmp	r3, ip
 80116e4:	d1f9      	bne.n	80116da <DataHist_parameters+0xbe>
 80116e6:	301e      	adds	r0, #30
 80116e8:	285a      	cmp	r0, #90	; 0x5a
 80116ea:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 80116ee:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 80116f2:	d1ef      	bne.n	80116d4 <DataHist_parameters+0xb8>
 80116f4:	f8c4 730c 	str.w	r7, [r4, #780]	; 0x30c
 80116f8:	8833      	ldrh	r3, [r6, #0]
 80116fa:	6877      	ldr	r7, [r6, #4]
 80116fc:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 8011700:	f106 0080 	add.w	r0, r6, #128	; 0x80
 8011704:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
 8011708:	2600      	movs	r6, #0
 801170a:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 801170e:	4662      	mov	r2, ip
 8011710:	f853 1b04 	ldr.w	r1, [r3], #4
 8011714:	f842 1b04 	str.w	r1, [r2], #4
 8011718:	4283      	cmp	r3, r0
 801171a:	d1f9      	bne.n	8011710 <DataHist_parameters+0xf4>
 801171c:	361e      	adds	r6, #30
 801171e:	2e5a      	cmp	r6, #90	; 0x5a
 8011720:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 8011724:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8011728:	d1ef      	bne.n	801170a <DataHist_parameters+0xee>
 801172a:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 801172e:	69aa      	ldr	r2, [r5, #24]
 8011730:	605f      	str	r7, [r3, #4]
 8011732:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 8011736:	7829      	ldrb	r1, [r5, #0]
 8011738:	f884 15e8 	strb.w	r1, [r4, #1512]	; 0x5e8
 801173c:	619a      	str	r2, [r3, #24]
 801173e:	6869      	ldr	r1, [r5, #4]
 8011740:	6059      	str	r1, [r3, #4]
 8011742:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 8011746:	68a9      	ldr	r1, [r5, #8]
 8011748:	6011      	str	r1, [r2, #0]
 801174a:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 801174e:	68e9      	ldr	r1, [r5, #12]
 8011750:	6011      	str	r1, [r2, #0]
 8011752:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 8011756:	6929      	ldr	r1, [r5, #16]
 8011758:	6011      	str	r1, [r2, #0]
 801175a:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 801175e:	6969      	ldr	r1, [r5, #20]
 8011760:	6011      	str	r1, [r2, #0]
 8011762:	69e9      	ldr	r1, [r5, #28]
 8011764:	61d9      	str	r1, [r3, #28]
 8011766:	f504 62c1 	add.w	r2, r4, #1544	; 0x608
 801176a:	6a2b      	ldr	r3, [r5, #32]
 801176c:	6013      	str	r3, [r2, #0]
 801176e:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 8011772:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8011774:	601a      	str	r2, [r3, #0]
 8011776:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 801177a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801177c:	601a      	str	r2, [r3, #0]
 801177e:	f204 6414 	addw	r4, r4, #1556	; 0x614
 8011782:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8011784:	6023      	str	r3, [r4, #0]
 8011786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801178a:	bf00      	nop

0801178c <rotVect>:
 801178c:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8011790:	ed92 7a01 	vldr	s14, [r2, #4]
 8011794:	ed92 6a00 	vldr	s12, [r2]
 8011798:	ee07 3a90 	vmov	s15, r3
 801179c:	f991 3000 	ldrsb.w	r3, [r1]
 80117a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117a4:	ee06 3a90 	vmov	s13, r3
 80117a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80117ac:	f991 3002 	ldrsb.w	r3, [r1, #2]
 80117b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80117b4:	ee07 3a10 	vmov	s14, r3
 80117b8:	eee6 7a86 	vfma.f32	s15, s13, s12
 80117bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80117c0:	edd2 6a02 	vldr	s13, [r2, #8]
 80117c4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80117c8:	edc0 7a00 	vstr	s15, [r0]
 80117cc:	f991 3004 	ldrsb.w	r3, [r1, #4]
 80117d0:	ed92 7a01 	vldr	s14, [r2, #4]
 80117d4:	ed92 6a00 	vldr	s12, [r2]
 80117d8:	ee07 3a90 	vmov	s15, r3
 80117dc:	f991 3003 	ldrsb.w	r3, [r1, #3]
 80117e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117e4:	ee06 3a90 	vmov	s13, r3
 80117e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80117ec:	f991 3005 	ldrsb.w	r3, [r1, #5]
 80117f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80117f4:	ee07 3a10 	vmov	s14, r3
 80117f8:	eee6 7a86 	vfma.f32	s15, s13, s12
 80117fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011800:	edd2 6a02 	vldr	s13, [r2, #8]
 8011804:	eee7 7a26 	vfma.f32	s15, s14, s13
 8011808:	edc0 7a01 	vstr	s15, [r0, #4]
 801180c:	f991 3007 	ldrsb.w	r3, [r1, #7]
 8011810:	ed92 7a01 	vldr	s14, [r2, #4]
 8011814:	ed92 6a00 	vldr	s12, [r2]
 8011818:	ee07 3a90 	vmov	s15, r3
 801181c:	f991 3006 	ldrsb.w	r3, [r1, #6]
 8011820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011824:	ee06 3a90 	vmov	s13, r3
 8011828:	ee67 7a87 	vmul.f32	s15, s15, s14
 801182c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011830:	f991 3008 	ldrsb.w	r3, [r1, #8]
 8011834:	eee6 7a86 	vfma.f32	s15, s13, s12
 8011838:	ee07 3a10 	vmov	s14, r3
 801183c:	edd2 6a02 	vldr	s13, [r2, #8]
 8011840:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011844:	eee7 7a26 	vfma.f32	s15, s14, s13
 8011848:	edc0 7a02 	vstr	s15, [r0, #8]
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop

08011850 <findAxis>:
 8011850:	f990 3000 	ldrsb.w	r3, [r0]
 8011854:	2b01      	cmp	r3, #1
 8011856:	d027      	beq.n	80118a8 <findAxis+0x58>
 8011858:	3301      	adds	r3, #1
 801185a:	d00e      	beq.n	801187a <findAxis+0x2a>
 801185c:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8011860:	2b01      	cmp	r3, #1
 8011862:	d053      	beq.n	801190c <findAxis+0xbc>
 8011864:	3301      	adds	r3, #1
 8011866:	d048      	beq.n	80118fa <findAxis+0xaa>
 8011868:	f990 3006 	ldrsb.w	r3, [r0, #6]
 801186c:	2b01      	cmp	r3, #1
 801186e:	d053      	beq.n	8011918 <findAxis+0xc8>
 8011870:	3301      	adds	r3, #1
 8011872:	d104      	bne.n	801187e <findAxis+0x2e>
 8011874:	2364      	movs	r3, #100	; 0x64
 8011876:	700b      	strb	r3, [r1, #0]
 8011878:	e001      	b.n	801187e <findAxis+0x2e>
 801187a:	2377      	movs	r3, #119	; 0x77
 801187c:	700b      	strb	r3, [r1, #0]
 801187e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011882:	2b01      	cmp	r3, #1
 8011884:	d016      	beq.n	80118b4 <findAxis+0x64>
 8011886:	3301      	adds	r3, #1
 8011888:	d02e      	beq.n	80118e8 <findAxis+0x98>
 801188a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 801188e:	2b01      	cmp	r3, #1
 8011890:	d039      	beq.n	8011906 <findAxis+0xb6>
 8011892:	3301      	adds	r3, #1
 8011894:	d034      	beq.n	8011900 <findAxis+0xb0>
 8011896:	f990 3007 	ldrsb.w	r3, [r0, #7]
 801189a:	2b01      	cmp	r3, #1
 801189c:	d03f      	beq.n	801191e <findAxis+0xce>
 801189e:	3301      	adds	r3, #1
 80118a0:	d10a      	bne.n	80118b8 <findAxis+0x68>
 80118a2:	2364      	movs	r3, #100	; 0x64
 80118a4:	704b      	strb	r3, [r1, #1]
 80118a6:	e007      	b.n	80118b8 <findAxis+0x68>
 80118a8:	2365      	movs	r3, #101	; 0x65
 80118aa:	700b      	strb	r3, [r1, #0]
 80118ac:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d1e8      	bne.n	8011886 <findAxis+0x36>
 80118b4:	2365      	movs	r3, #101	; 0x65
 80118b6:	704b      	strb	r3, [r1, #1]
 80118b8:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80118bc:	2b01      	cmp	r3, #1
 80118be:	d010      	beq.n	80118e2 <findAxis+0x92>
 80118c0:	3301      	adds	r3, #1
 80118c2:	d014      	beq.n	80118ee <findAxis+0x9e>
 80118c4:	f990 3005 	ldrsb.w	r3, [r0, #5]
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d022      	beq.n	8011912 <findAxis+0xc2>
 80118cc:	3301      	adds	r3, #1
 80118ce:	d011      	beq.n	80118f4 <findAxis+0xa4>
 80118d0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d025      	beq.n	8011924 <findAxis+0xd4>
 80118d8:	3301      	adds	r3, #1
 80118da:	bf04      	itt	eq
 80118dc:	2364      	moveq	r3, #100	; 0x64
 80118de:	708b      	strbeq	r3, [r1, #2]
 80118e0:	4770      	bx	lr
 80118e2:	2365      	movs	r3, #101	; 0x65
 80118e4:	708b      	strb	r3, [r1, #2]
 80118e6:	4770      	bx	lr
 80118e8:	2377      	movs	r3, #119	; 0x77
 80118ea:	704b      	strb	r3, [r1, #1]
 80118ec:	e7e4      	b.n	80118b8 <findAxis+0x68>
 80118ee:	2377      	movs	r3, #119	; 0x77
 80118f0:	708b      	strb	r3, [r1, #2]
 80118f2:	4770      	bx	lr
 80118f4:	2373      	movs	r3, #115	; 0x73
 80118f6:	708b      	strb	r3, [r1, #2]
 80118f8:	4770      	bx	lr
 80118fa:	2373      	movs	r3, #115	; 0x73
 80118fc:	700b      	strb	r3, [r1, #0]
 80118fe:	e7be      	b.n	801187e <findAxis+0x2e>
 8011900:	2373      	movs	r3, #115	; 0x73
 8011902:	704b      	strb	r3, [r1, #1]
 8011904:	e7d8      	b.n	80118b8 <findAxis+0x68>
 8011906:	236e      	movs	r3, #110	; 0x6e
 8011908:	704b      	strb	r3, [r1, #1]
 801190a:	e7d5      	b.n	80118b8 <findAxis+0x68>
 801190c:	236e      	movs	r3, #110	; 0x6e
 801190e:	700b      	strb	r3, [r1, #0]
 8011910:	e7b5      	b.n	801187e <findAxis+0x2e>
 8011912:	236e      	movs	r3, #110	; 0x6e
 8011914:	708b      	strb	r3, [r1, #2]
 8011916:	4770      	bx	lr
 8011918:	2375      	movs	r3, #117	; 0x75
 801191a:	700b      	strb	r3, [r1, #0]
 801191c:	e7af      	b.n	801187e <findAxis+0x2e>
 801191e:	2375      	movs	r3, #117	; 0x75
 8011920:	704b      	strb	r3, [r1, #1]
 8011922:	e7c9      	b.n	80118b8 <findAxis+0x68>
 8011924:	2375      	movs	r3, #117	; 0x75
 8011926:	708b      	strb	r3, [r1, #2]
 8011928:	4770      	bx	lr
 801192a:	bf00      	nop
 801192c:	0000      	movs	r0, r0
	...

08011930 <findDirection>:
 8011930:	b5d0      	push	{r4, r6, r7, lr}
 8011932:	ed2d 8b04 	vpush	{d8-d9}
 8011936:	eef0 8ac0 	vabs.f32	s17, s0
 801193a:	eeb0 8ae0 	vabs.f32	s16, s1
 801193e:	eef4 8ac8 	vcmpe.f32	s17, s16
 8011942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011946:	4604      	mov	r4, r0
 8011948:	eeb0 9ac1 	vabs.f32	s18, s2
 801194c:	dd36      	ble.n	80119bc <findDirection+0x8c>
 801194e:	eef4 8ac9 	vcmpe.f32	s17, s18
 8011952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011956:	dd31      	ble.n	80119bc <findDirection+0x8c>
 8011958:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801195c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011960:	ee18 0a90 	vmov	r0, s17
 8011964:	f340 8094 	ble.w	8011a90 <findDirection+0x160>
 8011968:	f7ee fdf8 	bl	800055c <__aeabi_f2d>
 801196c:	4606      	mov	r6, r0
 801196e:	ee18 0a10 	vmov	r0, s16
 8011972:	460f      	mov	r7, r1
 8011974:	f7ee fdf2 	bl	800055c <__aeabi_f2d>
 8011978:	a387      	add	r3, pc, #540	; (adr r3, 8011b98 <findDirection+0x268>)
 801197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801197e:	f7ee fe45 	bl	800060c <__aeabi_dmul>
 8011982:	4602      	mov	r2, r0
 8011984:	460b      	mov	r3, r1
 8011986:	4630      	mov	r0, r6
 8011988:	4639      	mov	r1, r7
 801198a:	f7ef f8cf 	bl	8000b2c <__aeabi_dcmpgt>
 801198e:	b188      	cbz	r0, 80119b4 <findDirection+0x84>
 8011990:	ee19 0a10 	vmov	r0, s18
 8011994:	f7ee fde2 	bl	800055c <__aeabi_f2d>
 8011998:	a37f      	add	r3, pc, #508	; (adr r3, 8011b98 <findDirection+0x268>)
 801199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199e:	f7ee fe35 	bl	800060c <__aeabi_dmul>
 80119a2:	4602      	mov	r2, r0
 80119a4:	460b      	mov	r3, r1
 80119a6:	4630      	mov	r0, r6
 80119a8:	4639      	mov	r1, r7
 80119aa:	f7ef f8bf 	bl	8000b2c <__aeabi_dcmpgt>
 80119ae:	2800      	cmp	r0, #0
 80119b0:	bf18      	it	ne
 80119b2:	2404      	movne	r4, #4
 80119b4:	ecbd 8b04 	vpop	{d8-d9}
 80119b8:	4620      	mov	r0, r4
 80119ba:	bdd0      	pop	{r4, r6, r7, pc}
 80119bc:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80119c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119c4:	dd32      	ble.n	8011a2c <findDirection+0xfc>
 80119c6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80119ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ce:	ee18 0a10 	vmov	r0, s16
 80119d2:	f340 8086 	ble.w	8011ae2 <findDirection+0x1b2>
 80119d6:	f7ee fdc1 	bl	800055c <__aeabi_f2d>
 80119da:	4606      	mov	r6, r0
 80119dc:	ee18 0a90 	vmov	r0, s17
 80119e0:	460f      	mov	r7, r1
 80119e2:	f7ee fdbb 	bl	800055c <__aeabi_f2d>
 80119e6:	a36c      	add	r3, pc, #432	; (adr r3, 8011b98 <findDirection+0x268>)
 80119e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ec:	f7ee fe0e 	bl	800060c <__aeabi_dmul>
 80119f0:	4602      	mov	r2, r0
 80119f2:	460b      	mov	r3, r1
 80119f4:	4630      	mov	r0, r6
 80119f6:	4639      	mov	r1, r7
 80119f8:	f7ef f898 	bl	8000b2c <__aeabi_dcmpgt>
 80119fc:	2800      	cmp	r0, #0
 80119fe:	d0d9      	beq.n	80119b4 <findDirection+0x84>
 8011a00:	ee19 0a10 	vmov	r0, s18
 8011a04:	f7ee fdaa 	bl	800055c <__aeabi_f2d>
 8011a08:	a363      	add	r3, pc, #396	; (adr r3, 8011b98 <findDirection+0x268>)
 8011a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0e:	f7ee fdfd 	bl	800060c <__aeabi_dmul>
 8011a12:	4602      	mov	r2, r0
 8011a14:	460b      	mov	r3, r1
 8011a16:	4630      	mov	r0, r6
 8011a18:	4639      	mov	r1, r7
 8011a1a:	f7ef f887 	bl	8000b2c <__aeabi_dcmpgt>
 8011a1e:	ecbd 8b04 	vpop	{d8-d9}
 8011a22:	2800      	cmp	r0, #0
 8011a24:	bf18      	it	ne
 8011a26:	2401      	movne	r4, #1
 8011a28:	4620      	mov	r0, r4
 8011a2a:	bdd0      	pop	{r4, r6, r7, pc}
 8011a2c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8011a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a34:	ee19 0a10 	vmov	r0, s18
 8011a38:	dd7f      	ble.n	8011b3a <findDirection+0x20a>
 8011a3a:	f7ee fd8f 	bl	800055c <__aeabi_f2d>
 8011a3e:	4606      	mov	r6, r0
 8011a40:	ee18 0a10 	vmov	r0, s16
 8011a44:	460f      	mov	r7, r1
 8011a46:	f7ee fd89 	bl	800055c <__aeabi_f2d>
 8011a4a:	a353      	add	r3, pc, #332	; (adr r3, 8011b98 <findDirection+0x268>)
 8011a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a50:	f7ee fddc 	bl	800060c <__aeabi_dmul>
 8011a54:	4602      	mov	r2, r0
 8011a56:	460b      	mov	r3, r1
 8011a58:	4630      	mov	r0, r6
 8011a5a:	4639      	mov	r1, r7
 8011a5c:	f7ef f866 	bl	8000b2c <__aeabi_dcmpgt>
 8011a60:	2800      	cmp	r0, #0
 8011a62:	d0a7      	beq.n	80119b4 <findDirection+0x84>
 8011a64:	ee18 0a90 	vmov	r0, s17
 8011a68:	f7ee fd78 	bl	800055c <__aeabi_f2d>
 8011a6c:	a34a      	add	r3, pc, #296	; (adr r3, 8011b98 <findDirection+0x268>)
 8011a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a72:	f7ee fdcb 	bl	800060c <__aeabi_dmul>
 8011a76:	4602      	mov	r2, r0
 8011a78:	460b      	mov	r3, r1
 8011a7a:	4630      	mov	r0, r6
 8011a7c:	4639      	mov	r1, r7
 8011a7e:	f7ef f855 	bl	8000b2c <__aeabi_dcmpgt>
 8011a82:	ecbd 8b04 	vpop	{d8-d9}
 8011a86:	2800      	cmp	r0, #0
 8011a88:	bf18      	it	ne
 8011a8a:	2400      	movne	r4, #0
 8011a8c:	4620      	mov	r0, r4
 8011a8e:	bdd0      	pop	{r4, r6, r7, pc}
 8011a90:	f7ee fd64 	bl	800055c <__aeabi_f2d>
 8011a94:	4606      	mov	r6, r0
 8011a96:	ee18 0a10 	vmov	r0, s16
 8011a9a:	460f      	mov	r7, r1
 8011a9c:	f7ee fd5e 	bl	800055c <__aeabi_f2d>
 8011aa0:	a33d      	add	r3, pc, #244	; (adr r3, 8011b98 <findDirection+0x268>)
 8011aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa6:	f7ee fdb1 	bl	800060c <__aeabi_dmul>
 8011aaa:	4602      	mov	r2, r0
 8011aac:	460b      	mov	r3, r1
 8011aae:	4630      	mov	r0, r6
 8011ab0:	4639      	mov	r1, r7
 8011ab2:	f7ef f83b 	bl	8000b2c <__aeabi_dcmpgt>
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	f43f af7c 	beq.w	80119b4 <findDirection+0x84>
 8011abc:	ee19 0a10 	vmov	r0, s18
 8011ac0:	f7ee fd4c 	bl	800055c <__aeabi_f2d>
 8011ac4:	a334      	add	r3, pc, #208	; (adr r3, 8011b98 <findDirection+0x268>)
 8011ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aca:	f7ee fd9f 	bl	800060c <__aeabi_dmul>
 8011ace:	4602      	mov	r2, r0
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	4630      	mov	r0, r6
 8011ad4:	4639      	mov	r1, r7
 8011ad6:	f7ef f829 	bl	8000b2c <__aeabi_dcmpgt>
 8011ada:	2800      	cmp	r0, #0
 8011adc:	bf18      	it	ne
 8011ade:	2405      	movne	r4, #5
 8011ae0:	e768      	b.n	80119b4 <findDirection+0x84>
 8011ae2:	f7ee fd3b 	bl	800055c <__aeabi_f2d>
 8011ae6:	4606      	mov	r6, r0
 8011ae8:	ee18 0a90 	vmov	r0, s17
 8011aec:	460f      	mov	r7, r1
 8011aee:	f7ee fd35 	bl	800055c <__aeabi_f2d>
 8011af2:	a329      	add	r3, pc, #164	; (adr r3, 8011b98 <findDirection+0x268>)
 8011af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af8:	f7ee fd88 	bl	800060c <__aeabi_dmul>
 8011afc:	4602      	mov	r2, r0
 8011afe:	460b      	mov	r3, r1
 8011b00:	4630      	mov	r0, r6
 8011b02:	4639      	mov	r1, r7
 8011b04:	f7ef f812 	bl	8000b2c <__aeabi_dcmpgt>
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	f43f af53 	beq.w	80119b4 <findDirection+0x84>
 8011b0e:	ee19 0a10 	vmov	r0, s18
 8011b12:	f7ee fd23 	bl	800055c <__aeabi_f2d>
 8011b16:	a320      	add	r3, pc, #128	; (adr r3, 8011b98 <findDirection+0x268>)
 8011b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1c:	f7ee fd76 	bl	800060c <__aeabi_dmul>
 8011b20:	4602      	mov	r2, r0
 8011b22:	460b      	mov	r3, r1
 8011b24:	4630      	mov	r0, r6
 8011b26:	4639      	mov	r1, r7
 8011b28:	f7ef f800 	bl	8000b2c <__aeabi_dcmpgt>
 8011b2c:	ecbd 8b04 	vpop	{d8-d9}
 8011b30:	2800      	cmp	r0, #0
 8011b32:	bf18      	it	ne
 8011b34:	2403      	movne	r4, #3
 8011b36:	4620      	mov	r0, r4
 8011b38:	bdd0      	pop	{r4, r6, r7, pc}
 8011b3a:	f7ee fd0f 	bl	800055c <__aeabi_f2d>
 8011b3e:	4606      	mov	r6, r0
 8011b40:	ee18 0a10 	vmov	r0, s16
 8011b44:	460f      	mov	r7, r1
 8011b46:	f7ee fd09 	bl	800055c <__aeabi_f2d>
 8011b4a:	a313      	add	r3, pc, #76	; (adr r3, 8011b98 <findDirection+0x268>)
 8011b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b50:	f7ee fd5c 	bl	800060c <__aeabi_dmul>
 8011b54:	4602      	mov	r2, r0
 8011b56:	460b      	mov	r3, r1
 8011b58:	4630      	mov	r0, r6
 8011b5a:	4639      	mov	r1, r7
 8011b5c:	f7ee ffe6 	bl	8000b2c <__aeabi_dcmpgt>
 8011b60:	2800      	cmp	r0, #0
 8011b62:	f43f af27 	beq.w	80119b4 <findDirection+0x84>
 8011b66:	ee18 0a90 	vmov	r0, s17
 8011b6a:	f7ee fcf7 	bl	800055c <__aeabi_f2d>
 8011b6e:	a30a      	add	r3, pc, #40	; (adr r3, 8011b98 <findDirection+0x268>)
 8011b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b74:	f7ee fd4a 	bl	800060c <__aeabi_dmul>
 8011b78:	4602      	mov	r2, r0
 8011b7a:	460b      	mov	r3, r1
 8011b7c:	4630      	mov	r0, r6
 8011b7e:	4639      	mov	r1, r7
 8011b80:	f7ee ffd4 	bl	8000b2c <__aeabi_dcmpgt>
 8011b84:	ecbd 8b04 	vpop	{d8-d9}
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	bf18      	it	ne
 8011b8c:	2402      	movne	r4, #2
 8011b8e:	4620      	mov	r0, r4
 8011b90:	bdd0      	pop	{r4, r6, r7, pc}
 8011b92:	bf00      	nop
 8011b94:	f3af 8000 	nop.w
 8011b98:	e0000000 	.word	0xe0000000
 8011b9c:	3ff6b851 	.word	0x3ff6b851

08011ba0 <updateOrientation>:
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	6003      	str	r3, [r0, #0]
 8011ba4:	6043      	str	r3, [r0, #4]
 8011ba6:	7203      	strb	r3, [r0, #8]
 8011ba8:	f891 c000 	ldrb.w	ip, [r1]
 8011bac:	784a      	ldrb	r2, [r1, #1]
 8011bae:	f1ac 0342 	sub.w	r3, ip, #66	; 0x42
 8011bb2:	2b17      	cmp	r3, #23
 8011bb4:	bf98      	it	ls
 8011bb6:	f10c 0c20 	addls.w	ip, ip, #32
 8011bba:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 8011bbe:	bf98      	it	ls
 8011bc0:	fa5f fc8c 	uxtbls.w	ip, ip
 8011bc4:	2b17      	cmp	r3, #23
 8011bc6:	788b      	ldrb	r3, [r1, #2]
 8011bc8:	bf98      	it	ls
 8011bca:	3220      	addls	r2, #32
 8011bcc:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 8011bd0:	bf98      	it	ls
 8011bd2:	b2d2      	uxtbls	r2, r2
 8011bd4:	2917      	cmp	r1, #23
 8011bd6:	bf98      	it	ls
 8011bd8:	3320      	addls	r3, #32
 8011bda:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 8011bde:	bf98      	it	ls
 8011be0:	b2db      	uxtbls	r3, r3
 8011be2:	f1bc 0f13 	cmp.w	ip, #19
 8011be6:	d80d      	bhi.n	8011c04 <updateOrientation+0x64>
 8011be8:	e8df f00c 	tbb	[pc, ip]
 8011bec:	0c0c0a32 	.word	0x0c0c0a32
 8011bf0:	0c0c0c0c 	.word	0x0c0c0c0c
 8011bf4:	0c350c0c 	.word	0x0c350c0c
 8011bf8:	380c0c0c 	.word	0x380c0c0c
 8011bfc:	3e0c3b0c 	.word	0x3e0c3b0c
 8011c00:	2101      	movs	r1, #1
 8011c02:	7001      	strb	r1, [r0, #0]
 8011c04:	3a64      	subs	r2, #100	; 0x64
 8011c06:	2a13      	cmp	r2, #19
 8011c08:	d80d      	bhi.n	8011c26 <updateOrientation+0x86>
 8011c0a:	e8df f002 	tbb	[pc, r2]
 8011c0e:	0a30      	.short	0x0a30
 8011c10:	0c0c0c0c 	.word	0x0c0c0c0c
 8011c14:	0c0c0c0c 	.word	0x0c0c0c0c
 8011c18:	0c0c0c33 	.word	0x0c0c0c33
 8011c1c:	390c360c 	.word	0x390c360c
 8011c20:	3c0c      	.short	0x3c0c
 8011c22:	2201      	movs	r2, #1
 8011c24:	7042      	strb	r2, [r0, #1]
 8011c26:	3b64      	subs	r3, #100	; 0x64
 8011c28:	2b13      	cmp	r3, #19
 8011c2a:	d80d      	bhi.n	8011c48 <updateOrientation+0xa8>
 8011c2c:	e8df f003 	tbb	[pc, r3]
 8011c30:	0c0c2e0a 	.word	0x0c0c2e0a
 8011c34:	0c0c0c0c 	.word	0x0c0c0c0c
 8011c38:	0c310c0c 	.word	0x0c310c0c
 8011c3c:	340c0c0c 	.word	0x340c0c0c
 8011c40:	0d0c370c 	.word	0x0d0c370c
 8011c44:	23ff      	movs	r3, #255	; 0xff
 8011c46:	7203      	strb	r3, [r0, #8]
 8011c48:	4770      	bx	lr
 8011c4a:	23ff      	movs	r3, #255	; 0xff
 8011c4c:	7083      	strb	r3, [r0, #2]
 8011c4e:	4770      	bx	lr
 8011c50:	21ff      	movs	r1, #255	; 0xff
 8011c52:	7181      	strb	r1, [r0, #6]
 8011c54:	e7d6      	b.n	8011c04 <updateOrientation+0x64>
 8011c56:	2101      	movs	r1, #1
 8011c58:	70c1      	strb	r1, [r0, #3]
 8011c5a:	e7d3      	b.n	8011c04 <updateOrientation+0x64>
 8011c5c:	21ff      	movs	r1, #255	; 0xff
 8011c5e:	70c1      	strb	r1, [r0, #3]
 8011c60:	e7d0      	b.n	8011c04 <updateOrientation+0x64>
 8011c62:	2101      	movs	r1, #1
 8011c64:	7181      	strb	r1, [r0, #6]
 8011c66:	e7cd      	b.n	8011c04 <updateOrientation+0x64>
 8011c68:	21ff      	movs	r1, #255	; 0xff
 8011c6a:	7001      	strb	r1, [r0, #0]
 8011c6c:	e7ca      	b.n	8011c04 <updateOrientation+0x64>
 8011c6e:	22ff      	movs	r2, #255	; 0xff
 8011c70:	71c2      	strb	r2, [r0, #7]
 8011c72:	e7d8      	b.n	8011c26 <updateOrientation+0x86>
 8011c74:	2201      	movs	r2, #1
 8011c76:	7102      	strb	r2, [r0, #4]
 8011c78:	e7d5      	b.n	8011c26 <updateOrientation+0x86>
 8011c7a:	22ff      	movs	r2, #255	; 0xff
 8011c7c:	7102      	strb	r2, [r0, #4]
 8011c7e:	e7d2      	b.n	8011c26 <updateOrientation+0x86>
 8011c80:	2201      	movs	r2, #1
 8011c82:	71c2      	strb	r2, [r0, #7]
 8011c84:	e7cf      	b.n	8011c26 <updateOrientation+0x86>
 8011c86:	22ff      	movs	r2, #255	; 0xff
 8011c88:	7042      	strb	r2, [r0, #1]
 8011c8a:	e7cc      	b.n	8011c26 <updateOrientation+0x86>
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	7083      	strb	r3, [r0, #2]
 8011c90:	4770      	bx	lr
 8011c92:	2301      	movs	r3, #1
 8011c94:	7143      	strb	r3, [r0, #5]
 8011c96:	4770      	bx	lr
 8011c98:	23ff      	movs	r3, #255	; 0xff
 8011c9a:	7143      	strb	r3, [r0, #5]
 8011c9c:	4770      	bx	lr
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	7203      	strb	r3, [r0, #8]
 8011ca2:	4770      	bx	lr

08011ca4 <qmult>:
 8011ca4:	ed91 2a03 	vldr	s4, [r1, #12]
 8011ca8:	ed90 3a01 	vldr	s6, [r0, #4]
 8011cac:	edd0 5a02 	vldr	s11, [r0, #8]
 8011cb0:	edd1 4a01 	vldr	s9, [r1, #4]
 8011cb4:	ed90 4a00 	vldr	s8, [r0]
 8011cb8:	ed91 5a02 	vldr	s10, [r1, #8]
 8011cbc:	edd1 3a00 	vldr	s7, [r1]
 8011cc0:	edd0 2a03 	vldr	s5, [r0, #12]
 8011cc4:	ee25 6aa4 	vmul.f32	s12, s11, s9
 8011cc8:	ee62 6a03 	vmul.f32	s13, s4, s6
 8011ccc:	ee22 7a25 	vmul.f32	s14, s4, s11
 8011cd0:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 8011cd4:	eea4 6a02 	vfma.f32	s12, s8, s4
 8011cd8:	eee4 6a05 	vfma.f32	s13, s8, s10
 8011cdc:	eea3 7a23 	vfma.f32	s14, s6, s7
 8011ce0:	eee4 7a63 	vfms.f32	s15, s8, s7
 8011ce4:	eea2 6aa3 	vfma.f32	s12, s5, s7
 8011ce8:	eee4 6aa2 	vfma.f32	s13, s9, s5
 8011cec:	eea5 7a22 	vfma.f32	s14, s10, s5
 8011cf0:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011cf4:	eea3 6a45 	vfms.f32	s12, s6, s10
 8011cf8:	eee5 6ae3 	vfms.f32	s13, s11, s7
 8011cfc:	eea4 7a64 	vfms.f32	s14, s8, s9
 8011d00:	eee5 7a65 	vfms.f32	s15, s10, s11
 8011d04:	ed82 6a00 	vstr	s12, [r2]
 8011d08:	edc2 6a01 	vstr	s13, [r2, #4]
 8011d0c:	ed82 7a02 	vstr	s14, [r2, #8]
 8011d10:	edc2 7a03 	vstr	s15, [r2, #12]
 8011d14:	4770      	bx	lr
 8011d16:	bf00      	nop

08011d18 <dataDerivative5>:
 8011d18:	ed90 7a01 	vldr	s14, [r0, #4]
 8011d1c:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8011d20:	edd0 6a04 	vldr	s13, [r0, #16]
 8011d24:	ed90 6a00 	vldr	s12, [r0]
 8011d28:	ed90 4a02 	vldr	s8, [r0, #8]
 8011d2c:	edd0 4a09 	vldr	s9, [r0, #36]	; 0x24
 8011d30:	eeb8 5a00 	vmov.f32	s10, #128	; 0xc0000000 -2.0
 8011d34:	eee7 7a05 	vfma.f32	s15, s14, s10
 8011d38:	ed90 7a03 	vldr	s14, [r0, #12]
 8011d3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011d40:	edd0 6a0b 	vldr	s13, [r0, #44]	; 0x2c
 8011d44:	ee96 7a05 	vfnms.f32	s14, s12, s10
 8011d48:	eee4 6a05 	vfma.f32	s13, s8, s10
 8011d4c:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 8011d50:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
 8011d54:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8011d58:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011d5c:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011d60:	eeb0 6a66 	vmov.f32	s12, s13
 8011d64:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8011da0 <dataDerivative5+0x88>
 8011d68:	eea5 7a25 	vfma.f32	s14, s10, s11
 8011d6c:	ee60 6a26 	vmul.f32	s13, s0, s13
 8011d70:	ed90 5a05 	vldr	s10, [r0, #20]
 8011d74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011d78:	ee36 6a45 	vsub.f32	s12, s12, s10
 8011d7c:	ed90 5a0e 	vldr	s10, [r0, #56]	; 0x38
 8011d80:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011d84:	eea5 6a25 	vfma.f32	s12, s10, s11
 8011d88:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8011d8c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011d90:	eea7 0a07 	vfma.f32	s0, s14, s14
 8011d94:	eea6 0aa6 	vfma.f32	s0, s13, s13
 8011d98:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011d9c:	4770      	bx	lr
 8011d9e:	bf00      	nop
 8011da0:	3dcccccd 	.word	0x3dcccccd

08011da4 <b_dcm2q>:
 8011da4:	ed90 5a08 	vldr	s10, [r0, #32]
 8011da8:	edd0 7a00 	vldr	s15, [r0]
 8011dac:	edd0 6a04 	vldr	s13, [r0, #16]
 8011db0:	ee37 7a85 	vadd.f32	s14, s15, s10
 8011db4:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8011db8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011dbc:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 8011dc0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8011dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dc8:	bfc5      	ittet	gt
 8011dca:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 8011dce:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 8011dd2:	eddf 5a43 	vldrle	s11, [pc, #268]	; 8011ee0 <b_dcm2q+0x13c>
 8011dd6:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 8011dda:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8011dde:	ee35 6a47 	vsub.f32	s12, s10, s14
 8011de2:	ee35 7a07 	vadd.f32	s14, s10, s14
 8011de6:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8011dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dee:	bfc5      	ittet	gt
 8011df0:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 8011df4:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 8011df8:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 8011ee0 <b_dcm2q+0x13c>
 8011dfc:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 8011e00:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 8011e04:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8011e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e0c:	dd5b      	ble.n	8011ec6 <b_dcm2q+0x122>
 8011e0e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8011e12:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011e16:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8011e1a:	eef1 4ac7 	vsqrt.f32	s9, s14
 8011e1e:	ee64 4a84 	vmul.f32	s9, s9, s8
 8011e22:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011e26:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011e2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011e2e:	edd0 6a07 	vldr	s13, [r0, #28]
 8011e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e3a:	bf85      	ittet	hi
 8011e3c:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 8011e40:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 8011e44:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 8011ee0 <b_dcm2q+0x13c>
 8011e48:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 8011e4c:	edd0 7a05 	vldr	s15, [r0, #20]
 8011e50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011e54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e5c:	d43c      	bmi.n	8011ed8 <b_dcm2q+0x134>
 8011e5e:	bfd8      	it	le
 8011e60:	ee27 7a27 	vmulle.f32	s14, s14, s15
 8011e64:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011e6c:	ed81 7a00 	vstr	s14, [r1]
 8011e70:	edd0 7a06 	vldr	s15, [r0, #24]
 8011e74:	ed90 7a02 	vldr	s14, [r0, #8]
 8011e78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e84:	d425      	bmi.n	8011ed2 <b_dcm2q+0x12e>
 8011e86:	bfd8      	it	le
 8011e88:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 8011e8c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011e90:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8011e94:	edc1 5a01 	vstr	s11, [r1, #4]
 8011e98:	edd0 7a01 	vldr	s15, [r0, #4]
 8011e9c:	ed90 7a03 	vldr	s14, [r0, #12]
 8011ea0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ea4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eac:	d40e      	bmi.n	8011ecc <b_dcm2q+0x128>
 8011eae:	bfd8      	it	le
 8011eb0:	ee26 6a27 	vmulle.f32	s12, s12, s15
 8011eb4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011eb8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011ebc:	edc1 4a03 	vstr	s9, [r1, #12]
 8011ec0:	ed81 6a02 	vstr	s12, [r1, #8]
 8011ec4:	4770      	bx	lr
 8011ec6:	eddf 4a06 	vldr	s9, [pc, #24]	; 8011ee0 <b_dcm2q+0x13c>
 8011eca:	e7aa      	b.n	8011e22 <b_dcm2q+0x7e>
 8011ecc:	eeb1 6a46 	vneg.f32	s12, s12
 8011ed0:	e7f0      	b.n	8011eb4 <b_dcm2q+0x110>
 8011ed2:	eef1 5a65 	vneg.f32	s11, s11
 8011ed6:	e7d9      	b.n	8011e8c <b_dcm2q+0xe8>
 8011ed8:	eeb1 7a47 	vneg.f32	s14, s14
 8011edc:	e7c2      	b.n	8011e64 <b_dcm2q+0xc0>
 8011ede:	bf00      	nop
 8011ee0:	00000000 	.word	0x00000000

08011ee4 <getRotationMatrix>:
 8011ee4:	b538      	push	{r3, r4, r5, lr}
 8011ee6:	4613      	mov	r3, r2
 8011ee8:	4605      	mov	r5, r0
 8011eea:	460c      	mov	r4, r1
 8011eec:	4618      	mov	r0, r3
 8011eee:	2224      	movs	r2, #36	; 0x24
 8011ef0:	2100      	movs	r1, #0
 8011ef2:	f007 ffcd 	bl	8019e90 <memset>
 8011ef6:	edd5 5a00 	vldr	s11, [r5]
 8011efa:	ed9f 3a49 	vldr	s6, [pc, #292]	; 8012020 <getRotationMatrix+0x13c>
 8011efe:	edc0 5a02 	vstr	s11, [r0, #8]
 8011f02:	edd5 4a01 	vldr	s9, [r5, #4]
 8011f06:	edc0 4a05 	vstr	s9, [r0, #20]
 8011f0a:	ed95 5a02 	vldr	s10, [r5, #8]
 8011f0e:	ed80 5a08 	vstr	s10, [r0, #32]
 8011f12:	ed94 4a02 	vldr	s8, [r4, #8]
 8011f16:	edd4 3a01 	vldr	s7, [r4, #4]
 8011f1a:	ed94 6a00 	vldr	s12, [r4]
 8011f1e:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 8011f22:	ee65 7ae3 	vnmul.f32	s15, s11, s7
 8011f26:	eee3 6a85 	vfma.f32	s13, s7, s10
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	eee6 7a24 	vfma.f32	s15, s12, s9
 8011f30:	ee25 7a46 	vnmul.f32	s14, s10, s12
 8011f34:	eeb0 6ae6 	vabs.f32	s12, s13
 8011f38:	eeb4 6ac3 	vcmpe.f32	s12, s6
 8011f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f40:	eea4 7a25 	vfma.f32	s14, s8, s11
 8011f44:	bfdc      	itt	le
 8011f46:	ee86 4a83 	vdivle.f32	s8, s13, s6
 8011f4a:	eeb0 6a43 	vmovle.f32	s12, s6
 8011f4e:	eef0 3ac7 	vabs.f32	s7, s14
 8011f52:	eeb4 6ae3 	vcmpe.f32	s12, s7
 8011f56:	bfd4      	ite	le
 8011f58:	ee24 4a04 	vmulle.f32	s8, s8, s8
 8011f5c:	eeb7 4a00 	vmovgt.f32	s8, #112	; 0x3f800000  1.0
 8011f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f64:	ed80 7a03 	vstr	s14, [r0, #12]
 8011f68:	edc0 7a06 	vstr	s15, [r0, #24]
 8011f6c:	d43f      	bmi.n	8011fee <getRotationMatrix+0x10a>
 8011f6e:	eec7 3a06 	vdiv.f32	s7, s14, s12
 8011f72:	eea3 4aa3 	vfma.f32	s8, s7, s7
 8011f76:	eeb0 3a44 	vmov.f32	s6, s8
 8011f7a:	eeb0 4ae7 	vabs.f32	s8, s15
 8011f7e:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8011f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f86:	d543      	bpl.n	8012010 <getRotationMatrix+0x12c>
 8011f88:	eec6 2a04 	vdiv.f32	s5, s12, s8
 8011f8c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8011f90:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8011f94:	eeb0 6a44 	vmov.f32	s12, s8
 8011f98:	eee3 3a22 	vfma.f32	s7, s6, s5
 8011f9c:	eeb1 4ae3 	vsqrt.f32	s8, s7
 8011fa0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8011fa4:	ee24 6a06 	vmul.f32	s12, s8, s12
 8011fa8:	ee83 4a86 	vdiv.f32	s8, s7, s12
 8011fac:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011fb0:	ee67 7a84 	vmul.f32	s15, s15, s8
 8011fb4:	ee66 6a84 	vmul.f32	s13, s13, s8
 8011fb8:	ee65 3a47 	vnmul.f32	s7, s10, s14
 8011fbc:	ee25 4ae7 	vnmul.f32	s8, s11, s15
 8011fc0:	ee24 6ae6 	vnmul.f32	s12, s9, s13
 8011fc4:	eee7 3aa4 	vfma.f32	s7, s15, s9
 8011fc8:	eef0 4a44 	vmov.f32	s9, s8
 8011fcc:	eee6 4a85 	vfma.f32	s9, s13, s10
 8011fd0:	eea7 6a25 	vfma.f32	s12, s14, s11
 8011fd4:	edc3 6a00 	vstr	s13, [r3]
 8011fd8:	ed83 7a03 	vstr	s14, [r3, #12]
 8011fdc:	edc3 7a06 	vstr	s15, [r3, #24]
 8011fe0:	edc3 3a01 	vstr	s7, [r3, #4]
 8011fe4:	edc3 4a04 	vstr	s9, [r3, #16]
 8011fe8:	ed83 6a07 	vstr	s12, [r3, #28]
 8011fec:	bd38      	pop	{r3, r4, r5, pc}
 8011fee:	eec6 2a23 	vdiv.f32	s5, s12, s7
 8011ff2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8011ff6:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8011ffa:	eeb0 6a63 	vmov.f32	s12, s7
 8011ffe:	eea4 3a22 	vfma.f32	s6, s8, s5
 8012002:	eeb0 4ae7 	vabs.f32	s8, s15
 8012006:	eeb4 6ac4 	vcmpe.f32	s12, s8
 801200a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801200e:	d4bb      	bmi.n	8011f88 <getRotationMatrix+0xa4>
 8012010:	ee87 4a86 	vdiv.f32	s8, s15, s12
 8012014:	eef0 3a43 	vmov.f32	s7, s6
 8012018:	eee4 3a04 	vfma.f32	s7, s8, s8
 801201c:	e7be      	b.n	8011f9c <getRotationMatrix+0xb8>
 801201e:	bf00      	nop
 8012020:	00000000 	.word	0x00000000

08012024 <kf_update>:
 8012024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012028:	ed2d 8b10 	vpush	{d8-d15}
 801202c:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 8012030:	3901      	subs	r1, #1
 8012032:	f8dd 4490 	ldr.w	r4, [sp, #1168]	; 0x490
 8012036:	9303      	str	r3, [sp, #12]
 8012038:	ed94 2a00 	vldr	s4, [r4]
 801203c:	edd4 2a01 	vldr	s5, [r4, #4]
 8012040:	ed94 3a02 	vldr	s6, [r4, #8]
 8012044:	edd4 3a03 	vldr	s7, [r4, #12]
 8012048:	ed94 4a04 	vldr	s8, [r4, #16]
 801204c:	edd4 4a05 	vldr	s9, [r4, #20]
 8012050:	ed94 5a06 	vldr	s10, [r4, #24]
 8012054:	edd4 5a07 	vldr	s11, [r4, #28]
 8012058:	ed94 6a08 	vldr	s12, [r4, #32]
 801205c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8012060:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8012064:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012068:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 80120dc <kf_update+0xb8>
 801206c:	9104      	str	r1, [sp, #16]
 801206e:	ab0b      	add	r3, sp, #44	; 0x2c
 8012070:	ee22 2a02 	vmul.f32	s4, s4, s4
 8012074:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8012078:	ee23 3a03 	vmul.f32	s6, s6, s6
 801207c:	ee63 3aa3 	vmul.f32	s7, s7, s7
 8012080:	ee24 4a04 	vmul.f32	s8, s8, s8
 8012084:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8012088:	ee25 5a05 	vmul.f32	s10, s10, s10
 801208c:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8012090:	ee26 6a06 	vmul.f32	s12, s12, s12
 8012094:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012098:	ee27 7a07 	vmul.f32	s14, s14, s14
 801209c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80120a0:	9302      	str	r3, [sp, #8]
 80120a2:	2300      	movs	r3, #0
 80120a4:	4606      	mov	r6, r0
 80120a6:	9200      	str	r2, [sp, #0]
 80120a8:	ed8d 2a0b 	vstr	s4, [sp, #44]	; 0x2c
 80120ac:	edcd 2a0c 	vstr	s5, [sp, #48]	; 0x30
 80120b0:	ed8d 3a0d 	vstr	s6, [sp, #52]	; 0x34
 80120b4:	edcd 3a0e 	vstr	s7, [sp, #56]	; 0x38
 80120b8:	ed8d 4a0f 	vstr	s8, [sp, #60]	; 0x3c
 80120bc:	edcd 4a10 	vstr	s9, [sp, #64]	; 0x40
 80120c0:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44
 80120c4:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 80120c8:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 80120cc:	edcd 6a14 	vstr	s13, [sp, #80]	; 0x50
 80120d0:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 80120d4:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 80120d8:	9301      	str	r3, [sp, #4]
 80120da:	e010      	b.n	80120fe <kf_update+0xda>
 80120dc:	00000000 	.word	0x00000000
 80120e0:	9a00      	ldr	r2, [sp, #0]
 80120e2:	9b01      	ldr	r3, [sp, #4]
 80120e4:	3204      	adds	r2, #4
 80120e6:	9200      	str	r2, [sp, #0]
 80120e8:	9a02      	ldr	r2, [sp, #8]
 80120ea:	3204      	adds	r2, #4
 80120ec:	9202      	str	r2, [sp, #8]
 80120ee:	9a03      	ldr	r2, [sp, #12]
 80120f0:	3301      	adds	r3, #1
 80120f2:	3204      	adds	r2, #4
 80120f4:	2b0c      	cmp	r3, #12
 80120f6:	9301      	str	r3, [sp, #4]
 80120f8:	9203      	str	r2, [sp, #12]
 80120fa:	f000 857b 	beq.w	8012bf4 <kf_update+0xbd0>
 80120fe:	9a04      	ldr	r2, [sp, #16]
 8012100:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012104:	9204      	str	r2, [sp, #16]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d0ea      	beq.n	80120e0 <kf_update+0xbc>
 801210a:	9a03      	ldr	r2, [sp, #12]
 801210c:	ed8d 8a17 	vstr	s16, [sp, #92]	; 0x5c
 8012110:	f106 0328 	add.w	r3, r6, #40	; 0x28
 8012114:	ac17      	add	r4, sp, #92	; 0x5c
 8012116:	edd2 da00 	vldr	s27, [r2]
 801211a:	ed92 ea0c 	vldr	s28, [r2, #48]	; 0x30
 801211e:	edd2 ea18 	vldr	s29, [r2, #96]	; 0x60
 8012122:	ed92 fa24 	vldr	s30, [r2, #144]	; 0x90
 8012126:	edd2 fa30 	vldr	s31, [r2, #192]	; 0xc0
 801212a:	edd2 6a3c 	vldr	s13, [r2, #240]	; 0xf0
 801212e:	ed92 6a48 	vldr	s12, [r2, #288]	; 0x120
 8012132:	edd2 5a54 	vldr	s11, [r2, #336]	; 0x150
 8012136:	ed92 5a60 	vldr	s10, [r2, #384]	; 0x180
 801213a:	9305      	str	r3, [sp, #20]
 801213c:	ed8d 8a18 	vstr	s16, [sp, #96]	; 0x60
 8012140:	ed8d 8a19 	vstr	s16, [sp, #100]	; 0x64
 8012144:	ed8d 8a1a 	vstr	s16, [sp, #104]	; 0x68
 8012148:	ed8d 8a1b 	vstr	s16, [sp, #108]	; 0x6c
 801214c:	ed8d 8a1c 	vstr	s16, [sp, #112]	; 0x70
 8012150:	ed8d 8a1d 	vstr	s16, [sp, #116]	; 0x74
 8012154:	ed8d 8a1e 	vstr	s16, [sp, #120]	; 0x78
 8012158:	ed8d 8a1f 	vstr	s16, [sp, #124]	; 0x7c
 801215c:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8012160:	4622      	mov	r2, r4
 8012162:	ecb3 7a01 	vldmia	r3!, {s14}
 8012166:	ecf2 7a01 	vldmia	r2!, {s15}
 801216a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801216e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012172:	d006      	beq.n	8012182 <kf_update+0x15e>
 8012174:	eef5 da40 	vcmp.f32	s27, #0.0
 8012178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801217c:	bf18      	it	ne
 801217e:	eee7 7a2d 	vfmane.f32	s15, s14, s27
 8012182:	ed93 7a08 	vldr	s14, [r3, #32]
 8012186:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218e:	d006      	beq.n	801219e <kf_update+0x17a>
 8012190:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012198:	bf18      	it	ne
 801219a:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 801219e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80121a2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80121a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121aa:	d006      	beq.n	80121ba <kf_update+0x196>
 80121ac:	eef5 ea40 	vcmp.f32	s29, #0.0
 80121b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b4:	bf18      	it	ne
 80121b6:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 80121ba:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80121be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80121c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c6:	d006      	beq.n	80121d6 <kf_update+0x1b2>
 80121c8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80121cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d0:	bf18      	it	ne
 80121d2:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 80121d6:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80121da:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80121de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e2:	d006      	beq.n	80121f2 <kf_update+0x1ce>
 80121e4:	eef5 fa40 	vcmp.f32	s31, #0.0
 80121e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ec:	bf18      	it	ne
 80121ee:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 80121f2:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80121f6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80121fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121fe:	d006      	beq.n	801220e <kf_update+0x1ea>
 8012200:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012208:	bf18      	it	ne
 801220a:	eee7 7a26 	vfmane.f32	s15, s14, s13
 801220e:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8012212:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801221a:	d006      	beq.n	801222a <kf_update+0x206>
 801221c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012224:	bf18      	it	ne
 8012226:	eee7 7a06 	vfmane.f32	s15, s14, s12
 801222a:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 801222e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012236:	d006      	beq.n	8012246 <kf_update+0x222>
 8012238:	eef5 5a40 	vcmp.f32	s11, #0.0
 801223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012240:	bf18      	it	ne
 8012242:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8012246:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 801224a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012252:	d006      	beq.n	8012262 <kf_update+0x23e>
 8012254:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801225c:	bf18      	it	ne
 801225e:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8012262:	4299      	cmp	r1, r3
 8012264:	ed42 7a01 	vstr	s15, [r2, #-4]
 8012268:	f47f af7b 	bne.w	8012162 <kf_update+0x13e>
 801226c:	eef5 da40 	vcmp.f32	s27, #0.0
 8012270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012274:	eddd ba17 	vldr	s23, [sp, #92]	; 0x5c
 8012278:	f040 8492 	bne.w	8012ba0 <kf_update+0xb7c>
 801227c:	eef0 7a6d 	vmov.f32	s15, s27
 8012280:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012288:	ed9d ca18 	vldr	s24, [sp, #96]	; 0x60
 801228c:	d006      	beq.n	801229c <kf_update+0x278>
 801228e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012296:	bf18      	it	ne
 8012298:	eeec 7a0e 	vfmane.f32	s15, s24, s28
 801229c:	eef5 ea40 	vcmp.f32	s29, #0.0
 80122a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a4:	ed9d aa19 	vldr	s20, [sp, #100]	; 0x64
 80122a8:	d006      	beq.n	80122b8 <kf_update+0x294>
 80122aa:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80122ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122b2:	bf18      	it	ne
 80122b4:	eeea 7a2e 	vfmane.f32	s15, s20, s29
 80122b8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80122bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c0:	ed9d da1a 	vldr	s26, [sp, #104]	; 0x68
 80122c4:	d006      	beq.n	80122d4 <kf_update+0x2b0>
 80122c6:	eeb5 da40 	vcmp.f32	s26, #0.0
 80122ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ce:	bf18      	it	ne
 80122d0:	eeed 7a0f 	vfmane.f32	s15, s26, s30
 80122d4:	eef5 fa40 	vcmp.f32	s31, #0.0
 80122d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122dc:	eddd ca1b 	vldr	s25, [sp, #108]	; 0x6c
 80122e0:	d006      	beq.n	80122f0 <kf_update+0x2cc>
 80122e2:	eef5 ca40 	vcmp.f32	s25, #0.0
 80122e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ea:	bf18      	it	ne
 80122ec:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 80122f0:	eef5 6a40 	vcmp.f32	s13, #0.0
 80122f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122f8:	ed9d ba1c 	vldr	s22, [sp, #112]	; 0x70
 80122fc:	d006      	beq.n	801230c <kf_update+0x2e8>
 80122fe:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012306:	bf18      	it	ne
 8012308:	eeeb 7a26 	vfmane.f32	s15, s22, s13
 801230c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012314:	eddd aa1d 	vldr	s21, [sp, #116]	; 0x74
 8012318:	d006      	beq.n	8012328 <kf_update+0x304>
 801231a:	eef5 aa40 	vcmp.f32	s21, #0.0
 801231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012322:	bf18      	it	ne
 8012324:	eeea 7a86 	vfmane.f32	s15, s21, s12
 8012328:	eef5 5a40 	vcmp.f32	s11, #0.0
 801232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012330:	eddd 9a1e 	vldr	s19, [sp, #120]	; 0x78
 8012334:	d006      	beq.n	8012344 <kf_update+0x320>
 8012336:	eef5 9a40 	vcmp.f32	s19, #0.0
 801233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801233e:	bf18      	it	ne
 8012340:	eee9 7aa5 	vfmane.f32	s15, s19, s11
 8012344:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801234c:	ed9d 9a1f 	vldr	s18, [sp, #124]	; 0x7c
 8012350:	d006      	beq.n	8012360 <kf_update+0x33c>
 8012352:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801235a:	bf18      	it	ne
 801235c:	eee9 7a05 	vfmane.f32	s15, s18, s10
 8012360:	9b02      	ldr	r3, [sp, #8]
 8012362:	ed93 7a00 	vldr	s14, [r3]
 8012366:	9b01      	ldr	r3, [sp, #4]
 8012368:	ee77 7a87 	vadd.f32	s15, s15, s14
 801236c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8012370:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8012374:	2b05      	cmp	r3, #5
 8012376:	ee6b ba87 	vmul.f32	s23, s23, s14
 801237a:	ee2c ca07 	vmul.f32	s24, s24, s14
 801237e:	ee2a aa07 	vmul.f32	s20, s20, s14
 8012382:	ee2d da07 	vmul.f32	s26, s26, s14
 8012386:	ee67 ca2c 	vmul.f32	s25, s14, s25
 801238a:	ee27 ba0b 	vmul.f32	s22, s14, s22
 801238e:	ee67 aa2a 	vmul.f32	s21, s14, s21
 8012392:	ee69 9a87 	vmul.f32	s19, s19, s14
 8012396:	ee29 9a07 	vmul.f32	s18, s18, s14
 801239a:	edcd ba17 	vstr	s23, [sp, #92]	; 0x5c
 801239e:	ed8d ca18 	vstr	s24, [sp, #96]	; 0x60
 80123a2:	ed8d aa19 	vstr	s20, [sp, #100]	; 0x64
 80123a6:	ed8d da1a 	vstr	s26, [sp, #104]	; 0x68
 80123aa:	edcd ca1b 	vstr	s25, [sp, #108]	; 0x6c
 80123ae:	ed8d ba1c 	vstr	s22, [sp, #112]	; 0x70
 80123b2:	edcd aa1d 	vstr	s21, [sp, #116]	; 0x74
 80123b6:	edcd 9a1e 	vstr	s19, [sp, #120]	; 0x78
 80123ba:	ed8d 9a1f 	vstr	s18, [sp, #124]	; 0x7c
 80123be:	f340 83eb 	ble.w	8012b98 <kf_update+0xb74>
 80123c2:	eef5 da40 	vcmp.f32	s27, #0.0
 80123c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ca:	f000 8456 	beq.w	8012c7a <kf_update+0xc56>
 80123ce:	edd6 7a01 	vldr	s15, [r6, #4]
 80123d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80123d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123da:	f040 8477 	bne.w	8012ccc <kf_update+0xca8>
 80123de:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80123e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e6:	d008      	beq.n	80123fa <kf_update+0x3d6>
 80123e8:	ed96 7a02 	vldr	s14, [r6, #8]
 80123ec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123f4:	bf18      	it	ne
 80123f6:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 80123fa:	eef5 ea40 	vcmp.f32	s29, #0.0
 80123fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012402:	d008      	beq.n	8012416 <kf_update+0x3f2>
 8012404:	ed96 7a03 	vldr	s14, [r6, #12]
 8012408:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012410:	bf18      	it	ne
 8012412:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8012416:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801241e:	d008      	beq.n	8012432 <kf_update+0x40e>
 8012420:	ed96 7a04 	vldr	s14, [r6, #16]
 8012424:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801242c:	bf18      	it	ne
 801242e:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8012432:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801243a:	d008      	beq.n	801244e <kf_update+0x42a>
 801243c:	ed96 7a05 	vldr	s14, [r6, #20]
 8012440:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012448:	bf18      	it	ne
 801244a:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 801244e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012456:	d008      	beq.n	801246a <kf_update+0x446>
 8012458:	ed96 7a06 	vldr	s14, [r6, #24]
 801245c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012464:	bf18      	it	ne
 8012466:	eee7 7a26 	vfmane.f32	s15, s14, s13
 801246a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012472:	d008      	beq.n	8012486 <kf_update+0x462>
 8012474:	ed96 7a07 	vldr	s14, [r6, #28]
 8012478:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012480:	bf18      	it	ne
 8012482:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8012486:	eef5 5a40 	vcmp.f32	s11, #0.0
 801248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801248e:	d008      	beq.n	80124a2 <kf_update+0x47e>
 8012490:	ed96 7a08 	vldr	s14, [r6, #32]
 8012494:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801249c:	bf18      	it	ne
 801249e:	eee7 7a25 	vfmane.f32	s15, s14, s11
 80124a2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80124a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124aa:	d008      	beq.n	80124be <kf_update+0x49a>
 80124ac:	ed96 7a09 	vldr	s14, [r6, #36]	; 0x24
 80124b0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80124b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124b8:	bf18      	it	ne
 80124ba:	eee7 7a05 	vfmane.f32	s15, s14, s10
 80124be:	9b00      	ldr	r3, [sp, #0]
 80124c0:	edd3 8a00 	vldr	s17, [r3]
 80124c4:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80124c8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80124cc:	2100      	movs	r1, #0
 80124ce:	a868      	add	r0, sp, #416	; 0x1a0
 80124d0:	ed8d 5a09 	vstr	s10, [sp, #36]	; 0x24
 80124d4:	edcd 5a08 	vstr	s11, [sp, #32]
 80124d8:	ed8d 6a07 	vstr	s12, [sp, #28]
 80124dc:	edcd 6a06 	vstr	s13, [sp, #24]
 80124e0:	f007 fcd6 	bl	8019e90 <memset>
 80124e4:	ab68      	add	r3, sp, #416	; 0x1a0
 80124e6:	ed9d 5a09 	vldr	s10, [sp, #36]	; 0x24
 80124ea:	eddd 5a08 	vldr	s11, [sp, #32]
 80124ee:	ed9d 6a07 	vldr	s12, [sp, #28]
 80124f2:	eddd 6a06 	vldr	s13, [sp, #24]
 80124f6:	a971      	add	r1, sp, #452	; 0x1c4
 80124f8:	461a      	mov	r2, r3
 80124fa:	ecf4 7a01 	vldmia	r4!, {s15}
 80124fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012506:	d062      	beq.n	80125ce <kf_update+0x5aa>
 8012508:	eef5 da40 	vcmp.f32	s27, #0.0
 801250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012510:	d005      	beq.n	801251e <kf_update+0x4fa>
 8012512:	ed92 7a00 	vldr	s14, [r2]
 8012516:	eea7 7aad 	vfma.f32	s14, s15, s27
 801251a:	ed82 7a00 	vstr	s14, [r2]
 801251e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012526:	d005      	beq.n	8012534 <kf_update+0x510>
 8012528:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 801252c:	eea7 7a8e 	vfma.f32	s14, s15, s28
 8012530:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 8012534:	eef5 ea40 	vcmp.f32	s29, #0.0
 8012538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801253c:	d005      	beq.n	801254a <kf_update+0x526>
 801253e:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 8012542:	eea7 7aae 	vfma.f32	s14, s15, s29
 8012546:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 801254a:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012552:	d005      	beq.n	8012560 <kf_update+0x53c>
 8012554:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 8012558:	eea7 7a8f 	vfma.f32	s14, s15, s30
 801255c:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 8012560:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012568:	d005      	beq.n	8012576 <kf_update+0x552>
 801256a:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 801256e:	eea7 7aaf 	vfma.f32	s14, s15, s31
 8012572:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 8012576:	eef5 6a40 	vcmp.f32	s13, #0.0
 801257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801257e:	d005      	beq.n	801258c <kf_update+0x568>
 8012580:	ed92 7a2d 	vldr	s14, [r2, #180]	; 0xb4
 8012584:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012588:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 801258c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012594:	d005      	beq.n	80125a2 <kf_update+0x57e>
 8012596:	ed92 7a36 	vldr	s14, [r2, #216]	; 0xd8
 801259a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801259e:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 80125a2:	eef5 5a40 	vcmp.f32	s11, #0.0
 80125a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125aa:	d005      	beq.n	80125b8 <kf_update+0x594>
 80125ac:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 80125b0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80125b4:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 80125b8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80125bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c0:	d005      	beq.n	80125ce <kf_update+0x5aa>
 80125c2:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 80125c6:	eea7 7a85 	vfma.f32	s14, s15, s10
 80125ca:	ed82 7a48 	vstr	s14, [r2, #288]	; 0x120
 80125ce:	3204      	adds	r2, #4
 80125d0:	4291      	cmp	r1, r2
 80125d2:	d192      	bne.n	80124fa <kf_update+0x4d6>
 80125d4:	afb9      	add	r7, sp, #740	; 0x2e4
 80125d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80125da:	a868      	add	r0, sp, #416	; 0x1a0
 80125dc:	463a      	mov	r2, r7
 80125de:	f04f 0b02 	mov.w	fp, #2
 80125e2:	f04f 0e03 	mov.w	lr, #3
 80125e6:	f04f 0c04 	mov.w	ip, #4
 80125ea:	f04f 0a05 	mov.w	sl, #5
 80125ee:	f04f 0906 	mov.w	r9, #6
 80125f2:	f04f 0807 	mov.w	r8, #7
 80125f6:	2408      	movs	r4, #8
 80125f8:	2100      	movs	r1, #0
 80125fa:	9306      	str	r3, [sp, #24]
 80125fc:	e07b      	b.n	80126f6 <kf_update+0x6d2>
 80125fe:	edd0 7a00 	vldr	s15, [r0]
 8012602:	ed82 8a01 	vstr	s16, [r2, #4]
 8012606:	eef1 7a67 	vneg.f32	s15, s15
 801260a:	2901      	cmp	r1, #1
 801260c:	edc0 7a00 	vstr	s15, [r0]
 8012610:	f1a4 0507 	sub.w	r5, r4, #7
 8012614:	f000 8110 	beq.w	8012838 <kf_update+0x814>
 8012618:	ab68      	add	r3, sp, #416	; 0x1a0
 801261a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801261e:	edd5 7a00 	vldr	s15, [r5]
 8012622:	ed82 8a02 	vstr	s16, [r2, #8]
 8012626:	eef1 7a67 	vneg.f32	s15, s15
 801262a:	2902      	cmp	r1, #2
 801262c:	edc5 7a00 	vstr	s15, [r5]
 8012630:	f000 80ef 	beq.w	8012812 <kf_update+0x7ee>
 8012634:	ab68      	add	r3, sp, #416	; 0x1a0
 8012636:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 801263a:	edd5 7a00 	vldr	s15, [r5]
 801263e:	ed82 8a03 	vstr	s16, [r2, #12]
 8012642:	eef1 7a67 	vneg.f32	s15, s15
 8012646:	2903      	cmp	r1, #3
 8012648:	edc5 7a00 	vstr	s15, [r5]
 801264c:	d176      	bne.n	801273c <kf_update+0x718>
 801264e:	edd0 7a03 	vldr	s15, [r0, #12]
 8012652:	ed82 8a04 	vstr	s16, [r2, #16]
 8012656:	ee77 7a67 	vsub.f32	s15, s14, s15
 801265a:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 801265e:	edc0 7a03 	vstr	s15, [r0, #12]
 8012662:	edd5 7a00 	vldr	s15, [r5]
 8012666:	ed82 8a05 	vstr	s16, [r2, #20]
 801266a:	eef1 7a67 	vneg.f32	s15, s15
 801266e:	edc5 7a00 	vstr	s15, [r5]
 8012672:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8012676:	edd5 7a00 	vldr	s15, [r5]
 801267a:	ed82 8a06 	vstr	s16, [r2, #24]
 801267e:	eef1 7a67 	vneg.f32	s15, s15
 8012682:	edc5 7a00 	vstr	s15, [r5]
 8012686:	ab68      	add	r3, sp, #416	; 0x1a0
 8012688:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 801268c:	edd5 7a00 	vldr	s15, [r5]
 8012690:	ed82 8a07 	vstr	s16, [r2, #28]
 8012694:	eef1 7a67 	vneg.f32	s15, s15
 8012698:	2907      	cmp	r1, #7
 801269a:	edc5 7a00 	vstr	s15, [r5]
 801269e:	f040 80a4 	bne.w	80127ea <kf_update+0x7c6>
 80126a2:	edd0 7a07 	vldr	s15, [r0, #28]
 80126a6:	ed82 8a08 	vstr	s16, [r2, #32]
 80126aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126ae:	edc0 7a07 	vstr	s15, [r0, #28]
 80126b2:	ab68      	add	r3, sp, #416	; 0x1a0
 80126b4:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 80126b8:	edd5 7a00 	vldr	s15, [r5]
 80126bc:	00a5      	lsls	r5, r4, #2
 80126be:	eef1 7a67 	vneg.f32	s15, s15
 80126c2:	ab68      	add	r3, sp, #416	; 0x1a0
 80126c4:	3101      	adds	r1, #1
 80126c6:	441d      	add	r5, r3
 80126c8:	2909      	cmp	r1, #9
 80126ca:	edc5 7a00 	vstr	s15, [r5]
 80126ce:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80126d2:	f104 0409 	add.w	r4, r4, #9
 80126d6:	f100 0024 	add.w	r0, r0, #36	; 0x24
 80126da:	f108 0809 	add.w	r8, r8, #9
 80126de:	f109 0909 	add.w	r9, r9, #9
 80126e2:	f10a 0a09 	add.w	sl, sl, #9
 80126e6:	f10c 0c09 	add.w	ip, ip, #9
 80126ea:	f10e 0e09 	add.w	lr, lr, #9
 80126ee:	f10b 0b09 	add.w	fp, fp, #9
 80126f2:	f000 80d2 	beq.w	801289a <kf_update+0x876>
 80126f6:	ed82 8a00 	vstr	s16, [r2]
 80126fa:	2900      	cmp	r1, #0
 80126fc:	f47f af7f 	bne.w	80125fe <kf_update+0x5da>
 8012700:	eddd 7a68 	vldr	s15, [sp, #416]	; 0x1a0
 8012704:	ed82 8a01 	vstr	s16, [r2, #4]
 8012708:	ee77 7a67 	vsub.f32	s15, s14, s15
 801270c:	ab68      	add	r3, sp, #416	; 0x1a0
 801270e:	1fe5      	subs	r5, r4, #7
 8012710:	edc0 7a00 	vstr	s15, [r0]
 8012714:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8012718:	edd5 7a00 	vldr	s15, [r5]
 801271c:	ed82 8a02 	vstr	s16, [r2, #8]
 8012720:	eef1 7a67 	vneg.f32	s15, s15
 8012724:	edc5 7a00 	vstr	s15, [r5]
 8012728:	ed82 8a03 	vstr	s16, [r2, #12]
 801272c:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8012730:	edd5 7a00 	vldr	s15, [r5]
 8012734:	eef1 7a67 	vneg.f32	s15, s15
 8012738:	edc5 7a00 	vstr	s15, [r5]
 801273c:	ab68      	add	r3, sp, #416	; 0x1a0
 801273e:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8012742:	edd5 7a00 	vldr	s15, [r5]
 8012746:	ed82 8a04 	vstr	s16, [r2, #16]
 801274a:	eef1 7a67 	vneg.f32	s15, s15
 801274e:	2904      	cmp	r1, #4
 8012750:	edc5 7a00 	vstr	s15, [r5]
 8012754:	d02d      	beq.n	80127b2 <kf_update+0x78e>
 8012756:	ab68      	add	r3, sp, #416	; 0x1a0
 8012758:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 801275c:	edd5 7a00 	vldr	s15, [r5]
 8012760:	ed82 8a05 	vstr	s16, [r2, #20]
 8012764:	eef1 7a67 	vneg.f32	s15, s15
 8012768:	2905      	cmp	r1, #5
 801276a:	edc5 7a00 	vstr	s15, [r5]
 801276e:	d077      	beq.n	8012860 <kf_update+0x83c>
 8012770:	ab68      	add	r3, sp, #416	; 0x1a0
 8012772:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8012776:	edd5 7a00 	vldr	s15, [r5]
 801277a:	ed82 8a06 	vstr	s16, [r2, #24]
 801277e:	eef1 7a67 	vneg.f32	s15, s15
 8012782:	2906      	cmp	r1, #6
 8012784:	edc5 7a00 	vstr	s15, [r5]
 8012788:	f47f af7d 	bne.w	8012686 <kf_update+0x662>
 801278c:	edd0 7a06 	vldr	s15, [r0, #24]
 8012790:	ed82 8a07 	vstr	s16, [r2, #28]
 8012794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012798:	ed82 8a08 	vstr	s16, [r2, #32]
 801279c:	edc0 7a06 	vstr	s15, [r0, #24]
 80127a0:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 80127a4:	edd5 7a00 	vldr	s15, [r5]
 80127a8:	eef1 7a67 	vneg.f32	s15, s15
 80127ac:	edc5 7a00 	vstr	s15, [r5]
 80127b0:	e77f      	b.n	80126b2 <kf_update+0x68e>
 80127b2:	edd0 7a04 	vldr	s15, [r0, #16]
 80127b6:	ed82 8a05 	vstr	s16, [r2, #20]
 80127ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80127be:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 80127c2:	edc0 7a04 	vstr	s15, [r0, #16]
 80127c6:	edd5 7a00 	vldr	s15, [r5]
 80127ca:	ed82 8a06 	vstr	s16, [r2, #24]
 80127ce:	eef1 7a67 	vneg.f32	s15, s15
 80127d2:	edc5 7a00 	vstr	s15, [r5]
 80127d6:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 80127da:	edd5 7a00 	vldr	s15, [r5]
 80127de:	ed82 8a07 	vstr	s16, [r2, #28]
 80127e2:	eef1 7a67 	vneg.f32	s15, s15
 80127e6:	edc5 7a00 	vstr	s15, [r5]
 80127ea:	ab68      	add	r3, sp, #416	; 0x1a0
 80127ec:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 80127f0:	edd5 7a00 	vldr	s15, [r5]
 80127f4:	ed82 8a08 	vstr	s16, [r2, #32]
 80127f8:	eef1 7a67 	vneg.f32	s15, s15
 80127fc:	2908      	cmp	r1, #8
 80127fe:	edc5 7a00 	vstr	s15, [r5]
 8012802:	f47f af56 	bne.w	80126b2 <kf_update+0x68e>
 8012806:	edd0 7a08 	vldr	s15, [r0, #32]
 801280a:	00a5      	lsls	r5, r4, #2
 801280c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012810:	e757      	b.n	80126c2 <kf_update+0x69e>
 8012812:	edd0 7a02 	vldr	s15, [r0, #8]
 8012816:	ed82 8a03 	vstr	s16, [r2, #12]
 801281a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801281e:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8012822:	edc0 7a02 	vstr	s15, [r0, #8]
 8012826:	edd5 7a00 	vldr	s15, [r5]
 801282a:	ed82 8a04 	vstr	s16, [r2, #16]
 801282e:	eef1 7a67 	vneg.f32	s15, s15
 8012832:	edc5 7a00 	vstr	s15, [r5]
 8012836:	e78e      	b.n	8012756 <kf_update+0x732>
 8012838:	edd0 7a01 	vldr	s15, [r0, #4]
 801283c:	ed82 8a02 	vstr	s16, [r2, #8]
 8012840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012844:	ab68      	add	r3, sp, #416	; 0x1a0
 8012846:	ed82 8a03 	vstr	s16, [r2, #12]
 801284a:	edc0 7a01 	vstr	s15, [r0, #4]
 801284e:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8012852:	edd5 7a00 	vldr	s15, [r5]
 8012856:	eef1 7a67 	vneg.f32	s15, s15
 801285a:	edc5 7a00 	vstr	s15, [r5]
 801285e:	e76d      	b.n	801273c <kf_update+0x718>
 8012860:	edd0 7a05 	vldr	s15, [r0, #20]
 8012864:	ed82 8a06 	vstr	s16, [r2, #24]
 8012868:	ee77 7a67 	vsub.f32	s15, s14, s15
 801286c:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 8012870:	edc0 7a05 	vstr	s15, [r0, #20]
 8012874:	edd5 7a00 	vldr	s15, [r5]
 8012878:	ed82 8a07 	vstr	s16, [r2, #28]
 801287c:	eef1 7a67 	vneg.f32	s15, s15
 8012880:	edc5 7a00 	vstr	s15, [r5]
 8012884:	ed82 8a08 	vstr	s16, [r2, #32]
 8012888:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 801288c:	edd5 7a00 	vldr	s15, [r5]
 8012890:	eef1 7a67 	vneg.f32	s15, s15
 8012894:	edc5 7a00 	vstr	s15, [r5]
 8012898:	e70b      	b.n	80126b2 <kf_update+0x68e>
 801289a:	9b06      	ldr	r3, [sp, #24]
 801289c:	2400      	movs	r4, #0
 801289e:	f506 70a2 	add.w	r0, r6, #324	; 0x144
 80128a2:	ecf3 3a01 	vldmia	r3!, {s7}
 80128a6:	ed93 4a08 	vldr	s8, [r3, #32]
 80128aa:	edd3 4a11 	vldr	s9, [r3, #68]	; 0x44
 80128ae:	ed93 5a1a 	vldr	s10, [r3, #104]	; 0x68
 80128b2:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 80128b6:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 80128ba:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 80128be:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 80128c2:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 80128c6:	4632      	mov	r2, r6
 80128c8:	4639      	mov	r1, r7
 80128ca:	eef5 3a40 	vcmp.f32	s7, #0.0
 80128ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128d2:	d00c      	beq.n	80128ee <kf_update+0x8ca>
 80128d4:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
 80128d8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80128dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128e0:	d005      	beq.n	80128ee <kf_update+0x8ca>
 80128e2:	edd1 2a00 	vldr	s5, [r1]
 80128e6:	eee3 2a83 	vfma.f32	s5, s7, s6
 80128ea:	edc1 2a00 	vstr	s5, [r1]
 80128ee:	eeb5 4a40 	vcmp.f32	s8, #0.0
 80128f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128f6:	d00c      	beq.n	8012912 <kf_update+0x8ee>
 80128f8:	ed92 3a0b 	vldr	s6, [r2, #44]	; 0x2c
 80128fc:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8012900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012904:	d005      	beq.n	8012912 <kf_update+0x8ee>
 8012906:	edd1 2a00 	vldr	s5, [r1]
 801290a:	eee4 2a03 	vfma.f32	s5, s8, s6
 801290e:	edc1 2a00 	vstr	s5, [r1]
 8012912:	eef5 4a40 	vcmp.f32	s9, #0.0
 8012916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801291a:	d00c      	beq.n	8012936 <kf_update+0x912>
 801291c:	ed92 3a0c 	vldr	s6, [r2, #48]	; 0x30
 8012920:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8012924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012928:	d005      	beq.n	8012936 <kf_update+0x912>
 801292a:	edd1 2a00 	vldr	s5, [r1]
 801292e:	eee4 2a83 	vfma.f32	s5, s9, s6
 8012932:	edc1 2a00 	vstr	s5, [r1]
 8012936:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801293e:	d00c      	beq.n	801295a <kf_update+0x936>
 8012940:	ed92 3a0d 	vldr	s6, [r2, #52]	; 0x34
 8012944:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8012948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801294c:	d005      	beq.n	801295a <kf_update+0x936>
 801294e:	edd1 2a00 	vldr	s5, [r1]
 8012952:	eee5 2a03 	vfma.f32	s5, s10, s6
 8012956:	edc1 2a00 	vstr	s5, [r1]
 801295a:	eef5 5a40 	vcmp.f32	s11, #0.0
 801295e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012962:	d00c      	beq.n	801297e <kf_update+0x95a>
 8012964:	ed92 3a0e 	vldr	s6, [r2, #56]	; 0x38
 8012968:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012970:	d005      	beq.n	801297e <kf_update+0x95a>
 8012972:	edd1 2a00 	vldr	s5, [r1]
 8012976:	eee5 2a83 	vfma.f32	s5, s11, s6
 801297a:	edc1 2a00 	vstr	s5, [r1]
 801297e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012986:	d00c      	beq.n	80129a2 <kf_update+0x97e>
 8012988:	ed92 3a0f 	vldr	s6, [r2, #60]	; 0x3c
 801298c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8012990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012994:	d005      	beq.n	80129a2 <kf_update+0x97e>
 8012996:	edd1 2a00 	vldr	s5, [r1]
 801299a:	eee6 2a03 	vfma.f32	s5, s12, s6
 801299e:	edc1 2a00 	vstr	s5, [r1]
 80129a2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80129a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129aa:	d00c      	beq.n	80129c6 <kf_update+0x9a2>
 80129ac:	ed92 3a10 	vldr	s6, [r2, #64]	; 0x40
 80129b0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80129b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b8:	d005      	beq.n	80129c6 <kf_update+0x9a2>
 80129ba:	edd1 2a00 	vldr	s5, [r1]
 80129be:	eee6 2a83 	vfma.f32	s5, s13, s6
 80129c2:	edc1 2a00 	vstr	s5, [r1]
 80129c6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80129ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ce:	d00c      	beq.n	80129ea <kf_update+0x9c6>
 80129d0:	ed92 3a11 	vldr	s6, [r2, #68]	; 0x44
 80129d4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80129d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129dc:	d005      	beq.n	80129ea <kf_update+0x9c6>
 80129de:	edd1 2a00 	vldr	s5, [r1]
 80129e2:	eee7 2a03 	vfma.f32	s5, s14, s6
 80129e6:	edc1 2a00 	vstr	s5, [r1]
 80129ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80129ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f2:	d00c      	beq.n	8012a0e <kf_update+0x9ea>
 80129f4:	ed92 3a12 	vldr	s6, [r2, #72]	; 0x48
 80129f8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80129fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a00:	d005      	beq.n	8012a0e <kf_update+0x9ea>
 8012a02:	edd1 2a00 	vldr	s5, [r1]
 8012a06:	eee7 2a83 	vfma.f32	s5, s15, s6
 8012a0a:	edc1 2a00 	vstr	s5, [r1]
 8012a0e:	3224      	adds	r2, #36	; 0x24
 8012a10:	4282      	cmp	r2, r0
 8012a12:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8012a16:	f47f af58 	bne.w	80128ca <kf_update+0x8a6>
 8012a1a:	3401      	adds	r4, #1
 8012a1c:	2c09      	cmp	r4, #9
 8012a1e:	f107 0704 	add.w	r7, r7, #4
 8012a22:	f47f af3e 	bne.w	80128a2 <kf_update+0x87e>
 8012a26:	9805      	ldr	r0, [sp, #20]
 8012a28:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012a2c:	a9b9      	add	r1, sp, #740	; 0x2e4
 8012a2e:	f007 fabd 	bl	8019fac <memcpy>
 8012a32:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a3a:	d05f      	beq.n	8012afc <kf_update+0xad8>
 8012a3c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a44:	d05a      	beq.n	8012afc <kf_update+0xad8>
 8012a46:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4e:	ee68 baab 	vmul.f32	s23, s17, s23
 8012a52:	f000 812c 	beq.w	8012cae <kf_update+0xc8a>
 8012a56:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a5e:	ee2c ca28 	vmul.f32	s24, s24, s17
 8012a62:	f000 8121 	beq.w	8012ca8 <kf_update+0xc84>
 8012a66:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a6e:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8012a72:	f000 8114 	beq.w	8012c9e <kf_update+0xc7a>
 8012a76:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a7e:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8012a82:	eeb0 aa4c 	vmov.f32	s20, s24
 8012a86:	f040 812f 	bne.w	8012ce8 <kf_update+0xcc4>
 8012a8a:	eef0 ca47 	vmov.f32	s25, s14
 8012a8e:	eeb0 da67 	vmov.f32	s26, s15
 8012a92:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a9a:	d065      	beq.n	8012b68 <kf_update+0xb44>
 8012a9c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa4:	f000 80f0 	beq.w	8012c88 <kf_update+0xc64>
 8012aa8:	eef0 7a48 	vmov.f32	s15, s16
 8012aac:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab4:	ee28 7a8b 	vmul.f32	s14, s17, s22
 8012ab8:	d17d      	bne.n	8012bb6 <kf_update+0xb92>
 8012aba:	eef0 aa47 	vmov.f32	s21, s14
 8012abe:	eeb0 ba67 	vmov.f32	s22, s15
 8012ac2:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aca:	f000 8082 	beq.w	8012bd2 <kf_update+0xbae>
 8012ace:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad6:	f000 80da 	beq.w	8012c8e <kf_update+0xc6a>
 8012ada:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ae2:	ee28 7aa9 	vmul.f32	s14, s17, s19
 8012ae6:	eef0 7a48 	vmov.f32	s15, s16
 8012aea:	f040 812a 	bne.w	8012d42 <kf_update+0xd1e>
 8012aee:	eef0 8a49 	vmov.f32	s17, s18
 8012af2:	eef0 9a67 	vmov.f32	s19, s15
 8012af6:	eeb0 9a47 	vmov.f32	s18, s14
 8012afa:	e086      	b.n	8012c0a <kf_update+0xbe6>
 8012afc:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b04:	d005      	beq.n	8012b12 <kf_update+0xaee>
 8012b06:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b0e:	f040 80f9 	bne.w	8012d04 <kf_update+0xce0>
 8012b12:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b1a:	d071      	beq.n	8012c00 <kf_update+0xbdc>
 8012b1c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b24:	f040 8116 	bne.w	8012d54 <kf_update+0xd30>
 8012b28:	eeb0 aa68 	vmov.f32	s20, s17
 8012b2c:	eef0 ba68 	vmov.f32	s23, s17
 8012b30:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b38:	d007      	beq.n	8012b4a <kf_update+0xb26>
 8012b3a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b42:	f040 80c7 	bne.w	8012cd4 <kf_update+0xcb0>
 8012b46:	eeb0 da68 	vmov.f32	s26, s17
 8012b4a:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b52:	d09e      	beq.n	8012a92 <kf_update+0xa6e>
 8012b54:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5c:	f040 80f7 	bne.w	8012d4e <kf_update+0xd2a>
 8012b60:	eeb0 ba68 	vmov.f32	s22, s17
 8012b64:	eef0 ca68 	vmov.f32	s25, s17
 8012b68:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b70:	d0a7      	beq.n	8012ac2 <kf_update+0xa9e>
 8012b72:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b7a:	f040 80ce 	bne.w	8012d1a <kf_update+0xcf6>
 8012b7e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b86:	f000 8087 	beq.w	8012c98 <kf_update+0xc74>
 8012b8a:	eeb0 9a68 	vmov.f32	s18, s17
 8012b8e:	eef0 9a68 	vmov.f32	s19, s17
 8012b92:	eef0 aa68 	vmov.f32	s21, s17
 8012b96:	e038      	b.n	8012c0a <kf_update+0xbe6>
 8012b98:	9b00      	ldr	r3, [sp, #0]
 8012b9a:	edd3 8a00 	vldr	s17, [r3]
 8012b9e:	e493      	b.n	80124c8 <kf_update+0x4a4>
 8012ba0:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba8:	bf14      	ite	ne
 8012baa:	ee6b 7aad 	vmulne.f32	s15, s23, s27
 8012bae:	eef0 7a6b 	vmoveq.f32	s15, s23
 8012bb2:	f7ff bb65 	b.w	8012280 <kf_update+0x25c>
 8012bb6:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bbe:	eeb0 ba67 	vmov.f32	s22, s15
 8012bc2:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8012bc6:	f040 80b2 	bne.w	8012d2e <kf_update+0xd0a>
 8012bca:	eef0 9a67 	vmov.f32	s19, s15
 8012bce:	eef0 aa47 	vmov.f32	s21, s14
 8012bd2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bda:	d014      	beq.n	8012c06 <kf_update+0xbe2>
 8012bdc:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012be4:	d04d      	beq.n	8012c82 <kf_update+0xc5e>
 8012be6:	eeb0 7a48 	vmov.f32	s14, s16
 8012bea:	ee68 8a89 	vmul.f32	s17, s17, s18
 8012bee:	eeb0 9a47 	vmov.f32	s18, s14
 8012bf2:	e00a      	b.n	8012c0a <kf_update+0xbe6>
 8012bf4:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
 8012bf8:	ecbd 8b10 	vpop	{d8-d15}
 8012bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c00:	eef0 ba4a 	vmov.f32	s23, s20
 8012c04:	e794      	b.n	8012b30 <kf_update+0xb0c>
 8012c06:	eef0 8a49 	vmov.f32	s17, s18
 8012c0a:	edd6 3a01 	vldr	s7, [r6, #4]
 8012c0e:	ed96 4a02 	vldr	s8, [r6, #8]
 8012c12:	edd6 4a03 	vldr	s9, [r6, #12]
 8012c16:	ed96 5a04 	vldr	s10, [r6, #16]
 8012c1a:	edd6 5a05 	vldr	s11, [r6, #20]
 8012c1e:	ed96 6a06 	vldr	s12, [r6, #24]
 8012c22:	edd6 6a07 	vldr	s13, [r6, #28]
 8012c26:	ed96 7a08 	vldr	s14, [r6, #32]
 8012c2a:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
 8012c2e:	ee73 baab 	vadd.f32	s23, s7, s23
 8012c32:	ee34 aa0a 	vadd.f32	s20, s8, s20
 8012c36:	ee34 da8d 	vadd.f32	s26, s9, s26
 8012c3a:	ee75 ca2c 	vadd.f32	s25, s10, s25
 8012c3e:	ee35 ba8b 	vadd.f32	s22, s11, s22
 8012c42:	ee76 aa2a 	vadd.f32	s21, s12, s21
 8012c46:	ee76 9aa9 	vadd.f32	s19, s13, s19
 8012c4a:	ee37 9a09 	vadd.f32	s18, s14, s18
 8012c4e:	ee77 8aa8 	vadd.f32	s17, s15, s17
 8012c52:	edc6 ba01 	vstr	s23, [r6, #4]
 8012c56:	ed86 aa02 	vstr	s20, [r6, #8]
 8012c5a:	ed86 da03 	vstr	s26, [r6, #12]
 8012c5e:	edc6 ca04 	vstr	s25, [r6, #16]
 8012c62:	ed86 ba05 	vstr	s22, [r6, #20]
 8012c66:	edc6 aa06 	vstr	s21, [r6, #24]
 8012c6a:	edc6 9a07 	vstr	s19, [r6, #28]
 8012c6e:	ed86 9a08 	vstr	s18, [r6, #32]
 8012c72:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
 8012c76:	f7ff ba33 	b.w	80120e0 <kf_update+0xbc>
 8012c7a:	eef0 7a6d 	vmov.f32	s15, s27
 8012c7e:	f7ff bbae 	b.w	80123de <kf_update+0x3ba>
 8012c82:	eeb0 9a68 	vmov.f32	s18, s17
 8012c86:	e7c0      	b.n	8012c0a <kf_update+0xbe6>
 8012c88:	eeb0 ba68 	vmov.f32	s22, s17
 8012c8c:	e76c      	b.n	8012b68 <kf_update+0xb44>
 8012c8e:	eeb0 9a68 	vmov.f32	s18, s17
 8012c92:	eef0 9a68 	vmov.f32	s19, s17
 8012c96:	e7b8      	b.n	8012c0a <kf_update+0xbe6>
 8012c98:	eef0 aa69 	vmov.f32	s21, s19
 8012c9c:	e799      	b.n	8012bd2 <kf_update+0xbae>
 8012c9e:	eeb0 da67 	vmov.f32	s26, s15
 8012ca2:	eeb0 aa4c 	vmov.f32	s20, s24
 8012ca6:	e750      	b.n	8012b4a <kf_update+0xb26>
 8012ca8:	eeb0 aa4c 	vmov.f32	s20, s24
 8012cac:	e740      	b.n	8012b30 <kf_update+0xb0c>
 8012cae:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb6:	f43f af3b 	beq.w	8012b30 <kf_update+0xb0c>
 8012cba:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc2:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8012cc6:	f47f aed6 	bne.w	8012a76 <kf_update+0xa52>
 8012cca:	e7e8      	b.n	8012c9e <kf_update+0xc7a>
 8012ccc:	ee67 7aad 	vmul.f32	s15, s15, s27
 8012cd0:	f7ff bb85 	b.w	80123de <kf_update+0x3ba>
 8012cd4:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cdc:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8012ce0:	eef0 7a48 	vmov.f32	s15, s16
 8012ce4:	f43f aed1 	beq.w	8012a8a <kf_update+0xa66>
 8012ce8:	eeb0 da67 	vmov.f32	s26, s15
 8012cec:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf4:	ee68 7aac 	vmul.f32	s15, s17, s25
 8012cf8:	d126      	bne.n	8012d48 <kf_update+0xd24>
 8012cfa:	eeb0 ba67 	vmov.f32	s22, s15
 8012cfe:	eef0 ca47 	vmov.f32	s25, s14
 8012d02:	e731      	b.n	8012b68 <kf_update+0xb44>
 8012d04:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d0c:	ee2c ca28 	vmul.f32	s24, s24, s17
 8012d10:	eef0 ba48 	vmov.f32	s23, s16
 8012d14:	f47f aea7 	bne.w	8012a66 <kf_update+0xa42>
 8012d18:	e7c6      	b.n	8012ca8 <kf_update+0xc84>
 8012d1a:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d22:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8012d26:	eeb0 7a48 	vmov.f32	s14, s16
 8012d2a:	f43f af4e 	beq.w	8012bca <kf_update+0xba6>
 8012d2e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d36:	eef0 aa47 	vmov.f32	s21, s14
 8012d3a:	ee28 7aa9 	vmul.f32	s14, s17, s19
 8012d3e:	f43f aed6 	beq.w	8012aee <kf_update+0xaca>
 8012d42:	eef0 9a67 	vmov.f32	s19, s15
 8012d46:	e750      	b.n	8012bea <kf_update+0xbc6>
 8012d48:	eef0 ca47 	vmov.f32	s25, s14
 8012d4c:	e6ae      	b.n	8012aac <kf_update+0xa88>
 8012d4e:	eeb0 7a48 	vmov.f32	s14, s16
 8012d52:	e7cb      	b.n	8012cec <kf_update+0xcc8>
 8012d54:	ed9f ca06 	vldr	s24, [pc, #24]	; 8012d70 <kf_update+0xd4c>
 8012d58:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d60:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8012d64:	eef0 ba4c 	vmov.f32	s23, s24
 8012d68:	f47f ae85 	bne.w	8012a76 <kf_update+0xa52>
 8012d6c:	e797      	b.n	8012c9e <kf_update+0xc7a>
 8012d6e:	bf00      	nop
 8012d70:	00000000 	.word	0x00000000

08012d74 <q2hpr>:
 8012d74:	b510      	push	{r4, lr}
 8012d76:	ed90 7a00 	vldr	s14, [r0]
 8012d7a:	edd0 6a01 	vldr	s13, [r0, #4]
 8012d7e:	edd0 7a02 	vldr	s15, [r0, #8]
 8012d82:	edd0 4a03 	vldr	s9, [r0, #12]
 8012d86:	ed2d 8b0a 	vpush	{d8-d12}
 8012d8a:	ee27 0a26 	vmul.f32	s0, s14, s13
 8012d8e:	ee27 5a27 	vmul.f32	s10, s14, s15
 8012d92:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8012d96:	ee67 0a07 	vmul.f32	s1, s14, s14
 8012d9a:	ee26 aaa6 	vmul.f32	s20, s13, s13
 8012d9e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012da2:	ee27 7a24 	vmul.f32	s14, s14, s9
 8012da6:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8012daa:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012dae:	ee70 9aa0 	vadd.f32	s19, s1, s1
 8012db2:	ee3a aa0a 	vadd.f32	s20, s20, s20
 8012db6:	ee36 ba06 	vadd.f32	s22, s12, s12
 8012dba:	ee70 aa00 	vadd.f32	s21, s0, s0
 8012dbe:	ee35 ca05 	vadd.f32	s24, s10, s10
 8012dc2:	ee77 8a07 	vadd.f32	s17, s14, s14
 8012dc6:	ee75 baa5 	vadd.f32	s23, s11, s11
 8012dca:	ee36 9aa6 	vadd.f32	s18, s13, s13
 8012dce:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8012dd2:	460c      	mov	r4, r1
 8012dd4:	bb8a      	cbnz	r2, 8012e3a <q2hpr+0xc6>
 8012dd6:	ee79 0a8b 	vadd.f32	s1, s19, s22
 8012dda:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8012dde:	ee7b 0a60 	vsub.f32	s1, s22, s1
 8012de2:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 8012de6:	f009 fea7 	bl	801cb38 <atan2f>
 8012dea:	eeb0 8a40 	vmov.f32	s16, s0
 8012dee:	ed84 8a00 	vstr	s16, [r4]
 8012df2:	ee38 0aab 	vadd.f32	s0, s17, s23
 8012df6:	f009 fe73 	bl	801cae0 <asinf>
 8012dfa:	ee79 0a8a 	vadd.f32	s1, s19, s20
 8012dfe:	eef0 8a40 	vmov.f32	s17, s0
 8012e02:	ee7b 0a60 	vsub.f32	s1, s22, s1
 8012e06:	ee3c 0a49 	vsub.f32	s0, s24, s18
 8012e0a:	f009 fe95 	bl	801cb38 <atan2f>
 8012e0e:	eef1 8a68 	vneg.f32	s17, s17
 8012e12:	eeb0 9a40 	vmov.f32	s18, s0
 8012e16:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e1e:	ed84 9a02 	vstr	s18, [r4, #8]
 8012e22:	edc4 8a01 	vstr	s17, [r4, #4]
 8012e26:	d505      	bpl.n	8012e34 <q2hpr+0xc0>
 8012e28:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8012e80 <q2hpr+0x10c>
 8012e2c:	ee38 8a00 	vadd.f32	s16, s16, s0
 8012e30:	ed84 8a00 	vstr	s16, [r4]
 8012e34:	ecbd 8b0a 	vpop	{d8-d12}
 8012e38:	bd10      	pop	{r4, pc}
 8012e3a:	ee3c 0a49 	vsub.f32	s0, s24, s18
 8012e3e:	f009 fe4f 	bl	801cae0 <asinf>
 8012e42:	ee79 0a8a 	vadd.f32	s1, s19, s20
 8012e46:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8012e4a:	ee79 0ae0 	vsub.f32	s1, s19, s1
 8012e4e:	eeb0 9a40 	vmov.f32	s18, s0
 8012e52:	ee38 0aab 	vadd.f32	s0, s17, s23
 8012e56:	f009 fe6f 	bl	801cb38 <atan2f>
 8012e5a:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 8012e5e:	eef0 8a40 	vmov.f32	s17, s0
 8012e62:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8012e66:	ee79 0ae0 	vsub.f32	s1, s19, s1
 8012e6a:	eeb1 0a40 	vneg.f32	s0, s0
 8012e6e:	f009 fe63 	bl	801cb38 <atan2f>
 8012e72:	eef1 8a68 	vneg.f32	s17, s17
 8012e76:	eeb0 8a40 	vmov.f32	s16, s0
 8012e7a:	ed84 0a00 	vstr	s0, [r4]
 8012e7e:	e7ca      	b.n	8012e16 <q2hpr+0xa2>
 8012e80:	40c90fdb 	.word	0x40c90fdb

08012e84 <output_update>:
 8012e84:	edd0 7a01 	vldr	s15, [r0, #4]
 8012e88:	edd0 5a00 	vldr	s11, [r0]
 8012e8c:	edd0 6a02 	vldr	s13, [r0, #8]
 8012e90:	ed90 5a03 	vldr	s10, [r0, #12]
 8012e94:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e9c:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8012ea0:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8012ea4:	4615      	mov	r5, r2
 8012ea6:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8012eaa:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012eae:	eea5 7a85 	vfma.f32	s14, s11, s10
 8012eb2:	460f      	mov	r7, r1
 8012eb4:	461e      	mov	r6, r3
 8012eb6:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8012eba:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012ebe:	ee36 6a06 	vadd.f32	s12, s12, s12
 8012ec2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012ec6:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8012eca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012ece:	ee37 7a07 	vadd.f32	s14, s14, s14
 8012ed2:	ee35 5ac6 	vsub.f32	s10, s11, s12
 8012ed6:	2a00      	cmp	r2, #0
 8012ed8:	d145      	bne.n	8012f66 <output_update+0xe2>
 8012eda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012ede:	eeb1 7a47 	vneg.f32	s14, s14
 8012ee2:	ed83 7a00 	vstr	s14, [r3]
 8012ee6:	edc3 7a01 	vstr	s15, [r3, #4]
 8012eea:	ed83 5a02 	vstr	s10, [r3, #8]
 8012eee:	4629      	mov	r1, r5
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	f7ff ff3f 	bl	8012d74 <q2hpr>
 8012ef6:	ed95 7a01 	vldr	s14, [r5, #4]
 8012efa:	edd5 7a02 	vldr	s15, [r5, #8]
 8012efe:	edd5 6a00 	vldr	s13, [r5]
 8012f02:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8013010 <output_update+0x18c>
 8012f06:	ee27 7a46 	vnmul.f32	s14, s14, s12
 8012f0a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 8012f0e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012f12:	ed85 7a01 	vstr	s14, [r5, #4]
 8012f16:	edc5 6a00 	vstr	s13, [r5]
 8012f1a:	edc5 7a02 	vstr	s15, [r5, #8]
 8012f1e:	ed97 7a01 	vldr	s14, [r7, #4]
 8012f22:	edd6 7a00 	vldr	s15, [r6]
 8012f26:	6823      	ldr	r3, [r4, #0]
 8012f28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012f2c:	edc8 7a00 	vstr	s15, [r8]
 8012f30:	ed97 7a00 	vldr	s14, [r7]
 8012f34:	edd6 7a01 	vldr	s15, [r6, #4]
 8012f38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012f3c:	edc8 7a01 	vstr	s15, [r8, #4]
 8012f40:	edd6 7a02 	vldr	s15, [r6, #8]
 8012f44:	ed97 7a02 	vldr	s14, [r7, #8]
 8012f48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012f4c:	edc8 7a02 	vstr	s15, [r8, #8]
 8012f50:	edd4 7a02 	vldr	s15, [r4, #8]
 8012f54:	6862      	ldr	r2, [r4, #4]
 8012f56:	6022      	str	r2, [r4, #0]
 8012f58:	eef1 7a67 	vneg.f32	s15, s15
 8012f5c:	6063      	str	r3, [r4, #4]
 8012f5e:	edc4 7a02 	vstr	s15, [r4, #8]
 8012f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f66:	2a01      	cmp	r2, #1
 8012f68:	d015      	beq.n	8012f96 <output_update+0x112>
 8012f6a:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8013010 <output_update+0x18c>
 8012f6e:	edd5 6a00 	vldr	s13, [r5]
 8012f72:	ed95 7a01 	vldr	s14, [r5, #4]
 8012f76:	edd5 7a02 	vldr	s15, [r5, #8]
 8012f7a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012f7e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012f82:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012f86:	edc5 6a00 	vstr	s13, [r5]
 8012f8a:	ed85 7a01 	vstr	s14, [r5, #4]
 8012f8e:	edc5 7a02 	vstr	s15, [r5, #8]
 8012f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012f9a:	ee36 6a65 	vsub.f32	s12, s12, s11
 8012f9e:	eeb1 7a47 	vneg.f32	s14, s14
 8012fa2:	edc3 7a00 	vstr	s15, [r3]
 8012fa6:	ed83 7a01 	vstr	s14, [r3, #4]
 8012faa:	ed83 6a02 	vstr	s12, [r3, #8]
 8012fae:	4629      	mov	r1, r5
 8012fb0:	f7ff fee0 	bl	8012d74 <q2hpr>
 8012fb4:	edd5 6a00 	vldr	s13, [r5]
 8012fb8:	ed95 7a01 	vldr	s14, [r5, #4]
 8012fbc:	edd5 7a02 	vldr	s15, [r5, #8]
 8012fc0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013010 <output_update+0x18c>
 8012fc4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012fc8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012fcc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012fd0:	ed85 7a01 	vstr	s14, [r5, #4]
 8012fd4:	edc5 6a00 	vstr	s13, [r5]
 8012fd8:	edc5 7a02 	vstr	s15, [r5, #8]
 8012fdc:	ed97 7a00 	vldr	s14, [r7]
 8012fe0:	edd6 7a00 	vldr	s15, [r6]
 8012fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012fe8:	edc8 7a00 	vstr	s15, [r8]
 8012fec:	ed97 7a01 	vldr	s14, [r7, #4]
 8012ff0:	edd6 7a01 	vldr	s15, [r6, #4]
 8012ff4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012ff8:	edc8 7a01 	vstr	s15, [r8, #4]
 8012ffc:	edd6 7a02 	vldr	s15, [r6, #8]
 8013000:	ed97 7a02 	vldr	s14, [r7, #8]
 8013004:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013008:	edc8 7a02 	vstr	s15, [r8, #8]
 801300c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013010:	42652ee1 	.word	0x42652ee1
 8013014:	00000000 	.word	0x00000000

08013018 <MFX_emptyAttitude>:
 8013018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801301c:	ed2d 8b02 	vpush	{d8}
 8013020:	4fe9      	ldr	r7, [pc, #932]	; (80133c8 <MFX_emptyAttitude+0x3b0>)
 8013022:	eddf 8aea 	vldr	s17, [pc, #936]	; 80133cc <MFX_emptyAttitude+0x3b4>
 8013026:	f6ad 4dd4 	subw	sp, sp, #3284	; 0xcd4
 801302a:	f50d 64d7 	add.w	r4, sp, #1720	; 0x6b8
 801302e:	f04f 0800 	mov.w	r8, #0
 8013032:	46bc      	mov	ip, r7
 8013034:	e9c4 8800 	strd	r8, r8, [r4]
 8013038:	f83c 3b04 	ldrh.w	r3, [ip], #4
 801303c:	f8c4 8008 	str.w	r8, [r4, #8]
 8013040:	f88d 854a 	strb.w	r8, [sp, #1354]	; 0x54a
 8013044:	f8ad 3548 	strh.w	r3, [sp, #1352]	; 0x548
 8013048:	4681      	mov	r9, r0
 801304a:	f8dd 3548 	ldr.w	r3, [sp, #1352]	; 0x548
 801304e:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8013052:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013056:	0c1b      	lsrs	r3, r3, #16
 8013058:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 801305c:	ab2b      	add	r3, sp, #172	; 0xac
 801305e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013062:	ab2e      	add	r3, sp, #184	; 0xb8
 8013064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013068:	ab31      	add	r3, sp, #196	; 0xc4
 801306a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801306e:	ab34      	add	r3, sp, #208	; 0xd0
 8013070:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013074:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013078:	ab37      	add	r3, sp, #220	; 0xdc
 801307a:	edcd 8a08 	vstr	s17, [sp, #32]
 801307e:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8013082:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 8013086:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 801308a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801308e:	ab3a      	add	r3, sp, #232	; 0xe8
 8013090:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013094:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013098:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 801309c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80130a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80130a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80130a8:	f44f 75b4 	mov.w	r5, #360	; 0x168
 80130ac:	f8dc 3000 	ldr.w	r3, [ip]
 80130b0:	f8ce 3000 	str.w	r3, [lr]
 80130b4:	462a      	mov	r2, r5
 80130b6:	4641      	mov	r1, r8
 80130b8:	4620      	mov	r0, r4
 80130ba:	f006 fee9 	bl	8019e90 <memset>
 80130be:	f44f 56f0 	mov.w	r6, #7680	; 0x1e00
 80130c2:	462a      	mov	r2, r5
 80130c4:	4621      	mov	r1, r4
 80130c6:	a840      	add	r0, sp, #256	; 0x100
 80130c8:	f8ad 60f8 	strh.w	r6, [sp, #248]	; 0xf8
 80130cc:	f006 ff6e 	bl	8019fac <memcpy>
 80130d0:	462a      	mov	r2, r5
 80130d2:	4641      	mov	r1, r8
 80130d4:	4620      	mov	r0, r4
 80130d6:	ed8d 8a3f 	vstr	s16, [sp, #252]	; 0xfc
 80130da:	f006 fed9 	bl	8019e90 <memset>
 80130de:	462a      	mov	r2, r5
 80130e0:	4621      	mov	r1, r4
 80130e2:	a89c      	add	r0, sp, #624	; 0x270
 80130e4:	f8ad 6268 	strh.w	r6, [sp, #616]	; 0x268
 80130e8:	f006 ff60 	bl	8019fac <memcpy>
 80130ec:	462a      	mov	r2, r5
 80130ee:	4641      	mov	r1, r8
 80130f0:	4620      	mov	r0, r4
 80130f2:	ed8d 8a9b 	vstr	s16, [sp, #620]	; 0x26c
 80130f6:	f006 fecb 	bl	8019e90 <memset>
 80130fa:	462a      	mov	r2, r5
 80130fc:	4621      	mov	r1, r4
 80130fe:	a8f8      	add	r0, sp, #992	; 0x3e0
 8013100:	f8ad 63d8 	strh.w	r6, [sp, #984]	; 0x3d8
 8013104:	f006 ff52 	bl	8019fac <memcpy>
 8013108:	462a      	mov	r2, r5
 801310a:	4641      	mov	r1, r8
 801310c:	4620      	mov	r0, r4
 801310e:	ed8d 8af7 	vstr	s16, [sp, #988]	; 0x3dc
 8013112:	f006 febd 	bl	8019e90 <memset>
 8013116:	462a      	mov	r2, r5
 8013118:	4621      	mov	r1, r4
 801311a:	f50d 60aa 	add.w	r0, sp, #1360	; 0x550
 801311e:	f8ad 6548 	strh.w	r6, [sp, #1352]	; 0x548
 8013122:	f006 ff43 	bl	8019fac <memcpy>
 8013126:	f04f 0301 	mov.w	r3, #1
 801312a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 801312e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8013132:	4ba7      	ldr	r3, [pc, #668]	; (80133d0 <MFX_emptyAttitude+0x3b8>)
 8013134:	9320      	str	r3, [sp, #128]	; 0x80
 8013136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013138:	ae0c      	add	r6, sp, #48	; 0x30
 801313a:	46b3      	mov	fp, r6
 801313c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801313e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013142:	e9c4 8800 	strd	r8, r8, [r4]
 8013146:	e9c4 8802 	strd	r8, r8, [r4, #8]
 801314a:	f8c4 8010 	str.w	r8, [r4, #16]
 801314e:	f10d 0c6c 	add.w	ip, sp, #108	; 0x6c
 8013152:	46a6      	mov	lr, r4
 8013154:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013158:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801315c:	f50d 6aa9 	add.w	sl, sp, #1352	; 0x548
 8013160:	682d      	ldr	r5, [r5, #0]
 8013162:	f8cc 5000 	str.w	r5, [ip]
 8013166:	af21      	add	r7, sp, #132	; 0x84
 8013168:	ed8a 8a01 	vstr	s16, [sl, #4]
 801316c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801316e:	ab1a      	add	r3, sp, #104	; 0x68
 8013170:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013174:	abf6      	add	r3, sp, #984	; 0x3d8
 8013176:	9300      	str	r3, [sp, #0]
 8013178:	aa3e      	add	r2, sp, #248	; 0xf8
 801317a:	f8c7 8000 	str.w	r8, [r7]
 801317e:	ab9a      	add	r3, sp, #616	; 0x268
 8013180:	a911      	add	r1, sp, #68	; 0x44
 8013182:	9403      	str	r4, [sp, #12]
 8013184:	2001      	movs	r0, #1
 8013186:	f7fe fa49 	bl	801161c <DataHist_parameters>
 801318a:	4b92      	ldr	r3, [pc, #584]	; (80133d4 <MFX_emptyAttitude+0x3bc>)
 801318c:	f8c9 3018 	str.w	r3, [r9, #24]
 8013190:	4b91      	ldr	r3, [pc, #580]	; (80133d8 <MFX_emptyAttitude+0x3c0>)
 8013192:	f8c9 301c 	str.w	r3, [r9, #28]
 8013196:	4b91      	ldr	r3, [pc, #580]	; (80133dc <MFX_emptyAttitude+0x3c4>)
 8013198:	f8c9 3020 	str.w	r3, [r9, #32]
 801319c:	4b90      	ldr	r3, [pc, #576]	; (80133e0 <MFX_emptyAttitude+0x3c8>)
 801319e:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 80131a2:	ae2b      	add	r6, sp, #172	; 0xac
 80131a4:	4b8f      	ldr	r3, [pc, #572]	; (80133e4 <MFX_emptyAttitude+0x3cc>)
 80131a6:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 80131aa:	ce07      	ldmia	r6!, {r0, r1, r2}
 80131ac:	4b8e      	ldr	r3, [pc, #568]	; (80133e8 <MFX_emptyAttitude+0x3d0>)
 80131ae:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
 80131b2:	4b8e      	ldr	r3, [pc, #568]	; (80133ec <MFX_emptyAttitude+0x3d4>)
 80131b4:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 80131b8:	4b8d      	ldr	r3, [pc, #564]	; (80133f0 <MFX_emptyAttitude+0x3d8>)
 80131ba:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 80131be:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 80131c2:	f8a9 3070 	strh.w	r3, [r9, #112]	; 0x70
 80131c6:	ad2e      	add	r5, sp, #184	; 0xb8
 80131c8:	f89d 30aa 	ldrb.w	r3, [sp, #170]	; 0xaa
 80131cc:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 80131d0:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
 80131d4:	f8c9 207c 	str.w	r2, [r9, #124]	; 0x7c
 80131d8:	cd07      	ldmia	r5!, {r0, r1, r2}
 80131da:	f889 3072 	strb.w	r3, [r9, #114]	; 0x72
 80131de:	f240 1301 	movw	r3, #257	; 0x101
 80131e2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80133c0 <MFX_emptyAttitude+0x3a8>
 80131e6:	f8a9 3000 	strh.w	r3, [r9]
 80131ea:	f8a9 3004 	strh.w	r3, [r9, #4]
 80131ee:	4b81      	ldr	r3, [pc, #516]	; (80133f4 <MFX_emptyAttitude+0x3dc>)
 80131f0:	f8c9 300c 	str.w	r3, [r9, #12]
 80131f4:	4b80      	ldr	r3, [pc, #512]	; (80133f8 <MFX_emptyAttitude+0x3e0>)
 80131f6:	f8c9 3014 	str.w	r3, [r9, #20]
 80131fa:	f509 7346 	add.w	r3, r9, #792	; 0x318
 80131fe:	9304      	str	r3, [sp, #16]
 8013200:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
 8013204:	ed89 6b16 	vstr	d6, [r9, #88]	; 0x58
 8013208:	ed89 6b18 	vstr	d6, [r9, #96]	; 0x60
 801320c:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8013210:	f8a9 8002 	strh.w	r8, [r9, #2]
 8013214:	ed89 8a02 	vstr	s16, [r9, #8]
 8013218:	ed89 8a04 	vstr	s16, [r9, #16]
 801321c:	ed89 6b1a 	vstr	d6, [r9, #104]	; 0x68
 8013220:	f8c9 1084 	str.w	r1, [r9, #132]	; 0x84
 8013224:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
 8013228:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 801322c:	f10d 0bd0 	add.w	fp, sp, #208	; 0xd0
 8013230:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
 8013234:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
 8013238:	f8c9 2094 	str.w	r2, [r9, #148]	; 0x94
 801323c:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 8013240:	af37      	add	r7, sp, #220	; 0xdc
 8013242:	f8c9 0098 	str.w	r0, [r9, #152]	; 0x98
 8013246:	f8c9 109c 	str.w	r1, [r9, #156]	; 0x9c
 801324a:	f8c9 20a0 	str.w	r2, [r9, #160]	; 0xa0
 801324e:	cf07      	ldmia	r7!, {r0, r1, r2}
 8013250:	f10d 0ee8 	add.w	lr, sp, #232	; 0xe8
 8013254:	f8c9 00a4 	str.w	r0, [r9, #164]	; 0xa4
 8013258:	f8c9 10a8 	str.w	r1, [r9, #168]	; 0xa8
 801325c:	f8c9 20ac 	str.w	r2, [r9, #172]	; 0xac
 8013260:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8013264:	eddf 7a65 	vldr	s15, [pc, #404]	; 80133fc <MFX_emptyAttitude+0x3e4>
 8013268:	ed9f 5a65 	vldr	s10, [pc, #404]	; 8013400 <MFX_emptyAttitude+0x3e8>
 801326c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8013404 <MFX_emptyAttitude+0x3ec>
 8013270:	f8c9 00b0 	str.w	r0, [r9, #176]	; 0xb0
 8013274:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 8013278:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801327c:	f8c9 10b4 	str.w	r1, [r9, #180]	; 0xb4
 8013280:	ed89 5a65 	vstr	s10, [r9, #404]	; 0x194
 8013284:	edc9 5a66 	vstr	s11, [r9, #408]	; 0x198
 8013288:	ed89 7a67 	vstr	s14, [r9, #412]	; 0x19c
 801328c:	edc9 8a64 	vstr	s17, [r9, #400]	; 0x190
 8013290:	edc9 8a30 	vstr	s17, [r9, #192]	; 0xc0
 8013294:	edc9 8a4a 	vstr	s17, [r9, #296]	; 0x128
 8013298:	edc9 8a31 	vstr	s17, [r9, #196]	; 0xc4
 801329c:	f04f 0101 	mov.w	r1, #1
 80132a0:	f8c9 20b8 	str.w	r2, [r9, #184]	; 0xb8
 80132a4:	edc9 8a4b 	vstr	s17, [r9, #300]	; 0x12c
 80132a8:	edc9 8a32 	vstr	s17, [r9, #200]	; 0xc8
 80132ac:	edc9 8a4c 	vstr	s17, [r9, #304]	; 0x130
 80132b0:	edc9 8a33 	vstr	s17, [r9, #204]	; 0xcc
 80132b4:	edc9 8a4d 	vstr	s17, [r9, #308]	; 0x134
 80132b8:	edc9 8a34 	vstr	s17, [r9, #208]	; 0xd0
 80132bc:	edc9 8a4e 	vstr	s17, [r9, #312]	; 0x138
 80132c0:	edc9 8a35 	vstr	s17, [r9, #212]	; 0xd4
 80132c4:	edc9 8a4f 	vstr	s17, [r9, #316]	; 0x13c
 80132c8:	edc9 8a36 	vstr	s17, [r9, #216]	; 0xd8
 80132cc:	edc9 8a50 	vstr	s17, [r9, #320]	; 0x140
 80132d0:	edc9 8a37 	vstr	s17, [r9, #220]	; 0xdc
 80132d4:	edc9 8a51 	vstr	s17, [r9, #324]	; 0x144
 80132d8:	edc9 8a38 	vstr	s17, [r9, #224]	; 0xe0
 80132dc:	edc9 8a52 	vstr	s17, [r9, #328]	; 0x148
 80132e0:	edc9 8a39 	vstr	s17, [r9, #228]	; 0xe4
 80132e4:	edc9 8a53 	vstr	s17, [r9, #332]	; 0x14c
 80132e8:	edc9 8a3a 	vstr	s17, [r9, #232]	; 0xe8
 80132ec:	edc9 8a54 	vstr	s17, [r9, #336]	; 0x150
 80132f0:	edc9 8a3b 	vstr	s17, [r9, #236]	; 0xec
 80132f4:	edc9 8a55 	vstr	s17, [r9, #340]	; 0x154
 80132f8:	edc9 8a3c 	vstr	s17, [r9, #240]	; 0xf0
 80132fc:	edc9 8a56 	vstr	s17, [r9, #344]	; 0x158
 8013300:	edc9 8a3d 	vstr	s17, [r9, #244]	; 0xf4
 8013304:	edc9 8a57 	vstr	s17, [r9, #348]	; 0x15c
 8013308:	edc9 8a3e 	vstr	s17, [r9, #248]	; 0xf8
 801330c:	edc9 8a58 	vstr	s17, [r9, #352]	; 0x160
 8013310:	edc9 8a3f 	vstr	s17, [r9, #252]	; 0xfc
 8013314:	edc9 8a59 	vstr	s17, [r9, #356]	; 0x164
 8013318:	edc9 8a40 	vstr	s17, [r9, #256]	; 0x100
 801331c:	edc9 8a5a 	vstr	s17, [r9, #360]	; 0x168
 8013320:	edc9 8a41 	vstr	s17, [r9, #260]	; 0x104
 8013324:	edc9 8a5b 	vstr	s17, [r9, #364]	; 0x16c
 8013328:	f8c9 c1a0 	str.w	ip, [r9, #416]	; 0x1a0
 801332c:	edc9 7a75 	vstr	s15, [r9, #468]	; 0x1d4
 8013330:	edc9 7a7f 	vstr	s15, [r9, #508]	; 0x1fc
 8013334:	edc9 8a42 	vstr	s17, [r9, #264]	; 0x108
 8013338:	edc9 8a5c 	vstr	s17, [r9, #368]	; 0x170
 801333c:	edc9 8a43 	vstr	s17, [r9, #268]	; 0x10c
 8013340:	edc9 8a5d 	vstr	s17, [r9, #372]	; 0x174
 8013344:	edc9 8a44 	vstr	s17, [r9, #272]	; 0x110
 8013348:	edc9 8a5e 	vstr	s17, [r9, #376]	; 0x178
 801334c:	edc9 8a45 	vstr	s17, [r9, #276]	; 0x114
 8013350:	edc9 8a5f 	vstr	s17, [r9, #380]	; 0x17c
 8013354:	edc9 8a46 	vstr	s17, [r9, #280]	; 0x118
 8013358:	edc9 8a60 	vstr	s17, [r9, #384]	; 0x180
 801335c:	edc9 8a47 	vstr	s17, [r9, #284]	; 0x11c
 8013360:	edc9 8a61 	vstr	s17, [r9, #388]	; 0x184
 8013364:	edc9 8a48 	vstr	s17, [r9, #288]	; 0x120
 8013368:	edc9 8a62 	vstr	s17, [r9, #392]	; 0x188
 801336c:	edc9 8a49 	vstr	s17, [r9, #292]	; 0x124
 8013370:	edc9 8a63 	vstr	s17, [r9, #396]	; 0x18c
 8013374:	f889 81a4 	strb.w	r8, [r9, #420]	; 0x1a4
 8013378:	f8c9 81a6 	str.w	r8, [r9, #422]	; 0x1a6
 801337c:	edc9 8a6c 	vstr	s17, [r9, #432]	; 0x1b0
 8013380:	edc9 8a76 	vstr	s17, [r9, #472]	; 0x1d8
 8013384:	edc9 8a77 	vstr	s17, [r9, #476]	; 0x1dc
 8013388:	edc9 8a78 	vstr	s17, [r9, #480]	; 0x1e0
 801338c:	edc9 8a79 	vstr	s17, [r9, #484]	; 0x1e4
 8013390:	edc9 8a7a 	vstr	s17, [r9, #488]	; 0x1e8
 8013394:	edc9 8a7b 	vstr	s17, [r9, #492]	; 0x1ec
 8013398:	edc9 8a7c 	vstr	s17, [r9, #496]	; 0x1f0
 801339c:	edc9 8a7d 	vstr	s17, [r9, #500]	; 0x1f4
 80133a0:	edc9 8a6d 	vstr	s17, [r9, #436]	; 0x1b4
 80133a4:	edc9 8a7e 	vstr	s17, [r9, #504]	; 0x1f8
 80133a8:	edc9 8a80 	vstr	s17, [r9, #512]	; 0x200
 80133ac:	edc9 7a89 	vstr	s15, [r9, #548]	; 0x224
 80133b0:	edc9 7a93 	vstr	s15, [r9, #588]	; 0x24c
 80133b4:	edc9 7a9d 	vstr	s15, [r9, #628]	; 0x274
 80133b8:	e026      	b.n	8013408 <MFX_emptyAttitude+0x3f0>
 80133ba:	bf00      	nop
 80133bc:	f3af 8000 	nop.w
	...
 80133c8:	0801f98c 	.word	0x0801f98c
 80133cc:	00000000 	.word	0x00000000
 80133d0:	40a00000 	.word	0x40a00000
 80133d4:	3a9d4952 	.word	0x3a9d4952
 80133d8:	3ac49ba6 	.word	0x3ac49ba6
 80133dc:	3b03126f 	.word	0x3b03126f
 80133e0:	3a83126f 	.word	0x3a83126f
 80133e4:	3f639581 	.word	0x3f639581
 80133e8:	402ab021 	.word	0x402ab021
 80133ec:	3f13f7cf 	.word	0x3f13f7cf
 80133f0:	3f2ac083 	.word	0x3f2ac083
 80133f4:	01010100 	.word	0x01010100
 80133f8:	41200000 	.word	0x41200000
 80133fc:	447a0000 	.word	0x447a0000
 8013400:	3f4ccccd 	.word	0x3f4ccccd
 8013404:	3f333333 	.word	0x3f333333
 8013408:	edc9 8a81 	vstr	s17, [r9, #516]	; 0x204
 801340c:	edc9 8a82 	vstr	s17, [r9, #520]	; 0x208
 8013410:	edc9 8a83 	vstr	s17, [r9, #524]	; 0x20c
 8013414:	edc9 8a84 	vstr	s17, [r9, #528]	; 0x210
 8013418:	edc9 8a85 	vstr	s17, [r9, #532]	; 0x214
 801341c:	edc9 8a86 	vstr	s17, [r9, #536]	; 0x218
 8013420:	edc9 8a6e 	vstr	s17, [r9, #440]	; 0x1b8
 8013424:	edc9 8a87 	vstr	s17, [r9, #540]	; 0x21c
 8013428:	edc9 8a88 	vstr	s17, [r9, #544]	; 0x220
 801342c:	edc9 8a8a 	vstr	s17, [r9, #552]	; 0x228
 8013430:	edc9 8a8b 	vstr	s17, [r9, #556]	; 0x22c
 8013434:	edc9 8a8c 	vstr	s17, [r9, #560]	; 0x230
 8013438:	edc9 8a8d 	vstr	s17, [r9, #564]	; 0x234
 801343c:	edc9 8a8e 	vstr	s17, [r9, #568]	; 0x238
 8013440:	edc9 8a8f 	vstr	s17, [r9, #572]	; 0x23c
 8013444:	edc9 8a6f 	vstr	s17, [r9, #444]	; 0x1bc
 8013448:	edc9 8a90 	vstr	s17, [r9, #576]	; 0x240
 801344c:	edc9 8a91 	vstr	s17, [r9, #580]	; 0x244
 8013450:	edc9 8a92 	vstr	s17, [r9, #584]	; 0x248
 8013454:	edc9 8a94 	vstr	s17, [r9, #592]	; 0x250
 8013458:	edc9 8a95 	vstr	s17, [r9, #596]	; 0x254
 801345c:	edc9 8a96 	vstr	s17, [r9, #600]	; 0x258
 8013460:	edc9 8a97 	vstr	s17, [r9, #604]	; 0x25c
 8013464:	edc9 8a98 	vstr	s17, [r9, #608]	; 0x260
 8013468:	edc9 8a70 	vstr	s17, [r9, #448]	; 0x1c0
 801346c:	edc9 8a99 	vstr	s17, [r9, #612]	; 0x264
 8013470:	edc9 8a9a 	vstr	s17, [r9, #616]	; 0x268
 8013474:	edc9 8a9b 	vstr	s17, [r9, #620]	; 0x26c
 8013478:	edc9 8a9c 	vstr	s17, [r9, #624]	; 0x270
 801347c:	edc9 8a9e 	vstr	s17, [r9, #632]	; 0x278
 8013480:	edc9 7aa7 	vstr	s15, [r9, #668]	; 0x29c
 8013484:	edc9 7ab1 	vstr	s15, [r9, #708]	; 0x2c4
 8013488:	edc9 7abb 	vstr	s15, [r9, #748]	; 0x2ec
 801348c:	edc9 8a9f 	vstr	s17, [r9, #636]	; 0x27c
 8013490:	edc9 8aa0 	vstr	s17, [r9, #640]	; 0x280
 8013494:	edc9 8aa1 	vstr	s17, [r9, #644]	; 0x284
 8013498:	edc9 8a71 	vstr	s17, [r9, #452]	; 0x1c4
 801349c:	edc9 8aa2 	vstr	s17, [r9, #648]	; 0x288
 80134a0:	edc9 8aa3 	vstr	s17, [r9, #652]	; 0x28c
 80134a4:	edc9 8aa4 	vstr	s17, [r9, #656]	; 0x290
 80134a8:	edc9 8aa5 	vstr	s17, [r9, #660]	; 0x294
 80134ac:	edc9 8aa6 	vstr	s17, [r9, #664]	; 0x298
 80134b0:	edc9 8aa8 	vstr	s17, [r9, #672]	; 0x2a0
 80134b4:	edc9 8aa9 	vstr	s17, [r9, #676]	; 0x2a4
 80134b8:	edc9 8aaa 	vstr	s17, [r9, #680]	; 0x2a8
 80134bc:	edc9 8a72 	vstr	s17, [r9, #456]	; 0x1c8
 80134c0:	edc9 8aab 	vstr	s17, [r9, #684]	; 0x2ac
 80134c4:	edc9 8aac 	vstr	s17, [r9, #688]	; 0x2b0
 80134c8:	edc9 8aad 	vstr	s17, [r9, #692]	; 0x2b4
 80134cc:	edc9 8aae 	vstr	s17, [r9, #696]	; 0x2b8
 80134d0:	edc9 8aaf 	vstr	s17, [r9, #700]	; 0x2bc
 80134d4:	edc9 8ab0 	vstr	s17, [r9, #704]	; 0x2c0
 80134d8:	edc9 8ab2 	vstr	s17, [r9, #712]	; 0x2c8
 80134dc:	edc9 8ab3 	vstr	s17, [r9, #716]	; 0x2cc
 80134e0:	edc9 8a73 	vstr	s17, [r9, #460]	; 0x1cc
 80134e4:	edc9 8ab4 	vstr	s17, [r9, #720]	; 0x2d0
 80134e8:	edc9 8ab5 	vstr	s17, [r9, #724]	; 0x2d4
 80134ec:	edc9 8ab6 	vstr	s17, [r9, #728]	; 0x2d8
 80134f0:	edc9 8ab7 	vstr	s17, [r9, #732]	; 0x2dc
 80134f4:	edc9 8ab8 	vstr	s17, [r9, #736]	; 0x2e0
 80134f8:	edc9 8ab9 	vstr	s17, [r9, #740]	; 0x2e4
 80134fc:	edc9 8aba 	vstr	s17, [r9, #744]	; 0x2e8
 8013500:	edc9 8abc 	vstr	s17, [r9, #752]	; 0x2f0
 8013504:	9a04      	ldr	r2, [sp, #16]
 8013506:	f889 11ac 	strb.w	r1, [r9, #428]	; 0x1ac
 801350a:	edc9 8a74 	vstr	s17, [r9, #464]	; 0x1d0
 801350e:	edc9 7ac5 	vstr	s15, [r9, #788]	; 0x314
 8013512:	9203      	str	r2, [sp, #12]
 8013514:	f50d 624a 	add.w	r2, sp, #3232	; 0xca0
 8013518:	9202      	str	r2, [sp, #8]
 801351a:	f50d 6233 	add.w	r2, sp, #2864	; 0xb30
 801351e:	9201      	str	r2, [sp, #4]
 8013520:	f50d 621c 	add.w	r2, sp, #2496	; 0x9c0
 8013524:	9200      	str	r2, [sp, #0]
 8013526:	7820      	ldrb	r0, [r4, #0]
 8013528:	edc9 8abd 	vstr	s17, [r9, #756]	; 0x2f4
 801352c:	f50d 6305 	add.w	r3, sp, #2128	; 0x850
 8013530:	f50d 62dc 	add.w	r2, sp, #1760	; 0x6e0
 8013534:	f20d 61bc 	addw	r1, sp, #1724	; 0x6bc
 8013538:	edc9 8abe 	vstr	s17, [r9, #760]	; 0x2f8
 801353c:	edc9 8abf 	vstr	s17, [r9, #764]	; 0x2fc
 8013540:	edc9 8ac0 	vstr	s17, [r9, #768]	; 0x300
 8013544:	edc9 8ac1 	vstr	s17, [r9, #772]	; 0x304
 8013548:	edc9 8ac2 	vstr	s17, [r9, #776]	; 0x308
 801354c:	edc9 8ac3 	vstr	s17, [r9, #780]	; 0x30c
 8013550:	edc9 8ac4 	vstr	s17, [r9, #784]	; 0x310
 8013554:	f7fe f862 	bl	801161c <DataHist_parameters>
 8013558:	f609 1344 	addw	r3, r9, #2372	; 0x944
 801355c:	f509 6216 	add.w	r2, r9, #2400	; 0x960
 8013560:	f609 1168 	addw	r1, r9, #2408	; 0x968
 8013564:	f509 6017 	add.w	r0, r9, #2416	; 0x970
 8013568:	f10d 0c20 	add.w	ip, sp, #32
 801356c:	9304      	str	r3, [sp, #16]
 801356e:	9205      	str	r2, [sp, #20]
 8013570:	9106      	str	r1, [sp, #24]
 8013572:	9007      	str	r0, [sp, #28]
 8013574:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013578:	f8c9 393c 	str.w	r3, [r9, #2364]	; 0x93c
 801357c:	9b04      	ldr	r3, [sp, #16]
 801357e:	f8c9 0930 	str.w	r0, [r9, #2352]	; 0x930
 8013582:	f8c9 1934 	str.w	r1, [r9, #2356]	; 0x934
 8013586:	f8c9 2938 	str.w	r2, [r9, #2360]	; 0x938
 801358a:	9906      	ldr	r1, [sp, #24]
 801358c:	9a05      	ldr	r2, [sp, #20]
 801358e:	9807      	ldr	r0, [sp, #28]
 8013590:	f509 6b14 	add.w	fp, r9, #2368	; 0x940
 8013594:	f609 1a5c 	addw	sl, r9, #2396	; 0x95c
 8013598:	edcb 8a00 	vstr	s17, [fp]
 801359c:	f609 1748 	addw	r7, r9, #2376	; 0x948
 80135a0:	edca 8a00 	vstr	s17, [sl]
 80135a4:	f609 1664 	addw	r6, r9, #2404	; 0x964
 80135a8:	edc3 8a00 	vstr	s17, [r3]
 80135ac:	f609 1554 	addw	r5, r9, #2388	; 0x954
 80135b0:	f609 1458 	addw	r4, r9, #2392	; 0x958
 80135b4:	f609 1e6c 	addw	lr, r9, #2412	; 0x96c
 80135b8:	230a      	movs	r3, #10
 80135ba:	edc2 8a00 	vstr	s17, [r2]
 80135be:	edc7 8a00 	vstr	s17, [r7]
 80135c2:	edc6 8a00 	vstr	s17, [r6]
 80135c6:	f8c9 894c 	str.w	r8, [r9, #2380]	; 0x94c
 80135ca:	f8a9 8950 	strh.w	r8, [r9, #2384]	; 0x950
 80135ce:	edc5 8a00 	vstr	s17, [r5]
 80135d2:	ed84 8a00 	vstr	s16, [r4]
 80135d6:	edc1 8a00 	vstr	s17, [r1]
 80135da:	edc0 8a00 	vstr	s17, [r0]
 80135de:	edce 8a00 	vstr	s17, [lr]
 80135e2:	f8c9 3974 	str.w	r3, [r9, #2420]	; 0x974
 80135e6:	f889 8978 	strb.w	r8, [r9, #2424]	; 0x978
 80135ea:	f60d 4dd4 	addw	sp, sp, #3284	; 0xcd4
 80135ee:	ecbd 8b02 	vpop	{d8}
 80135f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135f6:	bf00      	nop

080135f8 <iNemoEngine_API_Update>:
 80135f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135fc:	ed2d 8b10 	vpush	{d8-d15}
 8013600:	f2ad 5d94 	subw	sp, sp, #1428	; 0x594
 8013604:	eeb0 8a40 	vmov.f32	s16, s0
 8013608:	9006      	str	r0, [sp, #24]
 801360a:	9114      	str	r1, [sp, #80]	; 0x50
 801360c:	4614      	mov	r4, r2
 801360e:	9324      	str	r3, [sp, #144]	; 0x90
 8013610:	2b00      	cmp	r3, #0
 8013612:	f000 8222 	beq.w	8013a5a <iNemoEngine_API_Update+0x462>
 8013616:	68e0      	ldr	r0, [r4, #12]
 8013618:	6921      	ldr	r1, [r4, #16]
 801361a:	6962      	ldr	r2, [r4, #20]
 801361c:	9d06      	ldr	r5, [sp, #24]
 801361e:	aba1      	add	r3, sp, #644	; 0x284
 8013620:	c307      	stmia	r3!, {r0, r1, r2}
 8013622:	6820      	ldr	r0, [r4, #0]
 8013624:	6861      	ldr	r1, [r4, #4]
 8013626:	68a2      	ldr	r2, [r4, #8]
 8013628:	ab9e      	add	r3, sp, #632	; 0x278
 801362a:	c307      	stmia	r3!, {r0, r1, r2}
 801362c:	69a0      	ldr	r0, [r4, #24]
 801362e:	69e1      	ldr	r1, [r4, #28]
 8013630:	6a22      	ldr	r2, [r4, #32]
 8013632:	f895 4978 	ldrb.w	r4, [r5, #2424]	; 0x978
 8013636:	aba4      	add	r3, sp, #656	; 0x290
 8013638:	c307      	stmia	r3!, {r0, r1, r2}
 801363a:	b12c      	cbz	r4, 8013648 <iNemoEngine_API_Update+0x50>
 801363c:	f8b5 2950 	ldrh.w	r2, [r5, #2384]	; 0x950
 8013640:	792b      	ldrb	r3, [r5, #4]
 8013642:	429a      	cmp	r2, r3
 8013644:	f082 82a5 	bcs.w	8015b92 <iNemoEngine_API_Update+0x259a>
 8013648:	9c06      	ldr	r4, [sp, #24]
 801364a:	ae31      	add	r6, sp, #196	; 0xc4
 801364c:	f104 033a 	add.w	r3, r4, #58	; 0x3a
 8013650:	4619      	mov	r1, r3
 8013652:	4630      	mov	r0, r6
 8013654:	aaa1      	add	r2, sp, #644	; 0x284
 8013656:	9320      	str	r3, [sp, #128]	; 0x80
 8013658:	ad37      	add	r5, sp, #220	; 0xdc
 801365a:	f7fe f897 	bl	801178c <rotVect>
 801365e:	aaa4      	add	r2, sp, #656	; 0x290
 8013660:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8013664:	a834      	add	r0, sp, #208	; 0xd0
 8013666:	f7fe f891 	bl	801178c <rotVect>
 801366a:	aa9e      	add	r2, sp, #632	; 0x278
 801366c:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8013670:	4628      	mov	r0, r5
 8013672:	f7fe f88b 	bl	801178c <rotVect>
 8013676:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801367a:	b923      	cbnz	r3, 8013686 <iNemoEngine_API_Update+0x8e>
 801367c:	4b9d      	ldr	r3, [pc, #628]	; (80138f4 <iNemoEngine_API_Update+0x2fc>)
 801367e:	606b      	str	r3, [r5, #4]
 8013680:	60ab      	str	r3, [r5, #8]
 8013682:	2300      	movs	r3, #0
 8013684:	602b      	str	r3, [r5, #0]
 8013686:	9b06      	ldr	r3, [sp, #24]
 8013688:	f8d3 794c 	ldr.w	r7, [r3, #2380]	; 0x94c
 801368c:	2f09      	cmp	r7, #9
 801368e:	d851      	bhi.n	8013734 <iNemoEngine_API_Update+0x13c>
 8013690:	edd6 aa01 	vldr	s21, [r6, #4]
 8013694:	ed96 ba00 	vldr	s22, [r6]
 8013698:	ed96 aa02 	vldr	s20, [r6, #8]
 801369c:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 80136a0:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 80136a4:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 80136a8:	eeea 7a0a 	vfma.f32	s15, s20, s20
 80136ac:	ee17 0a90 	vmov	r0, s15
 80136b0:	f7ec ff54 	bl	800055c <__aeabi_f2d>
 80136b4:	ec41 0b10 	vmov	d0, r0, r1
 80136b8:	f009 fb4c 	bl	801cd54 <sqrt>
 80136bc:	ec51 0b10 	vmov	r0, r1, d0
 80136c0:	f7ed fa9c 	bl	8000bfc <__aeabi_d2f>
 80136c4:	ee07 0a90 	vmov	s15, r0
 80136c8:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 80136cc:	ed95 9a01 	vldr	s18, [r5, #4]
 80136d0:	edd5 9a00 	vldr	s19, [r5]
 80136d4:	edd5 8a02 	vldr	s17, [r5, #8]
 80136d8:	ee69 7a09 	vmul.f32	s15, s18, s18
 80136dc:	ee2b ba07 	vmul.f32	s22, s22, s14
 80136e0:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80136e4:	ee6a aa87 	vmul.f32	s21, s21, s14
 80136e8:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80136ec:	ee2a aa07 	vmul.f32	s20, s20, s14
 80136f0:	ee17 0a90 	vmov	r0, s15
 80136f4:	ed86 ba00 	vstr	s22, [r6]
 80136f8:	edc6 aa01 	vstr	s21, [r6, #4]
 80136fc:	ed86 aa02 	vstr	s20, [r6, #8]
 8013700:	f7ec ff2c 	bl	800055c <__aeabi_f2d>
 8013704:	ec41 0b10 	vmov	d0, r0, r1
 8013708:	f009 fb24 	bl	801cd54 <sqrt>
 801370c:	ec51 0b10 	vmov	r0, r1, d0
 8013710:	f7ed fa74 	bl	8000bfc <__aeabi_d2f>
 8013714:	ee07 0a90 	vmov	s15, r0
 8013718:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 801371c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8013720:	ee29 9a27 	vmul.f32	s18, s18, s15
 8013724:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013728:	edc5 9a00 	vstr	s19, [r5]
 801372c:	ed85 9a01 	vstr	s18, [r5, #4]
 8013730:	edc5 8a02 	vstr	s17, [r5, #8]
 8013734:	9906      	ldr	r1, [sp, #24]
 8013736:	790b      	ldrb	r3, [r1, #4]
 8013738:	f8b1 2950 	ldrh.w	r2, [r1, #2384]	; 0x950
 801373c:	429a      	cmp	r2, r3
 801373e:	f080 80f5 	bcs.w	801392c <iNemoEngine_API_Update+0x334>
 8013742:	abf8      	add	r3, sp, #992	; 0x3e0
 8013744:	9319      	str	r3, [sp, #100]	; 0x64
 8013746:	f501 6313 	add.w	r3, r1, #2352	; 0x930
 801374a:	931c      	str	r3, [sp, #112]	; 0x70
 801374c:	f601 1334 	addw	r3, r1, #2356	; 0x934
 8013750:	931d      	str	r3, [sp, #116]	; 0x74
 8013752:	f601 1338 	addw	r3, r1, #2360	; 0x938
 8013756:	931e      	str	r3, [sp, #120]	; 0x78
 8013758:	eddd 9af5 	vldr	s19, [sp, #980]	; 0x3d4
 801375c:	f601 133c 	addw	r3, r1, #2364	; 0x93c
 8013760:	accc      	add	r4, sp, #816	; 0x330
 8013762:	931f      	str	r3, [sp, #124]	; 0x7c
 8013764:	460d      	mov	r5, r1
 8013766:	3701      	adds	r7, #1
 8013768:	9819      	ldr	r0, [sp, #100]	; 0x64
 801376a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801376c:	f8c5 794c 	str.w	r7, [r5, #2380]	; 0x94c
 8013770:	aaa1      	add	r2, sp, #644	; 0x284
 8013772:	f7fe f80b 	bl	801178c <rotVect>
 8013776:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013778:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	60d3      	str	r3, [r2, #12]
 801377e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	6113      	str	r3, [r2, #16]
 8013784:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	6153      	str	r3, [r2, #20]
 801378a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	6193      	str	r3, [r2, #24]
 8013790:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8013794:	9301      	str	r3, [sp, #4]
 8013796:	4601      	mov	r1, r0
 8013798:	f102 0328 	add.w	r3, r2, #40	; 0x28
 801379c:	4610      	mov	r0, r2
 801379e:	4615      	mov	r5, r2
 80137a0:	300c      	adds	r0, #12
 80137a2:	9300      	str	r3, [sp, #0]
 80137a4:	f102 031c 	add.w	r3, r2, #28
 80137a8:	f7ff fb6c 	bl	8012e84 <output_update>
 80137ac:	ed95 8a00 	vldr	s16, [r5]
 80137b0:	ed95 aa01 	vldr	s20, [r5, #4]
 80137b4:	eeb0 0a48 	vmov.f32	s0, s16
 80137b8:	f009 fca2 	bl	801d100 <sinf>
 80137bc:	eeb0 9a40 	vmov.f32	s18, s0
 80137c0:	eeb0 0a48 	vmov.f32	s0, s16
 80137c4:	f009 fa82 	bl	801cccc <cosf>
 80137c8:	edd4 7a33 	vldr	s15, [r4, #204]	; 0xcc
 80137cc:	edd4 6a3d 	vldr	s13, [r4, #244]	; 0xf4
 80137d0:	ee60 8a00 	vmul.f32	s17, s0, s0
 80137d4:	eeb0 7aca 	vabs.f32	s14, s20
 80137d8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80137dc:	eddf 7a46 	vldr	s15, [pc, #280]	; 80138f8 <iNemoEngine_API_Update+0x300>
 80137e0:	ee29 9a09 	vmul.f32	s18, s18, s18
 80137e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80137e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ec:	eee9 8a26 	vfma.f32	s17, s18, s13
 80137f0:	d579      	bpl.n	80138e6 <iNemoEngine_API_Update+0x2ee>
 80137f2:	eeb0 0a4a 	vmov.f32	s0, s20
 80137f6:	f009 fcd3 	bl	801d1a0 <tanf>
 80137fa:	ee20 0a00 	vmul.f32	s0, s0, s0
 80137fe:	eeb0 7a69 	vmov.f32	s14, s19
 8013802:	eea0 7a28 	vfma.f32	s14, s0, s17
 8013806:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013808:	9b06      	ldr	r3, [sp, #24]
 801380a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80138fc <iNemoEngine_API_Update+0x304>
 801380e:	4c3c      	ldr	r4, [pc, #240]	; (8013900 <iNemoEngine_API_Update+0x308>)
 8013810:	eef1 7ac7 	vsqrt.f32	s15, s14
 8013814:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8013920 <iNemoEngine_API_Update+0x328>
 8013818:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801381c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013824:	bf88      	it	hi
 8013826:	eef0 7a66 	vmovhi.f32	s15, s13
 801382a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801382e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013832:	bfb8      	it	lt
 8013834:	eef0 7a47 	vmovlt.f32	s15, s14
 8013838:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 801383c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013840:	bbd3      	cbnz	r3, 80138b8 <iNemoEngine_API_Update+0x2c0>
 8013842:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8013846:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 801384a:	edd5 0a08 	vldr	s1, [r5, #32]
 801384e:	ed95 0a07 	vldr	s0, [r5, #28]
 8013852:	f7fe f86d 	bl	8011930 <findDirection>
 8013856:	ed95 7a03 	vldr	s14, [r5, #12]
 801385a:	edd5 6a04 	vldr	s13, [r5, #16]
 801385e:	edd5 8a05 	vldr	s17, [r5, #20]
 8013862:	edd5 7a06 	vldr	s15, [r5, #24]
 8013866:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0
 801386a:	2805      	cmp	r0, #5
 801386c:	f204 822c 	bhi.w	8017cc8 <iNemoEngine_API_Update+0x46d0>
 8013870:	e8df f010 	tbh	[pc, r0, lsl #1]
 8013874:	11d0000a 	.word	0x11d0000a
 8013878:	11990006 	.word	0x11990006
 801387c:	000a0006 	.word	0x000a0006
 8013880:	eddf 7a20 	vldr	s15, [pc, #128]	; 8013904 <iNemoEngine_API_Update+0x30c>
 8013884:	ee38 8a27 	vadd.f32	s16, s16, s15
 8013888:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013908 <iNemoEngine_API_Update+0x310>
 801388c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013894:	bfa8      	it	ge
 8013896:	ee38 8a67 	vsubge.f32	s16, s16, s15
 801389a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801389e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a2:	f100 80d5 	bmi.w	8013a50 <iNemoEngine_API_Update+0x458>
 80138a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80138a8:	ed83 8a0d 	vstr	s16, [r3, #52]	; 0x34
 80138ac:	f20d 5d94 	addw	sp, sp, #1428	; 0x594
 80138b0:	ecbd 8b10 	vpop	{d8-d15}
 80138b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138b8:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 80138bc:	edd5 8a05 	vldr	s17, [r5, #20]
 80138c0:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 80138c4:	edd5 0a07 	vldr	s1, [r5, #28]
 80138c8:	ed95 0a08 	vldr	s0, [r5, #32]
 80138cc:	eeb1 1a41 	vneg.f32	s2, s2
 80138d0:	f7fe f82e 	bl	8011930 <findDirection>
 80138d4:	eef1 8a68 	vneg.f32	s17, s17
 80138d8:	ed95 7a04 	vldr	s14, [r5, #16]
 80138dc:	edd5 6a03 	vldr	s13, [r5, #12]
 80138e0:	edd5 7a06 	vldr	s15, [r5, #24]
 80138e4:	e7bf      	b.n	8013866 <iNemoEngine_API_Update+0x26e>
 80138e6:	eddf 7a09 	vldr	s15, [pc, #36]	; 801390c <iNemoEngine_API_Update+0x314>
 80138ea:	eeb0 7a69 	vmov.f32	s14, s19
 80138ee:	eea8 7aa7 	vfma.f32	s14, s17, s15
 80138f2:	e788      	b.n	8013806 <iNemoEngine_API_Update+0x20e>
 80138f4:	3f333333 	.word	0x3f333333
 80138f8:	3fbc430e 	.word	0x3fbc430e
 80138fc:	40490fdb 	.word	0x40490fdb
 8013900:	20000224 	.word	0x20000224
 8013904:	43340000 	.word	0x43340000
 8013908:	43b40000 	.word	0x43b40000
 801390c:	42c6ab07 	.word	0x42c6ab07
 8013910:	3c03126f 	.word	0x3c03126f
 8013914:	3b656042 	.word	0x3b656042
 8013918:	3e4ccccd 	.word	0x3e4ccccd
 801391c:	3fb50481 	.word	0x3fb50481
 8013920:	3c8efa35 	.word	0x3c8efa35
 8013924:	3ed93dd9 	.word	0x3ed93dd9
 8013928:	42c80000 	.word	0x42c80000
 801392c:	ee07 3a90 	vmov	s15, r3
 8013930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013934:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8013910 <iNemoEngine_API_Update+0x318>
 8013938:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 8013914 <iNemoEngine_API_Update+0x31c>
 801393c:	ed5f ba08 	vldr	s23, [pc, #-32]	; 8013920 <iNemoEngine_API_Update+0x328>
 8013940:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 801391c <iNemoEngine_API_Update+0x324>
 8013944:	ed5f 4a0c 	vldr	s9, [pc, #-48]	; 8013918 <iNemoEngine_API_Update+0x320>
 8013948:	ee67 7a88 	vmul.f32	s15, s15, s16
 801394c:	4608      	mov	r0, r1
 801394e:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8013952:	f601 125c 	addw	r2, r1, #2396	; 0x95c
 8013956:	2300      	movs	r3, #0
 8013958:	2100      	movs	r1, #0
 801395a:	f50d 7cb2 	add.w	ip, sp, #356	; 0x164
 801395e:	ac56      	add	r4, sp, #344	; 0x158
 8013960:	edcd 7a07 	vstr	s15, [sp, #28]
 8013964:	eef1 7ae5 	vsqrt.f32	s15, s11
 8013968:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 8013924 <iNemoEngine_API_Update+0x32c>
 801396c:	ee86 4aa7 	vdiv.f32	s8, s13, s15
 8013970:	ee67 6a87 	vmul.f32	s13, s15, s14
 8013974:	ed92 7a00 	vldr	s14, [r2]
 8013978:	f8a0 1950 	strh.w	r1, [r0, #2384]	; 0x950
 801397c:	6013      	str	r3, [r2, #0]
 801397e:	f500 6216 	add.w	r2, r0, #2400	; 0x960
 8013982:	ee27 ea2b 	vmul.f32	s28, s14, s23
 8013986:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
 801398a:	ed92 7a00 	vldr	s14, [r2]
 801398e:	6013      	str	r3, [r2, #0]
 8013990:	f600 1264 	addw	r2, r0, #2404	; 0x964
 8013994:	ee67 ea2b 	vmul.f32	s29, s14, s23
 8013998:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
 801399c:	ed92 7a00 	vldr	s14, [r2]
 80139a0:	6013      	str	r3, [r2, #0]
 80139a2:	7947      	ldrb	r7, [r0, #5]
 80139a4:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
 80139a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80139ac:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80139b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80139b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80139b8:	9a06      	ldr	r2, [sp, #24]
 80139ba:	f8d2 01c8 	ldr.w	r0, [r2, #456]	; 0x1c8
 80139be:	f8d2 11cc 	ldr.w	r1, [r2, #460]	; 0x1cc
 80139c2:	f8d2 21d0 	ldr.w	r2, [r2, #464]	; 0x1d0
 80139c6:	abd9      	add	r3, sp, #868	; 0x364
 80139c8:	2f01      	cmp	r7, #1
 80139ca:	c307      	stmia	r3!, {r0, r1, r2}
 80139cc:	ee27 6a86 	vmul.f32	s12, s15, s12
 80139d0:	ee67 4aa4 	vmul.f32	s9, s15, s9
 80139d4:	ee67 ba2b 	vmul.f32	s23, s14, s23
 80139d8:	f002 844a 	beq.w	8016270 <iNemoEngine_API_Update+0x2c78>
 80139dc:	2f02      	cmp	r7, #2
 80139de:	f002 843c 	beq.w	801625a <iNemoEngine_API_Update+0x2c62>
 80139e2:	2f00      	cmp	r7, #0
 80139e4:	f002 814d 	beq.w	8015c82 <iNemoEngine_API_Update+0x268a>
 80139e8:	9b06      	ldr	r3, [sp, #24]
 80139ea:	ed5f 5a31 	vldr	s11, [pc, #-196]	; 8013928 <iNemoEngine_API_Update+0x330>
 80139ee:	ed93 ba05 	vldr	s22, [r3, #20]
 80139f2:	491b      	ldr	r1, [pc, #108]	; (8013a60 <iNemoEngine_API_Update+0x468>)
 80139f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80139f8:	ee2b ba25 	vmul.f32	s22, s22, s11
 80139fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a00:	4618      	mov	r0, r3
 8013a02:	8842      	ldrh	r2, [r0, #2]
 8013a04:	1e53      	subs	r3, r2, #1
 8013a06:	2b12      	cmp	r3, #18
 8013a08:	d834      	bhi.n	8013a74 <iNemoEngine_API_Update+0x47c>
 8013a0a:	3201      	adds	r2, #1
 8013a0c:	b213      	sxth	r3, r2
 8013a0e:	b292      	uxth	r2, r2
 8013a10:	2a03      	cmp	r2, #3
 8013a12:	8043      	strh	r3, [r0, #2]
 8013a14:	f242 8401 	bls.w	801621a <iNemoEngine_API_Update+0x2c22>
 8013a18:	ee07 3a10 	vmov	s14, r3
 8013a1c:	eddf 5a11 	vldr	s11, [pc, #68]	; 8013a64 <iNemoEngine_API_Update+0x46c>
 8013a20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013a24:	4603      	mov	r3, r0
 8013a26:	ee27 7a25 	vmul.f32	s14, s14, s11
 8013a2a:	ee84 4a07 	vdiv.f32	s8, s8, s14
 8013a2e:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
 8013a32:	ed8d 4a22 	vstr	s8, [sp, #136]	; 0x88
 8013a36:	ee66 5a87 	vmul.f32	s11, s13, s14
 8013a3a:	ee66 6a05 	vmul.f32	s13, s12, s10
 8013a3e:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8013a70 <iNemoEngine_API_Update+0x478>
 8013a42:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013a46:	ee24 6a86 	vmul.f32	s12, s9, s12
 8013a4a:	eeb0 7a65 	vmov.f32	s14, s11
 8013a4e:	e02d      	b.n	8013aac <iNemoEngine_API_Update+0x4b4>
 8013a50:	eddf 7a05 	vldr	s15, [pc, #20]	; 8013a68 <iNemoEngine_API_Update+0x470>
 8013a54:	ee38 8a27 	vadd.f32	s16, s16, s15
 8013a58:	e725      	b.n	80138a6 <iNemoEngine_API_Update+0x2ae>
 8013a5a:	ab46      	add	r3, sp, #280	; 0x118
 8013a5c:	9324      	str	r3, [sp, #144]	; 0x90
 8013a5e:	e5da      	b.n	8013616 <iNemoEngine_API_Update+0x1e>
 8013a60:	3a83126f 	.word	0x3a83126f
 8013a64:	3d4ccccd 	.word	0x3d4ccccd
 8013a68:	43b40000 	.word	0x43b40000
 8013a6c:	358637bd 	.word	0x358637bd
 8013a70:	3f333333 	.word	0x3f333333
 8013a74:	ed1f 5a03 	vldr	s10, [pc, #-12]	; 8013a6c <iNemoEngine_API_Update+0x474>
 8013a78:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8013a7c:	edd0 5a0b 	vldr	s11, [r0, #44]	; 0x2c
 8013a80:	ee37 7a05 	vadd.f32	s14, s14, s10
 8013a84:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
 8013a88:	ee84 7a07 	vdiv.f32	s14, s8, s14
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	8043      	strh	r3, [r0, #2]
 8013a90:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8013a94:	ed8d 7a22 	vstr	s14, [sp, #136]	; 0x88
 8013a98:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8013a9c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8013aa0:	ee66 6a05 	vmul.f32	s13, s12, s10
 8013aa4:	ed1f 6a0e 	vldr	s12, [pc, #-56]	; 8013a70 <iNemoEngine_API_Update+0x478>
 8013aa8:	ee24 6a86 	vmul.f32	s12, s9, s12
 8013aac:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
 8013ab0:	ee25 5a24 	vmul.f32	s10, s10, s9
 8013ab4:	edcd 7a89 	vstr	s15, [sp, #548]	; 0x224
 8013ab8:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 8013abc:	edcd 7a8b 	vstr	s15, [sp, #556]	; 0x22c
 8013ac0:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 8013ac4:	4bdd      	ldr	r3, [pc, #884]	; (8013e3c <iNemoEngine_API_Update+0x844>)
 8013ac6:	9162      	str	r1, [sp, #392]	; 0x188
 8013ac8:	a8f8      	add	r0, sp, #992	; 0x3e0
 8013aca:	9163      	str	r1, [sp, #396]	; 0x18c
 8013acc:	9164      	str	r1, [sp, #400]	; 0x190
 8013ace:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8013ad2:	2100      	movs	r1, #0
 8013ad4:	4605      	mov	r5, r0
 8013ad6:	9367      	str	r3, [sp, #412]	; 0x19c
 8013ad8:	9019      	str	r0, [sp, #100]	; 0x64
 8013ada:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 8013ade:	edcd 5a84 	vstr	s11, [sp, #528]	; 0x210
 8013ae2:	edcd 5a85 	vstr	s11, [sp, #532]	; 0x214
 8013ae6:	ed8d 7a86 	vstr	s14, [sp, #536]	; 0x218
 8013aea:	ed8d 7a87 	vstr	s14, [sp, #540]	; 0x21c
 8013aee:	ed8d 7a88 	vstr	s14, [sp, #544]	; 0x220
 8013af2:	edcd 6a8c 	vstr	s13, [sp, #560]	; 0x230
 8013af6:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 8013afa:	ed8d 5a8e 	vstr	s10, [sp, #568]	; 0x238
 8013afe:	edcd 7a5f 	vstr	s15, [sp, #380]	; 0x17c
 8013b02:	edcd 7a60 	vstr	s15, [sp, #384]	; 0x180
 8013b06:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 8013b0a:	f006 f9c1 	bl	8019e90 <memset>
 8013b0e:	9b06      	ldr	r3, [sp, #24]
 8013b10:	7b5a      	ldrb	r2, [r3, #13]
 8013b12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013b16:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 8013b1a:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
 8013b1e:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 8013b22:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
 8013b26:	f8c5 3178 	str.w	r3, [r5, #376]	; 0x178
 8013b2a:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
 8013b2e:	2a00      	cmp	r2, #0
 8013b30:	f001 8124 	beq.w	8014d7c <iNemoEngine_API_Update+0x1784>
 8013b34:	ed94 8a01 	vldr	s16, [r4, #4]
 8013b38:	edd4 8a00 	vldr	s17, [r4]
 8013b3c:	ed94 ca02 	vldr	s24, [r4, #8]
 8013b40:	ee28 9a08 	vmul.f32	s18, s16, s16
 8013b44:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8013b48:	eea8 9aa8 	vfma.f32	s18, s17, s17
 8013b4c:	ee68 5a27 	vmul.f32	s11, s16, s15
 8013b50:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8013b54:	ee6c 6a27 	vmul.f32	s13, s24, s15
 8013b58:	eef1 cac9 	vsqrt.f32	s25, s18
 8013b5c:	ee3c 5a0c 	vadd.f32	s10, s24, s24
 8013b60:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8013b64:	ee38 6aa8 	vadd.f32	s12, s17, s17
 8013b68:	ee38 7a08 	vadd.f32	s14, s16, s16
 8013b6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013b6e:	ed94 aa04 	vldr	s20, [r4, #16]
 8013b72:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8013b76:	eef1 7a4a 	vneg.f32	s15, s20
 8013b7a:	edd4 9a05 	vldr	s19, [r4, #20]
 8013b7e:	edd4 aa03 	vldr	s21, [r4, #12]
 8013b82:	ed83 5a01 	vstr	s10, [r3, #4]
 8013b86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013b8a:	edc3 5a02 	vstr	s11, [r3, #8]
 8013b8e:	edc3 7a05 	vstr	s15, [r3, #20]
 8013b92:	eef1 7a69 	vneg.f32	s15, s19
 8013b96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013b9a:	edc3 6a0c 	vstr	s13, [r3, #48]	; 0x30
 8013b9e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8013ba2:	eef1 7a6a 	vneg.f32	s15, s21
 8013ba6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013baa:	ed83 6a0e 	vstr	s12, [r3, #56]	; 0x38
 8013bae:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8013bb2:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8013bb6:	ed83 7a18 	vstr	s14, [r3, #96]	; 0x60
 8013bba:	edc3 7a04 	vstr	s15, [r3, #16]
 8013bbe:	ee7a 7aaa 	vadd.f32	s15, s21, s21
 8013bc2:	2230      	movs	r2, #48	; 0x30
 8013bc4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8013bc8:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 8013bcc:	2100      	movs	r1, #0
 8013bce:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8013bd2:	a88f      	add	r0, sp, #572	; 0x23c
 8013bd4:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8013bd8:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
 8013bdc:	933c      	str	r3, [sp, #240]	; 0xf0
 8013bde:	f006 f957 	bl	8019e90 <memset>
 8013be2:	9a06      	ldr	r2, [sp, #24]
 8013be4:	edd2 7a07 	vldr	s15, [r2, #28]
 8013be8:	ed92 da06 	vldr	s26, [r2, #24]
 8013bec:	f892 31ac 	ldrb.w	r3, [r2, #428]	; 0x1ac
 8013bf0:	ee6b 7a27 	vmul.f32	s15, s22, s15
 8013bf4:	ee2b da0d 	vmul.f32	s26, s22, s26
 8013bf8:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 8013bfc:	edd2 7a08 	vldr	s15, [r2, #32]
 8013c00:	ee6b 7a27 	vmul.f32	s15, s22, s15
 8013c04:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	f043 8025 	bne.w	8016c58 <iNemoEngine_API_Update+0x3660>
 8013c0e:	4613      	mov	r3, r2
 8013c10:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 8013c14:	9225      	str	r2, [sp, #148]	; 0x94
 8013c16:	f603 1244 	addw	r2, r3, #2372	; 0x944
 8013c1a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8013c1e:	9226      	str	r2, [sp, #152]	; 0x98
 8013c20:	9327      	str	r3, [sp, #156]	; 0x9c
 8013c22:	9a06      	ldr	r2, [sp, #24]
 8013c24:	f892 3318 	ldrb.w	r3, [r2, #792]	; 0x318
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	f042 84db 	bne.w	80165e4 <iNemoEngine_API_Update+0x2fec>
 8013c2e:	4613      	mov	r3, r2
 8013c30:	f502 6597 	add.w	r5, r2, #1208	; 0x4b8
 8013c34:	f202 47b4 	addw	r7, r2, #1204	; 0x4b4
 8013c38:	f502 66c5 	add.w	r6, r2, #1576	; 0x628
 8013c3c:	f202 6824 	addw	r8, r2, #1572	; 0x624
 8013c40:	f203 7394 	addw	r3, r3, #1940	; 0x794
 8013c44:	f502 62f3 	add.w	r2, r2, #1944	; 0x798
 8013c48:	9215      	str	r2, [sp, #84]	; 0x54
 8013c4a:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c4c:	9b06      	ldr	r3, [sp, #24]
 8013c4e:	f503 6213 	add.w	r2, r3, #2352	; 0x930
 8013c52:	ed92 6a00 	vldr	s12, [r2]
 8013c56:	921c      	str	r2, [sp, #112]	; 0x70
 8013c58:	f603 1134 	addw	r1, r3, #2356	; 0x934
 8013c5c:	f603 1038 	addw	r0, r3, #2360	; 0x938
 8013c60:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 8013c64:	edd3 7a00 	vldr	s15, [r3]
 8013c68:	edd1 6a00 	vldr	s13, [r1]
 8013c6c:	ed90 7a00 	vldr	s14, [r0]
 8013c70:	931f      	str	r3, [sp, #124]	; 0x7c
 8013c72:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8013c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c7a:	911d      	str	r1, [sp, #116]	; 0x74
 8013c7c:	901e      	str	r0, [sp, #120]	; 0x78
 8013c7e:	ed8d 6a4e 	vstr	s12, [sp, #312]	; 0x138
 8013c82:	edcd 6a4f 	vstr	s13, [sp, #316]	; 0x13c
 8013c86:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 8013c8a:	edcd 7a51 	vstr	s15, [sp, #324]	; 0x144
 8013c8e:	f04f 0300 	mov.w	r3, #0
 8013c92:	d13a      	bne.n	8013d0a <iNemoEngine_API_Update+0x712>
 8013c94:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c9c:	d135      	bne.n	8013d0a <iNemoEngine_API_Update+0x712>
 8013c9e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca6:	d130      	bne.n	8013d0a <iNemoEngine_API_Update+0x712>
 8013ca8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cb0:	d12b      	bne.n	8013d0a <iNemoEngine_API_Update+0x712>
 8013cb2:	9a06      	ldr	r2, [sp, #24]
 8013cb4:	934e      	str	r3, [sp, #312]	; 0x138
 8013cb6:	934f      	str	r3, [sp, #316]	; 0x13c
 8013cb8:	9350      	str	r3, [sp, #320]	; 0x140
 8013cba:	4b61      	ldr	r3, [pc, #388]	; (8013e40 <iNemoEngine_API_Update+0x848>)
 8013cbc:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 8013cc0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013cc4:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 8013cc8:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 8013ccc:	9351      	str	r3, [sp, #324]	; 0x144
 8013cce:	2100      	movs	r1, #0
 8013cd0:	4613      	mov	r3, r2
 8013cd2:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 8013cd6:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
 8013cda:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013cde:	f006 f8d7 	bl	8019e90 <memset>
 8013ce2:	9a06      	ldr	r2, [sp, #24]
 8013ce4:	4b57      	ldr	r3, [pc, #348]	; (8013e44 <iNemoEngine_API_Update+0x84c>)
 8013ce6:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
 8013cea:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 8013cee:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
 8013cf2:	f8c2 324c 	str.w	r3, [r2, #588]	; 0x24c
 8013cf6:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
 8013cfa:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
 8013cfe:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
 8013d02:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
 8013d06:	f8c2 3314 	str.w	r3, [r2, #788]	; 0x314
 8013d0a:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8013e48 <iNemoEngine_API_Update+0x850>
 8013d0e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8013d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d16:	f100 87e0 	bmi.w	8014cda <iNemoEngine_API_Update+0x16e2>
 8013d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013d1e:	ee7c 6ac7 	vsub.f32	s13, s25, s14
 8013d22:	eec7 7a2c 	vdiv.f32	s15, s14, s25
 8013d26:	eeb0 7ae6 	vabs.f32	s14, s13
 8013d2a:	eef0 6a47 	vmov.f32	s13, s14
 8013d2e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8013d32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013d36:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013d3a:	ed8d 7a21 	vstr	s14, [sp, #132]	; 0x84
 8013d3e:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 8013d42:	edd4 6a00 	vldr	s13, [r4]
 8013d46:	ed94 6a01 	vldr	s12, [r4, #4]
 8013d4a:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 8013d4e:	eeaa 7aaa 	vfma.f32	s14, s21, s21
 8013d52:	4628      	mov	r0, r5
 8013d54:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8013d58:	eea9 7aa9 	vfma.f32	s14, s19, s19
 8013d5c:	ee67 6a86 	vmul.f32	s13, s15, s12
 8013d60:	ed8d 6a2d 	vstr	s12, [sp, #180]	; 0xb4
 8013d64:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8013e48 <iNemoEngine_API_Update+0x850>
 8013d68:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 8013d6c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d74:	bf54      	ite	pl
 8013d76:	eeb1 9ac7 	vsqrtpl.f32	s18, s14
 8013d7a:	ed9f 9a34 	vldrmi	s18, [pc, #208]	; 8013e4c <iNemoEngine_API_Update+0x854>
 8013d7e:	ed94 5a02 	vldr	s10, [r4, #8]
 8013d82:	edd7 3a00 	vldr	s7, [r7]
 8013d86:	ed8d 5a2a 	vstr	s10, [sp, #168]	; 0xa8
 8013d8a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8013d8e:	ee83 7a09 	vdiv.f32	s14, s6, s18
 8013d92:	ee65 7a27 	vmul.f32	s15, s10, s15
 8013d96:	ee2a 6a07 	vmul.f32	s12, s20, s14
 8013d9a:	eeb0 0a63 	vmov.f32	s0, s7
 8013d9e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8013da2:	ed8d 6a41 	vstr	s12, [sp, #260]	; 0x104
 8013da6:	ee2a 6a87 	vmul.f32	s12, s21, s14
 8013daa:	ee29 7a87 	vmul.f32	s14, s19, s14
 8013dae:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013db2:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8013db6:	eee7 6a87 	vfma.f32	s13, s15, s14
 8013dba:	ed8d 7a42 	vstr	s14, [sp, #264]	; 0x108
 8013dbe:	edcd 5a3d 	vstr	s11, [sp, #244]	; 0xf4
 8013dc2:	ed8d 6a40 	vstr	s12, [sp, #256]	; 0x100
 8013dc6:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 8013dca:	f7fd ffa5 	bl	8011d18 <dataDerivative5>
 8013dce:	edd8 fa00 	vldr	s31, [r8]
 8013dd2:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
 8013dd6:	4630      	mov	r0, r6
 8013dd8:	eeb0 0a6f 	vmov.f32	s0, s31
 8013ddc:	f7fd ff9c 	bl	8011d18 <dataDerivative5>
 8013de0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013de2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013de4:	ed93 fa00 	vldr	s30, [r3]
 8013de8:	eeb0 ba40 	vmov.f32	s22, s0
 8013dec:	eeb0 0a4f 	vmov.f32	s0, s30
 8013df0:	f7fd ff92 	bl	8011d18 <dataDerivative5>
 8013df4:	eec3 7a23 	vdiv.f32	s15, s6, s7
 8013df8:	eef0 da40 	vmov.f32	s27, s0
 8013dfc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013e00:	ee27 8a88 	vmul.f32	s16, s15, s16
 8013e04:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8013e08:	eddf 7a11 	vldr	s15, [pc, #68]	; 8013e50 <iNemoEngine_API_Update+0x858>
 8013e0c:	eeb0 7ae8 	vabs.f32	s14, s17
 8013e10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e18:	d52c      	bpl.n	8013e74 <iNemoEngine_API_Update+0x87c>
 8013e1a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013e1e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e26:	f281 8756 	bge.w	8015cd6 <iNemoEngine_API_Update+0x26de>
 8013e2a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8013e2e:	eef4 8ac7 	vcmpe.f32	s17, s14
 8013e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e36:	f303 80bc 	bgt.w	8016fb2 <iNemoEngine_API_Update+0x39ba>
 8013e3a:	e00b      	b.n	8013e54 <iNemoEngine_API_Update+0x85c>
 8013e3c:	3a9d4952 	.word	0x3a9d4952
 8013e40:	bf666666 	.word	0xbf666666
 8013e44:	40a00000 	.word	0x40a00000
 8013e48:	3c23d70a 	.word	0x3c23d70a
 8013e4c:	3dcccccd 	.word	0x3dcccccd
 8013e50:	4b000000 	.word	0x4b000000
 8013e54:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8013e58:	ee17 0a90 	vmov	r0, s15
 8013e5c:	f7ec fb7e 	bl	800055c <__aeabi_f2d>
 8013e60:	ec41 0b10 	vmov	d0, r0, r1
 8013e64:	f009 fdb4 	bl	801d9d0 <ceil>
 8013e68:	ec51 0b10 	vmov	r0, r1, d0
 8013e6c:	f7ec fec6 	bl	8000bfc <__aeabi_d2f>
 8013e70:	ee08 0a90 	vmov	s17, r0
 8013e74:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 8013e50 <iNemoEngine_API_Update+0x858>
 8013e78:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 8013e7c:	eeb0 7ac8 	vabs.f32	s14, s16
 8013e80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e88:	d51f      	bpl.n	8013eca <iNemoEngine_API_Update+0x8d2>
 8013e8a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013e8e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e96:	f281 870c 	bge.w	8015cb2 <iNemoEngine_API_Update+0x26ba>
 8013e9a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8013e9e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ea6:	f303 8080 	bgt.w	8016faa <iNemoEngine_API_Update+0x39b2>
 8013eaa:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013eae:	ee17 0a90 	vmov	r0, s15
 8013eb2:	f7ec fb53 	bl	800055c <__aeabi_f2d>
 8013eb6:	ec41 0b10 	vmov	d0, r0, r1
 8013eba:	f009 fd89 	bl	801d9d0 <ceil>
 8013ebe:	ec51 0b10 	vmov	r0, r1, d0
 8013ec2:	f7ec fe9b 	bl	8000bfc <__aeabi_d2f>
 8013ec6:	ee08 0a10 	vmov	s16, r0
 8013eca:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 8013e50 <iNemoEngine_API_Update+0x858>
 8013ece:	ed8d 8a44 	vstr	s16, [sp, #272]	; 0x110
 8013ed2:	eeb0 7acc 	vabs.f32	s14, s24
 8013ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ede:	d51f      	bpl.n	8013f20 <iNemoEngine_API_Update+0x928>
 8013ee0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013ee4:	eeb4 cae7 	vcmpe.f32	s24, s15
 8013ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eec:	f281 86cf 	bge.w	8015c8e <iNemoEngine_API_Update+0x2696>
 8013ef0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8013ef4:	eeb4 cac7 	vcmpe.f32	s24, s14
 8013ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013efc:	f303 8065 	bgt.w	8016fca <iNemoEngine_API_Update+0x39d2>
 8013f00:	ee7c 7a67 	vsub.f32	s15, s24, s15
 8013f04:	ee17 0a90 	vmov	r0, s15
 8013f08:	f7ec fb28 	bl	800055c <__aeabi_f2d>
 8013f0c:	ec41 0b10 	vmov	d0, r0, r1
 8013f10:	f009 fd5e 	bl	801d9d0 <ceil>
 8013f14:	ec51 0b10 	vmov	r0, r1, d0
 8013f18:	f7ec fe70 	bl	8000bfc <__aeabi_d2f>
 8013f1c:	ee0c 0a10 	vmov	s24, r0
 8013f20:	9b06      	ldr	r3, [sp, #24]
 8013f22:	ed8d ca45 	vstr	s24, [sp, #276]	; 0x114
 8013f26:	f893 04b1 	ldrb.w	r0, [r3, #1201]	; 0x4b1
 8013f2a:	1e43      	subs	r3, r0, #1
 8013f2c:	b25b      	sxtb	r3, r3
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	dd18      	ble.n	8013f64 <iNemoEngine_API_Update+0x96c>
 8013f32:	9c06      	ldr	r4, [sp, #24]
 8013f34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013f38:	1e81      	subs	r1, r0, #2
 8013f3a:	009b      	lsls	r3, r3, #2
 8013f3c:	b2c9      	uxtb	r1, r1
 8013f3e:	f504 6294 	add.w	r2, r4, #1184	; 0x4a0
 8013f42:	441a      	add	r2, r3
 8013f44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013f48:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 8013f4c:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 8013f50:	4423      	add	r3, r4
 8013f52:	681a      	ldr	r2, [r3, #0]
 8013f54:	60da      	str	r2, [r3, #12]
 8013f56:	685a      	ldr	r2, [r3, #4]
 8013f58:	611a      	str	r2, [r3, #16]
 8013f5a:	689a      	ldr	r2, [r3, #8]
 8013f5c:	615a      	str	r2, [r3, #20]
 8013f5e:	3b0c      	subs	r3, #12
 8013f60:	428b      	cmp	r3, r1
 8013f62:	d1f6      	bne.n	8013f52 <iNemoEngine_API_Update+0x95a>
 8013f64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013f68:	edc5 8a00 	vstr	s17, [r5]
 8013f6c:	eec7 8aaf 	vdiv.f32	s17, s15, s31
 8013f70:	9a06      	ldr	r2, [sp, #24]
 8013f72:	f202 43bc 	addw	r3, r2, #1212	; 0x4bc
 8013f76:	ed83 8a00 	vstr	s16, [r3]
 8013f7a:	f502 6398 	add.w	r3, r2, #1216	; 0x4c0
 8013f7e:	ed83 ca00 	vstr	s24, [r3]
 8013f82:	f892 34b0 	ldrb.w	r3, [r2, #1200]	; 0x4b0
 8013f86:	ed5f 7a4e 	vldr	s15, [pc, #-312]	; 8013e50 <iNemoEngine_API_Update+0x858>
 8013f8a:	ee2a 8aa8 	vmul.f32	s16, s21, s17
 8013f8e:	3301      	adds	r3, #1
 8013f90:	b2db      	uxtb	r3, r3
 8013f92:	eeb0 7ac8 	vabs.f32	s14, s16
 8013f96:	4298      	cmp	r0, r3
 8013f98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f9c:	bf28      	it	cs
 8013f9e:	4618      	movcs	r0, r3
 8013fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa4:	ee2a ca28 	vmul.f32	s24, s20, s17
 8013fa8:	f882 04b0 	strb.w	r0, [r2, #1200]	; 0x4b0
 8013fac:	ee69 8aa8 	vmul.f32	s17, s19, s17
 8013fb0:	d51f      	bpl.n	8013ff2 <iNemoEngine_API_Update+0x9fa>
 8013fb2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013fb6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fbe:	f281 87cb 	bge.w	8015f58 <iNemoEngine_API_Update+0x2960>
 8013fc2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8013fc6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fce:	f303 8000 	bgt.w	8016fd2 <iNemoEngine_API_Update+0x39da>
 8013fd2:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013fd6:	ee17 0a90 	vmov	r0, s15
 8013fda:	f7ec fabf 	bl	800055c <__aeabi_f2d>
 8013fde:	ec41 0b10 	vmov	d0, r0, r1
 8013fe2:	f009 fcf5 	bl	801d9d0 <ceil>
 8013fe6:	ec51 0b10 	vmov	r0, r1, d0
 8013fea:	f7ec fe07 	bl	8000bfc <__aeabi_d2f>
 8013fee:	ee08 0a10 	vmov	s16, r0
 8013ff2:	ed5f 7a69 	vldr	s15, [pc, #-420]	; 8013e50 <iNemoEngine_API_Update+0x858>
 8013ff6:	ed8d 8a43 	vstr	s16, [sp, #268]	; 0x10c
 8013ffa:	eeb0 7acc 	vabs.f32	s14, s24
 8013ffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014006:	d51f      	bpl.n	8014048 <iNemoEngine_API_Update+0xa50>
 8014008:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801400c:	eeb4 cae7 	vcmpe.f32	s24, s15
 8014010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014014:	f281 878e 	bge.w	8015f34 <iNemoEngine_API_Update+0x293c>
 8014018:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801401c:	eeb4 cac7 	vcmpe.f32	s24, s14
 8014020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014024:	f302 87cd 	bgt.w	8016fc2 <iNemoEngine_API_Update+0x39ca>
 8014028:	ee7c 7a67 	vsub.f32	s15, s24, s15
 801402c:	ee17 0a90 	vmov	r0, s15
 8014030:	f7ec fa94 	bl	800055c <__aeabi_f2d>
 8014034:	ec41 0b10 	vmov	d0, r0, r1
 8014038:	f009 fcca 	bl	801d9d0 <ceil>
 801403c:	ec51 0b10 	vmov	r0, r1, d0
 8014040:	f7ec fddc 	bl	8000bfc <__aeabi_d2f>
 8014044:	ee0c 0a10 	vmov	s24, r0
 8014048:	ed5f 7a7f 	vldr	s15, [pc, #-508]	; 8013e50 <iNemoEngine_API_Update+0x858>
 801404c:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 8014050:	eeb0 7ae8 	vabs.f32	s14, s17
 8014054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801405c:	d51f      	bpl.n	801409e <iNemoEngine_API_Update+0xaa6>
 801405e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014062:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801406a:	f281 8751 	bge.w	8015f10 <iNemoEngine_API_Update+0x2918>
 801406e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8014072:	eef4 8ac7 	vcmpe.f32	s17, s14
 8014076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801407a:	f302 878e 	bgt.w	8016f9a <iNemoEngine_API_Update+0x39a2>
 801407e:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014082:	ee17 0a90 	vmov	r0, s15
 8014086:	f7ec fa69 	bl	800055c <__aeabi_f2d>
 801408a:	ec41 0b10 	vmov	d0, r0, r1
 801408e:	f009 fc9f 	bl	801d9d0 <ceil>
 8014092:	ec51 0b10 	vmov	r0, r1, d0
 8014096:	f7ec fdb1 	bl	8000bfc <__aeabi_d2f>
 801409a:	ee08 0a90 	vmov	s17, r0
 801409e:	9b06      	ldr	r3, [sp, #24]
 80140a0:	edcd 8a45 	vstr	s17, [sp, #276]	; 0x114
 80140a4:	f893 0621 	ldrb.w	r0, [r3, #1569]	; 0x621
 80140a8:	1e43      	subs	r3, r0, #1
 80140aa:	b25b      	sxtb	r3, r3
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	dd18      	ble.n	80140e2 <iNemoEngine_API_Update+0xaea>
 80140b0:	9c06      	ldr	r4, [sp, #24]
 80140b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80140b6:	1e81      	subs	r1, r0, #2
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	b2c9      	uxtb	r1, r1
 80140bc:	f504 62c2 	add.w	r2, r4, #1552	; 0x610
 80140c0:	441a      	add	r2, r3
 80140c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80140c6:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80140ca:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 80140ce:	4423      	add	r3, r4
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	60da      	str	r2, [r3, #12]
 80140d4:	685a      	ldr	r2, [r3, #4]
 80140d6:	611a      	str	r2, [r3, #16]
 80140d8:	689a      	ldr	r2, [r3, #8]
 80140da:	615a      	str	r2, [r3, #20]
 80140dc:	3b0c      	subs	r3, #12
 80140de:	4299      	cmp	r1, r3
 80140e0:	d1f6      	bne.n	80140d0 <iNemoEngine_API_Update+0xad8>
 80140e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80140e6:	ed86 8a00 	vstr	s16, [r6]
 80140ea:	ee87 8a8f 	vdiv.f32	s16, s15, s30
 80140ee:	9a06      	ldr	r2, [sp, #24]
 80140f0:	f202 632c 	addw	r3, r2, #1580	; 0x62c
 80140f4:	ed83 ca00 	vstr	s24, [r3]
 80140f8:	f502 63c6 	add.w	r3, r2, #1584	; 0x630
 80140fc:	edc3 8a00 	vstr	s17, [r3]
 8014100:	f892 3620 	ldrb.w	r3, [r2, #1568]	; 0x620
 8014104:	ed5f 7aae 	vldr	s15, [pc, #-696]	; 8013e50 <iNemoEngine_API_Update+0x858>
 8014108:	ee68 8a0e 	vmul.f32	s17, s16, s28
 801410c:	3301      	adds	r3, #1
 801410e:	b2db      	uxtb	r3, r3
 8014110:	eeb0 7ae8 	vabs.f32	s14, s17
 8014114:	4298      	cmp	r0, r3
 8014116:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801411a:	bf28      	it	cs
 801411c:	4618      	movcs	r0, r3
 801411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014122:	ee28 ca2e 	vmul.f32	s24, s16, s29
 8014126:	f882 0620 	strb.w	r0, [r2, #1568]	; 0x620
 801412a:	ee28 8a2b 	vmul.f32	s16, s16, s23
 801412e:	d51f      	bpl.n	8014170 <iNemoEngine_API_Update+0xb78>
 8014130:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014134:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801413c:	f281 86d6 	bge.w	8015eec <iNemoEngine_API_Update+0x28f4>
 8014140:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8014144:	eef4 8ac7 	vcmpe.f32	s17, s14
 8014148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801414c:	f302 8745 	bgt.w	8016fda <iNemoEngine_API_Update+0x39e2>
 8014150:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014154:	ee17 0a90 	vmov	r0, s15
 8014158:	f7ec fa00 	bl	800055c <__aeabi_f2d>
 801415c:	ec41 0b10 	vmov	d0, r0, r1
 8014160:	f009 fc36 	bl	801d9d0 <ceil>
 8014164:	ec51 0b10 	vmov	r0, r1, d0
 8014168:	f7ec fd48 	bl	8000bfc <__aeabi_d2f>
 801416c:	ee08 0a90 	vmov	s17, r0
 8014170:	ed5f 7ac9 	vldr	s15, [pc, #-804]	; 8013e50 <iNemoEngine_API_Update+0x858>
 8014174:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 8014178:	eeb0 7acc 	vabs.f32	s14, s24
 801417c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014184:	d51f      	bpl.n	80141c6 <iNemoEngine_API_Update+0xbce>
 8014186:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801418a:	eeb4 cae7 	vcmpe.f32	s24, s15
 801418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014192:	f281 871d 	bge.w	8015fd0 <iNemoEngine_API_Update+0x29d8>
 8014196:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801419a:	eeb4 cac7 	vcmpe.f32	s24, s14
 801419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141a2:	f302 86fe 	bgt.w	8016fa2 <iNemoEngine_API_Update+0x39aa>
 80141a6:	ee7c 7a67 	vsub.f32	s15, s24, s15
 80141aa:	ee17 0a90 	vmov	r0, s15
 80141ae:	f7ec f9d5 	bl	800055c <__aeabi_f2d>
 80141b2:	ec41 0b10 	vmov	d0, r0, r1
 80141b6:	f009 fc0b 	bl	801d9d0 <ceil>
 80141ba:	ec51 0b10 	vmov	r0, r1, d0
 80141be:	f7ec fd1d 	bl	8000bfc <__aeabi_d2f>
 80141c2:	ee0c 0a10 	vmov	s24, r0
 80141c6:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 8013e50 <iNemoEngine_API_Update+0x858>
 80141ca:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 80141ce:	eeb0 7ac8 	vabs.f32	s14, s16
 80141d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141da:	d51f      	bpl.n	801421c <iNemoEngine_API_Update+0xc24>
 80141dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80141e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80141e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e8:	f281 86c8 	bge.w	8015f7c <iNemoEngine_API_Update+0x2984>
 80141ec:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80141f0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80141f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141f8:	f302 86df 	bgt.w	8016fba <iNemoEngine_API_Update+0x39c2>
 80141fc:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014200:	ee17 0a90 	vmov	r0, s15
 8014204:	f7ec f9aa 	bl	800055c <__aeabi_f2d>
 8014208:	ec41 0b10 	vmov	d0, r0, r1
 801420c:	f009 fbe0 	bl	801d9d0 <ceil>
 8014210:	ec51 0b10 	vmov	r0, r1, d0
 8014214:	f7ec fcf2 	bl	8000bfc <__aeabi_d2f>
 8014218:	ee08 0a10 	vmov	s16, r0
 801421c:	9b06      	ldr	r3, [sp, #24]
 801421e:	ed8d 8a45 	vstr	s16, [sp, #276]	; 0x114
 8014222:	f893 0791 	ldrb.w	r0, [r3, #1937]	; 0x791
 8014226:	1e43      	subs	r3, r0, #1
 8014228:	b25b      	sxtb	r3, r3
 801422a:	2b00      	cmp	r3, #0
 801422c:	dd18      	ble.n	8014260 <iNemoEngine_API_Update+0xc68>
 801422e:	9c06      	ldr	r4, [sp, #24]
 8014230:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014234:	1e81      	subs	r1, r0, #2
 8014236:	009b      	lsls	r3, r3, #2
 8014238:	b2c9      	uxtb	r1, r1
 801423a:	f504 62f0 	add.w	r2, r4, #1920	; 0x780
 801423e:	441a      	add	r2, r3
 8014240:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014244:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8014248:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 801424c:	4423      	add	r3, r4
 801424e:	681a      	ldr	r2, [r3, #0]
 8014250:	60da      	str	r2, [r3, #12]
 8014252:	685a      	ldr	r2, [r3, #4]
 8014254:	611a      	str	r2, [r3, #16]
 8014256:	689a      	ldr	r2, [r3, #8]
 8014258:	615a      	str	r2, [r3, #20]
 801425a:	3b0c      	subs	r3, #12
 801425c:	428b      	cmp	r3, r1
 801425e:	d1f6      	bne.n	801424e <iNemoEngine_API_Update+0xc56>
 8014260:	9c06      	ldr	r4, [sp, #24]
 8014262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014264:	f204 729c 	addw	r2, r4, #1948	; 0x79c
 8014268:	edc3 8a00 	vstr	s17, [r3]
 801426c:	922e      	str	r2, [sp, #184]	; 0xb8
 801426e:	ed82 ca00 	vstr	s24, [r2]
 8014272:	f504 62f4 	add.w	r2, r4, #1952	; 0x7a0
 8014276:	ed82 8a00 	vstr	s16, [r2]
 801427a:	f894 3790 	ldrb.w	r3, [r4, #1936]	; 0x790
 801427e:	922f      	str	r2, [sp, #188]	; 0xbc
 8014280:	3301      	adds	r3, #1
 8014282:	b2db      	uxtb	r3, r3
 8014284:	4298      	cmp	r0, r3
 8014286:	bf28      	it	cs
 8014288:	4618      	movcs	r0, r3
 801428a:	f884 0790 	strb.w	r0, [r4, #1936]	; 0x790
 801428e:	aa68      	add	r2, sp, #416	; 0x1a0
 8014290:	a93d      	add	r1, sp, #244	; 0xf4
 8014292:	a840      	add	r0, sp, #256	; 0x100
 8014294:	f7fd fe26 	bl	8011ee4 <getRotationMatrix>
 8014298:	4623      	mov	r3, r4
 801429a:	f504 7247 	add.w	r2, r4, #796	; 0x31c
 801429e:	9229      	str	r2, [sp, #164]	; 0xa4
 80142a0:	4614      	mov	r4, r2
 80142a2:	aeae      	add	r6, sp, #696	; 0x2b8
 80142a4:	f503 774f 	add.w	r7, r3, #828	; 0x33c
 80142a8:	6820      	ldr	r0, [r4, #0]
 80142aa:	6861      	ldr	r1, [r4, #4]
 80142ac:	68a2      	ldr	r2, [r4, #8]
 80142ae:	68e3      	ldr	r3, [r4, #12]
 80142b0:	4635      	mov	r5, r6
 80142b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80142b4:	3410      	adds	r4, #16
 80142b6:	42bc      	cmp	r4, r7
 80142b8:	462e      	mov	r6, r5
 80142ba:	d1f5      	bne.n	80142a8 <iNemoEngine_API_Update+0xcb0>
 80142bc:	6820      	ldr	r0, [r4, #0]
 80142be:	6028      	str	r0, [r5, #0]
 80142c0:	9b06      	ldr	r3, [sp, #24]
 80142c2:	edd3 7ac7 	vldr	s15, [r3, #796]	; 0x31c
 80142c6:	ed93 7ac8 	vldr	s14, [r3, #800]	; 0x320
 80142ca:	eef0 7ae7 	vabs.f32	s15, s15
 80142ce:	eeb0 7ac7 	vabs.f32	s14, s14
 80142d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80142d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142da:	f140 8543 	bpl.w	8014d64 <iNemoEngine_API_Update+0x176c>
 80142de:	2604      	movs	r6, #4
 80142e0:	2400      	movs	r4, #0
 80142e2:	eef0 7a47 	vmov.f32	s15, s14
 80142e6:	f04f 0c07 	mov.w	ip, #7
 80142ea:	f04f 0e06 	mov.w	lr, #6
 80142ee:	2103      	movs	r1, #3
 80142f0:	4630      	mov	r0, r6
 80142f2:	4623      	mov	r3, r4
 80142f4:	2701      	movs	r7, #1
 80142f6:	9a06      	ldr	r2, [sp, #24]
 80142f8:	ed92 7ac9 	vldr	s14, [r2, #804]	; 0x324
 80142fc:	eeb0 7ac7 	vabs.f32	s14, s14
 8014300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014308:	f340 8525 	ble.w	8014d56 <iNemoEngine_API_Update+0x175e>
 801430c:	f04f 0c08 	mov.w	ip, #8
 8014310:	2104      	movs	r1, #4
 8014312:	f04f 0906 	mov.w	r9, #6
 8014316:	f04f 0e07 	mov.w	lr, #7
 801431a:	f04f 0803 	mov.w	r8, #3
 801431e:	2605      	movs	r6, #5
 8014320:	4660      	mov	r0, ip
 8014322:	460c      	mov	r4, r1
 8014324:	2200      	movs	r2, #0
 8014326:	2301      	movs	r3, #1
 8014328:	2702      	movs	r7, #2
 801432a:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 801432c:	442c      	add	r4, r5
 801432e:	4428      	add	r0, r5
 8014330:	ed90 7a00 	vldr	s14, [r0]
 8014334:	edd4 6a00 	vldr	s13, [r4]
 8014338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801433c:	a8ae      	add	r0, sp, #696	; 0x2b8
 801433e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8014342:	acae      	add	r4, sp, #696	; 0x2b8
 8014344:	adae      	add	r5, sp, #696	; 0x2b8
 8014346:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801434a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 801434e:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8014352:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8014356:	edc0 7a00 	vstr	s15, [r0]
 801435a:	edd5 7a00 	vldr	s15, [r5]
 801435e:	ed94 7a00 	vldr	s14, [r4]
 8014362:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014366:	edc4 6a00 	vstr	s13, [r4]
 801436a:	ed90 6a00 	vldr	s12, [r0]
 801436e:	a8ae      	add	r0, sp, #696	; 0x2b8
 8014370:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8014374:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8014378:	ed90 7a00 	vldr	s14, [r0]
 801437c:	edd5 7a00 	vldr	s15, [r5]
 8014380:	eee6 7a47 	vfms.f32	s15, s12, s14
 8014384:	00b4      	lsls	r4, r6, #2
 8014386:	9403      	str	r4, [sp, #12]
 8014388:	ea4f 048c 	mov.w	r4, ip, lsl #2
 801438c:	edc5 7a00 	vstr	s15, [r5]
 8014390:	ed90 7a00 	vldr	s14, [r0]
 8014394:	a8ae      	add	r0, sp, #696	; 0x2b8
 8014396:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801439a:	edd0 7a00 	vldr	s15, [r0]
 801439e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80143a2:	4626      	mov	r6, r4
 80143a4:	acae      	add	r4, sp, #696	; 0x2b8
 80143a6:	eb04 048e 	add.w	r4, r4, lr, lsl #2
 80143aa:	edc0 7a00 	vstr	s15, [r0]
 80143ae:	a8ae      	add	r0, sp, #696	; 0x2b8
 80143b0:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80143b4:	edd0 5a00 	vldr	s11, [r0]
 80143b8:	ed94 7a00 	vldr	s14, [r4]
 80143bc:	eea6 7a65 	vfms.f32	s14, s12, s11
 80143c0:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80143c4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80143c8:	eef0 7ae7 	vabs.f32	s15, s15
 80143cc:	ed84 7a00 	vstr	s14, [r4]
 80143d0:	ed90 6a00 	vldr	s12, [r0]
 80143d4:	a8ae      	add	r0, sp, #696	; 0x2b8
 80143d6:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 80143da:	ed90 7a00 	vldr	s14, [r0]
 80143de:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80143e2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80143e6:	ea4f 048e 	mov.w	r4, lr, lsl #2
 80143ea:	ed80 7a00 	vstr	s14, [r0]
 80143ee:	ed95 7a00 	vldr	s14, [r5]
 80143f2:	eeb0 7ac7 	vabs.f32	s14, s14
 80143f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80143fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143fe:	ea4f 0581 	mov.w	r5, r1, lsl #2
 8014402:	dd0b      	ble.n	801441c <iNemoEngine_API_Update+0xe24>
 8014404:	4618      	mov	r0, r3
 8014406:	4645      	mov	r5, r8
 8014408:	4613      	mov	r3, r2
 801440a:	464c      	mov	r4, r9
 801440c:	46d4      	mov	ip, sl
 801440e:	4602      	mov	r2, r0
 8014410:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8014414:	ea4f 098e 	mov.w	r9, lr, lsl #2
 8014418:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 801441c:	a9ae      	add	r1, sp, #696	; 0x2b8
 801441e:	eb01 0008 	add.w	r0, r1, r8
 8014422:	440d      	add	r5, r1
 8014424:	ed90 7a00 	vldr	s14, [r0]
 8014428:	edd5 7a00 	vldr	s15, [r5]
 801442c:	ee87 4a27 	vdiv.f32	s8, s14, s15
 8014430:	440c      	add	r4, r1
 8014432:	eb01 0809 	add.w	r8, r1, r9
 8014436:	440e      	add	r6, r1
 8014438:	46b6      	mov	lr, r6
 801443a:	460e      	mov	r6, r1
 801443c:	9903      	ldr	r1, [sp, #12]
 801443e:	4431      	add	r1, r6
 8014440:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8014444:	ed80 4a00 	vstr	s8, [r0]
 8014448:	ed94 7a00 	vldr	s14, [r4]
 801444c:	edd8 7a00 	vldr	s15, [r8]
 8014450:	eee4 7a47 	vfms.f32	s15, s8, s14
 8014454:	a8ae      	add	r0, sp, #696	; 0x2b8
 8014456:	edc8 7a00 	vstr	s15, [r8]
 801445a:	edd1 2a00 	vldr	s5, [r1]
 801445e:	ed95 7a00 	vldr	s14, [r5]
 8014462:	ed94 1a00 	vldr	s2, [r4]
 8014466:	edde 1a00 	vldr	s3, [lr]
 801446a:	f50b 61b2 	add.w	r1, fp, #1424	; 0x590
 801446e:	4469      	add	r1, sp
 8014470:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8014474:	ee83 2a87 	vdiv.f32	s4, s7, s14
 8014478:	ed91 7a00 	vldr	s14, [r1]
 801447c:	a9ae      	add	r1, sp, #696	; 0x2b8
 801447e:	448b      	add	fp, r1
 8014480:	f50c 61b2 	add.w	r1, ip, #1424	; 0x590
 8014484:	eec3 0aa7 	vdiv.f32	s1, s7, s15
 8014488:	4469      	add	r1, sp
 801448a:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 801448e:	4484      	add	ip, r0
 8014490:	4450      	add	r0, sl
 8014492:	edd1 6a00 	vldr	s13, [r1]
 8014496:	eddb 7a00 	vldr	s15, [fp]
 801449a:	ed90 0a00 	vldr	s0, [r0]
 801449e:	f50a 61b2 	add.w	r1, sl, #1424	; 0x590
 80144a2:	4469      	add	r1, sp
 80144a4:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 80144a8:	ee83 3aa7 	vdiv.f32	s6, s7, s15
 80144ac:	edd1 4a00 	vldr	s9, [r1]
 80144b0:	eddc 7a00 	vldr	s15, [ip]
 80144b4:	eee0 4a47 	vfms.f32	s9, s0, s14
 80144b8:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 80144bc:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 80144c0:	eee7 6ac7 	vfms.f32	s13, s15, s14
 80144c4:	4601      	mov	r1, r0
 80144c6:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 80144ca:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 80144ce:	eee4 4a66 	vfms.f32	s9, s8, s13
 80144d2:	ed90 5a00 	vldr	s10, [r0]
 80144d6:	ee60 4aa4 	vmul.f32	s9, s1, s9
 80144da:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 80144de:	eee1 6a64 	vfms.f32	s13, s2, s9
 80144e2:	eea1 7ae4 	vfms.f32	s14, s3, s9
 80144e6:	ee62 8a26 	vmul.f32	s17, s4, s13
 80144ea:	edd1 6a00 	vldr	s13, [r1]
 80144ee:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 80144f2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80144f6:	460b      	mov	r3, r1
 80144f8:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80144fc:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 8014500:	edd1 5a00 	vldr	s11, [r1]
 8014504:	ed93 8a00 	vldr	s16, [r3]
 8014508:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801450c:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 8014510:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 8014514:	eee7 5ac5 	vfms.f32	s11, s15, s10
 8014518:	eea6 8ae7 	vfms.f32	s16, s13, s15
 801451c:	ed92 6a00 	vldr	s12, [r2]
 8014520:	edd3 7a00 	vldr	s15, [r3]
 8014524:	eea0 6a45 	vfms.f32	s12, s0, s10
 8014528:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801452c:	eea4 6a65 	vfms.f32	s12, s8, s11
 8014530:	eee4 7a48 	vfms.f32	s15, s8, s16
 8014534:	ee20 6a86 	vmul.f32	s12, s1, s12
 8014538:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801453c:	eee1 5a46 	vfms.f32	s11, s2, s12
 8014540:	eea7 8ac1 	vfms.f32	s16, s15, s2
 8014544:	eea1 5ac6 	vfms.f32	s10, s3, s12
 8014548:	eee7 6ae1 	vfms.f32	s13, s15, s3
 801454c:	ee62 5a25 	vmul.f32	s11, s4, s11
 8014550:	ee28 2a02 	vmul.f32	s4, s16, s4
 8014554:	eea2 7ae8 	vfms.f32	s14, s5, s17
 8014558:	eee2 6a62 	vfms.f32	s13, s4, s5
 801455c:	eea2 5ae5 	vfms.f32	s10, s5, s11
 8014560:	ee23 7a07 	vmul.f32	s14, s6, s14
 8014564:	ee23 5a05 	vmul.f32	s10, s6, s10
 8014568:	ee26 3a83 	vmul.f32	s6, s13, s6
 801456c:	ee77 6aa5 	vadd.f32	s13, s15, s11
 8014570:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 8014574:	ee77 6a66 	vsub.f32	s13, s14, s13
 8014578:	ee36 6a42 	vsub.f32	s12, s12, s4
 801457c:	eef4 6ac4 	vcmpe.f32	s13, s8
 8014580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014584:	bfc8      	it	gt
 8014586:	ee76 6aa3 	vaddgt.f32	s13, s13, s7
 801458a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801458e:	bfcc      	ite	gt
 8014590:	eeb1 4ae6 	vsqrtgt.f32	s8, s13
 8014594:	ed9f 4ad7 	vldrle	s8, [pc, #860]	; 80148f4 <iNemoEngine_API_Update+0x12fc>
 8014598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801459c:	f100 8411 	bmi.w	8014dc2 <iNemoEngine_API_Update+0x17ca>
 80145a0:	bfd8      	it	le
 80145a2:	ee24 4a06 	vmulle.f32	s8, s8, s12
 80145a6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80145aa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80145ae:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80145b2:	ee24 6a06 	vmul.f32	s12, s8, s12
 80145b6:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 80145ba:	eef4 6ac4 	vcmpe.f32	s13, s8
 80145be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145c2:	bf88      	it	hi
 80145c4:	eeb7 4a00 	vmovhi.f32	s8, #112	; 0x3f800000  1.0
 80145c8:	ee33 3a64 	vsub.f32	s6, s6, s9
 80145cc:	bf88      	it	hi
 80145ce:	ee36 4a84 	vaddhi.f32	s8, s13, s8
 80145d2:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 80145d6:	bf8c      	ite	hi
 80145d8:	eef1 6ac4 	vsqrthi.f32	s13, s8
 80145dc:	eddf 6ac5 	vldrls	s13, [pc, #788]	; 80148f4 <iNemoEngine_API_Update+0x12fc>
 80145e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145e4:	f100 83ea 	bmi.w	8014dbc <iNemoEngine_API_Update+0x17c4>
 80145e8:	bfd8      	it	le
 80145ea:	ee66 6a83 	vmulle.f32	s13, s13, s6
 80145ee:	ee37 7a25 	vadd.f32	s14, s14, s11
 80145f2:	ee38 5ac5 	vsub.f32	s10, s17, s10
 80145f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80145fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80145fe:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014602:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014606:	eef4 7ac7 	vcmpe.f32	s15, s14
 801460a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801460e:	bf84      	itt	hi
 8014610:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 8014614:	ee37 7a87 	vaddhi.f32	s14, s15, s14
 8014618:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801461c:	bf8c      	ite	hi
 801461e:	eef1 7ac7 	vsqrthi.f32	s15, s14
 8014622:	eddf 7ab4 	vldrls	s15, [pc, #720]	; 80148f4 <iNemoEngine_API_Update+0x12fc>
 8014626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801462a:	f100 83ce 	bmi.w	8014dca <iNemoEngine_API_Update+0x17d2>
 801462e:	bfd8      	it	le
 8014630:	ee67 7a85 	vmulle.f32	s15, s15, s10
 8014634:	9b06      	ldr	r3, [sp, #24]
 8014636:	f893 2341 	ldrb.w	r2, [r3, #833]	; 0x341
 801463a:	1e53      	subs	r3, r2, #1
 801463c:	b25b      	sxtb	r3, r3
 801463e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014642:	2b00      	cmp	r3, #0
 8014644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014648:	dd1d      	ble.n	8014686 <iNemoEngine_API_Update+0x108e>
 801464a:	9806      	ldr	r0, [sp, #24]
 801464c:	3a02      	subs	r2, #2
 801464e:	b2d1      	uxtb	r1, r2
 8014650:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014654:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8014658:	f1a0 010c 	sub.w	r1, r0, #12
 801465c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014660:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8014664:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8014668:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 801466c:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 8014670:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8014674:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 8014678:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 801467c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 8014680:	3b0c      	subs	r3, #12
 8014682:	428b      	cmp	r3, r1
 8014684:	d1f0      	bne.n	8014668 <iNemoEngine_API_Update+0x1070>
 8014686:	ed9d 7a07 	vldr	s14, [sp, #28]
 801468a:	9b06      	ldr	r3, [sp, #24]
 801468c:	9310      	str	r3, [sp, #64]	; 0x40
 801468e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014692:	ee85 7a87 	vdiv.f32	s14, s11, s14
 8014696:	aa3d      	add	r2, sp, #244	; 0xf4
 8014698:	922b      	str	r2, [sp, #172]	; 0xac
 801469a:	9212      	str	r2, [sp, #72]	; 0x48
 801469c:	f50d 7be2 	add.w	fp, sp, #452	; 0x1c4
 80146a0:	f50d 7af4 	add.w	sl, sp, #488	; 0x1e8
 80146a4:	ee36 6a06 	vadd.f32	s12, s12, s12
 80146a8:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80146ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80146b0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80146b4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80146b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80146bc:	ed83 6ad2 	vstr	s12, [r3, #840]	; 0x348
 80146c0:	edc3 6ad3 	vstr	s13, [r3, #844]	; 0x34c
 80146c4:	edc3 7ad4 	vstr	s15, [r3, #848]	; 0x350
 80146c8:	2300      	movs	r3, #0
 80146ca:	930e      	str	r3, [sp, #56]	; 0x38
 80146cc:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 80146d0:	f1c3 0301 	rsb	r3, r3, #1
 80146d4:	9328      	str	r3, [sp, #160]	; 0xa0
 80146d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80146da:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80146dc:	3301      	adds	r3, #1
 80146de:	930e      	str	r3, [sp, #56]	; 0x38
 80146e0:	a9ae      	add	r1, sp, #696	; 0x2b8
 80146e2:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 80146e6:	18e0      	adds	r0, r4, r3
 80146e8:	f803 0f01 	strb.w	r0, [r3, #1]!
 80146ec:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 80146f0:	f841 0b04 	str.w	r0, [r1], #4
 80146f4:	f20d 10e1 	addw	r0, sp, #481	; 0x1e1
 80146f8:	4283      	cmp	r3, r0
 80146fa:	f102 020c 	add.w	r2, r2, #12
 80146fe:	d1f2      	bne.n	80146e6 <iNemoEngine_API_Update+0x10ee>
 8014700:	ed9d 7aae 	vldr	s14, [sp, #696]	; 0x2b8
 8014704:	eddd 7aaf 	vldr	s15, [sp, #700]	; 0x2bc
 8014708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801470c:	ed9d 7ab0 	vldr	s14, [sp, #704]	; 0x2c0
 8014710:	eddd 7ab1 	vldr	s15, [sp, #708]	; 0x2c4
 8014714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014718:	bf88      	it	hi
 801471a:	f44f 7381 	movhi.w	r3, #258	; 0x102
 801471e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014722:	ed9d 7ab2 	vldr	s14, [sp, #712]	; 0x2c8
 8014726:	eddd 7ab3 	vldr	s15, [sp, #716]	; 0x2cc
 801472a:	bf88      	it	hi
 801472c:	f8ab 3000 	strhhi.w	r3, [fp]
 8014730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014734:	bf88      	it	hi
 8014736:	f44f 7341 	movhi.w	r3, #772	; 0x304
 801473a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801473e:	ed9d 7ab4 	vldr	s14, [sp, #720]	; 0x2d0
 8014742:	eddd 7ab5 	vldr	s15, [sp, #724]	; 0x2d4
 8014746:	bf88      	it	hi
 8014748:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 801474c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014750:	bf88      	it	hi
 8014752:	f240 5306 	movwhi	r3, #1286	; 0x506
 8014756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801475a:	ed9d 7ab6 	vldr	s14, [sp, #728]	; 0x2d8
 801475e:	eddd 7ab7 	vldr	s15, [sp, #732]	; 0x2dc
 8014762:	bf88      	it	hi
 8014764:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 8014768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801476c:	bf88      	it	hi
 801476e:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 8014772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014776:	ed9d 7ab8 	vldr	s14, [sp, #736]	; 0x2e0
 801477a:	eddd 7ab9 	vldr	s15, [sp, #740]	; 0x2e4
 801477e:	bf88      	it	hi
 8014780:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 8014784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014788:	bf88      	it	hi
 801478a:	f640 130a 	movwhi	r3, #2314	; 0x90a
 801478e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014792:	ed9d 7aba 	vldr	s14, [sp, #744]	; 0x2e8
 8014796:	eddd 7abb 	vldr	s15, [sp, #748]	; 0x2ec
 801479a:	bf88      	it	hi
 801479c:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 80147a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147a4:	bf88      	it	hi
 80147a6:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 80147aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147ae:	ed9d 7abc 	vldr	s14, [sp, #752]	; 0x2f0
 80147b2:	eddd 7abd 	vldr	s15, [sp, #756]	; 0x2f4
 80147b6:	bf88      	it	hi
 80147b8:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 80147bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147c0:	bf88      	it	hi
 80147c2:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 80147c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147ca:	ed9d 7abe 	vldr	s14, [sp, #760]	; 0x2f8
 80147ce:	eddd 7abf 	vldr	s15, [sp, #764]	; 0x2fc
 80147d2:	bf88      	it	hi
 80147d4:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 80147d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147dc:	bf88      	it	hi
 80147de:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 80147e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147e6:	ed9d 7ac0 	vldr	s14, [sp, #768]	; 0x300
 80147ea:	eddd 7ac1 	vldr	s15, [sp, #772]	; 0x304
 80147ee:	bf88      	it	hi
 80147f0:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 80147f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f8:	bf88      	it	hi
 80147fa:	f241 1312 	movwhi	r3, #4370	; 0x1112
 80147fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014802:	ed9d 7ac2 	vldr	s14, [sp, #776]	; 0x308
 8014806:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 801480a:	bf88      	it	hi
 801480c:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 8014810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014814:	bf88      	it	hi
 8014816:	f241 3314 	movwhi	r3, #4884	; 0x1314
 801481a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801481e:	bf88      	it	hi
 8014820:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 8014824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014828:	bf84      	itt	hi
 801482a:	f241 5316 	movwhi	r3, #5398	; 0x1516
 801482e:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 8014832:	ed9d 7ac4 	vldr	s14, [sp, #784]	; 0x310
 8014836:	eddd 7ac5 	vldr	s15, [sp, #788]	; 0x314
 801483a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801483e:	ed9d 7ac6 	vldr	s14, [sp, #792]	; 0x318
 8014842:	eddd 7ac7 	vldr	s15, [sp, #796]	; 0x31c
 8014846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801484a:	bf88      	it	hi
 801484c:	f241 7318 	movwhi	r3, #5912	; 0x1718
 8014850:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014854:	ed9d 7ac8 	vldr	s14, [sp, #800]	; 0x320
 8014858:	eddd 7ac9 	vldr	s15, [sp, #804]	; 0x324
 801485c:	bf88      	it	hi
 801485e:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 8014862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014866:	bf88      	it	hi
 8014868:	f641 131a 	movwhi	r3, #6426	; 0x191a
 801486c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014870:	ed9d 7aca 	vldr	s14, [sp, #808]	; 0x328
 8014874:	eddd 7acb 	vldr	s15, [sp, #812]	; 0x32c
 8014878:	bf88      	it	hi
 801487a:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 801487e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014882:	bf88      	it	hi
 8014884:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 8014888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801488c:	bf88      	it	hi
 801488e:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 8014892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014896:	bf84      	itt	hi
 8014898:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 801489c:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 80148a0:	221e      	movs	r2, #30
 80148a2:	2101      	movs	r1, #1
 80148a4:	4650      	mov	r0, sl
 80148a6:	f005 faf3 	bl	8019e90 <memset>
 80148aa:	2304      	movs	r3, #4
 80148ac:	930c      	str	r3, [sp, #48]	; 0x30
 80148ae:	2302      	movs	r3, #2
 80148b0:	9307      	str	r3, [sp, #28]
 80148b2:	9a07      	ldr	r2, [sp, #28]
 80148b4:	920a      	str	r2, [sp, #40]	; 0x28
 80148b6:	4613      	mov	r3, r2
 80148b8:	0052      	lsls	r2, r2, #1
 80148ba:	9207      	str	r2, [sp, #28]
 80148bc:	f103 0901 	add.w	r9, r3, #1
 80148c0:	f04f 0801 	mov.w	r8, #1
 80148c4:	9b07      	ldr	r3, [sp, #28]
 80148c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80148ca:	4443      	add	r3, r8
 80148cc:	2b1f      	cmp	r3, #31
 80148ce:	bfa8      	it	ge
 80148d0:	231f      	movge	r3, #31
 80148d2:	4642      	mov	r2, r8
 80148d4:	1a9f      	subs	r7, r3, r2
 80148d6:	2f00      	cmp	r7, #0
 80148d8:	4698      	mov	r8, r3
 80148da:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 80148de:	dd54      	ble.n	801498a <iNemoEngine_API_Update+0x1392>
 80148e0:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80148e4:	9304      	str	r3, [sp, #16]
 80148e6:	f1a8 0302 	sub.w	r3, r8, #2
 80148ea:	4616      	mov	r6, r2
 80148ec:	2400      	movs	r4, #0
 80148ee:	9305      	str	r3, [sp, #20]
 80148f0:	e00f      	b.n	8014912 <iNemoEngine_API_Update+0x131a>
 80148f2:	bf00      	nop
 80148f4:	00000000 	.word	0x00000000
 80148f8:	3f333333 	.word	0x3f333333
 80148fc:	3f4ccccd 	.word	0x3f4ccccd
 8014900:	45f0      	cmp	r8, lr
 8014902:	f80a 2004 	strb.w	r2, [sl, r4]
 8014906:	f000 81f6 	beq.w	8014cf6 <iNemoEngine_API_Update+0x16fe>
 801490a:	4665      	mov	r5, ip
 801490c:	3401      	adds	r4, #1
 801490e:	42a7      	cmp	r7, r4
 8014910:	dd34      	ble.n	801497c <iNemoEngine_API_Update+0x1384>
 8014912:	1e71      	subs	r1, r6, #1
 8014914:	a8ae      	add	r0, sp, #696	; 0x2b8
 8014916:	f91b 3001 	ldrsb.w	r3, [fp, r1]
 801491a:	f91b 2005 	ldrsb.w	r2, [fp, r5]
 801491e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8014922:	ed10 7a01 	vldr	s14, [r0, #-4]
 8014926:	a8ae      	add	r0, sp, #696	; 0x2b8
 8014928:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801492c:	ed50 7a01 	vldr	s15, [r0, #-4]
 8014930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014938:	f105 0e02 	add.w	lr, r5, #2
 801493c:	f105 0c01 	add.w	ip, r5, #1
 8014940:	d8de      	bhi.n	8014900 <iNemoEngine_API_Update+0x1308>
 8014942:	3601      	adds	r6, #1
 8014944:	454e      	cmp	r6, r9
 8014946:	f80a 3004 	strb.w	r3, [sl, r4]
 801494a:	d1df      	bne.n	801490c <iNemoEngine_API_Update+0x1314>
 801494c:	1c6b      	adds	r3, r5, #1
 801494e:	9a04      	ldr	r2, [sp, #16]
 8014950:	9308      	str	r3, [sp, #32]
 8014952:	1c60      	adds	r0, r4, #1
 8014954:	4598      	cmp	r8, r3
 8014956:	eba2 0205 	sub.w	r2, r2, r5
 801495a:	4450      	add	r0, sl
 801495c:	ddd6      	ble.n	801490c <iNemoEngine_API_Update+0x1314>
 801495e:	eb0b 0105 	add.w	r1, fp, r5
 8014962:	f005 fb23 	bl	8019fac <memcpy>
 8014966:	9a04      	ldr	r2, [sp, #16]
 8014968:	9b05      	ldr	r3, [sp, #20]
 801496a:	4414      	add	r4, r2
 801496c:	1b64      	subs	r4, r4, r5
 801496e:	1b5a      	subs	r2, r3, r5
 8014970:	3401      	adds	r4, #1
 8014972:	9b08      	ldr	r3, [sp, #32]
 8014974:	42a7      	cmp	r7, r4
 8014976:	eb02 0503 	add.w	r5, r2, r3
 801497a:	dcca      	bgt.n	8014912 <iNemoEngine_API_Update+0x131a>
 801497c:	9b03      	ldr	r3, [sp, #12]
 801497e:	1e58      	subs	r0, r3, #1
 8014980:	463a      	mov	r2, r7
 8014982:	4458      	add	r0, fp
 8014984:	4651      	mov	r1, sl
 8014986:	f005 fb11 	bl	8019fac <memcpy>
 801498a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801498c:	eb08 0903 	add.w	r9, r8, r3
 8014990:	f1b9 0f1e 	cmp.w	r9, #30
 8014994:	dd96      	ble.n	80148c4 <iNemoEngine_API_Update+0x12cc>
 8014996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014998:	3b01      	subs	r3, #1
 801499a:	930c      	str	r3, [sp, #48]	; 0x30
 801499c:	d189      	bne.n	80148b2 <iNemoEngine_API_Update+0x12ba>
 801499e:	f99b 300e 	ldrsb.w	r3, [fp, #14]
 80149a2:	aaae      	add	r2, sp, #696	; 0x2b8
 80149a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80149a8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80149ac:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 80149b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80149b4:	ed13 7a01 	vldr	s14, [r3, #-4]
 80149b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80149bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149c0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80149c4:	bf4c      	ite	mi
 80149c6:	2201      	movmi	r2, #1
 80149c8:	2200      	movpl	r2, #0
 80149ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ce:	bf4c      	ite	mi
 80149d0:	2301      	movmi	r3, #1
 80149d2:	2300      	movpl	r3, #0
 80149d4:	429a      	cmp	r2, r3
 80149d6:	f000 819d 	beq.w	8014d14 <iNemoEngine_API_Update+0x171c>
 80149da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80149de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80149e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80149e8:	ece3 7a01 	vstmia	r3!, {s15}
 80149ec:	9312      	str	r3, [sp, #72]	; 0x48
 80149ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80149f0:	3304      	adds	r3, #4
 80149f2:	9310      	str	r3, [sp, #64]	; 0x40
 80149f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149f6:	2b03      	cmp	r3, #3
 80149f8:	f47f ae6d 	bne.w	80146d6 <iNemoEngine_API_Update+0x10de>
 80149fc:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 8014a00:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 8014a04:	eddd 6a16 	vldr	s13, [sp, #88]	; 0x58
 8014a08:	ed1f 1a45 	vldr	s2, [pc, #-276]	; 80148f8 <iNemoEngine_API_Update+0x1300>
 8014a0c:	9a06      	ldr	r2, [sp, #24]
 8014a0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014a12:	ee2d 1a81 	vmul.f32	s2, s27, s2
 8014a16:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014a1a:	f892 3900 	ldrb.w	r3, [r2, #2304]	; 0x900
 8014a1e:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 8014a22:	eeb0 8a67 	vmov.f32	s16, s15
 8014a26:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 8014a2a:	eea7 8aa7 	vfma.f32	s16, s15, s15
 8014a2e:	f502 6810 	add.w	r8, r2, #2304	; 0x900
 8014a32:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8014a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014a3a:	eeb1 6ac8 	vsqrt.f32	s12, s16
 8014a3e:	eec7 5a0d 	vdiv.f32	s11, s14, s26
 8014a42:	ee2b 7a27 	vmul.f32	s14, s22, s15
 8014a46:	ee6d 7aa7 	vmul.f32	s15, s27, s15
 8014a4a:	eec7 6a26 	vdiv.f32	s13, s14, s13
 8014a4e:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 8014a52:	edcd 5a52 	vstr	s11, [sp, #328]	; 0x148
 8014a56:	ee87 5a87 	vdiv.f32	s10, s15, s14
 8014a5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014a5e:	eeb0 7a41 	vmov.f32	s14, s2
 8014a62:	eeab 7a27 	vfma.f32	s14, s22, s15
 8014a66:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014a6a:	ed5f 7a5c 	vldr	s15, [pc, #-368]	; 80148fc <iNemoEngine_API_Update+0x1304>
 8014a6e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a76:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 8014a7a:	ed8d 5a54 	vstr	s10, [sp, #336]	; 0x150
 8014a7e:	ed8d 6a55 	vstr	s12, [sp, #340]	; 0x154
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	f040 8159 	bne.w	8014d3a <iNemoEngine_API_Update+0x1742>
 8014a88:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8014a8c:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 8014a90:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8014a94:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8014a98:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8014a9c:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 8014aa0:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8014aa4:	f8c8 3020 	str.w	r3, [r8, #32]
 8014aa8:	edc8 7a07 	vstr	s15, [r8, #28]
 8014aac:	f602 130c 	addw	r3, r2, #2316	; 0x90c
 8014ab0:	edd3 8a00 	vldr	s17, [r3]
 8014ab4:	edd2 2a02 	vldr	s5, [r2, #8]
 8014ab8:	f602 1324 	addw	r3, r2, #2340	; 0x924
 8014abc:	edd3 7a00 	vldr	s15, [r3]
 8014ac0:	f602 1308 	addw	r3, r2, #2312	; 0x908
 8014ac4:	ed93 7a00 	vldr	s14, [r3]
 8014ac8:	f502 6312 	add.w	r3, r2, #2336	; 0x920
 8014acc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014ad0:	edd3 7a00 	vldr	s15, [r3]
 8014ad4:	f502 6311 	add.w	r3, r2, #2320	; 0x910
 8014ad8:	eee7 8a27 	vfma.f32	s17, s14, s15
 8014adc:	ed93 7a00 	vldr	s14, [r3]
 8014ae0:	f602 1328 	addw	r3, r2, #2344	; 0x928
 8014ae4:	edd3 7a00 	vldr	s15, [r3]
 8014ae8:	f602 1314 	addw	r3, r2, #2324	; 0x914
 8014aec:	eee7 8a27 	vfma.f32	s17, s14, s15
 8014af0:	ed93 7a00 	vldr	s14, [r3]
 8014af4:	f602 132c 	addw	r3, r2, #2348	; 0x92c
 8014af8:	edd3 7a00 	vldr	s15, [r3]
 8014afc:	f602 1304 	addw	r3, r2, #2308	; 0x904
 8014b00:	eee7 8a27 	vfma.f32	s17, s14, s15
 8014b04:	ed93 7a00 	vldr	s14, [r3]
 8014b08:	f602 131c 	addw	r3, r2, #2332	; 0x91c
 8014b0c:	edd3 7a00 	vldr	s15, [r3]
 8014b10:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8014b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b18:	eee7 8a27 	vfma.f32	s17, s14, s15
 8014b1c:	f340 8158 	ble.w	8014dd0 <iNemoEngine_API_Update+0x17d8>
 8014b20:	edd2 7a30 	vldr	s15, [r2, #192]	; 0xc0
 8014b24:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b2c:	f101 8112 	bmi.w	8015d54 <iNemoEngine_API_Update+0x275c>
 8014b30:	ed92 fa31 	vldr	s30, [r2, #196]	; 0xc4
 8014b34:	4613      	mov	r3, r2
 8014b36:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 8014b3a:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b42:	f142 8186 	bpl.w	8016e52 <iNemoEngine_API_Update+0x385a>
 8014b46:	edd3 4a62 	vldr	s9, [r3, #392]	; 0x188
 8014b4a:	eef4 4ae8 	vcmpe.f32	s9, s17
 8014b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b52:	f342 821e 	ble.w	8016f92 <iNemoEngine_API_Update+0x399a>
 8014b56:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 8014b5a:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8014b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b62:	f302 8555 	bgt.w	8017610 <iNemoEngine_API_Update+0x4018>
 8014b66:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8014b6a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b72:	f142 8565 	bpl.w	8017640 <iNemoEngine_API_Update+0x4048>
 8014b76:	edd3 3a4d 	vldr	s7, [r3, #308]	; 0x134
 8014b7a:	ed93 4a4f 	vldr	s8, [r3, #316]	; 0x13c
 8014b7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b82:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014b86:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8014b8a:	ee24 7a07 	vmul.f32	s14, s8, s14
 8014b8e:	ee87 ca27 	vdiv.f32	s24, s14, s15
 8014b92:	ee3c ca23 	vadd.f32	s24, s24, s7
 8014b96:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8014b9a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ba2:	f2c2 8566 	blt.w	8017672 <iNemoEngine_API_Update+0x407a>
 8014ba6:	9b06      	ldr	r3, [sp, #24]
 8014ba8:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8014bac:	eef4 8ac7 	vcmpe.f32	s17, s14
 8014bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bb4:	f142 87a3 	bpl.w	8017afe <iNemoEngine_API_Update+0x4506>
 8014bb8:	edd3 3a51 	vldr	s7, [r3, #324]	; 0x144
 8014bbc:	ed93 4a53 	vldr	s8, [r3, #332]	; 0x14c
 8014bc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014bc4:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014bc8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014bcc:	ee64 7a27 	vmul.f32	s15, s8, s15
 8014bd0:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8014bd4:	ee3c ca23 	vadd.f32	s24, s24, s7
 8014bd8:	9b06      	ldr	r3, [sp, #24]
 8014bda:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8014bde:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014be6:	f2c2 8566 	blt.w	80176b6 <iNemoEngine_API_Update+0x40be>
 8014bea:	9b06      	ldr	r3, [sp, #24]
 8014bec:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 8014bf0:	eef4 8ac7 	vcmpe.f32	s17, s14
 8014bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bf8:	f142 87dc 	bpl.w	8017bb4 <iNemoEngine_API_Update+0x45bc>
 8014bfc:	edd3 3a55 	vldr	s7, [r3, #340]	; 0x154
 8014c00:	ed93 4a57 	vldr	s8, [r3, #348]	; 0x15c
 8014c04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014c08:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014c0c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014c10:	ee64 7a27 	vmul.f32	s15, s8, s15
 8014c14:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8014c18:	ee3c ca23 	vadd.f32	s24, s24, s7
 8014c1c:	9b06      	ldr	r3, [sp, #24]
 8014c1e:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8014c22:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c2a:	f2c2 8566 	blt.w	80176fa <iNemoEngine_API_Update+0x4102>
 8014c2e:	9b06      	ldr	r3, [sp, #24]
 8014c30:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8014c34:	eef4 8ac7 	vcmpe.f32	s17, s14
 8014c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c3c:	f142 87c5 	bpl.w	8017bca <iNemoEngine_API_Update+0x45d2>
 8014c40:	edd3 3a59 	vldr	s7, [r3, #356]	; 0x164
 8014c44:	ed93 4a5b 	vldr	s8, [r3, #364]	; 0x16c
 8014c48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014c4c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014c50:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014c54:	ee64 7a27 	vmul.f32	s15, s8, s15
 8014c58:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8014c5c:	ee3c ca23 	vadd.f32	s24, s24, s7
 8014c60:	9b06      	ldr	r3, [sp, #24]
 8014c62:	edd3 7a5c 	vldr	s15, [r3, #368]	; 0x170
 8014c66:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c6e:	f2c2 8566 	blt.w	801773e <iNemoEngine_API_Update+0x4146>
 8014c72:	9b06      	ldr	r3, [sp, #24]
 8014c74:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 8014c78:	eef4 8ac7 	vcmpe.f32	s17, s14
 8014c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c80:	f142 8795 	bpl.w	8017bae <iNemoEngine_API_Update+0x45b6>
 8014c84:	edd3 3a5d 	vldr	s7, [r3, #372]	; 0x174
 8014c88:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 8014c8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014c90:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014c94:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014c98:	ee64 7a27 	vmul.f32	s15, s8, s15
 8014c9c:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8014ca0:	ee3c ca23 	vadd.f32	s24, s24, s7
 8014ca4:	9b06      	ldr	r3, [sp, #24]
 8014ca6:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 8014caa:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cb2:	f2c0 8092 	blt.w	8014dda <iNemoEngine_API_Update+0x17e2>
 8014cb6:	9b06      	ldr	r3, [sp, #24]
 8014cb8:	ed93 4a61 	vldr	s8, [r3, #388]	; 0x184
 8014cbc:	ed93 7a63 	vldr	s14, [r3, #396]	; 0x18c
 8014cc0:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8014cc4:	ee37 7a44 	vsub.f32	s14, s14, s8
 8014cc8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014cd0:	ee87 caa4 	vdiv.f32	s24, s15, s9
 8014cd4:	ee3c ca04 	vadd.f32	s24, s24, s8
 8014cd8:	e07f      	b.n	8014dda <iNemoEngine_API_Update+0x17e2>
 8014cda:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8015024 <iNemoEngine_API_Update+0x1a2c>
 8014cde:	eddf cad2 	vldr	s25, [pc, #840]	; 8015028 <iNemoEngine_API_Update+0x1a30>
 8014ce2:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8014ce6:	eddf 7ad1 	vldr	s15, [pc, #836]	; 801502c <iNemoEngine_API_Update+0x1a34>
 8014cea:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 8014cee:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014cf2:	f7ff b824 	b.w	8013d3e <iNemoEngine_API_Update+0x746>
 8014cf6:	1c60      	adds	r0, r4, #1
 8014cf8:	454e      	cmp	r6, r9
 8014cfa:	4459      	add	r1, fp
 8014cfc:	4450      	add	r0, sl
 8014cfe:	4665      	mov	r5, ip
 8014d00:	f6bf ae04 	bge.w	801490c <iNemoEngine_API_Update+0x1314>
 8014d04:	eba9 0206 	sub.w	r2, r9, r6
 8014d08:	444c      	add	r4, r9
 8014d0a:	1ba4      	subs	r4, r4, r6
 8014d0c:	f005 f94e 	bl	8019fac <memcpy>
 8014d10:	464e      	mov	r6, r9
 8014d12:	e5fb      	b.n	801490c <iNemoEngine_API_Update+0x1314>
 8014d14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d1c:	f43f ae5d 	beq.w	80149da <iNemoEngine_API_Update+0x13e2>
 8014d20:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d28:	f43f ae57 	beq.w	80149da <iNemoEngine_API_Update+0x13e2>
 8014d2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014d30:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014d34:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014d38:	e655      	b.n	80149e6 <iNemoEngine_API_Update+0x13ee>
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	f882 3900 	strb.w	r3, [r2, #2304]	; 0x900
 8014d40:	edc8 7a07 	vstr	s15, [r8, #28]
 8014d44:	edc8 7a08 	vstr	s15, [r8, #32]
 8014d48:	edc8 7a09 	vstr	s15, [r8, #36]	; 0x24
 8014d4c:	edc8 7a0a 	vstr	s15, [r8, #40]	; 0x28
 8014d50:	edc8 7a0b 	vstr	s15, [r8, #44]	; 0x2c
 8014d54:	e6aa      	b.n	8014aac <iNemoEngine_API_Update+0x14b4>
 8014d56:	f04f 0908 	mov.w	r9, #8
 8014d5a:	f04f 0805 	mov.w	r8, #5
 8014d5e:	2202      	movs	r2, #2
 8014d60:	f7ff bae3 	b.w	801432a <iNemoEngine_API_Update+0xd32>
 8014d64:	2104      	movs	r1, #4
 8014d66:	2000      	movs	r0, #0
 8014d68:	f04f 0c06 	mov.w	ip, #6
 8014d6c:	f04f 0e07 	mov.w	lr, #7
 8014d70:	2603      	movs	r6, #3
 8014d72:	460c      	mov	r4, r1
 8014d74:	2301      	movs	r3, #1
 8014d76:	4607      	mov	r7, r0
 8014d78:	f7ff babd 	b.w	80142f6 <iNemoEngine_API_Update+0xcfe>
 8014d7c:	ed9f 5aac 	vldr	s10, [pc, #688]	; 8015030 <iNemoEngine_API_Update+0x1a38>
 8014d80:	ed9f 8aac 	vldr	s16, [pc, #688]	; 8015034 <iNemoEngine_API_Update+0x1a3c>
 8014d84:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8015064 <iNemoEngine_API_Update+0x1a6c>
 8014d88:	eddf 6aab 	vldr	s13, [pc, #684]	; 8015038 <iNemoEngine_API_Update+0x1a40>
 8014d8c:	ed84 5a00 	vstr	s10, [r4]
 8014d90:	eef0 7a45 	vmov.f32	s15, s10
 8014d94:	eeb0 6a45 	vmov.f32	s12, s10
 8014d98:	eddf caa8 	vldr	s25, [pc, #672]	; 801503c <iNemoEngine_API_Update+0x1a44>
 8014d9c:	ed9f 9aa8 	vldr	s18, [pc, #672]	; 8015040 <iNemoEngine_API_Update+0x1a48>
 8014da0:	ed84 8a01 	vstr	s16, [r4, #4]
 8014da4:	eef0 5a66 	vmov.f32	s11, s13
 8014da8:	ed84 8a02 	vstr	s16, [r4, #8]
 8014dac:	eeb0 5a47 	vmov.f32	s10, s14
 8014db0:	eef0 8a67 	vmov.f32	s17, s15
 8014db4:	eeb0 ca48 	vmov.f32	s24, s16
 8014db8:	f7fe bed8 	b.w	8013b6c <iNemoEngine_API_Update+0x574>
 8014dbc:	eef1 6a66 	vneg.f32	s13, s13
 8014dc0:	e415      	b.n	80145ee <iNemoEngine_API_Update+0xff6>
 8014dc2:	eeb1 4a44 	vneg.f32	s8, s8
 8014dc6:	f7ff bbee 	b.w	80145a6 <iNemoEngine_API_Update+0xfae>
 8014dca:	eef1 7a67 	vneg.f32	s15, s15
 8014dce:	e431      	b.n	8014634 <iNemoEngine_API_Update+0x103c>
 8014dd0:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8014dd4:	eeb0 fa4c 	vmov.f32	s30, s24
 8014dd8:	4613      	mov	r3, r2
 8014dda:	edd3 fa74 	vldr	s31, [r3, #464]	; 0x1d0
 8014dde:	ed93 7a72 	vldr	s14, [r3, #456]	; 0x1c8
 8014de2:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8014de6:	eddf 4a90 	vldr	s9, [pc, #576]	; 8015028 <iNemoEngine_API_Update+0x1a30>
 8014dea:	ee7c faef 	vsub.f32	s31, s25, s31
 8014dee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014df2:	eef0 faef 	vabs.f32	s31, s31
 8014df6:	eef0 7ae7 	vabs.f32	s15, s15
 8014dfa:	ee77 7aaf 	vadd.f32	s15, s15, s31
 8014dfe:	eef4 7ae4 	vcmpe.f32	s15, s9
 8014e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e06:	dd0a      	ble.n	8014e1e <iNemoEngine_API_Update+0x1826>
 8014e08:	ed9f 4a8e 	vldr	s8, [pc, #568]	; 8015044 <iNemoEngine_API_Update+0x1a4c>
 8014e0c:	eef4 7ac4 	vcmpe.f32	s15, s8
 8014e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e14:	f340 8790 	ble.w	8015d38 <iNemoEngine_API_Update+0x2740>
 8014e18:	eef1 4a04 	vmov.f32	s9, #20	; 0x40a00000  5.0
 8014e1c:	e001      	b.n	8014e22 <iNemoEngine_API_Update+0x182a>
 8014e1e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8014e22:	eddd 7a21 	vldr	s15, [sp, #132]	; 0x84
 8014e26:	781c      	ldrb	r4, [r3, #0]
 8014e28:	eef4 4ae7 	vcmpe.f32	s9, s15
 8014e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e30:	bfa8      	it	ge
 8014e32:	eef0 7a64 	vmovge.f32	s15, s9
 8014e36:	edcd 7a04 	vstr	s15, [sp, #16]
 8014e3a:	b1cc      	cbz	r4, 8014e70 <iNemoEngine_API_Update+0x1878>
 8014e3c:	785c      	ldrb	r4, [r3, #1]
 8014e3e:	2c00      	cmp	r4, #0
 8014e40:	f040 8774 	bne.w	8015d2c <iNemoEngine_API_Update+0x2734>
 8014e44:	ee75 7aa6 	vadd.f32	s15, s11, s13
 8014e48:	edd3 6a05 	vldr	s13, [r3, #20]
 8014e4c:	ee75 7a27 	vadd.f32	s15, s10, s15
 8014e50:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014e54:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 8014e58:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014e5c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014e60:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014e64:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e6c:	f102 848b 	bmi.w	8017786 <iNemoEngine_API_Update+0x418e>
 8014e70:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8014e74:	461a      	mov	r2, r3
 8014e76:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 8014e7a:	ed9d 6a50 	vldr	s12, [sp, #320]	; 0x140
 8014e7e:	edcd 6a98 	vstr	s13, [sp, #608]	; 0x260
 8014e82:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014e86:	eef0 6a65 	vmov.f32	s13, s11
 8014e8a:	eee7 6a47 	vfms.f32	s13, s14, s14
 8014e8e:	2300      	movs	r3, #0
 8014e90:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
 8014e94:	ed9d 5a4e 	vldr	s10, [sp, #312]	; 0x138
 8014e98:	eddd 4a4f 	vldr	s9, [sp, #316]	; 0x13c
 8014e9c:	eddd 0a51 	vldr	s1, [sp, #324]	; 0x144
 8014ea0:	ed8d 7a45 	vstr	s14, [sp, #276]	; 0x114
 8014ea4:	ee26 4a06 	vmul.f32	s8, s12, s12
 8014ea8:	ee25 2a05 	vmul.f32	s4, s10, s10
 8014eac:	ee34 4a04 	vadd.f32	s8, s8, s8
 8014eb0:	eeb1 3ae6 	vsqrt.f32	s6, s13
 8014eb4:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 8014eb8:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
 8014ebc:	9343      	str	r3, [sp, #268]	; 0x10c
 8014ebe:	ee64 3a86 	vmul.f32	s7, s9, s12
 8014ec2:	ee25 0a24 	vmul.f32	s0, s10, s9
 8014ec6:	ee64 1aa4 	vmul.f32	s3, s9, s9
 8014eca:	ee64 6aa0 	vmul.f32	s13, s9, s1
 8014ece:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8014ed2:	eea2 4a24 	vfma.f32	s8, s4, s9
 8014ed6:	ee73 3aa3 	vadd.f32	s7, s7, s7
 8014eda:	ee35 1ac4 	vsub.f32	s2, s11, s8
 8014ede:	ee25 4a06 	vmul.f32	s8, s10, s12
 8014ee2:	ee26 6a20 	vmul.f32	s12, s12, s1
 8014ee6:	ee71 1aa1 	vadd.f32	s3, s3, s3
 8014eea:	ee30 6a06 	vadd.f32	s12, s0, s12
 8014eee:	ee25 5a20 	vmul.f32	s10, s10, s1
 8014ef2:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8014ef6:	eee2 1a24 	vfma.f32	s3, s4, s9
 8014efa:	ee36 2a06 	vadd.f32	s4, s12, s12
 8014efe:	eeb0 6a63 	vmov.f32	s12, s7
 8014f02:	eea5 6a24 	vfma.f32	s12, s10, s9
 8014f06:	eee5 3a64 	vfms.f32	s7, s10, s9
 8014f0a:	eeb0 5a66 	vmov.f32	s10, s13
 8014f0e:	ee7a 6aa6 	vadd.f32	s13, s21, s13
 8014f12:	ee94 5a24 	vfnms.f32	s10, s8, s9
 8014f16:	eee4 6a64 	vfms.f32	s13, s8, s9
 8014f1a:	ee25 5a07 	vmul.f32	s10, s10, s14
 8014f1e:	edcd 6a3d 	vstr	s13, [sp, #244]	; 0xf4
 8014f22:	edcd 6a92 	vstr	s13, [sp, #584]	; 0x248
 8014f26:	ee75 6ae1 	vsub.f32	s13, s11, s3
 8014f2a:	ee79 5ae5 	vsub.f32	s11, s19, s11
 8014f2e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014f32:	ee75 1aa1 	vadd.f32	s3, s11, s3
 8014f36:	eee3 6a23 	vfma.f32	s13, s6, s7
 8014f3a:	ee26 7a07 	vmul.f32	s14, s12, s14
 8014f3e:	eddd 5a2a 	vldr	s11, [sp, #168]	; 0xa8
 8014f42:	eddd 4a2c 	vldr	s9, [sp, #176]	; 0xb0
 8014f46:	ed8d 9a99 	vstr	s18, [sp, #612]	; 0x264
 8014f4a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8014f4e:	eea3 7a01 	vfma.f32	s14, s6, s2
 8014f52:	edcd 6a91 	vstr	s13, [sp, #580]	; 0x244
 8014f56:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8014f5a:	edcd ca9a 	vstr	s25, [sp, #616]	; 0x268
 8014f5e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014f62:	eea3 5a02 	vfma.f32	s10, s6, s4
 8014f66:	ed8d 7a90 	vstr	s14, [sp, #576]	; 0x240
 8014f6a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8015078 <iNemoEngine_API_Update+0x1a80>
 8014f6e:	ed8d 3a44 	vstr	s6, [sp, #272]	; 0x110
 8014f72:	ee3a 6a46 	vsub.f32	s12, s20, s12
 8014f76:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8014f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f82:	ed8d 5a8f 	vstr	s10, [sp, #572]	; 0x23c
 8014f86:	edcd 1a3f 	vstr	s3, [sp, #252]	; 0xfc
 8014f8a:	edcd 1a94 	vstr	s3, [sp, #592]	; 0x250
 8014f8e:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 8014f92:	ed8d 6a93 	vstr	s12, [sp, #588]	; 0x24c
 8014f96:	d541      	bpl.n	801501c <iNemoEngine_API_Update+0x1a24>
 8014f98:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8015048 <iNemoEngine_API_Update+0x1a50>
 8014f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fa4:	dd3a      	ble.n	801501c <iNemoEngine_API_Update+0x1a24>
 8014fa6:	ee79 7a67 	vsub.f32	s15, s18, s15
 8014faa:	eef0 7ae7 	vabs.f32	s15, s15
 8014fae:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8014fb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fba:	dd5f      	ble.n	801507c <iNemoEngine_API_Update+0x1a84>
 8014fbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fc8:	f140 86a4 	bpl.w	8015d14 <iNemoEngine_API_Update+0x271c>
 8014fcc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801504c <iNemoEngine_API_Update+0x1a54>
 8014fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fd8:	f141 8185 	bpl.w	80162e6 <iNemoEngine_API_Update+0x2cee>
 8014fdc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801505c <iNemoEngine_API_Update+0x1a64>
 8014fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fe8:	f2c1 8185 	blt.w	80162f6 <iNemoEngine_API_Update+0x2cfe>
 8014fec:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8015050 <iNemoEngine_API_Update+0x1a58>
 8014ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ff8:	f141 824e 	bpl.w	8016498 <iNemoEngine_API_Update+0x2ea0>
 8014ffc:	eddf 6a17 	vldr	s13, [pc, #92]	; 801505c <iNemoEngine_API_Update+0x1a64>
 8015000:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8015054 <iNemoEngine_API_Update+0x1a5c>
 8015004:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8015058 <iNemoEngine_API_Update+0x1a60>
 8015008:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801500c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015014:	eea6 7a86 	vfma.f32	s14, s13, s12
 8015018:	f001 b977 	b.w	801630a <iNemoEngine_API_Update+0x2d12>
 801501c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015020:	e7c1      	b.n	8014fa6 <iNemoEngine_API_Update+0x19ae>
 8015022:	bf00      	nop
 8015024:	3ecccccc 	.word	0x3ecccccc
 8015028:	3dcccccd 	.word	0x3dcccccd
 801502c:	3f666666 	.word	0x3f666666
 8015030:	00000000 	.word	0x00000000
 8015034:	3f333333 	.word	0x3f333333
 8015038:	bfb33333 	.word	0xbfb33333
 801503c:	3f7d6d54 	.word	0x3f7d6d54
 8015040:	3f7ae147 	.word	0x3f7ae147
 8015044:	3fb77778 	.word	0x3fb77778
 8015048:	3f4ccccd 	.word	0x3f4ccccd
 801504c:	3ba3d70a 	.word	0x3ba3d70a
 8015050:	3c75c28f 	.word	0x3c75c28f
 8015054:	3f19999a 	.word	0x3f19999a
 8015058:	43480000 	.word	0x43480000
 801505c:	3c23d70a 	.word	0x3c23d70a
 8015060:	3b449ba6 	.word	0x3b449ba6
 8015064:	3fb33333 	.word	0x3fb33333
 8015068:	3ecccccd 	.word	0x3ecccccd
 801506c:	3f8f5c29 	.word	0x3f8f5c29
 8015070:	3f59999a 	.word	0x3f59999a
 8015074:	3e4ccccd 	.word	0x3e4ccccd
 8015078:	3f99999a 	.word	0x3f99999a
 801507c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015080:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 801505c <iNemoEngine_API_Update+0x1a64>
 8015084:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 8015060 <iNemoEngine_API_Update+0x1a68>
 8015088:	eeb0 7a65 	vmov.f32	s14, s11
 801508c:	eef0 6a65 	vmov.f32	s13, s11
 8015090:	ed8d 6a65 	vstr	s12, [sp, #404]	; 0x194
 8015094:	ed9d 6a04 	vldr	s12, [sp, #16]
 8015098:	ed9d 3a84 	vldr	s6, [sp, #528]	; 0x210
 801509c:	ed9d 5a83 	vldr	s10, [sp, #524]	; 0x20c
 80150a0:	ed9d 2a88 	vldr	s4, [sp, #544]	; 0x220
 80150a4:	eddd 4a8c 	vldr	s9, [sp, #560]	; 0x230
 80150a8:	9a06      	ldr	r2, [sp, #24]
 80150aa:	ed8d 4a66 	vstr	s8, [sp, #408]	; 0x198
 80150ae:	ee66 3a0f 	vmul.f32	s7, s12, s30
 80150b2:	ed9d 6a8d 	vldr	s12, [sp, #564]	; 0x234
 80150b6:	7b13      	ldrb	r3, [r2, #12]
 80150b8:	ee23 3a23 	vmul.f32	s6, s6, s7
 80150bc:	ee23 5a85 	vmul.f32	s10, s7, s10
 80150c0:	ed8d 3a84 	vstr	s6, [sp, #528]	; 0x210
 80150c4:	ed9d 3a85 	vldr	s6, [sp, #532]	; 0x214
 80150c8:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 80150cc:	ee63 3a23 	vmul.f32	s7, s6, s7
 80150d0:	ed9d 3a86 	vldr	s6, [sp, #536]	; 0x218
 80150d4:	edcd 3a85 	vstr	s7, [sp, #532]	; 0x214
 80150d8:	eddd 3a87 	vldr	s7, [sp, #540]	; 0x21c
 80150dc:	ee2c 3a03 	vmul.f32	s6, s24, s6
 80150e0:	ee6c 3a23 	vmul.f32	s7, s24, s7
 80150e4:	ee74 4aa4 	vadd.f32	s9, s9, s9
 80150e8:	ee2c ca02 	vmul.f32	s24, s24, s4
 80150ec:	ee36 6a06 	vadd.f32	s12, s12, s12
 80150f0:	ed9d 2a8e 	vldr	s4, [sp, #568]	; 0x238
 80150f4:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 80150f8:	ee64 4a87 	vmul.f32	s9, s9, s14
 80150fc:	ee26 6a07 	vmul.f32	s12, s12, s14
 8015100:	ee2f fa02 	vmul.f32	s30, s30, s4
 8015104:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 8015108:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 801510c:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 8015110:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 8015114:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 8015118:	2b00      	cmp	r3, #0
 801511a:	f000 8525 	beq.w	8015b68 <iNemoEngine_API_Update+0x2570>
 801511e:	ee27 3a03 	vmul.f32	s6, s14, s6
 8015122:	ee67 3a23 	vmul.f32	s7, s14, s7
 8015126:	ee27 ca0c 	vmul.f32	s24, s14, s24
 801512a:	ed9d 2a22 	vldr	s4, [sp, #136]	; 0x88
 801512e:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 8015132:	ee37 7a07 	vadd.f32	s14, s14, s14
 8015136:	4613      	mov	r3, r2
 8015138:	ee25 2a82 	vmul.f32	s4, s11, s4
 801513c:	7b92      	ldrb	r2, [r2, #14]
 801513e:	7b5b      	ldrb	r3, [r3, #13]
 8015140:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 8015144:	ee64 5a25 	vmul.f32	s11, s8, s11
 8015148:	ee26 6a07 	vmul.f32	s12, s12, s14
 801514c:	edcd 5a66 	vstr	s11, [sp, #408]	; 0x198
 8015150:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 8015154:	ed8d 2a5f 	vstr	s4, [sp, #380]	; 0x17c
 8015158:	ed8d 2a60 	vstr	s4, [sp, #384]	; 0x180
 801515c:	ed8d 2a61 	vstr	s4, [sp, #388]	; 0x184
 8015160:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 8015164:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 8015168:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 801516c:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 8015170:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 8015174:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 8015178:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 801517c:	b15a      	cbz	r2, 8015196 <iNemoEngine_API_Update+0x1b9e>
 801517e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801518a:	dd04      	ble.n	8015196 <iNemoEngine_API_Update+0x1b9e>
 801518c:	2100      	movs	r1, #0
 801518e:	f8ad 10eb 	strh.w	r1, [sp, #235]	; 0xeb
 8015192:	f88d 10ed 	strb.w	r1, [sp, #237]	; 0xed
 8015196:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 801519a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801519e:	dd08      	ble.n	80151b2 <iNemoEngine_API_Update+0x1bba>
 80151a0:	9906      	ldr	r1, [sp, #24]
 80151a2:	edd1 7a64 	vldr	s15, [r1, #400]	; 0x190
 80151a6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80151aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151ae:	f280 85a4 	bge.w	8015cfa <iNemoEngine_API_Update+0x2702>
 80151b2:	b133      	cbz	r3, 80151c2 <iNemoEngine_API_Update+0x1bca>
 80151b4:	f240 1101 	movw	r1, #257	; 0x101
 80151b8:	f8ad 10e8 	strh.w	r1, [sp, #232]	; 0xe8
 80151bc:	2101      	movs	r1, #1
 80151be:	f88d 10ea 	strb.w	r1, [sp, #234]	; 0xea
 80151c2:	2401      	movs	r4, #1
 80151c4:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 80151c8:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 80151cc:	ed5f 7a5b 	vldr	s15, [pc, #-364]	; 8015064 <iNemoEngine_API_Update+0x1a6c>
 80151d0:	eef4 cae7 	vcmpe.f32	s25, s15
 80151d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151d8:	dc07      	bgt.n	80151ea <iNemoEngine_API_Update+0x1bf2>
 80151da:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 8015068 <iNemoEngine_API_Update+0x1a70>
 80151de:	eef4 cae7 	vcmpe.f32	s25, s15
 80151e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151e6:	f141 801d 	bpl.w	8016224 <iNemoEngine_API_Update+0x2c2c>
 80151ea:	2300      	movs	r3, #0
 80151ec:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 80151f0:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 80151f4:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 80151f8:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 80151fc:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 801506c <iNemoEngine_API_Update+0x1a74>
 8015200:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8015204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015208:	dc07      	bgt.n	801521a <iNemoEngine_API_Update+0x1c22>
 801520a:	ed5f 7a67 	vldr	s15, [pc, #-412]	; 8015070 <iNemoEngine_API_Update+0x1a78>
 801520e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8015212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015216:	f140 86ed 	bpl.w	8015ff4 <iNemoEngine_API_Update+0x29fc>
 801521a:	2300      	movs	r3, #0
 801521c:	f8ad 30eb 	strh.w	r3, [sp, #235]	; 0xeb
 8015220:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
 8015224:	f8ad 30f1 	strh.w	r3, [sp, #241]	; 0xf1
 8015228:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801522c:	eef4 fae7 	vcmpe.f32	s31, s15
 8015230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015234:	f340 8486 	ble.w	8015b44 <iNemoEngine_API_Update+0x254c>
 8015238:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801523c:	ee7f 7aa7 	vadd.f32	s15, s31, s15
 8015240:	9a06      	ldr	r2, [sp, #24]
 8015242:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015246:	2300      	movs	r3, #0
 8015248:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801524c:	ee27 fa8f 	vmul.f32	s30, s15, s30
 8015250:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8015254:	eef4 fae7 	vcmpe.f32	s31, s15
 8015258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801525c:	bfc4      	itt	gt
 801525e:	f88d 30f1 	strbgt.w	r3, [sp, #241]	; 0xf1
 8015262:	f88d 30f3 	strbgt.w	r3, [sp, #243]	; 0xf3
 8015266:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 801526a:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 801526e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8015270:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 8015274:	2b0e      	cmp	r3, #14
 8015276:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 801527a:	f340 8567 	ble.w	8015d4c <iNemoEngine_API_Update+0x2754>
 801527e:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8015282:	eeb4 dae7 	vcmpe.f32	s26, s15
 8015286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801528a:	f340 82ed 	ble.w	8015868 <iNemoEngine_API_Update+0x2270>
 801528e:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8015292:	eef4 7acb 	vcmpe.f32	s15, s22
 8015296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801529a:	f340 82e5 	ble.w	8015868 <iNemoEngine_API_Update+0x2270>
 801529e:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 80152a2:	eef4 7aed 	vcmpe.f32	s15, s27
 80152a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152aa:	f340 82dd 	ble.w	8015868 <iNemoEngine_API_Update+0x2270>
 80152ae:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8015074 <iNemoEngine_API_Update+0x1a7c>
 80152b2:	eeb0 7ace 	vabs.f32	s14, s28
 80152b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152be:	f140 82d3 	bpl.w	8015868 <iNemoEngine_API_Update+0x2270>
 80152c2:	eeb0 7aee 	vabs.f32	s14, s29
 80152c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152ce:	f140 82cb 	bpl.w	8015868 <iNemoEngine_API_Update+0x2270>
 80152d2:	eeb0 7aeb 	vabs.f32	s14, s23
 80152d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152de:	f140 82c3 	bpl.w	8015868 <iNemoEngine_API_Update+0x2270>
 80152e2:	ed5f 7a9b 	vldr	s15, [pc, #-620]	; 8015078 <iNemoEngine_API_Update+0x1a80>
 80152e6:	eef0 aaea 	vabs.f32	s21, s21
 80152ea:	eef4 aae7 	vcmpe.f32	s21, s15
 80152ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f2:	f140 82b9 	bpl.w	8015868 <iNemoEngine_API_Update+0x2270>
 80152f6:	eeb0 aaca 	vabs.f32	s20, s20
 80152fa:	eeb4 aae7 	vcmpe.f32	s20, s15
 80152fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015302:	f140 82b1 	bpl.w	8015868 <iNemoEngine_API_Update+0x2270>
 8015306:	eef0 9ae9 	vabs.f32	s19, s19
 801530a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801530e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015312:	f140 82a9 	bpl.w	8015868 <iNemoEngine_API_Update+0x2270>
 8015316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015318:	9806      	ldr	r0, [sp, #24]
 801531a:	ed93 6a00 	vldr	s12, [r3]
 801531e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015320:	f890 11a0 	ldrb.w	r1, [r0, #416]	; 0x1a0
 8015324:	ed93 7a00 	vldr	s14, [r3]
 8015328:	f200 73a4 	addw	r3, r0, #1956	; 0x7a4
 801532c:	edd3 4a00 	vldr	s9, [r3]
 8015330:	2909      	cmp	r1, #9
 8015332:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8015336:	f500 63f6 	add.w	r3, r0, #1968	; 0x7b0
 801533a:	ed93 5a00 	vldr	s10, [r3]
 801533e:	bf8c      	ite	hi
 8015340:	220a      	movhi	r2, #10
 8015342:	2205      	movls	r2, #5
 8015344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015348:	bfb4      	ite	lt
 801534a:	eef0 7a64 	vmovlt.f32	s15, s9
 801534e:	eef0 7a46 	vmovge.f32	s15, s12
 8015352:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015356:	bf8c      	ite	hi
 8015358:	eef0 5a64 	vmovhi.f32	s11, s9
 801535c:	eef0 5a46 	vmovls.f32	s11, s12
 8015360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015364:	ee36 6a24 	vadd.f32	s12, s12, s9
 8015368:	eef4 5ac5 	vcmpe.f32	s11, s10
 801536c:	bfb8      	it	lt
 801536e:	eef0 7a45 	vmovlt.f32	s15, s10
 8015372:	f200 73bc 	addw	r3, r0, #1980	; 0x7bc
 8015376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801537a:	bf88      	it	hi
 801537c:	eef0 5a45 	vmovhi.f32	s11, s10
 8015380:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015384:	ed93 5a00 	vldr	s10, [r3]
 8015388:	eef4 7ac5 	vcmpe.f32	s15, s10
 801538c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015390:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015394:	bfb8      	it	lt
 8015396:	eef0 7a45 	vmovlt.f32	s15, s10
 801539a:	f500 63f9 	add.w	r3, r0, #1992	; 0x7c8
 801539e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153a2:	bf88      	it	hi
 80153a4:	eef0 5a45 	vmovhi.f32	s11, s10
 80153a8:	ee36 6a05 	vadd.f32	s12, s12, s10
 80153ac:	ed93 5a00 	vldr	s10, [r3]
 80153b0:	eef4 7ac5 	vcmpe.f32	s15, s10
 80153b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153b8:	eef4 5ac5 	vcmpe.f32	s11, s10
 80153bc:	bfb8      	it	lt
 80153be:	eef0 7a45 	vmovlt.f32	s15, s10
 80153c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153c6:	bf88      	it	hi
 80153c8:	eef0 5a45 	vmovhi.f32	s11, s10
 80153cc:	2a05      	cmp	r2, #5
 80153ce:	ee36 6a05 	vadd.f32	s12, s12, s10
 80153d2:	d065      	beq.n	80154a0 <iNemoEngine_API_Update+0x1ea8>
 80153d4:	f200 73d4 	addw	r3, r0, #2004	; 0x7d4
 80153d8:	ed93 5a00 	vldr	s10, [r3]
 80153dc:	eef4 7ac5 	vcmpe.f32	s15, s10
 80153e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e4:	eef4 5ac5 	vcmpe.f32	s11, s10
 80153e8:	bfb8      	it	lt
 80153ea:	eef0 7a45 	vmovlt.f32	s15, s10
 80153ee:	f500 63fc 	add.w	r3, r0, #2016	; 0x7e0
 80153f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153f6:	bf88      	it	hi
 80153f8:	eef0 5a45 	vmovhi.f32	s11, s10
 80153fc:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015400:	ed93 5a00 	vldr	s10, [r3]
 8015404:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801540c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015410:	bfb8      	it	lt
 8015412:	eef0 7a45 	vmovlt.f32	s15, s10
 8015416:	f200 73ec 	addw	r3, r0, #2028	; 0x7ec
 801541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801541e:	bf88      	it	hi
 8015420:	eef0 5a45 	vmovhi.f32	s11, s10
 8015424:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015428:	ed93 5a00 	vldr	s10, [r3]
 801542c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015434:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015438:	bfb8      	it	lt
 801543a:	eef0 7a45 	vmovlt.f32	s15, s10
 801543e:	f500 63ff 	add.w	r3, r0, #2040	; 0x7f8
 8015442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015446:	bf88      	it	hi
 8015448:	eef0 5a45 	vmovhi.f32	s11, s10
 801544c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015450:	ed93 5a00 	vldr	s10, [r3]
 8015454:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801545c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015460:	bfb8      	it	lt
 8015462:	eef0 7a45 	vmovlt.f32	s15, s10
 8015466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801546a:	bf88      	it	hi
 801546c:	eef0 5a45 	vmovhi.f32	s11, s10
 8015470:	2a0a      	cmp	r2, #10
 8015472:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015476:	d113      	bne.n	80154a0 <iNemoEngine_API_Update+0x1ea8>
 8015478:	f600 0304 	addw	r3, r0, #2052	; 0x804
 801547c:	ed93 5a00 	vldr	s10, [r3]
 8015480:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015488:	eef4 5ac5 	vcmpe.f32	s11, s10
 801548c:	bfb8      	it	lt
 801548e:	eef0 7a45 	vmovlt.f32	s15, s10
 8015492:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801549a:	bf88      	it	hi
 801549c:	eef0 5a45 	vmovhi.f32	s11, s10
 80154a0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80154a4:	eddf 5aeb 	vldr	s11, [pc, #940]	; 8015854 <iNemoEngine_API_Update+0x225c>
 80154a8:	ed9f 5aeb 	vldr	s10, [pc, #940]	; 8015858 <iNemoEngine_API_Update+0x2260>
 80154ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80154b0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80154b4:	eef4 7ae5 	vcmpe.f32	s15, s11
 80154b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154bc:	f300 81d4 	bgt.w	8015868 <iNemoEngine_API_Update+0x2270>
 80154c0:	eef0 7ac6 	vabs.f32	s15, s12
 80154c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80154c8:	ed9f 6ae4 	vldr	s12, [pc, #912]	; 801585c <iNemoEngine_API_Update+0x2264>
 80154cc:	eef4 7ac6 	vcmpe.f32	s15, s12
 80154d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154d4:	f300 81c8 	bgt.w	8015868 <iNemoEngine_API_Update+0x2270>
 80154d8:	9806      	ldr	r0, [sp, #24]
 80154da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80154dc:	ed93 6a00 	vldr	s12, [r3]
 80154e0:	f500 63f5 	add.w	r3, r0, #1960	; 0x7a8
 80154e4:	edd3 4a00 	vldr	s9, [r3]
 80154e8:	f200 73b4 	addw	r3, r0, #1972	; 0x7b4
 80154ec:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80154f0:	ed93 5a00 	vldr	s10, [r3]
 80154f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154f8:	bfb4      	ite	lt
 80154fa:	eef0 7a64 	vmovlt.f32	s15, s9
 80154fe:	eef0 7a46 	vmovge.f32	s15, s12
 8015502:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015506:	bf8c      	ite	hi
 8015508:	eef0 5a64 	vmovhi.f32	s11, s9
 801550c:	eef0 5a46 	vmovls.f32	s11, s12
 8015510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015514:	ee36 6a24 	vadd.f32	s12, s12, s9
 8015518:	eef4 5ac5 	vcmpe.f32	s11, s10
 801551c:	bfb8      	it	lt
 801551e:	eef0 7a45 	vmovlt.f32	s15, s10
 8015522:	f500 63f8 	add.w	r3, r0, #1984	; 0x7c0
 8015526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801552a:	bf88      	it	hi
 801552c:	eef0 5a45 	vmovhi.f32	s11, s10
 8015530:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015534:	ed93 5a00 	vldr	s10, [r3]
 8015538:	eef4 7ac5 	vcmpe.f32	s15, s10
 801553c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015540:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015544:	bfb8      	it	lt
 8015546:	eef0 7a45 	vmovlt.f32	s15, s10
 801554a:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
 801554e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015552:	bf88      	it	hi
 8015554:	eef0 5a45 	vmovhi.f32	s11, s10
 8015558:	ee36 6a05 	vadd.f32	s12, s12, s10
 801555c:	ed93 5a00 	vldr	s10, [r3]
 8015560:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015568:	eef4 5ac5 	vcmpe.f32	s11, s10
 801556c:	bfb8      	it	lt
 801556e:	eef0 7a45 	vmovlt.f32	s15, s10
 8015572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015576:	bf88      	it	hi
 8015578:	eef0 5a45 	vmovhi.f32	s11, s10
 801557c:	2a05      	cmp	r2, #5
 801557e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015582:	d065      	beq.n	8015650 <iNemoEngine_API_Update+0x2058>
 8015584:	f500 63fb 	add.w	r3, r0, #2008	; 0x7d8
 8015588:	ed93 5a00 	vldr	s10, [r3]
 801558c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015594:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015598:	bfb8      	it	lt
 801559a:	eef0 7a45 	vmovlt.f32	s15, s10
 801559e:	f200 73e4 	addw	r3, r0, #2020	; 0x7e4
 80155a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155a6:	bf88      	it	hi
 80155a8:	eef0 5a45 	vmovhi.f32	s11, s10
 80155ac:	ee36 6a05 	vadd.f32	s12, s12, s10
 80155b0:	ed93 5a00 	vldr	s10, [r3]
 80155b4:	eef4 7ac5 	vcmpe.f32	s15, s10
 80155b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155bc:	eef4 5ac5 	vcmpe.f32	s11, s10
 80155c0:	bfb8      	it	lt
 80155c2:	eef0 7a45 	vmovlt.f32	s15, s10
 80155c6:	f500 63fe 	add.w	r3, r0, #2032	; 0x7f0
 80155ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ce:	bf88      	it	hi
 80155d0:	eef0 5a45 	vmovhi.f32	s11, s10
 80155d4:	ee36 6a05 	vadd.f32	s12, s12, s10
 80155d8:	ed93 5a00 	vldr	s10, [r3]
 80155dc:	eef4 7ac5 	vcmpe.f32	s15, s10
 80155e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155e4:	eef4 5ac5 	vcmpe.f32	s11, s10
 80155e8:	bfb8      	it	lt
 80155ea:	eef0 7a45 	vmovlt.f32	s15, s10
 80155ee:	f200 73fc 	addw	r3, r0, #2044	; 0x7fc
 80155f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155f6:	bf88      	it	hi
 80155f8:	eef0 5a45 	vmovhi.f32	s11, s10
 80155fc:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015600:	ed93 5a00 	vldr	s10, [r3]
 8015604:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801560c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015610:	bfb8      	it	lt
 8015612:	eef0 7a45 	vmovlt.f32	s15, s10
 8015616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801561a:	bf88      	it	hi
 801561c:	eef0 5a45 	vmovhi.f32	s11, s10
 8015620:	2a0a      	cmp	r2, #10
 8015622:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015626:	d113      	bne.n	8015650 <iNemoEngine_API_Update+0x2058>
 8015628:	f600 0308 	addw	r3, r0, #2056	; 0x808
 801562c:	ed93 5a00 	vldr	s10, [r3]
 8015630:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015638:	eef4 5ac5 	vcmpe.f32	s11, s10
 801563c:	bfb8      	it	lt
 801563e:	eef0 7a45 	vmovlt.f32	s15, s10
 8015642:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801564a:	bf88      	it	hi
 801564c:	eef0 5a45 	vmovhi.f32	s11, s10
 8015650:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8015654:	eddf 5a7f 	vldr	s11, [pc, #508]	; 8015854 <iNemoEngine_API_Update+0x225c>
 8015658:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 8015858 <iNemoEngine_API_Update+0x2260>
 801565c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015660:	ee26 6a05 	vmul.f32	s12, s12, s10
 8015664:	eef4 7ae5 	vcmpe.f32	s15, s11
 8015668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801566c:	f300 80fc 	bgt.w	8015868 <iNemoEngine_API_Update+0x2270>
 8015670:	eef0 7ac6 	vabs.f32	s15, s12
 8015674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015678:	ed9f 6a78 	vldr	s12, [pc, #480]	; 801585c <iNemoEngine_API_Update+0x2264>
 801567c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8015680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015684:	f300 80f0 	bgt.w	8015868 <iNemoEngine_API_Update+0x2270>
 8015688:	9806      	ldr	r0, [sp, #24]
 801568a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801568c:	ed93 5a00 	vldr	s10, [r3]
 8015690:	f200 73ac 	addw	r3, r0, #1964	; 0x7ac
 8015694:	edd3 4a00 	vldr	s9, [r3]
 8015698:	f500 63f7 	add.w	r3, r0, #1976	; 0x7b8
 801569c:	eeb4 5ae4 	vcmpe.f32	s10, s9
 80156a0:	ed93 6a00 	vldr	s12, [r3]
 80156a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156a8:	bfb4      	ite	lt
 80156aa:	eef0 7a64 	vmovlt.f32	s15, s9
 80156ae:	eef0 7a45 	vmovge.f32	s15, s10
 80156b2:	bf8c      	ite	hi
 80156b4:	eef0 5a64 	vmovhi.f32	s11, s9
 80156b8:	eef0 5a45 	vmovls.f32	s11, s10
 80156bc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80156c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80156c8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80156cc:	bfa8      	it	ge
 80156ce:	eef0 7a46 	vmovge.f32	s15, s12
 80156d2:	f200 73c4 	addw	r3, r0, #1988	; 0x7c4
 80156d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156da:	bf98      	it	ls
 80156dc:	eef0 5a46 	vmovls.f32	s11, s12
 80156e0:	ee76 4a05 	vadd.f32	s9, s12, s10
 80156e4:	ed93 6a00 	vldr	s12, [r3]
 80156e8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80156ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156f0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80156f4:	bfa8      	it	ge
 80156f6:	eef0 7a46 	vmovge.f32	s15, s12
 80156fa:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
 80156fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015702:	bf8c      	ite	hi
 8015704:	eeb0 5a65 	vmovhi.f32	s10, s11
 8015708:	eeb0 5a46 	vmovls.f32	s10, s12
 801570c:	edd3 5a00 	vldr	s11, [r3]
 8015710:	eef4 5ae7 	vcmpe.f32	s11, s15
 8015714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015718:	ee36 6a24 	vadd.f32	s12, s12, s9
 801571c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015720:	bfa8      	it	ge
 8015722:	eef0 7a65 	vmovge.f32	s15, s11
 8015726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801572a:	ee35 6a86 	vadd.f32	s12, s11, s12
 801572e:	bf88      	it	hi
 8015730:	eef0 5a45 	vmovhi.f32	s11, s10
 8015734:	2a05      	cmp	r2, #5
 8015736:	d065      	beq.n	8015804 <iNemoEngine_API_Update+0x220c>
 8015738:	f200 73dc 	addw	r3, r0, #2012	; 0x7dc
 801573c:	ed93 5a00 	vldr	s10, [r3]
 8015740:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8015744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015748:	eeb4 5ae5 	vcmpe.f32	s10, s11
 801574c:	bfa8      	it	ge
 801574e:	eef0 7a45 	vmovge.f32	s15, s10
 8015752:	f500 63fd 	add.w	r3, r0, #2024	; 0x7e8
 8015756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801575a:	bf98      	it	ls
 801575c:	eef0 5a45 	vmovls.f32	s11, s10
 8015760:	ee35 5a06 	vadd.f32	s10, s10, s12
 8015764:	ed93 6a00 	vldr	s12, [r3]
 8015768:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801576c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015770:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8015774:	bfa8      	it	ge
 8015776:	eef0 7a46 	vmovge.f32	s15, s12
 801577a:	f200 73f4 	addw	r3, r0, #2036	; 0x7f4
 801577e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015782:	bf98      	it	ls
 8015784:	eef0 5a46 	vmovls.f32	s11, s12
 8015788:	ee36 5a05 	vadd.f32	s10, s12, s10
 801578c:	ed93 6a00 	vldr	s12, [r3]
 8015790:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015798:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801579c:	bfa8      	it	ge
 801579e:	eef0 7a46 	vmovge.f32	s15, s12
 80157a2:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80157a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157aa:	bf98      	it	ls
 80157ac:	eef0 5a46 	vmovls.f32	s11, s12
 80157b0:	ee36 6a05 	vadd.f32	s12, s12, s10
 80157b4:	ed93 5a00 	vldr	s10, [r3]
 80157b8:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80157bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157c0:	eeb4 5ae5 	vcmpe.f32	s10, s11
 80157c4:	bfa8      	it	ge
 80157c6:	eef0 7a45 	vmovge.f32	s15, s10
 80157ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ce:	bf98      	it	ls
 80157d0:	eef0 5a45 	vmovls.f32	s11, s10
 80157d4:	2a0a      	cmp	r2, #10
 80157d6:	ee35 6a06 	vadd.f32	s12, s10, s12
 80157da:	d113      	bne.n	8015804 <iNemoEngine_API_Update+0x220c>
 80157dc:	f600 030c 	addw	r3, r0, #2060	; 0x80c
 80157e0:	ed93 5a00 	vldr	s10, [r3]
 80157e4:	eef4 7ac5 	vcmpe.f32	s15, s10
 80157e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ec:	eef4 5ac5 	vcmpe.f32	s11, s10
 80157f0:	bfb8      	it	lt
 80157f2:	eef0 7a45 	vmovlt.f32	s15, s10
 80157f6:	ee36 6a05 	vadd.f32	s12, s12, s10
 80157fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157fe:	bf88      	it	hi
 8015800:	eef0 5a45 	vmovhi.f32	s11, s10
 8015804:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8015808:	eddf 5a12 	vldr	s11, [pc, #72]	; 8015854 <iNemoEngine_API_Update+0x225c>
 801580c:	ed9f 5a12 	vldr	s10, [pc, #72]	; 8015858 <iNemoEngine_API_Update+0x2260>
 8015810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015814:	ee26 6a05 	vmul.f32	s12, s12, s10
 8015818:	eef4 7ae5 	vcmpe.f32	s15, s11
 801581c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015820:	dc22      	bgt.n	8015868 <iNemoEngine_API_Update+0x2270>
 8015822:	eef0 7ac6 	vabs.f32	s15, s12
 8015826:	ee27 7a87 	vmul.f32	s14, s15, s14
 801582a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 801585c <iNemoEngine_API_Update+0x2264>
 801582e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015836:	dc17      	bgt.n	8015868 <iNemoEngine_API_Update+0x2270>
 8015838:	9b06      	ldr	r3, [sp, #24]
 801583a:	795b      	ldrb	r3, [r3, #5]
 801583c:	2b00      	cmp	r3, #0
 801583e:	f002 8117 	beq.w	8017a70 <iNemoEngine_API_Update+0x4478>
 8015842:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8015846:	2a01      	cmp	r2, #1
 8015848:	f001 87d1 	beq.w	80177ee <iNemoEngine_API_Update+0x41f6>
 801584c:	f04f 0901 	mov.w	r9, #1
 8015850:	f000 bc0b 	b.w	801606a <iNemoEngine_API_Update+0x2a72>
 8015854:	3be56041 	.word	0x3be56041
 8015858:	3dcccccd 	.word	0x3dcccccd
 801585c:	3e333333 	.word	0x3e333333
 8015860:	42480000 	.word	0x42480000
 8015864:	00000000 	.word	0x00000000
 8015868:	9b06      	ldr	r3, [sp, #24]
 801586a:	795b      	ldrb	r3, [r3, #5]
 801586c:	f04f 0900 	mov.w	r9, #0
 8015870:	f8ad 90ee 	strh.w	r9, [sp, #238]	; 0xee
 8015874:	f88d 90f0 	strb.w	r9, [sp, #240]	; 0xf0
 8015878:	2b00      	cmp	r3, #0
 801587a:	f040 83f1 	bne.w	8016060 <iNemoEngine_API_Update+0x2a68>
 801587e:	9906      	ldr	r1, [sp, #24]
 8015880:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 8015884:	9295      	str	r2, [sp, #596]	; 0x254
 8015886:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 801588a:	9296      	str	r2, [sp, #600]	; 0x258
 801588c:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 8015890:	9297      	str	r2, [sp, #604]	; 0x25c
 8015892:	2200      	movs	r2, #0
 8015894:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8015898:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 801589c:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 80158a0:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 80158a4:	704a      	strb	r2, [r1, #1]
 80158a6:	ed5f 7a12 	vldr	s15, [pc, #-72]	; 8015860 <iNemoEngine_API_Update+0x2268>
 80158aa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80158ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158b2:	f2c0 8138 	blt.w	8015b26 <iNemoEngine_API_Update+0x252e>
 80158b6:	9906      	ldr	r1, [sp, #24]
 80158b8:	2200      	movs	r2, #0
 80158ba:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 80158be:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 80158c2:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 80158c6:	2b01      	cmp	r3, #1
 80158c8:	d125      	bne.n	8015916 <iNemoEngine_API_Update+0x231e>
 80158ca:	eddd 4a86 	vldr	s9, [sp, #536]	; 0x218
 80158ce:	ed9d 6a5f 	vldr	s12, [sp, #380]	; 0x17c
 80158d2:	ed9d 5a87 	vldr	s10, [sp, #540]	; 0x21c
 80158d6:	ed9d 7a60 	vldr	s14, [sp, #384]	; 0x180
 80158da:	eddd 5a88 	vldr	s11, [sp, #544]	; 0x220
 80158de:	eddd 7a61 	vldr	s15, [sp, #388]	; 0x184
 80158e2:	eeb6 4a08 	vmov.f32	s8, #104	; 0x3f400000  0.750
 80158e6:	ee64 4a84 	vmul.f32	s9, s9, s8
 80158ea:	ee36 6a06 	vadd.f32	s12, s12, s12
 80158ee:	ee25 5a04 	vmul.f32	s10, s10, s8
 80158f2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80158f6:	ee65 5a84 	vmul.f32	s11, s11, s8
 80158fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80158fe:	edcd 4a86 	vstr	s9, [sp, #536]	; 0x218
 8015902:	ed8d 6a5f 	vstr	s12, [sp, #380]	; 0x17c
 8015906:	ed8d 5a87 	vstr	s10, [sp, #540]	; 0x21c
 801590a:	ed8d 7a60 	vstr	s14, [sp, #384]	; 0x180
 801590e:	edcd 5a88 	vstr	s11, [sp, #544]	; 0x220
 8015912:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 8015916:	9c06      	ldr	r4, [sp, #24]
 8015918:	ed9d 6a60 	vldr	s12, [sp, #384]	; 0x180
 801591c:	ed94 2a7f 	vldr	s4, [r4, #508]	; 0x1fc
 8015920:	edd4 1a75 	vldr	s3, [r4, #468]	; 0x1d4
 8015924:	edd4 2a89 	vldr	s5, [r4, #548]	; 0x224
 8015928:	edd4 3a93 	vldr	s7, [r4, #588]	; 0x24c
 801592c:	eddd 0a5f 	vldr	s1, [sp, #380]	; 0x17c
 8015930:	ed9d 1a61 	vldr	s2, [sp, #388]	; 0x184
 8015934:	ed94 4a9d 	vldr	s8, [r4, #628]	; 0x274
 8015938:	edd4 4aa7 	vldr	s9, [r4, #668]	; 0x29c
 801593c:	ed94 5ab1 	vldr	s10, [r4, #708]	; 0x2c4
 8015940:	ed9d 3a8b 	vldr	s6, [sp, #556]	; 0x22c
 8015944:	ed9d 7a89 	vldr	s14, [sp, #548]	; 0x224
 8015948:	eddd 7a8a 	vldr	s15, [sp, #552]	; 0x228
 801594c:	edd4 5abb 	vldr	s11, [r4, #748]	; 0x2ec
 8015950:	eea6 2a06 	vfma.f32	s4, s12, s12
 8015954:	ab83      	add	r3, sp, #524	; 0x20c
 8015956:	aa8f      	add	r2, sp, #572	; 0x23c
 8015958:	ed9d 6a62 	vldr	s12, [sp, #392]	; 0x188
 801595c:	ed84 2a7f 	vstr	s4, [r4, #508]	; 0x1fc
 8015960:	eee0 1aa0 	vfma.f32	s3, s1, s1
 8015964:	a93a      	add	r1, sp, #232	; 0xe8
 8015966:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
 801596a:	eee1 2a01 	vfma.f32	s5, s2, s2
 801596e:	eee6 3a06 	vfma.f32	s7, s12, s12
 8015972:	eddd 0a63 	vldr	s1, [sp, #396]	; 0x18c
 8015976:	ed9d 1a64 	vldr	s2, [sp, #400]	; 0x190
 801597a:	ed9d 6a65 	vldr	s12, [sp, #404]	; 0x194
 801597e:	edc4 1a75 	vstr	s3, [r4, #468]	; 0x1d4
 8015982:	eea0 4aa0 	vfma.f32	s8, s1, s1
 8015986:	eee1 4a01 	vfma.f32	s9, s2, s2
 801598a:	eea6 5a06 	vfma.f32	s10, s12, s12
 801598e:	eddd 0a66 	vldr	s1, [sp, #408]	; 0x198
 8015992:	ed9d 1a67 	vldr	s2, [sp, #412]	; 0x19c
 8015996:	ed94 6ac5 	vldr	s12, [r4, #788]	; 0x314
 801599a:	edc4 2a89 	vstr	s5, [r4, #548]	; 0x224
 801599e:	eee0 5aa0 	vfma.f32	s11, s1, s1
 80159a2:	eea1 6a01 	vfma.f32	s12, s2, s2
 80159a6:	ee26 7a87 	vmul.f32	s14, s13, s14
 80159aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80159ae:	ee66 6a83 	vmul.f32	s13, s13, s6
 80159b2:	ee27 7a28 	vmul.f32	s14, s14, s17
 80159b6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80159ba:	ee66 8aa8 	vmul.f32	s17, s13, s17
 80159be:	ed8d 7a89 	vstr	s14, [sp, #548]	; 0x224
 80159c2:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 80159c6:	edc4 3a93 	vstr	s7, [r4, #588]	; 0x24c
 80159ca:	ed84 4a9d 	vstr	s8, [r4, #628]	; 0x274
 80159ce:	edc4 4aa7 	vstr	s9, [r4, #668]	; 0x29c
 80159d2:	ed84 5ab1 	vstr	s10, [r4, #708]	; 0x2c4
 80159d6:	edcd 8a8b 	vstr	s17, [sp, #556]	; 0x22c
 80159da:	edc4 5abb 	vstr	s11, [r4, #748]	; 0x2ec
 80159de:	ed84 6ac5 	vstr	s12, [r4, #788]	; 0x314
 80159e2:	9300      	str	r3, [sp, #0]
 80159e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80159e6:	f7fc fb1d 	bl	8012024 <kf_update>
 80159ea:	edd4 6a6d 	vldr	s13, [r4, #436]	; 0x1b4
 80159ee:	ed94 6a6c 	vldr	s12, [r4, #432]	; 0x1b0
 80159f2:	ed94 7a6e 	vldr	s14, [r4, #440]	; 0x1b8
 80159f6:	ee66 7aa6 	vmul.f32	s15, s13, s13
 80159fa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80159fe:	eee6 7a06 	vfma.f32	s15, s12, s12
 8015a02:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015a06:	eef4 7ae5 	vcmpe.f32	s15, s11
 8015a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a0e:	f100 80bb 	bmi.w	8015b88 <iNemoEngine_API_Update+0x2590>
 8015a12:	ed5f 5a6c 	vldr	s11, [pc, #-432]	; 8015864 <iNemoEngine_API_Update+0x226c>
 8015a16:	ed8d 6a52 	vstr	s12, [sp, #328]	; 0x148
 8015a1a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8015a1e:	aa4e      	add	r2, sp, #312	; 0x138
 8015a20:	a8ae      	add	r0, sp, #696	; 0x2b8
 8015a22:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8015a26:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8015a2a:	4611      	mov	r1, r2
 8015a2c:	ae68      	add	r6, sp, #416	; 0x1a0
 8015a2e:	af70      	add	r7, sp, #448	; 0x1c0
 8015a30:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 8015a34:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8015a38:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 8015a3c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8015a40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015a44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015a48:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015a4c:	edcd 5a55 	vstr	s11, [sp, #340]	; 0x154
 8015a50:	ed8d 6aae 	vstr	s12, [sp, #696]	; 0x2b8
 8015a54:	edcd 6aaf 	vstr	s13, [sp, #700]	; 0x2bc
 8015a58:	ed8d 7ab0 	vstr	s14, [sp, #704]	; 0x2c0
 8015a5c:	edcd 7ab1 	vstr	s15, [sp, #708]	; 0x2c4
 8015a60:	f7fc f920 	bl	8011ca4 <qmult>
 8015a64:	ed92 6a01 	vldr	s12, [r2, #4]
 8015a68:	edd2 5a00 	vldr	s11, [r2]
 8015a6c:	edd2 6a02 	vldr	s13, [r2, #8]
 8015a70:	ed92 7a03 	vldr	s14, [r2, #12]
 8015a74:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8015a76:	ee66 7a06 	vmul.f32	s15, s12, s12
 8015a7a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8015a7e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8015a82:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8015a86:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015a8a:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8015a8e:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8015a92:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8015a96:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015a9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015aa2:	edcd 5a4a 	vstr	s11, [sp, #296]	; 0x128
 8015aa6:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 8015aaa:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 8015aae:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
 8015ab2:	4634      	mov	r4, r6
 8015ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015ab6:	42bc      	cmp	r4, r7
 8015ab8:	f105 0510 	add.w	r5, r5, #16
 8015abc:	f106 0610 	add.w	r6, r6, #16
 8015ac0:	f845 0c10 	str.w	r0, [r5, #-16]
 8015ac4:	f845 1c0c 	str.w	r1, [r5, #-12]
 8015ac8:	f845 2c08 	str.w	r2, [r5, #-8]
 8015acc:	f845 3c04 	str.w	r3, [r5, #-4]
 8015ad0:	d1ef      	bne.n	8015ab2 <iNemoEngine_API_Update+0x24ba>
 8015ad2:	6830      	ldr	r0, [r6, #0]
 8015ad4:	6028      	str	r0, [r5, #0]
 8015ad6:	9e06      	ldr	r6, [sp, #24]
 8015ad8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8015ada:	f8d6 31bc 	ldr.w	r3, [r6, #444]	; 0x1bc
 8015ade:	6013      	str	r3, [r2, #0]
 8015ae0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015ae2:	f8d6 31c0 	ldr.w	r3, [r6, #448]	; 0x1c0
 8015ae6:	6013      	str	r3, [r2, #0]
 8015ae8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8015aea:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 8015aee:	6013      	str	r3, [r2, #0]
 8015af0:	ad4a      	add	r5, sp, #296	; 0x128
 8015af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015af4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8015af6:	60eb      	str	r3, [r5, #12]
 8015af8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015afa:	6028      	str	r0, [r5, #0]
 8015afc:	6069      	str	r1, [r5, #4]
 8015afe:	60aa      	str	r2, [r5, #8]
 8015b00:	edd6 9a75 	vldr	s19, [r6, #468]	; 0x1d4
 8015b04:	edc3 5a00 	vstr	s11, [r3]
 8015b08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015b0a:	f8d6 794c 	ldr.w	r7, [r6, #2380]	; 0x94c
 8015b0e:	ed83 6a00 	vstr	s12, [r3]
 8015b12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015b14:	edc3 6a00 	vstr	s13, [r3]
 8015b18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015b1a:	accc      	add	r4, sp, #816	; 0x330
 8015b1c:	ed83 7a00 	vstr	s14, [r3]
 8015b20:	4635      	mov	r5, r6
 8015b22:	f7fd be20 	b.w	8013766 <iNemoEngine_API_Update+0x16e>
 8015b26:	9906      	ldr	r1, [sp, #24]
 8015b28:	f891 21a2 	ldrb.w	r2, [r1, #418]	; 0x1a2
 8015b2c:	2a31      	cmp	r2, #49	; 0x31
 8015b2e:	f63f aeca 	bhi.w	80158c6 <iNemoEngine_API_Update+0x22ce>
 8015b32:	3201      	adds	r2, #1
 8015b34:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 8015b38:	2200      	movs	r2, #0
 8015b3a:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8015b3e:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8015b42:	e6c0      	b.n	80158c6 <iNemoEngine_API_Update+0x22ce>
 8015b44:	9a06      	ldr	r2, [sp, #24]
 8015b46:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	f340 8398 	ble.w	801627e <iNemoEngine_API_Update+0x2c86>
 8015b4e:	3b01      	subs	r3, #1
 8015b50:	6593      	str	r3, [r2, #88]	; 0x58
 8015b52:	2300      	movs	r3, #0
 8015b54:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 8015b58:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8015b5c:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8015b60:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 8015b64:	f7ff bb8b 	b.w	801527e <iNemoEngine_API_Update+0x1c86>
 8015b68:	7b53      	ldrb	r3, [r2, #13]
 8015b6a:	7b92      	ldrb	r2, [r2, #14]
 8015b6c:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 8015b70:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 8015b74:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8015b78:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 8015b7c:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 8015b80:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 8015b84:	f7ff bb07 	b.w	8015196 <iNemoEngine_API_Update+0x1b9e>
 8015b88:	ee35 5ae7 	vsub.f32	s10, s11, s15
 8015b8c:	eef1 5ac5 	vsqrt.f32	s11, s10
 8015b90:	e741      	b.n	8015a16 <iNemoEngine_API_Update+0x241e>
 8015b92:	f9b5 3974 	ldrsh.w	r3, [r5, #2420]	; 0x974
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	f341 8173 	ble.w	8016e82 <iNemoEngine_API_Update+0x388a>
 8015b9c:	3b01      	subs	r3, #1
 8015b9e:	f8a5 3974 	strh.w	r3, [r5, #2420]	; 0x974
 8015ba2:	f7fd bd51 	b.w	8013648 <iNemoEngine_API_Update+0x50>
 8015ba6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015baa:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015bae:	eea7 6a07 	vfma.f32	s12, s14, s14
 8015bb2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015bb6:	eeb0 8a67 	vmov.f32	s16, s15
 8015bba:	eef0 7a46 	vmov.f32	s15, s12
 8015bbe:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8015bc2:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8015bc6:	ee17 0a90 	vmov	r0, s15
 8015bca:	f7ea fcc7 	bl	800055c <__aeabi_f2d>
 8015bce:	ee78 7a08 	vadd.f32	s15, s16, s16
 8015bd2:	4602      	mov	r2, r0
 8015bd4:	460b      	mov	r3, r1
 8015bd6:	ee17 0a90 	vmov	r0, s15
 8015bda:	ec43 2b18 	vmov	d8, r2, r3
 8015bde:	f7ea fcbd 	bl	800055c <__aeabi_f2d>
 8015be2:	eeb0 1a48 	vmov.f32	s2, s16
 8015be6:	eef0 1a68 	vmov.f32	s3, s17
 8015bea:	ec41 0b10 	vmov	d0, r0, r1
 8015bee:	f006 ffa5 	bl	801cb3c <atan2>
 8015bf2:	a3eb      	add	r3, pc, #940	; (adr r3, 8015fa0 <iNemoEngine_API_Update+0x29a8>)
 8015bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf8:	ec51 0b10 	vmov	r0, r1, d0
 8015bfc:	f7ea fd06 	bl	800060c <__aeabi_dmul>
 8015c00:	4be9      	ldr	r3, [pc, #932]	; (8015fa8 <iNemoEngine_API_Update+0x29b0>)
 8015c02:	2200      	movs	r2, #0
 8015c04:	f7ea fb4c 	bl	80002a0 <__adddf3>
 8015c08:	f7ea fff8 	bl	8000bfc <__aeabi_d2f>
 8015c0c:	ee08 0a10 	vmov	s16, r0
 8015c10:	f7fd be3a 	b.w	8013888 <iNemoEngine_API_Update+0x290>
 8015c14:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015c18:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015c1c:	eea7 6a07 	vfma.f32	s12, s14, s14
 8015c20:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015c24:	eeb0 8a67 	vmov.f32	s16, s15
 8015c28:	eef0 7a46 	vmov.f32	s15, s12
 8015c2c:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8015c30:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8015c34:	ee17 0a90 	vmov	r0, s15
 8015c38:	f7ea fc90 	bl	800055c <__aeabi_f2d>
 8015c3c:	ee78 7a08 	vadd.f32	s15, s16, s16
 8015c40:	4602      	mov	r2, r0
 8015c42:	460b      	mov	r3, r1
 8015c44:	ee17 0a90 	vmov	r0, s15
 8015c48:	ec43 2b18 	vmov	d8, r2, r3
 8015c4c:	f7ea fc86 	bl	800055c <__aeabi_f2d>
 8015c50:	eeb0 1a48 	vmov.f32	s2, s16
 8015c54:	eef0 1a68 	vmov.f32	s3, s17
 8015c58:	ec41 0b10 	vmov	d0, r0, r1
 8015c5c:	f006 ff6e 	bl	801cb3c <atan2>
 8015c60:	a3cf      	add	r3, pc, #828	; (adr r3, 8015fa0 <iNemoEngine_API_Update+0x29a8>)
 8015c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c66:	ec51 0b10 	vmov	r0, r1, d0
 8015c6a:	f7ea fccf 	bl	800060c <__aeabi_dmul>
 8015c6e:	4bce      	ldr	r3, [pc, #824]	; (8015fa8 <iNemoEngine_API_Update+0x29b0>)
 8015c70:	2200      	movs	r2, #0
 8015c72:	f7ea fb13 	bl	800029c <__aeabi_dsub>
 8015c76:	f7ea ffc1 	bl	8000bfc <__aeabi_d2f>
 8015c7a:	ee08 0a10 	vmov	s16, r0
 8015c7e:	f7fd be03 	b.w	8013888 <iNemoEngine_API_Update+0x290>
 8015c82:	ed9f baca 	vldr	s22, [pc, #808]	; 8015fac <iNemoEngine_API_Update+0x29b4>
 8015c86:	49ca      	ldr	r1, [pc, #808]	; (8015fb0 <iNemoEngine_API_Update+0x29b8>)
 8015c88:	9806      	ldr	r0, [sp, #24]
 8015c8a:	f7fd beba 	b.w	8013a02 <iNemoEngine_API_Update+0x40a>
 8015c8e:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8015c92:	ee17 0a90 	vmov	r0, s15
 8015c96:	f7ea fc61 	bl	800055c <__aeabi_f2d>
 8015c9a:	ec41 0b10 	vmov	d0, r0, r1
 8015c9e:	f007 ff17 	bl	801dad0 <floor>
 8015ca2:	ec51 0b10 	vmov	r0, r1, d0
 8015ca6:	f7ea ffa9 	bl	8000bfc <__aeabi_d2f>
 8015caa:	ee0c 0a10 	vmov	s24, r0
 8015cae:	f7fe b937 	b.w	8013f20 <iNemoEngine_API_Update+0x928>
 8015cb2:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015cb6:	ee17 0a90 	vmov	r0, s15
 8015cba:	f7ea fc4f 	bl	800055c <__aeabi_f2d>
 8015cbe:	ec41 0b10 	vmov	d0, r0, r1
 8015cc2:	f007 ff05 	bl	801dad0 <floor>
 8015cc6:	ec51 0b10 	vmov	r0, r1, d0
 8015cca:	f7ea ff97 	bl	8000bfc <__aeabi_d2f>
 8015cce:	ee08 0a10 	vmov	s16, r0
 8015cd2:	f7fe b8fa 	b.w	8013eca <iNemoEngine_API_Update+0x8d2>
 8015cd6:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8015cda:	ee17 0a90 	vmov	r0, s15
 8015cde:	f7ea fc3d 	bl	800055c <__aeabi_f2d>
 8015ce2:	ec41 0b10 	vmov	d0, r0, r1
 8015ce6:	f007 fef3 	bl	801dad0 <floor>
 8015cea:	ec51 0b10 	vmov	r0, r1, d0
 8015cee:	f7ea ff85 	bl	8000bfc <__aeabi_d2f>
 8015cf2:	ee08 0a90 	vmov	s17, r0
 8015cf6:	f7fe b8bd 	b.w	8013e74 <iNemoEngine_API_Update+0x87c>
 8015cfa:	2c00      	cmp	r4, #0
 8015cfc:	f47f aa59 	bne.w	80151b2 <iNemoEngine_API_Update+0x1bba>
 8015d00:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
 8015d04:	f88d 40ea 	strb.w	r4, [sp, #234]	; 0xea
 8015d08:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 8015d0c:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 8015d10:	f7ff ba5c 	b.w	80151cc <iNemoEngine_API_Update+0x1bd4>
 8015d14:	eddf 5aa7 	vldr	s11, [pc, #668]	; 8015fb4 <iNemoEngine_API_Update+0x29bc>
 8015d18:	ed9f 4aa7 	vldr	s8, [pc, #668]	; 8015fb8 <iNemoEngine_API_Update+0x29c0>
 8015d1c:	ed9f 6aa7 	vldr	s12, [pc, #668]	; 8015fbc <iNemoEngine_API_Update+0x29c4>
 8015d20:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8015fc0 <iNemoEngine_API_Update+0x29c8>
 8015d24:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8015fc4 <iNemoEngine_API_Update+0x29cc>
 8015d28:	f7ff b9b2 	b.w	8015090 <iNemoEngine_API_Update+0x1a98>
 8015d2c:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8015d30:	2400      	movs	r4, #0
 8015d32:	461a      	mov	r2, r3
 8015d34:	f7ff b89f 	b.w	8014e76 <iNemoEngine_API_Update+0x187e>
 8015d38:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8015d3c:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 8015d40:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8015d44:	eee7 4a84 	vfma.f32	s9, s15, s8
 8015d48:	f7ff b86b 	b.w	8014e22 <iNemoEngine_API_Update+0x182a>
 8015d4c:	3305      	adds	r3, #5
 8015d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8015d50:	f7ff ba95 	b.w	801527e <iNemoEngine_API_Update+0x1c86>
 8015d54:	edd2 4a48 	vldr	s9, [r2, #288]	; 0x120
 8015d58:	eef4 4ae8 	vcmpe.f32	s9, s17
 8015d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d60:	f341 8112 	ble.w	8016f88 <iNemoEngine_API_Update+0x3990>
 8015d64:	ed92 7a32 	vldr	s14, [r2, #200]	; 0xc8
 8015d68:	eef4 8ac7 	vcmpe.f32	s17, s14
 8015d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d70:	4613      	mov	r3, r2
 8015d72:	f101 8392 	bmi.w	801749a <iNemoEngine_API_Update+0x3ea2>
 8015d76:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 8015d7a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d82:	f141 83a2 	bpl.w	80174ca <iNemoEngine_API_Update+0x3ed2>
 8015d86:	edd3 3a33 	vldr	s7, [r3, #204]	; 0xcc
 8015d8a:	ed93 4a35 	vldr	s8, [r3, #212]	; 0xd4
 8015d8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015d92:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015d96:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8015d9a:	ee24 7a07 	vmul.f32	s14, s8, s14
 8015d9e:	ee87 fa27 	vdiv.f32	s30, s14, s15
 8015da2:	ee3f fa23 	vadd.f32	s30, s30, s7
 8015da6:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8015daa:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015db2:	f2c1 83a3 	blt.w	80174fc <iNemoEngine_API_Update+0x3f04>
 8015db6:	9b06      	ldr	r3, [sp, #24]
 8015db8:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8015dbc:	eef4 8ac7 	vcmpe.f32	s17, s14
 8015dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dc4:	f141 86ad 	bpl.w	8017b22 <iNemoEngine_API_Update+0x452a>
 8015dc8:	edd3 3a37 	vldr	s7, [r3, #220]	; 0xdc
 8015dcc:	ed93 4a39 	vldr	s8, [r3, #228]	; 0xe4
 8015dd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015dd4:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015dd8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015ddc:	ee64 7a27 	vmul.f32	s15, s8, s15
 8015de0:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8015de4:	ee3f fa23 	vadd.f32	s30, s30, s7
 8015de8:	9b06      	ldr	r3, [sp, #24]
 8015dea:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8015dee:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015df6:	f2c1 83a3 	blt.w	8017540 <iNemoEngine_API_Update+0x3f48>
 8015dfa:	9b06      	ldr	r3, [sp, #24]
 8015dfc:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8015e00:	eef4 8ac7 	vcmpe.f32	s17, s14
 8015e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e08:	f141 86ca 	bpl.w	8017ba0 <iNemoEngine_API_Update+0x45a8>
 8015e0c:	edd3 3a3b 	vldr	s7, [r3, #236]	; 0xec
 8015e10:	ed93 4a3d 	vldr	s8, [r3, #244]	; 0xf4
 8015e14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015e18:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015e1c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015e20:	ee64 7a27 	vmul.f32	s15, s8, s15
 8015e24:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8015e28:	ee3f fa23 	vadd.f32	s30, s30, s7
 8015e2c:	9b06      	ldr	r3, [sp, #24]
 8015e2e:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8015e32:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e3a:	f2c1 83a3 	blt.w	8017584 <iNemoEngine_API_Update+0x3f8c>
 8015e3e:	9b06      	ldr	r3, [sp, #24]
 8015e40:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 8015e44:	eef4 8ac7 	vcmpe.f32	s17, s14
 8015e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e4c:	f141 866c 	bpl.w	8017b28 <iNemoEngine_API_Update+0x4530>
 8015e50:	edd3 3a3f 	vldr	s7, [r3, #252]	; 0xfc
 8015e54:	ed93 4a41 	vldr	s8, [r3, #260]	; 0x104
 8015e58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015e5c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015e60:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015e64:	ee64 7a27 	vmul.f32	s15, s8, s15
 8015e68:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8015e6c:	ee3f fa23 	vadd.f32	s30, s30, s7
 8015e70:	9b06      	ldr	r3, [sp, #24]
 8015e72:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8015e76:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e7e:	f2c1 83a3 	blt.w	80175c8 <iNemoEngine_API_Update+0x3fd0>
 8015e82:	9b06      	ldr	r3, [sp, #24]
 8015e84:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 8015e88:	eef4 8ac7 	vcmpe.f32	s17, s14
 8015e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e90:	f141 863c 	bpl.w	8017b0c <iNemoEngine_API_Update+0x4514>
 8015e94:	edd3 3a43 	vldr	s7, [r3, #268]	; 0x10c
 8015e98:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 8015e9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015ea0:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015ea4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015ea8:	ee64 7a27 	vmul.f32	s15, s8, s15
 8015eac:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8015eb0:	ee3f fa23 	vadd.f32	s30, s30, s7
 8015eb4:	9b06      	ldr	r3, [sp, #24]
 8015eb6:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 8015eba:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ec2:	f6fe ae38 	blt.w	8014b36 <iNemoEngine_API_Update+0x153e>
 8015ec6:	9b06      	ldr	r3, [sp, #24]
 8015ec8:	ed93 4a47 	vldr	s8, [r3, #284]	; 0x11c
 8015ecc:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8015ed0:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8015ed4:	ee37 7a44 	vsub.f32	s14, s14, s8
 8015ed8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015ee0:	ee87 faa4 	vdiv.f32	s30, s15, s9
 8015ee4:	ee3f fa04 	vadd.f32	s30, s30, s8
 8015ee8:	f7fe be25 	b.w	8014b36 <iNemoEngine_API_Update+0x153e>
 8015eec:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8015ef0:	ee17 0a90 	vmov	r0, s15
 8015ef4:	f7ea fb32 	bl	800055c <__aeabi_f2d>
 8015ef8:	ec41 0b10 	vmov	d0, r0, r1
 8015efc:	f007 fde8 	bl	801dad0 <floor>
 8015f00:	ec51 0b10 	vmov	r0, r1, d0
 8015f04:	f7ea fe7a 	bl	8000bfc <__aeabi_d2f>
 8015f08:	ee08 0a90 	vmov	s17, r0
 8015f0c:	f7fe b930 	b.w	8014170 <iNemoEngine_API_Update+0xb78>
 8015f10:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8015f14:	ee17 0a90 	vmov	r0, s15
 8015f18:	f7ea fb20 	bl	800055c <__aeabi_f2d>
 8015f1c:	ec41 0b10 	vmov	d0, r0, r1
 8015f20:	f007 fdd6 	bl	801dad0 <floor>
 8015f24:	ec51 0b10 	vmov	r0, r1, d0
 8015f28:	f7ea fe68 	bl	8000bfc <__aeabi_d2f>
 8015f2c:	ee08 0a90 	vmov	s17, r0
 8015f30:	f7fe b8b5 	b.w	801409e <iNemoEngine_API_Update+0xaa6>
 8015f34:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8015f38:	ee17 0a90 	vmov	r0, s15
 8015f3c:	f7ea fb0e 	bl	800055c <__aeabi_f2d>
 8015f40:	ec41 0b10 	vmov	d0, r0, r1
 8015f44:	f007 fdc4 	bl	801dad0 <floor>
 8015f48:	ec51 0b10 	vmov	r0, r1, d0
 8015f4c:	f7ea fe56 	bl	8000bfc <__aeabi_d2f>
 8015f50:	ee0c 0a10 	vmov	s24, r0
 8015f54:	f7fe b878 	b.w	8014048 <iNemoEngine_API_Update+0xa50>
 8015f58:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015f5c:	ee17 0a90 	vmov	r0, s15
 8015f60:	f7ea fafc 	bl	800055c <__aeabi_f2d>
 8015f64:	ec41 0b10 	vmov	d0, r0, r1
 8015f68:	f007 fdb2 	bl	801dad0 <floor>
 8015f6c:	ec51 0b10 	vmov	r0, r1, d0
 8015f70:	f7ea fe44 	bl	8000bfc <__aeabi_d2f>
 8015f74:	ee08 0a10 	vmov	s16, r0
 8015f78:	f7fe b83b 	b.w	8013ff2 <iNemoEngine_API_Update+0x9fa>
 8015f7c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015f80:	ee17 0a90 	vmov	r0, s15
 8015f84:	f7ea faea 	bl	800055c <__aeabi_f2d>
 8015f88:	ec41 0b10 	vmov	d0, r0, r1
 8015f8c:	f007 fda0 	bl	801dad0 <floor>
 8015f90:	ec51 0b10 	vmov	r0, r1, d0
 8015f94:	f7ea fe32 	bl	8000bfc <__aeabi_d2f>
 8015f98:	ee08 0a10 	vmov	s16, r0
 8015f9c:	f7fe b93e 	b.w	801421c <iNemoEngine_API_Update+0xc24>
 8015fa0:	20000000 	.word	0x20000000
 8015fa4:	404ca5dc 	.word	0x404ca5dc
 8015fa8:	40568000 	.word	0x40568000
 8015fac:	3dcccccd 	.word	0x3dcccccd
 8015fb0:	3a83126f 	.word	0x3a83126f
 8015fb4:	3c75c28f 	.word	0x3c75c28f
 8015fb8:	391d4951 	.word	0x391d4951
 8015fbc:	383cbe62 	.word	0x383cbe62
 8015fc0:	469c3e00 	.word	0x469c3e00
 8015fc4:	43168000 	.word	0x43168000
 8015fc8:	3d088889 	.word	0x3d088889
 8015fcc:	3e4ccccd 	.word	0x3e4ccccd
 8015fd0:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8015fd4:	ee17 0a90 	vmov	r0, s15
 8015fd8:	f7ea fac0 	bl	800055c <__aeabi_f2d>
 8015fdc:	ec41 0b10 	vmov	d0, r0, r1
 8015fe0:	f007 fd76 	bl	801dad0 <floor>
 8015fe4:	ec51 0b10 	vmov	r0, r1, d0
 8015fe8:	f7ea fe08 	bl	8000bfc <__aeabi_d2f>
 8015fec:	ee0c 0a10 	vmov	s24, r0
 8015ff0:	f7fe b8e9 	b.w	80141c6 <iNemoEngine_API_Update+0xbce>
 8015ff4:	2a00      	cmp	r2, #0
 8015ff6:	f43f a910 	beq.w	801521a <iNemoEngine_API_Update+0x1c22>
 8015ffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015ffe:	ee39 9a47 	vsub.f32	s18, s18, s14
 8016002:	eef0 7ac9 	vabs.f32	s15, s18
 8016006:	ee29 9a09 	vmul.f32	s18, s18, s18
 801600a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801600e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016012:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8016016:	bfb8      	it	lt
 8016018:	eef0 7a46 	vmovlt.f32	s15, s12
 801601c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016020:	edcd 7a8d 	vstr	s15, [sp, #564]	; 0x234
 8016024:	f77f a900 	ble.w	8015228 <iNemoEngine_API_Update+0x1c30>
 8016028:	eddd 7a86 	vldr	s15, [sp, #536]	; 0x218
 801602c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8016030:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8016034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016038:	f77f a8f6 	ble.w	8015228 <iNemoEngine_API_Update+0x1c30>
 801603c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8016040:	edcd 7a86 	vstr	s15, [sp, #536]	; 0x218
 8016044:	eddd 7a87 	vldr	s15, [sp, #540]	; 0x21c
 8016048:	ee67 7a89 	vmul.f32	s15, s15, s18
 801604c:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 8016050:	eddd 7a88 	vldr	s15, [sp, #544]	; 0x220
 8016054:	ee27 9a89 	vmul.f32	s18, s15, s18
 8016058:	ed8d 9a88 	vstr	s18, [sp, #544]	; 0x220
 801605c:	f7ff b8e4 	b.w	8015228 <iNemoEngine_API_Update+0x1c30>
 8016060:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8016064:	2a01      	cmp	r2, #1
 8016066:	f000 877b 	beq.w	8016f60 <iNemoEngine_API_Update+0x3968>
 801606a:	2b02      	cmp	r3, #2
 801606c:	f040 8778 	bne.w	8016f60 <iNemoEngine_API_Update+0x3968>
 8016070:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8016074:	9a06      	ldr	r2, [sp, #24]
 8016076:	ee87 7a8d 	vdiv.f32	s14, s15, s26
 801607a:	f240 1301 	movw	r3, #257	; 0x101
 801607e:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
 8016082:	2301      	movs	r3, #1
 8016084:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 8016088:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 801608c:	ed92 6a64 	vldr	s12, [r2, #400]	; 0x190
 8016090:	ed8d 7a3d 	vstr	s14, [sp, #244]	; 0xf4
 8016094:	eecb 5a27 	vdiv.f32	s11, s22, s15
 8016098:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 801609c:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 80160a0:	eecd 7aa7 	vdiv.f32	s15, s27, s15
 80160a4:	eeb4 5a00 	vmov.f32	s10, #64	; 0x3e000000  0.125
 80160a8:	ee26 6a05 	vmul.f32	s12, s12, s10
 80160ac:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 80160b0:	eeb4 6ae8 	vcmpe.f32	s12, s17
 80160b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160b8:	f280 87d8 	bge.w	801706c <iNemoEngine_API_Update+0x3a74>
 80160bc:	ed9d 6a18 	vldr	s12, [sp, #96]	; 0x60
 80160c0:	eeb4 dac6 	vcmpe.f32	s26, s12
 80160c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160c8:	f341 83a4 	ble.w	8017814 <iNemoEngine_API_Update+0x421c>
 80160cc:	ed9d 6a16 	vldr	s12, [sp, #88]	; 0x58
 80160d0:	eeb4 6acb 	vcmpe.f32	s12, s22
 80160d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160d8:	f341 839c 	ble.w	8017814 <iNemoEngine_API_Update+0x421c>
 80160dc:	ed9d 6a17 	vldr	s12, [sp, #92]	; 0x5c
 80160e0:	eeb4 6aed 	vcmpe.f32	s12, s27
 80160e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160e8:	f341 8394 	ble.w	8017814 <iNemoEngine_API_Update+0x421c>
 80160ec:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 80160f0:	eeb4 8ac6 	vcmpe.f32	s16, s12
 80160f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160f8:	f141 838c 	bpl.w	8017814 <iNemoEngine_API_Update+0x421c>
 80160fc:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016100:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8016104:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016108:	eef4 7ac6 	vcmpe.f32	s15, s12
 801610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016110:	f141 8380 	bpl.w	8017814 <iNemoEngine_API_Update+0x421c>
 8016114:	2300      	movs	r3, #0
 8016116:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 801611a:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 801611e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8016122:	2a00      	cmp	r2, #0
 8016124:	f040 87c7 	bne.w	80170b6 <iNemoEngine_API_Update+0x3abe>
 8016128:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801612a:	a840      	add	r0, sp, #256	; 0x100
 801612c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016130:	4613      	mov	r3, r2
 8016132:	edd2 7a00 	vldr	s15, [r2]
 8016136:	3101      	adds	r1, #1
 8016138:	330c      	adds	r3, #12
 801613a:	3204      	adds	r2, #4
 801613c:	461c      	mov	r4, r3
 801613e:	ed94 7a00 	vldr	s14, [r4]
 8016142:	330c      	adds	r3, #12
 8016144:	4598      	cmp	r8, r3
 8016146:	ee77 7a87 	vadd.f32	s15, s15, s14
 801614a:	d1f7      	bne.n	801613c <iNemoEngine_API_Update+0x2b44>
 801614c:	2902      	cmp	r1, #2
 801614e:	ece0 7a01 	vstmia	r0!, {s15}
 8016152:	f108 0804 	add.w	r8, r8, #4
 8016156:	d1eb      	bne.n	8016130 <iNemoEngine_API_Update+0x2b38>
 8016158:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 8015fc8 <iNemoEngine_API_Update+0x29d0>
 801615c:	9b06      	ldr	r3, [sp, #24]
 801615e:	eddd 4a40 	vldr	s9, [sp, #256]	; 0x100
 8016162:	ed9d 5a41 	vldr	s10, [sp, #260]	; 0x104
 8016166:	eddd 5a42 	vldr	s11, [sp, #264]	; 0x108
 801616a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801616c:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 8016170:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8016174:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016178:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801617c:	f503 71b2 	add.w	r1, r3, #356	; 0x164
 8016180:	4602      	mov	r2, r0
 8016182:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 8016186:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 801618a:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 801618e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016196:	f103 030c 	add.w	r3, r3, #12
 801619a:	bf88      	it	hi
 801619c:	eef0 7a47 	vmovhi.f32	s15, s14
 80161a0:	4293      	cmp	r3, r2
 80161a2:	d1f2      	bne.n	801618a <iNemoEngine_API_Update+0x2b92>
 80161a4:	1d1a      	adds	r2, r3, #4
 80161a6:	4291      	cmp	r1, r2
 80161a8:	ece4 7a01 	vstmia	r4!, {s15}
 80161ac:	d1e9      	bne.n	8016182 <iNemoEngine_API_Update+0x2b8a>
 80161ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161b0:	ed9d 4a3d 	vldr	s8, [sp, #244]	; 0xf4
 80161b4:	edd3 7a00 	vldr	s15, [r3]
 80161b8:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 80161bc:	ed9d 6a3f 	vldr	s12, [sp, #252]	; 0xfc
 80161c0:	9b06      	ldr	r3, [sp, #24]
 80161c2:	ee97 4aa4 	vfnms.f32	s8, s15, s9
 80161c6:	785b      	ldrb	r3, [r3, #1]
 80161c8:	ee97 7a85 	vfnms.f32	s14, s15, s10
 80161cc:	ee97 6aa5 	vfnms.f32	s12, s15, s11
 80161d0:	eef0 4a47 	vmov.f32	s9, s14
 80161d4:	ed8d 4a40 	vstr	s8, [sp, #256]	; 0x100
 80161d8:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 80161dc:	ed8d 6a42 	vstr	s12, [sp, #264]	; 0x108
 80161e0:	b13b      	cbz	r3, 80161f2 <iNemoEngine_API_Update+0x2bfa>
 80161e2:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80161e6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80161ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ee:	f101 83e1 	bmi.w	80179b4 <iNemoEngine_API_Update+0x43bc>
 80161f2:	9b06      	ldr	r3, [sp, #24]
 80161f4:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
 80161f8:	2a1e      	cmp	r2, #30
 80161fa:	f001 843c 	beq.w	8017a76 <iNemoEngine_API_Update+0x447e>
 80161fe:	1c53      	adds	r3, r2, #1
 8016200:	2aff      	cmp	r2, #255	; 0xff
 8016202:	9906      	ldr	r1, [sp, #24]
 8016204:	bf14      	ite	ne
 8016206:	b2db      	uxtbne	r3, r3
 8016208:	23ff      	moveq	r3, #255	; 0xff
 801620a:	2200      	movs	r2, #0
 801620c:	f881 31a1 	strb.w	r3, [r1, #417]	; 0x1a1
 8016210:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8016214:	464b      	mov	r3, r9
 8016216:	f7ff bb46 	b.w	80158a6 <iNemoEngine_API_Update+0x22ae>
 801621a:	ed1f 7a94 	vldr	s14, [pc, #-592]	; 8015fcc <iNemoEngine_API_Update+0x29d4>
 801621e:	4603      	mov	r3, r0
 8016220:	f7fd bc03 	b.w	8013a2a <iNemoEngine_API_Update+0x432>
 8016224:	2b00      	cmp	r3, #0
 8016226:	f43e afe0 	beq.w	80151ea <iNemoEngine_API_Update+0x1bf2>
 801622a:	f89d 30e8 	ldrb.w	r3, [sp, #232]	; 0xe8
 801622e:	2b01      	cmp	r3, #1
 8016230:	d002      	beq.n	8016238 <iNemoEngine_API_Update+0x2c40>
 8016232:	2c01      	cmp	r4, #1
 8016234:	f47e afe2 	bne.w	80151fc <iNemoEngine_API_Update+0x1c04>
 8016238:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 801623c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8016240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016244:	bfb8      	it	lt
 8016246:	eeb0 5a67 	vmovlt.f32	s10, s15
 801624a:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 801624e:	ed8d 5a84 	vstr	s10, [sp, #528]	; 0x210
 8016252:	ed8d 5a85 	vstr	s10, [sp, #532]	; 0x214
 8016256:	f7fe bfd1 	b.w	80151fc <iNemoEngine_API_Update+0x1c04>
 801625a:	9b06      	ldr	r3, [sp, #24]
 801625c:	49c6      	ldr	r1, [pc, #792]	; (8016578 <iNemoEngine_API_Update+0x2f80>)
 801625e:	ed93 ba05 	vldr	s22, [r3, #20]
 8016262:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8016266:	ee67 7a87 	vmul.f32	s15, s15, s14
 801626a:	4618      	mov	r0, r3
 801626c:	f7fd bbc9 	b.w	8013a02 <iNemoEngine_API_Update+0x40a>
 8016270:	9b06      	ldr	r3, [sp, #24]
 8016272:	49c2      	ldr	r1, [pc, #776]	; (801657c <iNemoEngine_API_Update+0x2f84>)
 8016274:	ed93 ba05 	vldr	s22, [r3, #20]
 8016278:	4618      	mov	r0, r3
 801627a:	f7fd bbc2 	b.w	8013a02 <iNemoEngine_API_Update+0x40a>
 801627e:	4611      	mov	r1, r2
 8016280:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8016282:	2a00      	cmp	r2, #0
 8016284:	dd0c      	ble.n	80162a0 <iNemoEngine_API_Update+0x2ca8>
 8016286:	ed9d 7a03 	vldr	s14, [sp, #12]
 801628a:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 801628e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016296:	dd03      	ble.n	80162a0 <iNemoEngine_API_Update+0x2ca8>
 8016298:	3a01      	subs	r2, #1
 801629a:	65ca      	str	r2, [r1, #92]	; 0x5c
 801629c:	f7fe bfef 	b.w	801527e <iNemoEngine_API_Update+0x1c86>
 80162a0:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 80162a4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80162a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80162ac:	eeb4 bac7 	vcmpe.f32	s22, s14
 80162b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162b4:	f57e afe3 	bpl.w	801527e <iNemoEngine_API_Update+0x1c86>
 80162b8:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 80162bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162c0:	eef4 dae7 	vcmpe.f32	s27, s15
 80162c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162c8:	f57e afd9 	bpl.w	801527e <iNemoEngine_API_Update+0x1c86>
 80162cc:	ee7d 7a0d 	vadd.f32	s15, s26, s26
 80162d0:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 80162d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80162d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162dc:	f341 8492 	ble.w	8017c04 <iNemoEngine_API_Update+0x460c>
 80162e0:	9a06      	ldr	r2, [sp, #24]
 80162e2:	3303      	adds	r3, #3
 80162e4:	e434      	b.n	8015b50 <iNemoEngine_API_Update+0x2558>
 80162e6:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8016580 <iNemoEngine_API_Update+0x2f88>
 80162ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80162ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162f2:	f57e ae7b 	bpl.w	8014fec <iNemoEngine_API_Update+0x19f4>
 80162f6:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8016584 <iNemoEngine_API_Update+0x2f8c>
 80162fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80162fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016302:	f280 80c9 	bge.w	8016498 <iNemoEngine_API_Update+0x2ea0>
 8016306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801630a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8016588 <iNemoEngine_API_Update+0x2f90>
 801630e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016316:	f280 80d5 	bge.w	80164c4 <iNemoEngine_API_Update+0x2ecc>
 801631a:	eddf 6a9c 	vldr	s13, [pc, #624]	; 801658c <iNemoEngine_API_Update+0x2f94>
 801631e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016326:	f280 80e3 	bge.w	80164f0 <iNemoEngine_API_Update+0x2ef8>
 801632a:	eddf 6a99 	vldr	s13, [pc, #612]	; 8016590 <iNemoEngine_API_Update+0x2f98>
 801632e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016336:	f280 80f1 	bge.w	801651c <iNemoEngine_API_Update+0x2f24>
 801633a:	eddf 6a96 	vldr	s13, [pc, #600]	; 8016594 <iNemoEngine_API_Update+0x2f9c>
 801633e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016346:	f280 80ff 	bge.w	8016548 <iNemoEngine_API_Update+0x2f50>
 801634a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801634e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016356:	db0d      	blt.n	8016374 <iNemoEngine_API_Update+0x2d7c>
 8016358:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801635c:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8016598 <iNemoEngine_API_Update+0x2fa0>
 8016360:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8016364:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8016368:	ee66 6a87 	vmul.f32	s13, s13, s14
 801636c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801659c <iNemoEngine_API_Update+0x2fa4>
 8016370:	eea6 7a86 	vfma.f32	s14, s13, s12
 8016374:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80165a0 <iNemoEngine_API_Update+0x2fa8>
 8016378:	eef4 7ae6 	vcmpe.f32	s15, s13
 801637c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016380:	f141 82fa 	bpl.w	8017978 <iNemoEngine_API_Update+0x4380>
 8016384:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8016580 <iNemoEngine_API_Update+0x2f88>
 8016388:	eef4 7ae6 	vcmpe.f32	s15, s13
 801638c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016390:	f2c1 82fa 	blt.w	8017988 <iNemoEngine_API_Update+0x4390>
 8016394:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8016584 <iNemoEngine_API_Update+0x2f8c>
 8016398:	eef4 7ae6 	vcmpe.f32	s15, s13
 801639c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163a0:	f141 8296 	bpl.w	80178d0 <iNemoEngine_API_Update+0x42d8>
 80163a4:	ed9f 6a76 	vldr	s12, [pc, #472]	; 8016580 <iNemoEngine_API_Update+0x2f88>
 80163a8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80165a4 <iNemoEngine_API_Update+0x2fac>
 80163ac:	eddf 5a7e 	vldr	s11, [pc, #504]	; 80165a8 <iNemoEngine_API_Update+0x2fb0>
 80163b0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80163b4:	ee26 6a26 	vmul.f32	s12, s12, s13
 80163b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80163bc:	eee6 6a25 	vfma.f32	s13, s12, s11
 80163c0:	ed9f 6a71 	vldr	s12, [pc, #452]	; 8016588 <iNemoEngine_API_Update+0x2f90>
 80163c4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80163c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163cc:	f2c1 8296 	blt.w	80178fc <iNemoEngine_API_Update+0x4304>
 80163d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801658c <iNemoEngine_API_Update+0x2f94>
 80163d4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80163d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163dc:	f141 8296 	bpl.w	801790c <iNemoEngine_API_Update+0x4314>
 80163e0:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8016588 <iNemoEngine_API_Update+0x2f90>
 80163e4:	eddf 6a71 	vldr	s13, [pc, #452]	; 80165ac <iNemoEngine_API_Update+0x2fb4>
 80163e8:	eddf 5a71 	vldr	s11, [pc, #452]	; 80165b0 <iNemoEngine_API_Update+0x2fb8>
 80163ec:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80163f0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80163f4:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80165b4 <iNemoEngine_API_Update+0x2fbc>
 80163f8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80163fc:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8016590 <iNemoEngine_API_Update+0x2f98>
 8016400:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016408:	f2c1 8296 	blt.w	8017938 <iNemoEngine_API_Update+0x4340>
 801640c:	eddf 6a61 	vldr	s13, [pc, #388]	; 8016594 <iNemoEngine_API_Update+0x2f9c>
 8016410:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016418:	f141 8296 	bpl.w	8017948 <iNemoEngine_API_Update+0x4350>
 801641c:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8016590 <iNemoEngine_API_Update+0x2f98>
 8016420:	eddf 6a65 	vldr	s13, [pc, #404]	; 80165b8 <iNemoEngine_API_Update+0x2fc0>
 8016424:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8016428:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 801642c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8016430:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 8016434:	eee6 6a25 	vfma.f32	s13, s12, s11
 8016438:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801643c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016444:	db0d      	blt.n	8016462 <iNemoEngine_API_Update+0x2e6a>
 8016446:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801644a:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80165bc <iNemoEngine_API_Update+0x2fc4>
 801644e:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8016452:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016456:	ee26 6a26 	vmul.f32	s12, s12, s13
 801645a:	eddf 6a59 	vldr	s13, [pc, #356]	; 80165c0 <iNemoEngine_API_Update+0x2fc8>
 801645e:	eee6 6a25 	vfma.f32	s13, s12, s11
 8016462:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016466:	ee37 6a06 	vadd.f32	s12, s14, s12
 801646a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 801646e:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8016472:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8016584 <iNemoEngine_API_Update+0x2f8c>
 8016476:	ed9f 4a42 	vldr	s8, [pc, #264]	; 8016580 <iNemoEngine_API_Update+0x2f88>
 801647a:	eef4 5ac6 	vcmpe.f32	s11, s12
 801647e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016482:	bfb8      	it	lt
 8016484:	eef0 5a46 	vmovlt.f32	s11, s12
 8016488:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80165c4 <iNemoEngine_API_Update+0x2fcc>
 801648c:	ee25 4a84 	vmul.f32	s8, s11, s8
 8016490:	ee25 6a86 	vmul.f32	s12, s11, s12
 8016494:	f7fe bdfc 	b.w	8015090 <iNemoEngine_API_Update+0x1a98>
 8016498:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8016588 <iNemoEngine_API_Update+0x2f90>
 801649c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80164a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164a4:	d50e      	bpl.n	80164c4 <iNemoEngine_API_Update+0x2ecc>
 80164a6:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016584 <iNemoEngine_API_Update+0x2f8c>
 80164aa:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80165c8 <iNemoEngine_API_Update+0x2fd0>
 80164ae:	ed9f 6a47 	vldr	s12, [pc, #284]	; 80165cc <iNemoEngine_API_Update+0x2fd4>
 80164b2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80164b6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80164ba:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80165d0 <iNemoEngine_API_Update+0x2fd8>
 80164be:	eea6 7a86 	vfma.f32	s14, s13, s12
 80164c2:	e72a      	b.n	801631a <iNemoEngine_API_Update+0x2d22>
 80164c4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801658c <iNemoEngine_API_Update+0x2f94>
 80164c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80164cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164d0:	d50e      	bpl.n	80164f0 <iNemoEngine_API_Update+0x2ef8>
 80164d2:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8016588 <iNemoEngine_API_Update+0x2f90>
 80164d6:	ed9f 6a36 	vldr	s12, [pc, #216]	; 80165b0 <iNemoEngine_API_Update+0x2fb8>
 80164da:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80164de:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80164e2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80164e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80164ea:	eea6 7a86 	vfma.f32	s14, s13, s12
 80164ee:	e71c      	b.n	801632a <iNemoEngine_API_Update+0x2d32>
 80164f0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8016590 <iNemoEngine_API_Update+0x2f98>
 80164f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80164f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164fc:	d50e      	bpl.n	801651c <iNemoEngine_API_Update+0x2f24>
 80164fe:	eddf 6a23 	vldr	s13, [pc, #140]	; 801658c <iNemoEngine_API_Update+0x2f94>
 8016502:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8016506:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801650a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801650e:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8016512:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8016516:	eea6 7a86 	vfma.f32	s14, s13, s12
 801651a:	e70e      	b.n	801633a <iNemoEngine_API_Update+0x2d42>
 801651c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8016594 <iNemoEngine_API_Update+0x2f9c>
 8016520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016528:	d50e      	bpl.n	8016548 <iNemoEngine_API_Update+0x2f50>
 801652a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8016590 <iNemoEngine_API_Update+0x2f98>
 801652e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80165d4 <iNemoEngine_API_Update+0x2fdc>
 8016532:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8016536:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801653a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801653e:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8016542:	eea6 7a86 	vfma.f32	s14, s13, s12
 8016546:	e700      	b.n	801634a <iNemoEngine_API_Update+0x2d52>
 8016548:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801654c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016554:	f57f af00 	bpl.w	8016358 <iNemoEngine_API_Update+0x2d60>
 8016558:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8016594 <iNemoEngine_API_Update+0x2f9c>
 801655c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80165d8 <iNemoEngine_API_Update+0x2fe0>
 8016560:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80165dc <iNemoEngine_API_Update+0x2fe4>
 8016564:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8016568:	ee66 6a87 	vmul.f32	s13, s13, s14
 801656c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80165e0 <iNemoEngine_API_Update+0x2fe8>
 8016570:	eea6 7a86 	vfma.f32	s14, s13, s12
 8016574:	e6fe      	b.n	8016374 <iNemoEngine_API_Update+0x2d7c>
 8016576:	bf00      	nop
 8016578:	3727c5ac 	.word	0x3727c5ac
 801657c:	3ac49ba6 	.word	0x3ac49ba6
 8016580:	3c23d70a 	.word	0x3c23d70a
 8016584:	3c75c28f 	.word	0x3c75c28f
 8016588:	3cf5c28f 	.word	0x3cf5c28f
 801658c:	3d4ccccd 	.word	0x3d4ccccd
 8016590:	3dcccccd 	.word	0x3dcccccd
 8016594:	3e4ccccd 	.word	0x3e4ccccd
 8016598:	46979000 	.word	0x46979000
 801659c:	4415c000 	.word	0x4415c000
 80165a0:	3ba3d70a 	.word	0x3ba3d70a
 80165a4:	3d4cccc0 	.word	0x3d4cccc0
 80165a8:	43480000 	.word	0x43480000
 80165ac:	3eb33334 	.word	0x3eb33334
 80165b0:	4247ffff 	.word	0x4247ffff
 80165b4:	3f933333 	.word	0x3f933333
 80165b8:	410c0000 	.word	0x410c0000
 80165bc:	42c80000 	.word	0x42c80000
 80165c0:	424a0000 	.word	0x424a0000
 80165c4:	3b449ba6 	.word	0x3b449ba6
 80165c8:	3ecccccc 	.word	0x3ecccccc
 80165cc:	42855556 	.word	0x42855556
 80165d0:	3fcccccd 	.word	0x3fcccccd
 80165d4:	42d40000 	.word	0x42d40000
 80165d8:	43f00000 	.word	0x43f00000
 80165dc:	40555555 	.word	0x40555555
 80165e0:	42ee0000 	.word	0x42ee0000
 80165e4:	4615      	mov	r5, r2
 80165e6:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 80165ea:	49d7      	ldr	r1, [pc, #860]	; (8016948 <iNemoEngine_API_Update+0x3350>)
 80165ec:	4ad7      	ldr	r2, [pc, #860]	; (801694c <iNemoEngine_API_Update+0x3354>)
 80165ee:	4bd8      	ldr	r3, [pc, #864]	; (8016950 <iNemoEngine_API_Update+0x3358>)
 80165f0:	2000      	movs	r0, #0
 80165f2:	f885 0318 	strb.w	r0, [r5, #792]	; 0x318
 80165f6:	f205 6824 	addw	r8, r5, #1572	; 0x624
 80165fa:	6039      	str	r1, [r7, #0]
 80165fc:	f205 7194 	addw	r1, r5, #1940	; 0x794
 8016600:	f8c8 2000 	str.w	r2, [r8]
 8016604:	600b      	str	r3, [r1, #0]
 8016606:	f895 64b1 	ldrb.w	r6, [r5, #1201]	; 0x4b1
 801660a:	911b      	str	r1, [sp, #108]	; 0x6c
 801660c:	2e00      	cmp	r6, #0
 801660e:	f001 8297 	beq.w	8017b40 <iNemoEngine_API_Update+0x4548>
 8016612:	eddf 7ad0 	vldr	s15, [pc, #832]	; 8016954 <iNemoEngine_API_Update+0x335c>
 8016616:	ee68 faa7 	vmul.f32	s31, s17, s15
 801661a:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 801661e:	ee28 fa27 	vmul.f32	s30, s16, s15
 8016622:	ee6c da27 	vmul.f32	s27, s24, s15
 8016626:	ee7f 7acb 	vsub.f32	s15, s31, s22
 801662a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 801662e:	ee17 0a90 	vmov	r0, s15
 8016632:	f7e9 ff93 	bl	800055c <__aeabi_f2d>
 8016636:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 801663a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801663e:	ee17 0a90 	vmov	r0, s15
 8016642:	f7e9 ff8b 	bl	800055c <__aeabi_f2d>
 8016646:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 801664a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801664e:	ee17 0a90 	vmov	r0, s15
 8016652:	f7e9 ff83 	bl	800055c <__aeabi_f2d>
 8016656:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 801665a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801665e:	ee17 0a90 	vmov	r0, s15
 8016662:	f7e9 ff7b 	bl	800055c <__aeabi_f2d>
 8016666:	ee7d 7acb 	vsub.f32	s15, s27, s22
 801666a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801666e:	ee17 0a90 	vmov	r0, s15
 8016672:	f7e9 ff73 	bl	800055c <__aeabi_f2d>
 8016676:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 801667a:	4602      	mov	r2, r0
 801667c:	460b      	mov	r3, r1
 801667e:	ee17 0a90 	vmov	r0, s15
 8016682:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8016686:	f7e9 ff69 	bl	800055c <__aeabi_f2d>
 801668a:	9b06      	ldr	r3, [sp, #24]
 801668c:	ed9f bab8 	vldr	s22, [pc, #736]	; 8016970 <iNemoEngine_API_Update+0x3378>
 8016690:	eef0 7aef 	vabs.f32	s15, s31
 8016694:	edcd 7a03 	vstr	s15, [sp, #12]
 8016698:	eef0 7acf 	vabs.f32	s15, s30
 801669c:	f503 6597 	add.w	r5, r3, #1208	; 0x4b8
 80166a0:	edcd 7a04 	vstr	s15, [sp, #16]
 80166a4:	230c      	movs	r3, #12
 80166a6:	eef0 7aed 	vabs.f32	s15, s27
 80166aa:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80166ae:	fb13 5606 	smlabb	r6, r3, r6, r5
 80166b2:	edcd 7a05 	vstr	s15, [sp, #20]
 80166b6:	46aa      	mov	sl, r5
 80166b8:	e060      	b.n	801677c <iNemoEngine_API_Update+0x3184>
 80166ba:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8016958 <iNemoEngine_API_Update+0x3360>
 80166be:	eef4 8ae7 	vcmpe.f32	s17, s15
 80166c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166c6:	f280 8162 	bge.w	801698e <iNemoEngine_API_Update+0x3396>
 80166ca:	eddf 7aa4 	vldr	s15, [pc, #656]	; 801695c <iNemoEngine_API_Update+0x3364>
 80166ce:	eef4 8ae7 	vcmpe.f32	s17, s15
 80166d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d6:	f300 816c 	bgt.w	80169b2 <iNemoEngine_API_Update+0x33ba>
 80166da:	ed9d 0b08 	vldr	d0, [sp, #32]
 80166de:	f007 f977 	bl	801d9d0 <ceil>
 80166e2:	ec51 0b10 	vmov	r0, r1, d0
 80166e6:	f7ea fa89 	bl	8000bfc <__aeabi_d2f>
 80166ea:	eddd 7a04 	vldr	s15, [sp, #16]
 80166ee:	f8ca 0000 	str.w	r0, [sl]
 80166f2:	eef4 7acb 	vcmpe.f32	s15, s22
 80166f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166fa:	f140 8121 	bpl.w	8016940 <iNemoEngine_API_Update+0x3348>
 80166fe:	eddf 7a96 	vldr	s15, [pc, #600]	; 8016958 <iNemoEngine_API_Update+0x3360>
 8016702:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801670a:	f280 8137 	bge.w	801697c <iNemoEngine_API_Update+0x3384>
 801670e:	eddf 7a93 	vldr	s15, [pc, #588]	; 801695c <iNemoEngine_API_Update+0x3364>
 8016712:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801671a:	f300 8257 	bgt.w	8016bcc <iNemoEngine_API_Update+0x35d4>
 801671e:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 8016722:	f007 f955 	bl	801d9d0 <ceil>
 8016726:	ec51 0b10 	vmov	r0, r1, d0
 801672a:	f7ea fa67 	bl	8000bfc <__aeabi_d2f>
 801672e:	eddd 7a05 	vldr	s15, [sp, #20]
 8016732:	f8ca 0004 	str.w	r0, [sl, #4]
 8016736:	eef4 7acb 	vcmpe.f32	s15, s22
 801673a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801673e:	d527      	bpl.n	8016790 <iNemoEngine_API_Update+0x3198>
 8016740:	eddf 7a85 	vldr	s15, [pc, #532]	; 8016958 <iNemoEngine_API_Update+0x3360>
 8016744:	eeb4 cae7 	vcmpe.f32	s24, s15
 8016748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801674c:	f280 8128 	bge.w	80169a0 <iNemoEngine_API_Update+0x33a8>
 8016750:	eddf 7a82 	vldr	s15, [pc, #520]	; 801695c <iNemoEngine_API_Update+0x3364>
 8016754:	eeb4 cae7 	vcmpe.f32	s24, s15
 8016758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801675c:	f300 812b 	bgt.w	80169b6 <iNemoEngine_API_Update+0x33be>
 8016760:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8016764:	f007 f934 	bl	801d9d0 <ceil>
 8016768:	ec51 0b10 	vmov	r0, r1, d0
 801676c:	f7ea fa46 	bl	8000bfc <__aeabi_d2f>
 8016770:	f8ca 0008 	str.w	r0, [sl, #8]
 8016774:	f10a 0a0c 	add.w	sl, sl, #12
 8016778:	45b2      	cmp	sl, r6
 801677a:	d011      	beq.n	80167a0 <iNemoEngine_API_Update+0x31a8>
 801677c:	eddd 7a03 	vldr	s15, [sp, #12]
 8016780:	eef4 7acb 	vcmpe.f32	s15, s22
 8016784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016788:	d497      	bmi.n	80166ba <iNemoEngine_API_Update+0x30c2>
 801678a:	ee1f 0a90 	vmov	r0, s31
 801678e:	e7ac      	b.n	80166ea <iNemoEngine_API_Update+0x30f2>
 8016790:	ee1d 0a90 	vmov	r0, s27
 8016794:	f10a 0a0c 	add.w	sl, sl, #12
 8016798:	f84a 0c04 	str.w	r0, [sl, #-4]
 801679c:	45b2      	cmp	sl, r6
 801679e:	d1ed      	bne.n	801677c <iNemoEngine_API_Update+0x3184>
 80167a0:	9b06      	ldr	r3, [sp, #24]
 80167a2:	f893 9621 	ldrb.w	r9, [r3, #1569]	; 0x621
 80167a6:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 80167aa:	f1b9 0f00 	cmp.w	r9, #0
 80167ae:	f000 8114 	beq.w	80169da <iNemoEngine_API_Update+0x33e2>
 80167b2:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8016960 <iNemoEngine_API_Update+0x3368>
 80167b6:	ee6a faa7 	vmul.f32	s31, s21, s15
 80167ba:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 80167be:	ee2a fa27 	vmul.f32	s30, s20, s15
 80167c2:	ee69 daa7 	vmul.f32	s27, s19, s15
 80167c6:	ee7f 7acb 	vsub.f32	s15, s31, s22
 80167ca:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 80167ce:	ee17 0a90 	vmov	r0, s15
 80167d2:	f7e9 fec3 	bl	800055c <__aeabi_f2d>
 80167d6:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 80167da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80167de:	ee17 0a90 	vmov	r0, s15
 80167e2:	f7e9 febb 	bl	800055c <__aeabi_f2d>
 80167e6:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 80167ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80167ee:	ee17 0a90 	vmov	r0, s15
 80167f2:	f7e9 feb3 	bl	800055c <__aeabi_f2d>
 80167f6:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 80167fa:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80167fe:	ee17 0a90 	vmov	r0, s15
 8016802:	f7e9 feab 	bl	800055c <__aeabi_f2d>
 8016806:	ee7d 7acb 	vsub.f32	s15, s27, s22
 801680a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801680e:	ee17 0a90 	vmov	r0, s15
 8016812:	f7e9 fea3 	bl	800055c <__aeabi_f2d>
 8016816:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 801681a:	4602      	mov	r2, r0
 801681c:	460b      	mov	r3, r1
 801681e:	ee17 0a90 	vmov	r0, s15
 8016822:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8016826:	f7e9 fe99 	bl	800055c <__aeabi_f2d>
 801682a:	eef0 7aef 	vabs.f32	s15, s31
 801682e:	9b06      	ldr	r3, [sp, #24]
 8016830:	edcd 7a03 	vstr	s15, [sp, #12]
 8016834:	eef0 7acf 	vabs.f32	s15, s30
 8016838:	edcd 7a04 	vstr	s15, [sp, #16]
 801683c:	eef0 7aed 	vabs.f32	s15, s27
 8016840:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 8016844:	edcd 7a05 	vstr	s15, [sp, #20]
 8016848:	230c      	movs	r3, #12
 801684a:	eef0 7a6c 	vmov.f32	s15, s25
 801684e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8016852:	eef0 ca48 	vmov.f32	s25, s16
 8016856:	ed9f ba46 	vldr	s22, [pc, #280]	; 8016970 <iNemoEngine_API_Update+0x3378>
 801685a:	eeb0 8a4d 	vmov.f32	s16, s26
 801685e:	fb13 6909 	smlabb	r9, r3, r9, r6
 8016862:	46b3      	mov	fp, r6
 8016864:	eeb0 da67 	vmov.f32	s26, s15
 8016868:	e060      	b.n	801692c <iNemoEngine_API_Update+0x3334>
 801686a:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8016964 <iNemoEngine_API_Update+0x336c>
 801686e:	eef4 aae7 	vcmpe.f32	s21, s15
 8016872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016876:	f280 8197 	bge.w	8016ba8 <iNemoEngine_API_Update+0x35b0>
 801687a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8016968 <iNemoEngine_API_Update+0x3370>
 801687e:	eef4 aae7 	vcmpe.f32	s21, s15
 8016882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016886:	f300 81a3 	bgt.w	8016bd0 <iNemoEngine_API_Update+0x35d8>
 801688a:	ed9d 0b08 	vldr	d0, [sp, #32]
 801688e:	f007 f89f 	bl	801d9d0 <ceil>
 8016892:	ec51 0b10 	vmov	r0, r1, d0
 8016896:	f7ea f9b1 	bl	8000bfc <__aeabi_d2f>
 801689a:	eddd 7a04 	vldr	s15, [sp, #16]
 801689e:	f8cb 0000 	str.w	r0, [fp]
 80168a2:	eef4 7acb 	vcmpe.f32	s15, s22
 80168a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168aa:	f140 8171 	bpl.w	8016b90 <iNemoEngine_API_Update+0x3598>
 80168ae:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8016964 <iNemoEngine_API_Update+0x336c>
 80168b2:	eeb4 aae7 	vcmpe.f32	s20, s15
 80168b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ba:	f280 816c 	bge.w	8016b96 <iNemoEngine_API_Update+0x359e>
 80168be:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8016968 <iNemoEngine_API_Update+0x3370>
 80168c2:	eeb4 aae7 	vcmpe.f32	s20, s15
 80168c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ca:	f300 81bd 	bgt.w	8016c48 <iNemoEngine_API_Update+0x3650>
 80168ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 80168d2:	f007 f87d 	bl	801d9d0 <ceil>
 80168d6:	ec51 0b10 	vmov	r0, r1, d0
 80168da:	f7ea f98f 	bl	8000bfc <__aeabi_d2f>
 80168de:	eddd 7a05 	vldr	s15, [sp, #20]
 80168e2:	f8cb 0004 	str.w	r0, [fp, #4]
 80168e6:	eef4 7acb 	vcmpe.f32	s15, s22
 80168ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ee:	d564      	bpl.n	80169ba <iNemoEngine_API_Update+0x33c2>
 80168f0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8016964 <iNemoEngine_API_Update+0x336c>
 80168f4:	eef4 9ae7 	vcmpe.f32	s19, s15
 80168f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168fc:	f280 815d 	bge.w	8016bba <iNemoEngine_API_Update+0x35c2>
 8016900:	eddf 7a19 	vldr	s15, [pc, #100]	; 8016968 <iNemoEngine_API_Update+0x3370>
 8016904:	eef4 9ae7 	vcmpe.f32	s19, s15
 8016908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801690c:	f300 8162 	bgt.w	8016bd4 <iNemoEngine_API_Update+0x35dc>
 8016910:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8016914:	f007 f85c 	bl	801d9d0 <ceil>
 8016918:	ec51 0b10 	vmov	r0, r1, d0
 801691c:	f7ea f96e 	bl	8000bfc <__aeabi_d2f>
 8016920:	f8cb 0008 	str.w	r0, [fp, #8]
 8016924:	f10b 0b0c 	add.w	fp, fp, #12
 8016928:	45cb      	cmp	fp, r9
 801692a:	d04e      	beq.n	80169ca <iNemoEngine_API_Update+0x33d2>
 801692c:	eddd 7a03 	vldr	s15, [sp, #12]
 8016930:	eef4 7acb 	vcmpe.f32	s15, s22
 8016934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016938:	d497      	bmi.n	801686a <iNemoEngine_API_Update+0x3272>
 801693a:	ee1f 0a90 	vmov	r0, s31
 801693e:	e7ac      	b.n	801689a <iNemoEngine_API_Update+0x32a2>
 8016940:	ee1f 0a10 	vmov	r0, s30
 8016944:	e6f3      	b.n	801672e <iNemoEngine_API_Update+0x3136>
 8016946:	bf00      	nop
 8016948:	3a7001e0 	.word	0x3a7001e0
 801694c:	3a000100 	.word	0x3a000100
 8016950:	3a8c0118 	.word	0x3a8c0118
 8016954:	44888777 	.word	0x44888777
 8016958:	39f001e1 	.word	0x39f001e1
 801695c:	b9f001e1 	.word	0xb9f001e1
 8016960:	44fffe00 	.word	0x44fffe00
 8016964:	39800100 	.word	0x39800100
 8016968:	b9800100 	.word	0xb9800100
 801696c:	446a0ccd 	.word	0x446a0ccd
 8016970:	4b000000 	.word	0x4b000000
 8016974:	3cfaad3b 	.word	0x3cfaad3b
 8016978:	bcfaad3b 	.word	0xbcfaad3b
 801697c:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8016980:	f007 f8a6 	bl	801dad0 <floor>
 8016984:	ec51 0b10 	vmov	r0, r1, d0
 8016988:	f7ea f938 	bl	8000bfc <__aeabi_d2f>
 801698c:	e6cf      	b.n	801672e <iNemoEngine_API_Update+0x3136>
 801698e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016992:	f007 f89d 	bl	801dad0 <floor>
 8016996:	ec51 0b10 	vmov	r0, r1, d0
 801699a:	f7ea f92f 	bl	8000bfc <__aeabi_d2f>
 801699e:	e6a4      	b.n	80166ea <iNemoEngine_API_Update+0x30f2>
 80169a0:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 80169a4:	f007 f894 	bl	801dad0 <floor>
 80169a8:	ec51 0b10 	vmov	r0, r1, d0
 80169ac:	f7ea f926 	bl	8000bfc <__aeabi_d2f>
 80169b0:	e6de      	b.n	8016770 <iNemoEngine_API_Update+0x3178>
 80169b2:	4648      	mov	r0, r9
 80169b4:	e699      	b.n	80166ea <iNemoEngine_API_Update+0x30f2>
 80169b6:	4648      	mov	r0, r9
 80169b8:	e6da      	b.n	8016770 <iNemoEngine_API_Update+0x3178>
 80169ba:	ee1d 0a90 	vmov	r0, s27
 80169be:	f10b 0b0c 	add.w	fp, fp, #12
 80169c2:	f84b 0c04 	str.w	r0, [fp, #-4]
 80169c6:	45cb      	cmp	fp, r9
 80169c8:	d1b0      	bne.n	801692c <iNemoEngine_API_Update+0x3334>
 80169ca:	eef0 7a4d 	vmov.f32	s15, s26
 80169ce:	eeb0 da48 	vmov.f32	s26, s16
 80169d2:	eeb0 8a6c 	vmov.f32	s16, s25
 80169d6:	eef0 ca67 	vmov.f32	s25, s15
 80169da:	9b06      	ldr	r3, [sp, #24]
 80169dc:	f893 9791 	ldrb.w	r9, [r3, #1937]	; 0x791
 80169e0:	f1b9 0f00 	cmp.w	r9, #0
 80169e4:	f001 80a7 	beq.w	8017b36 <iNemoEngine_API_Update+0x453e>
 80169e8:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 801696c <iNemoEngine_API_Update+0x3374>
 80169ec:	ee6e fa27 	vmul.f32	s31, s28, s15
 80169f0:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 80169f4:	ee2e faa7 	vmul.f32	s30, s29, s15
 80169f8:	ee6b daa7 	vmul.f32	s27, s23, s15
 80169fc:	ee7f 7acb 	vsub.f32	s15, s31, s22
 8016a00:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8016a04:	ee17 0a90 	vmov	r0, s15
 8016a08:	f7e9 fda8 	bl	800055c <__aeabi_f2d>
 8016a0c:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 8016a10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016a14:	ee17 0a90 	vmov	r0, s15
 8016a18:	f7e9 fda0 	bl	800055c <__aeabi_f2d>
 8016a1c:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 8016a20:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016a24:	ee17 0a90 	vmov	r0, s15
 8016a28:	f7e9 fd98 	bl	800055c <__aeabi_f2d>
 8016a2c:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 8016a30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016a34:	ee17 0a90 	vmov	r0, s15
 8016a38:	f7e9 fd90 	bl	800055c <__aeabi_f2d>
 8016a3c:	ee7d 7acb 	vsub.f32	s15, s27, s22
 8016a40:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016a44:	ee17 0a90 	vmov	r0, s15
 8016a48:	f7e9 fd88 	bl	800055c <__aeabi_f2d>
 8016a4c:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 8016a50:	4602      	mov	r2, r0
 8016a52:	460b      	mov	r3, r1
 8016a54:	ee17 0a90 	vmov	r0, s15
 8016a58:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8016a5c:	f7e9 fd7e 	bl	800055c <__aeabi_f2d>
 8016a60:	eef0 7aef 	vabs.f32	s15, s31
 8016a64:	9b06      	ldr	r3, [sp, #24]
 8016a66:	edcd 7a03 	vstr	s15, [sp, #12]
 8016a6a:	eef0 7acf 	vabs.f32	s15, s30
 8016a6e:	edcd 7a04 	vstr	s15, [sp, #16]
 8016a72:	eef0 7aed 	vabs.f32	s15, s27
 8016a76:	f503 62f3 	add.w	r2, r3, #1944	; 0x798
 8016a7a:	eeb0 7a48 	vmov.f32	s14, s16
 8016a7e:	230c      	movs	r3, #12
 8016a80:	edcd 7a05 	vstr	s15, [sp, #20]
 8016a84:	eef0 7a6c 	vmov.f32	s15, s25
 8016a88:	eeb0 8a4d 	vmov.f32	s16, s26
 8016a8c:	eef0 ca4a 	vmov.f32	s25, s20
 8016a90:	eeb0 da6a 	vmov.f32	s26, s21
 8016a94:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8016a98:	eef0 aa69 	vmov.f32	s21, s19
 8016a9c:	ed1f ba4c 	vldr	s22, [pc, #-304]	; 8016970 <iNemoEngine_API_Update+0x3378>
 8016aa0:	9215      	str	r2, [sp, #84]	; 0x54
 8016aa2:	fb13 2909 	smlabb	r9, r3, r9, r2
 8016aa6:	4693      	mov	fp, r2
 8016aa8:	eeb0 aa67 	vmov.f32	s20, s15
 8016aac:	eef0 9a47 	vmov.f32	s19, s14
 8016ab0:	e064      	b.n	8016b7c <iNemoEngine_API_Update+0x3584>
 8016ab2:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8016ab6:	ed1f 7a51 	vldr	s14, [pc, #-324]	; 8016974 <iNemoEngine_API_Update+0x337c>
 8016aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ac2:	f280 80af 	bge.w	8016c24 <iNemoEngine_API_Update+0x362c>
 8016ac6:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8016978 <iNemoEngine_API_Update+0x3380>
 8016aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ad2:	f300 80bb 	bgt.w	8016c4c <iNemoEngine_API_Update+0x3654>
 8016ad6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016ada:	f006 ff79 	bl	801d9d0 <ceil>
 8016ade:	ec51 0b10 	vmov	r0, r1, d0
 8016ae2:	f7ea f88b 	bl	8000bfc <__aeabi_d2f>
 8016ae6:	eddd 7a04 	vldr	s15, [sp, #16]
 8016aea:	f8cb 0000 	str.w	r0, [fp]
 8016aee:	eef4 7acb 	vcmpe.f32	s15, s22
 8016af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016af6:	f140 8089 	bpl.w	8016c0c <iNemoEngine_API_Update+0x3614>
 8016afa:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8016afe:	ed1f 7a63 	vldr	s14, [pc, #-396]	; 8016974 <iNemoEngine_API_Update+0x337c>
 8016b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b0a:	f280 8082 	bge.w	8016c12 <iNemoEngine_API_Update+0x361a>
 8016b0e:	ed1f 7a66 	vldr	s14, [pc, #-408]	; 8016978 <iNemoEngine_API_Update+0x3380>
 8016b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b1a:	f300 809b 	bgt.w	8016c54 <iNemoEngine_API_Update+0x365c>
 8016b1e:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 8016b22:	f006 ff55 	bl	801d9d0 <ceil>
 8016b26:	ec51 0b10 	vmov	r0, r1, d0
 8016b2a:	f7ea f867 	bl	8000bfc <__aeabi_d2f>
 8016b2e:	eddd 7a05 	vldr	s15, [sp, #20]
 8016b32:	f8cb 0004 	str.w	r0, [fp, #4]
 8016b36:	eef4 7acb 	vcmpe.f32	s15, s22
 8016b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b3e:	d54b      	bpl.n	8016bd8 <iNemoEngine_API_Update+0x35e0>
 8016b40:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8016b44:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 8016974 <iNemoEngine_API_Update+0x337c>
 8016b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b50:	da71      	bge.n	8016c36 <iNemoEngine_API_Update+0x363e>
 8016b52:	ed1f 7a77 	vldr	s14, [pc, #-476]	; 8016978 <iNemoEngine_API_Update+0x3380>
 8016b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b5e:	dc77      	bgt.n	8016c50 <iNemoEngine_API_Update+0x3658>
 8016b60:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8016b64:	f006 ff34 	bl	801d9d0 <ceil>
 8016b68:	ec51 0b10 	vmov	r0, r1, d0
 8016b6c:	f7ea f846 	bl	8000bfc <__aeabi_d2f>
 8016b70:	f8cb 0008 	str.w	r0, [fp, #8]
 8016b74:	f10b 0b0c 	add.w	fp, fp, #12
 8016b78:	45cb      	cmp	fp, r9
 8016b7a:	d035      	beq.n	8016be8 <iNemoEngine_API_Update+0x35f0>
 8016b7c:	eddd 7a03 	vldr	s15, [sp, #12]
 8016b80:	eef4 7acb 	vcmpe.f32	s15, s22
 8016b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b88:	d493      	bmi.n	8016ab2 <iNemoEngine_API_Update+0x34ba>
 8016b8a:	ee1f 0a90 	vmov	r0, s31
 8016b8e:	e7aa      	b.n	8016ae6 <iNemoEngine_API_Update+0x34ee>
 8016b90:	ee1f 0a10 	vmov	r0, s30
 8016b94:	e6a3      	b.n	80168de <iNemoEngine_API_Update+0x32e6>
 8016b96:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8016b9a:	f006 ff99 	bl	801dad0 <floor>
 8016b9e:	ec51 0b10 	vmov	r0, r1, d0
 8016ba2:	f7ea f82b 	bl	8000bfc <__aeabi_d2f>
 8016ba6:	e69a      	b.n	80168de <iNemoEngine_API_Update+0x32e6>
 8016ba8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016bac:	f006 ff90 	bl	801dad0 <floor>
 8016bb0:	ec51 0b10 	vmov	r0, r1, d0
 8016bb4:	f7ea f822 	bl	8000bfc <__aeabi_d2f>
 8016bb8:	e66f      	b.n	801689a <iNemoEngine_API_Update+0x32a2>
 8016bba:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8016bbe:	f006 ff87 	bl	801dad0 <floor>
 8016bc2:	ec51 0b10 	vmov	r0, r1, d0
 8016bc6:	f7ea f819 	bl	8000bfc <__aeabi_d2f>
 8016bca:	e6a9      	b.n	8016920 <iNemoEngine_API_Update+0x3328>
 8016bcc:	4648      	mov	r0, r9
 8016bce:	e5ae      	b.n	801672e <iNemoEngine_API_Update+0x3136>
 8016bd0:	4650      	mov	r0, sl
 8016bd2:	e662      	b.n	801689a <iNemoEngine_API_Update+0x32a2>
 8016bd4:	4650      	mov	r0, sl
 8016bd6:	e6a3      	b.n	8016920 <iNemoEngine_API_Update+0x3328>
 8016bd8:	ee1d 0a90 	vmov	r0, s27
 8016bdc:	f10b 0b0c 	add.w	fp, fp, #12
 8016be0:	f84b 0c04 	str.w	r0, [fp, #-4]
 8016be4:	45cb      	cmp	fp, r9
 8016be6:	d1c9      	bne.n	8016b7c <iNemoEngine_API_Update+0x3584>
 8016be8:	eeb0 7a69 	vmov.f32	s14, s19
 8016bec:	eef0 7a4a 	vmov.f32	s15, s20
 8016bf0:	eef0 9a6a 	vmov.f32	s19, s21
 8016bf4:	eeb0 aa6c 	vmov.f32	s20, s25
 8016bf8:	eef0 aa4d 	vmov.f32	s21, s26
 8016bfc:	eef0 ca67 	vmov.f32	s25, s15
 8016c00:	eeb0 da48 	vmov.f32	s26, s16
 8016c04:	eeb0 8a47 	vmov.f32	s16, s14
 8016c08:	f7fd b820 	b.w	8013c4c <iNemoEngine_API_Update+0x654>
 8016c0c:	ee1f 0a10 	vmov	r0, s30
 8016c10:	e78d      	b.n	8016b2e <iNemoEngine_API_Update+0x3536>
 8016c12:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8016c16:	f006 ff5b 	bl	801dad0 <floor>
 8016c1a:	ec51 0b10 	vmov	r0, r1, d0
 8016c1e:	f7e9 ffed 	bl	8000bfc <__aeabi_d2f>
 8016c22:	e784      	b.n	8016b2e <iNemoEngine_API_Update+0x3536>
 8016c24:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016c28:	f006 ff52 	bl	801dad0 <floor>
 8016c2c:	ec51 0b10 	vmov	r0, r1, d0
 8016c30:	f7e9 ffe4 	bl	8000bfc <__aeabi_d2f>
 8016c34:	e757      	b.n	8016ae6 <iNemoEngine_API_Update+0x34ee>
 8016c36:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8016c3a:	f006 ff49 	bl	801dad0 <floor>
 8016c3e:	ec51 0b10 	vmov	r0, r1, d0
 8016c42:	f7e9 ffdb 	bl	8000bfc <__aeabi_d2f>
 8016c46:	e793      	b.n	8016b70 <iNemoEngine_API_Update+0x3578>
 8016c48:	4650      	mov	r0, sl
 8016c4a:	e648      	b.n	80168de <iNemoEngine_API_Update+0x32e6>
 8016c4c:	4650      	mov	r0, sl
 8016c4e:	e74a      	b.n	8016ae6 <iNemoEngine_API_Update+0x34ee>
 8016c50:	4650      	mov	r0, sl
 8016c52:	e78d      	b.n	8016b70 <iNemoEngine_API_Update+0x3578>
 8016c54:	4650      	mov	r0, sl
 8016c56:	e76a      	b.n	8016b2e <iNemoEngine_API_Update+0x3536>
 8016c58:	4616      	mov	r6, r2
 8016c5a:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8016c5e:	4be1      	ldr	r3, [pc, #900]	; (8016fe4 <iNemoEngine_API_Update+0x39ec>)
 8016c60:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 8016c64:	2100      	movs	r1, #0
 8016c66:	f8c2 51cc 	str.w	r5, [r2, #460]	; 0x1cc
 8016c6a:	f8c2 51d0 	str.w	r5, [r2, #464]	; 0x1d0
 8016c6e:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 8016c72:	f506 70ea 	add.w	r0, r6, #468	; 0x1d4
 8016c76:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8016c7a:	f003 f909 	bl	8019e90 <memset>
 8016c7e:	ed96 6a02 	vldr	s12, [r6, #8]
 8016c82:	eddf 7ad9 	vldr	s15, [pc, #868]	; 8016fe8 <iNemoEngine_API_Update+0x39f0>
 8016c86:	eddf 5ad9 	vldr	s11, [pc, #868]	; 8016fec <iNemoEngine_API_Update+0x39f4>
 8016c8a:	ed9f 5ad9 	vldr	s10, [pc, #868]	; 8016ff0 <iNemoEngine_API_Update+0x39f8>
 8016c8e:	f8c6 50c4 	str.w	r5, [r6, #196]	; 0xc4
 8016c92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016c96:	2300      	movs	r3, #0
 8016c98:	edc6 7a34 	vstr	s15, [r6, #208]	; 0xd0
 8016c9c:	eddf 7ad5 	vldr	s15, [pc, #852]	; 8016ff4 <iNemoEngine_API_Update+0x39fc>
 8016ca0:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 8016ca4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016ca8:	f8c6 3128 	str.w	r3, [r6, #296]	; 0x128
 8016cac:	edc6 7a4e 	vstr	s15, [r6, #312]	; 0x138
 8016cb0:	eddf 7ad1 	vldr	s15, [pc, #836]	; 8016ff8 <iNemoEngine_API_Update+0x3a00>
 8016cb4:	4bd1      	ldr	r3, [pc, #836]	; (8016ffc <iNemoEngine_API_Update+0x3a04>)
 8016cb6:	f8c6 30dc 	str.w	r3, [r6, #220]	; 0xdc
 8016cba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016cbe:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
 8016cc2:	edc6 7a50 	vstr	s15, [r6, #320]	; 0x140
 8016cc6:	eddf 7ace 	vldr	s15, [pc, #824]	; 8017000 <iNemoEngine_API_Update+0x3a08>
 8016cca:	4bce      	ldr	r3, [pc, #824]	; (8017004 <iNemoEngine_API_Update+0x3a0c>)
 8016ccc:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8016cd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016cd4:	4bcc      	ldr	r3, [pc, #816]	; (8017008 <iNemoEngine_API_Update+0x3a10>)
 8016cd6:	edc6 7a38 	vstr	s15, [r6, #224]	; 0xe0
 8016cda:	eddf 7acc 	vldr	s15, [pc, #816]	; 801700c <iNemoEngine_API_Update+0x3a14>
 8016cde:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
 8016ce2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016ce6:	4bca      	ldr	r3, [pc, #808]	; (8017010 <iNemoEngine_API_Update+0x3a18>)
 8016ce8:	edc6 7a52 	vstr	s15, [r6, #328]	; 0x148
 8016cec:	eddf 7ac9 	vldr	s15, [pc, #804]	; 8017014 <iNemoEngine_API_Update+0x3a1c>
 8016cf0:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
 8016cf4:	4bc8      	ldr	r3, [pc, #800]	; (8017018 <iNemoEngine_API_Update+0x3a20>)
 8016cf6:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
 8016cfa:	4631      	mov	r1, r6
 8016cfc:	ee66 5a25 	vmul.f32	s11, s12, s11
 8016d00:	ee26 5a05 	vmul.f32	s10, s12, s10
 8016d04:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016d08:	4bc4      	ldr	r3, [pc, #784]	; (801701c <iNemoEngine_API_Update+0x3a24>)
 8016d0a:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
 8016d0e:	4bc4      	ldr	r3, [pc, #784]	; (8017020 <iNemoEngine_API_Update+0x3a28>)
 8016d10:	f8c6 512c 	str.w	r5, [r6, #300]	; 0x12c
 8016d14:	f8c6 50cc 	str.w	r5, [r6, #204]	; 0xcc
 8016d18:	f8c6 5134 	str.w	r5, [r6, #308]	; 0x134
 8016d1c:	edc6 7a3a 	vstr	s15, [r6, #232]	; 0xe8
 8016d20:	edc6 5a32 	vstr	s11, [r6, #200]	; 0xc8
 8016d24:	edc6 5a4c 	vstr	s11, [r6, #304]	; 0x130
 8016d28:	ed86 5a36 	vstr	s10, [r6, #216]	; 0xd8
 8016d2c:	f8c1 31d4 	str.w	r3, [r1, #468]	; 0x1d4
 8016d30:	f8c1 31fc 	str.w	r3, [r1, #508]	; 0x1fc
 8016d34:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
 8016d38:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 8016d3c:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 8016d40:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 8016d44:	f8c1 32c4 	str.w	r3, [r1, #708]	; 0x2c4
 8016d48:	f8c1 32ec 	str.w	r3, [r1, #748]	; 0x2ec
 8016d4c:	f8c1 3314 	str.w	r3, [r1, #788]	; 0x314
 8016d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016d54:	ed81 5a54 	vstr	s10, [r1, #336]	; 0x150
 8016d58:	eddf 3ab2 	vldr	s7, [pc, #712]	; 8017024 <iNemoEngine_API_Update+0x3a2c>
 8016d5c:	ed9f 4ab2 	vldr	s8, [pc, #712]	; 8017028 <iNemoEngine_API_Update+0x3a30>
 8016d60:	f8c1 317c 	str.w	r3, [r1, #380]	; 0x17c
 8016d64:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
 8016d68:	f8c1 3124 	str.w	r3, [r1, #292]	; 0x124
 8016d6c:	eddf 6aaf 	vldr	s13, [pc, #700]	; 801702c <iNemoEngine_API_Update+0x3a34>
 8016d70:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8017030 <iNemoEngine_API_Update+0x3a38>
 8016d74:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8017034 <iNemoEngine_API_Update+0x3a3c>
 8016d78:	eddf 4aaf 	vldr	s9, [pc, #700]	; 8017038 <iNemoEngine_API_Update+0x3a40>
 8016d7c:	4aaf      	ldr	r2, [pc, #700]	; (801703c <iNemoEngine_API_Update+0x3a44>)
 8016d7e:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 801705c <iNemoEngine_API_Update+0x3a64>
 8016d82:	4faf      	ldr	r7, [pc, #700]	; (8017040 <iNemoEngine_API_Update+0x3a48>)
 8016d84:	4eaf      	ldr	r6, [pc, #700]	; (8017044 <iNemoEngine_API_Update+0x3a4c>)
 8016d86:	4db0      	ldr	r5, [pc, #704]	; (8017048 <iNemoEngine_API_Update+0x3a50>)
 8016d88:	48b0      	ldr	r0, [pc, #704]	; (801704c <iNemoEngine_API_Update+0x3a54>)
 8016d8a:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 8017060 <iNemoEngine_API_Update+0x3a68>
 8016d8e:	edc1 3a3d 	vstr	s7, [r1, #244]	; 0xf4
 8016d92:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8016d96:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 8016d9a:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
 8016d9e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016da2:	ee66 6a26 	vmul.f32	s13, s12, s13
 8016da6:	ee26 7a07 	vmul.f32	s14, s12, s14
 8016daa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016dae:	ee66 2a23 	vmul.f32	s5, s12, s7
 8016db2:	ee26 3a02 	vmul.f32	s6, s12, s4
 8016db6:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
 8016dba:	ee66 4a24 	vmul.f32	s9, s12, s9
 8016dbe:	4ba4      	ldr	r3, [pc, #656]	; (8017050 <iNemoEngine_API_Update+0x3a58>)
 8016dc0:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184
 8016dc4:	ee66 1a04 	vmul.f32	s3, s12, s8
 8016dc8:	4ba2      	ldr	r3, [pc, #648]	; (8017054 <iNemoEngine_API_Update+0x3a5c>)
 8016dca:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
 8016dce:	f8c1 c15c 	str.w	ip, [r1, #348]	; 0x15c
 8016dd2:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
 8016dd6:	f8c1 6164 	str.w	r6, [r1, #356]	; 0x164
 8016dda:	f8c1 516c 	str.w	r5, [r1, #364]	; 0x16c
 8016dde:	f8c1 0174 	str.w	r0, [r1, #372]	; 0x174
 8016de2:	edc1 1a46 	vstr	s3, [r1, #280]	; 0x118
 8016de6:	edc1 4a60 	vstr	s9, [r1, #384]	; 0x180
 8016dea:	f8c1 e19c 	str.w	lr, [r1, #412]	; 0x19c
 8016dee:	ed81 2a66 	vstr	s4, [r1, #408]	; 0x198
 8016df2:	ed81 4a65 	vstr	s8, [r1, #404]	; 0x194
 8016df6:	f8c1 2154 	str.w	r2, [r1, #340]	; 0x154
 8016dfa:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
 8016dfe:	edc1 6a3c 	vstr	s13, [r1, #240]	; 0xf0
 8016e02:	edc1 6a56 	vstr	s13, [r1, #344]	; 0x158
 8016e06:	ed81 7a3e 	vstr	s14, [r1, #248]	; 0xf8
 8016e0a:	ed81 7a58 	vstr	s14, [r1, #352]	; 0x160
 8016e0e:	edc1 7a40 	vstr	s15, [r1, #256]	; 0x100
 8016e12:	edc1 7a5a 	vstr	s15, [r1, #360]	; 0x168
 8016e16:	edc1 2a42 	vstr	s5, [r1, #264]	; 0x108
 8016e1a:	edc1 2a5c 	vstr	s5, [r1, #368]	; 0x170
 8016e1e:	ed81 3a44 	vstr	s6, [r1, #272]	; 0x110
 8016e22:	ed81 3a5e 	vstr	s6, [r1, #376]	; 0x178
 8016e26:	ed81 6a48 	vstr	s12, [r1, #288]	; 0x120
 8016e2a:	ed81 6a62 	vstr	s12, [r1, #392]	; 0x188
 8016e2e:	edc1 5a64 	vstr	s11, [r1, #400]	; 0x190
 8016e32:	784b      	ldrb	r3, [r1, #1]
 8016e34:	b18b      	cbz	r3, 8016e5a <iNemoEngine_API_Update+0x3862>
 8016e36:	f501 6214 	add.w	r2, r1, #2368	; 0x940
 8016e3a:	9225      	str	r2, [sp, #148]	; 0x94
 8016e3c:	f601 1348 	addw	r3, r1, #2376	; 0x948
 8016e40:	f601 1244 	addw	r2, r1, #2372	; 0x944
 8016e44:	9226      	str	r2, [sp, #152]	; 0x98
 8016e46:	9327      	str	r3, [sp, #156]	; 0x9c
 8016e48:	9a06      	ldr	r2, [sp, #24]
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	7053      	strb	r3, [r2, #1]
 8016e4e:	f7fc bee8 	b.w	8013c22 <iNemoEngine_API_Update+0x62a>
 8016e52:	ed93 ca4b 	vldr	s24, [r3, #300]	; 0x12c
 8016e56:	f7fd bfc0 	b.w	8014dda <iNemoEngine_API_Update+0x17e2>
 8016e5a:	9a06      	ldr	r2, [sp, #24]
 8016e5c:	f502 6314 	add.w	r3, r2, #2368	; 0x940
 8016e60:	f602 1144 	addw	r1, r2, #2372	; 0x944
 8016e64:	f602 1048 	addw	r0, r2, #2376	; 0x948
 8016e68:	9325      	str	r3, [sp, #148]	; 0x94
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
 8016e70:	680b      	ldr	r3, [r1, #0]
 8016e72:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
 8016e76:	6803      	ldr	r3, [r0, #0]
 8016e78:	9126      	str	r1, [sp, #152]	; 0x98
 8016e7a:	9027      	str	r0, [sp, #156]	; 0x9c
 8016e7c:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
 8016e80:	e7e2      	b.n	8016e48 <iNemoEngine_API_Update+0x3850>
 8016e82:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 8016e86:	ed97 0a00 	vldr	s0, [r7]
 8016e8a:	f505 6097 	add.w	r0, r5, #1208	; 0x4b8
 8016e8e:	f7fa ff43 	bl	8011d18 <dataDerivative5>
 8016e92:	f205 6824 	addw	r8, r5, #1572	; 0x624
 8016e96:	eef0 3a40 	vmov.f32	s7, s0
 8016e9a:	f505 60c5 	add.w	r0, r5, #1576	; 0x628
 8016e9e:	ed98 0a00 	vldr	s0, [r8]
 8016ea2:	f7fa ff39 	bl	8011d18 <dataDerivative5>
 8016ea6:	f205 7394 	addw	r3, r5, #1940	; 0x794
 8016eaa:	eeb0 3a40 	vmov.f32	s6, s0
 8016eae:	f505 60f3 	add.w	r0, r5, #1944	; 0x798
 8016eb2:	ed93 0a00 	vldr	s0, [r3]
 8016eb6:	f7fa ff2f 	bl	8011d18 <dataDerivative5>
 8016eba:	f9b5 3976 	ldrsh.w	r3, [r5, #2422]	; 0x976
 8016ebe:	ee07 3a90 	vmov	s15, r3
 8016ec2:	3301      	adds	r3, #1
 8016ec4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8016ec8:	ee07 3a90 	vmov	s15, r3
 8016ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016ed4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8016ed8:	f605 106c 	addw	r0, r5, #2412	; 0x96c
 8016edc:	f605 1168 	addw	r1, r5, #2408	; 0x968
 8016ee0:	f505 6217 	add.w	r2, r5, #2416	; 0x970
 8016ee4:	b21b      	sxth	r3, r3
 8016ee6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8016eea:	ed90 7a00 	vldr	s14, [r0]
 8016eee:	ed91 5a00 	vldr	s10, [r1]
 8016ef2:	eef0 7a63 	vmov.f32	s15, s7
 8016ef6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016efa:	eeb0 7a43 	vmov.f32	s14, s6
 8016efe:	eea5 7a85 	vfma.f32	s14, s11, s10
 8016f02:	ed92 5a00 	vldr	s10, [r2]
 8016f06:	eef0 6a40 	vmov.f32	s13, s0
 8016f0a:	eee5 6a85 	vfma.f32	s13, s11, s10
 8016f0e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016f12:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016f16:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016f1a:	edc0 7a00 	vstr	s15, [r0]
 8016f1e:	ed81 7a00 	vstr	s14, [r1]
 8016f22:	edc2 6a00 	vstr	s13, [r2]
 8016f26:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 8016f2a:	f47c ab8d 	bne.w	8013648 <iNemoEngine_API_Update+0x50>
 8016f2e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016f32:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016f36:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016f3a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016f3e:	2300      	movs	r3, #0
 8016f40:	ed85 7a07 	vstr	s14, [r5, #28]
 8016f44:	edc5 6a08 	vstr	s13, [r5, #32]
 8016f48:	edc5 7a06 	vstr	s15, [r5, #24]
 8016f4c:	6003      	str	r3, [r0, #0]
 8016f4e:	600b      	str	r3, [r1, #0]
 8016f50:	6013      	str	r3, [r2, #0]
 8016f52:	2300      	movs	r3, #0
 8016f54:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 8016f58:	f885 3978 	strb.w	r3, [r5, #2424]	; 0x978
 8016f5c:	f7fc bb74 	b.w	8013648 <iNemoEngine_API_Update+0x50>
 8016f60:	9906      	ldr	r1, [sp, #24]
 8016f62:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 8016f66:	9295      	str	r2, [sp, #596]	; 0x254
 8016f68:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 8016f6c:	9296      	str	r2, [sp, #600]	; 0x258
 8016f6e:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 8016f72:	9297      	str	r2, [sp, #604]	; 0x25c
 8016f74:	2200      	movs	r2, #0
 8016f76:	464b      	mov	r3, r9
 8016f78:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8016f7c:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 8016f80:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8016f84:	f7fe bc8f 	b.w	80158a6 <iNemoEngine_API_Update+0x22ae>
 8016f88:	ed92 fa49 	vldr	s30, [r2, #292]	; 0x124
 8016f8c:	4613      	mov	r3, r2
 8016f8e:	f7fd bdd2 	b.w	8014b36 <iNemoEngine_API_Update+0x153e>
 8016f92:	ed93 ca63 	vldr	s24, [r3, #396]	; 0x18c
 8016f96:	f7fd bf20 	b.w	8014dda <iNemoEngine_API_Update+0x17e2>
 8016f9a:	eddf 8a2f 	vldr	s17, [pc, #188]	; 8017058 <iNemoEngine_API_Update+0x3a60>
 8016f9e:	f7fd b87e 	b.w	801409e <iNemoEngine_API_Update+0xaa6>
 8016fa2:	ed9f ca2d 	vldr	s24, [pc, #180]	; 8017058 <iNemoEngine_API_Update+0x3a60>
 8016fa6:	f7fd b90e 	b.w	80141c6 <iNemoEngine_API_Update+0xbce>
 8016faa:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8017058 <iNemoEngine_API_Update+0x3a60>
 8016fae:	f7fc bf8c 	b.w	8013eca <iNemoEngine_API_Update+0x8d2>
 8016fb2:	eddf 8a29 	vldr	s17, [pc, #164]	; 8017058 <iNemoEngine_API_Update+0x3a60>
 8016fb6:	f7fc bf5d 	b.w	8013e74 <iNemoEngine_API_Update+0x87c>
 8016fba:	ed9f 8a27 	vldr	s16, [pc, #156]	; 8017058 <iNemoEngine_API_Update+0x3a60>
 8016fbe:	f7fd b92d 	b.w	801421c <iNemoEngine_API_Update+0xc24>
 8016fc2:	ed9f ca25 	vldr	s24, [pc, #148]	; 8017058 <iNemoEngine_API_Update+0x3a60>
 8016fc6:	f7fd b83f 	b.w	8014048 <iNemoEngine_API_Update+0xa50>
 8016fca:	ed9f ca23 	vldr	s24, [pc, #140]	; 8017058 <iNemoEngine_API_Update+0x3a60>
 8016fce:	f7fc bfa7 	b.w	8013f20 <iNemoEngine_API_Update+0x928>
 8016fd2:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8017058 <iNemoEngine_API_Update+0x3a60>
 8016fd6:	f7fd b80c 	b.w	8013ff2 <iNemoEngine_API_Update+0x9fa>
 8016fda:	eddf 8a1f 	vldr	s17, [pc, #124]	; 8017058 <iNemoEngine_API_Update+0x3a60>
 8016fde:	f7fd b8c7 	b.w	8014170 <iNemoEngine_API_Update+0xb78>
 8016fe2:	bf00      	nop
 8016fe4:	bf666666 	.word	0xbf666666
 8016fe8:	3d072b02 	.word	0x3d072b02
 8016fec:	3ca3d70a 	.word	0x3ca3d70a
 8016ff0:	3d4ccccd 	.word	0x3d4ccccd
 8016ff4:	3cb43958 	.word	0x3cb43958
 8016ff8:	3cf5c28f 	.word	0x3cf5c28f
 8016ffc:	3eb33333 	.word	0x3eb33333
 8017000:	3d75c28f 	.word	0x3d75c28f
 8017004:	3ee66666 	.word	0x3ee66666
 8017008:	3f866666 	.word	0x3f866666
 801700c:	3d23d70a 	.word	0x3d23d70a
 8017010:	3f8ccccd 	.word	0x3f8ccccd
 8017014:	3d8f5c29 	.word	0x3d8f5c29
 8017018:	3f933333 	.word	0x3f933333
 801701c:	3ebd70a4 	.word	0x3ebd70a4
 8017020:	40a00000 	.word	0x40a00000
 8017024:	3ecccccd 	.word	0x3ecccccd
 8017028:	3f4ccccd 	.word	0x3f4ccccd
 801702c:	3dcccccd 	.word	0x3dcccccd
 8017030:	3e4ccccd 	.word	0x3e4ccccd
 8017034:	3e99999a 	.word	0x3e99999a
 8017038:	3f666666 	.word	0x3f666666
 801703c:	3f99999a 	.word	0x3f99999a
 8017040:	3f19999a 	.word	0x3f19999a
 8017044:	3fb9999a 	.word	0x3fb9999a
 8017048:	3fcccccd 	.word	0x3fcccccd
 801704c:	3fe66666 	.word	0x3fe66666
 8017050:	40200000 	.word	0x40200000
 8017054:	40400000 	.word	0x40400000
 8017058:	80000000 	.word	0x80000000
 801705c:	3fa66666 	.word	0x3fa66666
 8017060:	3f333333 	.word	0x3f333333
 8017064:	3e4cccce 	.word	0x3e4cccce
 8017068:	3eaaaaab 	.word	0x3eaaaaab
 801706c:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 8017070:	2a00      	cmp	r2, #0
 8017072:	f040 85bc 	bne.w	8017bee <iNemoEngine_API_Update+0x45f6>
 8017076:	9906      	ldr	r1, [sp, #24]
 8017078:	ed5f 8a06 	vldr	s17, [pc, #-24]	; 8017064 <iNemoEngine_API_Update+0x3a6c>
 801707c:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 8017080:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 8017068 <iNemoEngine_API_Update+0x3a70>
 8017084:	3301      	adds	r3, #1
 8017086:	b29b      	uxth	r3, r3
 8017088:	2b31      	cmp	r3, #49	; 0x31
 801708a:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 801708e:	bf98      	it	ls
 8017090:	eef0 8a67 	vmovls.f32	s17, s15
 8017094:	460b      	mov	r3, r1
 8017096:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801709a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801709e:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 80170a2:	f000 8599 	beq.w	8017bd8 <iNemoEngine_API_Update+0x45e0>
 80170a6:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 80170aa:	f47f a83a 	bne.w	8016122 <iNemoEngine_API_Update+0x2b2a>
 80170ae:	9a06      	ldr	r2, [sp, #24]
 80170b0:	2301      	movs	r3, #1
 80170b2:	f882 31a4 	strb.w	r3, [r2, #420]	; 0x1a4
 80170b6:	9a06      	ldr	r2, [sp, #24]
 80170b8:	edcd 6a03 	vstr	s13, [sp, #12]
 80170bc:	f502 63c3 	add.w	r3, r2, #1560	; 0x618
 80170c0:	ed93 5a00 	vldr	s10, [r3]
 80170c4:	f502 63f1 	add.w	r3, r2, #1928	; 0x788
 80170c8:	ed93 7a00 	vldr	s14, [r3]
 80170cc:	f202 6314 	addw	r3, r2, #1556	; 0x614
 80170d0:	edd3 4a00 	vldr	s9, [r3]
 80170d4:	ee25 4a05 	vmul.f32	s8, s10, s10
 80170d8:	f202 7384 	addw	r3, r2, #1924	; 0x784
 80170dc:	eea4 4aa4 	vfma.f32	s8, s9, s9
 80170e0:	a93d      	add	r1, sp, #244	; 0xf4
 80170e2:	a843      	add	r0, sp, #268	; 0x10c
 80170e4:	ed93 6a00 	vldr	s12, [r3]
 80170e8:	f202 631c 	addw	r3, r2, #1564	; 0x61c
 80170ec:	edd3 7a00 	vldr	s15, [r3]
 80170f0:	eea7 4aa7 	vfma.f32	s8, s15, s15
 80170f4:	f202 738c 	addw	r3, r2, #1932	; 0x78c
 80170f8:	465e      	mov	r6, fp
 80170fa:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80170fe:	eeb1 3ac4 	vsqrt.f32	s6, s8
 8017102:	465a      	mov	r2, fp
 8017104:	4655      	mov	r5, sl
 8017106:	4657      	mov	r7, sl
 8017108:	acae      	add	r4, sp, #696	; 0x2b8
 801710a:	ee67 5a07 	vmul.f32	s11, s14, s14
 801710e:	ee83 4a83 	vdiv.f32	s8, s7, s6
 8017112:	eee6 5a06 	vfma.f32	s11, s12, s12
 8017116:	ee67 7a84 	vmul.f32	s15, s15, s8
 801711a:	ee25 5a04 	vmul.f32	s10, s10, s8
 801711e:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8017122:	edd3 7a00 	vldr	s15, [r3]
 8017126:	ed8d 5a3e 	vstr	s10, [sp, #248]	; 0xf8
 801712a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 801712e:	ee64 4a84 	vmul.f32	s9, s9, s8
 8017132:	eeb1 5ae5 	vsqrt.f32	s10, s11
 8017136:	edcd 4a3d 	vstr	s9, [sp, #244]	; 0xf4
 801713a:	eec3 5a85 	vdiv.f32	s11, s7, s10
 801713e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8017142:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017146:	ee26 6a25 	vmul.f32	s12, s12, s11
 801714a:	ed8d 7a44 	vstr	s14, [sp, #272]	; 0x110
 801714e:	edcd 7a45 	vstr	s15, [sp, #276]	; 0x114
 8017152:	ed8d 6a43 	vstr	s12, [sp, #268]	; 0x10c
 8017156:	f7fa fec5 	bl	8011ee4 <getRotationMatrix>
 801715a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801715c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801715e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017162:	6836      	ldr	r6, [r6, #0]
 8017164:	602e      	str	r6, [r5, #0]
 8017166:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801716a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801716c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801716e:	edda 7a00 	vldr	s15, [sl]
 8017172:	ed9a 7a01 	vldr	s14, [sl, #4]
 8017176:	eddd 6a03 	vldr	s13, [sp, #12]
 801717a:	6026      	str	r6, [r4, #0]
 801717c:	eef0 7ae7 	vabs.f32	s15, s15
 8017180:	eeb0 7ac7 	vabs.f32	s14, s14
 8017184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801718c:	f140 8407 	bpl.w	801799e <iNemoEngine_API_Update+0x43a6>
 8017190:	2304      	movs	r3, #4
 8017192:	2000      	movs	r0, #0
 8017194:	930c      	str	r3, [sp, #48]	; 0x30
 8017196:	469e      	mov	lr, r3
 8017198:	eef0 7a47 	vmov.f32	s15, s14
 801719c:	2103      	movs	r1, #3
 801719e:	2707      	movs	r7, #7
 80171a0:	f04f 0c06 	mov.w	ip, #6
 80171a4:	4603      	mov	r3, r0
 80171a6:	2601      	movs	r6, #1
 80171a8:	ed9a 7a02 	vldr	s14, [sl, #8]
 80171ac:	eeb0 7ac7 	vabs.f32	s14, s14
 80171b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80171b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171b8:	f340 8453 	ble.w	8017a62 <iNemoEngine_API_Update+0x446a>
 80171bc:	2306      	movs	r3, #6
 80171be:	2708      	movs	r7, #8
 80171c0:	2104      	movs	r1, #4
 80171c2:	9303      	str	r3, [sp, #12]
 80171c4:	f04f 0c07 	mov.w	ip, #7
 80171c8:	f04f 0e05 	mov.w	lr, #5
 80171cc:	970c      	str	r7, [sp, #48]	; 0x30
 80171ce:	4608      	mov	r0, r1
 80171d0:	2200      	movs	r2, #0
 80171d2:	2301      	movs	r3, #1
 80171d4:	2602      	movs	r6, #2
 80171d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80171d8:	4450      	add	r0, sl
 80171da:	4454      	add	r4, sl
 80171dc:	ed90 6a00 	vldr	s12, [r0]
 80171e0:	ed94 7a00 	vldr	s14, [r4]
 80171e4:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80171e8:	a8ae      	add	r0, sp, #696	; 0x2b8
 80171ea:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80171ee:	acae      	add	r4, sp, #696	; 0x2b8
 80171f0:	adae      	add	r5, sp, #696	; 0x2b8
 80171f2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80171f6:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 80171fa:	edc0 7a00 	vstr	s15, [r0]
 80171fe:	ed94 7a00 	vldr	s14, [r4]
 8017202:	edd5 7a00 	vldr	s15, [r5]
 8017206:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801720a:	ed84 6a00 	vstr	s12, [r4]
 801720e:	edd0 5a00 	vldr	s11, [r0]
 8017212:	a8ae      	add	r0, sp, #696	; 0x2b8
 8017214:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8017218:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 801721c:	ed90 7a00 	vldr	s14, [r0]
 8017220:	edd5 7a00 	vldr	s15, [r5]
 8017224:	eee5 7ac7 	vfms.f32	s15, s11, s14
 8017228:	ea4f 048e 	mov.w	r4, lr, lsl #2
 801722c:	9404      	str	r4, [sp, #16]
 801722e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017230:	edc5 7a00 	vstr	s15, [r5]
 8017234:	ed90 7a00 	vldr	s14, [r0]
 8017238:	a8ae      	add	r0, sp, #696	; 0x2b8
 801723a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801723e:	edd0 7a00 	vldr	s15, [r0]
 8017242:	eee6 7a47 	vfms.f32	s15, s12, s14
 8017246:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801724a:	00bc      	lsls	r4, r7, #2
 801724c:	9405      	str	r4, [sp, #20]
 801724e:	edc0 7a00 	vstr	s15, [r0]
 8017252:	acae      	add	r4, sp, #696	; 0x2b8
 8017254:	a8ae      	add	r0, sp, #696	; 0x2b8
 8017256:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801725a:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 801725e:	ed90 5a00 	vldr	s10, [r0]
 8017262:	ed94 7a00 	vldr	s14, [r4]
 8017266:	eea5 7ac5 	vfms.f32	s14, s11, s10
 801726a:	0097      	lsls	r7, r2, #2
 801726c:	eef0 7ae7 	vabs.f32	s15, s15
 8017270:	ed84 7a00 	vstr	s14, [r4]
 8017274:	9c03      	ldr	r4, [sp, #12]
 8017276:	edd0 5a00 	vldr	s11, [r0]
 801727a:	a8ae      	add	r0, sp, #696	; 0x2b8
 801727c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8017280:	ed90 7a00 	vldr	s14, [r0]
 8017284:	eea6 7a65 	vfms.f32	s14, s12, s11
 8017288:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801728c:	008c      	lsls	r4, r1, #2
 801728e:	ed80 7a00 	vstr	s14, [r0]
 8017292:	ed95 7a00 	vldr	s14, [r5]
 8017296:	eeb0 7ac7 	vabs.f32	s14, s14
 801729a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801729e:	00b0      	lsls	r0, r6, #2
 80172a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172a4:	9003      	str	r0, [sp, #12]
 80172a6:	ea4f 0583 	mov.w	r5, r3, lsl #2
 80172aa:	ea4f 008c 	mov.w	r0, ip, lsl #2
 80172ae:	dd0a      	ble.n	80172c6 <iNemoEngine_API_Update+0x3cce>
 80172b0:	4618      	mov	r0, r3
 80172b2:	4613      	mov	r3, r2
 80172b4:	4602      	mov	r2, r0
 80172b6:	4674      	mov	r4, lr
 80172b8:	4650      	mov	r0, sl
 80172ba:	463d      	mov	r5, r7
 80172bc:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 80172c0:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80172c4:	0097      	lsls	r7, r2, #2
 80172c6:	a9ae      	add	r1, sp, #696	; 0x2b8
 80172c8:	448e      	add	lr, r1
 80172ca:	440c      	add	r4, r1
 80172cc:	ed9e 7a00 	vldr	s14, [lr]
 80172d0:	edd4 7a00 	vldr	s15, [r4]
 80172d4:	edcd 6a03 	vstr	s13, [sp, #12]
 80172d8:	ee87 2a27 	vdiv.f32	s4, s14, s15
 80172dc:	4408      	add	r0, r1
 80172de:	4451      	add	r1, sl
 80172e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80172e4:	ed8e 2a00 	vstr	s4, [lr]
 80172e8:	ed90 6a00 	vldr	s12, [r0]
 80172ec:	edd1 7a00 	vldr	s15, [r1]
 80172f0:	eee2 7a46 	vfms.f32	s15, s4, s12
 80172f4:	edc1 7a00 	vstr	s15, [r1]
 80172f8:	9905      	ldr	r1, [sp, #20]
 80172fa:	ed90 3a00 	vldr	s6, [r0]
 80172fe:	ed94 6a00 	vldr	s12, [r4]
 8017302:	a8ae      	add	r0, sp, #696	; 0x2b8
 8017304:	4401      	add	r1, r0
 8017306:	edd1 3a00 	vldr	s7, [r1]
 801730a:	9904      	ldr	r1, [sp, #16]
 801730c:	4401      	add	r1, r0
 801730e:	00b0      	lsls	r0, r6, #2
 8017310:	edd1 4a00 	vldr	s9, [r1]
 8017314:	f500 61b2 	add.w	r1, r0, #1424	; 0x590
 8017318:	4469      	add	r1, sp
 801731a:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 801731e:	eec7 2a27 	vdiv.f32	s5, s14, s15
 8017322:	edd1 7a00 	vldr	s15, [r1]
 8017326:	a9ae      	add	r1, sp, #696	; 0x2b8
 8017328:	4401      	add	r1, r0
 801732a:	ee87 4a06 	vdiv.f32	s8, s14, s12
 801732e:	a8ae      	add	r0, sp, #696	; 0x2b8
 8017330:	ed91 6a00 	vldr	s12, [r1]
 8017334:	f505 61b2 	add.w	r1, r5, #1424	; 0x590
 8017338:	4469      	add	r1, sp
 801733a:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 801733e:	ee87 5a06 	vdiv.f32	s10, s14, s12
 8017342:	4405      	add	r5, r0
 8017344:	ed91 7a00 	vldr	s14, [r1]
 8017348:	edd5 5a00 	vldr	s11, [r5]
 801734c:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8017350:	4469      	add	r1, sp
 8017352:	4407      	add	r7, r0
 8017354:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8017358:	edd7 1a00 	vldr	s3, [r7]
 801735c:	ed91 6a00 	vldr	s12, [r1]
 8017360:	eea5 7ae7 	vfms.f32	s14, s11, s15
 8017364:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8017368:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 801736c:	eea1 6ae7 	vfms.f32	s12, s3, s15
 8017370:	4601      	mov	r1, r0
 8017372:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 8017376:	ed91 1a00 	vldr	s2, [r1]
 801737a:	eea2 6a47 	vfms.f32	s12, s4, s14
 801737e:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8017382:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 8017386:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801738a:	ee22 6a86 	vmul.f32	s12, s5, s12
 801738e:	460b      	mov	r3, r1
 8017390:	eea3 7a46 	vfms.f32	s14, s6, s12
 8017394:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 8017398:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 801739c:	eee3 7ac6 	vfms.f32	s15, s7, s12
 80173a0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80173a4:	ed8b 6a02 	vstr	s12, [fp, #8]
 80173a8:	eee4 7ac7 	vfms.f32	s15, s9, s14
 80173ac:	ed8b 7a01 	vstr	s14, [fp, #4]
 80173b0:	ee65 7a27 	vmul.f32	s15, s10, s15
 80173b4:	ed90 7a00 	vldr	s14, [r0]
 80173b8:	ed91 6a00 	vldr	s12, [r1]
 80173bc:	edcb 7a00 	vstr	s15, [fp]
 80173c0:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 80173c4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80173c8:	edd3 7a00 	vldr	s15, [r3]
 80173cc:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 80173d0:	edd3 0a00 	vldr	s1, [r3]
 80173d4:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 80173d8:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80173dc:	4658      	mov	r0, fp
 80173de:	a952      	add	r1, sp, #328	; 0x148
 80173e0:	eee1 7a65 	vfms.f32	s15, s2, s11
 80173e4:	edd2 5a00 	vldr	s11, [r2]
 80173e8:	eee1 0a61 	vfms.f32	s1, s2, s3
 80173ec:	eee1 5ac7 	vfms.f32	s11, s3, s14
 80173f0:	eef0 1a60 	vmov.f32	s3, s1
 80173f4:	eee2 5a46 	vfms.f32	s11, s4, s12
 80173f8:	eee2 1a67 	vfms.f32	s3, s4, s15
 80173fc:	ee62 5aa5 	vmul.f32	s11, s5, s11
 8017400:	ee62 2aa1 	vmul.f32	s5, s5, s3
 8017404:	eea3 6a65 	vfms.f32	s12, s6, s11
 8017408:	eee2 7ac3 	vfms.f32	s15, s5, s6
 801740c:	eea2 1ae3 	vfms.f32	s2, s5, s7
 8017410:	eea3 7ae5 	vfms.f32	s14, s7, s11
 8017414:	ee26 6a04 	vmul.f32	s12, s12, s8
 8017418:	ee67 7a84 	vmul.f32	s15, s15, s8
 801741c:	edcb 5a05 	vstr	s11, [fp, #20]
 8017420:	eef0 5a41 	vmov.f32	s11, s2
 8017424:	eea4 7ac6 	vfms.f32	s14, s9, s12
 8017428:	eee7 5ae4 	vfms.f32	s11, s15, s9
 801742c:	ee25 7a07 	vmul.f32	s14, s10, s14
 8017430:	ee65 5a25 	vmul.f32	s11, s10, s11
 8017434:	ed8b 6a04 	vstr	s12, [fp, #16]
 8017438:	ed8b 7a03 	vstr	s14, [fp, #12]
 801743c:	edcb 2a08 	vstr	s5, [fp, #32]
 8017440:	edcb 7a07 	vstr	s15, [fp, #28]
 8017444:	edcb 5a06 	vstr	s11, [fp, #24]
 8017448:	f7fa fcac 	bl	8011da4 <b_dcm2q>
 801744c:	ed9d 7a53 	vldr	s14, [sp, #332]	; 0x14c
 8017450:	eddd 7a54 	vldr	s15, [sp, #336]	; 0x150
 8017454:	ed9d 6a52 	vldr	s12, [sp, #328]	; 0x148
 8017458:	9b06      	ldr	r3, [sp, #24]
 801745a:	eddd 6a03 	vldr	s13, [sp, #12]
 801745e:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8017462:	ee37 7a07 	vadd.f32	s14, s14, s14
 8017466:	ee36 6a06 	vadd.f32	s12, s12, s12
 801746a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801746e:	ed8d 6a3d 	vstr	s12, [sp, #244]	; 0xf4
 8017472:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8017476:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 801747a:	2b00      	cmp	r3, #0
 801747c:	f43e ae54 	beq.w	8016128 <iNemoEngine_API_Update+0x2b30>
 8017480:	9906      	ldr	r1, [sp, #24]
 8017482:	2200      	movs	r2, #0
 8017484:	464b      	mov	r3, r9
 8017486:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 801748a:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 801748e:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8017492:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8017496:	f7fe ba06 	b.w	80158a6 <iNemoEngine_API_Update+0x22ae>
 801749a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801749e:	ee38 4ae7 	vsub.f32	s8, s17, s15
 80174a2:	edd2 3a31 	vldr	s7, [r2, #196]	; 0xc4
 80174a6:	edd2 7a33 	vldr	s15, [r2, #204]	; 0xcc
 80174aa:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80174ae:	ee67 7a84 	vmul.f32	s15, s15, s8
 80174b2:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80174b6:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 80174ba:	eef4 8ae7 	vcmpe.f32	s17, s15
 80174be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174c2:	ee3f fa23 	vadd.f32	s30, s30, s7
 80174c6:	f6fe ac6e 	blt.w	8015da6 <iNemoEngine_API_Update+0x27ae>
 80174ca:	9b06      	ldr	r3, [sp, #24]
 80174cc:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 80174d0:	eef4 8ac7 	vcmpe.f32	s17, s14
 80174d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174d8:	f140 837a 	bpl.w	8017bd0 <iNemoEngine_API_Update+0x45d8>
 80174dc:	edd3 3a35 	vldr	s7, [r3, #212]	; 0xd4
 80174e0:	ed93 4a37 	vldr	s8, [r3, #220]	; 0xdc
 80174e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80174e8:	ee34 4a63 	vsub.f32	s8, s8, s7
 80174ec:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80174f0:	ee64 7a27 	vmul.f32	s15, s8, s15
 80174f4:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80174f8:	ee3f fa23 	vadd.f32	s30, s30, s7
 80174fc:	9b06      	ldr	r3, [sp, #24]
 80174fe:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8017502:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801750a:	f6fe ac6d 	blt.w	8015de8 <iNemoEngine_API_Update+0x27f0>
 801750e:	9b06      	ldr	r3, [sp, #24]
 8017510:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 8017514:	eef4 8ac7 	vcmpe.f32	s17, s14
 8017518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801751c:	f140 82fd 	bpl.w	8017b1a <iNemoEngine_API_Update+0x4522>
 8017520:	edd3 3a39 	vldr	s7, [r3, #228]	; 0xe4
 8017524:	ed93 4a3b 	vldr	s8, [r3, #236]	; 0xec
 8017528:	ee37 7a67 	vsub.f32	s14, s14, s15
 801752c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8017530:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017534:	ee64 7a27 	vmul.f32	s15, s8, s15
 8017538:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801753c:	ee3f fa23 	vadd.f32	s30, s30, s7
 8017540:	9b06      	ldr	r3, [sp, #24]
 8017542:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8017546:	eef4 8ae7 	vcmpe.f32	s17, s15
 801754a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801754e:	f6fe ac6d 	blt.w	8015e2c <iNemoEngine_API_Update+0x2834>
 8017552:	9b06      	ldr	r3, [sp, #24]
 8017554:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8017558:	eef4 8ac7 	vcmpe.f32	s17, s14
 801755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017560:	f140 831a 	bpl.w	8017b98 <iNemoEngine_API_Update+0x45a0>
 8017564:	edd3 3a3d 	vldr	s7, [r3, #244]	; 0xf4
 8017568:	ed93 4a3f 	vldr	s8, [r3, #252]	; 0xfc
 801756c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017570:	ee34 4a63 	vsub.f32	s8, s8, s7
 8017574:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017578:	ee64 7a27 	vmul.f32	s15, s8, s15
 801757c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8017580:	ee3f fa23 	vadd.f32	s30, s30, s7
 8017584:	9b06      	ldr	r3, [sp, #24]
 8017586:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 801758a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801758e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017592:	f6fe ac6d 	blt.w	8015e70 <iNemoEngine_API_Update+0x2878>
 8017596:	9b06      	ldr	r3, [sp, #24]
 8017598:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 801759c:	eef4 8ac7 	vcmpe.f32	s17, s14
 80175a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175a4:	f140 82c3 	bpl.w	8017b2e <iNemoEngine_API_Update+0x4536>
 80175a8:	edd3 3a41 	vldr	s7, [r3, #260]	; 0x104
 80175ac:	ed93 4a43 	vldr	s8, [r3, #268]	; 0x10c
 80175b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80175b4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80175b8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80175bc:	ee64 7a27 	vmul.f32	s15, s8, s15
 80175c0:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80175c4:	ee3f fa23 	vadd.f32	s30, s30, s7
 80175c8:	9b06      	ldr	r3, [sp, #24]
 80175ca:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 80175ce:	eef4 8ae7 	vcmpe.f32	s17, s15
 80175d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175d6:	f6fe ac6d 	blt.w	8015eb4 <iNemoEngine_API_Update+0x28bc>
 80175da:	9b06      	ldr	r3, [sp, #24]
 80175dc:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
 80175e0:	eef4 8ac7 	vcmpe.f32	s17, s14
 80175e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175e8:	f140 82d2 	bpl.w	8017b90 <iNemoEngine_API_Update+0x4598>
 80175ec:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 80175f0:	edd3 4a47 	vldr	s9, [r3, #284]	; 0x11c
 80175f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80175f8:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80175fc:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017600:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8017604:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8017608:	ee3f fa04 	vadd.f32	s30, s30, s8
 801760c:	f7fd ba93 	b.w	8014b36 <iNemoEngine_API_Update+0x153e>
 8017610:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017614:	ee38 4ae7 	vsub.f32	s8, s17, s15
 8017618:	edd3 3a4b 	vldr	s7, [r3, #300]	; 0x12c
 801761c:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8017620:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8017624:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017628:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801762c:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8017630:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017638:	ee3c ca23 	vadd.f32	s24, s24, s7
 801763c:	f6fd aaab 	blt.w	8014b96 <iNemoEngine_API_Update+0x159e>
 8017640:	9b06      	ldr	r3, [sp, #24]
 8017642:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
 8017646:	eef4 8ac7 	vcmpe.f32	s17, s14
 801764a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801764e:	f140 8260 	bpl.w	8017b12 <iNemoEngine_API_Update+0x451a>
 8017652:	edd3 3a4f 	vldr	s7, [r3, #316]	; 0x13c
 8017656:	ed93 4a51 	vldr	s8, [r3, #324]	; 0x144
 801765a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801765e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8017662:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017666:	ee64 7a27 	vmul.f32	s15, s8, s15
 801766a:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801766e:	ee3c ca23 	vadd.f32	s24, s24, s7
 8017672:	9b06      	ldr	r3, [sp, #24]
 8017674:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8017678:	eef4 8ae7 	vcmpe.f32	s17, s15
 801767c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017680:	f6fd aaaa 	blt.w	8014bd8 <iNemoEngine_API_Update+0x15e0>
 8017684:	9b06      	ldr	r3, [sp, #24]
 8017686:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 801768a:	eef4 8ac7 	vcmpe.f32	s17, s14
 801768e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017692:	f140 8237 	bpl.w	8017b04 <iNemoEngine_API_Update+0x450c>
 8017696:	edd3 3a53 	vldr	s7, [r3, #332]	; 0x14c
 801769a:	ed93 4a55 	vldr	s8, [r3, #340]	; 0x154
 801769e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80176a2:	ee34 4a63 	vsub.f32	s8, s8, s7
 80176a6:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80176aa:	ee64 7a27 	vmul.f32	s15, s8, s15
 80176ae:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80176b2:	ee3c ca23 	vadd.f32	s24, s24, s7
 80176b6:	9b06      	ldr	r3, [sp, #24]
 80176b8:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80176bc:	eef4 8ae7 	vcmpe.f32	s17, s15
 80176c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176c4:	f6fd aaaa 	blt.w	8014c1c <iNemoEngine_API_Update+0x1624>
 80176c8:	9b06      	ldr	r3, [sp, #24]
 80176ca:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 80176ce:	eef4 8ac7 	vcmpe.f32	s17, s14
 80176d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176d6:	f140 8270 	bpl.w	8017bba <iNemoEngine_API_Update+0x45c2>
 80176da:	edd3 3a57 	vldr	s7, [r3, #348]	; 0x15c
 80176de:	ed93 4a59 	vldr	s8, [r3, #356]	; 0x164
 80176e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80176e6:	ee34 4a63 	vsub.f32	s8, s8, s7
 80176ea:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80176ee:	ee64 7a27 	vmul.f32	s15, s8, s15
 80176f2:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80176f6:	ee3c ca23 	vadd.f32	s24, s24, s7
 80176fa:	9b06      	ldr	r3, [sp, #24]
 80176fc:	edd3 7a5a 	vldr	s15, [r3, #360]	; 0x168
 8017700:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017708:	f6fd aaaa 	blt.w	8014c60 <iNemoEngine_API_Update+0x1668>
 801770c:	9b06      	ldr	r3, [sp, #24]
 801770e:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 8017712:	eef4 8ac7 	vcmpe.f32	s17, s14
 8017716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801771a:	f140 8252 	bpl.w	8017bc2 <iNemoEngine_API_Update+0x45ca>
 801771e:	edd3 3a5b 	vldr	s7, [r3, #364]	; 0x16c
 8017722:	ed93 4a5d 	vldr	s8, [r3, #372]	; 0x174
 8017726:	ee37 7a67 	vsub.f32	s14, s14, s15
 801772a:	ee34 4a63 	vsub.f32	s8, s8, s7
 801772e:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017732:	ee64 7a27 	vmul.f32	s15, s8, s15
 8017736:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801773a:	ee3c ca23 	vadd.f32	s24, s24, s7
 801773e:	9b06      	ldr	r3, [sp, #24]
 8017740:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8017744:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801774c:	f6fd aaaa 	blt.w	8014ca4 <iNemoEngine_API_Update+0x16ac>
 8017750:	9b06      	ldr	r3, [sp, #24]
 8017752:	ed93 7a60 	vldr	s14, [r3, #384]	; 0x180
 8017756:	eef4 8ac7 	vcmpe.f32	s17, s14
 801775a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801775e:	f140 8222 	bpl.w	8017ba6 <iNemoEngine_API_Update+0x45ae>
 8017762:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 8017766:	edd3 4a61 	vldr	s9, [r3, #388]	; 0x184
 801776a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801776e:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8017772:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017776:	ee64 7aa7 	vmul.f32	s15, s9, s15
 801777a:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801777e:	ee3c ca04 	vadd.f32	s24, s24, s8
 8017782:	f7fd bb2a 	b.w	8014dda <iNemoEngine_API_Update+0x17e2>
 8017786:	a94e      	add	r1, sp, #312	; 0x138
 8017788:	a868      	add	r0, sp, #416	; 0x1a0
 801778a:	f7fa fb0b 	bl	8011da4 <b_dcm2q>
 801778e:	9d06      	ldr	r5, [sp, #24]
 8017790:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8017794:	edc5 7a72 	vstr	s15, [r5, #456]	; 0x1c8
 8017798:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801779c:	edc5 7a73 	vstr	s15, [r5, #460]	; 0x1cc
 80177a0:	4621      	mov	r1, r4
 80177a2:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80177a6:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
 80177aa:	edcd 7a05 	vstr	s15, [sp, #20]
 80177ae:	f002 fb6f 	bl	8019e90 <memset>
 80177b2:	4be5      	ldr	r3, [pc, #916]	; (8017b48 <iNemoEngine_API_Update+0x4550>)
 80177b4:	702c      	strb	r4, [r5, #0]
 80177b6:	eddd 7a05 	vldr	s15, [sp, #20]
 80177ba:	edd5 2a02 	vldr	s5, [r5, #8]
 80177be:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 80177c2:	9a06      	ldr	r2, [sp, #24]
 80177c4:	f8c5 31d4 	str.w	r3, [r5, #468]	; 0x1d4
 80177c8:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
 80177cc:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
 80177d0:	f8c5 324c 	str.w	r3, [r5, #588]	; 0x24c
 80177d4:	f8c5 3274 	str.w	r3, [r5, #628]	; 0x274
 80177d8:	f8c5 329c 	str.w	r3, [r5, #668]	; 0x29c
 80177dc:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
 80177e0:	f8c5 32ec 	str.w	r3, [r5, #748]	; 0x2ec
 80177e4:	f8c5 3314 	str.w	r3, [r5, #788]	; 0x314
 80177e8:	2401      	movs	r4, #1
 80177ea:	f7fd bb44 	b.w	8014e76 <iNemoEngine_API_Update+0x187e>
 80177ee:	290a      	cmp	r1, #10
 80177f0:	f000 815d 	beq.w	8017aae <iNemoEngine_API_Update+0x44b6>
 80177f4:	1c4b      	adds	r3, r1, #1
 80177f6:	9906      	ldr	r1, [sp, #24]
 80177f8:	f881 31a0 	strb.w	r3, [r1, #416]	; 0x1a0
 80177fc:	4613      	mov	r3, r2
 80177fe:	2200      	movs	r2, #0
 8017800:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017804:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8017808:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 801780c:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8017810:	f7fe b849 	b.w	80158a6 <iNemoEngine_API_Update+0x22ae>
 8017814:	ed9d 7a55 	vldr	s14, [sp, #340]	; 0x154
 8017818:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801781c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017820:	f340 824f 	ble.w	8017cc2 <iNemoEngine_API_Update+0x46ca>
 8017824:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8017828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801782c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017830:	f140 8244 	bpl.w	8017cbc <iNemoEngine_API_Update+0x46c4>
 8017834:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017838:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801783c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017840:	f140 81f9 	bpl.w	8017c36 <iNemoEngine_API_Update+0x463e>
 8017844:	eddf 7ace 	vldr	s15, [pc, #824]	; 8017b80 <iNemoEngine_API_Update+0x4588>
 8017848:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801784c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017850:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8017854:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8017858:	eef0 8a46 	vmov.f32	s17, s12
 801785c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017860:	eee7 8aa5 	vfma.f32	s17, s15, s11
 8017864:	f2c0 81fb 	blt.w	8017c5e <iNemoEngine_API_Update+0x4666>
 8017868:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801786c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017874:	f140 81fb 	bpl.w	8017c6e <iNemoEngine_API_Update+0x4676>
 8017878:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801787c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017880:	ed9f 6ab2 	vldr	s12, [pc, #712]	; 8017b4c <iNemoEngine_API_Update+0x4554>
 8017884:	eddf 8ab2 	vldr	s17, [pc, #712]	; 8017b50 <iNemoEngine_API_Update+0x4558>
 8017888:	eee7 8a86 	vfma.f32	s17, s15, s12
 801788c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8017890:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017898:	f2c0 81fb 	blt.w	8017c92 <iNemoEngine_API_Update+0x469a>
 801789c:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80178a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80178a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178a8:	f140 81fb 	bpl.w	8017ca2 <iNemoEngine_API_Update+0x46aa>
 80178ac:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80178b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80178b4:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 80178b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80178bc:	eee7 8a87 	vfma.f32	s17, s15, s14
 80178c0:	9a06      	ldr	r2, [sp, #24]
 80178c2:	2300      	movs	r3, #0
 80178c4:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 80178c8:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 80178cc:	f7fe bc29 	b.w	8016122 <iNemoEngine_API_Update+0x2b2a>
 80178d0:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8017b54 <iNemoEngine_API_Update+0x455c>
 80178d4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80178d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178dc:	f57e ad78 	bpl.w	80163d0 <iNemoEngine_API_Update+0x2dd8>
 80178e0:	ed9f 6a9d 	vldr	s12, [pc, #628]	; 8017b58 <iNemoEngine_API_Update+0x4560>
 80178e4:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8017b80 <iNemoEngine_API_Update+0x4588>
 80178e8:	eddf 5a9c 	vldr	s11, [pc, #624]	; 8017b5c <iNemoEngine_API_Update+0x4564>
 80178ec:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80178f0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80178f4:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8017b60 <iNemoEngine_API_Update+0x4568>
 80178f8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80178fc:	ed9f 6a99 	vldr	s12, [pc, #612]	; 8017b64 <iNemoEngine_API_Update+0x456c>
 8017900:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017908:	f6fe ad78 	blt.w	80163fc <iNemoEngine_API_Update+0x2e04>
 801790c:	eddf 6a96 	vldr	s13, [pc, #600]	; 8017b68 <iNemoEngine_API_Update+0x4570>
 8017910:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017918:	f57e ad78 	bpl.w	801640c <iNemoEngine_API_Update+0x2e14>
 801791c:	ed9f 6a91 	vldr	s12, [pc, #580]	; 8017b64 <iNemoEngine_API_Update+0x456c>
 8017920:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8017924:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8017928:	ee26 6a26 	vmul.f32	s12, s12, s13
 801792c:	eef3 5a04 	vmov.f32	s11, #52	; 0x41a00000  20.0
 8017930:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8017934:	eee6 6a25 	vfma.f32	s13, s12, s11
 8017938:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8017b88 <iNemoEngine_API_Update+0x4590>
 801793c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017944:	f6fe ad78 	blt.w	8016438 <iNemoEngine_API_Update+0x2e40>
 8017948:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801794c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017954:	f57e ad77 	bpl.w	8016446 <iNemoEngine_API_Update+0x2e4e>
 8017958:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8017b88 <iNemoEngine_API_Update+0x4590>
 801795c:	eddf 6a83 	vldr	s13, [pc, #524]	; 8017b6c <iNemoEngine_API_Update+0x4574>
 8017960:	eddf 5a83 	vldr	s11, [pc, #524]	; 8017b70 <iNemoEngine_API_Update+0x4578>
 8017964:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8017968:	ee26 6a26 	vmul.f32	s12, s12, s13
 801796c:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8017970:	eee6 6a25 	vfma.f32	s13, s12, s11
 8017974:	f7fe bd75 	b.w	8016462 <iNemoEngine_API_Update+0x2e6a>
 8017978:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8017b74 <iNemoEngine_API_Update+0x457c>
 801797c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017984:	f57e ad06 	bpl.w	8016394 <iNemoEngine_API_Update+0x2d9c>
 8017988:	eddf 6a73 	vldr	s13, [pc, #460]	; 8017b58 <iNemoEngine_API_Update+0x4560>
 801798c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017994:	da9c      	bge.n	80178d0 <iNemoEngine_API_Update+0x42d8>
 8017996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801799a:	f7fe bd11 	b.w	80163c0 <iNemoEngine_API_Update+0x2dc8>
 801799e:	2104      	movs	r1, #4
 80179a0:	f04f 0e03 	mov.w	lr, #3
 80179a4:	2706      	movs	r7, #6
 80179a6:	f04f 0c07 	mov.w	ip, #7
 80179aa:	4608      	mov	r0, r1
 80179ac:	2301      	movs	r3, #1
 80179ae:	2600      	movs	r6, #0
 80179b0:	f7ff bbfa 	b.w	80171a8 <iNemoEngine_API_Update+0x3bb0>
 80179b4:	eddf 3a70 	vldr	s7, [pc, #448]	; 8017b78 <iNemoEngine_API_Update+0x4580>
 80179b8:	ed9f 5a70 	vldr	s10, [pc, #448]	; 8017b7c <iNemoEngine_API_Update+0x4584>
 80179bc:	ac43      	add	r4, sp, #268	; 0x10c
 80179be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80179c2:	edd0 7a7c 	vldr	s15, [r0, #496]	; 0x1f0
 80179c6:	f5a0 73ae 	sub.w	r3, r0, #348	; 0x15c
 80179ca:	3101      	adds	r1, #1
 80179cc:	eeb0 7a67 	vmov.f32	s14, s15
 80179d0:	461a      	mov	r2, r3
 80179d2:	edd2 5ad6 	vldr	s11, [r2, #856]	; 0x358
 80179d6:	320c      	adds	r2, #12
 80179d8:	4290      	cmp	r0, r2
 80179da:	ee37 7a25 	vadd.f32	s14, s14, s11
 80179de:	d1f8      	bne.n	80179d2 <iNemoEngine_API_Update+0x43da>
 80179e0:	ee27 7a23 	vmul.f32	s14, s14, s7
 80179e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80179e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80179ec:	edd3 5ad6 	vldr	s11, [r3, #856]	; 0x358
 80179f0:	330c      	adds	r3, #12
 80179f2:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80179f6:	4298      	cmp	r0, r3
 80179f8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80179fc:	d1f6      	bne.n	80179ec <iNemoEngine_API_Update+0x43f4>
 80179fe:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017a02:	2902      	cmp	r1, #2
 8017a04:	f100 0004 	add.w	r0, r0, #4
 8017a08:	ece4 7a01 	vstmia	r4!, {s15}
 8017a0c:	d1d9      	bne.n	80179c2 <iNemoEngine_API_Update+0x43ca>
 8017a0e:	eddd 5a43 	vldr	s11, [sp, #268]	; 0x10c
 8017a12:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 8017a16:	ed9d 7a45 	vldr	s14, [sp, #276]	; 0x114
 8017a1a:	eeb1 3ae5 	vsqrt.f32	s6, s11
 8017a1e:	eef1 3ae7 	vsqrt.f32	s7, s15
 8017a22:	eeb1 5ac7 	vsqrt.f32	s10, s14
 8017a26:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8017a2a:	eef3 5a00 	vmov.f32	s11, #48	; 0x41800000  16.0
 8017a2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017a32:	ed8d 3a43 	vstr	s6, [sp, #268]	; 0x10c
 8017a36:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a3e:	edcd 3a44 	vstr	s7, [sp, #272]	; 0x110
 8017a42:	ed8d 5a45 	vstr	s10, [sp, #276]	; 0x114
 8017a46:	f57e abd4 	bpl.w	80161f2 <iNemoEngine_API_Update+0x2bfa>
 8017a4a:	9906      	ldr	r1, [sp, #24]
 8017a4c:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 8017a50:	2200      	movs	r2, #0
 8017a52:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 8017a56:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 8017a5a:	464b      	mov	r3, r9
 8017a5c:	704a      	strb	r2, [r1, #1]
 8017a5e:	f7fd bf22 	b.w	80158a6 <iNemoEngine_API_Update+0x22ae>
 8017a62:	2208      	movs	r2, #8
 8017a64:	9203      	str	r2, [sp, #12]
 8017a66:	2205      	movs	r2, #5
 8017a68:	920e      	str	r2, [sp, #56]	; 0x38
 8017a6a:	2202      	movs	r2, #2
 8017a6c:	f7ff bbb3 	b.w	80171d6 <iNemoEngine_API_Update+0x3bde>
 8017a70:	2301      	movs	r3, #1
 8017a72:	f7fd bf04 	b.w	801587e <iNemoEngine_API_Update+0x2286>
 8017a76:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8017a7a:	2b27      	cmp	r3, #39	; 0x27
 8017a7c:	d838      	bhi.n	8017af0 <iNemoEngine_API_Update+0x44f8>
 8017a7e:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 8017a82:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 8017a86:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 8017a8a:	9906      	ldr	r1, [sp, #24]
 8017a8c:	f8b1 31a8 	ldrh.w	r3, [r1, #424]	; 0x1a8
 8017a90:	3301      	adds	r3, #1
 8017a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017a96:	bf14      	ite	ne
 8017a98:	b29b      	uxthne	r3, r3
 8017a9a:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8017a9e:	2201      	movs	r2, #1
 8017aa0:	f8a1 31a8 	strh.w	r3, [r1, #424]	; 0x1a8
 8017aa4:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8017aa8:	464b      	mov	r3, r9
 8017aaa:	f7fd befc 	b.w	80158a6 <iNemoEngine_API_Update+0x22ae>
 8017aae:	9906      	ldr	r1, [sp, #24]
 8017ab0:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8017ab4:	f891 31a3 	ldrb.w	r3, [r1, #419]	; 0x1a3
 8017ab8:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 8017abc:	3301      	adds	r3, #1
 8017abe:	f881 31a3 	strb.w	r3, [r1, #419]	; 0x1a3
 8017ac2:	784b      	ldrb	r3, [r1, #1]
 8017ac4:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 8017ac8:	f240 1201 	movw	r2, #257	; 0x101
 8017acc:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 8017ad0:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8017ad4:	b13b      	cbz	r3, 8017ae6 <iNemoEngine_API_Update+0x44ee>
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	ed81 ea6f 	vstr	s28, [r1, #444]	; 0x1bc
 8017adc:	edc1 ea70 	vstr	s29, [r1, #448]	; 0x1c0
 8017ae0:	edc1 ba71 	vstr	s23, [r1, #452]	; 0x1c4
 8017ae4:	704b      	strb	r3, [r1, #1]
 8017ae6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017aea:	2301      	movs	r3, #1
 8017aec:	f7fd bedb 	b.w	80158a6 <iNemoEngine_API_Update+0x22ae>
 8017af0:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 8017af4:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 8017af8:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 8017afc:	e7c5      	b.n	8017a8a <iNemoEngine_API_Update+0x4492>
 8017afe:	eef0 7a47 	vmov.f32	s15, s14
 8017b02:	e5bf      	b.n	8017684 <iNemoEngine_API_Update+0x408c>
 8017b04:	eef0 7a47 	vmov.f32	s15, s14
 8017b08:	f7fd b86f 	b.w	8014bea <iNemoEngine_API_Update+0x15f2>
 8017b0c:	eef0 7a47 	vmov.f32	s15, s14
 8017b10:	e563      	b.n	80175da <iNemoEngine_API_Update+0x3fe2>
 8017b12:	eef0 7a47 	vmov.f32	s15, s14
 8017b16:	f7fd b846 	b.w	8014ba6 <iNemoEngine_API_Update+0x15ae>
 8017b1a:	eef0 7a47 	vmov.f32	s15, s14
 8017b1e:	f7fe b96c 	b.w	8015dfa <iNemoEngine_API_Update+0x2802>
 8017b22:	eef0 7a47 	vmov.f32	s15, s14
 8017b26:	e4f2      	b.n	801750e <iNemoEngine_API_Update+0x3f16>
 8017b28:	eef0 7a47 	vmov.f32	s15, s14
 8017b2c:	e533      	b.n	8017596 <iNemoEngine_API_Update+0x3f9e>
 8017b2e:	eef0 7a47 	vmov.f32	s15, s14
 8017b32:	f7fe b9a6 	b.w	8015e82 <iNemoEngine_API_Update+0x288a>
 8017b36:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8017b3a:	9315      	str	r3, [sp, #84]	; 0x54
 8017b3c:	f7fc b886 	b.w	8013c4c <iNemoEngine_API_Update+0x654>
 8017b40:	f505 6597 	add.w	r5, r5, #1208	; 0x4b8
 8017b44:	f7fe be2c 	b.w	80167a0 <iNemoEngine_API_Update+0x31a8>
 8017b48:	40a00000 	.word	0x40a00000
 8017b4c:	3e999998 	.word	0x3e999998
 8017b50:	3f99999a 	.word	0x3f99999a
 8017b54:	3cf5c28f 	.word	0x3cf5c28f
 8017b58:	3c75c28f 	.word	0x3c75c28f
 8017b5c:	42855556 	.word	0x42855556
 8017b60:	3f866666 	.word	0x3f866666
 8017b64:	3d4ccccd 	.word	0x3d4ccccd
 8017b68:	3dcccccd 	.word	0x3dcccccd
 8017b6c:	42200000 	.word	0x42200000
 8017b70:	40555555 	.word	0x40555555
 8017b74:	3c23d70a 	.word	0x3c23d70a
 8017b78:	3d088889 	.word	0x3d088889
 8017b7c:	3d0d3dcb 	.word	0x3d0d3dcb
 8017b80:	3dccccd0 	.word	0x3dccccd0
 8017b84:	3f8ccccd 	.word	0x3f8ccccd
 8017b88:	3e4ccccd 	.word	0x3e4ccccd
 8017b8c:	00000000 	.word	0x00000000
 8017b90:	eef0 7a47 	vmov.f32	s15, s14
 8017b94:	f7fe b997 	b.w	8015ec6 <iNemoEngine_API_Update+0x28ce>
 8017b98:	eef0 7a47 	vmov.f32	s15, s14
 8017b9c:	f7fe b94f 	b.w	8015e3e <iNemoEngine_API_Update+0x2846>
 8017ba0:	eef0 7a47 	vmov.f32	s15, s14
 8017ba4:	e4d5      	b.n	8017552 <iNemoEngine_API_Update+0x3f5a>
 8017ba6:	eef0 7a47 	vmov.f32	s15, s14
 8017baa:	f7fd b884 	b.w	8014cb6 <iNemoEngine_API_Update+0x16be>
 8017bae:	eef0 7a47 	vmov.f32	s15, s14
 8017bb2:	e5cd      	b.n	8017750 <iNemoEngine_API_Update+0x4158>
 8017bb4:	eef0 7a47 	vmov.f32	s15, s14
 8017bb8:	e586      	b.n	80176c8 <iNemoEngine_API_Update+0x40d0>
 8017bba:	eef0 7a47 	vmov.f32	s15, s14
 8017bbe:	f7fd b836 	b.w	8014c2e <iNemoEngine_API_Update+0x1636>
 8017bc2:	eef0 7a47 	vmov.f32	s15, s14
 8017bc6:	f7fd b854 	b.w	8014c72 <iNemoEngine_API_Update+0x167a>
 8017bca:	eef0 7a47 	vmov.f32	s15, s14
 8017bce:	e59d      	b.n	801770c <iNemoEngine_API_Update+0x4114>
 8017bd0:	eef0 7a47 	vmov.f32	s15, s14
 8017bd4:	f7fe b8ef 	b.w	8015db6 <iNemoEngine_API_Update+0x27be>
 8017bd8:	9906      	ldr	r1, [sp, #24]
 8017bda:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017bde:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 8017be2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 8017be6:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 8017bea:	f7fe ba9a 	b.w	8016122 <iNemoEngine_API_Update+0x2b2a>
 8017bee:	9906      	ldr	r1, [sp, #24]
 8017bf0:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 8017bf4:	3301      	adds	r3, #1
 8017bf6:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 8017bfa:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8017bfe:	460b      	mov	r3, r1
 8017c00:	f7ff ba49 	b.w	8017096 <iNemoEngine_API_Update+0x3a9e>
 8017c04:	2a00      	cmp	r2, #0
 8017c06:	f73d afa4 	bgt.w	8015b52 <iNemoEngine_API_Update+0x255a>
 8017c0a:	eddd 5a83 	vldr	s11, [sp, #524]	; 0x20c
 8017c0e:	ed9d 7a84 	vldr	s14, [sp, #528]	; 0x210
 8017c12:	eddd 7a85 	vldr	s15, [sp, #532]	; 0x214
 8017c16:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8017c1a:	ee65 5a86 	vmul.f32	s11, s11, s12
 8017c1e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017c22:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017c26:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 8017c2a:	ed8d 7a84 	vstr	s14, [sp, #528]	; 0x210
 8017c2e:	edcd 7a85 	vstr	s15, [sp, #532]	; 0x214
 8017c32:	f7fd bb24 	b.w	801527e <iNemoEngine_API_Update+0x1c86>
 8017c36:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8017c3a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8017c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c42:	f57f ae11 	bpl.w	8017868 <iNemoEngine_API_Update+0x4270>
 8017c46:	ed1f 6a32 	vldr	s12, [pc, #-200]	; 8017b80 <iNemoEngine_API_Update+0x4588>
 8017c4a:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 8017b84 <iNemoEngine_API_Update+0x458c>
 8017c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017c52:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017c56:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8017c5a:	eee7 8a86 	vfma.f32	s17, s15, s12
 8017c5e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017c62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c6a:	f6ff ae0f 	blt.w	801788c <iNemoEngine_API_Update+0x4294>
 8017c6e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8017c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c7a:	f57f ae0f 	bpl.w	801789c <iNemoEngine_API_Update+0x42a4>
 8017c7e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017c86:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8017c8a:	eef7 8a08 	vmov.f32	s17, #120	; 0x3fc00000  1.5
 8017c8e:	eee7 8a86 	vfma.f32	s17, s15, s12
 8017c92:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8017c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c9e:	f6ff ae0f 	blt.w	80178c0 <iNemoEngine_API_Update+0x42c8>
 8017ca2:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8017ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017caa:	ed1f 7a49 	vldr	s14, [pc, #-292]	; 8017b88 <iNemoEngine_API_Update+0x4590>
 8017cae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017cb2:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
 8017cb6:	eee7 8a87 	vfma.f32	s17, s15, s14
 8017cba:	e601      	b.n	80178c0 <iNemoEngine_API_Update+0x42c8>
 8017cbc:	eef1 8a04 	vmov.f32	s17, #20	; 0x40a00000  5.0
 8017cc0:	e5fe      	b.n	80178c0 <iNemoEngine_API_Update+0x42c8>
 8017cc2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017cc6:	e5fb      	b.n	80178c0 <iNemoEngine_API_Update+0x42c8>
 8017cc8:	ed1f 8a50 	vldr	s16, [pc, #-320]	; 8017b8c <iNemoEngine_API_Update+0x4594>
 8017ccc:	f7fb bdeb 	b.w	80138a6 <iNemoEngine_API_Update+0x2ae>

08017cd0 <MotionFX_initialize>:
 8017cd0:	4a4c      	ldr	r2, [pc, #304]	; (8017e04 <MotionFX_initialize+0x134>)
 8017cd2:	6813      	ldr	r3, [r2, #0]
 8017cd4:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
 8017cd8:	f023 0301 	bic.w	r3, r3, #1
 8017cdc:	b530      	push	{r4, r5, lr}
 8017cde:	6013      	str	r3, [r2, #0]
 8017ce0:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 8017ce4:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8017ce8:	400b      	ands	r3, r1
 8017cea:	f24c 2240 	movw	r2, #49728	; 0xc240
 8017cee:	4293      	cmp	r3, r2
 8017cf0:	b085      	sub	sp, #20
 8017cf2:	4604      	mov	r4, r0
 8017cf4:	d013      	beq.n	8017d1e <MotionFX_initialize+0x4e>
 8017cf6:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 8017cfa:	f24c 2270 	movw	r2, #49776	; 0xc270
 8017cfe:	4019      	ands	r1, r3
 8017d00:	4291      	cmp	r1, r2
 8017d02:	d00c      	beq.n	8017d1e <MotionFX_initialize+0x4e>
 8017d04:	4a40      	ldr	r2, [pc, #256]	; (8017e08 <MotionFX_initialize+0x138>)
 8017d06:	2301      	movs	r3, #1
 8017d08:	6093      	str	r3, [r2, #8]
 8017d0a:	6893      	ldr	r3, [r2, #8]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d1fc      	bne.n	8017d0a <MotionFX_initialize+0x3a>
 8017d10:	4b3e      	ldr	r3, [pc, #248]	; (8017e0c <MotionFX_initialize+0x13c>)
 8017d12:	6013      	str	r3, [r2, #0]
 8017d14:	6812      	ldr	r2, [r2, #0]
 8017d16:	4b3e      	ldr	r3, [pc, #248]	; (8017e10 <MotionFX_initialize+0x140>)
 8017d18:	429a      	cmp	r2, r3
 8017d1a:	d02c      	beq.n	8017d76 <MotionFX_initialize+0xa6>
 8017d1c:	e7fe      	b.n	8017d1c <MotionFX_initialize+0x4c>
 8017d1e:	4b3d      	ldr	r3, [pc, #244]	; (8017e14 <MotionFX_initialize+0x144>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d1ee      	bne.n	8017d04 <MotionFX_initialize+0x34>
 8017d26:	4a3c      	ldr	r2, [pc, #240]	; (8017e18 <MotionFX_initialize+0x148>)
 8017d28:	6813      	ldr	r3, [r2, #0]
 8017d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017d2e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8017d32:	d056      	beq.n	8017de2 <MotionFX_initialize+0x112>
 8017d34:	6813      	ldr	r3, [r2, #0]
 8017d36:	f240 4183 	movw	r1, #1155	; 0x483
 8017d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017d3e:	428b      	cmp	r3, r1
 8017d40:	d04f      	beq.n	8017de2 <MotionFX_initialize+0x112>
 8017d42:	6813      	ldr	r3, [r2, #0]
 8017d44:	f240 4285 	movw	r2, #1157	; 0x485
 8017d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017d4c:	4293      	cmp	r3, r2
 8017d4e:	d048      	beq.n	8017de2 <MotionFX_initialize+0x112>
 8017d50:	4b32      	ldr	r3, [pc, #200]	; (8017e1c <MotionFX_initialize+0x14c>)
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017d58:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8017d5c:	d1d2      	bne.n	8017d04 <MotionFX_initialize+0x34>
 8017d5e:	4a30      	ldr	r2, [pc, #192]	; (8017e20 <MotionFX_initialize+0x150>)
 8017d60:	2301      	movs	r3, #1
 8017d62:	6093      	str	r3, [r2, #8]
 8017d64:	6893      	ldr	r3, [r2, #8]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d1fc      	bne.n	8017d64 <MotionFX_initialize+0x94>
 8017d6a:	4b28      	ldr	r3, [pc, #160]	; (8017e0c <MotionFX_initialize+0x13c>)
 8017d6c:	6013      	str	r3, [r2, #0]
 8017d6e:	6812      	ldr	r2, [r2, #0]
 8017d70:	4b27      	ldr	r3, [pc, #156]	; (8017e10 <MotionFX_initialize+0x140>)
 8017d72:	429a      	cmp	r2, r3
 8017d74:	d1d2      	bne.n	8017d1c <MotionFX_initialize+0x4c>
 8017d76:	4b2b      	ldr	r3, [pc, #172]	; (8017e24 <MotionFX_initialize+0x154>)
 8017d78:	4a2b      	ldr	r2, [pc, #172]	; (8017e28 <MotionFX_initialize+0x158>)
 8017d7a:	9303      	str	r3, [sp, #12]
 8017d7c:	2501      	movs	r5, #1
 8017d7e:	4620      	mov	r0, r4
 8017d80:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8017d84:	f882 53c4 	strb.w	r5, [r2, #964]	; 0x3c4
 8017d88:	f7fb f946 	bl	8013018 <MFX_emptyAttitude>
 8017d8c:	a901      	add	r1, sp, #4
 8017d8e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017d92:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8017d96:	f7f9 ff03 	bl	8011ba0 <updateOrientation>
 8017d9a:	a903      	add	r1, sp, #12
 8017d9c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017da0:	f7f9 fefe 	bl	8011ba0 <updateOrientation>
 8017da4:	a902      	add	r1, sp, #8
 8017da6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017daa:	f7f9 fef9 	bl	8011ba0 <updateOrientation>
 8017dae:	4b1f      	ldr	r3, [pc, #124]	; (8017e2c <MotionFX_initialize+0x15c>)
 8017db0:	491f      	ldr	r1, [pc, #124]	; (8017e30 <MotionFX_initialize+0x160>)
 8017db2:	6363      	str	r3, [r4, #52]	; 0x34
 8017db4:	4b1f      	ldr	r3, [pc, #124]	; (8017e34 <MotionFX_initialize+0x164>)
 8017db6:	4a20      	ldr	r2, [pc, #128]	; (8017e38 <MotionFX_initialize+0x168>)
 8017db8:	62a1      	str	r1, [r4, #40]	; 0x28
 8017dba:	61e3      	str	r3, [r4, #28]
 8017dbc:	491f      	ldr	r1, [pc, #124]	; (8017e3c <MotionFX_initialize+0x16c>)
 8017dbe:	61a2      	str	r2, [r4, #24]
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8017dc6:	f44f 7281 	mov.w	r2, #258	; 0x102
 8017dca:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8017dce:	f240 1301 	movw	r3, #257	; 0x101
 8017dd2:	62e0      	str	r0, [r4, #44]	; 0x2c
 8017dd4:	6221      	str	r1, [r4, #32]
 8017dd6:	80a2      	strh	r2, [r4, #4]
 8017dd8:	f8a4 300d 	strh.w	r3, [r4, #13]
 8017ddc:	73e5      	strb	r5, [r4, #15]
 8017dde:	b005      	add	sp, #20
 8017de0:	bd30      	pop	{r4, r5, pc}
 8017de2:	4a17      	ldr	r2, [pc, #92]	; (8017e40 <MotionFX_initialize+0x170>)
 8017de4:	2301      	movs	r3, #1
 8017de6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8017dea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d1fb      	bne.n	8017dea <MotionFX_initialize+0x11a>
 8017df2:	4b06      	ldr	r3, [pc, #24]	; (8017e0c <MotionFX_initialize+0x13c>)
 8017df4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8017df8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8017dfc:	4b04      	ldr	r3, [pc, #16]	; (8017e10 <MotionFX_initialize+0x140>)
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d0b9      	beq.n	8017d76 <MotionFX_initialize+0xa6>
 8017e02:	e78b      	b.n	8017d1c <MotionFX_initialize+0x4c>
 8017e04:	e0002000 	.word	0xe0002000
 8017e08:	40023000 	.word	0x40023000
 8017e0c:	f407a5c2 	.word	0xf407a5c2
 8017e10:	b5e8b5cd 	.word	0xb5e8b5cd
 8017e14:	e0042000 	.word	0xe0042000
 8017e18:	5c001000 	.word	0x5c001000
 8017e1c:	50081000 	.word	0x50081000
 8017e20:	4c004000 	.word	0x4c004000
 8017e24:	00756e65 	.word	0x00756e65
 8017e28:	20000224 	.word	0x20000224
 8017e2c:	3f2ac083 	.word	0x3f2ac083
 8017e30:	3f666666 	.word	0x3f666666
 8017e34:	3a378034 	.word	0x3a378034
 8017e38:	3a51b717 	.word	0x3a51b717
 8017e3c:	3b378034 	.word	0x3b378034
 8017e40:	58024000 	.word	0x58024000

08017e44 <MotionFX_setKnobs>:
 8017e44:	4b24      	ldr	r3, [pc, #144]	; (8017ed8 <MotionFX_setKnobs+0x94>)
 8017e46:	f893 23c4 	ldrb.w	r2, [r3, #964]	; 0x3c4
 8017e4a:	b902      	cbnz	r2, 8017e4e <MotionFX_setKnobs+0xa>
 8017e4c:	4770      	bx	lr
 8017e4e:	460b      	mov	r3, r1
 8017e50:	2900      	cmp	r1, #0
 8017e52:	d0fb      	beq.n	8017e4c <MotionFX_setKnobs+0x8>
 8017e54:	b510      	push	{r4, lr}
 8017e56:	4604      	mov	r4, r0
 8017e58:	689a      	ldr	r2, [r3, #8]
 8017e5a:	6808      	ldr	r0, [r1, #0]
 8017e5c:	6849      	ldr	r1, [r1, #4]
 8017e5e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8017e60:	62a0      	str	r0, [r4, #40]	; 0x28
 8017e62:	6362      	str	r2, [r4, #52]	; 0x34
 8017e64:	7b1a      	ldrb	r2, [r3, #12]
 8017e66:	7162      	strb	r2, [r4, #5]
 8017e68:	6918      	ldr	r0, [r3, #16]
 8017e6a:	6959      	ldr	r1, [r3, #20]
 8017e6c:	699a      	ldr	r2, [r3, #24]
 8017e6e:	6222      	str	r2, [r4, #32]
 8017e70:	61a0      	str	r0, [r4, #24]
 8017e72:	61e1      	str	r1, [r4, #28]
 8017e74:	7f1a      	ldrb	r2, [r3, #28]
 8017e76:	7122      	strb	r2, [r4, #4]
 8017e78:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8017e7c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 8017e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e82:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8017e86:	b084      	sub	sp, #16
 8017e88:	f8b3 101d 	ldrh.w	r1, [r3, #29]
 8017e8c:	7fda      	ldrb	r2, [r3, #31]
 8017e8e:	f88d 2006 	strb.w	r2, [sp, #6]
 8017e92:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017e96:	f8b3 2021 	ldrh.w	r2, [r3, #33]	; 0x21
 8017e9a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8017e9e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017ea2:	f88d 200a 	strb.w	r2, [sp, #10]
 8017ea6:	f8b3 2025 	ldrh.w	r2, [r3, #37]	; 0x25
 8017eaa:	f8ad 200c 	strh.w	r2, [sp, #12]
 8017eae:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8017eb2:	f88d 300e 	strb.w	r3, [sp, #14]
 8017eb6:	a901      	add	r1, sp, #4
 8017eb8:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017ebc:	f7f9 fe70 	bl	8011ba0 <updateOrientation>
 8017ec0:	a903      	add	r1, sp, #12
 8017ec2:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017ec6:	f7f9 fe6b 	bl	8011ba0 <updateOrientation>
 8017eca:	a902      	add	r1, sp, #8
 8017ecc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017ed0:	f7f9 fe66 	bl	8011ba0 <updateOrientation>
 8017ed4:	b004      	add	sp, #16
 8017ed6:	bd10      	pop	{r4, pc}
 8017ed8:	20000224 	.word	0x20000224

08017edc <MotionFX_getKnobs>:
 8017edc:	4b1d      	ldr	r3, [pc, #116]	; (8017f54 <MotionFX_getKnobs+0x78>)
 8017ede:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8017ee2:	b903      	cbnz	r3, 8017ee6 <MotionFX_getKnobs+0xa>
 8017ee4:	4770      	bx	lr
 8017ee6:	460a      	mov	r2, r1
 8017ee8:	2900      	cmp	r1, #0
 8017eea:	d0fb      	beq.n	8017ee4 <MotionFX_getKnobs+0x8>
 8017eec:	b510      	push	{r4, lr}
 8017eee:	4604      	mov	r4, r0
 8017ef0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017ef2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017ef4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ef6:	6093      	str	r3, [r2, #8]
 8017ef8:	6010      	str	r0, [r2, #0]
 8017efa:	6051      	str	r1, [r2, #4]
 8017efc:	7963      	ldrb	r3, [r4, #5]
 8017efe:	7313      	strb	r3, [r2, #12]
 8017f00:	69a0      	ldr	r0, [r4, #24]
 8017f02:	69e1      	ldr	r1, [r4, #28]
 8017f04:	6a23      	ldr	r3, [r4, #32]
 8017f06:	6193      	str	r3, [r2, #24]
 8017f08:	6110      	str	r0, [r2, #16]
 8017f0a:	6151      	str	r1, [r2, #20]
 8017f0c:	7923      	ldrb	r3, [r4, #4]
 8017f0e:	7713      	strb	r3, [r2, #28]
 8017f10:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017f14:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8017f18:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8017f1c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8017f1e:	f102 011d 	add.w	r1, r2, #29
 8017f22:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017f26:	f7f9 fc93 	bl	8011850 <findAxis>
 8017f2a:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8017f2e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017f32:	f7f9 fc8d 	bl	8011850 <findAxis>
 8017f36:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8017f3a:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017f3e:	f7f9 fc87 	bl	8011850 <findAxis>
 8017f42:	2300      	movs	r3, #0
 8017f44:	f882 3020 	strb.w	r3, [r2, #32]
 8017f48:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8017f4c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8017f50:	bd10      	pop	{r4, pc}
 8017f52:	bf00      	nop
 8017f54:	20000224 	.word	0x20000224

08017f58 <MotionFX_enable_6X>:
 8017f58:	4b0e      	ldr	r3, [pc, #56]	; (8017f94 <MotionFX_enable_6X+0x3c>)
 8017f5a:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8017f5e:	b903      	cbnz	r3, 8017f62 <MotionFX_enable_6X+0xa>
 8017f60:	4770      	bx	lr
 8017f62:	2900      	cmp	r1, #0
 8017f64:	d0fc      	beq.n	8017f60 <MotionFX_enable_6X+0x8>
 8017f66:	b530      	push	{r4, r5, lr}
 8017f68:	1d05      	adds	r5, r0, #4
 8017f6a:	b099      	sub	sp, #100	; 0x64
 8017f6c:	4604      	mov	r4, r0
 8017f6e:	4629      	mov	r1, r5
 8017f70:	225c      	movs	r2, #92	; 0x5c
 8017f72:	a801      	add	r0, sp, #4
 8017f74:	f002 f81a 	bl	8019fac <memcpy>
 8017f78:	4620      	mov	r0, r4
 8017f7a:	f7fb f84d 	bl	8013018 <MFX_emptyAttitude>
 8017f7e:	225c      	movs	r2, #92	; 0x5c
 8017f80:	a901      	add	r1, sp, #4
 8017f82:	4628      	mov	r0, r5
 8017f84:	f002 f812 	bl	8019fac <memcpy>
 8017f88:	2300      	movs	r3, #0
 8017f8a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8017f8e:	7363      	strb	r3, [r4, #13]
 8017f90:	b019      	add	sp, #100	; 0x64
 8017f92:	bd30      	pop	{r4, r5, pc}
 8017f94:	20000224 	.word	0x20000224

08017f98 <MotionFX_enable_9X>:
 8017f98:	4b0e      	ldr	r3, [pc, #56]	; (8017fd4 <MotionFX_enable_9X+0x3c>)
 8017f9a:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8017f9e:	b903      	cbnz	r3, 8017fa2 <MotionFX_enable_9X+0xa>
 8017fa0:	4770      	bx	lr
 8017fa2:	2900      	cmp	r1, #0
 8017fa4:	d0fc      	beq.n	8017fa0 <MotionFX_enable_9X+0x8>
 8017fa6:	b530      	push	{r4, r5, lr}
 8017fa8:	1d05      	adds	r5, r0, #4
 8017faa:	b099      	sub	sp, #100	; 0x64
 8017fac:	4604      	mov	r4, r0
 8017fae:	4629      	mov	r1, r5
 8017fb0:	225c      	movs	r2, #92	; 0x5c
 8017fb2:	a801      	add	r0, sp, #4
 8017fb4:	f001 fffa 	bl	8019fac <memcpy>
 8017fb8:	4620      	mov	r0, r4
 8017fba:	f7fb f82d 	bl	8013018 <MFX_emptyAttitude>
 8017fbe:	225c      	movs	r2, #92	; 0x5c
 8017fc0:	a901      	add	r1, sp, #4
 8017fc2:	4628      	mov	r0, r5
 8017fc4:	f001 fff2 	bl	8019fac <memcpy>
 8017fc8:	2301      	movs	r3, #1
 8017fca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8017fce:	7363      	strb	r3, [r4, #13]
 8017fd0:	b019      	add	sp, #100	; 0x64
 8017fd2:	bd30      	pop	{r4, r5, pc}
 8017fd4:	20000224 	.word	0x20000224

08017fd8 <MotionFX_update>:
 8017fd8:	b430      	push	{r4, r5}
 8017fda:	4c06      	ldr	r4, [pc, #24]	; (8017ff4 <MotionFX_update+0x1c>)
 8017fdc:	9d02      	ldr	r5, [sp, #8]
 8017fde:	f894 43c4 	ldrb.w	r4, [r4, #964]	; 0x3c4
 8017fe2:	b90c      	cbnz	r4, 8017fe8 <MotionFX_update+0x10>
 8017fe4:	bc30      	pop	{r4, r5}
 8017fe6:	4770      	bx	lr
 8017fe8:	ed93 0a00 	vldr	s0, [r3]
 8017fec:	462b      	mov	r3, r5
 8017fee:	bc30      	pop	{r4, r5}
 8017ff0:	f7fb bb02 	b.w	80135f8 <iNemoEngine_API_Update>
 8017ff4:	20000224 	.word	0x20000224

08017ff8 <MotionFX_propagate>:
 8017ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ffc:	ed2d 8b06 	vpush	{d8-d10}
 8018000:	4ca2      	ldr	r4, [pc, #648]	; (801828c <MotionFX_propagate+0x294>)
 8018002:	f894 63c4 	ldrb.w	r6, [r4, #964]	; 0x3c4
 8018006:	b0a1      	sub	sp, #132	; 0x84
 8018008:	b926      	cbnz	r6, 8018014 <MotionFX_propagate+0x1c>
 801800a:	b021      	add	sp, #132	; 0x84
 801800c:	ecbd 8b06 	vpop	{d8-d10}
 8018010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018014:	4694      	mov	ip, r2
 8018016:	4604      	mov	r4, r0
 8018018:	460d      	mov	r5, r1
 801801a:	68d0      	ldr	r0, [r2, #12]
 801801c:	6911      	ldr	r1, [r2, #16]
 801801e:	6952      	ldr	r2, [r2, #20]
 8018020:	edd3 9a00 	vldr	s19, [r3]
 8018024:	ab13      	add	r3, sp, #76	; 0x4c
 8018026:	c307      	stmia	r3!, {r0, r1, r2}
 8018028:	f8dc 0000 	ldr.w	r0, [ip]
 801802c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8018030:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018034:	ab10      	add	r3, sp, #64	; 0x40
 8018036:	c307      	stmia	r3!, {r0, r1, r2}
 8018038:	f8dc 0018 	ldr.w	r0, [ip, #24]
 801803c:	f8dc 101c 	ldr.w	r1, [ip, #28]
 8018040:	f8dc 2020 	ldr.w	r2, [ip, #32]
 8018044:	ab16      	add	r3, sp, #88	; 0x58
 8018046:	f104 073a 	add.w	r7, r4, #58	; 0x3a
 801804a:	c307      	stmia	r3!, {r0, r1, r2}
 801804c:	4639      	mov	r1, r7
 801804e:	a803      	add	r0, sp, #12
 8018050:	aa13      	add	r2, sp, #76	; 0x4c
 8018052:	f7f9 fb9b 	bl	801178c <rotVect>
 8018056:	aa16      	add	r2, sp, #88	; 0x58
 8018058:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801805c:	a806      	add	r0, sp, #24
 801805e:	f7f9 fb95 	bl	801178c <rotVect>
 8018062:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8018066:	2b09      	cmp	r3, #9
 8018068:	d829      	bhi.n	80180be <MotionFX_propagate+0xc6>
 801806a:	eddd 8a04 	vldr	s17, [sp, #16]
 801806e:	ed9d 9a03 	vldr	s18, [sp, #12]
 8018072:	ed9d 8a05 	vldr	s16, [sp, #20]
 8018076:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801807a:	eee9 7a09 	vfma.f32	s15, s18, s18
 801807e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8018082:	ee17 0a90 	vmov	r0, s15
 8018086:	f7e8 fa69 	bl	800055c <__aeabi_f2d>
 801808a:	ec41 0b10 	vmov	d0, r0, r1
 801808e:	f004 fe61 	bl	801cd54 <sqrt>
 8018092:	ec51 0b10 	vmov	r0, r1, d0
 8018096:	f7e8 fdb1 	bl	8000bfc <__aeabi_d2f>
 801809a:	ee07 0a90 	vmov	s15, r0
 801809e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80180a2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80180a6:	ee29 9a27 	vmul.f32	s18, s18, s15
 80180aa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80180ae:	ee28 8a27 	vmul.f32	s16, s16, s15
 80180b2:	ed8d 9a03 	vstr	s18, [sp, #12]
 80180b6:	edcd 8a04 	vstr	s17, [sp, #16]
 80180ba:	ed8d 8a05 	vstr	s16, [sp, #20]
 80180be:	7923      	ldrb	r3, [r4, #4]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	f000 80ce 	beq.w	8018262 <MotionFX_propagate+0x26a>
 80180c6:	ee07 3a90 	vmov	s15, r3
 80180ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80180ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80180d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80180d6:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 80180da:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 80180de:	edd3 7a00 	vldr	s15, [r3]
 80180e2:	eddd 8a06 	vldr	s17, [sp, #24]
 80180e6:	ed9d 6a07 	vldr	s12, [sp, #28]
 80180ea:	eddd 6a08 	vldr	s13, [sp, #32]
 80180ee:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8018290 <MotionFX_propagate+0x298>
 80180f2:	eddf 5a68 	vldr	s11, [pc, #416]	; 8018294 <MotionFX_propagate+0x29c>
 80180f6:	eee7 7a28 	vfma.f32	s15, s14, s17
 80180fa:	ee26 9a08 	vmul.f32	s18, s12, s16
 80180fe:	edc3 7a00 	vstr	s15, [r3]
 8018102:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8018106:	edd3 7a00 	vldr	s15, [r3]
 801810a:	ed8d 9a07 	vstr	s18, [sp, #28]
 801810e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8018112:	ee68 8a88 	vmul.f32	s17, s17, s16
 8018116:	edc3 7a00 	vstr	s15, [r3]
 801811a:	f604 1364 	addw	r3, r4, #2404	; 0x964
 801811e:	edd3 7a00 	vldr	s15, [r3]
 8018122:	edcd 8a06 	vstr	s17, [sp, #24]
 8018126:	eee7 7a26 	vfma.f32	s15, s14, s13
 801812a:	ee26 8a88 	vmul.f32	s16, s13, s16
 801812e:	edc3 7a00 	vstr	s15, [r3]
 8018132:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8018136:	edd3 7a00 	vldr	s15, [r3]
 801813a:	ed8d 8a08 	vstr	s16, [sp, #32]
 801813e:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8018142:	ed93 7a00 	vldr	s14, [r3]
 8018146:	ee39 9a67 	vsub.f32	s18, s18, s15
 801814a:	ee78 8ac7 	vsub.f32	s17, s17, s14
 801814e:	ee69 7a09 	vmul.f32	s15, s18, s18
 8018152:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8018156:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801815a:	ed93 7a00 	vldr	s14, [r3]
 801815e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8018162:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8018166:	eee8 7a08 	vfma.f32	s15, s16, s16
 801816a:	ee29 0a80 	vmul.f32	s0, s19, s0
 801816e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8018172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018176:	dd79      	ble.n	801826c <MotionFX_propagate+0x274>
 8018178:	eeb1 aae7 	vsqrt.f32	s20, s15
 801817c:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8018180:	eeb0 0a69 	vmov.f32	s0, s19
 8018184:	f004 ffbc 	bl	801d100 <sinf>
 8018188:	eeb0 7a40 	vmov.f32	s14, s0
 801818c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018190:	eeb0 0a69 	vmov.f32	s0, s19
 8018194:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8018198:	ee29 9a27 	vmul.f32	s18, s18, s15
 801819c:	ee28 8a27 	vmul.f32	s16, s16, s15
 80181a0:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 80181a4:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 80181a8:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80181ac:	f004 fd8e 	bl	801cccc <cosf>
 80181b0:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 80181b4:	a809      	add	r0, sp, #36	; 0x24
 80181b6:	f604 1838 	addw	r8, r4, #2360	; 0x938
 80181ba:	4632      	mov	r2, r6
 80181bc:	4631      	mov	r1, r6
 80181be:	f7f9 fd71 	bl	8011ca4 <qmult>
 80181c2:	edd8 6a00 	vldr	s13, [r8]
 80181c6:	edd6 5a00 	vldr	s11, [r6]
 80181ca:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 80181ce:	f604 1934 	addw	r9, r4, #2356	; 0x934
 80181d2:	ed99 6a00 	vldr	s12, [r9]
 80181d6:	ee66 7aa6 	vmul.f32	s15, s13, s13
 80181da:	4639      	mov	r1, r7
 80181dc:	eee6 7a06 	vfma.f32	s15, s12, s12
 80181e0:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 80181e4:	3301      	adds	r3, #1
 80181e6:	ed97 7a00 	vldr	s14, [r7]
 80181ea:	eee7 7a07 	vfma.f32	s15, s14, s14
 80181ee:	aa13      	add	r2, sp, #76	; 0x4c
 80181f0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80181f4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80181f8:	eeb1 5ae7 	vsqrt.f32	s10, s15
 80181fc:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8018200:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8018204:	ee27 6a86 	vmul.f32	s12, s15, s12
 8018208:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801820c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018210:	edc6 5a00 	vstr	s11, [r6]
 8018214:	ed89 6a00 	vstr	s12, [r9]
 8018218:	edc8 6a00 	vstr	s13, [r8]
 801821c:	ed87 7a00 	vstr	s14, [r7]
 8018220:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8018224:	f7f9 fab2 	bl	801178c <rotVect>
 8018228:	6833      	ldr	r3, [r6, #0]
 801822a:	60eb      	str	r3, [r5, #12]
 801822c:	f8d9 3000 	ldr.w	r3, [r9]
 8018230:	f8d8 2000 	ldr.w	r2, [r8]
 8018234:	612b      	str	r3, [r5, #16]
 8018236:	683b      	ldr	r3, [r7, #0]
 8018238:	61ab      	str	r3, [r5, #24]
 801823a:	616a      	str	r2, [r5, #20]
 801823c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8018240:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8018244:	e9cd 3200 	strd	r3, r2, [sp]
 8018248:	4601      	mov	r1, r0
 801824a:	f105 031c 	add.w	r3, r5, #28
 801824e:	462a      	mov	r2, r5
 8018250:	f105 000c 	add.w	r0, r5, #12
 8018254:	f7fa fe16 	bl	8012e84 <output_update>
 8018258:	b021      	add	sp, #132	; 0x84
 801825a:	ecbd 8b06 	vpop	{d8-d10}
 801825e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018262:	2301      	movs	r3, #1
 8018264:	7123      	strb	r3, [r4, #4]
 8018266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801826a:	e734      	b.n	80180d6 <MotionFX_propagate+0xde>
 801826c:	ee68 8a80 	vmul.f32	s17, s17, s0
 8018270:	ee29 9a00 	vmul.f32	s18, s18, s0
 8018274:	ee28 8a00 	vmul.f32	s16, s16, s0
 8018278:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801827c:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8018280:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8018284:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8018288:	930c      	str	r3, [sp, #48]	; 0x30
 801828a:	e793      	b.n	80181b4 <MotionFX_propagate+0x1bc>
 801828c:	20000224 	.word	0x20000224
 8018290:	3c8efa35 	.word	0x3c8efa35
 8018294:	38d1b718 	.word	0x38d1b718

08018298 <atoi>:
 8018298:	220a      	movs	r2, #10
 801829a:	2100      	movs	r1, #0
 801829c:	f001 bdbe 	b.w	8019e1c <strtol>

080182a0 <__cvt>:
 80182a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80182a4:	ec55 4b10 	vmov	r4, r5, d0
 80182a8:	2d00      	cmp	r5, #0
 80182aa:	460e      	mov	r6, r1
 80182ac:	4619      	mov	r1, r3
 80182ae:	462b      	mov	r3, r5
 80182b0:	bfbb      	ittet	lt
 80182b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80182b6:	461d      	movlt	r5, r3
 80182b8:	2300      	movge	r3, #0
 80182ba:	232d      	movlt	r3, #45	; 0x2d
 80182bc:	700b      	strb	r3, [r1, #0]
 80182be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80182c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80182c4:	4691      	mov	r9, r2
 80182c6:	f023 0820 	bic.w	r8, r3, #32
 80182ca:	bfbc      	itt	lt
 80182cc:	4622      	movlt	r2, r4
 80182ce:	4614      	movlt	r4, r2
 80182d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80182d4:	d005      	beq.n	80182e2 <__cvt+0x42>
 80182d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80182da:	d100      	bne.n	80182de <__cvt+0x3e>
 80182dc:	3601      	adds	r6, #1
 80182de:	2102      	movs	r1, #2
 80182e0:	e000      	b.n	80182e4 <__cvt+0x44>
 80182e2:	2103      	movs	r1, #3
 80182e4:	ab03      	add	r3, sp, #12
 80182e6:	9301      	str	r3, [sp, #4]
 80182e8:	ab02      	add	r3, sp, #8
 80182ea:	9300      	str	r3, [sp, #0]
 80182ec:	ec45 4b10 	vmov	d0, r4, r5
 80182f0:	4653      	mov	r3, sl
 80182f2:	4632      	mov	r2, r6
 80182f4:	f001 ff00 	bl	801a0f8 <_dtoa_r>
 80182f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80182fc:	4607      	mov	r7, r0
 80182fe:	d102      	bne.n	8018306 <__cvt+0x66>
 8018300:	f019 0f01 	tst.w	r9, #1
 8018304:	d022      	beq.n	801834c <__cvt+0xac>
 8018306:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801830a:	eb07 0906 	add.w	r9, r7, r6
 801830e:	d110      	bne.n	8018332 <__cvt+0x92>
 8018310:	783b      	ldrb	r3, [r7, #0]
 8018312:	2b30      	cmp	r3, #48	; 0x30
 8018314:	d10a      	bne.n	801832c <__cvt+0x8c>
 8018316:	2200      	movs	r2, #0
 8018318:	2300      	movs	r3, #0
 801831a:	4620      	mov	r0, r4
 801831c:	4629      	mov	r1, r5
 801831e:	f7e8 fbdd 	bl	8000adc <__aeabi_dcmpeq>
 8018322:	b918      	cbnz	r0, 801832c <__cvt+0x8c>
 8018324:	f1c6 0601 	rsb	r6, r6, #1
 8018328:	f8ca 6000 	str.w	r6, [sl]
 801832c:	f8da 3000 	ldr.w	r3, [sl]
 8018330:	4499      	add	r9, r3
 8018332:	2200      	movs	r2, #0
 8018334:	2300      	movs	r3, #0
 8018336:	4620      	mov	r0, r4
 8018338:	4629      	mov	r1, r5
 801833a:	f7e8 fbcf 	bl	8000adc <__aeabi_dcmpeq>
 801833e:	b108      	cbz	r0, 8018344 <__cvt+0xa4>
 8018340:	f8cd 900c 	str.w	r9, [sp, #12]
 8018344:	2230      	movs	r2, #48	; 0x30
 8018346:	9b03      	ldr	r3, [sp, #12]
 8018348:	454b      	cmp	r3, r9
 801834a:	d307      	bcc.n	801835c <__cvt+0xbc>
 801834c:	9b03      	ldr	r3, [sp, #12]
 801834e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018350:	1bdb      	subs	r3, r3, r7
 8018352:	4638      	mov	r0, r7
 8018354:	6013      	str	r3, [r2, #0]
 8018356:	b004      	add	sp, #16
 8018358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801835c:	1c59      	adds	r1, r3, #1
 801835e:	9103      	str	r1, [sp, #12]
 8018360:	701a      	strb	r2, [r3, #0]
 8018362:	e7f0      	b.n	8018346 <__cvt+0xa6>

08018364 <__exponent>:
 8018364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018366:	4603      	mov	r3, r0
 8018368:	2900      	cmp	r1, #0
 801836a:	bfb8      	it	lt
 801836c:	4249      	neglt	r1, r1
 801836e:	f803 2b02 	strb.w	r2, [r3], #2
 8018372:	bfb4      	ite	lt
 8018374:	222d      	movlt	r2, #45	; 0x2d
 8018376:	222b      	movge	r2, #43	; 0x2b
 8018378:	2909      	cmp	r1, #9
 801837a:	7042      	strb	r2, [r0, #1]
 801837c:	dd2a      	ble.n	80183d4 <__exponent+0x70>
 801837e:	f10d 0207 	add.w	r2, sp, #7
 8018382:	4617      	mov	r7, r2
 8018384:	260a      	movs	r6, #10
 8018386:	4694      	mov	ip, r2
 8018388:	fb91 f5f6 	sdiv	r5, r1, r6
 801838c:	fb06 1415 	mls	r4, r6, r5, r1
 8018390:	3430      	adds	r4, #48	; 0x30
 8018392:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8018396:	460c      	mov	r4, r1
 8018398:	2c63      	cmp	r4, #99	; 0x63
 801839a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801839e:	4629      	mov	r1, r5
 80183a0:	dcf1      	bgt.n	8018386 <__exponent+0x22>
 80183a2:	3130      	adds	r1, #48	; 0x30
 80183a4:	f1ac 0402 	sub.w	r4, ip, #2
 80183a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80183ac:	1c41      	adds	r1, r0, #1
 80183ae:	4622      	mov	r2, r4
 80183b0:	42ba      	cmp	r2, r7
 80183b2:	d30a      	bcc.n	80183ca <__exponent+0x66>
 80183b4:	f10d 0209 	add.w	r2, sp, #9
 80183b8:	eba2 020c 	sub.w	r2, r2, ip
 80183bc:	42bc      	cmp	r4, r7
 80183be:	bf88      	it	hi
 80183c0:	2200      	movhi	r2, #0
 80183c2:	4413      	add	r3, r2
 80183c4:	1a18      	subs	r0, r3, r0
 80183c6:	b003      	add	sp, #12
 80183c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80183ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80183d2:	e7ed      	b.n	80183b0 <__exponent+0x4c>
 80183d4:	2330      	movs	r3, #48	; 0x30
 80183d6:	3130      	adds	r1, #48	; 0x30
 80183d8:	7083      	strb	r3, [r0, #2]
 80183da:	70c1      	strb	r1, [r0, #3]
 80183dc:	1d03      	adds	r3, r0, #4
 80183de:	e7f1      	b.n	80183c4 <__exponent+0x60>

080183e0 <_printf_float>:
 80183e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183e4:	ed2d 8b02 	vpush	{d8}
 80183e8:	b08d      	sub	sp, #52	; 0x34
 80183ea:	460c      	mov	r4, r1
 80183ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80183f0:	4616      	mov	r6, r2
 80183f2:	461f      	mov	r7, r3
 80183f4:	4605      	mov	r5, r0
 80183f6:	f001 fd53 	bl	8019ea0 <_localeconv_r>
 80183fa:	f8d0 a000 	ldr.w	sl, [r0]
 80183fe:	4650      	mov	r0, sl
 8018400:	f7e7 ff36 	bl	8000270 <strlen>
 8018404:	2300      	movs	r3, #0
 8018406:	930a      	str	r3, [sp, #40]	; 0x28
 8018408:	6823      	ldr	r3, [r4, #0]
 801840a:	9305      	str	r3, [sp, #20]
 801840c:	f8d8 3000 	ldr.w	r3, [r8]
 8018410:	f894 b018 	ldrb.w	fp, [r4, #24]
 8018414:	3307      	adds	r3, #7
 8018416:	f023 0307 	bic.w	r3, r3, #7
 801841a:	f103 0208 	add.w	r2, r3, #8
 801841e:	f8c8 2000 	str.w	r2, [r8]
 8018422:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018426:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801842a:	9307      	str	r3, [sp, #28]
 801842c:	f8cd 8018 	str.w	r8, [sp, #24]
 8018430:	ee08 0a10 	vmov	s16, r0
 8018434:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8018438:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801843c:	4b9e      	ldr	r3, [pc, #632]	; (80186b8 <_printf_float+0x2d8>)
 801843e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018442:	f7e8 fb7d 	bl	8000b40 <__aeabi_dcmpun>
 8018446:	bb88      	cbnz	r0, 80184ac <_printf_float+0xcc>
 8018448:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801844c:	4b9a      	ldr	r3, [pc, #616]	; (80186b8 <_printf_float+0x2d8>)
 801844e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018452:	f7e8 fb57 	bl	8000b04 <__aeabi_dcmple>
 8018456:	bb48      	cbnz	r0, 80184ac <_printf_float+0xcc>
 8018458:	2200      	movs	r2, #0
 801845a:	2300      	movs	r3, #0
 801845c:	4640      	mov	r0, r8
 801845e:	4649      	mov	r1, r9
 8018460:	f7e8 fb46 	bl	8000af0 <__aeabi_dcmplt>
 8018464:	b110      	cbz	r0, 801846c <_printf_float+0x8c>
 8018466:	232d      	movs	r3, #45	; 0x2d
 8018468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801846c:	4a93      	ldr	r2, [pc, #588]	; (80186bc <_printf_float+0x2dc>)
 801846e:	4b94      	ldr	r3, [pc, #592]	; (80186c0 <_printf_float+0x2e0>)
 8018470:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8018474:	bf94      	ite	ls
 8018476:	4690      	movls	r8, r2
 8018478:	4698      	movhi	r8, r3
 801847a:	2303      	movs	r3, #3
 801847c:	6123      	str	r3, [r4, #16]
 801847e:	9b05      	ldr	r3, [sp, #20]
 8018480:	f023 0304 	bic.w	r3, r3, #4
 8018484:	6023      	str	r3, [r4, #0]
 8018486:	f04f 0900 	mov.w	r9, #0
 801848a:	9700      	str	r7, [sp, #0]
 801848c:	4633      	mov	r3, r6
 801848e:	aa0b      	add	r2, sp, #44	; 0x2c
 8018490:	4621      	mov	r1, r4
 8018492:	4628      	mov	r0, r5
 8018494:	f000 f9da 	bl	801884c <_printf_common>
 8018498:	3001      	adds	r0, #1
 801849a:	f040 8090 	bne.w	80185be <_printf_float+0x1de>
 801849e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80184a2:	b00d      	add	sp, #52	; 0x34
 80184a4:	ecbd 8b02 	vpop	{d8}
 80184a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184ac:	4642      	mov	r2, r8
 80184ae:	464b      	mov	r3, r9
 80184b0:	4640      	mov	r0, r8
 80184b2:	4649      	mov	r1, r9
 80184b4:	f7e8 fb44 	bl	8000b40 <__aeabi_dcmpun>
 80184b8:	b140      	cbz	r0, 80184cc <_printf_float+0xec>
 80184ba:	464b      	mov	r3, r9
 80184bc:	2b00      	cmp	r3, #0
 80184be:	bfbc      	itt	lt
 80184c0:	232d      	movlt	r3, #45	; 0x2d
 80184c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80184c6:	4a7f      	ldr	r2, [pc, #508]	; (80186c4 <_printf_float+0x2e4>)
 80184c8:	4b7f      	ldr	r3, [pc, #508]	; (80186c8 <_printf_float+0x2e8>)
 80184ca:	e7d1      	b.n	8018470 <_printf_float+0x90>
 80184cc:	6863      	ldr	r3, [r4, #4]
 80184ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80184d2:	9206      	str	r2, [sp, #24]
 80184d4:	1c5a      	adds	r2, r3, #1
 80184d6:	d13f      	bne.n	8018558 <_printf_float+0x178>
 80184d8:	2306      	movs	r3, #6
 80184da:	6063      	str	r3, [r4, #4]
 80184dc:	9b05      	ldr	r3, [sp, #20]
 80184de:	6861      	ldr	r1, [r4, #4]
 80184e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80184e4:	2300      	movs	r3, #0
 80184e6:	9303      	str	r3, [sp, #12]
 80184e8:	ab0a      	add	r3, sp, #40	; 0x28
 80184ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80184ee:	ab09      	add	r3, sp, #36	; 0x24
 80184f0:	ec49 8b10 	vmov	d0, r8, r9
 80184f4:	9300      	str	r3, [sp, #0]
 80184f6:	6022      	str	r2, [r4, #0]
 80184f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80184fc:	4628      	mov	r0, r5
 80184fe:	f7ff fecf 	bl	80182a0 <__cvt>
 8018502:	9b06      	ldr	r3, [sp, #24]
 8018504:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018506:	2b47      	cmp	r3, #71	; 0x47
 8018508:	4680      	mov	r8, r0
 801850a:	d108      	bne.n	801851e <_printf_float+0x13e>
 801850c:	1cc8      	adds	r0, r1, #3
 801850e:	db02      	blt.n	8018516 <_printf_float+0x136>
 8018510:	6863      	ldr	r3, [r4, #4]
 8018512:	4299      	cmp	r1, r3
 8018514:	dd41      	ble.n	801859a <_printf_float+0x1ba>
 8018516:	f1ab 0302 	sub.w	r3, fp, #2
 801851a:	fa5f fb83 	uxtb.w	fp, r3
 801851e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018522:	d820      	bhi.n	8018566 <_printf_float+0x186>
 8018524:	3901      	subs	r1, #1
 8018526:	465a      	mov	r2, fp
 8018528:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801852c:	9109      	str	r1, [sp, #36]	; 0x24
 801852e:	f7ff ff19 	bl	8018364 <__exponent>
 8018532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018534:	1813      	adds	r3, r2, r0
 8018536:	2a01      	cmp	r2, #1
 8018538:	4681      	mov	r9, r0
 801853a:	6123      	str	r3, [r4, #16]
 801853c:	dc02      	bgt.n	8018544 <_printf_float+0x164>
 801853e:	6822      	ldr	r2, [r4, #0]
 8018540:	07d2      	lsls	r2, r2, #31
 8018542:	d501      	bpl.n	8018548 <_printf_float+0x168>
 8018544:	3301      	adds	r3, #1
 8018546:	6123      	str	r3, [r4, #16]
 8018548:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801854c:	2b00      	cmp	r3, #0
 801854e:	d09c      	beq.n	801848a <_printf_float+0xaa>
 8018550:	232d      	movs	r3, #45	; 0x2d
 8018552:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018556:	e798      	b.n	801848a <_printf_float+0xaa>
 8018558:	9a06      	ldr	r2, [sp, #24]
 801855a:	2a47      	cmp	r2, #71	; 0x47
 801855c:	d1be      	bne.n	80184dc <_printf_float+0xfc>
 801855e:	2b00      	cmp	r3, #0
 8018560:	d1bc      	bne.n	80184dc <_printf_float+0xfc>
 8018562:	2301      	movs	r3, #1
 8018564:	e7b9      	b.n	80184da <_printf_float+0xfa>
 8018566:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801856a:	d118      	bne.n	801859e <_printf_float+0x1be>
 801856c:	2900      	cmp	r1, #0
 801856e:	6863      	ldr	r3, [r4, #4]
 8018570:	dd0b      	ble.n	801858a <_printf_float+0x1aa>
 8018572:	6121      	str	r1, [r4, #16]
 8018574:	b913      	cbnz	r3, 801857c <_printf_float+0x19c>
 8018576:	6822      	ldr	r2, [r4, #0]
 8018578:	07d0      	lsls	r0, r2, #31
 801857a:	d502      	bpl.n	8018582 <_printf_float+0x1a2>
 801857c:	3301      	adds	r3, #1
 801857e:	440b      	add	r3, r1
 8018580:	6123      	str	r3, [r4, #16]
 8018582:	65a1      	str	r1, [r4, #88]	; 0x58
 8018584:	f04f 0900 	mov.w	r9, #0
 8018588:	e7de      	b.n	8018548 <_printf_float+0x168>
 801858a:	b913      	cbnz	r3, 8018592 <_printf_float+0x1b2>
 801858c:	6822      	ldr	r2, [r4, #0]
 801858e:	07d2      	lsls	r2, r2, #31
 8018590:	d501      	bpl.n	8018596 <_printf_float+0x1b6>
 8018592:	3302      	adds	r3, #2
 8018594:	e7f4      	b.n	8018580 <_printf_float+0x1a0>
 8018596:	2301      	movs	r3, #1
 8018598:	e7f2      	b.n	8018580 <_printf_float+0x1a0>
 801859a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801859e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80185a0:	4299      	cmp	r1, r3
 80185a2:	db05      	blt.n	80185b0 <_printf_float+0x1d0>
 80185a4:	6823      	ldr	r3, [r4, #0]
 80185a6:	6121      	str	r1, [r4, #16]
 80185a8:	07d8      	lsls	r0, r3, #31
 80185aa:	d5ea      	bpl.n	8018582 <_printf_float+0x1a2>
 80185ac:	1c4b      	adds	r3, r1, #1
 80185ae:	e7e7      	b.n	8018580 <_printf_float+0x1a0>
 80185b0:	2900      	cmp	r1, #0
 80185b2:	bfd4      	ite	le
 80185b4:	f1c1 0202 	rsble	r2, r1, #2
 80185b8:	2201      	movgt	r2, #1
 80185ba:	4413      	add	r3, r2
 80185bc:	e7e0      	b.n	8018580 <_printf_float+0x1a0>
 80185be:	6823      	ldr	r3, [r4, #0]
 80185c0:	055a      	lsls	r2, r3, #21
 80185c2:	d407      	bmi.n	80185d4 <_printf_float+0x1f4>
 80185c4:	6923      	ldr	r3, [r4, #16]
 80185c6:	4642      	mov	r2, r8
 80185c8:	4631      	mov	r1, r6
 80185ca:	4628      	mov	r0, r5
 80185cc:	47b8      	blx	r7
 80185ce:	3001      	adds	r0, #1
 80185d0:	d12c      	bne.n	801862c <_printf_float+0x24c>
 80185d2:	e764      	b.n	801849e <_printf_float+0xbe>
 80185d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80185d8:	f240 80e0 	bls.w	801879c <_printf_float+0x3bc>
 80185dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80185e0:	2200      	movs	r2, #0
 80185e2:	2300      	movs	r3, #0
 80185e4:	f7e8 fa7a 	bl	8000adc <__aeabi_dcmpeq>
 80185e8:	2800      	cmp	r0, #0
 80185ea:	d034      	beq.n	8018656 <_printf_float+0x276>
 80185ec:	4a37      	ldr	r2, [pc, #220]	; (80186cc <_printf_float+0x2ec>)
 80185ee:	2301      	movs	r3, #1
 80185f0:	4631      	mov	r1, r6
 80185f2:	4628      	mov	r0, r5
 80185f4:	47b8      	blx	r7
 80185f6:	3001      	adds	r0, #1
 80185f8:	f43f af51 	beq.w	801849e <_printf_float+0xbe>
 80185fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018600:	429a      	cmp	r2, r3
 8018602:	db02      	blt.n	801860a <_printf_float+0x22a>
 8018604:	6823      	ldr	r3, [r4, #0]
 8018606:	07d8      	lsls	r0, r3, #31
 8018608:	d510      	bpl.n	801862c <_printf_float+0x24c>
 801860a:	ee18 3a10 	vmov	r3, s16
 801860e:	4652      	mov	r2, sl
 8018610:	4631      	mov	r1, r6
 8018612:	4628      	mov	r0, r5
 8018614:	47b8      	blx	r7
 8018616:	3001      	adds	r0, #1
 8018618:	f43f af41 	beq.w	801849e <_printf_float+0xbe>
 801861c:	f04f 0800 	mov.w	r8, #0
 8018620:	f104 091a 	add.w	r9, r4, #26
 8018624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018626:	3b01      	subs	r3, #1
 8018628:	4543      	cmp	r3, r8
 801862a:	dc09      	bgt.n	8018640 <_printf_float+0x260>
 801862c:	6823      	ldr	r3, [r4, #0]
 801862e:	079b      	lsls	r3, r3, #30
 8018630:	f100 8107 	bmi.w	8018842 <_printf_float+0x462>
 8018634:	68e0      	ldr	r0, [r4, #12]
 8018636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018638:	4298      	cmp	r0, r3
 801863a:	bfb8      	it	lt
 801863c:	4618      	movlt	r0, r3
 801863e:	e730      	b.n	80184a2 <_printf_float+0xc2>
 8018640:	2301      	movs	r3, #1
 8018642:	464a      	mov	r2, r9
 8018644:	4631      	mov	r1, r6
 8018646:	4628      	mov	r0, r5
 8018648:	47b8      	blx	r7
 801864a:	3001      	adds	r0, #1
 801864c:	f43f af27 	beq.w	801849e <_printf_float+0xbe>
 8018650:	f108 0801 	add.w	r8, r8, #1
 8018654:	e7e6      	b.n	8018624 <_printf_float+0x244>
 8018656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018658:	2b00      	cmp	r3, #0
 801865a:	dc39      	bgt.n	80186d0 <_printf_float+0x2f0>
 801865c:	4a1b      	ldr	r2, [pc, #108]	; (80186cc <_printf_float+0x2ec>)
 801865e:	2301      	movs	r3, #1
 8018660:	4631      	mov	r1, r6
 8018662:	4628      	mov	r0, r5
 8018664:	47b8      	blx	r7
 8018666:	3001      	adds	r0, #1
 8018668:	f43f af19 	beq.w	801849e <_printf_float+0xbe>
 801866c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8018670:	4313      	orrs	r3, r2
 8018672:	d102      	bne.n	801867a <_printf_float+0x29a>
 8018674:	6823      	ldr	r3, [r4, #0]
 8018676:	07d9      	lsls	r1, r3, #31
 8018678:	d5d8      	bpl.n	801862c <_printf_float+0x24c>
 801867a:	ee18 3a10 	vmov	r3, s16
 801867e:	4652      	mov	r2, sl
 8018680:	4631      	mov	r1, r6
 8018682:	4628      	mov	r0, r5
 8018684:	47b8      	blx	r7
 8018686:	3001      	adds	r0, #1
 8018688:	f43f af09 	beq.w	801849e <_printf_float+0xbe>
 801868c:	f04f 0900 	mov.w	r9, #0
 8018690:	f104 0a1a 	add.w	sl, r4, #26
 8018694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018696:	425b      	negs	r3, r3
 8018698:	454b      	cmp	r3, r9
 801869a:	dc01      	bgt.n	80186a0 <_printf_float+0x2c0>
 801869c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801869e:	e792      	b.n	80185c6 <_printf_float+0x1e6>
 80186a0:	2301      	movs	r3, #1
 80186a2:	4652      	mov	r2, sl
 80186a4:	4631      	mov	r1, r6
 80186a6:	4628      	mov	r0, r5
 80186a8:	47b8      	blx	r7
 80186aa:	3001      	adds	r0, #1
 80186ac:	f43f aef7 	beq.w	801849e <_printf_float+0xbe>
 80186b0:	f109 0901 	add.w	r9, r9, #1
 80186b4:	e7ee      	b.n	8018694 <_printf_float+0x2b4>
 80186b6:	bf00      	nop
 80186b8:	7fefffff 	.word	0x7fefffff
 80186bc:	0801fb58 	.word	0x0801fb58
 80186c0:	0801fb5c 	.word	0x0801fb5c
 80186c4:	0801fb60 	.word	0x0801fb60
 80186c8:	0801fb64 	.word	0x0801fb64
 80186cc:	0801fb68 	.word	0x0801fb68
 80186d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80186d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80186d4:	429a      	cmp	r2, r3
 80186d6:	bfa8      	it	ge
 80186d8:	461a      	movge	r2, r3
 80186da:	2a00      	cmp	r2, #0
 80186dc:	4691      	mov	r9, r2
 80186de:	dc37      	bgt.n	8018750 <_printf_float+0x370>
 80186e0:	f04f 0b00 	mov.w	fp, #0
 80186e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80186e8:	f104 021a 	add.w	r2, r4, #26
 80186ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80186ee:	9305      	str	r3, [sp, #20]
 80186f0:	eba3 0309 	sub.w	r3, r3, r9
 80186f4:	455b      	cmp	r3, fp
 80186f6:	dc33      	bgt.n	8018760 <_printf_float+0x380>
 80186f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80186fc:	429a      	cmp	r2, r3
 80186fe:	db3b      	blt.n	8018778 <_printf_float+0x398>
 8018700:	6823      	ldr	r3, [r4, #0]
 8018702:	07da      	lsls	r2, r3, #31
 8018704:	d438      	bmi.n	8018778 <_printf_float+0x398>
 8018706:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801870a:	eba2 0903 	sub.w	r9, r2, r3
 801870e:	9b05      	ldr	r3, [sp, #20]
 8018710:	1ad2      	subs	r2, r2, r3
 8018712:	4591      	cmp	r9, r2
 8018714:	bfa8      	it	ge
 8018716:	4691      	movge	r9, r2
 8018718:	f1b9 0f00 	cmp.w	r9, #0
 801871c:	dc35      	bgt.n	801878a <_printf_float+0x3aa>
 801871e:	f04f 0800 	mov.w	r8, #0
 8018722:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018726:	f104 0a1a 	add.w	sl, r4, #26
 801872a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801872e:	1a9b      	subs	r3, r3, r2
 8018730:	eba3 0309 	sub.w	r3, r3, r9
 8018734:	4543      	cmp	r3, r8
 8018736:	f77f af79 	ble.w	801862c <_printf_float+0x24c>
 801873a:	2301      	movs	r3, #1
 801873c:	4652      	mov	r2, sl
 801873e:	4631      	mov	r1, r6
 8018740:	4628      	mov	r0, r5
 8018742:	47b8      	blx	r7
 8018744:	3001      	adds	r0, #1
 8018746:	f43f aeaa 	beq.w	801849e <_printf_float+0xbe>
 801874a:	f108 0801 	add.w	r8, r8, #1
 801874e:	e7ec      	b.n	801872a <_printf_float+0x34a>
 8018750:	4613      	mov	r3, r2
 8018752:	4631      	mov	r1, r6
 8018754:	4642      	mov	r2, r8
 8018756:	4628      	mov	r0, r5
 8018758:	47b8      	blx	r7
 801875a:	3001      	adds	r0, #1
 801875c:	d1c0      	bne.n	80186e0 <_printf_float+0x300>
 801875e:	e69e      	b.n	801849e <_printf_float+0xbe>
 8018760:	2301      	movs	r3, #1
 8018762:	4631      	mov	r1, r6
 8018764:	4628      	mov	r0, r5
 8018766:	9205      	str	r2, [sp, #20]
 8018768:	47b8      	blx	r7
 801876a:	3001      	adds	r0, #1
 801876c:	f43f ae97 	beq.w	801849e <_printf_float+0xbe>
 8018770:	9a05      	ldr	r2, [sp, #20]
 8018772:	f10b 0b01 	add.w	fp, fp, #1
 8018776:	e7b9      	b.n	80186ec <_printf_float+0x30c>
 8018778:	ee18 3a10 	vmov	r3, s16
 801877c:	4652      	mov	r2, sl
 801877e:	4631      	mov	r1, r6
 8018780:	4628      	mov	r0, r5
 8018782:	47b8      	blx	r7
 8018784:	3001      	adds	r0, #1
 8018786:	d1be      	bne.n	8018706 <_printf_float+0x326>
 8018788:	e689      	b.n	801849e <_printf_float+0xbe>
 801878a:	9a05      	ldr	r2, [sp, #20]
 801878c:	464b      	mov	r3, r9
 801878e:	4442      	add	r2, r8
 8018790:	4631      	mov	r1, r6
 8018792:	4628      	mov	r0, r5
 8018794:	47b8      	blx	r7
 8018796:	3001      	adds	r0, #1
 8018798:	d1c1      	bne.n	801871e <_printf_float+0x33e>
 801879a:	e680      	b.n	801849e <_printf_float+0xbe>
 801879c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801879e:	2a01      	cmp	r2, #1
 80187a0:	dc01      	bgt.n	80187a6 <_printf_float+0x3c6>
 80187a2:	07db      	lsls	r3, r3, #31
 80187a4:	d53a      	bpl.n	801881c <_printf_float+0x43c>
 80187a6:	2301      	movs	r3, #1
 80187a8:	4642      	mov	r2, r8
 80187aa:	4631      	mov	r1, r6
 80187ac:	4628      	mov	r0, r5
 80187ae:	47b8      	blx	r7
 80187b0:	3001      	adds	r0, #1
 80187b2:	f43f ae74 	beq.w	801849e <_printf_float+0xbe>
 80187b6:	ee18 3a10 	vmov	r3, s16
 80187ba:	4652      	mov	r2, sl
 80187bc:	4631      	mov	r1, r6
 80187be:	4628      	mov	r0, r5
 80187c0:	47b8      	blx	r7
 80187c2:	3001      	adds	r0, #1
 80187c4:	f43f ae6b 	beq.w	801849e <_printf_float+0xbe>
 80187c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80187cc:	2200      	movs	r2, #0
 80187ce:	2300      	movs	r3, #0
 80187d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80187d4:	f7e8 f982 	bl	8000adc <__aeabi_dcmpeq>
 80187d8:	b9d8      	cbnz	r0, 8018812 <_printf_float+0x432>
 80187da:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80187de:	f108 0201 	add.w	r2, r8, #1
 80187e2:	4631      	mov	r1, r6
 80187e4:	4628      	mov	r0, r5
 80187e6:	47b8      	blx	r7
 80187e8:	3001      	adds	r0, #1
 80187ea:	d10e      	bne.n	801880a <_printf_float+0x42a>
 80187ec:	e657      	b.n	801849e <_printf_float+0xbe>
 80187ee:	2301      	movs	r3, #1
 80187f0:	4652      	mov	r2, sl
 80187f2:	4631      	mov	r1, r6
 80187f4:	4628      	mov	r0, r5
 80187f6:	47b8      	blx	r7
 80187f8:	3001      	adds	r0, #1
 80187fa:	f43f ae50 	beq.w	801849e <_printf_float+0xbe>
 80187fe:	f108 0801 	add.w	r8, r8, #1
 8018802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018804:	3b01      	subs	r3, #1
 8018806:	4543      	cmp	r3, r8
 8018808:	dcf1      	bgt.n	80187ee <_printf_float+0x40e>
 801880a:	464b      	mov	r3, r9
 801880c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018810:	e6da      	b.n	80185c8 <_printf_float+0x1e8>
 8018812:	f04f 0800 	mov.w	r8, #0
 8018816:	f104 0a1a 	add.w	sl, r4, #26
 801881a:	e7f2      	b.n	8018802 <_printf_float+0x422>
 801881c:	2301      	movs	r3, #1
 801881e:	4642      	mov	r2, r8
 8018820:	e7df      	b.n	80187e2 <_printf_float+0x402>
 8018822:	2301      	movs	r3, #1
 8018824:	464a      	mov	r2, r9
 8018826:	4631      	mov	r1, r6
 8018828:	4628      	mov	r0, r5
 801882a:	47b8      	blx	r7
 801882c:	3001      	adds	r0, #1
 801882e:	f43f ae36 	beq.w	801849e <_printf_float+0xbe>
 8018832:	f108 0801 	add.w	r8, r8, #1
 8018836:	68e3      	ldr	r3, [r4, #12]
 8018838:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801883a:	1a5b      	subs	r3, r3, r1
 801883c:	4543      	cmp	r3, r8
 801883e:	dcf0      	bgt.n	8018822 <_printf_float+0x442>
 8018840:	e6f8      	b.n	8018634 <_printf_float+0x254>
 8018842:	f04f 0800 	mov.w	r8, #0
 8018846:	f104 0919 	add.w	r9, r4, #25
 801884a:	e7f4      	b.n	8018836 <_printf_float+0x456>

0801884c <_printf_common>:
 801884c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018850:	4616      	mov	r6, r2
 8018852:	4699      	mov	r9, r3
 8018854:	688a      	ldr	r2, [r1, #8]
 8018856:	690b      	ldr	r3, [r1, #16]
 8018858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801885c:	4293      	cmp	r3, r2
 801885e:	bfb8      	it	lt
 8018860:	4613      	movlt	r3, r2
 8018862:	6033      	str	r3, [r6, #0]
 8018864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018868:	4607      	mov	r7, r0
 801886a:	460c      	mov	r4, r1
 801886c:	b10a      	cbz	r2, 8018872 <_printf_common+0x26>
 801886e:	3301      	adds	r3, #1
 8018870:	6033      	str	r3, [r6, #0]
 8018872:	6823      	ldr	r3, [r4, #0]
 8018874:	0699      	lsls	r1, r3, #26
 8018876:	bf42      	ittt	mi
 8018878:	6833      	ldrmi	r3, [r6, #0]
 801887a:	3302      	addmi	r3, #2
 801887c:	6033      	strmi	r3, [r6, #0]
 801887e:	6825      	ldr	r5, [r4, #0]
 8018880:	f015 0506 	ands.w	r5, r5, #6
 8018884:	d106      	bne.n	8018894 <_printf_common+0x48>
 8018886:	f104 0a19 	add.w	sl, r4, #25
 801888a:	68e3      	ldr	r3, [r4, #12]
 801888c:	6832      	ldr	r2, [r6, #0]
 801888e:	1a9b      	subs	r3, r3, r2
 8018890:	42ab      	cmp	r3, r5
 8018892:	dc26      	bgt.n	80188e2 <_printf_common+0x96>
 8018894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018898:	1e13      	subs	r3, r2, #0
 801889a:	6822      	ldr	r2, [r4, #0]
 801889c:	bf18      	it	ne
 801889e:	2301      	movne	r3, #1
 80188a0:	0692      	lsls	r2, r2, #26
 80188a2:	d42b      	bmi.n	80188fc <_printf_common+0xb0>
 80188a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80188a8:	4649      	mov	r1, r9
 80188aa:	4638      	mov	r0, r7
 80188ac:	47c0      	blx	r8
 80188ae:	3001      	adds	r0, #1
 80188b0:	d01e      	beq.n	80188f0 <_printf_common+0xa4>
 80188b2:	6823      	ldr	r3, [r4, #0]
 80188b4:	6922      	ldr	r2, [r4, #16]
 80188b6:	f003 0306 	and.w	r3, r3, #6
 80188ba:	2b04      	cmp	r3, #4
 80188bc:	bf02      	ittt	eq
 80188be:	68e5      	ldreq	r5, [r4, #12]
 80188c0:	6833      	ldreq	r3, [r6, #0]
 80188c2:	1aed      	subeq	r5, r5, r3
 80188c4:	68a3      	ldr	r3, [r4, #8]
 80188c6:	bf0c      	ite	eq
 80188c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80188cc:	2500      	movne	r5, #0
 80188ce:	4293      	cmp	r3, r2
 80188d0:	bfc4      	itt	gt
 80188d2:	1a9b      	subgt	r3, r3, r2
 80188d4:	18ed      	addgt	r5, r5, r3
 80188d6:	2600      	movs	r6, #0
 80188d8:	341a      	adds	r4, #26
 80188da:	42b5      	cmp	r5, r6
 80188dc:	d11a      	bne.n	8018914 <_printf_common+0xc8>
 80188de:	2000      	movs	r0, #0
 80188e0:	e008      	b.n	80188f4 <_printf_common+0xa8>
 80188e2:	2301      	movs	r3, #1
 80188e4:	4652      	mov	r2, sl
 80188e6:	4649      	mov	r1, r9
 80188e8:	4638      	mov	r0, r7
 80188ea:	47c0      	blx	r8
 80188ec:	3001      	adds	r0, #1
 80188ee:	d103      	bne.n	80188f8 <_printf_common+0xac>
 80188f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80188f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188f8:	3501      	adds	r5, #1
 80188fa:	e7c6      	b.n	801888a <_printf_common+0x3e>
 80188fc:	18e1      	adds	r1, r4, r3
 80188fe:	1c5a      	adds	r2, r3, #1
 8018900:	2030      	movs	r0, #48	; 0x30
 8018902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018906:	4422      	add	r2, r4
 8018908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801890c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018910:	3302      	adds	r3, #2
 8018912:	e7c7      	b.n	80188a4 <_printf_common+0x58>
 8018914:	2301      	movs	r3, #1
 8018916:	4622      	mov	r2, r4
 8018918:	4649      	mov	r1, r9
 801891a:	4638      	mov	r0, r7
 801891c:	47c0      	blx	r8
 801891e:	3001      	adds	r0, #1
 8018920:	d0e6      	beq.n	80188f0 <_printf_common+0xa4>
 8018922:	3601      	adds	r6, #1
 8018924:	e7d9      	b.n	80188da <_printf_common+0x8e>
	...

08018928 <_printf_i>:
 8018928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801892c:	7e0f      	ldrb	r7, [r1, #24]
 801892e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018930:	2f78      	cmp	r7, #120	; 0x78
 8018932:	4691      	mov	r9, r2
 8018934:	4680      	mov	r8, r0
 8018936:	460c      	mov	r4, r1
 8018938:	469a      	mov	sl, r3
 801893a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801893e:	d807      	bhi.n	8018950 <_printf_i+0x28>
 8018940:	2f62      	cmp	r7, #98	; 0x62
 8018942:	d80a      	bhi.n	801895a <_printf_i+0x32>
 8018944:	2f00      	cmp	r7, #0
 8018946:	f000 80d4 	beq.w	8018af2 <_printf_i+0x1ca>
 801894a:	2f58      	cmp	r7, #88	; 0x58
 801894c:	f000 80c0 	beq.w	8018ad0 <_printf_i+0x1a8>
 8018950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018958:	e03a      	b.n	80189d0 <_printf_i+0xa8>
 801895a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801895e:	2b15      	cmp	r3, #21
 8018960:	d8f6      	bhi.n	8018950 <_printf_i+0x28>
 8018962:	a101      	add	r1, pc, #4	; (adr r1, 8018968 <_printf_i+0x40>)
 8018964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018968:	080189c1 	.word	0x080189c1
 801896c:	080189d5 	.word	0x080189d5
 8018970:	08018951 	.word	0x08018951
 8018974:	08018951 	.word	0x08018951
 8018978:	08018951 	.word	0x08018951
 801897c:	08018951 	.word	0x08018951
 8018980:	080189d5 	.word	0x080189d5
 8018984:	08018951 	.word	0x08018951
 8018988:	08018951 	.word	0x08018951
 801898c:	08018951 	.word	0x08018951
 8018990:	08018951 	.word	0x08018951
 8018994:	08018ad9 	.word	0x08018ad9
 8018998:	08018a01 	.word	0x08018a01
 801899c:	08018a93 	.word	0x08018a93
 80189a0:	08018951 	.word	0x08018951
 80189a4:	08018951 	.word	0x08018951
 80189a8:	08018afb 	.word	0x08018afb
 80189ac:	08018951 	.word	0x08018951
 80189b0:	08018a01 	.word	0x08018a01
 80189b4:	08018951 	.word	0x08018951
 80189b8:	08018951 	.word	0x08018951
 80189bc:	08018a9b 	.word	0x08018a9b
 80189c0:	682b      	ldr	r3, [r5, #0]
 80189c2:	1d1a      	adds	r2, r3, #4
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	602a      	str	r2, [r5, #0]
 80189c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80189cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80189d0:	2301      	movs	r3, #1
 80189d2:	e09f      	b.n	8018b14 <_printf_i+0x1ec>
 80189d4:	6820      	ldr	r0, [r4, #0]
 80189d6:	682b      	ldr	r3, [r5, #0]
 80189d8:	0607      	lsls	r7, r0, #24
 80189da:	f103 0104 	add.w	r1, r3, #4
 80189de:	6029      	str	r1, [r5, #0]
 80189e0:	d501      	bpl.n	80189e6 <_printf_i+0xbe>
 80189e2:	681e      	ldr	r6, [r3, #0]
 80189e4:	e003      	b.n	80189ee <_printf_i+0xc6>
 80189e6:	0646      	lsls	r6, r0, #25
 80189e8:	d5fb      	bpl.n	80189e2 <_printf_i+0xba>
 80189ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80189ee:	2e00      	cmp	r6, #0
 80189f0:	da03      	bge.n	80189fa <_printf_i+0xd2>
 80189f2:	232d      	movs	r3, #45	; 0x2d
 80189f4:	4276      	negs	r6, r6
 80189f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80189fa:	485a      	ldr	r0, [pc, #360]	; (8018b64 <_printf_i+0x23c>)
 80189fc:	230a      	movs	r3, #10
 80189fe:	e012      	b.n	8018a26 <_printf_i+0xfe>
 8018a00:	682b      	ldr	r3, [r5, #0]
 8018a02:	6820      	ldr	r0, [r4, #0]
 8018a04:	1d19      	adds	r1, r3, #4
 8018a06:	6029      	str	r1, [r5, #0]
 8018a08:	0605      	lsls	r5, r0, #24
 8018a0a:	d501      	bpl.n	8018a10 <_printf_i+0xe8>
 8018a0c:	681e      	ldr	r6, [r3, #0]
 8018a0e:	e002      	b.n	8018a16 <_printf_i+0xee>
 8018a10:	0641      	lsls	r1, r0, #25
 8018a12:	d5fb      	bpl.n	8018a0c <_printf_i+0xe4>
 8018a14:	881e      	ldrh	r6, [r3, #0]
 8018a16:	4853      	ldr	r0, [pc, #332]	; (8018b64 <_printf_i+0x23c>)
 8018a18:	2f6f      	cmp	r7, #111	; 0x6f
 8018a1a:	bf0c      	ite	eq
 8018a1c:	2308      	moveq	r3, #8
 8018a1e:	230a      	movne	r3, #10
 8018a20:	2100      	movs	r1, #0
 8018a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018a26:	6865      	ldr	r5, [r4, #4]
 8018a28:	60a5      	str	r5, [r4, #8]
 8018a2a:	2d00      	cmp	r5, #0
 8018a2c:	bfa2      	ittt	ge
 8018a2e:	6821      	ldrge	r1, [r4, #0]
 8018a30:	f021 0104 	bicge.w	r1, r1, #4
 8018a34:	6021      	strge	r1, [r4, #0]
 8018a36:	b90e      	cbnz	r6, 8018a3c <_printf_i+0x114>
 8018a38:	2d00      	cmp	r5, #0
 8018a3a:	d04b      	beq.n	8018ad4 <_printf_i+0x1ac>
 8018a3c:	4615      	mov	r5, r2
 8018a3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8018a42:	fb03 6711 	mls	r7, r3, r1, r6
 8018a46:	5dc7      	ldrb	r7, [r0, r7]
 8018a48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018a4c:	4637      	mov	r7, r6
 8018a4e:	42bb      	cmp	r3, r7
 8018a50:	460e      	mov	r6, r1
 8018a52:	d9f4      	bls.n	8018a3e <_printf_i+0x116>
 8018a54:	2b08      	cmp	r3, #8
 8018a56:	d10b      	bne.n	8018a70 <_printf_i+0x148>
 8018a58:	6823      	ldr	r3, [r4, #0]
 8018a5a:	07de      	lsls	r6, r3, #31
 8018a5c:	d508      	bpl.n	8018a70 <_printf_i+0x148>
 8018a5e:	6923      	ldr	r3, [r4, #16]
 8018a60:	6861      	ldr	r1, [r4, #4]
 8018a62:	4299      	cmp	r1, r3
 8018a64:	bfde      	ittt	le
 8018a66:	2330      	movle	r3, #48	; 0x30
 8018a68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018a6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018a70:	1b52      	subs	r2, r2, r5
 8018a72:	6122      	str	r2, [r4, #16]
 8018a74:	f8cd a000 	str.w	sl, [sp]
 8018a78:	464b      	mov	r3, r9
 8018a7a:	aa03      	add	r2, sp, #12
 8018a7c:	4621      	mov	r1, r4
 8018a7e:	4640      	mov	r0, r8
 8018a80:	f7ff fee4 	bl	801884c <_printf_common>
 8018a84:	3001      	adds	r0, #1
 8018a86:	d14a      	bne.n	8018b1e <_printf_i+0x1f6>
 8018a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a8c:	b004      	add	sp, #16
 8018a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a92:	6823      	ldr	r3, [r4, #0]
 8018a94:	f043 0320 	orr.w	r3, r3, #32
 8018a98:	6023      	str	r3, [r4, #0]
 8018a9a:	4833      	ldr	r0, [pc, #204]	; (8018b68 <_printf_i+0x240>)
 8018a9c:	2778      	movs	r7, #120	; 0x78
 8018a9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018aa2:	6823      	ldr	r3, [r4, #0]
 8018aa4:	6829      	ldr	r1, [r5, #0]
 8018aa6:	061f      	lsls	r7, r3, #24
 8018aa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8018aac:	d402      	bmi.n	8018ab4 <_printf_i+0x18c>
 8018aae:	065f      	lsls	r7, r3, #25
 8018ab0:	bf48      	it	mi
 8018ab2:	b2b6      	uxthmi	r6, r6
 8018ab4:	07df      	lsls	r7, r3, #31
 8018ab6:	bf48      	it	mi
 8018ab8:	f043 0320 	orrmi.w	r3, r3, #32
 8018abc:	6029      	str	r1, [r5, #0]
 8018abe:	bf48      	it	mi
 8018ac0:	6023      	strmi	r3, [r4, #0]
 8018ac2:	b91e      	cbnz	r6, 8018acc <_printf_i+0x1a4>
 8018ac4:	6823      	ldr	r3, [r4, #0]
 8018ac6:	f023 0320 	bic.w	r3, r3, #32
 8018aca:	6023      	str	r3, [r4, #0]
 8018acc:	2310      	movs	r3, #16
 8018ace:	e7a7      	b.n	8018a20 <_printf_i+0xf8>
 8018ad0:	4824      	ldr	r0, [pc, #144]	; (8018b64 <_printf_i+0x23c>)
 8018ad2:	e7e4      	b.n	8018a9e <_printf_i+0x176>
 8018ad4:	4615      	mov	r5, r2
 8018ad6:	e7bd      	b.n	8018a54 <_printf_i+0x12c>
 8018ad8:	682b      	ldr	r3, [r5, #0]
 8018ada:	6826      	ldr	r6, [r4, #0]
 8018adc:	6961      	ldr	r1, [r4, #20]
 8018ade:	1d18      	adds	r0, r3, #4
 8018ae0:	6028      	str	r0, [r5, #0]
 8018ae2:	0635      	lsls	r5, r6, #24
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	d501      	bpl.n	8018aec <_printf_i+0x1c4>
 8018ae8:	6019      	str	r1, [r3, #0]
 8018aea:	e002      	b.n	8018af2 <_printf_i+0x1ca>
 8018aec:	0670      	lsls	r0, r6, #25
 8018aee:	d5fb      	bpl.n	8018ae8 <_printf_i+0x1c0>
 8018af0:	8019      	strh	r1, [r3, #0]
 8018af2:	2300      	movs	r3, #0
 8018af4:	6123      	str	r3, [r4, #16]
 8018af6:	4615      	mov	r5, r2
 8018af8:	e7bc      	b.n	8018a74 <_printf_i+0x14c>
 8018afa:	682b      	ldr	r3, [r5, #0]
 8018afc:	1d1a      	adds	r2, r3, #4
 8018afe:	602a      	str	r2, [r5, #0]
 8018b00:	681d      	ldr	r5, [r3, #0]
 8018b02:	6862      	ldr	r2, [r4, #4]
 8018b04:	2100      	movs	r1, #0
 8018b06:	4628      	mov	r0, r5
 8018b08:	f7e7 fb62 	bl	80001d0 <memchr>
 8018b0c:	b108      	cbz	r0, 8018b12 <_printf_i+0x1ea>
 8018b0e:	1b40      	subs	r0, r0, r5
 8018b10:	6060      	str	r0, [r4, #4]
 8018b12:	6863      	ldr	r3, [r4, #4]
 8018b14:	6123      	str	r3, [r4, #16]
 8018b16:	2300      	movs	r3, #0
 8018b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018b1c:	e7aa      	b.n	8018a74 <_printf_i+0x14c>
 8018b1e:	6923      	ldr	r3, [r4, #16]
 8018b20:	462a      	mov	r2, r5
 8018b22:	4649      	mov	r1, r9
 8018b24:	4640      	mov	r0, r8
 8018b26:	47d0      	blx	sl
 8018b28:	3001      	adds	r0, #1
 8018b2a:	d0ad      	beq.n	8018a88 <_printf_i+0x160>
 8018b2c:	6823      	ldr	r3, [r4, #0]
 8018b2e:	079b      	lsls	r3, r3, #30
 8018b30:	d413      	bmi.n	8018b5a <_printf_i+0x232>
 8018b32:	68e0      	ldr	r0, [r4, #12]
 8018b34:	9b03      	ldr	r3, [sp, #12]
 8018b36:	4298      	cmp	r0, r3
 8018b38:	bfb8      	it	lt
 8018b3a:	4618      	movlt	r0, r3
 8018b3c:	e7a6      	b.n	8018a8c <_printf_i+0x164>
 8018b3e:	2301      	movs	r3, #1
 8018b40:	4632      	mov	r2, r6
 8018b42:	4649      	mov	r1, r9
 8018b44:	4640      	mov	r0, r8
 8018b46:	47d0      	blx	sl
 8018b48:	3001      	adds	r0, #1
 8018b4a:	d09d      	beq.n	8018a88 <_printf_i+0x160>
 8018b4c:	3501      	adds	r5, #1
 8018b4e:	68e3      	ldr	r3, [r4, #12]
 8018b50:	9903      	ldr	r1, [sp, #12]
 8018b52:	1a5b      	subs	r3, r3, r1
 8018b54:	42ab      	cmp	r3, r5
 8018b56:	dcf2      	bgt.n	8018b3e <_printf_i+0x216>
 8018b58:	e7eb      	b.n	8018b32 <_printf_i+0x20a>
 8018b5a:	2500      	movs	r5, #0
 8018b5c:	f104 0619 	add.w	r6, r4, #25
 8018b60:	e7f5      	b.n	8018b4e <_printf_i+0x226>
 8018b62:	bf00      	nop
 8018b64:	0801fb6a 	.word	0x0801fb6a
 8018b68:	0801fb7b 	.word	0x0801fb7b

08018b6c <_scanf_float>:
 8018b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b70:	b087      	sub	sp, #28
 8018b72:	4617      	mov	r7, r2
 8018b74:	9303      	str	r3, [sp, #12]
 8018b76:	688b      	ldr	r3, [r1, #8]
 8018b78:	1e5a      	subs	r2, r3, #1
 8018b7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8018b7e:	bf83      	ittte	hi
 8018b80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018b84:	195b      	addhi	r3, r3, r5
 8018b86:	9302      	strhi	r3, [sp, #8]
 8018b88:	2300      	movls	r3, #0
 8018b8a:	bf86      	itte	hi
 8018b8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018b90:	608b      	strhi	r3, [r1, #8]
 8018b92:	9302      	strls	r3, [sp, #8]
 8018b94:	680b      	ldr	r3, [r1, #0]
 8018b96:	468b      	mov	fp, r1
 8018b98:	2500      	movs	r5, #0
 8018b9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8018b9e:	f84b 3b1c 	str.w	r3, [fp], #28
 8018ba2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018ba6:	4680      	mov	r8, r0
 8018ba8:	460c      	mov	r4, r1
 8018baa:	465e      	mov	r6, fp
 8018bac:	46aa      	mov	sl, r5
 8018bae:	46a9      	mov	r9, r5
 8018bb0:	9501      	str	r5, [sp, #4]
 8018bb2:	68a2      	ldr	r2, [r4, #8]
 8018bb4:	b152      	cbz	r2, 8018bcc <_scanf_float+0x60>
 8018bb6:	683b      	ldr	r3, [r7, #0]
 8018bb8:	781b      	ldrb	r3, [r3, #0]
 8018bba:	2b4e      	cmp	r3, #78	; 0x4e
 8018bbc:	d864      	bhi.n	8018c88 <_scanf_float+0x11c>
 8018bbe:	2b40      	cmp	r3, #64	; 0x40
 8018bc0:	d83c      	bhi.n	8018c3c <_scanf_float+0xd0>
 8018bc2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8018bc6:	b2c8      	uxtb	r0, r1
 8018bc8:	280e      	cmp	r0, #14
 8018bca:	d93a      	bls.n	8018c42 <_scanf_float+0xd6>
 8018bcc:	f1b9 0f00 	cmp.w	r9, #0
 8018bd0:	d003      	beq.n	8018bda <_scanf_float+0x6e>
 8018bd2:	6823      	ldr	r3, [r4, #0]
 8018bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018bd8:	6023      	str	r3, [r4, #0]
 8018bda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018bde:	f1ba 0f01 	cmp.w	sl, #1
 8018be2:	f200 8113 	bhi.w	8018e0c <_scanf_float+0x2a0>
 8018be6:	455e      	cmp	r6, fp
 8018be8:	f200 8105 	bhi.w	8018df6 <_scanf_float+0x28a>
 8018bec:	2501      	movs	r5, #1
 8018bee:	4628      	mov	r0, r5
 8018bf0:	b007      	add	sp, #28
 8018bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bf6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018bfa:	2a0d      	cmp	r2, #13
 8018bfc:	d8e6      	bhi.n	8018bcc <_scanf_float+0x60>
 8018bfe:	a101      	add	r1, pc, #4	; (adr r1, 8018c04 <_scanf_float+0x98>)
 8018c00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018c04:	08018d43 	.word	0x08018d43
 8018c08:	08018bcd 	.word	0x08018bcd
 8018c0c:	08018bcd 	.word	0x08018bcd
 8018c10:	08018bcd 	.word	0x08018bcd
 8018c14:	08018da3 	.word	0x08018da3
 8018c18:	08018d7b 	.word	0x08018d7b
 8018c1c:	08018bcd 	.word	0x08018bcd
 8018c20:	08018bcd 	.word	0x08018bcd
 8018c24:	08018d51 	.word	0x08018d51
 8018c28:	08018bcd 	.word	0x08018bcd
 8018c2c:	08018bcd 	.word	0x08018bcd
 8018c30:	08018bcd 	.word	0x08018bcd
 8018c34:	08018bcd 	.word	0x08018bcd
 8018c38:	08018d09 	.word	0x08018d09
 8018c3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8018c40:	e7db      	b.n	8018bfa <_scanf_float+0x8e>
 8018c42:	290e      	cmp	r1, #14
 8018c44:	d8c2      	bhi.n	8018bcc <_scanf_float+0x60>
 8018c46:	a001      	add	r0, pc, #4	; (adr r0, 8018c4c <_scanf_float+0xe0>)
 8018c48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8018c4c:	08018cfb 	.word	0x08018cfb
 8018c50:	08018bcd 	.word	0x08018bcd
 8018c54:	08018cfb 	.word	0x08018cfb
 8018c58:	08018d8f 	.word	0x08018d8f
 8018c5c:	08018bcd 	.word	0x08018bcd
 8018c60:	08018ca9 	.word	0x08018ca9
 8018c64:	08018ce5 	.word	0x08018ce5
 8018c68:	08018ce5 	.word	0x08018ce5
 8018c6c:	08018ce5 	.word	0x08018ce5
 8018c70:	08018ce5 	.word	0x08018ce5
 8018c74:	08018ce5 	.word	0x08018ce5
 8018c78:	08018ce5 	.word	0x08018ce5
 8018c7c:	08018ce5 	.word	0x08018ce5
 8018c80:	08018ce5 	.word	0x08018ce5
 8018c84:	08018ce5 	.word	0x08018ce5
 8018c88:	2b6e      	cmp	r3, #110	; 0x6e
 8018c8a:	d809      	bhi.n	8018ca0 <_scanf_float+0x134>
 8018c8c:	2b60      	cmp	r3, #96	; 0x60
 8018c8e:	d8b2      	bhi.n	8018bf6 <_scanf_float+0x8a>
 8018c90:	2b54      	cmp	r3, #84	; 0x54
 8018c92:	d077      	beq.n	8018d84 <_scanf_float+0x218>
 8018c94:	2b59      	cmp	r3, #89	; 0x59
 8018c96:	d199      	bne.n	8018bcc <_scanf_float+0x60>
 8018c98:	2d07      	cmp	r5, #7
 8018c9a:	d197      	bne.n	8018bcc <_scanf_float+0x60>
 8018c9c:	2508      	movs	r5, #8
 8018c9e:	e029      	b.n	8018cf4 <_scanf_float+0x188>
 8018ca0:	2b74      	cmp	r3, #116	; 0x74
 8018ca2:	d06f      	beq.n	8018d84 <_scanf_float+0x218>
 8018ca4:	2b79      	cmp	r3, #121	; 0x79
 8018ca6:	e7f6      	b.n	8018c96 <_scanf_float+0x12a>
 8018ca8:	6821      	ldr	r1, [r4, #0]
 8018caa:	05c8      	lsls	r0, r1, #23
 8018cac:	d51a      	bpl.n	8018ce4 <_scanf_float+0x178>
 8018cae:	9b02      	ldr	r3, [sp, #8]
 8018cb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8018cb4:	6021      	str	r1, [r4, #0]
 8018cb6:	f109 0901 	add.w	r9, r9, #1
 8018cba:	b11b      	cbz	r3, 8018cc4 <_scanf_float+0x158>
 8018cbc:	3b01      	subs	r3, #1
 8018cbe:	3201      	adds	r2, #1
 8018cc0:	9302      	str	r3, [sp, #8]
 8018cc2:	60a2      	str	r2, [r4, #8]
 8018cc4:	68a3      	ldr	r3, [r4, #8]
 8018cc6:	3b01      	subs	r3, #1
 8018cc8:	60a3      	str	r3, [r4, #8]
 8018cca:	6923      	ldr	r3, [r4, #16]
 8018ccc:	3301      	adds	r3, #1
 8018cce:	6123      	str	r3, [r4, #16]
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	3b01      	subs	r3, #1
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	607b      	str	r3, [r7, #4]
 8018cd8:	f340 8084 	ble.w	8018de4 <_scanf_float+0x278>
 8018cdc:	683b      	ldr	r3, [r7, #0]
 8018cde:	3301      	adds	r3, #1
 8018ce0:	603b      	str	r3, [r7, #0]
 8018ce2:	e766      	b.n	8018bb2 <_scanf_float+0x46>
 8018ce4:	eb1a 0f05 	cmn.w	sl, r5
 8018ce8:	f47f af70 	bne.w	8018bcc <_scanf_float+0x60>
 8018cec:	6822      	ldr	r2, [r4, #0]
 8018cee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8018cf2:	6022      	str	r2, [r4, #0]
 8018cf4:	f806 3b01 	strb.w	r3, [r6], #1
 8018cf8:	e7e4      	b.n	8018cc4 <_scanf_float+0x158>
 8018cfa:	6822      	ldr	r2, [r4, #0]
 8018cfc:	0610      	lsls	r0, r2, #24
 8018cfe:	f57f af65 	bpl.w	8018bcc <_scanf_float+0x60>
 8018d02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018d06:	e7f4      	b.n	8018cf2 <_scanf_float+0x186>
 8018d08:	f1ba 0f00 	cmp.w	sl, #0
 8018d0c:	d10e      	bne.n	8018d2c <_scanf_float+0x1c0>
 8018d0e:	f1b9 0f00 	cmp.w	r9, #0
 8018d12:	d10e      	bne.n	8018d32 <_scanf_float+0x1c6>
 8018d14:	6822      	ldr	r2, [r4, #0]
 8018d16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8018d1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8018d1e:	d108      	bne.n	8018d32 <_scanf_float+0x1c6>
 8018d20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018d24:	6022      	str	r2, [r4, #0]
 8018d26:	f04f 0a01 	mov.w	sl, #1
 8018d2a:	e7e3      	b.n	8018cf4 <_scanf_float+0x188>
 8018d2c:	f1ba 0f02 	cmp.w	sl, #2
 8018d30:	d055      	beq.n	8018dde <_scanf_float+0x272>
 8018d32:	2d01      	cmp	r5, #1
 8018d34:	d002      	beq.n	8018d3c <_scanf_float+0x1d0>
 8018d36:	2d04      	cmp	r5, #4
 8018d38:	f47f af48 	bne.w	8018bcc <_scanf_float+0x60>
 8018d3c:	3501      	adds	r5, #1
 8018d3e:	b2ed      	uxtb	r5, r5
 8018d40:	e7d8      	b.n	8018cf4 <_scanf_float+0x188>
 8018d42:	f1ba 0f01 	cmp.w	sl, #1
 8018d46:	f47f af41 	bne.w	8018bcc <_scanf_float+0x60>
 8018d4a:	f04f 0a02 	mov.w	sl, #2
 8018d4e:	e7d1      	b.n	8018cf4 <_scanf_float+0x188>
 8018d50:	b97d      	cbnz	r5, 8018d72 <_scanf_float+0x206>
 8018d52:	f1b9 0f00 	cmp.w	r9, #0
 8018d56:	f47f af3c 	bne.w	8018bd2 <_scanf_float+0x66>
 8018d5a:	6822      	ldr	r2, [r4, #0]
 8018d5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8018d60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8018d64:	f47f af39 	bne.w	8018bda <_scanf_float+0x6e>
 8018d68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018d6c:	6022      	str	r2, [r4, #0]
 8018d6e:	2501      	movs	r5, #1
 8018d70:	e7c0      	b.n	8018cf4 <_scanf_float+0x188>
 8018d72:	2d03      	cmp	r5, #3
 8018d74:	d0e2      	beq.n	8018d3c <_scanf_float+0x1d0>
 8018d76:	2d05      	cmp	r5, #5
 8018d78:	e7de      	b.n	8018d38 <_scanf_float+0x1cc>
 8018d7a:	2d02      	cmp	r5, #2
 8018d7c:	f47f af26 	bne.w	8018bcc <_scanf_float+0x60>
 8018d80:	2503      	movs	r5, #3
 8018d82:	e7b7      	b.n	8018cf4 <_scanf_float+0x188>
 8018d84:	2d06      	cmp	r5, #6
 8018d86:	f47f af21 	bne.w	8018bcc <_scanf_float+0x60>
 8018d8a:	2507      	movs	r5, #7
 8018d8c:	e7b2      	b.n	8018cf4 <_scanf_float+0x188>
 8018d8e:	6822      	ldr	r2, [r4, #0]
 8018d90:	0591      	lsls	r1, r2, #22
 8018d92:	f57f af1b 	bpl.w	8018bcc <_scanf_float+0x60>
 8018d96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8018d9a:	6022      	str	r2, [r4, #0]
 8018d9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018da0:	e7a8      	b.n	8018cf4 <_scanf_float+0x188>
 8018da2:	6822      	ldr	r2, [r4, #0]
 8018da4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8018da8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8018dac:	d006      	beq.n	8018dbc <_scanf_float+0x250>
 8018dae:	0550      	lsls	r0, r2, #21
 8018db0:	f57f af0c 	bpl.w	8018bcc <_scanf_float+0x60>
 8018db4:	f1b9 0f00 	cmp.w	r9, #0
 8018db8:	f43f af0f 	beq.w	8018bda <_scanf_float+0x6e>
 8018dbc:	0591      	lsls	r1, r2, #22
 8018dbe:	bf58      	it	pl
 8018dc0:	9901      	ldrpl	r1, [sp, #4]
 8018dc2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018dc6:	bf58      	it	pl
 8018dc8:	eba9 0101 	subpl.w	r1, r9, r1
 8018dcc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8018dd0:	bf58      	it	pl
 8018dd2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8018dd6:	6022      	str	r2, [r4, #0]
 8018dd8:	f04f 0900 	mov.w	r9, #0
 8018ddc:	e78a      	b.n	8018cf4 <_scanf_float+0x188>
 8018dde:	f04f 0a03 	mov.w	sl, #3
 8018de2:	e787      	b.n	8018cf4 <_scanf_float+0x188>
 8018de4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018de8:	4639      	mov	r1, r7
 8018dea:	4640      	mov	r0, r8
 8018dec:	4798      	blx	r3
 8018dee:	2800      	cmp	r0, #0
 8018df0:	f43f aedf 	beq.w	8018bb2 <_scanf_float+0x46>
 8018df4:	e6ea      	b.n	8018bcc <_scanf_float+0x60>
 8018df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018dfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018dfe:	463a      	mov	r2, r7
 8018e00:	4640      	mov	r0, r8
 8018e02:	4798      	blx	r3
 8018e04:	6923      	ldr	r3, [r4, #16]
 8018e06:	3b01      	subs	r3, #1
 8018e08:	6123      	str	r3, [r4, #16]
 8018e0a:	e6ec      	b.n	8018be6 <_scanf_float+0x7a>
 8018e0c:	1e6b      	subs	r3, r5, #1
 8018e0e:	2b06      	cmp	r3, #6
 8018e10:	d825      	bhi.n	8018e5e <_scanf_float+0x2f2>
 8018e12:	2d02      	cmp	r5, #2
 8018e14:	d836      	bhi.n	8018e84 <_scanf_float+0x318>
 8018e16:	455e      	cmp	r6, fp
 8018e18:	f67f aee8 	bls.w	8018bec <_scanf_float+0x80>
 8018e1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018e20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018e24:	463a      	mov	r2, r7
 8018e26:	4640      	mov	r0, r8
 8018e28:	4798      	blx	r3
 8018e2a:	6923      	ldr	r3, [r4, #16]
 8018e2c:	3b01      	subs	r3, #1
 8018e2e:	6123      	str	r3, [r4, #16]
 8018e30:	e7f1      	b.n	8018e16 <_scanf_float+0x2aa>
 8018e32:	9802      	ldr	r0, [sp, #8]
 8018e34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018e38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8018e3c:	9002      	str	r0, [sp, #8]
 8018e3e:	463a      	mov	r2, r7
 8018e40:	4640      	mov	r0, r8
 8018e42:	4798      	blx	r3
 8018e44:	6923      	ldr	r3, [r4, #16]
 8018e46:	3b01      	subs	r3, #1
 8018e48:	6123      	str	r3, [r4, #16]
 8018e4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018e4e:	fa5f fa8a 	uxtb.w	sl, sl
 8018e52:	f1ba 0f02 	cmp.w	sl, #2
 8018e56:	d1ec      	bne.n	8018e32 <_scanf_float+0x2c6>
 8018e58:	3d03      	subs	r5, #3
 8018e5a:	b2ed      	uxtb	r5, r5
 8018e5c:	1b76      	subs	r6, r6, r5
 8018e5e:	6823      	ldr	r3, [r4, #0]
 8018e60:	05da      	lsls	r2, r3, #23
 8018e62:	d52f      	bpl.n	8018ec4 <_scanf_float+0x358>
 8018e64:	055b      	lsls	r3, r3, #21
 8018e66:	d510      	bpl.n	8018e8a <_scanf_float+0x31e>
 8018e68:	455e      	cmp	r6, fp
 8018e6a:	f67f aebf 	bls.w	8018bec <_scanf_float+0x80>
 8018e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018e72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018e76:	463a      	mov	r2, r7
 8018e78:	4640      	mov	r0, r8
 8018e7a:	4798      	blx	r3
 8018e7c:	6923      	ldr	r3, [r4, #16]
 8018e7e:	3b01      	subs	r3, #1
 8018e80:	6123      	str	r3, [r4, #16]
 8018e82:	e7f1      	b.n	8018e68 <_scanf_float+0x2fc>
 8018e84:	46aa      	mov	sl, r5
 8018e86:	9602      	str	r6, [sp, #8]
 8018e88:	e7df      	b.n	8018e4a <_scanf_float+0x2de>
 8018e8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8018e8e:	6923      	ldr	r3, [r4, #16]
 8018e90:	2965      	cmp	r1, #101	; 0x65
 8018e92:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8018e96:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8018e9a:	6123      	str	r3, [r4, #16]
 8018e9c:	d00c      	beq.n	8018eb8 <_scanf_float+0x34c>
 8018e9e:	2945      	cmp	r1, #69	; 0x45
 8018ea0:	d00a      	beq.n	8018eb8 <_scanf_float+0x34c>
 8018ea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018ea6:	463a      	mov	r2, r7
 8018ea8:	4640      	mov	r0, r8
 8018eaa:	4798      	blx	r3
 8018eac:	6923      	ldr	r3, [r4, #16]
 8018eae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8018eb2:	3b01      	subs	r3, #1
 8018eb4:	1eb5      	subs	r5, r6, #2
 8018eb6:	6123      	str	r3, [r4, #16]
 8018eb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018ebc:	463a      	mov	r2, r7
 8018ebe:	4640      	mov	r0, r8
 8018ec0:	4798      	blx	r3
 8018ec2:	462e      	mov	r6, r5
 8018ec4:	6825      	ldr	r5, [r4, #0]
 8018ec6:	f015 0510 	ands.w	r5, r5, #16
 8018eca:	d158      	bne.n	8018f7e <_scanf_float+0x412>
 8018ecc:	7035      	strb	r5, [r6, #0]
 8018ece:	6823      	ldr	r3, [r4, #0]
 8018ed0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8018ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018ed8:	d11c      	bne.n	8018f14 <_scanf_float+0x3a8>
 8018eda:	9b01      	ldr	r3, [sp, #4]
 8018edc:	454b      	cmp	r3, r9
 8018ede:	eba3 0209 	sub.w	r2, r3, r9
 8018ee2:	d124      	bne.n	8018f2e <_scanf_float+0x3c2>
 8018ee4:	2200      	movs	r2, #0
 8018ee6:	4659      	mov	r1, fp
 8018ee8:	4640      	mov	r0, r8
 8018eea:	f000 ff0d 	bl	8019d08 <_strtod_r>
 8018eee:	9b03      	ldr	r3, [sp, #12]
 8018ef0:	6821      	ldr	r1, [r4, #0]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	f011 0f02 	tst.w	r1, #2
 8018ef8:	ec57 6b10 	vmov	r6, r7, d0
 8018efc:	f103 0204 	add.w	r2, r3, #4
 8018f00:	d020      	beq.n	8018f44 <_scanf_float+0x3d8>
 8018f02:	9903      	ldr	r1, [sp, #12]
 8018f04:	600a      	str	r2, [r1, #0]
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	e9c3 6700 	strd	r6, r7, [r3]
 8018f0c:	68e3      	ldr	r3, [r4, #12]
 8018f0e:	3301      	adds	r3, #1
 8018f10:	60e3      	str	r3, [r4, #12]
 8018f12:	e66c      	b.n	8018bee <_scanf_float+0x82>
 8018f14:	9b04      	ldr	r3, [sp, #16]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d0e4      	beq.n	8018ee4 <_scanf_float+0x378>
 8018f1a:	9905      	ldr	r1, [sp, #20]
 8018f1c:	230a      	movs	r3, #10
 8018f1e:	462a      	mov	r2, r5
 8018f20:	3101      	adds	r1, #1
 8018f22:	4640      	mov	r0, r8
 8018f24:	f000 ff78 	bl	8019e18 <_strtol_r>
 8018f28:	9b04      	ldr	r3, [sp, #16]
 8018f2a:	9e05      	ldr	r6, [sp, #20]
 8018f2c:	1ac2      	subs	r2, r0, r3
 8018f2e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8018f32:	429e      	cmp	r6, r3
 8018f34:	bf28      	it	cs
 8018f36:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8018f3a:	4912      	ldr	r1, [pc, #72]	; (8018f84 <_scanf_float+0x418>)
 8018f3c:	4630      	mov	r0, r6
 8018f3e:	f000 f825 	bl	8018f8c <siprintf>
 8018f42:	e7cf      	b.n	8018ee4 <_scanf_float+0x378>
 8018f44:	f011 0f04 	tst.w	r1, #4
 8018f48:	9903      	ldr	r1, [sp, #12]
 8018f4a:	600a      	str	r2, [r1, #0]
 8018f4c:	d1db      	bne.n	8018f06 <_scanf_float+0x39a>
 8018f4e:	f8d3 8000 	ldr.w	r8, [r3]
 8018f52:	ee10 2a10 	vmov	r2, s0
 8018f56:	ee10 0a10 	vmov	r0, s0
 8018f5a:	463b      	mov	r3, r7
 8018f5c:	4639      	mov	r1, r7
 8018f5e:	f7e7 fdef 	bl	8000b40 <__aeabi_dcmpun>
 8018f62:	b128      	cbz	r0, 8018f70 <_scanf_float+0x404>
 8018f64:	4808      	ldr	r0, [pc, #32]	; (8018f88 <_scanf_float+0x41c>)
 8018f66:	f001 f837 	bl	8019fd8 <nanf>
 8018f6a:	ed88 0a00 	vstr	s0, [r8]
 8018f6e:	e7cd      	b.n	8018f0c <_scanf_float+0x3a0>
 8018f70:	4630      	mov	r0, r6
 8018f72:	4639      	mov	r1, r7
 8018f74:	f7e7 fe42 	bl	8000bfc <__aeabi_d2f>
 8018f78:	f8c8 0000 	str.w	r0, [r8]
 8018f7c:	e7c6      	b.n	8018f0c <_scanf_float+0x3a0>
 8018f7e:	2500      	movs	r5, #0
 8018f80:	e635      	b.n	8018bee <_scanf_float+0x82>
 8018f82:	bf00      	nop
 8018f84:	0801fb8c 	.word	0x0801fb8c
 8018f88:	0801ff7f 	.word	0x0801ff7f

08018f8c <siprintf>:
 8018f8c:	b40e      	push	{r1, r2, r3}
 8018f8e:	b500      	push	{lr}
 8018f90:	b09c      	sub	sp, #112	; 0x70
 8018f92:	ab1d      	add	r3, sp, #116	; 0x74
 8018f94:	9002      	str	r0, [sp, #8]
 8018f96:	9006      	str	r0, [sp, #24]
 8018f98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018f9c:	4809      	ldr	r0, [pc, #36]	; (8018fc4 <siprintf+0x38>)
 8018f9e:	9107      	str	r1, [sp, #28]
 8018fa0:	9104      	str	r1, [sp, #16]
 8018fa2:	4909      	ldr	r1, [pc, #36]	; (8018fc8 <siprintf+0x3c>)
 8018fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fa8:	9105      	str	r1, [sp, #20]
 8018faa:	6800      	ldr	r0, [r0, #0]
 8018fac:	9301      	str	r3, [sp, #4]
 8018fae:	a902      	add	r1, sp, #8
 8018fb0:	f002 fa92 	bl	801b4d8 <_svfiprintf_r>
 8018fb4:	9b02      	ldr	r3, [sp, #8]
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	701a      	strb	r2, [r3, #0]
 8018fba:	b01c      	add	sp, #112	; 0x70
 8018fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8018fc0:	b003      	add	sp, #12
 8018fc2:	4770      	bx	lr
 8018fc4:	200001f0 	.word	0x200001f0
 8018fc8:	ffff0208 	.word	0xffff0208

08018fcc <std>:
 8018fcc:	2300      	movs	r3, #0
 8018fce:	b510      	push	{r4, lr}
 8018fd0:	4604      	mov	r4, r0
 8018fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8018fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018fda:	6083      	str	r3, [r0, #8]
 8018fdc:	8181      	strh	r1, [r0, #12]
 8018fde:	6643      	str	r3, [r0, #100]	; 0x64
 8018fe0:	81c2      	strh	r2, [r0, #14]
 8018fe2:	6183      	str	r3, [r0, #24]
 8018fe4:	4619      	mov	r1, r3
 8018fe6:	2208      	movs	r2, #8
 8018fe8:	305c      	adds	r0, #92	; 0x5c
 8018fea:	f000 ff51 	bl	8019e90 <memset>
 8018fee:	4b05      	ldr	r3, [pc, #20]	; (8019004 <std+0x38>)
 8018ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8018ff2:	4b05      	ldr	r3, [pc, #20]	; (8019008 <std+0x3c>)
 8018ff4:	62a3      	str	r3, [r4, #40]	; 0x28
 8018ff6:	4b05      	ldr	r3, [pc, #20]	; (801900c <std+0x40>)
 8018ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018ffa:	4b05      	ldr	r3, [pc, #20]	; (8019010 <std+0x44>)
 8018ffc:	6224      	str	r4, [r4, #32]
 8018ffe:	6323      	str	r3, [r4, #48]	; 0x30
 8019000:	bd10      	pop	{r4, pc}
 8019002:	bf00      	nop
 8019004:	0801c317 	.word	0x0801c317
 8019008:	0801c339 	.word	0x0801c339
 801900c:	0801c371 	.word	0x0801c371
 8019010:	0801c395 	.word	0x0801c395

08019014 <stdio_exit_handler>:
 8019014:	4a02      	ldr	r2, [pc, #8]	; (8019020 <stdio_exit_handler+0xc>)
 8019016:	4903      	ldr	r1, [pc, #12]	; (8019024 <stdio_exit_handler+0x10>)
 8019018:	4803      	ldr	r0, [pc, #12]	; (8019028 <stdio_exit_handler+0x14>)
 801901a:	f000 bf09 	b.w	8019e30 <_fwalk_sglue>
 801901e:	bf00      	nop
 8019020:	2000002c 	.word	0x2000002c
 8019024:	0801b955 	.word	0x0801b955
 8019028:	200001a4 	.word	0x200001a4

0801902c <cleanup_stdio>:
 801902c:	6841      	ldr	r1, [r0, #4]
 801902e:	4b0c      	ldr	r3, [pc, #48]	; (8019060 <cleanup_stdio+0x34>)
 8019030:	4299      	cmp	r1, r3
 8019032:	b510      	push	{r4, lr}
 8019034:	4604      	mov	r4, r0
 8019036:	d001      	beq.n	801903c <cleanup_stdio+0x10>
 8019038:	f002 fc8c 	bl	801b954 <_fflush_r>
 801903c:	68a1      	ldr	r1, [r4, #8]
 801903e:	4b09      	ldr	r3, [pc, #36]	; (8019064 <cleanup_stdio+0x38>)
 8019040:	4299      	cmp	r1, r3
 8019042:	d002      	beq.n	801904a <cleanup_stdio+0x1e>
 8019044:	4620      	mov	r0, r4
 8019046:	f002 fc85 	bl	801b954 <_fflush_r>
 801904a:	68e1      	ldr	r1, [r4, #12]
 801904c:	4b06      	ldr	r3, [pc, #24]	; (8019068 <cleanup_stdio+0x3c>)
 801904e:	4299      	cmp	r1, r3
 8019050:	d004      	beq.n	801905c <cleanup_stdio+0x30>
 8019052:	4620      	mov	r0, r4
 8019054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019058:	f002 bc7c 	b.w	801b954 <_fflush_r>
 801905c:	bd10      	pop	{r4, pc}
 801905e:	bf00      	nop
 8019060:	200093c8 	.word	0x200093c8
 8019064:	20009430 	.word	0x20009430
 8019068:	20009498 	.word	0x20009498

0801906c <global_stdio_init.part.0>:
 801906c:	b510      	push	{r4, lr}
 801906e:	4b0b      	ldr	r3, [pc, #44]	; (801909c <global_stdio_init.part.0+0x30>)
 8019070:	4c0b      	ldr	r4, [pc, #44]	; (80190a0 <global_stdio_init.part.0+0x34>)
 8019072:	4a0c      	ldr	r2, [pc, #48]	; (80190a4 <global_stdio_init.part.0+0x38>)
 8019074:	601a      	str	r2, [r3, #0]
 8019076:	4620      	mov	r0, r4
 8019078:	2200      	movs	r2, #0
 801907a:	2104      	movs	r1, #4
 801907c:	f7ff ffa6 	bl	8018fcc <std>
 8019080:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019084:	2201      	movs	r2, #1
 8019086:	2109      	movs	r1, #9
 8019088:	f7ff ffa0 	bl	8018fcc <std>
 801908c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019090:	2202      	movs	r2, #2
 8019092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019096:	2112      	movs	r1, #18
 8019098:	f7ff bf98 	b.w	8018fcc <std>
 801909c:	20009500 	.word	0x20009500
 80190a0:	200093c8 	.word	0x200093c8
 80190a4:	08019015 	.word	0x08019015

080190a8 <__sfp_lock_acquire>:
 80190a8:	4801      	ldr	r0, [pc, #4]	; (80190b0 <__sfp_lock_acquire+0x8>)
 80190aa:	f000 bf7d 	b.w	8019fa8 <__retarget_lock_acquire_recursive>
 80190ae:	bf00      	nop
 80190b0:	20009509 	.word	0x20009509

080190b4 <__sfp_lock_release>:
 80190b4:	4801      	ldr	r0, [pc, #4]	; (80190bc <__sfp_lock_release+0x8>)
 80190b6:	f000 bf78 	b.w	8019faa <__retarget_lock_release_recursive>
 80190ba:	bf00      	nop
 80190bc:	20009509 	.word	0x20009509

080190c0 <__sinit>:
 80190c0:	b510      	push	{r4, lr}
 80190c2:	4604      	mov	r4, r0
 80190c4:	f7ff fff0 	bl	80190a8 <__sfp_lock_acquire>
 80190c8:	6a23      	ldr	r3, [r4, #32]
 80190ca:	b11b      	cbz	r3, 80190d4 <__sinit+0x14>
 80190cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190d0:	f7ff bff0 	b.w	80190b4 <__sfp_lock_release>
 80190d4:	4b04      	ldr	r3, [pc, #16]	; (80190e8 <__sinit+0x28>)
 80190d6:	6223      	str	r3, [r4, #32]
 80190d8:	4b04      	ldr	r3, [pc, #16]	; (80190ec <__sinit+0x2c>)
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d1f5      	bne.n	80190cc <__sinit+0xc>
 80190e0:	f7ff ffc4 	bl	801906c <global_stdio_init.part.0>
 80190e4:	e7f2      	b.n	80190cc <__sinit+0xc>
 80190e6:	bf00      	nop
 80190e8:	0801902d 	.word	0x0801902d
 80190ec:	20009500 	.word	0x20009500

080190f0 <sulp>:
 80190f0:	b570      	push	{r4, r5, r6, lr}
 80190f2:	4604      	mov	r4, r0
 80190f4:	460d      	mov	r5, r1
 80190f6:	ec45 4b10 	vmov	d0, r4, r5
 80190fa:	4616      	mov	r6, r2
 80190fc:	f002 ffca 	bl	801c094 <__ulp>
 8019100:	ec51 0b10 	vmov	r0, r1, d0
 8019104:	b17e      	cbz	r6, 8019126 <sulp+0x36>
 8019106:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801910a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801910e:	2b00      	cmp	r3, #0
 8019110:	dd09      	ble.n	8019126 <sulp+0x36>
 8019112:	051b      	lsls	r3, r3, #20
 8019114:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8019118:	2400      	movs	r4, #0
 801911a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801911e:	4622      	mov	r2, r4
 8019120:	462b      	mov	r3, r5
 8019122:	f7e7 fa73 	bl	800060c <__aeabi_dmul>
 8019126:	bd70      	pop	{r4, r5, r6, pc}

08019128 <_strtod_l>:
 8019128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801912c:	ed2d 8b02 	vpush	{d8}
 8019130:	b09b      	sub	sp, #108	; 0x6c
 8019132:	4604      	mov	r4, r0
 8019134:	9213      	str	r2, [sp, #76]	; 0x4c
 8019136:	2200      	movs	r2, #0
 8019138:	9216      	str	r2, [sp, #88]	; 0x58
 801913a:	460d      	mov	r5, r1
 801913c:	f04f 0800 	mov.w	r8, #0
 8019140:	f04f 0900 	mov.w	r9, #0
 8019144:	460a      	mov	r2, r1
 8019146:	9215      	str	r2, [sp, #84]	; 0x54
 8019148:	7811      	ldrb	r1, [r2, #0]
 801914a:	292b      	cmp	r1, #43	; 0x2b
 801914c:	d04c      	beq.n	80191e8 <_strtod_l+0xc0>
 801914e:	d83a      	bhi.n	80191c6 <_strtod_l+0x9e>
 8019150:	290d      	cmp	r1, #13
 8019152:	d834      	bhi.n	80191be <_strtod_l+0x96>
 8019154:	2908      	cmp	r1, #8
 8019156:	d834      	bhi.n	80191c2 <_strtod_l+0x9a>
 8019158:	2900      	cmp	r1, #0
 801915a:	d03d      	beq.n	80191d8 <_strtod_l+0xb0>
 801915c:	2200      	movs	r2, #0
 801915e:	920a      	str	r2, [sp, #40]	; 0x28
 8019160:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019162:	7832      	ldrb	r2, [r6, #0]
 8019164:	2a30      	cmp	r2, #48	; 0x30
 8019166:	f040 80b4 	bne.w	80192d2 <_strtod_l+0x1aa>
 801916a:	7872      	ldrb	r2, [r6, #1]
 801916c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8019170:	2a58      	cmp	r2, #88	; 0x58
 8019172:	d170      	bne.n	8019256 <_strtod_l+0x12e>
 8019174:	9302      	str	r3, [sp, #8]
 8019176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019178:	9301      	str	r3, [sp, #4]
 801917a:	ab16      	add	r3, sp, #88	; 0x58
 801917c:	9300      	str	r3, [sp, #0]
 801917e:	4a8e      	ldr	r2, [pc, #568]	; (80193b8 <_strtod_l+0x290>)
 8019180:	ab17      	add	r3, sp, #92	; 0x5c
 8019182:	a915      	add	r1, sp, #84	; 0x54
 8019184:	4620      	mov	r0, r4
 8019186:	f001 fe5d 	bl	801ae44 <__gethex>
 801918a:	f010 070f 	ands.w	r7, r0, #15
 801918e:	4605      	mov	r5, r0
 8019190:	d005      	beq.n	801919e <_strtod_l+0x76>
 8019192:	2f06      	cmp	r7, #6
 8019194:	d12a      	bne.n	80191ec <_strtod_l+0xc4>
 8019196:	3601      	adds	r6, #1
 8019198:	2300      	movs	r3, #0
 801919a:	9615      	str	r6, [sp, #84]	; 0x54
 801919c:	930a      	str	r3, [sp, #40]	; 0x28
 801919e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	f040 857f 	bne.w	8019ca4 <_strtod_l+0xb7c>
 80191a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191a8:	b1db      	cbz	r3, 80191e2 <_strtod_l+0xba>
 80191aa:	4642      	mov	r2, r8
 80191ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80191b0:	ec43 2b10 	vmov	d0, r2, r3
 80191b4:	b01b      	add	sp, #108	; 0x6c
 80191b6:	ecbd 8b02 	vpop	{d8}
 80191ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191be:	2920      	cmp	r1, #32
 80191c0:	d1cc      	bne.n	801915c <_strtod_l+0x34>
 80191c2:	3201      	adds	r2, #1
 80191c4:	e7bf      	b.n	8019146 <_strtod_l+0x1e>
 80191c6:	292d      	cmp	r1, #45	; 0x2d
 80191c8:	d1c8      	bne.n	801915c <_strtod_l+0x34>
 80191ca:	2101      	movs	r1, #1
 80191cc:	910a      	str	r1, [sp, #40]	; 0x28
 80191ce:	1c51      	adds	r1, r2, #1
 80191d0:	9115      	str	r1, [sp, #84]	; 0x54
 80191d2:	7852      	ldrb	r2, [r2, #1]
 80191d4:	2a00      	cmp	r2, #0
 80191d6:	d1c3      	bne.n	8019160 <_strtod_l+0x38>
 80191d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80191da:	9515      	str	r5, [sp, #84]	; 0x54
 80191dc:	2b00      	cmp	r3, #0
 80191de:	f040 855f 	bne.w	8019ca0 <_strtod_l+0xb78>
 80191e2:	4642      	mov	r2, r8
 80191e4:	464b      	mov	r3, r9
 80191e6:	e7e3      	b.n	80191b0 <_strtod_l+0x88>
 80191e8:	2100      	movs	r1, #0
 80191ea:	e7ef      	b.n	80191cc <_strtod_l+0xa4>
 80191ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80191ee:	b13a      	cbz	r2, 8019200 <_strtod_l+0xd8>
 80191f0:	2135      	movs	r1, #53	; 0x35
 80191f2:	a818      	add	r0, sp, #96	; 0x60
 80191f4:	f003 f84b 	bl	801c28e <__copybits>
 80191f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80191fa:	4620      	mov	r0, r4
 80191fc:	f002 fc1e 	bl	801ba3c <_Bfree>
 8019200:	3f01      	subs	r7, #1
 8019202:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019204:	2f04      	cmp	r7, #4
 8019206:	d806      	bhi.n	8019216 <_strtod_l+0xee>
 8019208:	e8df f007 	tbb	[pc, r7]
 801920c:	201d0314 	.word	0x201d0314
 8019210:	14          	.byte	0x14
 8019211:	00          	.byte	0x00
 8019212:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8019216:	05e9      	lsls	r1, r5, #23
 8019218:	bf48      	it	mi
 801921a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801921e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019222:	0d1b      	lsrs	r3, r3, #20
 8019224:	051b      	lsls	r3, r3, #20
 8019226:	2b00      	cmp	r3, #0
 8019228:	d1b9      	bne.n	801919e <_strtod_l+0x76>
 801922a:	f000 fe93 	bl	8019f54 <__errno>
 801922e:	2322      	movs	r3, #34	; 0x22
 8019230:	6003      	str	r3, [r0, #0]
 8019232:	e7b4      	b.n	801919e <_strtod_l+0x76>
 8019234:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8019238:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801923c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019240:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8019244:	e7e7      	b.n	8019216 <_strtod_l+0xee>
 8019246:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80193c0 <_strtod_l+0x298>
 801924a:	e7e4      	b.n	8019216 <_strtod_l+0xee>
 801924c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019250:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019254:	e7df      	b.n	8019216 <_strtod_l+0xee>
 8019256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019258:	1c5a      	adds	r2, r3, #1
 801925a:	9215      	str	r2, [sp, #84]	; 0x54
 801925c:	785b      	ldrb	r3, [r3, #1]
 801925e:	2b30      	cmp	r3, #48	; 0x30
 8019260:	d0f9      	beq.n	8019256 <_strtod_l+0x12e>
 8019262:	2b00      	cmp	r3, #0
 8019264:	d09b      	beq.n	801919e <_strtod_l+0x76>
 8019266:	2301      	movs	r3, #1
 8019268:	f04f 0a00 	mov.w	sl, #0
 801926c:	9304      	str	r3, [sp, #16]
 801926e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019270:	930b      	str	r3, [sp, #44]	; 0x2c
 8019272:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8019276:	46d3      	mov	fp, sl
 8019278:	220a      	movs	r2, #10
 801927a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801927c:	7806      	ldrb	r6, [r0, #0]
 801927e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8019282:	b2d9      	uxtb	r1, r3
 8019284:	2909      	cmp	r1, #9
 8019286:	d926      	bls.n	80192d6 <_strtod_l+0x1ae>
 8019288:	494c      	ldr	r1, [pc, #304]	; (80193bc <_strtod_l+0x294>)
 801928a:	2201      	movs	r2, #1
 801928c:	f000 fdee 	bl	8019e6c <strncmp>
 8019290:	2800      	cmp	r0, #0
 8019292:	d030      	beq.n	80192f6 <_strtod_l+0x1ce>
 8019294:	2000      	movs	r0, #0
 8019296:	4632      	mov	r2, r6
 8019298:	9005      	str	r0, [sp, #20]
 801929a:	465e      	mov	r6, fp
 801929c:	4603      	mov	r3, r0
 801929e:	2a65      	cmp	r2, #101	; 0x65
 80192a0:	d001      	beq.n	80192a6 <_strtod_l+0x17e>
 80192a2:	2a45      	cmp	r2, #69	; 0x45
 80192a4:	d113      	bne.n	80192ce <_strtod_l+0x1a6>
 80192a6:	b91e      	cbnz	r6, 80192b0 <_strtod_l+0x188>
 80192a8:	9a04      	ldr	r2, [sp, #16]
 80192aa:	4302      	orrs	r2, r0
 80192ac:	d094      	beq.n	80191d8 <_strtod_l+0xb0>
 80192ae:	2600      	movs	r6, #0
 80192b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80192b2:	1c6a      	adds	r2, r5, #1
 80192b4:	9215      	str	r2, [sp, #84]	; 0x54
 80192b6:	786a      	ldrb	r2, [r5, #1]
 80192b8:	2a2b      	cmp	r2, #43	; 0x2b
 80192ba:	d074      	beq.n	80193a6 <_strtod_l+0x27e>
 80192bc:	2a2d      	cmp	r2, #45	; 0x2d
 80192be:	d078      	beq.n	80193b2 <_strtod_l+0x28a>
 80192c0:	f04f 0c00 	mov.w	ip, #0
 80192c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80192c8:	2909      	cmp	r1, #9
 80192ca:	d97f      	bls.n	80193cc <_strtod_l+0x2a4>
 80192cc:	9515      	str	r5, [sp, #84]	; 0x54
 80192ce:	2700      	movs	r7, #0
 80192d0:	e09e      	b.n	8019410 <_strtod_l+0x2e8>
 80192d2:	2300      	movs	r3, #0
 80192d4:	e7c8      	b.n	8019268 <_strtod_l+0x140>
 80192d6:	f1bb 0f08 	cmp.w	fp, #8
 80192da:	bfd8      	it	le
 80192dc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80192de:	f100 0001 	add.w	r0, r0, #1
 80192e2:	bfda      	itte	le
 80192e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80192e8:	9309      	strle	r3, [sp, #36]	; 0x24
 80192ea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80192ee:	f10b 0b01 	add.w	fp, fp, #1
 80192f2:	9015      	str	r0, [sp, #84]	; 0x54
 80192f4:	e7c1      	b.n	801927a <_strtod_l+0x152>
 80192f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80192f8:	1c5a      	adds	r2, r3, #1
 80192fa:	9215      	str	r2, [sp, #84]	; 0x54
 80192fc:	785a      	ldrb	r2, [r3, #1]
 80192fe:	f1bb 0f00 	cmp.w	fp, #0
 8019302:	d037      	beq.n	8019374 <_strtod_l+0x24c>
 8019304:	9005      	str	r0, [sp, #20]
 8019306:	465e      	mov	r6, fp
 8019308:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801930c:	2b09      	cmp	r3, #9
 801930e:	d912      	bls.n	8019336 <_strtod_l+0x20e>
 8019310:	2301      	movs	r3, #1
 8019312:	e7c4      	b.n	801929e <_strtod_l+0x176>
 8019314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019316:	1c5a      	adds	r2, r3, #1
 8019318:	9215      	str	r2, [sp, #84]	; 0x54
 801931a:	785a      	ldrb	r2, [r3, #1]
 801931c:	3001      	adds	r0, #1
 801931e:	2a30      	cmp	r2, #48	; 0x30
 8019320:	d0f8      	beq.n	8019314 <_strtod_l+0x1ec>
 8019322:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8019326:	2b08      	cmp	r3, #8
 8019328:	f200 84c1 	bhi.w	8019cae <_strtod_l+0xb86>
 801932c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801932e:	9005      	str	r0, [sp, #20]
 8019330:	2000      	movs	r0, #0
 8019332:	930b      	str	r3, [sp, #44]	; 0x2c
 8019334:	4606      	mov	r6, r0
 8019336:	3a30      	subs	r2, #48	; 0x30
 8019338:	f100 0301 	add.w	r3, r0, #1
 801933c:	d014      	beq.n	8019368 <_strtod_l+0x240>
 801933e:	9905      	ldr	r1, [sp, #20]
 8019340:	4419      	add	r1, r3
 8019342:	9105      	str	r1, [sp, #20]
 8019344:	4633      	mov	r3, r6
 8019346:	eb00 0c06 	add.w	ip, r0, r6
 801934a:	210a      	movs	r1, #10
 801934c:	4563      	cmp	r3, ip
 801934e:	d113      	bne.n	8019378 <_strtod_l+0x250>
 8019350:	1833      	adds	r3, r6, r0
 8019352:	2b08      	cmp	r3, #8
 8019354:	f106 0601 	add.w	r6, r6, #1
 8019358:	4406      	add	r6, r0
 801935a:	dc1a      	bgt.n	8019392 <_strtod_l+0x26a>
 801935c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801935e:	230a      	movs	r3, #10
 8019360:	fb03 2301 	mla	r3, r3, r1, r2
 8019364:	9309      	str	r3, [sp, #36]	; 0x24
 8019366:	2300      	movs	r3, #0
 8019368:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801936a:	1c51      	adds	r1, r2, #1
 801936c:	9115      	str	r1, [sp, #84]	; 0x54
 801936e:	7852      	ldrb	r2, [r2, #1]
 8019370:	4618      	mov	r0, r3
 8019372:	e7c9      	b.n	8019308 <_strtod_l+0x1e0>
 8019374:	4658      	mov	r0, fp
 8019376:	e7d2      	b.n	801931e <_strtod_l+0x1f6>
 8019378:	2b08      	cmp	r3, #8
 801937a:	f103 0301 	add.w	r3, r3, #1
 801937e:	dc03      	bgt.n	8019388 <_strtod_l+0x260>
 8019380:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019382:	434f      	muls	r7, r1
 8019384:	9709      	str	r7, [sp, #36]	; 0x24
 8019386:	e7e1      	b.n	801934c <_strtod_l+0x224>
 8019388:	2b10      	cmp	r3, #16
 801938a:	bfd8      	it	le
 801938c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8019390:	e7dc      	b.n	801934c <_strtod_l+0x224>
 8019392:	2e10      	cmp	r6, #16
 8019394:	bfdc      	itt	le
 8019396:	230a      	movle	r3, #10
 8019398:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801939c:	e7e3      	b.n	8019366 <_strtod_l+0x23e>
 801939e:	2300      	movs	r3, #0
 80193a0:	9305      	str	r3, [sp, #20]
 80193a2:	2301      	movs	r3, #1
 80193a4:	e780      	b.n	80192a8 <_strtod_l+0x180>
 80193a6:	f04f 0c00 	mov.w	ip, #0
 80193aa:	1caa      	adds	r2, r5, #2
 80193ac:	9215      	str	r2, [sp, #84]	; 0x54
 80193ae:	78aa      	ldrb	r2, [r5, #2]
 80193b0:	e788      	b.n	80192c4 <_strtod_l+0x19c>
 80193b2:	f04f 0c01 	mov.w	ip, #1
 80193b6:	e7f8      	b.n	80193aa <_strtod_l+0x282>
 80193b8:	0801fb94 	.word	0x0801fb94
 80193bc:	0801fb91 	.word	0x0801fb91
 80193c0:	7ff00000 	.word	0x7ff00000
 80193c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80193c6:	1c51      	adds	r1, r2, #1
 80193c8:	9115      	str	r1, [sp, #84]	; 0x54
 80193ca:	7852      	ldrb	r2, [r2, #1]
 80193cc:	2a30      	cmp	r2, #48	; 0x30
 80193ce:	d0f9      	beq.n	80193c4 <_strtod_l+0x29c>
 80193d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80193d4:	2908      	cmp	r1, #8
 80193d6:	f63f af7a 	bhi.w	80192ce <_strtod_l+0x1a6>
 80193da:	3a30      	subs	r2, #48	; 0x30
 80193dc:	9208      	str	r2, [sp, #32]
 80193de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80193e0:	920c      	str	r2, [sp, #48]	; 0x30
 80193e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80193e4:	1c57      	adds	r7, r2, #1
 80193e6:	9715      	str	r7, [sp, #84]	; 0x54
 80193e8:	7852      	ldrb	r2, [r2, #1]
 80193ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80193ee:	f1be 0f09 	cmp.w	lr, #9
 80193f2:	d938      	bls.n	8019466 <_strtod_l+0x33e>
 80193f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80193f6:	1a7f      	subs	r7, r7, r1
 80193f8:	2f08      	cmp	r7, #8
 80193fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80193fe:	dc03      	bgt.n	8019408 <_strtod_l+0x2e0>
 8019400:	9908      	ldr	r1, [sp, #32]
 8019402:	428f      	cmp	r7, r1
 8019404:	bfa8      	it	ge
 8019406:	460f      	movge	r7, r1
 8019408:	f1bc 0f00 	cmp.w	ip, #0
 801940c:	d000      	beq.n	8019410 <_strtod_l+0x2e8>
 801940e:	427f      	negs	r7, r7
 8019410:	2e00      	cmp	r6, #0
 8019412:	d14f      	bne.n	80194b4 <_strtod_l+0x38c>
 8019414:	9904      	ldr	r1, [sp, #16]
 8019416:	4301      	orrs	r1, r0
 8019418:	f47f aec1 	bne.w	801919e <_strtod_l+0x76>
 801941c:	2b00      	cmp	r3, #0
 801941e:	f47f aedb 	bne.w	80191d8 <_strtod_l+0xb0>
 8019422:	2a69      	cmp	r2, #105	; 0x69
 8019424:	d029      	beq.n	801947a <_strtod_l+0x352>
 8019426:	dc26      	bgt.n	8019476 <_strtod_l+0x34e>
 8019428:	2a49      	cmp	r2, #73	; 0x49
 801942a:	d026      	beq.n	801947a <_strtod_l+0x352>
 801942c:	2a4e      	cmp	r2, #78	; 0x4e
 801942e:	f47f aed3 	bne.w	80191d8 <_strtod_l+0xb0>
 8019432:	499b      	ldr	r1, [pc, #620]	; (80196a0 <_strtod_l+0x578>)
 8019434:	a815      	add	r0, sp, #84	; 0x54
 8019436:	f001 ff45 	bl	801b2c4 <__match>
 801943a:	2800      	cmp	r0, #0
 801943c:	f43f aecc 	beq.w	80191d8 <_strtod_l+0xb0>
 8019440:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019442:	781b      	ldrb	r3, [r3, #0]
 8019444:	2b28      	cmp	r3, #40	; 0x28
 8019446:	d12f      	bne.n	80194a8 <_strtod_l+0x380>
 8019448:	4996      	ldr	r1, [pc, #600]	; (80196a4 <_strtod_l+0x57c>)
 801944a:	aa18      	add	r2, sp, #96	; 0x60
 801944c:	a815      	add	r0, sp, #84	; 0x54
 801944e:	f001 ff4d 	bl	801b2ec <__hexnan>
 8019452:	2805      	cmp	r0, #5
 8019454:	d128      	bne.n	80194a8 <_strtod_l+0x380>
 8019456:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019458:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801945c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8019460:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8019464:	e69b      	b.n	801919e <_strtod_l+0x76>
 8019466:	9f08      	ldr	r7, [sp, #32]
 8019468:	210a      	movs	r1, #10
 801946a:	fb01 2107 	mla	r1, r1, r7, r2
 801946e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019472:	9208      	str	r2, [sp, #32]
 8019474:	e7b5      	b.n	80193e2 <_strtod_l+0x2ba>
 8019476:	2a6e      	cmp	r2, #110	; 0x6e
 8019478:	e7d9      	b.n	801942e <_strtod_l+0x306>
 801947a:	498b      	ldr	r1, [pc, #556]	; (80196a8 <_strtod_l+0x580>)
 801947c:	a815      	add	r0, sp, #84	; 0x54
 801947e:	f001 ff21 	bl	801b2c4 <__match>
 8019482:	2800      	cmp	r0, #0
 8019484:	f43f aea8 	beq.w	80191d8 <_strtod_l+0xb0>
 8019488:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801948a:	4988      	ldr	r1, [pc, #544]	; (80196ac <_strtod_l+0x584>)
 801948c:	3b01      	subs	r3, #1
 801948e:	a815      	add	r0, sp, #84	; 0x54
 8019490:	9315      	str	r3, [sp, #84]	; 0x54
 8019492:	f001 ff17 	bl	801b2c4 <__match>
 8019496:	b910      	cbnz	r0, 801949e <_strtod_l+0x376>
 8019498:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801949a:	3301      	adds	r3, #1
 801949c:	9315      	str	r3, [sp, #84]	; 0x54
 801949e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80196bc <_strtod_l+0x594>
 80194a2:	f04f 0800 	mov.w	r8, #0
 80194a6:	e67a      	b.n	801919e <_strtod_l+0x76>
 80194a8:	4881      	ldr	r0, [pc, #516]	; (80196b0 <_strtod_l+0x588>)
 80194aa:	f000 fd8d 	bl	8019fc8 <nan>
 80194ae:	ec59 8b10 	vmov	r8, r9, d0
 80194b2:	e674      	b.n	801919e <_strtod_l+0x76>
 80194b4:	9b05      	ldr	r3, [sp, #20]
 80194b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80194b8:	1afb      	subs	r3, r7, r3
 80194ba:	f1bb 0f00 	cmp.w	fp, #0
 80194be:	bf08      	it	eq
 80194c0:	46b3      	moveq	fp, r6
 80194c2:	2e10      	cmp	r6, #16
 80194c4:	9308      	str	r3, [sp, #32]
 80194c6:	4635      	mov	r5, r6
 80194c8:	bfa8      	it	ge
 80194ca:	2510      	movge	r5, #16
 80194cc:	f7e7 f824 	bl	8000518 <__aeabi_ui2d>
 80194d0:	2e09      	cmp	r6, #9
 80194d2:	4680      	mov	r8, r0
 80194d4:	4689      	mov	r9, r1
 80194d6:	dd13      	ble.n	8019500 <_strtod_l+0x3d8>
 80194d8:	4b76      	ldr	r3, [pc, #472]	; (80196b4 <_strtod_l+0x58c>)
 80194da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80194de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80194e2:	f7e7 f893 	bl	800060c <__aeabi_dmul>
 80194e6:	4680      	mov	r8, r0
 80194e8:	4650      	mov	r0, sl
 80194ea:	4689      	mov	r9, r1
 80194ec:	f7e7 f814 	bl	8000518 <__aeabi_ui2d>
 80194f0:	4602      	mov	r2, r0
 80194f2:	460b      	mov	r3, r1
 80194f4:	4640      	mov	r0, r8
 80194f6:	4649      	mov	r1, r9
 80194f8:	f7e6 fed2 	bl	80002a0 <__adddf3>
 80194fc:	4680      	mov	r8, r0
 80194fe:	4689      	mov	r9, r1
 8019500:	2e0f      	cmp	r6, #15
 8019502:	dc38      	bgt.n	8019576 <_strtod_l+0x44e>
 8019504:	9b08      	ldr	r3, [sp, #32]
 8019506:	2b00      	cmp	r3, #0
 8019508:	f43f ae49 	beq.w	801919e <_strtod_l+0x76>
 801950c:	dd24      	ble.n	8019558 <_strtod_l+0x430>
 801950e:	2b16      	cmp	r3, #22
 8019510:	dc0b      	bgt.n	801952a <_strtod_l+0x402>
 8019512:	4968      	ldr	r1, [pc, #416]	; (80196b4 <_strtod_l+0x58c>)
 8019514:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019518:	e9d1 0100 	ldrd	r0, r1, [r1]
 801951c:	4642      	mov	r2, r8
 801951e:	464b      	mov	r3, r9
 8019520:	f7e7 f874 	bl	800060c <__aeabi_dmul>
 8019524:	4680      	mov	r8, r0
 8019526:	4689      	mov	r9, r1
 8019528:	e639      	b.n	801919e <_strtod_l+0x76>
 801952a:	9a08      	ldr	r2, [sp, #32]
 801952c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8019530:	4293      	cmp	r3, r2
 8019532:	db20      	blt.n	8019576 <_strtod_l+0x44e>
 8019534:	4c5f      	ldr	r4, [pc, #380]	; (80196b4 <_strtod_l+0x58c>)
 8019536:	f1c6 060f 	rsb	r6, r6, #15
 801953a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801953e:	4642      	mov	r2, r8
 8019540:	464b      	mov	r3, r9
 8019542:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019546:	f7e7 f861 	bl	800060c <__aeabi_dmul>
 801954a:	9b08      	ldr	r3, [sp, #32]
 801954c:	1b9e      	subs	r6, r3, r6
 801954e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8019552:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019556:	e7e3      	b.n	8019520 <_strtod_l+0x3f8>
 8019558:	9b08      	ldr	r3, [sp, #32]
 801955a:	3316      	adds	r3, #22
 801955c:	db0b      	blt.n	8019576 <_strtod_l+0x44e>
 801955e:	9b05      	ldr	r3, [sp, #20]
 8019560:	1bdf      	subs	r7, r3, r7
 8019562:	4b54      	ldr	r3, [pc, #336]	; (80196b4 <_strtod_l+0x58c>)
 8019564:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8019568:	e9d7 2300 	ldrd	r2, r3, [r7]
 801956c:	4640      	mov	r0, r8
 801956e:	4649      	mov	r1, r9
 8019570:	f7e7 f976 	bl	8000860 <__aeabi_ddiv>
 8019574:	e7d6      	b.n	8019524 <_strtod_l+0x3fc>
 8019576:	9b08      	ldr	r3, [sp, #32]
 8019578:	1b75      	subs	r5, r6, r5
 801957a:	441d      	add	r5, r3
 801957c:	2d00      	cmp	r5, #0
 801957e:	dd70      	ble.n	8019662 <_strtod_l+0x53a>
 8019580:	f015 030f 	ands.w	r3, r5, #15
 8019584:	d00a      	beq.n	801959c <_strtod_l+0x474>
 8019586:	494b      	ldr	r1, [pc, #300]	; (80196b4 <_strtod_l+0x58c>)
 8019588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801958c:	4642      	mov	r2, r8
 801958e:	464b      	mov	r3, r9
 8019590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019594:	f7e7 f83a 	bl	800060c <__aeabi_dmul>
 8019598:	4680      	mov	r8, r0
 801959a:	4689      	mov	r9, r1
 801959c:	f035 050f 	bics.w	r5, r5, #15
 80195a0:	d04d      	beq.n	801963e <_strtod_l+0x516>
 80195a2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80195a6:	dd22      	ble.n	80195ee <_strtod_l+0x4c6>
 80195a8:	2500      	movs	r5, #0
 80195aa:	46ab      	mov	fp, r5
 80195ac:	9509      	str	r5, [sp, #36]	; 0x24
 80195ae:	9505      	str	r5, [sp, #20]
 80195b0:	2322      	movs	r3, #34	; 0x22
 80195b2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80196bc <_strtod_l+0x594>
 80195b6:	6023      	str	r3, [r4, #0]
 80195b8:	f04f 0800 	mov.w	r8, #0
 80195bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195be:	2b00      	cmp	r3, #0
 80195c0:	f43f aded 	beq.w	801919e <_strtod_l+0x76>
 80195c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80195c6:	4620      	mov	r0, r4
 80195c8:	f002 fa38 	bl	801ba3c <_Bfree>
 80195cc:	9905      	ldr	r1, [sp, #20]
 80195ce:	4620      	mov	r0, r4
 80195d0:	f002 fa34 	bl	801ba3c <_Bfree>
 80195d4:	4659      	mov	r1, fp
 80195d6:	4620      	mov	r0, r4
 80195d8:	f002 fa30 	bl	801ba3c <_Bfree>
 80195dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80195de:	4620      	mov	r0, r4
 80195e0:	f002 fa2c 	bl	801ba3c <_Bfree>
 80195e4:	4629      	mov	r1, r5
 80195e6:	4620      	mov	r0, r4
 80195e8:	f002 fa28 	bl	801ba3c <_Bfree>
 80195ec:	e5d7      	b.n	801919e <_strtod_l+0x76>
 80195ee:	4b32      	ldr	r3, [pc, #200]	; (80196b8 <_strtod_l+0x590>)
 80195f0:	9304      	str	r3, [sp, #16]
 80195f2:	2300      	movs	r3, #0
 80195f4:	112d      	asrs	r5, r5, #4
 80195f6:	4640      	mov	r0, r8
 80195f8:	4649      	mov	r1, r9
 80195fa:	469a      	mov	sl, r3
 80195fc:	2d01      	cmp	r5, #1
 80195fe:	dc21      	bgt.n	8019644 <_strtod_l+0x51c>
 8019600:	b10b      	cbz	r3, 8019606 <_strtod_l+0x4de>
 8019602:	4680      	mov	r8, r0
 8019604:	4689      	mov	r9, r1
 8019606:	492c      	ldr	r1, [pc, #176]	; (80196b8 <_strtod_l+0x590>)
 8019608:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801960c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8019610:	4642      	mov	r2, r8
 8019612:	464b      	mov	r3, r9
 8019614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019618:	f7e6 fff8 	bl	800060c <__aeabi_dmul>
 801961c:	4b27      	ldr	r3, [pc, #156]	; (80196bc <_strtod_l+0x594>)
 801961e:	460a      	mov	r2, r1
 8019620:	400b      	ands	r3, r1
 8019622:	4927      	ldr	r1, [pc, #156]	; (80196c0 <_strtod_l+0x598>)
 8019624:	428b      	cmp	r3, r1
 8019626:	4680      	mov	r8, r0
 8019628:	d8be      	bhi.n	80195a8 <_strtod_l+0x480>
 801962a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801962e:	428b      	cmp	r3, r1
 8019630:	bf86      	itte	hi
 8019632:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80196c4 <_strtod_l+0x59c>
 8019636:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 801963a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801963e:	2300      	movs	r3, #0
 8019640:	9304      	str	r3, [sp, #16]
 8019642:	e07b      	b.n	801973c <_strtod_l+0x614>
 8019644:	07ea      	lsls	r2, r5, #31
 8019646:	d505      	bpl.n	8019654 <_strtod_l+0x52c>
 8019648:	9b04      	ldr	r3, [sp, #16]
 801964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801964e:	f7e6 ffdd 	bl	800060c <__aeabi_dmul>
 8019652:	2301      	movs	r3, #1
 8019654:	9a04      	ldr	r2, [sp, #16]
 8019656:	3208      	adds	r2, #8
 8019658:	f10a 0a01 	add.w	sl, sl, #1
 801965c:	106d      	asrs	r5, r5, #1
 801965e:	9204      	str	r2, [sp, #16]
 8019660:	e7cc      	b.n	80195fc <_strtod_l+0x4d4>
 8019662:	d0ec      	beq.n	801963e <_strtod_l+0x516>
 8019664:	426d      	negs	r5, r5
 8019666:	f015 020f 	ands.w	r2, r5, #15
 801966a:	d00a      	beq.n	8019682 <_strtod_l+0x55a>
 801966c:	4b11      	ldr	r3, [pc, #68]	; (80196b4 <_strtod_l+0x58c>)
 801966e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019672:	4640      	mov	r0, r8
 8019674:	4649      	mov	r1, r9
 8019676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801967a:	f7e7 f8f1 	bl	8000860 <__aeabi_ddiv>
 801967e:	4680      	mov	r8, r0
 8019680:	4689      	mov	r9, r1
 8019682:	112d      	asrs	r5, r5, #4
 8019684:	d0db      	beq.n	801963e <_strtod_l+0x516>
 8019686:	2d1f      	cmp	r5, #31
 8019688:	dd1e      	ble.n	80196c8 <_strtod_l+0x5a0>
 801968a:	2500      	movs	r5, #0
 801968c:	46ab      	mov	fp, r5
 801968e:	9509      	str	r5, [sp, #36]	; 0x24
 8019690:	9505      	str	r5, [sp, #20]
 8019692:	2322      	movs	r3, #34	; 0x22
 8019694:	f04f 0800 	mov.w	r8, #0
 8019698:	f04f 0900 	mov.w	r9, #0
 801969c:	6023      	str	r3, [r4, #0]
 801969e:	e78d      	b.n	80195bc <_strtod_l+0x494>
 80196a0:	0801fb65 	.word	0x0801fb65
 80196a4:	0801fba8 	.word	0x0801fba8
 80196a8:	0801fb5d 	.word	0x0801fb5d
 80196ac:	0801fcf4 	.word	0x0801fcf4
 80196b0:	0801ff7f 	.word	0x0801ff7f
 80196b4:	0801fe70 	.word	0x0801fe70
 80196b8:	0801fe48 	.word	0x0801fe48
 80196bc:	7ff00000 	.word	0x7ff00000
 80196c0:	7ca00000 	.word	0x7ca00000
 80196c4:	7fefffff 	.word	0x7fefffff
 80196c8:	f015 0310 	ands.w	r3, r5, #16
 80196cc:	bf18      	it	ne
 80196ce:	236a      	movne	r3, #106	; 0x6a
 80196d0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8019a74 <_strtod_l+0x94c>
 80196d4:	9304      	str	r3, [sp, #16]
 80196d6:	4640      	mov	r0, r8
 80196d8:	4649      	mov	r1, r9
 80196da:	2300      	movs	r3, #0
 80196dc:	07ea      	lsls	r2, r5, #31
 80196de:	d504      	bpl.n	80196ea <_strtod_l+0x5c2>
 80196e0:	e9da 2300 	ldrd	r2, r3, [sl]
 80196e4:	f7e6 ff92 	bl	800060c <__aeabi_dmul>
 80196e8:	2301      	movs	r3, #1
 80196ea:	106d      	asrs	r5, r5, #1
 80196ec:	f10a 0a08 	add.w	sl, sl, #8
 80196f0:	d1f4      	bne.n	80196dc <_strtod_l+0x5b4>
 80196f2:	b10b      	cbz	r3, 80196f8 <_strtod_l+0x5d0>
 80196f4:	4680      	mov	r8, r0
 80196f6:	4689      	mov	r9, r1
 80196f8:	9b04      	ldr	r3, [sp, #16]
 80196fa:	b1bb      	cbz	r3, 801972c <_strtod_l+0x604>
 80196fc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8019700:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8019704:	2b00      	cmp	r3, #0
 8019706:	4649      	mov	r1, r9
 8019708:	dd10      	ble.n	801972c <_strtod_l+0x604>
 801970a:	2b1f      	cmp	r3, #31
 801970c:	f340 811e 	ble.w	801994c <_strtod_l+0x824>
 8019710:	2b34      	cmp	r3, #52	; 0x34
 8019712:	bfde      	ittt	le
 8019714:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8019718:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801971c:	4093      	lslle	r3, r2
 801971e:	f04f 0800 	mov.w	r8, #0
 8019722:	bfcc      	ite	gt
 8019724:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8019728:	ea03 0901 	andle.w	r9, r3, r1
 801972c:	2200      	movs	r2, #0
 801972e:	2300      	movs	r3, #0
 8019730:	4640      	mov	r0, r8
 8019732:	4649      	mov	r1, r9
 8019734:	f7e7 f9d2 	bl	8000adc <__aeabi_dcmpeq>
 8019738:	2800      	cmp	r0, #0
 801973a:	d1a6      	bne.n	801968a <_strtod_l+0x562>
 801973c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801973e:	9300      	str	r3, [sp, #0]
 8019740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019742:	4633      	mov	r3, r6
 8019744:	465a      	mov	r2, fp
 8019746:	4620      	mov	r0, r4
 8019748:	f002 f9e0 	bl	801bb0c <__s2b>
 801974c:	9009      	str	r0, [sp, #36]	; 0x24
 801974e:	2800      	cmp	r0, #0
 8019750:	f43f af2a 	beq.w	80195a8 <_strtod_l+0x480>
 8019754:	9a08      	ldr	r2, [sp, #32]
 8019756:	9b05      	ldr	r3, [sp, #20]
 8019758:	2a00      	cmp	r2, #0
 801975a:	eba3 0307 	sub.w	r3, r3, r7
 801975e:	bfa8      	it	ge
 8019760:	2300      	movge	r3, #0
 8019762:	930c      	str	r3, [sp, #48]	; 0x30
 8019764:	2500      	movs	r5, #0
 8019766:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801976a:	9312      	str	r3, [sp, #72]	; 0x48
 801976c:	46ab      	mov	fp, r5
 801976e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019770:	4620      	mov	r0, r4
 8019772:	6859      	ldr	r1, [r3, #4]
 8019774:	f002 f922 	bl	801b9bc <_Balloc>
 8019778:	9005      	str	r0, [sp, #20]
 801977a:	2800      	cmp	r0, #0
 801977c:	f43f af18 	beq.w	80195b0 <_strtod_l+0x488>
 8019780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019782:	691a      	ldr	r2, [r3, #16]
 8019784:	3202      	adds	r2, #2
 8019786:	f103 010c 	add.w	r1, r3, #12
 801978a:	0092      	lsls	r2, r2, #2
 801978c:	300c      	adds	r0, #12
 801978e:	f000 fc0d 	bl	8019fac <memcpy>
 8019792:	ec49 8b10 	vmov	d0, r8, r9
 8019796:	aa18      	add	r2, sp, #96	; 0x60
 8019798:	a917      	add	r1, sp, #92	; 0x5c
 801979a:	4620      	mov	r0, r4
 801979c:	f002 fcea 	bl	801c174 <__d2b>
 80197a0:	ec49 8b18 	vmov	d8, r8, r9
 80197a4:	9016      	str	r0, [sp, #88]	; 0x58
 80197a6:	2800      	cmp	r0, #0
 80197a8:	f43f af02 	beq.w	80195b0 <_strtod_l+0x488>
 80197ac:	2101      	movs	r1, #1
 80197ae:	4620      	mov	r0, r4
 80197b0:	f002 fa44 	bl	801bc3c <__i2b>
 80197b4:	4683      	mov	fp, r0
 80197b6:	2800      	cmp	r0, #0
 80197b8:	f43f aefa 	beq.w	80195b0 <_strtod_l+0x488>
 80197bc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80197be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80197c0:	2e00      	cmp	r6, #0
 80197c2:	bfab      	itete	ge
 80197c4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80197c6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80197c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80197ca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80197ce:	bfac      	ite	ge
 80197d0:	eb06 0a03 	addge.w	sl, r6, r3
 80197d4:	1b9f      	sublt	r7, r3, r6
 80197d6:	9b04      	ldr	r3, [sp, #16]
 80197d8:	1af6      	subs	r6, r6, r3
 80197da:	4416      	add	r6, r2
 80197dc:	4ba0      	ldr	r3, [pc, #640]	; (8019a60 <_strtod_l+0x938>)
 80197de:	3e01      	subs	r6, #1
 80197e0:	429e      	cmp	r6, r3
 80197e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80197e6:	f280 80c4 	bge.w	8019972 <_strtod_l+0x84a>
 80197ea:	1b9b      	subs	r3, r3, r6
 80197ec:	2b1f      	cmp	r3, #31
 80197ee:	eba2 0203 	sub.w	r2, r2, r3
 80197f2:	f04f 0101 	mov.w	r1, #1
 80197f6:	f300 80b0 	bgt.w	801995a <_strtod_l+0x832>
 80197fa:	fa01 f303 	lsl.w	r3, r1, r3
 80197fe:	930e      	str	r3, [sp, #56]	; 0x38
 8019800:	2300      	movs	r3, #0
 8019802:	930d      	str	r3, [sp, #52]	; 0x34
 8019804:	eb0a 0602 	add.w	r6, sl, r2
 8019808:	9b04      	ldr	r3, [sp, #16]
 801980a:	45b2      	cmp	sl, r6
 801980c:	4417      	add	r7, r2
 801980e:	441f      	add	r7, r3
 8019810:	4653      	mov	r3, sl
 8019812:	bfa8      	it	ge
 8019814:	4633      	movge	r3, r6
 8019816:	42bb      	cmp	r3, r7
 8019818:	bfa8      	it	ge
 801981a:	463b      	movge	r3, r7
 801981c:	2b00      	cmp	r3, #0
 801981e:	bfc2      	ittt	gt
 8019820:	1af6      	subgt	r6, r6, r3
 8019822:	1aff      	subgt	r7, r7, r3
 8019824:	ebaa 0a03 	subgt.w	sl, sl, r3
 8019828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801982a:	2b00      	cmp	r3, #0
 801982c:	dd17      	ble.n	801985e <_strtod_l+0x736>
 801982e:	4659      	mov	r1, fp
 8019830:	461a      	mov	r2, r3
 8019832:	4620      	mov	r0, r4
 8019834:	f002 fac2 	bl	801bdbc <__pow5mult>
 8019838:	4683      	mov	fp, r0
 801983a:	2800      	cmp	r0, #0
 801983c:	f43f aeb8 	beq.w	80195b0 <_strtod_l+0x488>
 8019840:	4601      	mov	r1, r0
 8019842:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019844:	4620      	mov	r0, r4
 8019846:	f002 fa0f 	bl	801bc68 <__multiply>
 801984a:	900b      	str	r0, [sp, #44]	; 0x2c
 801984c:	2800      	cmp	r0, #0
 801984e:	f43f aeaf 	beq.w	80195b0 <_strtod_l+0x488>
 8019852:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019854:	4620      	mov	r0, r4
 8019856:	f002 f8f1 	bl	801ba3c <_Bfree>
 801985a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801985c:	9316      	str	r3, [sp, #88]	; 0x58
 801985e:	2e00      	cmp	r6, #0
 8019860:	f300 808c 	bgt.w	801997c <_strtod_l+0x854>
 8019864:	9b08      	ldr	r3, [sp, #32]
 8019866:	2b00      	cmp	r3, #0
 8019868:	dd08      	ble.n	801987c <_strtod_l+0x754>
 801986a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801986c:	9905      	ldr	r1, [sp, #20]
 801986e:	4620      	mov	r0, r4
 8019870:	f002 faa4 	bl	801bdbc <__pow5mult>
 8019874:	9005      	str	r0, [sp, #20]
 8019876:	2800      	cmp	r0, #0
 8019878:	f43f ae9a 	beq.w	80195b0 <_strtod_l+0x488>
 801987c:	2f00      	cmp	r7, #0
 801987e:	dd08      	ble.n	8019892 <_strtod_l+0x76a>
 8019880:	9905      	ldr	r1, [sp, #20]
 8019882:	463a      	mov	r2, r7
 8019884:	4620      	mov	r0, r4
 8019886:	f002 faf3 	bl	801be70 <__lshift>
 801988a:	9005      	str	r0, [sp, #20]
 801988c:	2800      	cmp	r0, #0
 801988e:	f43f ae8f 	beq.w	80195b0 <_strtod_l+0x488>
 8019892:	f1ba 0f00 	cmp.w	sl, #0
 8019896:	dd08      	ble.n	80198aa <_strtod_l+0x782>
 8019898:	4659      	mov	r1, fp
 801989a:	4652      	mov	r2, sl
 801989c:	4620      	mov	r0, r4
 801989e:	f002 fae7 	bl	801be70 <__lshift>
 80198a2:	4683      	mov	fp, r0
 80198a4:	2800      	cmp	r0, #0
 80198a6:	f43f ae83 	beq.w	80195b0 <_strtod_l+0x488>
 80198aa:	9a05      	ldr	r2, [sp, #20]
 80198ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80198ae:	4620      	mov	r0, r4
 80198b0:	f002 fb66 	bl	801bf80 <__mdiff>
 80198b4:	4605      	mov	r5, r0
 80198b6:	2800      	cmp	r0, #0
 80198b8:	f43f ae7a 	beq.w	80195b0 <_strtod_l+0x488>
 80198bc:	68c3      	ldr	r3, [r0, #12]
 80198be:	930b      	str	r3, [sp, #44]	; 0x2c
 80198c0:	2300      	movs	r3, #0
 80198c2:	60c3      	str	r3, [r0, #12]
 80198c4:	4659      	mov	r1, fp
 80198c6:	f002 fb3f 	bl	801bf48 <__mcmp>
 80198ca:	2800      	cmp	r0, #0
 80198cc:	da60      	bge.n	8019990 <_strtod_l+0x868>
 80198ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80198d0:	ea53 0308 	orrs.w	r3, r3, r8
 80198d4:	f040 8084 	bne.w	80199e0 <_strtod_l+0x8b8>
 80198d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d17f      	bne.n	80199e0 <_strtod_l+0x8b8>
 80198e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80198e4:	0d1b      	lsrs	r3, r3, #20
 80198e6:	051b      	lsls	r3, r3, #20
 80198e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80198ec:	d978      	bls.n	80199e0 <_strtod_l+0x8b8>
 80198ee:	696b      	ldr	r3, [r5, #20]
 80198f0:	b913      	cbnz	r3, 80198f8 <_strtod_l+0x7d0>
 80198f2:	692b      	ldr	r3, [r5, #16]
 80198f4:	2b01      	cmp	r3, #1
 80198f6:	dd73      	ble.n	80199e0 <_strtod_l+0x8b8>
 80198f8:	4629      	mov	r1, r5
 80198fa:	2201      	movs	r2, #1
 80198fc:	4620      	mov	r0, r4
 80198fe:	f002 fab7 	bl	801be70 <__lshift>
 8019902:	4659      	mov	r1, fp
 8019904:	4605      	mov	r5, r0
 8019906:	f002 fb1f 	bl	801bf48 <__mcmp>
 801990a:	2800      	cmp	r0, #0
 801990c:	dd68      	ble.n	80199e0 <_strtod_l+0x8b8>
 801990e:	9904      	ldr	r1, [sp, #16]
 8019910:	4a54      	ldr	r2, [pc, #336]	; (8019a64 <_strtod_l+0x93c>)
 8019912:	464b      	mov	r3, r9
 8019914:	2900      	cmp	r1, #0
 8019916:	f000 8084 	beq.w	8019a22 <_strtod_l+0x8fa>
 801991a:	ea02 0109 	and.w	r1, r2, r9
 801991e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019922:	dc7e      	bgt.n	8019a22 <_strtod_l+0x8fa>
 8019924:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019928:	f77f aeb3 	ble.w	8019692 <_strtod_l+0x56a>
 801992c:	4b4e      	ldr	r3, [pc, #312]	; (8019a68 <_strtod_l+0x940>)
 801992e:	4640      	mov	r0, r8
 8019930:	4649      	mov	r1, r9
 8019932:	2200      	movs	r2, #0
 8019934:	f7e6 fe6a 	bl	800060c <__aeabi_dmul>
 8019938:	4b4a      	ldr	r3, [pc, #296]	; (8019a64 <_strtod_l+0x93c>)
 801993a:	400b      	ands	r3, r1
 801993c:	4680      	mov	r8, r0
 801993e:	4689      	mov	r9, r1
 8019940:	2b00      	cmp	r3, #0
 8019942:	f47f ae3f 	bne.w	80195c4 <_strtod_l+0x49c>
 8019946:	2322      	movs	r3, #34	; 0x22
 8019948:	6023      	str	r3, [r4, #0]
 801994a:	e63b      	b.n	80195c4 <_strtod_l+0x49c>
 801994c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019950:	fa02 f303 	lsl.w	r3, r2, r3
 8019954:	ea03 0808 	and.w	r8, r3, r8
 8019958:	e6e8      	b.n	801972c <_strtod_l+0x604>
 801995a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801995e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8019962:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8019966:	36e2      	adds	r6, #226	; 0xe2
 8019968:	fa01 f306 	lsl.w	r3, r1, r6
 801996c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8019970:	e748      	b.n	8019804 <_strtod_l+0x6dc>
 8019972:	2100      	movs	r1, #0
 8019974:	2301      	movs	r3, #1
 8019976:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801997a:	e743      	b.n	8019804 <_strtod_l+0x6dc>
 801997c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801997e:	4632      	mov	r2, r6
 8019980:	4620      	mov	r0, r4
 8019982:	f002 fa75 	bl	801be70 <__lshift>
 8019986:	9016      	str	r0, [sp, #88]	; 0x58
 8019988:	2800      	cmp	r0, #0
 801998a:	f47f af6b 	bne.w	8019864 <_strtod_l+0x73c>
 801998e:	e60f      	b.n	80195b0 <_strtod_l+0x488>
 8019990:	46ca      	mov	sl, r9
 8019992:	d171      	bne.n	8019a78 <_strtod_l+0x950>
 8019994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019996:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801999a:	b352      	cbz	r2, 80199f2 <_strtod_l+0x8ca>
 801999c:	4a33      	ldr	r2, [pc, #204]	; (8019a6c <_strtod_l+0x944>)
 801999e:	4293      	cmp	r3, r2
 80199a0:	d12a      	bne.n	80199f8 <_strtod_l+0x8d0>
 80199a2:	9b04      	ldr	r3, [sp, #16]
 80199a4:	4641      	mov	r1, r8
 80199a6:	b1fb      	cbz	r3, 80199e8 <_strtod_l+0x8c0>
 80199a8:	4b2e      	ldr	r3, [pc, #184]	; (8019a64 <_strtod_l+0x93c>)
 80199aa:	ea09 0303 	and.w	r3, r9, r3
 80199ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80199b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80199b6:	d81a      	bhi.n	80199ee <_strtod_l+0x8c6>
 80199b8:	0d1b      	lsrs	r3, r3, #20
 80199ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80199be:	fa02 f303 	lsl.w	r3, r2, r3
 80199c2:	4299      	cmp	r1, r3
 80199c4:	d118      	bne.n	80199f8 <_strtod_l+0x8d0>
 80199c6:	4b2a      	ldr	r3, [pc, #168]	; (8019a70 <_strtod_l+0x948>)
 80199c8:	459a      	cmp	sl, r3
 80199ca:	d102      	bne.n	80199d2 <_strtod_l+0x8aa>
 80199cc:	3101      	adds	r1, #1
 80199ce:	f43f adef 	beq.w	80195b0 <_strtod_l+0x488>
 80199d2:	4b24      	ldr	r3, [pc, #144]	; (8019a64 <_strtod_l+0x93c>)
 80199d4:	ea0a 0303 	and.w	r3, sl, r3
 80199d8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80199dc:	f04f 0800 	mov.w	r8, #0
 80199e0:	9b04      	ldr	r3, [sp, #16]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d1a2      	bne.n	801992c <_strtod_l+0x804>
 80199e6:	e5ed      	b.n	80195c4 <_strtod_l+0x49c>
 80199e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80199ec:	e7e9      	b.n	80199c2 <_strtod_l+0x89a>
 80199ee:	4613      	mov	r3, r2
 80199f0:	e7e7      	b.n	80199c2 <_strtod_l+0x89a>
 80199f2:	ea53 0308 	orrs.w	r3, r3, r8
 80199f6:	d08a      	beq.n	801990e <_strtod_l+0x7e6>
 80199f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80199fa:	b1e3      	cbz	r3, 8019a36 <_strtod_l+0x90e>
 80199fc:	ea13 0f0a 	tst.w	r3, sl
 8019a00:	d0ee      	beq.n	80199e0 <_strtod_l+0x8b8>
 8019a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a04:	9a04      	ldr	r2, [sp, #16]
 8019a06:	4640      	mov	r0, r8
 8019a08:	4649      	mov	r1, r9
 8019a0a:	b1c3      	cbz	r3, 8019a3e <_strtod_l+0x916>
 8019a0c:	f7ff fb70 	bl	80190f0 <sulp>
 8019a10:	4602      	mov	r2, r0
 8019a12:	460b      	mov	r3, r1
 8019a14:	ec51 0b18 	vmov	r0, r1, d8
 8019a18:	f7e6 fc42 	bl	80002a0 <__adddf3>
 8019a1c:	4680      	mov	r8, r0
 8019a1e:	4689      	mov	r9, r1
 8019a20:	e7de      	b.n	80199e0 <_strtod_l+0x8b8>
 8019a22:	4013      	ands	r3, r2
 8019a24:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8019a28:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8019a2c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8019a30:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019a34:	e7d4      	b.n	80199e0 <_strtod_l+0x8b8>
 8019a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a38:	ea13 0f08 	tst.w	r3, r8
 8019a3c:	e7e0      	b.n	8019a00 <_strtod_l+0x8d8>
 8019a3e:	f7ff fb57 	bl	80190f0 <sulp>
 8019a42:	4602      	mov	r2, r0
 8019a44:	460b      	mov	r3, r1
 8019a46:	ec51 0b18 	vmov	r0, r1, d8
 8019a4a:	f7e6 fc27 	bl	800029c <__aeabi_dsub>
 8019a4e:	2200      	movs	r2, #0
 8019a50:	2300      	movs	r3, #0
 8019a52:	4680      	mov	r8, r0
 8019a54:	4689      	mov	r9, r1
 8019a56:	f7e7 f841 	bl	8000adc <__aeabi_dcmpeq>
 8019a5a:	2800      	cmp	r0, #0
 8019a5c:	d0c0      	beq.n	80199e0 <_strtod_l+0x8b8>
 8019a5e:	e618      	b.n	8019692 <_strtod_l+0x56a>
 8019a60:	fffffc02 	.word	0xfffffc02
 8019a64:	7ff00000 	.word	0x7ff00000
 8019a68:	39500000 	.word	0x39500000
 8019a6c:	000fffff 	.word	0x000fffff
 8019a70:	7fefffff 	.word	0x7fefffff
 8019a74:	0801fbc0 	.word	0x0801fbc0
 8019a78:	4659      	mov	r1, fp
 8019a7a:	4628      	mov	r0, r5
 8019a7c:	f002 fbd4 	bl	801c228 <__ratio>
 8019a80:	ec57 6b10 	vmov	r6, r7, d0
 8019a84:	ee10 0a10 	vmov	r0, s0
 8019a88:	2200      	movs	r2, #0
 8019a8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019a8e:	4639      	mov	r1, r7
 8019a90:	f7e7 f838 	bl	8000b04 <__aeabi_dcmple>
 8019a94:	2800      	cmp	r0, #0
 8019a96:	d071      	beq.n	8019b7c <_strtod_l+0xa54>
 8019a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d17c      	bne.n	8019b98 <_strtod_l+0xa70>
 8019a9e:	f1b8 0f00 	cmp.w	r8, #0
 8019aa2:	d15a      	bne.n	8019b5a <_strtod_l+0xa32>
 8019aa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d15d      	bne.n	8019b68 <_strtod_l+0xa40>
 8019aac:	4b90      	ldr	r3, [pc, #576]	; (8019cf0 <_strtod_l+0xbc8>)
 8019aae:	2200      	movs	r2, #0
 8019ab0:	4630      	mov	r0, r6
 8019ab2:	4639      	mov	r1, r7
 8019ab4:	f7e7 f81c 	bl	8000af0 <__aeabi_dcmplt>
 8019ab8:	2800      	cmp	r0, #0
 8019aba:	d15c      	bne.n	8019b76 <_strtod_l+0xa4e>
 8019abc:	4630      	mov	r0, r6
 8019abe:	4639      	mov	r1, r7
 8019ac0:	4b8c      	ldr	r3, [pc, #560]	; (8019cf4 <_strtod_l+0xbcc>)
 8019ac2:	2200      	movs	r2, #0
 8019ac4:	f7e6 fda2 	bl	800060c <__aeabi_dmul>
 8019ac8:	4606      	mov	r6, r0
 8019aca:	460f      	mov	r7, r1
 8019acc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8019ad0:	9606      	str	r6, [sp, #24]
 8019ad2:	9307      	str	r3, [sp, #28]
 8019ad4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019ad8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019adc:	4b86      	ldr	r3, [pc, #536]	; (8019cf8 <_strtod_l+0xbd0>)
 8019ade:	ea0a 0303 	and.w	r3, sl, r3
 8019ae2:	930d      	str	r3, [sp, #52]	; 0x34
 8019ae4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019ae6:	4b85      	ldr	r3, [pc, #532]	; (8019cfc <_strtod_l+0xbd4>)
 8019ae8:	429a      	cmp	r2, r3
 8019aea:	f040 8090 	bne.w	8019c0e <_strtod_l+0xae6>
 8019aee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8019af2:	ec49 8b10 	vmov	d0, r8, r9
 8019af6:	f002 facd 	bl	801c094 <__ulp>
 8019afa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019afe:	ec51 0b10 	vmov	r0, r1, d0
 8019b02:	f7e6 fd83 	bl	800060c <__aeabi_dmul>
 8019b06:	4642      	mov	r2, r8
 8019b08:	464b      	mov	r3, r9
 8019b0a:	f7e6 fbc9 	bl	80002a0 <__adddf3>
 8019b0e:	460b      	mov	r3, r1
 8019b10:	4979      	ldr	r1, [pc, #484]	; (8019cf8 <_strtod_l+0xbd0>)
 8019b12:	4a7b      	ldr	r2, [pc, #492]	; (8019d00 <_strtod_l+0xbd8>)
 8019b14:	4019      	ands	r1, r3
 8019b16:	4291      	cmp	r1, r2
 8019b18:	4680      	mov	r8, r0
 8019b1a:	d944      	bls.n	8019ba6 <_strtod_l+0xa7e>
 8019b1c:	ee18 2a90 	vmov	r2, s17
 8019b20:	4b78      	ldr	r3, [pc, #480]	; (8019d04 <_strtod_l+0xbdc>)
 8019b22:	429a      	cmp	r2, r3
 8019b24:	d104      	bne.n	8019b30 <_strtod_l+0xa08>
 8019b26:	ee18 3a10 	vmov	r3, s16
 8019b2a:	3301      	adds	r3, #1
 8019b2c:	f43f ad40 	beq.w	80195b0 <_strtod_l+0x488>
 8019b30:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8019d04 <_strtod_l+0xbdc>
 8019b34:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019b38:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019b3a:	4620      	mov	r0, r4
 8019b3c:	f001 ff7e 	bl	801ba3c <_Bfree>
 8019b40:	9905      	ldr	r1, [sp, #20]
 8019b42:	4620      	mov	r0, r4
 8019b44:	f001 ff7a 	bl	801ba3c <_Bfree>
 8019b48:	4659      	mov	r1, fp
 8019b4a:	4620      	mov	r0, r4
 8019b4c:	f001 ff76 	bl	801ba3c <_Bfree>
 8019b50:	4629      	mov	r1, r5
 8019b52:	4620      	mov	r0, r4
 8019b54:	f001 ff72 	bl	801ba3c <_Bfree>
 8019b58:	e609      	b.n	801976e <_strtod_l+0x646>
 8019b5a:	f1b8 0f01 	cmp.w	r8, #1
 8019b5e:	d103      	bne.n	8019b68 <_strtod_l+0xa40>
 8019b60:	f1b9 0f00 	cmp.w	r9, #0
 8019b64:	f43f ad95 	beq.w	8019692 <_strtod_l+0x56a>
 8019b68:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8019cc0 <_strtod_l+0xb98>
 8019b6c:	4f60      	ldr	r7, [pc, #384]	; (8019cf0 <_strtod_l+0xbc8>)
 8019b6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019b72:	2600      	movs	r6, #0
 8019b74:	e7ae      	b.n	8019ad4 <_strtod_l+0x9ac>
 8019b76:	4f5f      	ldr	r7, [pc, #380]	; (8019cf4 <_strtod_l+0xbcc>)
 8019b78:	2600      	movs	r6, #0
 8019b7a:	e7a7      	b.n	8019acc <_strtod_l+0x9a4>
 8019b7c:	4b5d      	ldr	r3, [pc, #372]	; (8019cf4 <_strtod_l+0xbcc>)
 8019b7e:	4630      	mov	r0, r6
 8019b80:	4639      	mov	r1, r7
 8019b82:	2200      	movs	r2, #0
 8019b84:	f7e6 fd42 	bl	800060c <__aeabi_dmul>
 8019b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b8a:	4606      	mov	r6, r0
 8019b8c:	460f      	mov	r7, r1
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d09c      	beq.n	8019acc <_strtod_l+0x9a4>
 8019b92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8019b96:	e79d      	b.n	8019ad4 <_strtod_l+0x9ac>
 8019b98:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8019cc8 <_strtod_l+0xba0>
 8019b9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019ba0:	ec57 6b17 	vmov	r6, r7, d7
 8019ba4:	e796      	b.n	8019ad4 <_strtod_l+0x9ac>
 8019ba6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8019baa:	9b04      	ldr	r3, [sp, #16]
 8019bac:	46ca      	mov	sl, r9
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d1c2      	bne.n	8019b38 <_strtod_l+0xa10>
 8019bb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019bb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019bb8:	0d1b      	lsrs	r3, r3, #20
 8019bba:	051b      	lsls	r3, r3, #20
 8019bbc:	429a      	cmp	r2, r3
 8019bbe:	d1bb      	bne.n	8019b38 <_strtod_l+0xa10>
 8019bc0:	4630      	mov	r0, r6
 8019bc2:	4639      	mov	r1, r7
 8019bc4:	f7e7 f882 	bl	8000ccc <__aeabi_d2lz>
 8019bc8:	f7e6 fcf2 	bl	80005b0 <__aeabi_l2d>
 8019bcc:	4602      	mov	r2, r0
 8019bce:	460b      	mov	r3, r1
 8019bd0:	4630      	mov	r0, r6
 8019bd2:	4639      	mov	r1, r7
 8019bd4:	f7e6 fb62 	bl	800029c <__aeabi_dsub>
 8019bd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019bda:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019bde:	ea43 0308 	orr.w	r3, r3, r8
 8019be2:	4313      	orrs	r3, r2
 8019be4:	4606      	mov	r6, r0
 8019be6:	460f      	mov	r7, r1
 8019be8:	d054      	beq.n	8019c94 <_strtod_l+0xb6c>
 8019bea:	a339      	add	r3, pc, #228	; (adr r3, 8019cd0 <_strtod_l+0xba8>)
 8019bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bf0:	f7e6 ff7e 	bl	8000af0 <__aeabi_dcmplt>
 8019bf4:	2800      	cmp	r0, #0
 8019bf6:	f47f ace5 	bne.w	80195c4 <_strtod_l+0x49c>
 8019bfa:	a337      	add	r3, pc, #220	; (adr r3, 8019cd8 <_strtod_l+0xbb0>)
 8019bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c00:	4630      	mov	r0, r6
 8019c02:	4639      	mov	r1, r7
 8019c04:	f7e6 ff92 	bl	8000b2c <__aeabi_dcmpgt>
 8019c08:	2800      	cmp	r0, #0
 8019c0a:	d095      	beq.n	8019b38 <_strtod_l+0xa10>
 8019c0c:	e4da      	b.n	80195c4 <_strtod_l+0x49c>
 8019c0e:	9b04      	ldr	r3, [sp, #16]
 8019c10:	b333      	cbz	r3, 8019c60 <_strtod_l+0xb38>
 8019c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c14:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019c18:	d822      	bhi.n	8019c60 <_strtod_l+0xb38>
 8019c1a:	a331      	add	r3, pc, #196	; (adr r3, 8019ce0 <_strtod_l+0xbb8>)
 8019c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c20:	4630      	mov	r0, r6
 8019c22:	4639      	mov	r1, r7
 8019c24:	f7e6 ff6e 	bl	8000b04 <__aeabi_dcmple>
 8019c28:	b1a0      	cbz	r0, 8019c54 <_strtod_l+0xb2c>
 8019c2a:	4639      	mov	r1, r7
 8019c2c:	4630      	mov	r0, r6
 8019c2e:	f7e6 ffc5 	bl	8000bbc <__aeabi_d2uiz>
 8019c32:	2801      	cmp	r0, #1
 8019c34:	bf38      	it	cc
 8019c36:	2001      	movcc	r0, #1
 8019c38:	f7e6 fc6e 	bl	8000518 <__aeabi_ui2d>
 8019c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c3e:	4606      	mov	r6, r0
 8019c40:	460f      	mov	r7, r1
 8019c42:	bb23      	cbnz	r3, 8019c8e <_strtod_l+0xb66>
 8019c44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019c48:	9010      	str	r0, [sp, #64]	; 0x40
 8019c4a:	9311      	str	r3, [sp, #68]	; 0x44
 8019c4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019c50:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019c56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019c58:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8019c5c:	1a9b      	subs	r3, r3, r2
 8019c5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019c60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019c64:	eeb0 0a48 	vmov.f32	s0, s16
 8019c68:	eef0 0a68 	vmov.f32	s1, s17
 8019c6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8019c70:	f002 fa10 	bl	801c094 <__ulp>
 8019c74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019c78:	ec53 2b10 	vmov	r2, r3, d0
 8019c7c:	f7e6 fcc6 	bl	800060c <__aeabi_dmul>
 8019c80:	ec53 2b18 	vmov	r2, r3, d8
 8019c84:	f7e6 fb0c 	bl	80002a0 <__adddf3>
 8019c88:	4680      	mov	r8, r0
 8019c8a:	4689      	mov	r9, r1
 8019c8c:	e78d      	b.n	8019baa <_strtod_l+0xa82>
 8019c8e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8019c92:	e7db      	b.n	8019c4c <_strtod_l+0xb24>
 8019c94:	a314      	add	r3, pc, #80	; (adr r3, 8019ce8 <_strtod_l+0xbc0>)
 8019c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c9a:	f7e6 ff29 	bl	8000af0 <__aeabi_dcmplt>
 8019c9e:	e7b3      	b.n	8019c08 <_strtod_l+0xae0>
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8019ca4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019ca6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ca8:	6013      	str	r3, [r2, #0]
 8019caa:	f7ff ba7c 	b.w	80191a6 <_strtod_l+0x7e>
 8019cae:	2a65      	cmp	r2, #101	; 0x65
 8019cb0:	f43f ab75 	beq.w	801939e <_strtod_l+0x276>
 8019cb4:	2a45      	cmp	r2, #69	; 0x45
 8019cb6:	f43f ab72 	beq.w	801939e <_strtod_l+0x276>
 8019cba:	2301      	movs	r3, #1
 8019cbc:	f7ff bbaa 	b.w	8019414 <_strtod_l+0x2ec>
 8019cc0:	00000000 	.word	0x00000000
 8019cc4:	bff00000 	.word	0xbff00000
 8019cc8:	00000000 	.word	0x00000000
 8019ccc:	3ff00000 	.word	0x3ff00000
 8019cd0:	94a03595 	.word	0x94a03595
 8019cd4:	3fdfffff 	.word	0x3fdfffff
 8019cd8:	35afe535 	.word	0x35afe535
 8019cdc:	3fe00000 	.word	0x3fe00000
 8019ce0:	ffc00000 	.word	0xffc00000
 8019ce4:	41dfffff 	.word	0x41dfffff
 8019ce8:	94a03595 	.word	0x94a03595
 8019cec:	3fcfffff 	.word	0x3fcfffff
 8019cf0:	3ff00000 	.word	0x3ff00000
 8019cf4:	3fe00000 	.word	0x3fe00000
 8019cf8:	7ff00000 	.word	0x7ff00000
 8019cfc:	7fe00000 	.word	0x7fe00000
 8019d00:	7c9fffff 	.word	0x7c9fffff
 8019d04:	7fefffff 	.word	0x7fefffff

08019d08 <_strtod_r>:
 8019d08:	4b01      	ldr	r3, [pc, #4]	; (8019d10 <_strtod_r+0x8>)
 8019d0a:	f7ff ba0d 	b.w	8019128 <_strtod_l>
 8019d0e:	bf00      	nop
 8019d10:	20000038 	.word	0x20000038

08019d14 <_strtol_l.constprop.0>:
 8019d14:	2b01      	cmp	r3, #1
 8019d16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d1a:	d001      	beq.n	8019d20 <_strtol_l.constprop.0+0xc>
 8019d1c:	2b24      	cmp	r3, #36	; 0x24
 8019d1e:	d906      	bls.n	8019d2e <_strtol_l.constprop.0+0x1a>
 8019d20:	f000 f918 	bl	8019f54 <__errno>
 8019d24:	2316      	movs	r3, #22
 8019d26:	6003      	str	r3, [r0, #0]
 8019d28:	2000      	movs	r0, #0
 8019d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d2e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8019e14 <_strtol_l.constprop.0+0x100>
 8019d32:	460d      	mov	r5, r1
 8019d34:	462e      	mov	r6, r5
 8019d36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019d3a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8019d3e:	f017 0708 	ands.w	r7, r7, #8
 8019d42:	d1f7      	bne.n	8019d34 <_strtol_l.constprop.0+0x20>
 8019d44:	2c2d      	cmp	r4, #45	; 0x2d
 8019d46:	d132      	bne.n	8019dae <_strtol_l.constprop.0+0x9a>
 8019d48:	782c      	ldrb	r4, [r5, #0]
 8019d4a:	2701      	movs	r7, #1
 8019d4c:	1cb5      	adds	r5, r6, #2
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d05b      	beq.n	8019e0a <_strtol_l.constprop.0+0xf6>
 8019d52:	2b10      	cmp	r3, #16
 8019d54:	d109      	bne.n	8019d6a <_strtol_l.constprop.0+0x56>
 8019d56:	2c30      	cmp	r4, #48	; 0x30
 8019d58:	d107      	bne.n	8019d6a <_strtol_l.constprop.0+0x56>
 8019d5a:	782c      	ldrb	r4, [r5, #0]
 8019d5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019d60:	2c58      	cmp	r4, #88	; 0x58
 8019d62:	d14d      	bne.n	8019e00 <_strtol_l.constprop.0+0xec>
 8019d64:	786c      	ldrb	r4, [r5, #1]
 8019d66:	2310      	movs	r3, #16
 8019d68:	3502      	adds	r5, #2
 8019d6a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019d6e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8019d72:	f04f 0e00 	mov.w	lr, #0
 8019d76:	fbb8 f9f3 	udiv	r9, r8, r3
 8019d7a:	4676      	mov	r6, lr
 8019d7c:	fb03 8a19 	mls	sl, r3, r9, r8
 8019d80:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019d84:	f1bc 0f09 	cmp.w	ip, #9
 8019d88:	d816      	bhi.n	8019db8 <_strtol_l.constprop.0+0xa4>
 8019d8a:	4664      	mov	r4, ip
 8019d8c:	42a3      	cmp	r3, r4
 8019d8e:	dd24      	ble.n	8019dda <_strtol_l.constprop.0+0xc6>
 8019d90:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8019d94:	d008      	beq.n	8019da8 <_strtol_l.constprop.0+0x94>
 8019d96:	45b1      	cmp	r9, r6
 8019d98:	d31c      	bcc.n	8019dd4 <_strtol_l.constprop.0+0xc0>
 8019d9a:	d101      	bne.n	8019da0 <_strtol_l.constprop.0+0x8c>
 8019d9c:	45a2      	cmp	sl, r4
 8019d9e:	db19      	blt.n	8019dd4 <_strtol_l.constprop.0+0xc0>
 8019da0:	fb06 4603 	mla	r6, r6, r3, r4
 8019da4:	f04f 0e01 	mov.w	lr, #1
 8019da8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019dac:	e7e8      	b.n	8019d80 <_strtol_l.constprop.0+0x6c>
 8019dae:	2c2b      	cmp	r4, #43	; 0x2b
 8019db0:	bf04      	itt	eq
 8019db2:	782c      	ldrbeq	r4, [r5, #0]
 8019db4:	1cb5      	addeq	r5, r6, #2
 8019db6:	e7ca      	b.n	8019d4e <_strtol_l.constprop.0+0x3a>
 8019db8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019dbc:	f1bc 0f19 	cmp.w	ip, #25
 8019dc0:	d801      	bhi.n	8019dc6 <_strtol_l.constprop.0+0xb2>
 8019dc2:	3c37      	subs	r4, #55	; 0x37
 8019dc4:	e7e2      	b.n	8019d8c <_strtol_l.constprop.0+0x78>
 8019dc6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8019dca:	f1bc 0f19 	cmp.w	ip, #25
 8019dce:	d804      	bhi.n	8019dda <_strtol_l.constprop.0+0xc6>
 8019dd0:	3c57      	subs	r4, #87	; 0x57
 8019dd2:	e7db      	b.n	8019d8c <_strtol_l.constprop.0+0x78>
 8019dd4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8019dd8:	e7e6      	b.n	8019da8 <_strtol_l.constprop.0+0x94>
 8019dda:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8019dde:	d105      	bne.n	8019dec <_strtol_l.constprop.0+0xd8>
 8019de0:	2322      	movs	r3, #34	; 0x22
 8019de2:	6003      	str	r3, [r0, #0]
 8019de4:	4646      	mov	r6, r8
 8019de6:	b942      	cbnz	r2, 8019dfa <_strtol_l.constprop.0+0xe6>
 8019de8:	4630      	mov	r0, r6
 8019dea:	e79e      	b.n	8019d2a <_strtol_l.constprop.0+0x16>
 8019dec:	b107      	cbz	r7, 8019df0 <_strtol_l.constprop.0+0xdc>
 8019dee:	4276      	negs	r6, r6
 8019df0:	2a00      	cmp	r2, #0
 8019df2:	d0f9      	beq.n	8019de8 <_strtol_l.constprop.0+0xd4>
 8019df4:	f1be 0f00 	cmp.w	lr, #0
 8019df8:	d000      	beq.n	8019dfc <_strtol_l.constprop.0+0xe8>
 8019dfa:	1e69      	subs	r1, r5, #1
 8019dfc:	6011      	str	r1, [r2, #0]
 8019dfe:	e7f3      	b.n	8019de8 <_strtol_l.constprop.0+0xd4>
 8019e00:	2430      	movs	r4, #48	; 0x30
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d1b1      	bne.n	8019d6a <_strtol_l.constprop.0+0x56>
 8019e06:	2308      	movs	r3, #8
 8019e08:	e7af      	b.n	8019d6a <_strtol_l.constprop.0+0x56>
 8019e0a:	2c30      	cmp	r4, #48	; 0x30
 8019e0c:	d0a5      	beq.n	8019d5a <_strtol_l.constprop.0+0x46>
 8019e0e:	230a      	movs	r3, #10
 8019e10:	e7ab      	b.n	8019d6a <_strtol_l.constprop.0+0x56>
 8019e12:	bf00      	nop
 8019e14:	0801fbf1 	.word	0x0801fbf1

08019e18 <_strtol_r>:
 8019e18:	f7ff bf7c 	b.w	8019d14 <_strtol_l.constprop.0>

08019e1c <strtol>:
 8019e1c:	4613      	mov	r3, r2
 8019e1e:	460a      	mov	r2, r1
 8019e20:	4601      	mov	r1, r0
 8019e22:	4802      	ldr	r0, [pc, #8]	; (8019e2c <strtol+0x10>)
 8019e24:	6800      	ldr	r0, [r0, #0]
 8019e26:	f7ff bf75 	b.w	8019d14 <_strtol_l.constprop.0>
 8019e2a:	bf00      	nop
 8019e2c:	200001f0 	.word	0x200001f0

08019e30 <_fwalk_sglue>:
 8019e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e34:	4607      	mov	r7, r0
 8019e36:	4688      	mov	r8, r1
 8019e38:	4614      	mov	r4, r2
 8019e3a:	2600      	movs	r6, #0
 8019e3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019e40:	f1b9 0901 	subs.w	r9, r9, #1
 8019e44:	d505      	bpl.n	8019e52 <_fwalk_sglue+0x22>
 8019e46:	6824      	ldr	r4, [r4, #0]
 8019e48:	2c00      	cmp	r4, #0
 8019e4a:	d1f7      	bne.n	8019e3c <_fwalk_sglue+0xc>
 8019e4c:	4630      	mov	r0, r6
 8019e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e52:	89ab      	ldrh	r3, [r5, #12]
 8019e54:	2b01      	cmp	r3, #1
 8019e56:	d907      	bls.n	8019e68 <_fwalk_sglue+0x38>
 8019e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019e5c:	3301      	adds	r3, #1
 8019e5e:	d003      	beq.n	8019e68 <_fwalk_sglue+0x38>
 8019e60:	4629      	mov	r1, r5
 8019e62:	4638      	mov	r0, r7
 8019e64:	47c0      	blx	r8
 8019e66:	4306      	orrs	r6, r0
 8019e68:	3568      	adds	r5, #104	; 0x68
 8019e6a:	e7e9      	b.n	8019e40 <_fwalk_sglue+0x10>

08019e6c <strncmp>:
 8019e6c:	b510      	push	{r4, lr}
 8019e6e:	b16a      	cbz	r2, 8019e8c <strncmp+0x20>
 8019e70:	3901      	subs	r1, #1
 8019e72:	1884      	adds	r4, r0, r2
 8019e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019e7c:	429a      	cmp	r2, r3
 8019e7e:	d103      	bne.n	8019e88 <strncmp+0x1c>
 8019e80:	42a0      	cmp	r0, r4
 8019e82:	d001      	beq.n	8019e88 <strncmp+0x1c>
 8019e84:	2a00      	cmp	r2, #0
 8019e86:	d1f5      	bne.n	8019e74 <strncmp+0x8>
 8019e88:	1ad0      	subs	r0, r2, r3
 8019e8a:	bd10      	pop	{r4, pc}
 8019e8c:	4610      	mov	r0, r2
 8019e8e:	e7fc      	b.n	8019e8a <strncmp+0x1e>

08019e90 <memset>:
 8019e90:	4402      	add	r2, r0
 8019e92:	4603      	mov	r3, r0
 8019e94:	4293      	cmp	r3, r2
 8019e96:	d100      	bne.n	8019e9a <memset+0xa>
 8019e98:	4770      	bx	lr
 8019e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8019e9e:	e7f9      	b.n	8019e94 <memset+0x4>

08019ea0 <_localeconv_r>:
 8019ea0:	4800      	ldr	r0, [pc, #0]	; (8019ea4 <_localeconv_r+0x4>)
 8019ea2:	4770      	bx	lr
 8019ea4:	20000128 	.word	0x20000128

08019ea8 <_reclaim_reent>:
 8019ea8:	4b29      	ldr	r3, [pc, #164]	; (8019f50 <_reclaim_reent+0xa8>)
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	4283      	cmp	r3, r0
 8019eae:	b570      	push	{r4, r5, r6, lr}
 8019eb0:	4604      	mov	r4, r0
 8019eb2:	d04b      	beq.n	8019f4c <_reclaim_reent+0xa4>
 8019eb4:	69c3      	ldr	r3, [r0, #28]
 8019eb6:	b143      	cbz	r3, 8019eca <_reclaim_reent+0x22>
 8019eb8:	68db      	ldr	r3, [r3, #12]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d144      	bne.n	8019f48 <_reclaim_reent+0xa0>
 8019ebe:	69e3      	ldr	r3, [r4, #28]
 8019ec0:	6819      	ldr	r1, [r3, #0]
 8019ec2:	b111      	cbz	r1, 8019eca <_reclaim_reent+0x22>
 8019ec4:	4620      	mov	r0, r4
 8019ec6:	f000 ff09 	bl	801acdc <_free_r>
 8019eca:	6961      	ldr	r1, [r4, #20]
 8019ecc:	b111      	cbz	r1, 8019ed4 <_reclaim_reent+0x2c>
 8019ece:	4620      	mov	r0, r4
 8019ed0:	f000 ff04 	bl	801acdc <_free_r>
 8019ed4:	69e1      	ldr	r1, [r4, #28]
 8019ed6:	b111      	cbz	r1, 8019ede <_reclaim_reent+0x36>
 8019ed8:	4620      	mov	r0, r4
 8019eda:	f000 feff 	bl	801acdc <_free_r>
 8019ede:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019ee0:	b111      	cbz	r1, 8019ee8 <_reclaim_reent+0x40>
 8019ee2:	4620      	mov	r0, r4
 8019ee4:	f000 fefa 	bl	801acdc <_free_r>
 8019ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019eea:	b111      	cbz	r1, 8019ef2 <_reclaim_reent+0x4a>
 8019eec:	4620      	mov	r0, r4
 8019eee:	f000 fef5 	bl	801acdc <_free_r>
 8019ef2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019ef4:	b111      	cbz	r1, 8019efc <_reclaim_reent+0x54>
 8019ef6:	4620      	mov	r0, r4
 8019ef8:	f000 fef0 	bl	801acdc <_free_r>
 8019efc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019efe:	b111      	cbz	r1, 8019f06 <_reclaim_reent+0x5e>
 8019f00:	4620      	mov	r0, r4
 8019f02:	f000 feeb 	bl	801acdc <_free_r>
 8019f06:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019f08:	b111      	cbz	r1, 8019f10 <_reclaim_reent+0x68>
 8019f0a:	4620      	mov	r0, r4
 8019f0c:	f000 fee6 	bl	801acdc <_free_r>
 8019f10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8019f12:	b111      	cbz	r1, 8019f1a <_reclaim_reent+0x72>
 8019f14:	4620      	mov	r0, r4
 8019f16:	f000 fee1 	bl	801acdc <_free_r>
 8019f1a:	6a23      	ldr	r3, [r4, #32]
 8019f1c:	b1b3      	cbz	r3, 8019f4c <_reclaim_reent+0xa4>
 8019f1e:	4620      	mov	r0, r4
 8019f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f24:	4718      	bx	r3
 8019f26:	5949      	ldr	r1, [r1, r5]
 8019f28:	b941      	cbnz	r1, 8019f3c <_reclaim_reent+0x94>
 8019f2a:	3504      	adds	r5, #4
 8019f2c:	69e3      	ldr	r3, [r4, #28]
 8019f2e:	2d80      	cmp	r5, #128	; 0x80
 8019f30:	68d9      	ldr	r1, [r3, #12]
 8019f32:	d1f8      	bne.n	8019f26 <_reclaim_reent+0x7e>
 8019f34:	4620      	mov	r0, r4
 8019f36:	f000 fed1 	bl	801acdc <_free_r>
 8019f3a:	e7c0      	b.n	8019ebe <_reclaim_reent+0x16>
 8019f3c:	680e      	ldr	r6, [r1, #0]
 8019f3e:	4620      	mov	r0, r4
 8019f40:	f000 fecc 	bl	801acdc <_free_r>
 8019f44:	4631      	mov	r1, r6
 8019f46:	e7ef      	b.n	8019f28 <_reclaim_reent+0x80>
 8019f48:	2500      	movs	r5, #0
 8019f4a:	e7ef      	b.n	8019f2c <_reclaim_reent+0x84>
 8019f4c:	bd70      	pop	{r4, r5, r6, pc}
 8019f4e:	bf00      	nop
 8019f50:	200001f0 	.word	0x200001f0

08019f54 <__errno>:
 8019f54:	4b01      	ldr	r3, [pc, #4]	; (8019f5c <__errno+0x8>)
 8019f56:	6818      	ldr	r0, [r3, #0]
 8019f58:	4770      	bx	lr
 8019f5a:	bf00      	nop
 8019f5c:	200001f0 	.word	0x200001f0

08019f60 <__libc_init_array>:
 8019f60:	b570      	push	{r4, r5, r6, lr}
 8019f62:	4d0d      	ldr	r5, [pc, #52]	; (8019f98 <__libc_init_array+0x38>)
 8019f64:	4c0d      	ldr	r4, [pc, #52]	; (8019f9c <__libc_init_array+0x3c>)
 8019f66:	1b64      	subs	r4, r4, r5
 8019f68:	10a4      	asrs	r4, r4, #2
 8019f6a:	2600      	movs	r6, #0
 8019f6c:	42a6      	cmp	r6, r4
 8019f6e:	d109      	bne.n	8019f84 <__libc_init_array+0x24>
 8019f70:	4d0b      	ldr	r5, [pc, #44]	; (8019fa0 <__libc_init_array+0x40>)
 8019f72:	4c0c      	ldr	r4, [pc, #48]	; (8019fa4 <__libc_init_array+0x44>)
 8019f74:	f004 fb46 	bl	801e604 <_init>
 8019f78:	1b64      	subs	r4, r4, r5
 8019f7a:	10a4      	asrs	r4, r4, #2
 8019f7c:	2600      	movs	r6, #0
 8019f7e:	42a6      	cmp	r6, r4
 8019f80:	d105      	bne.n	8019f8e <__libc_init_array+0x2e>
 8019f82:	bd70      	pop	{r4, r5, r6, pc}
 8019f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f88:	4798      	blx	r3
 8019f8a:	3601      	adds	r6, #1
 8019f8c:	e7ee      	b.n	8019f6c <__libc_init_array+0xc>
 8019f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f92:	4798      	blx	r3
 8019f94:	3601      	adds	r6, #1
 8019f96:	e7f2      	b.n	8019f7e <__libc_init_array+0x1e>
 8019f98:	08020400 	.word	0x08020400
 8019f9c:	08020400 	.word	0x08020400
 8019fa0:	08020400 	.word	0x08020400
 8019fa4:	08020404 	.word	0x08020404

08019fa8 <__retarget_lock_acquire_recursive>:
 8019fa8:	4770      	bx	lr

08019faa <__retarget_lock_release_recursive>:
 8019faa:	4770      	bx	lr

08019fac <memcpy>:
 8019fac:	440a      	add	r2, r1
 8019fae:	4291      	cmp	r1, r2
 8019fb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019fb4:	d100      	bne.n	8019fb8 <memcpy+0xc>
 8019fb6:	4770      	bx	lr
 8019fb8:	b510      	push	{r4, lr}
 8019fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019fc2:	4291      	cmp	r1, r2
 8019fc4:	d1f9      	bne.n	8019fba <memcpy+0xe>
 8019fc6:	bd10      	pop	{r4, pc}

08019fc8 <nan>:
 8019fc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019fd0 <nan+0x8>
 8019fcc:	4770      	bx	lr
 8019fce:	bf00      	nop
 8019fd0:	00000000 	.word	0x00000000
 8019fd4:	7ff80000 	.word	0x7ff80000

08019fd8 <nanf>:
 8019fd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019fe0 <nanf+0x8>
 8019fdc:	4770      	bx	lr
 8019fde:	bf00      	nop
 8019fe0:	7fc00000 	.word	0x7fc00000

08019fe4 <quorem>:
 8019fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fe8:	6903      	ldr	r3, [r0, #16]
 8019fea:	690c      	ldr	r4, [r1, #16]
 8019fec:	42a3      	cmp	r3, r4
 8019fee:	4607      	mov	r7, r0
 8019ff0:	db7e      	blt.n	801a0f0 <quorem+0x10c>
 8019ff2:	3c01      	subs	r4, #1
 8019ff4:	f101 0814 	add.w	r8, r1, #20
 8019ff8:	f100 0514 	add.w	r5, r0, #20
 8019ffc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a000:	9301      	str	r3, [sp, #4]
 801a002:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a006:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a00a:	3301      	adds	r3, #1
 801a00c:	429a      	cmp	r2, r3
 801a00e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a012:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a016:	fbb2 f6f3 	udiv	r6, r2, r3
 801a01a:	d331      	bcc.n	801a080 <quorem+0x9c>
 801a01c:	f04f 0e00 	mov.w	lr, #0
 801a020:	4640      	mov	r0, r8
 801a022:	46ac      	mov	ip, r5
 801a024:	46f2      	mov	sl, lr
 801a026:	f850 2b04 	ldr.w	r2, [r0], #4
 801a02a:	b293      	uxth	r3, r2
 801a02c:	fb06 e303 	mla	r3, r6, r3, lr
 801a030:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a034:	0c1a      	lsrs	r2, r3, #16
 801a036:	b29b      	uxth	r3, r3
 801a038:	ebaa 0303 	sub.w	r3, sl, r3
 801a03c:	f8dc a000 	ldr.w	sl, [ip]
 801a040:	fa13 f38a 	uxtah	r3, r3, sl
 801a044:	fb06 220e 	mla	r2, r6, lr, r2
 801a048:	9300      	str	r3, [sp, #0]
 801a04a:	9b00      	ldr	r3, [sp, #0]
 801a04c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a050:	b292      	uxth	r2, r2
 801a052:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a056:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a05a:	f8bd 3000 	ldrh.w	r3, [sp]
 801a05e:	4581      	cmp	r9, r0
 801a060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a064:	f84c 3b04 	str.w	r3, [ip], #4
 801a068:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a06c:	d2db      	bcs.n	801a026 <quorem+0x42>
 801a06e:	f855 300b 	ldr.w	r3, [r5, fp]
 801a072:	b92b      	cbnz	r3, 801a080 <quorem+0x9c>
 801a074:	9b01      	ldr	r3, [sp, #4]
 801a076:	3b04      	subs	r3, #4
 801a078:	429d      	cmp	r5, r3
 801a07a:	461a      	mov	r2, r3
 801a07c:	d32c      	bcc.n	801a0d8 <quorem+0xf4>
 801a07e:	613c      	str	r4, [r7, #16]
 801a080:	4638      	mov	r0, r7
 801a082:	f001 ff61 	bl	801bf48 <__mcmp>
 801a086:	2800      	cmp	r0, #0
 801a088:	db22      	blt.n	801a0d0 <quorem+0xec>
 801a08a:	3601      	adds	r6, #1
 801a08c:	4629      	mov	r1, r5
 801a08e:	2000      	movs	r0, #0
 801a090:	f858 2b04 	ldr.w	r2, [r8], #4
 801a094:	f8d1 c000 	ldr.w	ip, [r1]
 801a098:	b293      	uxth	r3, r2
 801a09a:	1ac3      	subs	r3, r0, r3
 801a09c:	0c12      	lsrs	r2, r2, #16
 801a09e:	fa13 f38c 	uxtah	r3, r3, ip
 801a0a2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801a0a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a0aa:	b29b      	uxth	r3, r3
 801a0ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a0b0:	45c1      	cmp	r9, r8
 801a0b2:	f841 3b04 	str.w	r3, [r1], #4
 801a0b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a0ba:	d2e9      	bcs.n	801a090 <quorem+0xac>
 801a0bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a0c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a0c4:	b922      	cbnz	r2, 801a0d0 <quorem+0xec>
 801a0c6:	3b04      	subs	r3, #4
 801a0c8:	429d      	cmp	r5, r3
 801a0ca:	461a      	mov	r2, r3
 801a0cc:	d30a      	bcc.n	801a0e4 <quorem+0x100>
 801a0ce:	613c      	str	r4, [r7, #16]
 801a0d0:	4630      	mov	r0, r6
 801a0d2:	b003      	add	sp, #12
 801a0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0d8:	6812      	ldr	r2, [r2, #0]
 801a0da:	3b04      	subs	r3, #4
 801a0dc:	2a00      	cmp	r2, #0
 801a0de:	d1ce      	bne.n	801a07e <quorem+0x9a>
 801a0e0:	3c01      	subs	r4, #1
 801a0e2:	e7c9      	b.n	801a078 <quorem+0x94>
 801a0e4:	6812      	ldr	r2, [r2, #0]
 801a0e6:	3b04      	subs	r3, #4
 801a0e8:	2a00      	cmp	r2, #0
 801a0ea:	d1f0      	bne.n	801a0ce <quorem+0xea>
 801a0ec:	3c01      	subs	r4, #1
 801a0ee:	e7eb      	b.n	801a0c8 <quorem+0xe4>
 801a0f0:	2000      	movs	r0, #0
 801a0f2:	e7ee      	b.n	801a0d2 <quorem+0xee>
 801a0f4:	0000      	movs	r0, r0
	...

0801a0f8 <_dtoa_r>:
 801a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0fc:	ed2d 8b04 	vpush	{d8-d9}
 801a100:	69c5      	ldr	r5, [r0, #28]
 801a102:	b093      	sub	sp, #76	; 0x4c
 801a104:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a108:	ec57 6b10 	vmov	r6, r7, d0
 801a10c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a110:	9107      	str	r1, [sp, #28]
 801a112:	4604      	mov	r4, r0
 801a114:	920a      	str	r2, [sp, #40]	; 0x28
 801a116:	930d      	str	r3, [sp, #52]	; 0x34
 801a118:	b975      	cbnz	r5, 801a138 <_dtoa_r+0x40>
 801a11a:	2010      	movs	r0, #16
 801a11c:	f001 fada 	bl	801b6d4 <malloc>
 801a120:	4602      	mov	r2, r0
 801a122:	61e0      	str	r0, [r4, #28]
 801a124:	b920      	cbnz	r0, 801a130 <_dtoa_r+0x38>
 801a126:	4bae      	ldr	r3, [pc, #696]	; (801a3e0 <_dtoa_r+0x2e8>)
 801a128:	21ef      	movs	r1, #239	; 0xef
 801a12a:	48ae      	ldr	r0, [pc, #696]	; (801a3e4 <_dtoa_r+0x2ec>)
 801a12c:	f002 f9e2 	bl	801c4f4 <__assert_func>
 801a130:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a134:	6005      	str	r5, [r0, #0]
 801a136:	60c5      	str	r5, [r0, #12]
 801a138:	69e3      	ldr	r3, [r4, #28]
 801a13a:	6819      	ldr	r1, [r3, #0]
 801a13c:	b151      	cbz	r1, 801a154 <_dtoa_r+0x5c>
 801a13e:	685a      	ldr	r2, [r3, #4]
 801a140:	604a      	str	r2, [r1, #4]
 801a142:	2301      	movs	r3, #1
 801a144:	4093      	lsls	r3, r2
 801a146:	608b      	str	r3, [r1, #8]
 801a148:	4620      	mov	r0, r4
 801a14a:	f001 fc77 	bl	801ba3c <_Bfree>
 801a14e:	69e3      	ldr	r3, [r4, #28]
 801a150:	2200      	movs	r2, #0
 801a152:	601a      	str	r2, [r3, #0]
 801a154:	1e3b      	subs	r3, r7, #0
 801a156:	bfbb      	ittet	lt
 801a158:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a15c:	9303      	strlt	r3, [sp, #12]
 801a15e:	2300      	movge	r3, #0
 801a160:	2201      	movlt	r2, #1
 801a162:	bfac      	ite	ge
 801a164:	f8c8 3000 	strge.w	r3, [r8]
 801a168:	f8c8 2000 	strlt.w	r2, [r8]
 801a16c:	4b9e      	ldr	r3, [pc, #632]	; (801a3e8 <_dtoa_r+0x2f0>)
 801a16e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801a172:	ea33 0308 	bics.w	r3, r3, r8
 801a176:	d11b      	bne.n	801a1b0 <_dtoa_r+0xb8>
 801a178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a17a:	f242 730f 	movw	r3, #9999	; 0x270f
 801a17e:	6013      	str	r3, [r2, #0]
 801a180:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801a184:	4333      	orrs	r3, r6
 801a186:	f000 8593 	beq.w	801acb0 <_dtoa_r+0xbb8>
 801a18a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a18c:	b963      	cbnz	r3, 801a1a8 <_dtoa_r+0xb0>
 801a18e:	4b97      	ldr	r3, [pc, #604]	; (801a3ec <_dtoa_r+0x2f4>)
 801a190:	e027      	b.n	801a1e2 <_dtoa_r+0xea>
 801a192:	4b97      	ldr	r3, [pc, #604]	; (801a3f0 <_dtoa_r+0x2f8>)
 801a194:	9300      	str	r3, [sp, #0]
 801a196:	3308      	adds	r3, #8
 801a198:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a19a:	6013      	str	r3, [r2, #0]
 801a19c:	9800      	ldr	r0, [sp, #0]
 801a19e:	b013      	add	sp, #76	; 0x4c
 801a1a0:	ecbd 8b04 	vpop	{d8-d9}
 801a1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1a8:	4b90      	ldr	r3, [pc, #576]	; (801a3ec <_dtoa_r+0x2f4>)
 801a1aa:	9300      	str	r3, [sp, #0]
 801a1ac:	3303      	adds	r3, #3
 801a1ae:	e7f3      	b.n	801a198 <_dtoa_r+0xa0>
 801a1b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a1b4:	2200      	movs	r2, #0
 801a1b6:	ec51 0b17 	vmov	r0, r1, d7
 801a1ba:	eeb0 8a47 	vmov.f32	s16, s14
 801a1be:	eef0 8a67 	vmov.f32	s17, s15
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	f7e6 fc8a 	bl	8000adc <__aeabi_dcmpeq>
 801a1c8:	4681      	mov	r9, r0
 801a1ca:	b160      	cbz	r0, 801a1e6 <_dtoa_r+0xee>
 801a1cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a1ce:	2301      	movs	r3, #1
 801a1d0:	6013      	str	r3, [r2, #0]
 801a1d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	f000 8568 	beq.w	801acaa <_dtoa_r+0xbb2>
 801a1da:	4b86      	ldr	r3, [pc, #536]	; (801a3f4 <_dtoa_r+0x2fc>)
 801a1dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a1de:	6013      	str	r3, [r2, #0]
 801a1e0:	3b01      	subs	r3, #1
 801a1e2:	9300      	str	r3, [sp, #0]
 801a1e4:	e7da      	b.n	801a19c <_dtoa_r+0xa4>
 801a1e6:	aa10      	add	r2, sp, #64	; 0x40
 801a1e8:	a911      	add	r1, sp, #68	; 0x44
 801a1ea:	4620      	mov	r0, r4
 801a1ec:	eeb0 0a48 	vmov.f32	s0, s16
 801a1f0:	eef0 0a68 	vmov.f32	s1, s17
 801a1f4:	f001 ffbe 	bl	801c174 <__d2b>
 801a1f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801a1fc:	4682      	mov	sl, r0
 801a1fe:	2d00      	cmp	r5, #0
 801a200:	d07f      	beq.n	801a302 <_dtoa_r+0x20a>
 801a202:	ee18 3a90 	vmov	r3, s17
 801a206:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a20a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801a20e:	ec51 0b18 	vmov	r0, r1, d8
 801a212:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a216:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a21a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801a21e:	4619      	mov	r1, r3
 801a220:	2200      	movs	r2, #0
 801a222:	4b75      	ldr	r3, [pc, #468]	; (801a3f8 <_dtoa_r+0x300>)
 801a224:	f7e6 f83a 	bl	800029c <__aeabi_dsub>
 801a228:	a367      	add	r3, pc, #412	; (adr r3, 801a3c8 <_dtoa_r+0x2d0>)
 801a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a22e:	f7e6 f9ed 	bl	800060c <__aeabi_dmul>
 801a232:	a367      	add	r3, pc, #412	; (adr r3, 801a3d0 <_dtoa_r+0x2d8>)
 801a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a238:	f7e6 f832 	bl	80002a0 <__adddf3>
 801a23c:	4606      	mov	r6, r0
 801a23e:	4628      	mov	r0, r5
 801a240:	460f      	mov	r7, r1
 801a242:	f7e6 f979 	bl	8000538 <__aeabi_i2d>
 801a246:	a364      	add	r3, pc, #400	; (adr r3, 801a3d8 <_dtoa_r+0x2e0>)
 801a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a24c:	f7e6 f9de 	bl	800060c <__aeabi_dmul>
 801a250:	4602      	mov	r2, r0
 801a252:	460b      	mov	r3, r1
 801a254:	4630      	mov	r0, r6
 801a256:	4639      	mov	r1, r7
 801a258:	f7e6 f822 	bl	80002a0 <__adddf3>
 801a25c:	4606      	mov	r6, r0
 801a25e:	460f      	mov	r7, r1
 801a260:	f7e6 fc84 	bl	8000b6c <__aeabi_d2iz>
 801a264:	2200      	movs	r2, #0
 801a266:	4683      	mov	fp, r0
 801a268:	2300      	movs	r3, #0
 801a26a:	4630      	mov	r0, r6
 801a26c:	4639      	mov	r1, r7
 801a26e:	f7e6 fc3f 	bl	8000af0 <__aeabi_dcmplt>
 801a272:	b148      	cbz	r0, 801a288 <_dtoa_r+0x190>
 801a274:	4658      	mov	r0, fp
 801a276:	f7e6 f95f 	bl	8000538 <__aeabi_i2d>
 801a27a:	4632      	mov	r2, r6
 801a27c:	463b      	mov	r3, r7
 801a27e:	f7e6 fc2d 	bl	8000adc <__aeabi_dcmpeq>
 801a282:	b908      	cbnz	r0, 801a288 <_dtoa_r+0x190>
 801a284:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a288:	f1bb 0f16 	cmp.w	fp, #22
 801a28c:	d857      	bhi.n	801a33e <_dtoa_r+0x246>
 801a28e:	4b5b      	ldr	r3, [pc, #364]	; (801a3fc <_dtoa_r+0x304>)
 801a290:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a298:	ec51 0b18 	vmov	r0, r1, d8
 801a29c:	f7e6 fc28 	bl	8000af0 <__aeabi_dcmplt>
 801a2a0:	2800      	cmp	r0, #0
 801a2a2:	d04e      	beq.n	801a342 <_dtoa_r+0x24a>
 801a2a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a2a8:	2300      	movs	r3, #0
 801a2aa:	930c      	str	r3, [sp, #48]	; 0x30
 801a2ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a2ae:	1b5b      	subs	r3, r3, r5
 801a2b0:	1e5a      	subs	r2, r3, #1
 801a2b2:	bf45      	ittet	mi
 801a2b4:	f1c3 0301 	rsbmi	r3, r3, #1
 801a2b8:	9305      	strmi	r3, [sp, #20]
 801a2ba:	2300      	movpl	r3, #0
 801a2bc:	2300      	movmi	r3, #0
 801a2be:	9206      	str	r2, [sp, #24]
 801a2c0:	bf54      	ite	pl
 801a2c2:	9305      	strpl	r3, [sp, #20]
 801a2c4:	9306      	strmi	r3, [sp, #24]
 801a2c6:	f1bb 0f00 	cmp.w	fp, #0
 801a2ca:	db3c      	blt.n	801a346 <_dtoa_r+0x24e>
 801a2cc:	9b06      	ldr	r3, [sp, #24]
 801a2ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801a2d2:	445b      	add	r3, fp
 801a2d4:	9306      	str	r3, [sp, #24]
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	9308      	str	r3, [sp, #32]
 801a2da:	9b07      	ldr	r3, [sp, #28]
 801a2dc:	2b09      	cmp	r3, #9
 801a2de:	d868      	bhi.n	801a3b2 <_dtoa_r+0x2ba>
 801a2e0:	2b05      	cmp	r3, #5
 801a2e2:	bfc4      	itt	gt
 801a2e4:	3b04      	subgt	r3, #4
 801a2e6:	9307      	strgt	r3, [sp, #28]
 801a2e8:	9b07      	ldr	r3, [sp, #28]
 801a2ea:	f1a3 0302 	sub.w	r3, r3, #2
 801a2ee:	bfcc      	ite	gt
 801a2f0:	2500      	movgt	r5, #0
 801a2f2:	2501      	movle	r5, #1
 801a2f4:	2b03      	cmp	r3, #3
 801a2f6:	f200 8085 	bhi.w	801a404 <_dtoa_r+0x30c>
 801a2fa:	e8df f003 	tbb	[pc, r3]
 801a2fe:	3b2e      	.short	0x3b2e
 801a300:	5839      	.short	0x5839
 801a302:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801a306:	441d      	add	r5, r3
 801a308:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801a30c:	2b20      	cmp	r3, #32
 801a30e:	bfc1      	itttt	gt
 801a310:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a314:	fa08 f803 	lslgt.w	r8, r8, r3
 801a318:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801a31c:	fa26 f303 	lsrgt.w	r3, r6, r3
 801a320:	bfd6      	itet	le
 801a322:	f1c3 0320 	rsble	r3, r3, #32
 801a326:	ea48 0003 	orrgt.w	r0, r8, r3
 801a32a:	fa06 f003 	lslle.w	r0, r6, r3
 801a32e:	f7e6 f8f3 	bl	8000518 <__aeabi_ui2d>
 801a332:	2201      	movs	r2, #1
 801a334:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801a338:	3d01      	subs	r5, #1
 801a33a:	920e      	str	r2, [sp, #56]	; 0x38
 801a33c:	e76f      	b.n	801a21e <_dtoa_r+0x126>
 801a33e:	2301      	movs	r3, #1
 801a340:	e7b3      	b.n	801a2aa <_dtoa_r+0x1b2>
 801a342:	900c      	str	r0, [sp, #48]	; 0x30
 801a344:	e7b2      	b.n	801a2ac <_dtoa_r+0x1b4>
 801a346:	9b05      	ldr	r3, [sp, #20]
 801a348:	eba3 030b 	sub.w	r3, r3, fp
 801a34c:	9305      	str	r3, [sp, #20]
 801a34e:	f1cb 0300 	rsb	r3, fp, #0
 801a352:	9308      	str	r3, [sp, #32]
 801a354:	2300      	movs	r3, #0
 801a356:	930b      	str	r3, [sp, #44]	; 0x2c
 801a358:	e7bf      	b.n	801a2da <_dtoa_r+0x1e2>
 801a35a:	2300      	movs	r3, #0
 801a35c:	9309      	str	r3, [sp, #36]	; 0x24
 801a35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a360:	2b00      	cmp	r3, #0
 801a362:	dc52      	bgt.n	801a40a <_dtoa_r+0x312>
 801a364:	2301      	movs	r3, #1
 801a366:	9301      	str	r3, [sp, #4]
 801a368:	9304      	str	r3, [sp, #16]
 801a36a:	461a      	mov	r2, r3
 801a36c:	920a      	str	r2, [sp, #40]	; 0x28
 801a36e:	e00b      	b.n	801a388 <_dtoa_r+0x290>
 801a370:	2301      	movs	r3, #1
 801a372:	e7f3      	b.n	801a35c <_dtoa_r+0x264>
 801a374:	2300      	movs	r3, #0
 801a376:	9309      	str	r3, [sp, #36]	; 0x24
 801a378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a37a:	445b      	add	r3, fp
 801a37c:	9301      	str	r3, [sp, #4]
 801a37e:	3301      	adds	r3, #1
 801a380:	2b01      	cmp	r3, #1
 801a382:	9304      	str	r3, [sp, #16]
 801a384:	bfb8      	it	lt
 801a386:	2301      	movlt	r3, #1
 801a388:	69e0      	ldr	r0, [r4, #28]
 801a38a:	2100      	movs	r1, #0
 801a38c:	2204      	movs	r2, #4
 801a38e:	f102 0614 	add.w	r6, r2, #20
 801a392:	429e      	cmp	r6, r3
 801a394:	d93d      	bls.n	801a412 <_dtoa_r+0x31a>
 801a396:	6041      	str	r1, [r0, #4]
 801a398:	4620      	mov	r0, r4
 801a39a:	f001 fb0f 	bl	801b9bc <_Balloc>
 801a39e:	9000      	str	r0, [sp, #0]
 801a3a0:	2800      	cmp	r0, #0
 801a3a2:	d139      	bne.n	801a418 <_dtoa_r+0x320>
 801a3a4:	4b16      	ldr	r3, [pc, #88]	; (801a400 <_dtoa_r+0x308>)
 801a3a6:	4602      	mov	r2, r0
 801a3a8:	f240 11af 	movw	r1, #431	; 0x1af
 801a3ac:	e6bd      	b.n	801a12a <_dtoa_r+0x32>
 801a3ae:	2301      	movs	r3, #1
 801a3b0:	e7e1      	b.n	801a376 <_dtoa_r+0x27e>
 801a3b2:	2501      	movs	r5, #1
 801a3b4:	2300      	movs	r3, #0
 801a3b6:	9307      	str	r3, [sp, #28]
 801a3b8:	9509      	str	r5, [sp, #36]	; 0x24
 801a3ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a3be:	9301      	str	r3, [sp, #4]
 801a3c0:	9304      	str	r3, [sp, #16]
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	2312      	movs	r3, #18
 801a3c6:	e7d1      	b.n	801a36c <_dtoa_r+0x274>
 801a3c8:	636f4361 	.word	0x636f4361
 801a3cc:	3fd287a7 	.word	0x3fd287a7
 801a3d0:	8b60c8b3 	.word	0x8b60c8b3
 801a3d4:	3fc68a28 	.word	0x3fc68a28
 801a3d8:	509f79fb 	.word	0x509f79fb
 801a3dc:	3fd34413 	.word	0x3fd34413
 801a3e0:	0801fcfe 	.word	0x0801fcfe
 801a3e4:	0801fd15 	.word	0x0801fd15
 801a3e8:	7ff00000 	.word	0x7ff00000
 801a3ec:	0801fcfa 	.word	0x0801fcfa
 801a3f0:	0801fcf1 	.word	0x0801fcf1
 801a3f4:	0801fb69 	.word	0x0801fb69
 801a3f8:	3ff80000 	.word	0x3ff80000
 801a3fc:	0801fe70 	.word	0x0801fe70
 801a400:	0801fd6d 	.word	0x0801fd6d
 801a404:	2301      	movs	r3, #1
 801a406:	9309      	str	r3, [sp, #36]	; 0x24
 801a408:	e7d7      	b.n	801a3ba <_dtoa_r+0x2c2>
 801a40a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a40c:	9301      	str	r3, [sp, #4]
 801a40e:	9304      	str	r3, [sp, #16]
 801a410:	e7ba      	b.n	801a388 <_dtoa_r+0x290>
 801a412:	3101      	adds	r1, #1
 801a414:	0052      	lsls	r2, r2, #1
 801a416:	e7ba      	b.n	801a38e <_dtoa_r+0x296>
 801a418:	69e3      	ldr	r3, [r4, #28]
 801a41a:	9a00      	ldr	r2, [sp, #0]
 801a41c:	601a      	str	r2, [r3, #0]
 801a41e:	9b04      	ldr	r3, [sp, #16]
 801a420:	2b0e      	cmp	r3, #14
 801a422:	f200 80a8 	bhi.w	801a576 <_dtoa_r+0x47e>
 801a426:	2d00      	cmp	r5, #0
 801a428:	f000 80a5 	beq.w	801a576 <_dtoa_r+0x47e>
 801a42c:	f1bb 0f00 	cmp.w	fp, #0
 801a430:	dd38      	ble.n	801a4a4 <_dtoa_r+0x3ac>
 801a432:	4bc0      	ldr	r3, [pc, #768]	; (801a734 <_dtoa_r+0x63c>)
 801a434:	f00b 020f 	and.w	r2, fp, #15
 801a438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a43c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a440:	e9d3 6700 	ldrd	r6, r7, [r3]
 801a444:	ea4f 182b 	mov.w	r8, fp, asr #4
 801a448:	d019      	beq.n	801a47e <_dtoa_r+0x386>
 801a44a:	4bbb      	ldr	r3, [pc, #748]	; (801a738 <_dtoa_r+0x640>)
 801a44c:	ec51 0b18 	vmov	r0, r1, d8
 801a450:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a454:	f7e6 fa04 	bl	8000860 <__aeabi_ddiv>
 801a458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a45c:	f008 080f 	and.w	r8, r8, #15
 801a460:	2503      	movs	r5, #3
 801a462:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801a738 <_dtoa_r+0x640>
 801a466:	f1b8 0f00 	cmp.w	r8, #0
 801a46a:	d10a      	bne.n	801a482 <_dtoa_r+0x38a>
 801a46c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a470:	4632      	mov	r2, r6
 801a472:	463b      	mov	r3, r7
 801a474:	f7e6 f9f4 	bl	8000860 <__aeabi_ddiv>
 801a478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a47c:	e02b      	b.n	801a4d6 <_dtoa_r+0x3de>
 801a47e:	2502      	movs	r5, #2
 801a480:	e7ef      	b.n	801a462 <_dtoa_r+0x36a>
 801a482:	f018 0f01 	tst.w	r8, #1
 801a486:	d008      	beq.n	801a49a <_dtoa_r+0x3a2>
 801a488:	4630      	mov	r0, r6
 801a48a:	4639      	mov	r1, r7
 801a48c:	e9d9 2300 	ldrd	r2, r3, [r9]
 801a490:	f7e6 f8bc 	bl	800060c <__aeabi_dmul>
 801a494:	3501      	adds	r5, #1
 801a496:	4606      	mov	r6, r0
 801a498:	460f      	mov	r7, r1
 801a49a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a49e:	f109 0908 	add.w	r9, r9, #8
 801a4a2:	e7e0      	b.n	801a466 <_dtoa_r+0x36e>
 801a4a4:	f000 809f 	beq.w	801a5e6 <_dtoa_r+0x4ee>
 801a4a8:	f1cb 0600 	rsb	r6, fp, #0
 801a4ac:	4ba1      	ldr	r3, [pc, #644]	; (801a734 <_dtoa_r+0x63c>)
 801a4ae:	4fa2      	ldr	r7, [pc, #648]	; (801a738 <_dtoa_r+0x640>)
 801a4b0:	f006 020f 	and.w	r2, r6, #15
 801a4b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4bc:	ec51 0b18 	vmov	r0, r1, d8
 801a4c0:	f7e6 f8a4 	bl	800060c <__aeabi_dmul>
 801a4c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a4c8:	1136      	asrs	r6, r6, #4
 801a4ca:	2300      	movs	r3, #0
 801a4cc:	2502      	movs	r5, #2
 801a4ce:	2e00      	cmp	r6, #0
 801a4d0:	d17e      	bne.n	801a5d0 <_dtoa_r+0x4d8>
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d1d0      	bne.n	801a478 <_dtoa_r+0x380>
 801a4d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	f000 8084 	beq.w	801a5ea <_dtoa_r+0x4f2>
 801a4e2:	4b96      	ldr	r3, [pc, #600]	; (801a73c <_dtoa_r+0x644>)
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	4640      	mov	r0, r8
 801a4e8:	4649      	mov	r1, r9
 801a4ea:	f7e6 fb01 	bl	8000af0 <__aeabi_dcmplt>
 801a4ee:	2800      	cmp	r0, #0
 801a4f0:	d07b      	beq.n	801a5ea <_dtoa_r+0x4f2>
 801a4f2:	9b04      	ldr	r3, [sp, #16]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d078      	beq.n	801a5ea <_dtoa_r+0x4f2>
 801a4f8:	9b01      	ldr	r3, [sp, #4]
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	dd39      	ble.n	801a572 <_dtoa_r+0x47a>
 801a4fe:	4b90      	ldr	r3, [pc, #576]	; (801a740 <_dtoa_r+0x648>)
 801a500:	2200      	movs	r2, #0
 801a502:	4640      	mov	r0, r8
 801a504:	4649      	mov	r1, r9
 801a506:	f7e6 f881 	bl	800060c <__aeabi_dmul>
 801a50a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a50e:	9e01      	ldr	r6, [sp, #4]
 801a510:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801a514:	3501      	adds	r5, #1
 801a516:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801a51a:	4628      	mov	r0, r5
 801a51c:	f7e6 f80c 	bl	8000538 <__aeabi_i2d>
 801a520:	4642      	mov	r2, r8
 801a522:	464b      	mov	r3, r9
 801a524:	f7e6 f872 	bl	800060c <__aeabi_dmul>
 801a528:	4b86      	ldr	r3, [pc, #536]	; (801a744 <_dtoa_r+0x64c>)
 801a52a:	2200      	movs	r2, #0
 801a52c:	f7e5 feb8 	bl	80002a0 <__adddf3>
 801a530:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801a534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a538:	9303      	str	r3, [sp, #12]
 801a53a:	2e00      	cmp	r6, #0
 801a53c:	d158      	bne.n	801a5f0 <_dtoa_r+0x4f8>
 801a53e:	4b82      	ldr	r3, [pc, #520]	; (801a748 <_dtoa_r+0x650>)
 801a540:	2200      	movs	r2, #0
 801a542:	4640      	mov	r0, r8
 801a544:	4649      	mov	r1, r9
 801a546:	f7e5 fea9 	bl	800029c <__aeabi_dsub>
 801a54a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a54e:	4680      	mov	r8, r0
 801a550:	4689      	mov	r9, r1
 801a552:	f7e6 faeb 	bl	8000b2c <__aeabi_dcmpgt>
 801a556:	2800      	cmp	r0, #0
 801a558:	f040 8296 	bne.w	801aa88 <_dtoa_r+0x990>
 801a55c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a560:	4640      	mov	r0, r8
 801a562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a566:	4649      	mov	r1, r9
 801a568:	f7e6 fac2 	bl	8000af0 <__aeabi_dcmplt>
 801a56c:	2800      	cmp	r0, #0
 801a56e:	f040 8289 	bne.w	801aa84 <_dtoa_r+0x98c>
 801a572:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a576:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a578:	2b00      	cmp	r3, #0
 801a57a:	f2c0 814e 	blt.w	801a81a <_dtoa_r+0x722>
 801a57e:	f1bb 0f0e 	cmp.w	fp, #14
 801a582:	f300 814a 	bgt.w	801a81a <_dtoa_r+0x722>
 801a586:	4b6b      	ldr	r3, [pc, #428]	; (801a734 <_dtoa_r+0x63c>)
 801a588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a58c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a592:	2b00      	cmp	r3, #0
 801a594:	f280 80dc 	bge.w	801a750 <_dtoa_r+0x658>
 801a598:	9b04      	ldr	r3, [sp, #16]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	f300 80d8 	bgt.w	801a750 <_dtoa_r+0x658>
 801a5a0:	f040 826f 	bne.w	801aa82 <_dtoa_r+0x98a>
 801a5a4:	4b68      	ldr	r3, [pc, #416]	; (801a748 <_dtoa_r+0x650>)
 801a5a6:	2200      	movs	r2, #0
 801a5a8:	4640      	mov	r0, r8
 801a5aa:	4649      	mov	r1, r9
 801a5ac:	f7e6 f82e 	bl	800060c <__aeabi_dmul>
 801a5b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a5b4:	f7e6 fab0 	bl	8000b18 <__aeabi_dcmpge>
 801a5b8:	9e04      	ldr	r6, [sp, #16]
 801a5ba:	4637      	mov	r7, r6
 801a5bc:	2800      	cmp	r0, #0
 801a5be:	f040 8245 	bne.w	801aa4c <_dtoa_r+0x954>
 801a5c2:	9d00      	ldr	r5, [sp, #0]
 801a5c4:	2331      	movs	r3, #49	; 0x31
 801a5c6:	f805 3b01 	strb.w	r3, [r5], #1
 801a5ca:	f10b 0b01 	add.w	fp, fp, #1
 801a5ce:	e241      	b.n	801aa54 <_dtoa_r+0x95c>
 801a5d0:	07f2      	lsls	r2, r6, #31
 801a5d2:	d505      	bpl.n	801a5e0 <_dtoa_r+0x4e8>
 801a5d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a5d8:	f7e6 f818 	bl	800060c <__aeabi_dmul>
 801a5dc:	3501      	adds	r5, #1
 801a5de:	2301      	movs	r3, #1
 801a5e0:	1076      	asrs	r6, r6, #1
 801a5e2:	3708      	adds	r7, #8
 801a5e4:	e773      	b.n	801a4ce <_dtoa_r+0x3d6>
 801a5e6:	2502      	movs	r5, #2
 801a5e8:	e775      	b.n	801a4d6 <_dtoa_r+0x3de>
 801a5ea:	9e04      	ldr	r6, [sp, #16]
 801a5ec:	465f      	mov	r7, fp
 801a5ee:	e792      	b.n	801a516 <_dtoa_r+0x41e>
 801a5f0:	9900      	ldr	r1, [sp, #0]
 801a5f2:	4b50      	ldr	r3, [pc, #320]	; (801a734 <_dtoa_r+0x63c>)
 801a5f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a5f8:	4431      	add	r1, r6
 801a5fa:	9102      	str	r1, [sp, #8]
 801a5fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a5fe:	eeb0 9a47 	vmov.f32	s18, s14
 801a602:	eef0 9a67 	vmov.f32	s19, s15
 801a606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801a60a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a60e:	2900      	cmp	r1, #0
 801a610:	d044      	beq.n	801a69c <_dtoa_r+0x5a4>
 801a612:	494e      	ldr	r1, [pc, #312]	; (801a74c <_dtoa_r+0x654>)
 801a614:	2000      	movs	r0, #0
 801a616:	f7e6 f923 	bl	8000860 <__aeabi_ddiv>
 801a61a:	ec53 2b19 	vmov	r2, r3, d9
 801a61e:	f7e5 fe3d 	bl	800029c <__aeabi_dsub>
 801a622:	9d00      	ldr	r5, [sp, #0]
 801a624:	ec41 0b19 	vmov	d9, r0, r1
 801a628:	4649      	mov	r1, r9
 801a62a:	4640      	mov	r0, r8
 801a62c:	f7e6 fa9e 	bl	8000b6c <__aeabi_d2iz>
 801a630:	4606      	mov	r6, r0
 801a632:	f7e5 ff81 	bl	8000538 <__aeabi_i2d>
 801a636:	4602      	mov	r2, r0
 801a638:	460b      	mov	r3, r1
 801a63a:	4640      	mov	r0, r8
 801a63c:	4649      	mov	r1, r9
 801a63e:	f7e5 fe2d 	bl	800029c <__aeabi_dsub>
 801a642:	3630      	adds	r6, #48	; 0x30
 801a644:	f805 6b01 	strb.w	r6, [r5], #1
 801a648:	ec53 2b19 	vmov	r2, r3, d9
 801a64c:	4680      	mov	r8, r0
 801a64e:	4689      	mov	r9, r1
 801a650:	f7e6 fa4e 	bl	8000af0 <__aeabi_dcmplt>
 801a654:	2800      	cmp	r0, #0
 801a656:	d164      	bne.n	801a722 <_dtoa_r+0x62a>
 801a658:	4642      	mov	r2, r8
 801a65a:	464b      	mov	r3, r9
 801a65c:	4937      	ldr	r1, [pc, #220]	; (801a73c <_dtoa_r+0x644>)
 801a65e:	2000      	movs	r0, #0
 801a660:	f7e5 fe1c 	bl	800029c <__aeabi_dsub>
 801a664:	ec53 2b19 	vmov	r2, r3, d9
 801a668:	f7e6 fa42 	bl	8000af0 <__aeabi_dcmplt>
 801a66c:	2800      	cmp	r0, #0
 801a66e:	f040 80b6 	bne.w	801a7de <_dtoa_r+0x6e6>
 801a672:	9b02      	ldr	r3, [sp, #8]
 801a674:	429d      	cmp	r5, r3
 801a676:	f43f af7c 	beq.w	801a572 <_dtoa_r+0x47a>
 801a67a:	4b31      	ldr	r3, [pc, #196]	; (801a740 <_dtoa_r+0x648>)
 801a67c:	ec51 0b19 	vmov	r0, r1, d9
 801a680:	2200      	movs	r2, #0
 801a682:	f7e5 ffc3 	bl	800060c <__aeabi_dmul>
 801a686:	4b2e      	ldr	r3, [pc, #184]	; (801a740 <_dtoa_r+0x648>)
 801a688:	ec41 0b19 	vmov	d9, r0, r1
 801a68c:	2200      	movs	r2, #0
 801a68e:	4640      	mov	r0, r8
 801a690:	4649      	mov	r1, r9
 801a692:	f7e5 ffbb 	bl	800060c <__aeabi_dmul>
 801a696:	4680      	mov	r8, r0
 801a698:	4689      	mov	r9, r1
 801a69a:	e7c5      	b.n	801a628 <_dtoa_r+0x530>
 801a69c:	ec51 0b17 	vmov	r0, r1, d7
 801a6a0:	f7e5 ffb4 	bl	800060c <__aeabi_dmul>
 801a6a4:	9b02      	ldr	r3, [sp, #8]
 801a6a6:	9d00      	ldr	r5, [sp, #0]
 801a6a8:	930f      	str	r3, [sp, #60]	; 0x3c
 801a6aa:	ec41 0b19 	vmov	d9, r0, r1
 801a6ae:	4649      	mov	r1, r9
 801a6b0:	4640      	mov	r0, r8
 801a6b2:	f7e6 fa5b 	bl	8000b6c <__aeabi_d2iz>
 801a6b6:	4606      	mov	r6, r0
 801a6b8:	f7e5 ff3e 	bl	8000538 <__aeabi_i2d>
 801a6bc:	3630      	adds	r6, #48	; 0x30
 801a6be:	4602      	mov	r2, r0
 801a6c0:	460b      	mov	r3, r1
 801a6c2:	4640      	mov	r0, r8
 801a6c4:	4649      	mov	r1, r9
 801a6c6:	f7e5 fde9 	bl	800029c <__aeabi_dsub>
 801a6ca:	f805 6b01 	strb.w	r6, [r5], #1
 801a6ce:	9b02      	ldr	r3, [sp, #8]
 801a6d0:	429d      	cmp	r5, r3
 801a6d2:	4680      	mov	r8, r0
 801a6d4:	4689      	mov	r9, r1
 801a6d6:	f04f 0200 	mov.w	r2, #0
 801a6da:	d124      	bne.n	801a726 <_dtoa_r+0x62e>
 801a6dc:	4b1b      	ldr	r3, [pc, #108]	; (801a74c <_dtoa_r+0x654>)
 801a6de:	ec51 0b19 	vmov	r0, r1, d9
 801a6e2:	f7e5 fddd 	bl	80002a0 <__adddf3>
 801a6e6:	4602      	mov	r2, r0
 801a6e8:	460b      	mov	r3, r1
 801a6ea:	4640      	mov	r0, r8
 801a6ec:	4649      	mov	r1, r9
 801a6ee:	f7e6 fa1d 	bl	8000b2c <__aeabi_dcmpgt>
 801a6f2:	2800      	cmp	r0, #0
 801a6f4:	d173      	bne.n	801a7de <_dtoa_r+0x6e6>
 801a6f6:	ec53 2b19 	vmov	r2, r3, d9
 801a6fa:	4914      	ldr	r1, [pc, #80]	; (801a74c <_dtoa_r+0x654>)
 801a6fc:	2000      	movs	r0, #0
 801a6fe:	f7e5 fdcd 	bl	800029c <__aeabi_dsub>
 801a702:	4602      	mov	r2, r0
 801a704:	460b      	mov	r3, r1
 801a706:	4640      	mov	r0, r8
 801a708:	4649      	mov	r1, r9
 801a70a:	f7e6 f9f1 	bl	8000af0 <__aeabi_dcmplt>
 801a70e:	2800      	cmp	r0, #0
 801a710:	f43f af2f 	beq.w	801a572 <_dtoa_r+0x47a>
 801a714:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801a716:	1e6b      	subs	r3, r5, #1
 801a718:	930f      	str	r3, [sp, #60]	; 0x3c
 801a71a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a71e:	2b30      	cmp	r3, #48	; 0x30
 801a720:	d0f8      	beq.n	801a714 <_dtoa_r+0x61c>
 801a722:	46bb      	mov	fp, r7
 801a724:	e04a      	b.n	801a7bc <_dtoa_r+0x6c4>
 801a726:	4b06      	ldr	r3, [pc, #24]	; (801a740 <_dtoa_r+0x648>)
 801a728:	f7e5 ff70 	bl	800060c <__aeabi_dmul>
 801a72c:	4680      	mov	r8, r0
 801a72e:	4689      	mov	r9, r1
 801a730:	e7bd      	b.n	801a6ae <_dtoa_r+0x5b6>
 801a732:	bf00      	nop
 801a734:	0801fe70 	.word	0x0801fe70
 801a738:	0801fe48 	.word	0x0801fe48
 801a73c:	3ff00000 	.word	0x3ff00000
 801a740:	40240000 	.word	0x40240000
 801a744:	401c0000 	.word	0x401c0000
 801a748:	40140000 	.word	0x40140000
 801a74c:	3fe00000 	.word	0x3fe00000
 801a750:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a754:	9d00      	ldr	r5, [sp, #0]
 801a756:	4642      	mov	r2, r8
 801a758:	464b      	mov	r3, r9
 801a75a:	4630      	mov	r0, r6
 801a75c:	4639      	mov	r1, r7
 801a75e:	f7e6 f87f 	bl	8000860 <__aeabi_ddiv>
 801a762:	f7e6 fa03 	bl	8000b6c <__aeabi_d2iz>
 801a766:	9001      	str	r0, [sp, #4]
 801a768:	f7e5 fee6 	bl	8000538 <__aeabi_i2d>
 801a76c:	4642      	mov	r2, r8
 801a76e:	464b      	mov	r3, r9
 801a770:	f7e5 ff4c 	bl	800060c <__aeabi_dmul>
 801a774:	4602      	mov	r2, r0
 801a776:	460b      	mov	r3, r1
 801a778:	4630      	mov	r0, r6
 801a77a:	4639      	mov	r1, r7
 801a77c:	f7e5 fd8e 	bl	800029c <__aeabi_dsub>
 801a780:	9e01      	ldr	r6, [sp, #4]
 801a782:	9f04      	ldr	r7, [sp, #16]
 801a784:	3630      	adds	r6, #48	; 0x30
 801a786:	f805 6b01 	strb.w	r6, [r5], #1
 801a78a:	9e00      	ldr	r6, [sp, #0]
 801a78c:	1bae      	subs	r6, r5, r6
 801a78e:	42b7      	cmp	r7, r6
 801a790:	4602      	mov	r2, r0
 801a792:	460b      	mov	r3, r1
 801a794:	d134      	bne.n	801a800 <_dtoa_r+0x708>
 801a796:	f7e5 fd83 	bl	80002a0 <__adddf3>
 801a79a:	4642      	mov	r2, r8
 801a79c:	464b      	mov	r3, r9
 801a79e:	4606      	mov	r6, r0
 801a7a0:	460f      	mov	r7, r1
 801a7a2:	f7e6 f9c3 	bl	8000b2c <__aeabi_dcmpgt>
 801a7a6:	b9c8      	cbnz	r0, 801a7dc <_dtoa_r+0x6e4>
 801a7a8:	4642      	mov	r2, r8
 801a7aa:	464b      	mov	r3, r9
 801a7ac:	4630      	mov	r0, r6
 801a7ae:	4639      	mov	r1, r7
 801a7b0:	f7e6 f994 	bl	8000adc <__aeabi_dcmpeq>
 801a7b4:	b110      	cbz	r0, 801a7bc <_dtoa_r+0x6c4>
 801a7b6:	9b01      	ldr	r3, [sp, #4]
 801a7b8:	07db      	lsls	r3, r3, #31
 801a7ba:	d40f      	bmi.n	801a7dc <_dtoa_r+0x6e4>
 801a7bc:	4651      	mov	r1, sl
 801a7be:	4620      	mov	r0, r4
 801a7c0:	f001 f93c 	bl	801ba3c <_Bfree>
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a7c8:	702b      	strb	r3, [r5, #0]
 801a7ca:	f10b 0301 	add.w	r3, fp, #1
 801a7ce:	6013      	str	r3, [r2, #0]
 801a7d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	f43f ace2 	beq.w	801a19c <_dtoa_r+0xa4>
 801a7d8:	601d      	str	r5, [r3, #0]
 801a7da:	e4df      	b.n	801a19c <_dtoa_r+0xa4>
 801a7dc:	465f      	mov	r7, fp
 801a7de:	462b      	mov	r3, r5
 801a7e0:	461d      	mov	r5, r3
 801a7e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a7e6:	2a39      	cmp	r2, #57	; 0x39
 801a7e8:	d106      	bne.n	801a7f8 <_dtoa_r+0x700>
 801a7ea:	9a00      	ldr	r2, [sp, #0]
 801a7ec:	429a      	cmp	r2, r3
 801a7ee:	d1f7      	bne.n	801a7e0 <_dtoa_r+0x6e8>
 801a7f0:	9900      	ldr	r1, [sp, #0]
 801a7f2:	2230      	movs	r2, #48	; 0x30
 801a7f4:	3701      	adds	r7, #1
 801a7f6:	700a      	strb	r2, [r1, #0]
 801a7f8:	781a      	ldrb	r2, [r3, #0]
 801a7fa:	3201      	adds	r2, #1
 801a7fc:	701a      	strb	r2, [r3, #0]
 801a7fe:	e790      	b.n	801a722 <_dtoa_r+0x62a>
 801a800:	4ba3      	ldr	r3, [pc, #652]	; (801aa90 <_dtoa_r+0x998>)
 801a802:	2200      	movs	r2, #0
 801a804:	f7e5 ff02 	bl	800060c <__aeabi_dmul>
 801a808:	2200      	movs	r2, #0
 801a80a:	2300      	movs	r3, #0
 801a80c:	4606      	mov	r6, r0
 801a80e:	460f      	mov	r7, r1
 801a810:	f7e6 f964 	bl	8000adc <__aeabi_dcmpeq>
 801a814:	2800      	cmp	r0, #0
 801a816:	d09e      	beq.n	801a756 <_dtoa_r+0x65e>
 801a818:	e7d0      	b.n	801a7bc <_dtoa_r+0x6c4>
 801a81a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a81c:	2a00      	cmp	r2, #0
 801a81e:	f000 80ca 	beq.w	801a9b6 <_dtoa_r+0x8be>
 801a822:	9a07      	ldr	r2, [sp, #28]
 801a824:	2a01      	cmp	r2, #1
 801a826:	f300 80ad 	bgt.w	801a984 <_dtoa_r+0x88c>
 801a82a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a82c:	2a00      	cmp	r2, #0
 801a82e:	f000 80a5 	beq.w	801a97c <_dtoa_r+0x884>
 801a832:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801a836:	9e08      	ldr	r6, [sp, #32]
 801a838:	9d05      	ldr	r5, [sp, #20]
 801a83a:	9a05      	ldr	r2, [sp, #20]
 801a83c:	441a      	add	r2, r3
 801a83e:	9205      	str	r2, [sp, #20]
 801a840:	9a06      	ldr	r2, [sp, #24]
 801a842:	2101      	movs	r1, #1
 801a844:	441a      	add	r2, r3
 801a846:	4620      	mov	r0, r4
 801a848:	9206      	str	r2, [sp, #24]
 801a84a:	f001 f9f7 	bl	801bc3c <__i2b>
 801a84e:	4607      	mov	r7, r0
 801a850:	b165      	cbz	r5, 801a86c <_dtoa_r+0x774>
 801a852:	9b06      	ldr	r3, [sp, #24]
 801a854:	2b00      	cmp	r3, #0
 801a856:	dd09      	ble.n	801a86c <_dtoa_r+0x774>
 801a858:	42ab      	cmp	r3, r5
 801a85a:	9a05      	ldr	r2, [sp, #20]
 801a85c:	bfa8      	it	ge
 801a85e:	462b      	movge	r3, r5
 801a860:	1ad2      	subs	r2, r2, r3
 801a862:	9205      	str	r2, [sp, #20]
 801a864:	9a06      	ldr	r2, [sp, #24]
 801a866:	1aed      	subs	r5, r5, r3
 801a868:	1ad3      	subs	r3, r2, r3
 801a86a:	9306      	str	r3, [sp, #24]
 801a86c:	9b08      	ldr	r3, [sp, #32]
 801a86e:	b1f3      	cbz	r3, 801a8ae <_dtoa_r+0x7b6>
 801a870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a872:	2b00      	cmp	r3, #0
 801a874:	f000 80a3 	beq.w	801a9be <_dtoa_r+0x8c6>
 801a878:	2e00      	cmp	r6, #0
 801a87a:	dd10      	ble.n	801a89e <_dtoa_r+0x7a6>
 801a87c:	4639      	mov	r1, r7
 801a87e:	4632      	mov	r2, r6
 801a880:	4620      	mov	r0, r4
 801a882:	f001 fa9b 	bl	801bdbc <__pow5mult>
 801a886:	4652      	mov	r2, sl
 801a888:	4601      	mov	r1, r0
 801a88a:	4607      	mov	r7, r0
 801a88c:	4620      	mov	r0, r4
 801a88e:	f001 f9eb 	bl	801bc68 <__multiply>
 801a892:	4651      	mov	r1, sl
 801a894:	4680      	mov	r8, r0
 801a896:	4620      	mov	r0, r4
 801a898:	f001 f8d0 	bl	801ba3c <_Bfree>
 801a89c:	46c2      	mov	sl, r8
 801a89e:	9b08      	ldr	r3, [sp, #32]
 801a8a0:	1b9a      	subs	r2, r3, r6
 801a8a2:	d004      	beq.n	801a8ae <_dtoa_r+0x7b6>
 801a8a4:	4651      	mov	r1, sl
 801a8a6:	4620      	mov	r0, r4
 801a8a8:	f001 fa88 	bl	801bdbc <__pow5mult>
 801a8ac:	4682      	mov	sl, r0
 801a8ae:	2101      	movs	r1, #1
 801a8b0:	4620      	mov	r0, r4
 801a8b2:	f001 f9c3 	bl	801bc3c <__i2b>
 801a8b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	4606      	mov	r6, r0
 801a8bc:	f340 8081 	ble.w	801a9c2 <_dtoa_r+0x8ca>
 801a8c0:	461a      	mov	r2, r3
 801a8c2:	4601      	mov	r1, r0
 801a8c4:	4620      	mov	r0, r4
 801a8c6:	f001 fa79 	bl	801bdbc <__pow5mult>
 801a8ca:	9b07      	ldr	r3, [sp, #28]
 801a8cc:	2b01      	cmp	r3, #1
 801a8ce:	4606      	mov	r6, r0
 801a8d0:	dd7a      	ble.n	801a9c8 <_dtoa_r+0x8d0>
 801a8d2:	f04f 0800 	mov.w	r8, #0
 801a8d6:	6933      	ldr	r3, [r6, #16]
 801a8d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a8dc:	6918      	ldr	r0, [r3, #16]
 801a8de:	f001 f95f 	bl	801bba0 <__hi0bits>
 801a8e2:	f1c0 0020 	rsb	r0, r0, #32
 801a8e6:	9b06      	ldr	r3, [sp, #24]
 801a8e8:	4418      	add	r0, r3
 801a8ea:	f010 001f 	ands.w	r0, r0, #31
 801a8ee:	f000 8094 	beq.w	801aa1a <_dtoa_r+0x922>
 801a8f2:	f1c0 0320 	rsb	r3, r0, #32
 801a8f6:	2b04      	cmp	r3, #4
 801a8f8:	f340 8085 	ble.w	801aa06 <_dtoa_r+0x90e>
 801a8fc:	9b05      	ldr	r3, [sp, #20]
 801a8fe:	f1c0 001c 	rsb	r0, r0, #28
 801a902:	4403      	add	r3, r0
 801a904:	9305      	str	r3, [sp, #20]
 801a906:	9b06      	ldr	r3, [sp, #24]
 801a908:	4403      	add	r3, r0
 801a90a:	4405      	add	r5, r0
 801a90c:	9306      	str	r3, [sp, #24]
 801a90e:	9b05      	ldr	r3, [sp, #20]
 801a910:	2b00      	cmp	r3, #0
 801a912:	dd05      	ble.n	801a920 <_dtoa_r+0x828>
 801a914:	4651      	mov	r1, sl
 801a916:	461a      	mov	r2, r3
 801a918:	4620      	mov	r0, r4
 801a91a:	f001 faa9 	bl	801be70 <__lshift>
 801a91e:	4682      	mov	sl, r0
 801a920:	9b06      	ldr	r3, [sp, #24]
 801a922:	2b00      	cmp	r3, #0
 801a924:	dd05      	ble.n	801a932 <_dtoa_r+0x83a>
 801a926:	4631      	mov	r1, r6
 801a928:	461a      	mov	r2, r3
 801a92a:	4620      	mov	r0, r4
 801a92c:	f001 faa0 	bl	801be70 <__lshift>
 801a930:	4606      	mov	r6, r0
 801a932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a934:	2b00      	cmp	r3, #0
 801a936:	d072      	beq.n	801aa1e <_dtoa_r+0x926>
 801a938:	4631      	mov	r1, r6
 801a93a:	4650      	mov	r0, sl
 801a93c:	f001 fb04 	bl	801bf48 <__mcmp>
 801a940:	2800      	cmp	r0, #0
 801a942:	da6c      	bge.n	801aa1e <_dtoa_r+0x926>
 801a944:	2300      	movs	r3, #0
 801a946:	4651      	mov	r1, sl
 801a948:	220a      	movs	r2, #10
 801a94a:	4620      	mov	r0, r4
 801a94c:	f001 f898 	bl	801ba80 <__multadd>
 801a950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a952:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a956:	4682      	mov	sl, r0
 801a958:	2b00      	cmp	r3, #0
 801a95a:	f000 81b0 	beq.w	801acbe <_dtoa_r+0xbc6>
 801a95e:	2300      	movs	r3, #0
 801a960:	4639      	mov	r1, r7
 801a962:	220a      	movs	r2, #10
 801a964:	4620      	mov	r0, r4
 801a966:	f001 f88b 	bl	801ba80 <__multadd>
 801a96a:	9b01      	ldr	r3, [sp, #4]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	4607      	mov	r7, r0
 801a970:	f300 8096 	bgt.w	801aaa0 <_dtoa_r+0x9a8>
 801a974:	9b07      	ldr	r3, [sp, #28]
 801a976:	2b02      	cmp	r3, #2
 801a978:	dc59      	bgt.n	801aa2e <_dtoa_r+0x936>
 801a97a:	e091      	b.n	801aaa0 <_dtoa_r+0x9a8>
 801a97c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a97e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801a982:	e758      	b.n	801a836 <_dtoa_r+0x73e>
 801a984:	9b04      	ldr	r3, [sp, #16]
 801a986:	1e5e      	subs	r6, r3, #1
 801a988:	9b08      	ldr	r3, [sp, #32]
 801a98a:	42b3      	cmp	r3, r6
 801a98c:	bfbf      	itttt	lt
 801a98e:	9b08      	ldrlt	r3, [sp, #32]
 801a990:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801a992:	9608      	strlt	r6, [sp, #32]
 801a994:	1af3      	sublt	r3, r6, r3
 801a996:	bfb4      	ite	lt
 801a998:	18d2      	addlt	r2, r2, r3
 801a99a:	1b9e      	subge	r6, r3, r6
 801a99c:	9b04      	ldr	r3, [sp, #16]
 801a99e:	bfbc      	itt	lt
 801a9a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801a9a2:	2600      	movlt	r6, #0
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	bfb7      	itett	lt
 801a9a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801a9ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801a9b0:	1a9d      	sublt	r5, r3, r2
 801a9b2:	2300      	movlt	r3, #0
 801a9b4:	e741      	b.n	801a83a <_dtoa_r+0x742>
 801a9b6:	9e08      	ldr	r6, [sp, #32]
 801a9b8:	9d05      	ldr	r5, [sp, #20]
 801a9ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a9bc:	e748      	b.n	801a850 <_dtoa_r+0x758>
 801a9be:	9a08      	ldr	r2, [sp, #32]
 801a9c0:	e770      	b.n	801a8a4 <_dtoa_r+0x7ac>
 801a9c2:	9b07      	ldr	r3, [sp, #28]
 801a9c4:	2b01      	cmp	r3, #1
 801a9c6:	dc19      	bgt.n	801a9fc <_dtoa_r+0x904>
 801a9c8:	9b02      	ldr	r3, [sp, #8]
 801a9ca:	b9bb      	cbnz	r3, 801a9fc <_dtoa_r+0x904>
 801a9cc:	9b03      	ldr	r3, [sp, #12]
 801a9ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a9d2:	b99b      	cbnz	r3, 801a9fc <_dtoa_r+0x904>
 801a9d4:	9b03      	ldr	r3, [sp, #12]
 801a9d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a9da:	0d1b      	lsrs	r3, r3, #20
 801a9dc:	051b      	lsls	r3, r3, #20
 801a9de:	b183      	cbz	r3, 801aa02 <_dtoa_r+0x90a>
 801a9e0:	9b05      	ldr	r3, [sp, #20]
 801a9e2:	3301      	adds	r3, #1
 801a9e4:	9305      	str	r3, [sp, #20]
 801a9e6:	9b06      	ldr	r3, [sp, #24]
 801a9e8:	3301      	adds	r3, #1
 801a9ea:	9306      	str	r3, [sp, #24]
 801a9ec:	f04f 0801 	mov.w	r8, #1
 801a9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	f47f af6f 	bne.w	801a8d6 <_dtoa_r+0x7de>
 801a9f8:	2001      	movs	r0, #1
 801a9fa:	e774      	b.n	801a8e6 <_dtoa_r+0x7ee>
 801a9fc:	f04f 0800 	mov.w	r8, #0
 801aa00:	e7f6      	b.n	801a9f0 <_dtoa_r+0x8f8>
 801aa02:	4698      	mov	r8, r3
 801aa04:	e7f4      	b.n	801a9f0 <_dtoa_r+0x8f8>
 801aa06:	d082      	beq.n	801a90e <_dtoa_r+0x816>
 801aa08:	9a05      	ldr	r2, [sp, #20]
 801aa0a:	331c      	adds	r3, #28
 801aa0c:	441a      	add	r2, r3
 801aa0e:	9205      	str	r2, [sp, #20]
 801aa10:	9a06      	ldr	r2, [sp, #24]
 801aa12:	441a      	add	r2, r3
 801aa14:	441d      	add	r5, r3
 801aa16:	9206      	str	r2, [sp, #24]
 801aa18:	e779      	b.n	801a90e <_dtoa_r+0x816>
 801aa1a:	4603      	mov	r3, r0
 801aa1c:	e7f4      	b.n	801aa08 <_dtoa_r+0x910>
 801aa1e:	9b04      	ldr	r3, [sp, #16]
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	dc37      	bgt.n	801aa94 <_dtoa_r+0x99c>
 801aa24:	9b07      	ldr	r3, [sp, #28]
 801aa26:	2b02      	cmp	r3, #2
 801aa28:	dd34      	ble.n	801aa94 <_dtoa_r+0x99c>
 801aa2a:	9b04      	ldr	r3, [sp, #16]
 801aa2c:	9301      	str	r3, [sp, #4]
 801aa2e:	9b01      	ldr	r3, [sp, #4]
 801aa30:	b963      	cbnz	r3, 801aa4c <_dtoa_r+0x954>
 801aa32:	4631      	mov	r1, r6
 801aa34:	2205      	movs	r2, #5
 801aa36:	4620      	mov	r0, r4
 801aa38:	f001 f822 	bl	801ba80 <__multadd>
 801aa3c:	4601      	mov	r1, r0
 801aa3e:	4606      	mov	r6, r0
 801aa40:	4650      	mov	r0, sl
 801aa42:	f001 fa81 	bl	801bf48 <__mcmp>
 801aa46:	2800      	cmp	r0, #0
 801aa48:	f73f adbb 	bgt.w	801a5c2 <_dtoa_r+0x4ca>
 801aa4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa4e:	9d00      	ldr	r5, [sp, #0]
 801aa50:	ea6f 0b03 	mvn.w	fp, r3
 801aa54:	f04f 0800 	mov.w	r8, #0
 801aa58:	4631      	mov	r1, r6
 801aa5a:	4620      	mov	r0, r4
 801aa5c:	f000 ffee 	bl	801ba3c <_Bfree>
 801aa60:	2f00      	cmp	r7, #0
 801aa62:	f43f aeab 	beq.w	801a7bc <_dtoa_r+0x6c4>
 801aa66:	f1b8 0f00 	cmp.w	r8, #0
 801aa6a:	d005      	beq.n	801aa78 <_dtoa_r+0x980>
 801aa6c:	45b8      	cmp	r8, r7
 801aa6e:	d003      	beq.n	801aa78 <_dtoa_r+0x980>
 801aa70:	4641      	mov	r1, r8
 801aa72:	4620      	mov	r0, r4
 801aa74:	f000 ffe2 	bl	801ba3c <_Bfree>
 801aa78:	4639      	mov	r1, r7
 801aa7a:	4620      	mov	r0, r4
 801aa7c:	f000 ffde 	bl	801ba3c <_Bfree>
 801aa80:	e69c      	b.n	801a7bc <_dtoa_r+0x6c4>
 801aa82:	2600      	movs	r6, #0
 801aa84:	4637      	mov	r7, r6
 801aa86:	e7e1      	b.n	801aa4c <_dtoa_r+0x954>
 801aa88:	46bb      	mov	fp, r7
 801aa8a:	4637      	mov	r7, r6
 801aa8c:	e599      	b.n	801a5c2 <_dtoa_r+0x4ca>
 801aa8e:	bf00      	nop
 801aa90:	40240000 	.word	0x40240000
 801aa94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	f000 80c8 	beq.w	801ac2c <_dtoa_r+0xb34>
 801aa9c:	9b04      	ldr	r3, [sp, #16]
 801aa9e:	9301      	str	r3, [sp, #4]
 801aaa0:	2d00      	cmp	r5, #0
 801aaa2:	dd05      	ble.n	801aab0 <_dtoa_r+0x9b8>
 801aaa4:	4639      	mov	r1, r7
 801aaa6:	462a      	mov	r2, r5
 801aaa8:	4620      	mov	r0, r4
 801aaaa:	f001 f9e1 	bl	801be70 <__lshift>
 801aaae:	4607      	mov	r7, r0
 801aab0:	f1b8 0f00 	cmp.w	r8, #0
 801aab4:	d05b      	beq.n	801ab6e <_dtoa_r+0xa76>
 801aab6:	6879      	ldr	r1, [r7, #4]
 801aab8:	4620      	mov	r0, r4
 801aaba:	f000 ff7f 	bl	801b9bc <_Balloc>
 801aabe:	4605      	mov	r5, r0
 801aac0:	b928      	cbnz	r0, 801aace <_dtoa_r+0x9d6>
 801aac2:	4b83      	ldr	r3, [pc, #524]	; (801acd0 <_dtoa_r+0xbd8>)
 801aac4:	4602      	mov	r2, r0
 801aac6:	f240 21ef 	movw	r1, #751	; 0x2ef
 801aaca:	f7ff bb2e 	b.w	801a12a <_dtoa_r+0x32>
 801aace:	693a      	ldr	r2, [r7, #16]
 801aad0:	3202      	adds	r2, #2
 801aad2:	0092      	lsls	r2, r2, #2
 801aad4:	f107 010c 	add.w	r1, r7, #12
 801aad8:	300c      	adds	r0, #12
 801aada:	f7ff fa67 	bl	8019fac <memcpy>
 801aade:	2201      	movs	r2, #1
 801aae0:	4629      	mov	r1, r5
 801aae2:	4620      	mov	r0, r4
 801aae4:	f001 f9c4 	bl	801be70 <__lshift>
 801aae8:	9b00      	ldr	r3, [sp, #0]
 801aaea:	3301      	adds	r3, #1
 801aaec:	9304      	str	r3, [sp, #16]
 801aaee:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aaf2:	4413      	add	r3, r2
 801aaf4:	9308      	str	r3, [sp, #32]
 801aaf6:	9b02      	ldr	r3, [sp, #8]
 801aaf8:	f003 0301 	and.w	r3, r3, #1
 801aafc:	46b8      	mov	r8, r7
 801aafe:	9306      	str	r3, [sp, #24]
 801ab00:	4607      	mov	r7, r0
 801ab02:	9b04      	ldr	r3, [sp, #16]
 801ab04:	4631      	mov	r1, r6
 801ab06:	3b01      	subs	r3, #1
 801ab08:	4650      	mov	r0, sl
 801ab0a:	9301      	str	r3, [sp, #4]
 801ab0c:	f7ff fa6a 	bl	8019fe4 <quorem>
 801ab10:	4641      	mov	r1, r8
 801ab12:	9002      	str	r0, [sp, #8]
 801ab14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801ab18:	4650      	mov	r0, sl
 801ab1a:	f001 fa15 	bl	801bf48 <__mcmp>
 801ab1e:	463a      	mov	r2, r7
 801ab20:	9005      	str	r0, [sp, #20]
 801ab22:	4631      	mov	r1, r6
 801ab24:	4620      	mov	r0, r4
 801ab26:	f001 fa2b 	bl	801bf80 <__mdiff>
 801ab2a:	68c2      	ldr	r2, [r0, #12]
 801ab2c:	4605      	mov	r5, r0
 801ab2e:	bb02      	cbnz	r2, 801ab72 <_dtoa_r+0xa7a>
 801ab30:	4601      	mov	r1, r0
 801ab32:	4650      	mov	r0, sl
 801ab34:	f001 fa08 	bl	801bf48 <__mcmp>
 801ab38:	4602      	mov	r2, r0
 801ab3a:	4629      	mov	r1, r5
 801ab3c:	4620      	mov	r0, r4
 801ab3e:	9209      	str	r2, [sp, #36]	; 0x24
 801ab40:	f000 ff7c 	bl	801ba3c <_Bfree>
 801ab44:	9b07      	ldr	r3, [sp, #28]
 801ab46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab48:	9d04      	ldr	r5, [sp, #16]
 801ab4a:	ea43 0102 	orr.w	r1, r3, r2
 801ab4e:	9b06      	ldr	r3, [sp, #24]
 801ab50:	4319      	orrs	r1, r3
 801ab52:	d110      	bne.n	801ab76 <_dtoa_r+0xa7e>
 801ab54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ab58:	d029      	beq.n	801abae <_dtoa_r+0xab6>
 801ab5a:	9b05      	ldr	r3, [sp, #20]
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	dd02      	ble.n	801ab66 <_dtoa_r+0xa6e>
 801ab60:	9b02      	ldr	r3, [sp, #8]
 801ab62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801ab66:	9b01      	ldr	r3, [sp, #4]
 801ab68:	f883 9000 	strb.w	r9, [r3]
 801ab6c:	e774      	b.n	801aa58 <_dtoa_r+0x960>
 801ab6e:	4638      	mov	r0, r7
 801ab70:	e7ba      	b.n	801aae8 <_dtoa_r+0x9f0>
 801ab72:	2201      	movs	r2, #1
 801ab74:	e7e1      	b.n	801ab3a <_dtoa_r+0xa42>
 801ab76:	9b05      	ldr	r3, [sp, #20]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	db04      	blt.n	801ab86 <_dtoa_r+0xa8e>
 801ab7c:	9907      	ldr	r1, [sp, #28]
 801ab7e:	430b      	orrs	r3, r1
 801ab80:	9906      	ldr	r1, [sp, #24]
 801ab82:	430b      	orrs	r3, r1
 801ab84:	d120      	bne.n	801abc8 <_dtoa_r+0xad0>
 801ab86:	2a00      	cmp	r2, #0
 801ab88:	dded      	ble.n	801ab66 <_dtoa_r+0xa6e>
 801ab8a:	4651      	mov	r1, sl
 801ab8c:	2201      	movs	r2, #1
 801ab8e:	4620      	mov	r0, r4
 801ab90:	f001 f96e 	bl	801be70 <__lshift>
 801ab94:	4631      	mov	r1, r6
 801ab96:	4682      	mov	sl, r0
 801ab98:	f001 f9d6 	bl	801bf48 <__mcmp>
 801ab9c:	2800      	cmp	r0, #0
 801ab9e:	dc03      	bgt.n	801aba8 <_dtoa_r+0xab0>
 801aba0:	d1e1      	bne.n	801ab66 <_dtoa_r+0xa6e>
 801aba2:	f019 0f01 	tst.w	r9, #1
 801aba6:	d0de      	beq.n	801ab66 <_dtoa_r+0xa6e>
 801aba8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801abac:	d1d8      	bne.n	801ab60 <_dtoa_r+0xa68>
 801abae:	9a01      	ldr	r2, [sp, #4]
 801abb0:	2339      	movs	r3, #57	; 0x39
 801abb2:	7013      	strb	r3, [r2, #0]
 801abb4:	462b      	mov	r3, r5
 801abb6:	461d      	mov	r5, r3
 801abb8:	3b01      	subs	r3, #1
 801abba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801abbe:	2a39      	cmp	r2, #57	; 0x39
 801abc0:	d06c      	beq.n	801ac9c <_dtoa_r+0xba4>
 801abc2:	3201      	adds	r2, #1
 801abc4:	701a      	strb	r2, [r3, #0]
 801abc6:	e747      	b.n	801aa58 <_dtoa_r+0x960>
 801abc8:	2a00      	cmp	r2, #0
 801abca:	dd07      	ble.n	801abdc <_dtoa_r+0xae4>
 801abcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801abd0:	d0ed      	beq.n	801abae <_dtoa_r+0xab6>
 801abd2:	9a01      	ldr	r2, [sp, #4]
 801abd4:	f109 0301 	add.w	r3, r9, #1
 801abd8:	7013      	strb	r3, [r2, #0]
 801abda:	e73d      	b.n	801aa58 <_dtoa_r+0x960>
 801abdc:	9b04      	ldr	r3, [sp, #16]
 801abde:	9a08      	ldr	r2, [sp, #32]
 801abe0:	f803 9c01 	strb.w	r9, [r3, #-1]
 801abe4:	4293      	cmp	r3, r2
 801abe6:	d043      	beq.n	801ac70 <_dtoa_r+0xb78>
 801abe8:	4651      	mov	r1, sl
 801abea:	2300      	movs	r3, #0
 801abec:	220a      	movs	r2, #10
 801abee:	4620      	mov	r0, r4
 801abf0:	f000 ff46 	bl	801ba80 <__multadd>
 801abf4:	45b8      	cmp	r8, r7
 801abf6:	4682      	mov	sl, r0
 801abf8:	f04f 0300 	mov.w	r3, #0
 801abfc:	f04f 020a 	mov.w	r2, #10
 801ac00:	4641      	mov	r1, r8
 801ac02:	4620      	mov	r0, r4
 801ac04:	d107      	bne.n	801ac16 <_dtoa_r+0xb1e>
 801ac06:	f000 ff3b 	bl	801ba80 <__multadd>
 801ac0a:	4680      	mov	r8, r0
 801ac0c:	4607      	mov	r7, r0
 801ac0e:	9b04      	ldr	r3, [sp, #16]
 801ac10:	3301      	adds	r3, #1
 801ac12:	9304      	str	r3, [sp, #16]
 801ac14:	e775      	b.n	801ab02 <_dtoa_r+0xa0a>
 801ac16:	f000 ff33 	bl	801ba80 <__multadd>
 801ac1a:	4639      	mov	r1, r7
 801ac1c:	4680      	mov	r8, r0
 801ac1e:	2300      	movs	r3, #0
 801ac20:	220a      	movs	r2, #10
 801ac22:	4620      	mov	r0, r4
 801ac24:	f000 ff2c 	bl	801ba80 <__multadd>
 801ac28:	4607      	mov	r7, r0
 801ac2a:	e7f0      	b.n	801ac0e <_dtoa_r+0xb16>
 801ac2c:	9b04      	ldr	r3, [sp, #16]
 801ac2e:	9301      	str	r3, [sp, #4]
 801ac30:	9d00      	ldr	r5, [sp, #0]
 801ac32:	4631      	mov	r1, r6
 801ac34:	4650      	mov	r0, sl
 801ac36:	f7ff f9d5 	bl	8019fe4 <quorem>
 801ac3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801ac3e:	9b00      	ldr	r3, [sp, #0]
 801ac40:	f805 9b01 	strb.w	r9, [r5], #1
 801ac44:	1aea      	subs	r2, r5, r3
 801ac46:	9b01      	ldr	r3, [sp, #4]
 801ac48:	4293      	cmp	r3, r2
 801ac4a:	dd07      	ble.n	801ac5c <_dtoa_r+0xb64>
 801ac4c:	4651      	mov	r1, sl
 801ac4e:	2300      	movs	r3, #0
 801ac50:	220a      	movs	r2, #10
 801ac52:	4620      	mov	r0, r4
 801ac54:	f000 ff14 	bl	801ba80 <__multadd>
 801ac58:	4682      	mov	sl, r0
 801ac5a:	e7ea      	b.n	801ac32 <_dtoa_r+0xb3a>
 801ac5c:	9b01      	ldr	r3, [sp, #4]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	bfc8      	it	gt
 801ac62:	461d      	movgt	r5, r3
 801ac64:	9b00      	ldr	r3, [sp, #0]
 801ac66:	bfd8      	it	le
 801ac68:	2501      	movle	r5, #1
 801ac6a:	441d      	add	r5, r3
 801ac6c:	f04f 0800 	mov.w	r8, #0
 801ac70:	4651      	mov	r1, sl
 801ac72:	2201      	movs	r2, #1
 801ac74:	4620      	mov	r0, r4
 801ac76:	f001 f8fb 	bl	801be70 <__lshift>
 801ac7a:	4631      	mov	r1, r6
 801ac7c:	4682      	mov	sl, r0
 801ac7e:	f001 f963 	bl	801bf48 <__mcmp>
 801ac82:	2800      	cmp	r0, #0
 801ac84:	dc96      	bgt.n	801abb4 <_dtoa_r+0xabc>
 801ac86:	d102      	bne.n	801ac8e <_dtoa_r+0xb96>
 801ac88:	f019 0f01 	tst.w	r9, #1
 801ac8c:	d192      	bne.n	801abb4 <_dtoa_r+0xabc>
 801ac8e:	462b      	mov	r3, r5
 801ac90:	461d      	mov	r5, r3
 801ac92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ac96:	2a30      	cmp	r2, #48	; 0x30
 801ac98:	d0fa      	beq.n	801ac90 <_dtoa_r+0xb98>
 801ac9a:	e6dd      	b.n	801aa58 <_dtoa_r+0x960>
 801ac9c:	9a00      	ldr	r2, [sp, #0]
 801ac9e:	429a      	cmp	r2, r3
 801aca0:	d189      	bne.n	801abb6 <_dtoa_r+0xabe>
 801aca2:	f10b 0b01 	add.w	fp, fp, #1
 801aca6:	2331      	movs	r3, #49	; 0x31
 801aca8:	e796      	b.n	801abd8 <_dtoa_r+0xae0>
 801acaa:	4b0a      	ldr	r3, [pc, #40]	; (801acd4 <_dtoa_r+0xbdc>)
 801acac:	f7ff ba99 	b.w	801a1e2 <_dtoa_r+0xea>
 801acb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	f47f aa6d 	bne.w	801a192 <_dtoa_r+0x9a>
 801acb8:	4b07      	ldr	r3, [pc, #28]	; (801acd8 <_dtoa_r+0xbe0>)
 801acba:	f7ff ba92 	b.w	801a1e2 <_dtoa_r+0xea>
 801acbe:	9b01      	ldr	r3, [sp, #4]
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	dcb5      	bgt.n	801ac30 <_dtoa_r+0xb38>
 801acc4:	9b07      	ldr	r3, [sp, #28]
 801acc6:	2b02      	cmp	r3, #2
 801acc8:	f73f aeb1 	bgt.w	801aa2e <_dtoa_r+0x936>
 801accc:	e7b0      	b.n	801ac30 <_dtoa_r+0xb38>
 801acce:	bf00      	nop
 801acd0:	0801fd6d 	.word	0x0801fd6d
 801acd4:	0801fb68 	.word	0x0801fb68
 801acd8:	0801fcf1 	.word	0x0801fcf1

0801acdc <_free_r>:
 801acdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801acde:	2900      	cmp	r1, #0
 801ace0:	d044      	beq.n	801ad6c <_free_r+0x90>
 801ace2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ace6:	9001      	str	r0, [sp, #4]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	f1a1 0404 	sub.w	r4, r1, #4
 801acee:	bfb8      	it	lt
 801acf0:	18e4      	addlt	r4, r4, r3
 801acf2:	f000 fe57 	bl	801b9a4 <__malloc_lock>
 801acf6:	4a1e      	ldr	r2, [pc, #120]	; (801ad70 <_free_r+0x94>)
 801acf8:	9801      	ldr	r0, [sp, #4]
 801acfa:	6813      	ldr	r3, [r2, #0]
 801acfc:	b933      	cbnz	r3, 801ad0c <_free_r+0x30>
 801acfe:	6063      	str	r3, [r4, #4]
 801ad00:	6014      	str	r4, [r2, #0]
 801ad02:	b003      	add	sp, #12
 801ad04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ad08:	f000 be52 	b.w	801b9b0 <__malloc_unlock>
 801ad0c:	42a3      	cmp	r3, r4
 801ad0e:	d908      	bls.n	801ad22 <_free_r+0x46>
 801ad10:	6825      	ldr	r5, [r4, #0]
 801ad12:	1961      	adds	r1, r4, r5
 801ad14:	428b      	cmp	r3, r1
 801ad16:	bf01      	itttt	eq
 801ad18:	6819      	ldreq	r1, [r3, #0]
 801ad1a:	685b      	ldreq	r3, [r3, #4]
 801ad1c:	1949      	addeq	r1, r1, r5
 801ad1e:	6021      	streq	r1, [r4, #0]
 801ad20:	e7ed      	b.n	801acfe <_free_r+0x22>
 801ad22:	461a      	mov	r2, r3
 801ad24:	685b      	ldr	r3, [r3, #4]
 801ad26:	b10b      	cbz	r3, 801ad2c <_free_r+0x50>
 801ad28:	42a3      	cmp	r3, r4
 801ad2a:	d9fa      	bls.n	801ad22 <_free_r+0x46>
 801ad2c:	6811      	ldr	r1, [r2, #0]
 801ad2e:	1855      	adds	r5, r2, r1
 801ad30:	42a5      	cmp	r5, r4
 801ad32:	d10b      	bne.n	801ad4c <_free_r+0x70>
 801ad34:	6824      	ldr	r4, [r4, #0]
 801ad36:	4421      	add	r1, r4
 801ad38:	1854      	adds	r4, r2, r1
 801ad3a:	42a3      	cmp	r3, r4
 801ad3c:	6011      	str	r1, [r2, #0]
 801ad3e:	d1e0      	bne.n	801ad02 <_free_r+0x26>
 801ad40:	681c      	ldr	r4, [r3, #0]
 801ad42:	685b      	ldr	r3, [r3, #4]
 801ad44:	6053      	str	r3, [r2, #4]
 801ad46:	440c      	add	r4, r1
 801ad48:	6014      	str	r4, [r2, #0]
 801ad4a:	e7da      	b.n	801ad02 <_free_r+0x26>
 801ad4c:	d902      	bls.n	801ad54 <_free_r+0x78>
 801ad4e:	230c      	movs	r3, #12
 801ad50:	6003      	str	r3, [r0, #0]
 801ad52:	e7d6      	b.n	801ad02 <_free_r+0x26>
 801ad54:	6825      	ldr	r5, [r4, #0]
 801ad56:	1961      	adds	r1, r4, r5
 801ad58:	428b      	cmp	r3, r1
 801ad5a:	bf04      	itt	eq
 801ad5c:	6819      	ldreq	r1, [r3, #0]
 801ad5e:	685b      	ldreq	r3, [r3, #4]
 801ad60:	6063      	str	r3, [r4, #4]
 801ad62:	bf04      	itt	eq
 801ad64:	1949      	addeq	r1, r1, r5
 801ad66:	6021      	streq	r1, [r4, #0]
 801ad68:	6054      	str	r4, [r2, #4]
 801ad6a:	e7ca      	b.n	801ad02 <_free_r+0x26>
 801ad6c:	b003      	add	sp, #12
 801ad6e:	bd30      	pop	{r4, r5, pc}
 801ad70:	2000950c 	.word	0x2000950c

0801ad74 <rshift>:
 801ad74:	6903      	ldr	r3, [r0, #16]
 801ad76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ad7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ad82:	f100 0414 	add.w	r4, r0, #20
 801ad86:	dd45      	ble.n	801ae14 <rshift+0xa0>
 801ad88:	f011 011f 	ands.w	r1, r1, #31
 801ad8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ad90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ad94:	d10c      	bne.n	801adb0 <rshift+0x3c>
 801ad96:	f100 0710 	add.w	r7, r0, #16
 801ad9a:	4629      	mov	r1, r5
 801ad9c:	42b1      	cmp	r1, r6
 801ad9e:	d334      	bcc.n	801ae0a <rshift+0x96>
 801ada0:	1a9b      	subs	r3, r3, r2
 801ada2:	009b      	lsls	r3, r3, #2
 801ada4:	1eea      	subs	r2, r5, #3
 801ada6:	4296      	cmp	r6, r2
 801ada8:	bf38      	it	cc
 801adaa:	2300      	movcc	r3, #0
 801adac:	4423      	add	r3, r4
 801adae:	e015      	b.n	801addc <rshift+0x68>
 801adb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801adb4:	f1c1 0820 	rsb	r8, r1, #32
 801adb8:	40cf      	lsrs	r7, r1
 801adba:	f105 0e04 	add.w	lr, r5, #4
 801adbe:	46a1      	mov	r9, r4
 801adc0:	4576      	cmp	r6, lr
 801adc2:	46f4      	mov	ip, lr
 801adc4:	d815      	bhi.n	801adf2 <rshift+0x7e>
 801adc6:	1a9a      	subs	r2, r3, r2
 801adc8:	0092      	lsls	r2, r2, #2
 801adca:	3a04      	subs	r2, #4
 801adcc:	3501      	adds	r5, #1
 801adce:	42ae      	cmp	r6, r5
 801add0:	bf38      	it	cc
 801add2:	2200      	movcc	r2, #0
 801add4:	18a3      	adds	r3, r4, r2
 801add6:	50a7      	str	r7, [r4, r2]
 801add8:	b107      	cbz	r7, 801addc <rshift+0x68>
 801adda:	3304      	adds	r3, #4
 801addc:	1b1a      	subs	r2, r3, r4
 801adde:	42a3      	cmp	r3, r4
 801ade0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ade4:	bf08      	it	eq
 801ade6:	2300      	moveq	r3, #0
 801ade8:	6102      	str	r2, [r0, #16]
 801adea:	bf08      	it	eq
 801adec:	6143      	streq	r3, [r0, #20]
 801adee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801adf2:	f8dc c000 	ldr.w	ip, [ip]
 801adf6:	fa0c fc08 	lsl.w	ip, ip, r8
 801adfa:	ea4c 0707 	orr.w	r7, ip, r7
 801adfe:	f849 7b04 	str.w	r7, [r9], #4
 801ae02:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ae06:	40cf      	lsrs	r7, r1
 801ae08:	e7da      	b.n	801adc0 <rshift+0x4c>
 801ae0a:	f851 cb04 	ldr.w	ip, [r1], #4
 801ae0e:	f847 cf04 	str.w	ip, [r7, #4]!
 801ae12:	e7c3      	b.n	801ad9c <rshift+0x28>
 801ae14:	4623      	mov	r3, r4
 801ae16:	e7e1      	b.n	801addc <rshift+0x68>

0801ae18 <__hexdig_fun>:
 801ae18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ae1c:	2b09      	cmp	r3, #9
 801ae1e:	d802      	bhi.n	801ae26 <__hexdig_fun+0xe>
 801ae20:	3820      	subs	r0, #32
 801ae22:	b2c0      	uxtb	r0, r0
 801ae24:	4770      	bx	lr
 801ae26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801ae2a:	2b05      	cmp	r3, #5
 801ae2c:	d801      	bhi.n	801ae32 <__hexdig_fun+0x1a>
 801ae2e:	3847      	subs	r0, #71	; 0x47
 801ae30:	e7f7      	b.n	801ae22 <__hexdig_fun+0xa>
 801ae32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801ae36:	2b05      	cmp	r3, #5
 801ae38:	d801      	bhi.n	801ae3e <__hexdig_fun+0x26>
 801ae3a:	3827      	subs	r0, #39	; 0x27
 801ae3c:	e7f1      	b.n	801ae22 <__hexdig_fun+0xa>
 801ae3e:	2000      	movs	r0, #0
 801ae40:	4770      	bx	lr
	...

0801ae44 <__gethex>:
 801ae44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae48:	4617      	mov	r7, r2
 801ae4a:	680a      	ldr	r2, [r1, #0]
 801ae4c:	b085      	sub	sp, #20
 801ae4e:	f102 0b02 	add.w	fp, r2, #2
 801ae52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801ae56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801ae5a:	4681      	mov	r9, r0
 801ae5c:	468a      	mov	sl, r1
 801ae5e:	9302      	str	r3, [sp, #8]
 801ae60:	32fe      	adds	r2, #254	; 0xfe
 801ae62:	eb02 030b 	add.w	r3, r2, fp
 801ae66:	46d8      	mov	r8, fp
 801ae68:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801ae6c:	9301      	str	r3, [sp, #4]
 801ae6e:	2830      	cmp	r0, #48	; 0x30
 801ae70:	d0f7      	beq.n	801ae62 <__gethex+0x1e>
 801ae72:	f7ff ffd1 	bl	801ae18 <__hexdig_fun>
 801ae76:	4604      	mov	r4, r0
 801ae78:	2800      	cmp	r0, #0
 801ae7a:	d138      	bne.n	801aeee <__gethex+0xaa>
 801ae7c:	49a7      	ldr	r1, [pc, #668]	; (801b11c <__gethex+0x2d8>)
 801ae7e:	2201      	movs	r2, #1
 801ae80:	4640      	mov	r0, r8
 801ae82:	f7fe fff3 	bl	8019e6c <strncmp>
 801ae86:	4606      	mov	r6, r0
 801ae88:	2800      	cmp	r0, #0
 801ae8a:	d169      	bne.n	801af60 <__gethex+0x11c>
 801ae8c:	f898 0001 	ldrb.w	r0, [r8, #1]
 801ae90:	465d      	mov	r5, fp
 801ae92:	f7ff ffc1 	bl	801ae18 <__hexdig_fun>
 801ae96:	2800      	cmp	r0, #0
 801ae98:	d064      	beq.n	801af64 <__gethex+0x120>
 801ae9a:	465a      	mov	r2, fp
 801ae9c:	7810      	ldrb	r0, [r2, #0]
 801ae9e:	2830      	cmp	r0, #48	; 0x30
 801aea0:	4690      	mov	r8, r2
 801aea2:	f102 0201 	add.w	r2, r2, #1
 801aea6:	d0f9      	beq.n	801ae9c <__gethex+0x58>
 801aea8:	f7ff ffb6 	bl	801ae18 <__hexdig_fun>
 801aeac:	2301      	movs	r3, #1
 801aeae:	fab0 f480 	clz	r4, r0
 801aeb2:	0964      	lsrs	r4, r4, #5
 801aeb4:	465e      	mov	r6, fp
 801aeb6:	9301      	str	r3, [sp, #4]
 801aeb8:	4642      	mov	r2, r8
 801aeba:	4615      	mov	r5, r2
 801aebc:	3201      	adds	r2, #1
 801aebe:	7828      	ldrb	r0, [r5, #0]
 801aec0:	f7ff ffaa 	bl	801ae18 <__hexdig_fun>
 801aec4:	2800      	cmp	r0, #0
 801aec6:	d1f8      	bne.n	801aeba <__gethex+0x76>
 801aec8:	4994      	ldr	r1, [pc, #592]	; (801b11c <__gethex+0x2d8>)
 801aeca:	2201      	movs	r2, #1
 801aecc:	4628      	mov	r0, r5
 801aece:	f7fe ffcd 	bl	8019e6c <strncmp>
 801aed2:	b978      	cbnz	r0, 801aef4 <__gethex+0xb0>
 801aed4:	b946      	cbnz	r6, 801aee8 <__gethex+0xa4>
 801aed6:	1c6e      	adds	r6, r5, #1
 801aed8:	4632      	mov	r2, r6
 801aeda:	4615      	mov	r5, r2
 801aedc:	3201      	adds	r2, #1
 801aede:	7828      	ldrb	r0, [r5, #0]
 801aee0:	f7ff ff9a 	bl	801ae18 <__hexdig_fun>
 801aee4:	2800      	cmp	r0, #0
 801aee6:	d1f8      	bne.n	801aeda <__gethex+0x96>
 801aee8:	1b73      	subs	r3, r6, r5
 801aeea:	009e      	lsls	r6, r3, #2
 801aeec:	e004      	b.n	801aef8 <__gethex+0xb4>
 801aeee:	2400      	movs	r4, #0
 801aef0:	4626      	mov	r6, r4
 801aef2:	e7e1      	b.n	801aeb8 <__gethex+0x74>
 801aef4:	2e00      	cmp	r6, #0
 801aef6:	d1f7      	bne.n	801aee8 <__gethex+0xa4>
 801aef8:	782b      	ldrb	r3, [r5, #0]
 801aefa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801aefe:	2b50      	cmp	r3, #80	; 0x50
 801af00:	d13d      	bne.n	801af7e <__gethex+0x13a>
 801af02:	786b      	ldrb	r3, [r5, #1]
 801af04:	2b2b      	cmp	r3, #43	; 0x2b
 801af06:	d02f      	beq.n	801af68 <__gethex+0x124>
 801af08:	2b2d      	cmp	r3, #45	; 0x2d
 801af0a:	d031      	beq.n	801af70 <__gethex+0x12c>
 801af0c:	1c69      	adds	r1, r5, #1
 801af0e:	f04f 0b00 	mov.w	fp, #0
 801af12:	7808      	ldrb	r0, [r1, #0]
 801af14:	f7ff ff80 	bl	801ae18 <__hexdig_fun>
 801af18:	1e42      	subs	r2, r0, #1
 801af1a:	b2d2      	uxtb	r2, r2
 801af1c:	2a18      	cmp	r2, #24
 801af1e:	d82e      	bhi.n	801af7e <__gethex+0x13a>
 801af20:	f1a0 0210 	sub.w	r2, r0, #16
 801af24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801af28:	f7ff ff76 	bl	801ae18 <__hexdig_fun>
 801af2c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801af30:	fa5f fc8c 	uxtb.w	ip, ip
 801af34:	f1bc 0f18 	cmp.w	ip, #24
 801af38:	d91d      	bls.n	801af76 <__gethex+0x132>
 801af3a:	f1bb 0f00 	cmp.w	fp, #0
 801af3e:	d000      	beq.n	801af42 <__gethex+0xfe>
 801af40:	4252      	negs	r2, r2
 801af42:	4416      	add	r6, r2
 801af44:	f8ca 1000 	str.w	r1, [sl]
 801af48:	b1dc      	cbz	r4, 801af82 <__gethex+0x13e>
 801af4a:	9b01      	ldr	r3, [sp, #4]
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	bf14      	ite	ne
 801af50:	f04f 0800 	movne.w	r8, #0
 801af54:	f04f 0806 	moveq.w	r8, #6
 801af58:	4640      	mov	r0, r8
 801af5a:	b005      	add	sp, #20
 801af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af60:	4645      	mov	r5, r8
 801af62:	4626      	mov	r6, r4
 801af64:	2401      	movs	r4, #1
 801af66:	e7c7      	b.n	801aef8 <__gethex+0xb4>
 801af68:	f04f 0b00 	mov.w	fp, #0
 801af6c:	1ca9      	adds	r1, r5, #2
 801af6e:	e7d0      	b.n	801af12 <__gethex+0xce>
 801af70:	f04f 0b01 	mov.w	fp, #1
 801af74:	e7fa      	b.n	801af6c <__gethex+0x128>
 801af76:	230a      	movs	r3, #10
 801af78:	fb03 0002 	mla	r0, r3, r2, r0
 801af7c:	e7d0      	b.n	801af20 <__gethex+0xdc>
 801af7e:	4629      	mov	r1, r5
 801af80:	e7e0      	b.n	801af44 <__gethex+0x100>
 801af82:	eba5 0308 	sub.w	r3, r5, r8
 801af86:	3b01      	subs	r3, #1
 801af88:	4621      	mov	r1, r4
 801af8a:	2b07      	cmp	r3, #7
 801af8c:	dc0a      	bgt.n	801afa4 <__gethex+0x160>
 801af8e:	4648      	mov	r0, r9
 801af90:	f000 fd14 	bl	801b9bc <_Balloc>
 801af94:	4604      	mov	r4, r0
 801af96:	b940      	cbnz	r0, 801afaa <__gethex+0x166>
 801af98:	4b61      	ldr	r3, [pc, #388]	; (801b120 <__gethex+0x2dc>)
 801af9a:	4602      	mov	r2, r0
 801af9c:	21e4      	movs	r1, #228	; 0xe4
 801af9e:	4861      	ldr	r0, [pc, #388]	; (801b124 <__gethex+0x2e0>)
 801afa0:	f001 faa8 	bl	801c4f4 <__assert_func>
 801afa4:	3101      	adds	r1, #1
 801afa6:	105b      	asrs	r3, r3, #1
 801afa8:	e7ef      	b.n	801af8a <__gethex+0x146>
 801afaa:	f100 0a14 	add.w	sl, r0, #20
 801afae:	2300      	movs	r3, #0
 801afb0:	495a      	ldr	r1, [pc, #360]	; (801b11c <__gethex+0x2d8>)
 801afb2:	f8cd a004 	str.w	sl, [sp, #4]
 801afb6:	469b      	mov	fp, r3
 801afb8:	45a8      	cmp	r8, r5
 801afba:	d342      	bcc.n	801b042 <__gethex+0x1fe>
 801afbc:	9801      	ldr	r0, [sp, #4]
 801afbe:	f840 bb04 	str.w	fp, [r0], #4
 801afc2:	eba0 000a 	sub.w	r0, r0, sl
 801afc6:	1080      	asrs	r0, r0, #2
 801afc8:	6120      	str	r0, [r4, #16]
 801afca:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801afce:	4658      	mov	r0, fp
 801afd0:	f000 fde6 	bl	801bba0 <__hi0bits>
 801afd4:	683d      	ldr	r5, [r7, #0]
 801afd6:	eba8 0000 	sub.w	r0, r8, r0
 801afda:	42a8      	cmp	r0, r5
 801afdc:	dd59      	ble.n	801b092 <__gethex+0x24e>
 801afde:	eba0 0805 	sub.w	r8, r0, r5
 801afe2:	4641      	mov	r1, r8
 801afe4:	4620      	mov	r0, r4
 801afe6:	f001 f975 	bl	801c2d4 <__any_on>
 801afea:	4683      	mov	fp, r0
 801afec:	b1b8      	cbz	r0, 801b01e <__gethex+0x1da>
 801afee:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 801aff2:	1159      	asrs	r1, r3, #5
 801aff4:	f003 021f 	and.w	r2, r3, #31
 801aff8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801affc:	f04f 0b01 	mov.w	fp, #1
 801b000:	fa0b f202 	lsl.w	r2, fp, r2
 801b004:	420a      	tst	r2, r1
 801b006:	d00a      	beq.n	801b01e <__gethex+0x1da>
 801b008:	455b      	cmp	r3, fp
 801b00a:	dd06      	ble.n	801b01a <__gethex+0x1d6>
 801b00c:	f1a8 0102 	sub.w	r1, r8, #2
 801b010:	4620      	mov	r0, r4
 801b012:	f001 f95f 	bl	801c2d4 <__any_on>
 801b016:	2800      	cmp	r0, #0
 801b018:	d138      	bne.n	801b08c <__gethex+0x248>
 801b01a:	f04f 0b02 	mov.w	fp, #2
 801b01e:	4641      	mov	r1, r8
 801b020:	4620      	mov	r0, r4
 801b022:	f7ff fea7 	bl	801ad74 <rshift>
 801b026:	4446      	add	r6, r8
 801b028:	68bb      	ldr	r3, [r7, #8]
 801b02a:	42b3      	cmp	r3, r6
 801b02c:	da41      	bge.n	801b0b2 <__gethex+0x26e>
 801b02e:	4621      	mov	r1, r4
 801b030:	4648      	mov	r0, r9
 801b032:	f000 fd03 	bl	801ba3c <_Bfree>
 801b036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b038:	2300      	movs	r3, #0
 801b03a:	6013      	str	r3, [r2, #0]
 801b03c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801b040:	e78a      	b.n	801af58 <__gethex+0x114>
 801b042:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801b046:	2a2e      	cmp	r2, #46	; 0x2e
 801b048:	d014      	beq.n	801b074 <__gethex+0x230>
 801b04a:	2b20      	cmp	r3, #32
 801b04c:	d106      	bne.n	801b05c <__gethex+0x218>
 801b04e:	9b01      	ldr	r3, [sp, #4]
 801b050:	f843 bb04 	str.w	fp, [r3], #4
 801b054:	f04f 0b00 	mov.w	fp, #0
 801b058:	9301      	str	r3, [sp, #4]
 801b05a:	465b      	mov	r3, fp
 801b05c:	7828      	ldrb	r0, [r5, #0]
 801b05e:	9303      	str	r3, [sp, #12]
 801b060:	f7ff feda 	bl	801ae18 <__hexdig_fun>
 801b064:	9b03      	ldr	r3, [sp, #12]
 801b066:	f000 000f 	and.w	r0, r0, #15
 801b06a:	4098      	lsls	r0, r3
 801b06c:	ea4b 0b00 	orr.w	fp, fp, r0
 801b070:	3304      	adds	r3, #4
 801b072:	e7a1      	b.n	801afb8 <__gethex+0x174>
 801b074:	45a8      	cmp	r8, r5
 801b076:	d8e8      	bhi.n	801b04a <__gethex+0x206>
 801b078:	2201      	movs	r2, #1
 801b07a:	4628      	mov	r0, r5
 801b07c:	9303      	str	r3, [sp, #12]
 801b07e:	f7fe fef5 	bl	8019e6c <strncmp>
 801b082:	4926      	ldr	r1, [pc, #152]	; (801b11c <__gethex+0x2d8>)
 801b084:	9b03      	ldr	r3, [sp, #12]
 801b086:	2800      	cmp	r0, #0
 801b088:	d1df      	bne.n	801b04a <__gethex+0x206>
 801b08a:	e795      	b.n	801afb8 <__gethex+0x174>
 801b08c:	f04f 0b03 	mov.w	fp, #3
 801b090:	e7c5      	b.n	801b01e <__gethex+0x1da>
 801b092:	da0b      	bge.n	801b0ac <__gethex+0x268>
 801b094:	eba5 0800 	sub.w	r8, r5, r0
 801b098:	4621      	mov	r1, r4
 801b09a:	4642      	mov	r2, r8
 801b09c:	4648      	mov	r0, r9
 801b09e:	f000 fee7 	bl	801be70 <__lshift>
 801b0a2:	eba6 0608 	sub.w	r6, r6, r8
 801b0a6:	4604      	mov	r4, r0
 801b0a8:	f100 0a14 	add.w	sl, r0, #20
 801b0ac:	f04f 0b00 	mov.w	fp, #0
 801b0b0:	e7ba      	b.n	801b028 <__gethex+0x1e4>
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	42b3      	cmp	r3, r6
 801b0b6:	dd73      	ble.n	801b1a0 <__gethex+0x35c>
 801b0b8:	1b9e      	subs	r6, r3, r6
 801b0ba:	42b5      	cmp	r5, r6
 801b0bc:	dc34      	bgt.n	801b128 <__gethex+0x2e4>
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	2b02      	cmp	r3, #2
 801b0c2:	d023      	beq.n	801b10c <__gethex+0x2c8>
 801b0c4:	2b03      	cmp	r3, #3
 801b0c6:	d025      	beq.n	801b114 <__gethex+0x2d0>
 801b0c8:	2b01      	cmp	r3, #1
 801b0ca:	d115      	bne.n	801b0f8 <__gethex+0x2b4>
 801b0cc:	42b5      	cmp	r5, r6
 801b0ce:	d113      	bne.n	801b0f8 <__gethex+0x2b4>
 801b0d0:	2d01      	cmp	r5, #1
 801b0d2:	d10b      	bne.n	801b0ec <__gethex+0x2a8>
 801b0d4:	9a02      	ldr	r2, [sp, #8]
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	6013      	str	r3, [r2, #0]
 801b0da:	2301      	movs	r3, #1
 801b0dc:	6123      	str	r3, [r4, #16]
 801b0de:	f8ca 3000 	str.w	r3, [sl]
 801b0e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0e4:	f04f 0862 	mov.w	r8, #98	; 0x62
 801b0e8:	601c      	str	r4, [r3, #0]
 801b0ea:	e735      	b.n	801af58 <__gethex+0x114>
 801b0ec:	1e69      	subs	r1, r5, #1
 801b0ee:	4620      	mov	r0, r4
 801b0f0:	f001 f8f0 	bl	801c2d4 <__any_on>
 801b0f4:	2800      	cmp	r0, #0
 801b0f6:	d1ed      	bne.n	801b0d4 <__gethex+0x290>
 801b0f8:	4621      	mov	r1, r4
 801b0fa:	4648      	mov	r0, r9
 801b0fc:	f000 fc9e 	bl	801ba3c <_Bfree>
 801b100:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b102:	2300      	movs	r3, #0
 801b104:	6013      	str	r3, [r2, #0]
 801b106:	f04f 0850 	mov.w	r8, #80	; 0x50
 801b10a:	e725      	b.n	801af58 <__gethex+0x114>
 801b10c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d1f2      	bne.n	801b0f8 <__gethex+0x2b4>
 801b112:	e7df      	b.n	801b0d4 <__gethex+0x290>
 801b114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b116:	2b00      	cmp	r3, #0
 801b118:	d1dc      	bne.n	801b0d4 <__gethex+0x290>
 801b11a:	e7ed      	b.n	801b0f8 <__gethex+0x2b4>
 801b11c:	0801fb91 	.word	0x0801fb91
 801b120:	0801fd6d 	.word	0x0801fd6d
 801b124:	0801fd7e 	.word	0x0801fd7e
 801b128:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 801b12c:	f1bb 0f00 	cmp.w	fp, #0
 801b130:	d133      	bne.n	801b19a <__gethex+0x356>
 801b132:	f1b8 0f00 	cmp.w	r8, #0
 801b136:	d004      	beq.n	801b142 <__gethex+0x2fe>
 801b138:	4641      	mov	r1, r8
 801b13a:	4620      	mov	r0, r4
 801b13c:	f001 f8ca 	bl	801c2d4 <__any_on>
 801b140:	4683      	mov	fp, r0
 801b142:	ea4f 1268 	mov.w	r2, r8, asr #5
 801b146:	2301      	movs	r3, #1
 801b148:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b14c:	f008 081f 	and.w	r8, r8, #31
 801b150:	fa03 f308 	lsl.w	r3, r3, r8
 801b154:	4213      	tst	r3, r2
 801b156:	4631      	mov	r1, r6
 801b158:	4620      	mov	r0, r4
 801b15a:	bf18      	it	ne
 801b15c:	f04b 0b02 	orrne.w	fp, fp, #2
 801b160:	1bad      	subs	r5, r5, r6
 801b162:	f7ff fe07 	bl	801ad74 <rshift>
 801b166:	687e      	ldr	r6, [r7, #4]
 801b168:	f04f 0802 	mov.w	r8, #2
 801b16c:	f1bb 0f00 	cmp.w	fp, #0
 801b170:	d04a      	beq.n	801b208 <__gethex+0x3c4>
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	2b02      	cmp	r3, #2
 801b176:	d016      	beq.n	801b1a6 <__gethex+0x362>
 801b178:	2b03      	cmp	r3, #3
 801b17a:	d018      	beq.n	801b1ae <__gethex+0x36a>
 801b17c:	2b01      	cmp	r3, #1
 801b17e:	d109      	bne.n	801b194 <__gethex+0x350>
 801b180:	f01b 0f02 	tst.w	fp, #2
 801b184:	d006      	beq.n	801b194 <__gethex+0x350>
 801b186:	f8da 3000 	ldr.w	r3, [sl]
 801b18a:	ea4b 0b03 	orr.w	fp, fp, r3
 801b18e:	f01b 0f01 	tst.w	fp, #1
 801b192:	d10f      	bne.n	801b1b4 <__gethex+0x370>
 801b194:	f048 0810 	orr.w	r8, r8, #16
 801b198:	e036      	b.n	801b208 <__gethex+0x3c4>
 801b19a:	f04f 0b01 	mov.w	fp, #1
 801b19e:	e7d0      	b.n	801b142 <__gethex+0x2fe>
 801b1a0:	f04f 0801 	mov.w	r8, #1
 801b1a4:	e7e2      	b.n	801b16c <__gethex+0x328>
 801b1a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b1a8:	f1c3 0301 	rsb	r3, r3, #1
 801b1ac:	930f      	str	r3, [sp, #60]	; 0x3c
 801b1ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d0ef      	beq.n	801b194 <__gethex+0x350>
 801b1b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b1b8:	f104 0214 	add.w	r2, r4, #20
 801b1bc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801b1c0:	9301      	str	r3, [sp, #4]
 801b1c2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801b1c6:	2300      	movs	r3, #0
 801b1c8:	4694      	mov	ip, r2
 801b1ca:	f852 1b04 	ldr.w	r1, [r2], #4
 801b1ce:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801b1d2:	d01e      	beq.n	801b212 <__gethex+0x3ce>
 801b1d4:	3101      	adds	r1, #1
 801b1d6:	f8cc 1000 	str.w	r1, [ip]
 801b1da:	f1b8 0f02 	cmp.w	r8, #2
 801b1de:	f104 0214 	add.w	r2, r4, #20
 801b1e2:	d13d      	bne.n	801b260 <__gethex+0x41c>
 801b1e4:	683b      	ldr	r3, [r7, #0]
 801b1e6:	3b01      	subs	r3, #1
 801b1e8:	42ab      	cmp	r3, r5
 801b1ea:	d10b      	bne.n	801b204 <__gethex+0x3c0>
 801b1ec:	1169      	asrs	r1, r5, #5
 801b1ee:	2301      	movs	r3, #1
 801b1f0:	f005 051f 	and.w	r5, r5, #31
 801b1f4:	fa03 f505 	lsl.w	r5, r3, r5
 801b1f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b1fc:	421d      	tst	r5, r3
 801b1fe:	bf18      	it	ne
 801b200:	f04f 0801 	movne.w	r8, #1
 801b204:	f048 0820 	orr.w	r8, r8, #32
 801b208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b20a:	601c      	str	r4, [r3, #0]
 801b20c:	9b02      	ldr	r3, [sp, #8]
 801b20e:	601e      	str	r6, [r3, #0]
 801b210:	e6a2      	b.n	801af58 <__gethex+0x114>
 801b212:	4290      	cmp	r0, r2
 801b214:	f842 3c04 	str.w	r3, [r2, #-4]
 801b218:	d8d6      	bhi.n	801b1c8 <__gethex+0x384>
 801b21a:	68a2      	ldr	r2, [r4, #8]
 801b21c:	4593      	cmp	fp, r2
 801b21e:	db17      	blt.n	801b250 <__gethex+0x40c>
 801b220:	6861      	ldr	r1, [r4, #4]
 801b222:	4648      	mov	r0, r9
 801b224:	3101      	adds	r1, #1
 801b226:	f000 fbc9 	bl	801b9bc <_Balloc>
 801b22a:	4682      	mov	sl, r0
 801b22c:	b918      	cbnz	r0, 801b236 <__gethex+0x3f2>
 801b22e:	4b1b      	ldr	r3, [pc, #108]	; (801b29c <__gethex+0x458>)
 801b230:	4602      	mov	r2, r0
 801b232:	2184      	movs	r1, #132	; 0x84
 801b234:	e6b3      	b.n	801af9e <__gethex+0x15a>
 801b236:	6922      	ldr	r2, [r4, #16]
 801b238:	3202      	adds	r2, #2
 801b23a:	f104 010c 	add.w	r1, r4, #12
 801b23e:	0092      	lsls	r2, r2, #2
 801b240:	300c      	adds	r0, #12
 801b242:	f7fe feb3 	bl	8019fac <memcpy>
 801b246:	4621      	mov	r1, r4
 801b248:	4648      	mov	r0, r9
 801b24a:	f000 fbf7 	bl	801ba3c <_Bfree>
 801b24e:	4654      	mov	r4, sl
 801b250:	6922      	ldr	r2, [r4, #16]
 801b252:	1c51      	adds	r1, r2, #1
 801b254:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801b258:	6121      	str	r1, [r4, #16]
 801b25a:	2101      	movs	r1, #1
 801b25c:	6151      	str	r1, [r2, #20]
 801b25e:	e7bc      	b.n	801b1da <__gethex+0x396>
 801b260:	6921      	ldr	r1, [r4, #16]
 801b262:	4559      	cmp	r1, fp
 801b264:	dd0b      	ble.n	801b27e <__gethex+0x43a>
 801b266:	2101      	movs	r1, #1
 801b268:	4620      	mov	r0, r4
 801b26a:	f7ff fd83 	bl	801ad74 <rshift>
 801b26e:	68bb      	ldr	r3, [r7, #8]
 801b270:	3601      	adds	r6, #1
 801b272:	42b3      	cmp	r3, r6
 801b274:	f6ff aedb 	blt.w	801b02e <__gethex+0x1ea>
 801b278:	f04f 0801 	mov.w	r8, #1
 801b27c:	e7c2      	b.n	801b204 <__gethex+0x3c0>
 801b27e:	f015 051f 	ands.w	r5, r5, #31
 801b282:	d0f9      	beq.n	801b278 <__gethex+0x434>
 801b284:	9b01      	ldr	r3, [sp, #4]
 801b286:	441a      	add	r2, r3
 801b288:	f1c5 0520 	rsb	r5, r5, #32
 801b28c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801b290:	f000 fc86 	bl	801bba0 <__hi0bits>
 801b294:	42a8      	cmp	r0, r5
 801b296:	dbe6      	blt.n	801b266 <__gethex+0x422>
 801b298:	e7ee      	b.n	801b278 <__gethex+0x434>
 801b29a:	bf00      	nop
 801b29c:	0801fd6d 	.word	0x0801fd6d

0801b2a0 <L_shift>:
 801b2a0:	f1c2 0208 	rsb	r2, r2, #8
 801b2a4:	0092      	lsls	r2, r2, #2
 801b2a6:	b570      	push	{r4, r5, r6, lr}
 801b2a8:	f1c2 0620 	rsb	r6, r2, #32
 801b2ac:	6843      	ldr	r3, [r0, #4]
 801b2ae:	6804      	ldr	r4, [r0, #0]
 801b2b0:	fa03 f506 	lsl.w	r5, r3, r6
 801b2b4:	432c      	orrs	r4, r5
 801b2b6:	40d3      	lsrs	r3, r2
 801b2b8:	6004      	str	r4, [r0, #0]
 801b2ba:	f840 3f04 	str.w	r3, [r0, #4]!
 801b2be:	4288      	cmp	r0, r1
 801b2c0:	d3f4      	bcc.n	801b2ac <L_shift+0xc>
 801b2c2:	bd70      	pop	{r4, r5, r6, pc}

0801b2c4 <__match>:
 801b2c4:	b530      	push	{r4, r5, lr}
 801b2c6:	6803      	ldr	r3, [r0, #0]
 801b2c8:	3301      	adds	r3, #1
 801b2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b2ce:	b914      	cbnz	r4, 801b2d6 <__match+0x12>
 801b2d0:	6003      	str	r3, [r0, #0]
 801b2d2:	2001      	movs	r0, #1
 801b2d4:	bd30      	pop	{r4, r5, pc}
 801b2d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801b2de:	2d19      	cmp	r5, #25
 801b2e0:	bf98      	it	ls
 801b2e2:	3220      	addls	r2, #32
 801b2e4:	42a2      	cmp	r2, r4
 801b2e6:	d0f0      	beq.n	801b2ca <__match+0x6>
 801b2e8:	2000      	movs	r0, #0
 801b2ea:	e7f3      	b.n	801b2d4 <__match+0x10>

0801b2ec <__hexnan>:
 801b2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2f0:	680b      	ldr	r3, [r1, #0]
 801b2f2:	6801      	ldr	r1, [r0, #0]
 801b2f4:	115e      	asrs	r6, r3, #5
 801b2f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b2fa:	f013 031f 	ands.w	r3, r3, #31
 801b2fe:	b087      	sub	sp, #28
 801b300:	bf18      	it	ne
 801b302:	3604      	addne	r6, #4
 801b304:	2500      	movs	r5, #0
 801b306:	1f37      	subs	r7, r6, #4
 801b308:	4682      	mov	sl, r0
 801b30a:	4690      	mov	r8, r2
 801b30c:	9301      	str	r3, [sp, #4]
 801b30e:	f846 5c04 	str.w	r5, [r6, #-4]
 801b312:	46b9      	mov	r9, r7
 801b314:	463c      	mov	r4, r7
 801b316:	9502      	str	r5, [sp, #8]
 801b318:	46ab      	mov	fp, r5
 801b31a:	784a      	ldrb	r2, [r1, #1]
 801b31c:	1c4b      	adds	r3, r1, #1
 801b31e:	9303      	str	r3, [sp, #12]
 801b320:	b342      	cbz	r2, 801b374 <__hexnan+0x88>
 801b322:	4610      	mov	r0, r2
 801b324:	9105      	str	r1, [sp, #20]
 801b326:	9204      	str	r2, [sp, #16]
 801b328:	f7ff fd76 	bl	801ae18 <__hexdig_fun>
 801b32c:	2800      	cmp	r0, #0
 801b32e:	d14f      	bne.n	801b3d0 <__hexnan+0xe4>
 801b330:	9a04      	ldr	r2, [sp, #16]
 801b332:	9905      	ldr	r1, [sp, #20]
 801b334:	2a20      	cmp	r2, #32
 801b336:	d818      	bhi.n	801b36a <__hexnan+0x7e>
 801b338:	9b02      	ldr	r3, [sp, #8]
 801b33a:	459b      	cmp	fp, r3
 801b33c:	dd13      	ble.n	801b366 <__hexnan+0x7a>
 801b33e:	454c      	cmp	r4, r9
 801b340:	d206      	bcs.n	801b350 <__hexnan+0x64>
 801b342:	2d07      	cmp	r5, #7
 801b344:	dc04      	bgt.n	801b350 <__hexnan+0x64>
 801b346:	462a      	mov	r2, r5
 801b348:	4649      	mov	r1, r9
 801b34a:	4620      	mov	r0, r4
 801b34c:	f7ff ffa8 	bl	801b2a0 <L_shift>
 801b350:	4544      	cmp	r4, r8
 801b352:	d950      	bls.n	801b3f6 <__hexnan+0x10a>
 801b354:	2300      	movs	r3, #0
 801b356:	f1a4 0904 	sub.w	r9, r4, #4
 801b35a:	f844 3c04 	str.w	r3, [r4, #-4]
 801b35e:	f8cd b008 	str.w	fp, [sp, #8]
 801b362:	464c      	mov	r4, r9
 801b364:	461d      	mov	r5, r3
 801b366:	9903      	ldr	r1, [sp, #12]
 801b368:	e7d7      	b.n	801b31a <__hexnan+0x2e>
 801b36a:	2a29      	cmp	r2, #41	; 0x29
 801b36c:	d155      	bne.n	801b41a <__hexnan+0x12e>
 801b36e:	3102      	adds	r1, #2
 801b370:	f8ca 1000 	str.w	r1, [sl]
 801b374:	f1bb 0f00 	cmp.w	fp, #0
 801b378:	d04f      	beq.n	801b41a <__hexnan+0x12e>
 801b37a:	454c      	cmp	r4, r9
 801b37c:	d206      	bcs.n	801b38c <__hexnan+0xa0>
 801b37e:	2d07      	cmp	r5, #7
 801b380:	dc04      	bgt.n	801b38c <__hexnan+0xa0>
 801b382:	462a      	mov	r2, r5
 801b384:	4649      	mov	r1, r9
 801b386:	4620      	mov	r0, r4
 801b388:	f7ff ff8a 	bl	801b2a0 <L_shift>
 801b38c:	4544      	cmp	r4, r8
 801b38e:	d934      	bls.n	801b3fa <__hexnan+0x10e>
 801b390:	f1a8 0204 	sub.w	r2, r8, #4
 801b394:	4623      	mov	r3, r4
 801b396:	f853 1b04 	ldr.w	r1, [r3], #4
 801b39a:	f842 1f04 	str.w	r1, [r2, #4]!
 801b39e:	429f      	cmp	r7, r3
 801b3a0:	d2f9      	bcs.n	801b396 <__hexnan+0xaa>
 801b3a2:	1b3b      	subs	r3, r7, r4
 801b3a4:	f023 0303 	bic.w	r3, r3, #3
 801b3a8:	3304      	adds	r3, #4
 801b3aa:	3e03      	subs	r6, #3
 801b3ac:	3401      	adds	r4, #1
 801b3ae:	42a6      	cmp	r6, r4
 801b3b0:	bf38      	it	cc
 801b3b2:	2304      	movcc	r3, #4
 801b3b4:	4443      	add	r3, r8
 801b3b6:	2200      	movs	r2, #0
 801b3b8:	f843 2b04 	str.w	r2, [r3], #4
 801b3bc:	429f      	cmp	r7, r3
 801b3be:	d2fb      	bcs.n	801b3b8 <__hexnan+0xcc>
 801b3c0:	683b      	ldr	r3, [r7, #0]
 801b3c2:	b91b      	cbnz	r3, 801b3cc <__hexnan+0xe0>
 801b3c4:	4547      	cmp	r7, r8
 801b3c6:	d126      	bne.n	801b416 <__hexnan+0x12a>
 801b3c8:	2301      	movs	r3, #1
 801b3ca:	603b      	str	r3, [r7, #0]
 801b3cc:	2005      	movs	r0, #5
 801b3ce:	e025      	b.n	801b41c <__hexnan+0x130>
 801b3d0:	3501      	adds	r5, #1
 801b3d2:	2d08      	cmp	r5, #8
 801b3d4:	f10b 0b01 	add.w	fp, fp, #1
 801b3d8:	dd06      	ble.n	801b3e8 <__hexnan+0xfc>
 801b3da:	4544      	cmp	r4, r8
 801b3dc:	d9c3      	bls.n	801b366 <__hexnan+0x7a>
 801b3de:	2300      	movs	r3, #0
 801b3e0:	f844 3c04 	str.w	r3, [r4, #-4]
 801b3e4:	2501      	movs	r5, #1
 801b3e6:	3c04      	subs	r4, #4
 801b3e8:	6822      	ldr	r2, [r4, #0]
 801b3ea:	f000 000f 	and.w	r0, r0, #15
 801b3ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b3f2:	6020      	str	r0, [r4, #0]
 801b3f4:	e7b7      	b.n	801b366 <__hexnan+0x7a>
 801b3f6:	2508      	movs	r5, #8
 801b3f8:	e7b5      	b.n	801b366 <__hexnan+0x7a>
 801b3fa:	9b01      	ldr	r3, [sp, #4]
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	d0df      	beq.n	801b3c0 <__hexnan+0xd4>
 801b400:	f1c3 0320 	rsb	r3, r3, #32
 801b404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b408:	40da      	lsrs	r2, r3
 801b40a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801b40e:	4013      	ands	r3, r2
 801b410:	f846 3c04 	str.w	r3, [r6, #-4]
 801b414:	e7d4      	b.n	801b3c0 <__hexnan+0xd4>
 801b416:	3f04      	subs	r7, #4
 801b418:	e7d2      	b.n	801b3c0 <__hexnan+0xd4>
 801b41a:	2004      	movs	r0, #4
 801b41c:	b007      	add	sp, #28
 801b41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b422 <__ssputs_r>:
 801b422:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b426:	688e      	ldr	r6, [r1, #8]
 801b428:	461f      	mov	r7, r3
 801b42a:	42be      	cmp	r6, r7
 801b42c:	680b      	ldr	r3, [r1, #0]
 801b42e:	4682      	mov	sl, r0
 801b430:	460c      	mov	r4, r1
 801b432:	4690      	mov	r8, r2
 801b434:	d82c      	bhi.n	801b490 <__ssputs_r+0x6e>
 801b436:	898a      	ldrh	r2, [r1, #12]
 801b438:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b43c:	d026      	beq.n	801b48c <__ssputs_r+0x6a>
 801b43e:	6965      	ldr	r5, [r4, #20]
 801b440:	6909      	ldr	r1, [r1, #16]
 801b442:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b446:	eba3 0901 	sub.w	r9, r3, r1
 801b44a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b44e:	1c7b      	adds	r3, r7, #1
 801b450:	444b      	add	r3, r9
 801b452:	106d      	asrs	r5, r5, #1
 801b454:	429d      	cmp	r5, r3
 801b456:	bf38      	it	cc
 801b458:	461d      	movcc	r5, r3
 801b45a:	0553      	lsls	r3, r2, #21
 801b45c:	d527      	bpl.n	801b4ae <__ssputs_r+0x8c>
 801b45e:	4629      	mov	r1, r5
 801b460:	f000 f960 	bl	801b724 <_malloc_r>
 801b464:	4606      	mov	r6, r0
 801b466:	b360      	cbz	r0, 801b4c2 <__ssputs_r+0xa0>
 801b468:	6921      	ldr	r1, [r4, #16]
 801b46a:	464a      	mov	r2, r9
 801b46c:	f7fe fd9e 	bl	8019fac <memcpy>
 801b470:	89a3      	ldrh	r3, [r4, #12]
 801b472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b47a:	81a3      	strh	r3, [r4, #12]
 801b47c:	6126      	str	r6, [r4, #16]
 801b47e:	6165      	str	r5, [r4, #20]
 801b480:	444e      	add	r6, r9
 801b482:	eba5 0509 	sub.w	r5, r5, r9
 801b486:	6026      	str	r6, [r4, #0]
 801b488:	60a5      	str	r5, [r4, #8]
 801b48a:	463e      	mov	r6, r7
 801b48c:	42be      	cmp	r6, r7
 801b48e:	d900      	bls.n	801b492 <__ssputs_r+0x70>
 801b490:	463e      	mov	r6, r7
 801b492:	6820      	ldr	r0, [r4, #0]
 801b494:	4632      	mov	r2, r6
 801b496:	4641      	mov	r1, r8
 801b498:	f000 ffbc 	bl	801c414 <memmove>
 801b49c:	68a3      	ldr	r3, [r4, #8]
 801b49e:	1b9b      	subs	r3, r3, r6
 801b4a0:	60a3      	str	r3, [r4, #8]
 801b4a2:	6823      	ldr	r3, [r4, #0]
 801b4a4:	4433      	add	r3, r6
 801b4a6:	6023      	str	r3, [r4, #0]
 801b4a8:	2000      	movs	r0, #0
 801b4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4ae:	462a      	mov	r2, r5
 801b4b0:	f000 ff74 	bl	801c39c <_realloc_r>
 801b4b4:	4606      	mov	r6, r0
 801b4b6:	2800      	cmp	r0, #0
 801b4b8:	d1e0      	bne.n	801b47c <__ssputs_r+0x5a>
 801b4ba:	6921      	ldr	r1, [r4, #16]
 801b4bc:	4650      	mov	r0, sl
 801b4be:	f7ff fc0d 	bl	801acdc <_free_r>
 801b4c2:	230c      	movs	r3, #12
 801b4c4:	f8ca 3000 	str.w	r3, [sl]
 801b4c8:	89a3      	ldrh	r3, [r4, #12]
 801b4ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b4ce:	81a3      	strh	r3, [r4, #12]
 801b4d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b4d4:	e7e9      	b.n	801b4aa <__ssputs_r+0x88>
	...

0801b4d8 <_svfiprintf_r>:
 801b4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4dc:	4698      	mov	r8, r3
 801b4de:	898b      	ldrh	r3, [r1, #12]
 801b4e0:	061b      	lsls	r3, r3, #24
 801b4e2:	b09d      	sub	sp, #116	; 0x74
 801b4e4:	4607      	mov	r7, r0
 801b4e6:	460d      	mov	r5, r1
 801b4e8:	4614      	mov	r4, r2
 801b4ea:	d50e      	bpl.n	801b50a <_svfiprintf_r+0x32>
 801b4ec:	690b      	ldr	r3, [r1, #16]
 801b4ee:	b963      	cbnz	r3, 801b50a <_svfiprintf_r+0x32>
 801b4f0:	2140      	movs	r1, #64	; 0x40
 801b4f2:	f000 f917 	bl	801b724 <_malloc_r>
 801b4f6:	6028      	str	r0, [r5, #0]
 801b4f8:	6128      	str	r0, [r5, #16]
 801b4fa:	b920      	cbnz	r0, 801b506 <_svfiprintf_r+0x2e>
 801b4fc:	230c      	movs	r3, #12
 801b4fe:	603b      	str	r3, [r7, #0]
 801b500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b504:	e0d0      	b.n	801b6a8 <_svfiprintf_r+0x1d0>
 801b506:	2340      	movs	r3, #64	; 0x40
 801b508:	616b      	str	r3, [r5, #20]
 801b50a:	2300      	movs	r3, #0
 801b50c:	9309      	str	r3, [sp, #36]	; 0x24
 801b50e:	2320      	movs	r3, #32
 801b510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b514:	f8cd 800c 	str.w	r8, [sp, #12]
 801b518:	2330      	movs	r3, #48	; 0x30
 801b51a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b6c0 <_svfiprintf_r+0x1e8>
 801b51e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b522:	f04f 0901 	mov.w	r9, #1
 801b526:	4623      	mov	r3, r4
 801b528:	469a      	mov	sl, r3
 801b52a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b52e:	b10a      	cbz	r2, 801b534 <_svfiprintf_r+0x5c>
 801b530:	2a25      	cmp	r2, #37	; 0x25
 801b532:	d1f9      	bne.n	801b528 <_svfiprintf_r+0x50>
 801b534:	ebba 0b04 	subs.w	fp, sl, r4
 801b538:	d00b      	beq.n	801b552 <_svfiprintf_r+0x7a>
 801b53a:	465b      	mov	r3, fp
 801b53c:	4622      	mov	r2, r4
 801b53e:	4629      	mov	r1, r5
 801b540:	4638      	mov	r0, r7
 801b542:	f7ff ff6e 	bl	801b422 <__ssputs_r>
 801b546:	3001      	adds	r0, #1
 801b548:	f000 80a9 	beq.w	801b69e <_svfiprintf_r+0x1c6>
 801b54c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b54e:	445a      	add	r2, fp
 801b550:	9209      	str	r2, [sp, #36]	; 0x24
 801b552:	f89a 3000 	ldrb.w	r3, [sl]
 801b556:	2b00      	cmp	r3, #0
 801b558:	f000 80a1 	beq.w	801b69e <_svfiprintf_r+0x1c6>
 801b55c:	2300      	movs	r3, #0
 801b55e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b566:	f10a 0a01 	add.w	sl, sl, #1
 801b56a:	9304      	str	r3, [sp, #16]
 801b56c:	9307      	str	r3, [sp, #28]
 801b56e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b572:	931a      	str	r3, [sp, #104]	; 0x68
 801b574:	4654      	mov	r4, sl
 801b576:	2205      	movs	r2, #5
 801b578:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b57c:	4850      	ldr	r0, [pc, #320]	; (801b6c0 <_svfiprintf_r+0x1e8>)
 801b57e:	f7e4 fe27 	bl	80001d0 <memchr>
 801b582:	9a04      	ldr	r2, [sp, #16]
 801b584:	b9d8      	cbnz	r0, 801b5be <_svfiprintf_r+0xe6>
 801b586:	06d0      	lsls	r0, r2, #27
 801b588:	bf44      	itt	mi
 801b58a:	2320      	movmi	r3, #32
 801b58c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b590:	0711      	lsls	r1, r2, #28
 801b592:	bf44      	itt	mi
 801b594:	232b      	movmi	r3, #43	; 0x2b
 801b596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b59a:	f89a 3000 	ldrb.w	r3, [sl]
 801b59e:	2b2a      	cmp	r3, #42	; 0x2a
 801b5a0:	d015      	beq.n	801b5ce <_svfiprintf_r+0xf6>
 801b5a2:	9a07      	ldr	r2, [sp, #28]
 801b5a4:	4654      	mov	r4, sl
 801b5a6:	2000      	movs	r0, #0
 801b5a8:	f04f 0c0a 	mov.w	ip, #10
 801b5ac:	4621      	mov	r1, r4
 801b5ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b5b2:	3b30      	subs	r3, #48	; 0x30
 801b5b4:	2b09      	cmp	r3, #9
 801b5b6:	d94d      	bls.n	801b654 <_svfiprintf_r+0x17c>
 801b5b8:	b1b0      	cbz	r0, 801b5e8 <_svfiprintf_r+0x110>
 801b5ba:	9207      	str	r2, [sp, #28]
 801b5bc:	e014      	b.n	801b5e8 <_svfiprintf_r+0x110>
 801b5be:	eba0 0308 	sub.w	r3, r0, r8
 801b5c2:	fa09 f303 	lsl.w	r3, r9, r3
 801b5c6:	4313      	orrs	r3, r2
 801b5c8:	9304      	str	r3, [sp, #16]
 801b5ca:	46a2      	mov	sl, r4
 801b5cc:	e7d2      	b.n	801b574 <_svfiprintf_r+0x9c>
 801b5ce:	9b03      	ldr	r3, [sp, #12]
 801b5d0:	1d19      	adds	r1, r3, #4
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	9103      	str	r1, [sp, #12]
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	bfbb      	ittet	lt
 801b5da:	425b      	neglt	r3, r3
 801b5dc:	f042 0202 	orrlt.w	r2, r2, #2
 801b5e0:	9307      	strge	r3, [sp, #28]
 801b5e2:	9307      	strlt	r3, [sp, #28]
 801b5e4:	bfb8      	it	lt
 801b5e6:	9204      	strlt	r2, [sp, #16]
 801b5e8:	7823      	ldrb	r3, [r4, #0]
 801b5ea:	2b2e      	cmp	r3, #46	; 0x2e
 801b5ec:	d10c      	bne.n	801b608 <_svfiprintf_r+0x130>
 801b5ee:	7863      	ldrb	r3, [r4, #1]
 801b5f0:	2b2a      	cmp	r3, #42	; 0x2a
 801b5f2:	d134      	bne.n	801b65e <_svfiprintf_r+0x186>
 801b5f4:	9b03      	ldr	r3, [sp, #12]
 801b5f6:	1d1a      	adds	r2, r3, #4
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	9203      	str	r2, [sp, #12]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	bfb8      	it	lt
 801b600:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b604:	3402      	adds	r4, #2
 801b606:	9305      	str	r3, [sp, #20]
 801b608:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801b6d0 <_svfiprintf_r+0x1f8>
 801b60c:	7821      	ldrb	r1, [r4, #0]
 801b60e:	2203      	movs	r2, #3
 801b610:	4650      	mov	r0, sl
 801b612:	f7e4 fddd 	bl	80001d0 <memchr>
 801b616:	b138      	cbz	r0, 801b628 <_svfiprintf_r+0x150>
 801b618:	9b04      	ldr	r3, [sp, #16]
 801b61a:	eba0 000a 	sub.w	r0, r0, sl
 801b61e:	2240      	movs	r2, #64	; 0x40
 801b620:	4082      	lsls	r2, r0
 801b622:	4313      	orrs	r3, r2
 801b624:	3401      	adds	r4, #1
 801b626:	9304      	str	r3, [sp, #16]
 801b628:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b62c:	4825      	ldr	r0, [pc, #148]	; (801b6c4 <_svfiprintf_r+0x1ec>)
 801b62e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b632:	2206      	movs	r2, #6
 801b634:	f7e4 fdcc 	bl	80001d0 <memchr>
 801b638:	2800      	cmp	r0, #0
 801b63a:	d038      	beq.n	801b6ae <_svfiprintf_r+0x1d6>
 801b63c:	4b22      	ldr	r3, [pc, #136]	; (801b6c8 <_svfiprintf_r+0x1f0>)
 801b63e:	bb1b      	cbnz	r3, 801b688 <_svfiprintf_r+0x1b0>
 801b640:	9b03      	ldr	r3, [sp, #12]
 801b642:	3307      	adds	r3, #7
 801b644:	f023 0307 	bic.w	r3, r3, #7
 801b648:	3308      	adds	r3, #8
 801b64a:	9303      	str	r3, [sp, #12]
 801b64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b64e:	4433      	add	r3, r6
 801b650:	9309      	str	r3, [sp, #36]	; 0x24
 801b652:	e768      	b.n	801b526 <_svfiprintf_r+0x4e>
 801b654:	fb0c 3202 	mla	r2, ip, r2, r3
 801b658:	460c      	mov	r4, r1
 801b65a:	2001      	movs	r0, #1
 801b65c:	e7a6      	b.n	801b5ac <_svfiprintf_r+0xd4>
 801b65e:	2300      	movs	r3, #0
 801b660:	3401      	adds	r4, #1
 801b662:	9305      	str	r3, [sp, #20]
 801b664:	4619      	mov	r1, r3
 801b666:	f04f 0c0a 	mov.w	ip, #10
 801b66a:	4620      	mov	r0, r4
 801b66c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b670:	3a30      	subs	r2, #48	; 0x30
 801b672:	2a09      	cmp	r2, #9
 801b674:	d903      	bls.n	801b67e <_svfiprintf_r+0x1a6>
 801b676:	2b00      	cmp	r3, #0
 801b678:	d0c6      	beq.n	801b608 <_svfiprintf_r+0x130>
 801b67a:	9105      	str	r1, [sp, #20]
 801b67c:	e7c4      	b.n	801b608 <_svfiprintf_r+0x130>
 801b67e:	fb0c 2101 	mla	r1, ip, r1, r2
 801b682:	4604      	mov	r4, r0
 801b684:	2301      	movs	r3, #1
 801b686:	e7f0      	b.n	801b66a <_svfiprintf_r+0x192>
 801b688:	ab03      	add	r3, sp, #12
 801b68a:	9300      	str	r3, [sp, #0]
 801b68c:	462a      	mov	r2, r5
 801b68e:	4b0f      	ldr	r3, [pc, #60]	; (801b6cc <_svfiprintf_r+0x1f4>)
 801b690:	a904      	add	r1, sp, #16
 801b692:	4638      	mov	r0, r7
 801b694:	f7fc fea4 	bl	80183e0 <_printf_float>
 801b698:	1c42      	adds	r2, r0, #1
 801b69a:	4606      	mov	r6, r0
 801b69c:	d1d6      	bne.n	801b64c <_svfiprintf_r+0x174>
 801b69e:	89ab      	ldrh	r3, [r5, #12]
 801b6a0:	065b      	lsls	r3, r3, #25
 801b6a2:	f53f af2d 	bmi.w	801b500 <_svfiprintf_r+0x28>
 801b6a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b6a8:	b01d      	add	sp, #116	; 0x74
 801b6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ae:	ab03      	add	r3, sp, #12
 801b6b0:	9300      	str	r3, [sp, #0]
 801b6b2:	462a      	mov	r2, r5
 801b6b4:	4b05      	ldr	r3, [pc, #20]	; (801b6cc <_svfiprintf_r+0x1f4>)
 801b6b6:	a904      	add	r1, sp, #16
 801b6b8:	4638      	mov	r0, r7
 801b6ba:	f7fd f935 	bl	8018928 <_printf_i>
 801b6be:	e7eb      	b.n	801b698 <_svfiprintf_r+0x1c0>
 801b6c0:	0801fdde 	.word	0x0801fdde
 801b6c4:	0801fde8 	.word	0x0801fde8
 801b6c8:	080183e1 	.word	0x080183e1
 801b6cc:	0801b423 	.word	0x0801b423
 801b6d0:	0801fde4 	.word	0x0801fde4

0801b6d4 <malloc>:
 801b6d4:	4b02      	ldr	r3, [pc, #8]	; (801b6e0 <malloc+0xc>)
 801b6d6:	4601      	mov	r1, r0
 801b6d8:	6818      	ldr	r0, [r3, #0]
 801b6da:	f000 b823 	b.w	801b724 <_malloc_r>
 801b6de:	bf00      	nop
 801b6e0:	200001f0 	.word	0x200001f0

0801b6e4 <sbrk_aligned>:
 801b6e4:	b570      	push	{r4, r5, r6, lr}
 801b6e6:	4e0e      	ldr	r6, [pc, #56]	; (801b720 <sbrk_aligned+0x3c>)
 801b6e8:	460c      	mov	r4, r1
 801b6ea:	6831      	ldr	r1, [r6, #0]
 801b6ec:	4605      	mov	r5, r0
 801b6ee:	b911      	cbnz	r1, 801b6f6 <sbrk_aligned+0x12>
 801b6f0:	f000 fede 	bl	801c4b0 <_sbrk_r>
 801b6f4:	6030      	str	r0, [r6, #0]
 801b6f6:	4621      	mov	r1, r4
 801b6f8:	4628      	mov	r0, r5
 801b6fa:	f000 fed9 	bl	801c4b0 <_sbrk_r>
 801b6fe:	1c43      	adds	r3, r0, #1
 801b700:	d00a      	beq.n	801b718 <sbrk_aligned+0x34>
 801b702:	1cc4      	adds	r4, r0, #3
 801b704:	f024 0403 	bic.w	r4, r4, #3
 801b708:	42a0      	cmp	r0, r4
 801b70a:	d007      	beq.n	801b71c <sbrk_aligned+0x38>
 801b70c:	1a21      	subs	r1, r4, r0
 801b70e:	4628      	mov	r0, r5
 801b710:	f000 fece 	bl	801c4b0 <_sbrk_r>
 801b714:	3001      	adds	r0, #1
 801b716:	d101      	bne.n	801b71c <sbrk_aligned+0x38>
 801b718:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b71c:	4620      	mov	r0, r4
 801b71e:	bd70      	pop	{r4, r5, r6, pc}
 801b720:	20009510 	.word	0x20009510

0801b724 <_malloc_r>:
 801b724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b728:	1ccd      	adds	r5, r1, #3
 801b72a:	f025 0503 	bic.w	r5, r5, #3
 801b72e:	3508      	adds	r5, #8
 801b730:	2d0c      	cmp	r5, #12
 801b732:	bf38      	it	cc
 801b734:	250c      	movcc	r5, #12
 801b736:	2d00      	cmp	r5, #0
 801b738:	4607      	mov	r7, r0
 801b73a:	db01      	blt.n	801b740 <_malloc_r+0x1c>
 801b73c:	42a9      	cmp	r1, r5
 801b73e:	d905      	bls.n	801b74c <_malloc_r+0x28>
 801b740:	230c      	movs	r3, #12
 801b742:	603b      	str	r3, [r7, #0]
 801b744:	2600      	movs	r6, #0
 801b746:	4630      	mov	r0, r6
 801b748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b74c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b820 <_malloc_r+0xfc>
 801b750:	f000 f928 	bl	801b9a4 <__malloc_lock>
 801b754:	f8d8 3000 	ldr.w	r3, [r8]
 801b758:	461c      	mov	r4, r3
 801b75a:	bb5c      	cbnz	r4, 801b7b4 <_malloc_r+0x90>
 801b75c:	4629      	mov	r1, r5
 801b75e:	4638      	mov	r0, r7
 801b760:	f7ff ffc0 	bl	801b6e4 <sbrk_aligned>
 801b764:	1c43      	adds	r3, r0, #1
 801b766:	4604      	mov	r4, r0
 801b768:	d155      	bne.n	801b816 <_malloc_r+0xf2>
 801b76a:	f8d8 4000 	ldr.w	r4, [r8]
 801b76e:	4626      	mov	r6, r4
 801b770:	2e00      	cmp	r6, #0
 801b772:	d145      	bne.n	801b800 <_malloc_r+0xdc>
 801b774:	2c00      	cmp	r4, #0
 801b776:	d048      	beq.n	801b80a <_malloc_r+0xe6>
 801b778:	6823      	ldr	r3, [r4, #0]
 801b77a:	4631      	mov	r1, r6
 801b77c:	4638      	mov	r0, r7
 801b77e:	eb04 0903 	add.w	r9, r4, r3
 801b782:	f000 fe95 	bl	801c4b0 <_sbrk_r>
 801b786:	4581      	cmp	r9, r0
 801b788:	d13f      	bne.n	801b80a <_malloc_r+0xe6>
 801b78a:	6821      	ldr	r1, [r4, #0]
 801b78c:	1a6d      	subs	r5, r5, r1
 801b78e:	4629      	mov	r1, r5
 801b790:	4638      	mov	r0, r7
 801b792:	f7ff ffa7 	bl	801b6e4 <sbrk_aligned>
 801b796:	3001      	adds	r0, #1
 801b798:	d037      	beq.n	801b80a <_malloc_r+0xe6>
 801b79a:	6823      	ldr	r3, [r4, #0]
 801b79c:	442b      	add	r3, r5
 801b79e:	6023      	str	r3, [r4, #0]
 801b7a0:	f8d8 3000 	ldr.w	r3, [r8]
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d038      	beq.n	801b81a <_malloc_r+0xf6>
 801b7a8:	685a      	ldr	r2, [r3, #4]
 801b7aa:	42a2      	cmp	r2, r4
 801b7ac:	d12b      	bne.n	801b806 <_malloc_r+0xe2>
 801b7ae:	2200      	movs	r2, #0
 801b7b0:	605a      	str	r2, [r3, #4]
 801b7b2:	e00f      	b.n	801b7d4 <_malloc_r+0xb0>
 801b7b4:	6822      	ldr	r2, [r4, #0]
 801b7b6:	1b52      	subs	r2, r2, r5
 801b7b8:	d41f      	bmi.n	801b7fa <_malloc_r+0xd6>
 801b7ba:	2a0b      	cmp	r2, #11
 801b7bc:	d917      	bls.n	801b7ee <_malloc_r+0xca>
 801b7be:	1961      	adds	r1, r4, r5
 801b7c0:	42a3      	cmp	r3, r4
 801b7c2:	6025      	str	r5, [r4, #0]
 801b7c4:	bf18      	it	ne
 801b7c6:	6059      	strne	r1, [r3, #4]
 801b7c8:	6863      	ldr	r3, [r4, #4]
 801b7ca:	bf08      	it	eq
 801b7cc:	f8c8 1000 	streq.w	r1, [r8]
 801b7d0:	5162      	str	r2, [r4, r5]
 801b7d2:	604b      	str	r3, [r1, #4]
 801b7d4:	4638      	mov	r0, r7
 801b7d6:	f104 060b 	add.w	r6, r4, #11
 801b7da:	f000 f8e9 	bl	801b9b0 <__malloc_unlock>
 801b7de:	f026 0607 	bic.w	r6, r6, #7
 801b7e2:	1d23      	adds	r3, r4, #4
 801b7e4:	1af2      	subs	r2, r6, r3
 801b7e6:	d0ae      	beq.n	801b746 <_malloc_r+0x22>
 801b7e8:	1b9b      	subs	r3, r3, r6
 801b7ea:	50a3      	str	r3, [r4, r2]
 801b7ec:	e7ab      	b.n	801b746 <_malloc_r+0x22>
 801b7ee:	42a3      	cmp	r3, r4
 801b7f0:	6862      	ldr	r2, [r4, #4]
 801b7f2:	d1dd      	bne.n	801b7b0 <_malloc_r+0x8c>
 801b7f4:	f8c8 2000 	str.w	r2, [r8]
 801b7f8:	e7ec      	b.n	801b7d4 <_malloc_r+0xb0>
 801b7fa:	4623      	mov	r3, r4
 801b7fc:	6864      	ldr	r4, [r4, #4]
 801b7fe:	e7ac      	b.n	801b75a <_malloc_r+0x36>
 801b800:	4634      	mov	r4, r6
 801b802:	6876      	ldr	r6, [r6, #4]
 801b804:	e7b4      	b.n	801b770 <_malloc_r+0x4c>
 801b806:	4613      	mov	r3, r2
 801b808:	e7cc      	b.n	801b7a4 <_malloc_r+0x80>
 801b80a:	230c      	movs	r3, #12
 801b80c:	603b      	str	r3, [r7, #0]
 801b80e:	4638      	mov	r0, r7
 801b810:	f000 f8ce 	bl	801b9b0 <__malloc_unlock>
 801b814:	e797      	b.n	801b746 <_malloc_r+0x22>
 801b816:	6025      	str	r5, [r4, #0]
 801b818:	e7dc      	b.n	801b7d4 <_malloc_r+0xb0>
 801b81a:	605b      	str	r3, [r3, #4]
 801b81c:	deff      	udf	#255	; 0xff
 801b81e:	bf00      	nop
 801b820:	2000950c 	.word	0x2000950c

0801b824 <__ascii_mbtowc>:
 801b824:	b082      	sub	sp, #8
 801b826:	b901      	cbnz	r1, 801b82a <__ascii_mbtowc+0x6>
 801b828:	a901      	add	r1, sp, #4
 801b82a:	b142      	cbz	r2, 801b83e <__ascii_mbtowc+0x1a>
 801b82c:	b14b      	cbz	r3, 801b842 <__ascii_mbtowc+0x1e>
 801b82e:	7813      	ldrb	r3, [r2, #0]
 801b830:	600b      	str	r3, [r1, #0]
 801b832:	7812      	ldrb	r2, [r2, #0]
 801b834:	1e10      	subs	r0, r2, #0
 801b836:	bf18      	it	ne
 801b838:	2001      	movne	r0, #1
 801b83a:	b002      	add	sp, #8
 801b83c:	4770      	bx	lr
 801b83e:	4610      	mov	r0, r2
 801b840:	e7fb      	b.n	801b83a <__ascii_mbtowc+0x16>
 801b842:	f06f 0001 	mvn.w	r0, #1
 801b846:	e7f8      	b.n	801b83a <__ascii_mbtowc+0x16>

0801b848 <__sflush_r>:
 801b848:	898a      	ldrh	r2, [r1, #12]
 801b84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b84e:	4605      	mov	r5, r0
 801b850:	0710      	lsls	r0, r2, #28
 801b852:	460c      	mov	r4, r1
 801b854:	d458      	bmi.n	801b908 <__sflush_r+0xc0>
 801b856:	684b      	ldr	r3, [r1, #4]
 801b858:	2b00      	cmp	r3, #0
 801b85a:	dc05      	bgt.n	801b868 <__sflush_r+0x20>
 801b85c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b85e:	2b00      	cmp	r3, #0
 801b860:	dc02      	bgt.n	801b868 <__sflush_r+0x20>
 801b862:	2000      	movs	r0, #0
 801b864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b86a:	2e00      	cmp	r6, #0
 801b86c:	d0f9      	beq.n	801b862 <__sflush_r+0x1a>
 801b86e:	2300      	movs	r3, #0
 801b870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b874:	682f      	ldr	r7, [r5, #0]
 801b876:	6a21      	ldr	r1, [r4, #32]
 801b878:	602b      	str	r3, [r5, #0]
 801b87a:	d032      	beq.n	801b8e2 <__sflush_r+0x9a>
 801b87c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b87e:	89a3      	ldrh	r3, [r4, #12]
 801b880:	075a      	lsls	r2, r3, #29
 801b882:	d505      	bpl.n	801b890 <__sflush_r+0x48>
 801b884:	6863      	ldr	r3, [r4, #4]
 801b886:	1ac0      	subs	r0, r0, r3
 801b888:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b88a:	b10b      	cbz	r3, 801b890 <__sflush_r+0x48>
 801b88c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b88e:	1ac0      	subs	r0, r0, r3
 801b890:	2300      	movs	r3, #0
 801b892:	4602      	mov	r2, r0
 801b894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b896:	6a21      	ldr	r1, [r4, #32]
 801b898:	4628      	mov	r0, r5
 801b89a:	47b0      	blx	r6
 801b89c:	1c43      	adds	r3, r0, #1
 801b89e:	89a3      	ldrh	r3, [r4, #12]
 801b8a0:	d106      	bne.n	801b8b0 <__sflush_r+0x68>
 801b8a2:	6829      	ldr	r1, [r5, #0]
 801b8a4:	291d      	cmp	r1, #29
 801b8a6:	d82b      	bhi.n	801b900 <__sflush_r+0xb8>
 801b8a8:	4a29      	ldr	r2, [pc, #164]	; (801b950 <__sflush_r+0x108>)
 801b8aa:	410a      	asrs	r2, r1
 801b8ac:	07d6      	lsls	r6, r2, #31
 801b8ae:	d427      	bmi.n	801b900 <__sflush_r+0xb8>
 801b8b0:	2200      	movs	r2, #0
 801b8b2:	6062      	str	r2, [r4, #4]
 801b8b4:	04d9      	lsls	r1, r3, #19
 801b8b6:	6922      	ldr	r2, [r4, #16]
 801b8b8:	6022      	str	r2, [r4, #0]
 801b8ba:	d504      	bpl.n	801b8c6 <__sflush_r+0x7e>
 801b8bc:	1c42      	adds	r2, r0, #1
 801b8be:	d101      	bne.n	801b8c4 <__sflush_r+0x7c>
 801b8c0:	682b      	ldr	r3, [r5, #0]
 801b8c2:	b903      	cbnz	r3, 801b8c6 <__sflush_r+0x7e>
 801b8c4:	6560      	str	r0, [r4, #84]	; 0x54
 801b8c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b8c8:	602f      	str	r7, [r5, #0]
 801b8ca:	2900      	cmp	r1, #0
 801b8cc:	d0c9      	beq.n	801b862 <__sflush_r+0x1a>
 801b8ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b8d2:	4299      	cmp	r1, r3
 801b8d4:	d002      	beq.n	801b8dc <__sflush_r+0x94>
 801b8d6:	4628      	mov	r0, r5
 801b8d8:	f7ff fa00 	bl	801acdc <_free_r>
 801b8dc:	2000      	movs	r0, #0
 801b8de:	6360      	str	r0, [r4, #52]	; 0x34
 801b8e0:	e7c0      	b.n	801b864 <__sflush_r+0x1c>
 801b8e2:	2301      	movs	r3, #1
 801b8e4:	4628      	mov	r0, r5
 801b8e6:	47b0      	blx	r6
 801b8e8:	1c41      	adds	r1, r0, #1
 801b8ea:	d1c8      	bne.n	801b87e <__sflush_r+0x36>
 801b8ec:	682b      	ldr	r3, [r5, #0]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d0c5      	beq.n	801b87e <__sflush_r+0x36>
 801b8f2:	2b1d      	cmp	r3, #29
 801b8f4:	d001      	beq.n	801b8fa <__sflush_r+0xb2>
 801b8f6:	2b16      	cmp	r3, #22
 801b8f8:	d101      	bne.n	801b8fe <__sflush_r+0xb6>
 801b8fa:	602f      	str	r7, [r5, #0]
 801b8fc:	e7b1      	b.n	801b862 <__sflush_r+0x1a>
 801b8fe:	89a3      	ldrh	r3, [r4, #12]
 801b900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b904:	81a3      	strh	r3, [r4, #12]
 801b906:	e7ad      	b.n	801b864 <__sflush_r+0x1c>
 801b908:	690f      	ldr	r7, [r1, #16]
 801b90a:	2f00      	cmp	r7, #0
 801b90c:	d0a9      	beq.n	801b862 <__sflush_r+0x1a>
 801b90e:	0793      	lsls	r3, r2, #30
 801b910:	680e      	ldr	r6, [r1, #0]
 801b912:	bf08      	it	eq
 801b914:	694b      	ldreq	r3, [r1, #20]
 801b916:	600f      	str	r7, [r1, #0]
 801b918:	bf18      	it	ne
 801b91a:	2300      	movne	r3, #0
 801b91c:	eba6 0807 	sub.w	r8, r6, r7
 801b920:	608b      	str	r3, [r1, #8]
 801b922:	f1b8 0f00 	cmp.w	r8, #0
 801b926:	dd9c      	ble.n	801b862 <__sflush_r+0x1a>
 801b928:	6a21      	ldr	r1, [r4, #32]
 801b92a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b92c:	4643      	mov	r3, r8
 801b92e:	463a      	mov	r2, r7
 801b930:	4628      	mov	r0, r5
 801b932:	47b0      	blx	r6
 801b934:	2800      	cmp	r0, #0
 801b936:	dc06      	bgt.n	801b946 <__sflush_r+0xfe>
 801b938:	89a3      	ldrh	r3, [r4, #12]
 801b93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b93e:	81a3      	strh	r3, [r4, #12]
 801b940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b944:	e78e      	b.n	801b864 <__sflush_r+0x1c>
 801b946:	4407      	add	r7, r0
 801b948:	eba8 0800 	sub.w	r8, r8, r0
 801b94c:	e7e9      	b.n	801b922 <__sflush_r+0xda>
 801b94e:	bf00      	nop
 801b950:	dfbffffe 	.word	0xdfbffffe

0801b954 <_fflush_r>:
 801b954:	b538      	push	{r3, r4, r5, lr}
 801b956:	690b      	ldr	r3, [r1, #16]
 801b958:	4605      	mov	r5, r0
 801b95a:	460c      	mov	r4, r1
 801b95c:	b913      	cbnz	r3, 801b964 <_fflush_r+0x10>
 801b95e:	2500      	movs	r5, #0
 801b960:	4628      	mov	r0, r5
 801b962:	bd38      	pop	{r3, r4, r5, pc}
 801b964:	b118      	cbz	r0, 801b96e <_fflush_r+0x1a>
 801b966:	6a03      	ldr	r3, [r0, #32]
 801b968:	b90b      	cbnz	r3, 801b96e <_fflush_r+0x1a>
 801b96a:	f7fd fba9 	bl	80190c0 <__sinit>
 801b96e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b972:	2b00      	cmp	r3, #0
 801b974:	d0f3      	beq.n	801b95e <_fflush_r+0xa>
 801b976:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b978:	07d0      	lsls	r0, r2, #31
 801b97a:	d404      	bmi.n	801b986 <_fflush_r+0x32>
 801b97c:	0599      	lsls	r1, r3, #22
 801b97e:	d402      	bmi.n	801b986 <_fflush_r+0x32>
 801b980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b982:	f7fe fb11 	bl	8019fa8 <__retarget_lock_acquire_recursive>
 801b986:	4628      	mov	r0, r5
 801b988:	4621      	mov	r1, r4
 801b98a:	f7ff ff5d 	bl	801b848 <__sflush_r>
 801b98e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b990:	07da      	lsls	r2, r3, #31
 801b992:	4605      	mov	r5, r0
 801b994:	d4e4      	bmi.n	801b960 <_fflush_r+0xc>
 801b996:	89a3      	ldrh	r3, [r4, #12]
 801b998:	059b      	lsls	r3, r3, #22
 801b99a:	d4e1      	bmi.n	801b960 <_fflush_r+0xc>
 801b99c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b99e:	f7fe fb04 	bl	8019faa <__retarget_lock_release_recursive>
 801b9a2:	e7dd      	b.n	801b960 <_fflush_r+0xc>

0801b9a4 <__malloc_lock>:
 801b9a4:	4801      	ldr	r0, [pc, #4]	; (801b9ac <__malloc_lock+0x8>)
 801b9a6:	f7fe baff 	b.w	8019fa8 <__retarget_lock_acquire_recursive>
 801b9aa:	bf00      	nop
 801b9ac:	20009508 	.word	0x20009508

0801b9b0 <__malloc_unlock>:
 801b9b0:	4801      	ldr	r0, [pc, #4]	; (801b9b8 <__malloc_unlock+0x8>)
 801b9b2:	f7fe bafa 	b.w	8019faa <__retarget_lock_release_recursive>
 801b9b6:	bf00      	nop
 801b9b8:	20009508 	.word	0x20009508

0801b9bc <_Balloc>:
 801b9bc:	b570      	push	{r4, r5, r6, lr}
 801b9be:	69c6      	ldr	r6, [r0, #28]
 801b9c0:	4604      	mov	r4, r0
 801b9c2:	460d      	mov	r5, r1
 801b9c4:	b976      	cbnz	r6, 801b9e4 <_Balloc+0x28>
 801b9c6:	2010      	movs	r0, #16
 801b9c8:	f7ff fe84 	bl	801b6d4 <malloc>
 801b9cc:	4602      	mov	r2, r0
 801b9ce:	61e0      	str	r0, [r4, #28]
 801b9d0:	b920      	cbnz	r0, 801b9dc <_Balloc+0x20>
 801b9d2:	4b18      	ldr	r3, [pc, #96]	; (801ba34 <_Balloc+0x78>)
 801b9d4:	4818      	ldr	r0, [pc, #96]	; (801ba38 <_Balloc+0x7c>)
 801b9d6:	216b      	movs	r1, #107	; 0x6b
 801b9d8:	f000 fd8c 	bl	801c4f4 <__assert_func>
 801b9dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b9e0:	6006      	str	r6, [r0, #0]
 801b9e2:	60c6      	str	r6, [r0, #12]
 801b9e4:	69e6      	ldr	r6, [r4, #28]
 801b9e6:	68f3      	ldr	r3, [r6, #12]
 801b9e8:	b183      	cbz	r3, 801ba0c <_Balloc+0x50>
 801b9ea:	69e3      	ldr	r3, [r4, #28]
 801b9ec:	68db      	ldr	r3, [r3, #12]
 801b9ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b9f2:	b9b8      	cbnz	r0, 801ba24 <_Balloc+0x68>
 801b9f4:	2101      	movs	r1, #1
 801b9f6:	fa01 f605 	lsl.w	r6, r1, r5
 801b9fa:	1d72      	adds	r2, r6, #5
 801b9fc:	0092      	lsls	r2, r2, #2
 801b9fe:	4620      	mov	r0, r4
 801ba00:	f000 fd96 	bl	801c530 <_calloc_r>
 801ba04:	b160      	cbz	r0, 801ba20 <_Balloc+0x64>
 801ba06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ba0a:	e00e      	b.n	801ba2a <_Balloc+0x6e>
 801ba0c:	2221      	movs	r2, #33	; 0x21
 801ba0e:	2104      	movs	r1, #4
 801ba10:	4620      	mov	r0, r4
 801ba12:	f000 fd8d 	bl	801c530 <_calloc_r>
 801ba16:	69e3      	ldr	r3, [r4, #28]
 801ba18:	60f0      	str	r0, [r6, #12]
 801ba1a:	68db      	ldr	r3, [r3, #12]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d1e4      	bne.n	801b9ea <_Balloc+0x2e>
 801ba20:	2000      	movs	r0, #0
 801ba22:	bd70      	pop	{r4, r5, r6, pc}
 801ba24:	6802      	ldr	r2, [r0, #0]
 801ba26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ba2a:	2300      	movs	r3, #0
 801ba2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ba30:	e7f7      	b.n	801ba22 <_Balloc+0x66>
 801ba32:	bf00      	nop
 801ba34:	0801fcfe 	.word	0x0801fcfe
 801ba38:	0801fdef 	.word	0x0801fdef

0801ba3c <_Bfree>:
 801ba3c:	b570      	push	{r4, r5, r6, lr}
 801ba3e:	69c6      	ldr	r6, [r0, #28]
 801ba40:	4605      	mov	r5, r0
 801ba42:	460c      	mov	r4, r1
 801ba44:	b976      	cbnz	r6, 801ba64 <_Bfree+0x28>
 801ba46:	2010      	movs	r0, #16
 801ba48:	f7ff fe44 	bl	801b6d4 <malloc>
 801ba4c:	4602      	mov	r2, r0
 801ba4e:	61e8      	str	r0, [r5, #28]
 801ba50:	b920      	cbnz	r0, 801ba5c <_Bfree+0x20>
 801ba52:	4b09      	ldr	r3, [pc, #36]	; (801ba78 <_Bfree+0x3c>)
 801ba54:	4809      	ldr	r0, [pc, #36]	; (801ba7c <_Bfree+0x40>)
 801ba56:	218f      	movs	r1, #143	; 0x8f
 801ba58:	f000 fd4c 	bl	801c4f4 <__assert_func>
 801ba5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ba60:	6006      	str	r6, [r0, #0]
 801ba62:	60c6      	str	r6, [r0, #12]
 801ba64:	b13c      	cbz	r4, 801ba76 <_Bfree+0x3a>
 801ba66:	69eb      	ldr	r3, [r5, #28]
 801ba68:	6862      	ldr	r2, [r4, #4]
 801ba6a:	68db      	ldr	r3, [r3, #12]
 801ba6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ba70:	6021      	str	r1, [r4, #0]
 801ba72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ba76:	bd70      	pop	{r4, r5, r6, pc}
 801ba78:	0801fcfe 	.word	0x0801fcfe
 801ba7c:	0801fdef 	.word	0x0801fdef

0801ba80 <__multadd>:
 801ba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba84:	690d      	ldr	r5, [r1, #16]
 801ba86:	4607      	mov	r7, r0
 801ba88:	460c      	mov	r4, r1
 801ba8a:	461e      	mov	r6, r3
 801ba8c:	f101 0c14 	add.w	ip, r1, #20
 801ba90:	2000      	movs	r0, #0
 801ba92:	f8dc 3000 	ldr.w	r3, [ip]
 801ba96:	b299      	uxth	r1, r3
 801ba98:	fb02 6101 	mla	r1, r2, r1, r6
 801ba9c:	0c1e      	lsrs	r6, r3, #16
 801ba9e:	0c0b      	lsrs	r3, r1, #16
 801baa0:	fb02 3306 	mla	r3, r2, r6, r3
 801baa4:	b289      	uxth	r1, r1
 801baa6:	3001      	adds	r0, #1
 801baa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801baac:	4285      	cmp	r5, r0
 801baae:	f84c 1b04 	str.w	r1, [ip], #4
 801bab2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801bab6:	dcec      	bgt.n	801ba92 <__multadd+0x12>
 801bab8:	b30e      	cbz	r6, 801bafe <__multadd+0x7e>
 801baba:	68a3      	ldr	r3, [r4, #8]
 801babc:	42ab      	cmp	r3, r5
 801babe:	dc19      	bgt.n	801baf4 <__multadd+0x74>
 801bac0:	6861      	ldr	r1, [r4, #4]
 801bac2:	4638      	mov	r0, r7
 801bac4:	3101      	adds	r1, #1
 801bac6:	f7ff ff79 	bl	801b9bc <_Balloc>
 801baca:	4680      	mov	r8, r0
 801bacc:	b928      	cbnz	r0, 801bada <__multadd+0x5a>
 801bace:	4602      	mov	r2, r0
 801bad0:	4b0c      	ldr	r3, [pc, #48]	; (801bb04 <__multadd+0x84>)
 801bad2:	480d      	ldr	r0, [pc, #52]	; (801bb08 <__multadd+0x88>)
 801bad4:	21ba      	movs	r1, #186	; 0xba
 801bad6:	f000 fd0d 	bl	801c4f4 <__assert_func>
 801bada:	6922      	ldr	r2, [r4, #16]
 801badc:	3202      	adds	r2, #2
 801bade:	f104 010c 	add.w	r1, r4, #12
 801bae2:	0092      	lsls	r2, r2, #2
 801bae4:	300c      	adds	r0, #12
 801bae6:	f7fe fa61 	bl	8019fac <memcpy>
 801baea:	4621      	mov	r1, r4
 801baec:	4638      	mov	r0, r7
 801baee:	f7ff ffa5 	bl	801ba3c <_Bfree>
 801baf2:	4644      	mov	r4, r8
 801baf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801baf8:	3501      	adds	r5, #1
 801bafa:	615e      	str	r6, [r3, #20]
 801bafc:	6125      	str	r5, [r4, #16]
 801bafe:	4620      	mov	r0, r4
 801bb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb04:	0801fd6d 	.word	0x0801fd6d
 801bb08:	0801fdef 	.word	0x0801fdef

0801bb0c <__s2b>:
 801bb0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb10:	460c      	mov	r4, r1
 801bb12:	4615      	mov	r5, r2
 801bb14:	461f      	mov	r7, r3
 801bb16:	2209      	movs	r2, #9
 801bb18:	3308      	adds	r3, #8
 801bb1a:	4606      	mov	r6, r0
 801bb1c:	fb93 f3f2 	sdiv	r3, r3, r2
 801bb20:	2100      	movs	r1, #0
 801bb22:	2201      	movs	r2, #1
 801bb24:	429a      	cmp	r2, r3
 801bb26:	db09      	blt.n	801bb3c <__s2b+0x30>
 801bb28:	4630      	mov	r0, r6
 801bb2a:	f7ff ff47 	bl	801b9bc <_Balloc>
 801bb2e:	b940      	cbnz	r0, 801bb42 <__s2b+0x36>
 801bb30:	4602      	mov	r2, r0
 801bb32:	4b19      	ldr	r3, [pc, #100]	; (801bb98 <__s2b+0x8c>)
 801bb34:	4819      	ldr	r0, [pc, #100]	; (801bb9c <__s2b+0x90>)
 801bb36:	21d3      	movs	r1, #211	; 0xd3
 801bb38:	f000 fcdc 	bl	801c4f4 <__assert_func>
 801bb3c:	0052      	lsls	r2, r2, #1
 801bb3e:	3101      	adds	r1, #1
 801bb40:	e7f0      	b.n	801bb24 <__s2b+0x18>
 801bb42:	9b08      	ldr	r3, [sp, #32]
 801bb44:	6143      	str	r3, [r0, #20]
 801bb46:	2d09      	cmp	r5, #9
 801bb48:	f04f 0301 	mov.w	r3, #1
 801bb4c:	6103      	str	r3, [r0, #16]
 801bb4e:	dd16      	ble.n	801bb7e <__s2b+0x72>
 801bb50:	f104 0909 	add.w	r9, r4, #9
 801bb54:	46c8      	mov	r8, r9
 801bb56:	442c      	add	r4, r5
 801bb58:	f818 3b01 	ldrb.w	r3, [r8], #1
 801bb5c:	4601      	mov	r1, r0
 801bb5e:	3b30      	subs	r3, #48	; 0x30
 801bb60:	220a      	movs	r2, #10
 801bb62:	4630      	mov	r0, r6
 801bb64:	f7ff ff8c 	bl	801ba80 <__multadd>
 801bb68:	45a0      	cmp	r8, r4
 801bb6a:	d1f5      	bne.n	801bb58 <__s2b+0x4c>
 801bb6c:	f1a5 0408 	sub.w	r4, r5, #8
 801bb70:	444c      	add	r4, r9
 801bb72:	1b2d      	subs	r5, r5, r4
 801bb74:	1963      	adds	r3, r4, r5
 801bb76:	42bb      	cmp	r3, r7
 801bb78:	db04      	blt.n	801bb84 <__s2b+0x78>
 801bb7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb7e:	340a      	adds	r4, #10
 801bb80:	2509      	movs	r5, #9
 801bb82:	e7f6      	b.n	801bb72 <__s2b+0x66>
 801bb84:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bb88:	4601      	mov	r1, r0
 801bb8a:	3b30      	subs	r3, #48	; 0x30
 801bb8c:	220a      	movs	r2, #10
 801bb8e:	4630      	mov	r0, r6
 801bb90:	f7ff ff76 	bl	801ba80 <__multadd>
 801bb94:	e7ee      	b.n	801bb74 <__s2b+0x68>
 801bb96:	bf00      	nop
 801bb98:	0801fd6d 	.word	0x0801fd6d
 801bb9c:	0801fdef 	.word	0x0801fdef

0801bba0 <__hi0bits>:
 801bba0:	0c03      	lsrs	r3, r0, #16
 801bba2:	041b      	lsls	r3, r3, #16
 801bba4:	b9d3      	cbnz	r3, 801bbdc <__hi0bits+0x3c>
 801bba6:	0400      	lsls	r0, r0, #16
 801bba8:	2310      	movs	r3, #16
 801bbaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801bbae:	bf04      	itt	eq
 801bbb0:	0200      	lsleq	r0, r0, #8
 801bbb2:	3308      	addeq	r3, #8
 801bbb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801bbb8:	bf04      	itt	eq
 801bbba:	0100      	lsleq	r0, r0, #4
 801bbbc:	3304      	addeq	r3, #4
 801bbbe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801bbc2:	bf04      	itt	eq
 801bbc4:	0080      	lsleq	r0, r0, #2
 801bbc6:	3302      	addeq	r3, #2
 801bbc8:	2800      	cmp	r0, #0
 801bbca:	db05      	blt.n	801bbd8 <__hi0bits+0x38>
 801bbcc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801bbd0:	f103 0301 	add.w	r3, r3, #1
 801bbd4:	bf08      	it	eq
 801bbd6:	2320      	moveq	r3, #32
 801bbd8:	4618      	mov	r0, r3
 801bbda:	4770      	bx	lr
 801bbdc:	2300      	movs	r3, #0
 801bbde:	e7e4      	b.n	801bbaa <__hi0bits+0xa>

0801bbe0 <__lo0bits>:
 801bbe0:	6803      	ldr	r3, [r0, #0]
 801bbe2:	f013 0207 	ands.w	r2, r3, #7
 801bbe6:	d00c      	beq.n	801bc02 <__lo0bits+0x22>
 801bbe8:	07d9      	lsls	r1, r3, #31
 801bbea:	d422      	bmi.n	801bc32 <__lo0bits+0x52>
 801bbec:	079a      	lsls	r2, r3, #30
 801bbee:	bf49      	itett	mi
 801bbf0:	085b      	lsrmi	r3, r3, #1
 801bbf2:	089b      	lsrpl	r3, r3, #2
 801bbf4:	6003      	strmi	r3, [r0, #0]
 801bbf6:	2201      	movmi	r2, #1
 801bbf8:	bf5c      	itt	pl
 801bbfa:	6003      	strpl	r3, [r0, #0]
 801bbfc:	2202      	movpl	r2, #2
 801bbfe:	4610      	mov	r0, r2
 801bc00:	4770      	bx	lr
 801bc02:	b299      	uxth	r1, r3
 801bc04:	b909      	cbnz	r1, 801bc0a <__lo0bits+0x2a>
 801bc06:	0c1b      	lsrs	r3, r3, #16
 801bc08:	2210      	movs	r2, #16
 801bc0a:	b2d9      	uxtb	r1, r3
 801bc0c:	b909      	cbnz	r1, 801bc12 <__lo0bits+0x32>
 801bc0e:	3208      	adds	r2, #8
 801bc10:	0a1b      	lsrs	r3, r3, #8
 801bc12:	0719      	lsls	r1, r3, #28
 801bc14:	bf04      	itt	eq
 801bc16:	091b      	lsreq	r3, r3, #4
 801bc18:	3204      	addeq	r2, #4
 801bc1a:	0799      	lsls	r1, r3, #30
 801bc1c:	bf04      	itt	eq
 801bc1e:	089b      	lsreq	r3, r3, #2
 801bc20:	3202      	addeq	r2, #2
 801bc22:	07d9      	lsls	r1, r3, #31
 801bc24:	d403      	bmi.n	801bc2e <__lo0bits+0x4e>
 801bc26:	085b      	lsrs	r3, r3, #1
 801bc28:	f102 0201 	add.w	r2, r2, #1
 801bc2c:	d003      	beq.n	801bc36 <__lo0bits+0x56>
 801bc2e:	6003      	str	r3, [r0, #0]
 801bc30:	e7e5      	b.n	801bbfe <__lo0bits+0x1e>
 801bc32:	2200      	movs	r2, #0
 801bc34:	e7e3      	b.n	801bbfe <__lo0bits+0x1e>
 801bc36:	2220      	movs	r2, #32
 801bc38:	e7e1      	b.n	801bbfe <__lo0bits+0x1e>
	...

0801bc3c <__i2b>:
 801bc3c:	b510      	push	{r4, lr}
 801bc3e:	460c      	mov	r4, r1
 801bc40:	2101      	movs	r1, #1
 801bc42:	f7ff febb 	bl	801b9bc <_Balloc>
 801bc46:	4602      	mov	r2, r0
 801bc48:	b928      	cbnz	r0, 801bc56 <__i2b+0x1a>
 801bc4a:	4b05      	ldr	r3, [pc, #20]	; (801bc60 <__i2b+0x24>)
 801bc4c:	4805      	ldr	r0, [pc, #20]	; (801bc64 <__i2b+0x28>)
 801bc4e:	f240 1145 	movw	r1, #325	; 0x145
 801bc52:	f000 fc4f 	bl	801c4f4 <__assert_func>
 801bc56:	2301      	movs	r3, #1
 801bc58:	6144      	str	r4, [r0, #20]
 801bc5a:	6103      	str	r3, [r0, #16]
 801bc5c:	bd10      	pop	{r4, pc}
 801bc5e:	bf00      	nop
 801bc60:	0801fd6d 	.word	0x0801fd6d
 801bc64:	0801fdef 	.word	0x0801fdef

0801bc68 <__multiply>:
 801bc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc6c:	4691      	mov	r9, r2
 801bc6e:	690a      	ldr	r2, [r1, #16]
 801bc70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bc74:	429a      	cmp	r2, r3
 801bc76:	bfb8      	it	lt
 801bc78:	460b      	movlt	r3, r1
 801bc7a:	460c      	mov	r4, r1
 801bc7c:	bfbc      	itt	lt
 801bc7e:	464c      	movlt	r4, r9
 801bc80:	4699      	movlt	r9, r3
 801bc82:	6927      	ldr	r7, [r4, #16]
 801bc84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801bc88:	68a3      	ldr	r3, [r4, #8]
 801bc8a:	6861      	ldr	r1, [r4, #4]
 801bc8c:	eb07 060a 	add.w	r6, r7, sl
 801bc90:	42b3      	cmp	r3, r6
 801bc92:	b085      	sub	sp, #20
 801bc94:	bfb8      	it	lt
 801bc96:	3101      	addlt	r1, #1
 801bc98:	f7ff fe90 	bl	801b9bc <_Balloc>
 801bc9c:	b930      	cbnz	r0, 801bcac <__multiply+0x44>
 801bc9e:	4602      	mov	r2, r0
 801bca0:	4b44      	ldr	r3, [pc, #272]	; (801bdb4 <__multiply+0x14c>)
 801bca2:	4845      	ldr	r0, [pc, #276]	; (801bdb8 <__multiply+0x150>)
 801bca4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801bca8:	f000 fc24 	bl	801c4f4 <__assert_func>
 801bcac:	f100 0514 	add.w	r5, r0, #20
 801bcb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801bcb4:	462b      	mov	r3, r5
 801bcb6:	2200      	movs	r2, #0
 801bcb8:	4543      	cmp	r3, r8
 801bcba:	d321      	bcc.n	801bd00 <__multiply+0x98>
 801bcbc:	f104 0314 	add.w	r3, r4, #20
 801bcc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801bcc4:	f109 0314 	add.w	r3, r9, #20
 801bcc8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801bccc:	9202      	str	r2, [sp, #8]
 801bcce:	1b3a      	subs	r2, r7, r4
 801bcd0:	3a15      	subs	r2, #21
 801bcd2:	f022 0203 	bic.w	r2, r2, #3
 801bcd6:	3204      	adds	r2, #4
 801bcd8:	f104 0115 	add.w	r1, r4, #21
 801bcdc:	428f      	cmp	r7, r1
 801bcde:	bf38      	it	cc
 801bce0:	2204      	movcc	r2, #4
 801bce2:	9201      	str	r2, [sp, #4]
 801bce4:	9a02      	ldr	r2, [sp, #8]
 801bce6:	9303      	str	r3, [sp, #12]
 801bce8:	429a      	cmp	r2, r3
 801bcea:	d80c      	bhi.n	801bd06 <__multiply+0x9e>
 801bcec:	2e00      	cmp	r6, #0
 801bcee:	dd03      	ble.n	801bcf8 <__multiply+0x90>
 801bcf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d05b      	beq.n	801bdb0 <__multiply+0x148>
 801bcf8:	6106      	str	r6, [r0, #16]
 801bcfa:	b005      	add	sp, #20
 801bcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd00:	f843 2b04 	str.w	r2, [r3], #4
 801bd04:	e7d8      	b.n	801bcb8 <__multiply+0x50>
 801bd06:	f8b3 a000 	ldrh.w	sl, [r3]
 801bd0a:	f1ba 0f00 	cmp.w	sl, #0
 801bd0e:	d024      	beq.n	801bd5a <__multiply+0xf2>
 801bd10:	f104 0e14 	add.w	lr, r4, #20
 801bd14:	46a9      	mov	r9, r5
 801bd16:	f04f 0c00 	mov.w	ip, #0
 801bd1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801bd1e:	f8d9 1000 	ldr.w	r1, [r9]
 801bd22:	fa1f fb82 	uxth.w	fp, r2
 801bd26:	b289      	uxth	r1, r1
 801bd28:	fb0a 110b 	mla	r1, sl, fp, r1
 801bd2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801bd30:	f8d9 2000 	ldr.w	r2, [r9]
 801bd34:	4461      	add	r1, ip
 801bd36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801bd3a:	fb0a c20b 	mla	r2, sl, fp, ip
 801bd3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801bd42:	b289      	uxth	r1, r1
 801bd44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801bd48:	4577      	cmp	r7, lr
 801bd4a:	f849 1b04 	str.w	r1, [r9], #4
 801bd4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801bd52:	d8e2      	bhi.n	801bd1a <__multiply+0xb2>
 801bd54:	9a01      	ldr	r2, [sp, #4]
 801bd56:	f845 c002 	str.w	ip, [r5, r2]
 801bd5a:	9a03      	ldr	r2, [sp, #12]
 801bd5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801bd60:	3304      	adds	r3, #4
 801bd62:	f1b9 0f00 	cmp.w	r9, #0
 801bd66:	d021      	beq.n	801bdac <__multiply+0x144>
 801bd68:	6829      	ldr	r1, [r5, #0]
 801bd6a:	f104 0c14 	add.w	ip, r4, #20
 801bd6e:	46ae      	mov	lr, r5
 801bd70:	f04f 0a00 	mov.w	sl, #0
 801bd74:	f8bc b000 	ldrh.w	fp, [ip]
 801bd78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801bd7c:	fb09 220b 	mla	r2, r9, fp, r2
 801bd80:	4452      	add	r2, sl
 801bd82:	b289      	uxth	r1, r1
 801bd84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801bd88:	f84e 1b04 	str.w	r1, [lr], #4
 801bd8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801bd90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801bd94:	f8be 1000 	ldrh.w	r1, [lr]
 801bd98:	fb09 110a 	mla	r1, r9, sl, r1
 801bd9c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801bda0:	4567      	cmp	r7, ip
 801bda2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801bda6:	d8e5      	bhi.n	801bd74 <__multiply+0x10c>
 801bda8:	9a01      	ldr	r2, [sp, #4]
 801bdaa:	50a9      	str	r1, [r5, r2]
 801bdac:	3504      	adds	r5, #4
 801bdae:	e799      	b.n	801bce4 <__multiply+0x7c>
 801bdb0:	3e01      	subs	r6, #1
 801bdb2:	e79b      	b.n	801bcec <__multiply+0x84>
 801bdb4:	0801fd6d 	.word	0x0801fd6d
 801bdb8:	0801fdef 	.word	0x0801fdef

0801bdbc <__pow5mult>:
 801bdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bdc0:	4615      	mov	r5, r2
 801bdc2:	f012 0203 	ands.w	r2, r2, #3
 801bdc6:	4606      	mov	r6, r0
 801bdc8:	460f      	mov	r7, r1
 801bdca:	d007      	beq.n	801bddc <__pow5mult+0x20>
 801bdcc:	4c25      	ldr	r4, [pc, #148]	; (801be64 <__pow5mult+0xa8>)
 801bdce:	3a01      	subs	r2, #1
 801bdd0:	2300      	movs	r3, #0
 801bdd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bdd6:	f7ff fe53 	bl	801ba80 <__multadd>
 801bdda:	4607      	mov	r7, r0
 801bddc:	10ad      	asrs	r5, r5, #2
 801bdde:	d03d      	beq.n	801be5c <__pow5mult+0xa0>
 801bde0:	69f4      	ldr	r4, [r6, #28]
 801bde2:	b97c      	cbnz	r4, 801be04 <__pow5mult+0x48>
 801bde4:	2010      	movs	r0, #16
 801bde6:	f7ff fc75 	bl	801b6d4 <malloc>
 801bdea:	4602      	mov	r2, r0
 801bdec:	61f0      	str	r0, [r6, #28]
 801bdee:	b928      	cbnz	r0, 801bdfc <__pow5mult+0x40>
 801bdf0:	4b1d      	ldr	r3, [pc, #116]	; (801be68 <__pow5mult+0xac>)
 801bdf2:	481e      	ldr	r0, [pc, #120]	; (801be6c <__pow5mult+0xb0>)
 801bdf4:	f240 11b3 	movw	r1, #435	; 0x1b3
 801bdf8:	f000 fb7c 	bl	801c4f4 <__assert_func>
 801bdfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801be00:	6004      	str	r4, [r0, #0]
 801be02:	60c4      	str	r4, [r0, #12]
 801be04:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801be08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801be0c:	b94c      	cbnz	r4, 801be22 <__pow5mult+0x66>
 801be0e:	f240 2171 	movw	r1, #625	; 0x271
 801be12:	4630      	mov	r0, r6
 801be14:	f7ff ff12 	bl	801bc3c <__i2b>
 801be18:	2300      	movs	r3, #0
 801be1a:	f8c8 0008 	str.w	r0, [r8, #8]
 801be1e:	4604      	mov	r4, r0
 801be20:	6003      	str	r3, [r0, #0]
 801be22:	f04f 0900 	mov.w	r9, #0
 801be26:	07eb      	lsls	r3, r5, #31
 801be28:	d50a      	bpl.n	801be40 <__pow5mult+0x84>
 801be2a:	4639      	mov	r1, r7
 801be2c:	4622      	mov	r2, r4
 801be2e:	4630      	mov	r0, r6
 801be30:	f7ff ff1a 	bl	801bc68 <__multiply>
 801be34:	4639      	mov	r1, r7
 801be36:	4680      	mov	r8, r0
 801be38:	4630      	mov	r0, r6
 801be3a:	f7ff fdff 	bl	801ba3c <_Bfree>
 801be3e:	4647      	mov	r7, r8
 801be40:	106d      	asrs	r5, r5, #1
 801be42:	d00b      	beq.n	801be5c <__pow5mult+0xa0>
 801be44:	6820      	ldr	r0, [r4, #0]
 801be46:	b938      	cbnz	r0, 801be58 <__pow5mult+0x9c>
 801be48:	4622      	mov	r2, r4
 801be4a:	4621      	mov	r1, r4
 801be4c:	4630      	mov	r0, r6
 801be4e:	f7ff ff0b 	bl	801bc68 <__multiply>
 801be52:	6020      	str	r0, [r4, #0]
 801be54:	f8c0 9000 	str.w	r9, [r0]
 801be58:	4604      	mov	r4, r0
 801be5a:	e7e4      	b.n	801be26 <__pow5mult+0x6a>
 801be5c:	4638      	mov	r0, r7
 801be5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be62:	bf00      	nop
 801be64:	0801ff38 	.word	0x0801ff38
 801be68:	0801fcfe 	.word	0x0801fcfe
 801be6c:	0801fdef 	.word	0x0801fdef

0801be70 <__lshift>:
 801be70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be74:	460c      	mov	r4, r1
 801be76:	6849      	ldr	r1, [r1, #4]
 801be78:	6923      	ldr	r3, [r4, #16]
 801be7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801be7e:	68a3      	ldr	r3, [r4, #8]
 801be80:	4607      	mov	r7, r0
 801be82:	4691      	mov	r9, r2
 801be84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801be88:	f108 0601 	add.w	r6, r8, #1
 801be8c:	42b3      	cmp	r3, r6
 801be8e:	db0b      	blt.n	801bea8 <__lshift+0x38>
 801be90:	4638      	mov	r0, r7
 801be92:	f7ff fd93 	bl	801b9bc <_Balloc>
 801be96:	4605      	mov	r5, r0
 801be98:	b948      	cbnz	r0, 801beae <__lshift+0x3e>
 801be9a:	4602      	mov	r2, r0
 801be9c:	4b28      	ldr	r3, [pc, #160]	; (801bf40 <__lshift+0xd0>)
 801be9e:	4829      	ldr	r0, [pc, #164]	; (801bf44 <__lshift+0xd4>)
 801bea0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801bea4:	f000 fb26 	bl	801c4f4 <__assert_func>
 801bea8:	3101      	adds	r1, #1
 801beaa:	005b      	lsls	r3, r3, #1
 801beac:	e7ee      	b.n	801be8c <__lshift+0x1c>
 801beae:	2300      	movs	r3, #0
 801beb0:	f100 0114 	add.w	r1, r0, #20
 801beb4:	f100 0210 	add.w	r2, r0, #16
 801beb8:	4618      	mov	r0, r3
 801beba:	4553      	cmp	r3, sl
 801bebc:	db33      	blt.n	801bf26 <__lshift+0xb6>
 801bebe:	6920      	ldr	r0, [r4, #16]
 801bec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bec4:	f104 0314 	add.w	r3, r4, #20
 801bec8:	f019 091f 	ands.w	r9, r9, #31
 801becc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bed0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bed4:	d02b      	beq.n	801bf2e <__lshift+0xbe>
 801bed6:	f1c9 0e20 	rsb	lr, r9, #32
 801beda:	468a      	mov	sl, r1
 801bedc:	2200      	movs	r2, #0
 801bede:	6818      	ldr	r0, [r3, #0]
 801bee0:	fa00 f009 	lsl.w	r0, r0, r9
 801bee4:	4310      	orrs	r0, r2
 801bee6:	f84a 0b04 	str.w	r0, [sl], #4
 801beea:	f853 2b04 	ldr.w	r2, [r3], #4
 801beee:	459c      	cmp	ip, r3
 801bef0:	fa22 f20e 	lsr.w	r2, r2, lr
 801bef4:	d8f3      	bhi.n	801bede <__lshift+0x6e>
 801bef6:	ebac 0304 	sub.w	r3, ip, r4
 801befa:	3b15      	subs	r3, #21
 801befc:	f023 0303 	bic.w	r3, r3, #3
 801bf00:	3304      	adds	r3, #4
 801bf02:	f104 0015 	add.w	r0, r4, #21
 801bf06:	4584      	cmp	ip, r0
 801bf08:	bf38      	it	cc
 801bf0a:	2304      	movcc	r3, #4
 801bf0c:	50ca      	str	r2, [r1, r3]
 801bf0e:	b10a      	cbz	r2, 801bf14 <__lshift+0xa4>
 801bf10:	f108 0602 	add.w	r6, r8, #2
 801bf14:	3e01      	subs	r6, #1
 801bf16:	4638      	mov	r0, r7
 801bf18:	612e      	str	r6, [r5, #16]
 801bf1a:	4621      	mov	r1, r4
 801bf1c:	f7ff fd8e 	bl	801ba3c <_Bfree>
 801bf20:	4628      	mov	r0, r5
 801bf22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf26:	f842 0f04 	str.w	r0, [r2, #4]!
 801bf2a:	3301      	adds	r3, #1
 801bf2c:	e7c5      	b.n	801beba <__lshift+0x4a>
 801bf2e:	3904      	subs	r1, #4
 801bf30:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf34:	f841 2f04 	str.w	r2, [r1, #4]!
 801bf38:	459c      	cmp	ip, r3
 801bf3a:	d8f9      	bhi.n	801bf30 <__lshift+0xc0>
 801bf3c:	e7ea      	b.n	801bf14 <__lshift+0xa4>
 801bf3e:	bf00      	nop
 801bf40:	0801fd6d 	.word	0x0801fd6d
 801bf44:	0801fdef 	.word	0x0801fdef

0801bf48 <__mcmp>:
 801bf48:	b530      	push	{r4, r5, lr}
 801bf4a:	6902      	ldr	r2, [r0, #16]
 801bf4c:	690c      	ldr	r4, [r1, #16]
 801bf4e:	1b12      	subs	r2, r2, r4
 801bf50:	d10e      	bne.n	801bf70 <__mcmp+0x28>
 801bf52:	f100 0314 	add.w	r3, r0, #20
 801bf56:	3114      	adds	r1, #20
 801bf58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801bf5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801bf60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801bf64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801bf68:	42a5      	cmp	r5, r4
 801bf6a:	d003      	beq.n	801bf74 <__mcmp+0x2c>
 801bf6c:	d305      	bcc.n	801bf7a <__mcmp+0x32>
 801bf6e:	2201      	movs	r2, #1
 801bf70:	4610      	mov	r0, r2
 801bf72:	bd30      	pop	{r4, r5, pc}
 801bf74:	4283      	cmp	r3, r0
 801bf76:	d3f3      	bcc.n	801bf60 <__mcmp+0x18>
 801bf78:	e7fa      	b.n	801bf70 <__mcmp+0x28>
 801bf7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bf7e:	e7f7      	b.n	801bf70 <__mcmp+0x28>

0801bf80 <__mdiff>:
 801bf80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf84:	460c      	mov	r4, r1
 801bf86:	4606      	mov	r6, r0
 801bf88:	4611      	mov	r1, r2
 801bf8a:	4620      	mov	r0, r4
 801bf8c:	4690      	mov	r8, r2
 801bf8e:	f7ff ffdb 	bl	801bf48 <__mcmp>
 801bf92:	1e05      	subs	r5, r0, #0
 801bf94:	d110      	bne.n	801bfb8 <__mdiff+0x38>
 801bf96:	4629      	mov	r1, r5
 801bf98:	4630      	mov	r0, r6
 801bf9a:	f7ff fd0f 	bl	801b9bc <_Balloc>
 801bf9e:	b930      	cbnz	r0, 801bfae <__mdiff+0x2e>
 801bfa0:	4b3a      	ldr	r3, [pc, #232]	; (801c08c <__mdiff+0x10c>)
 801bfa2:	4602      	mov	r2, r0
 801bfa4:	f240 2137 	movw	r1, #567	; 0x237
 801bfa8:	4839      	ldr	r0, [pc, #228]	; (801c090 <__mdiff+0x110>)
 801bfaa:	f000 faa3 	bl	801c4f4 <__assert_func>
 801bfae:	2301      	movs	r3, #1
 801bfb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bfb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfb8:	bfa4      	itt	ge
 801bfba:	4643      	movge	r3, r8
 801bfbc:	46a0      	movge	r8, r4
 801bfbe:	4630      	mov	r0, r6
 801bfc0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bfc4:	bfa6      	itte	ge
 801bfc6:	461c      	movge	r4, r3
 801bfc8:	2500      	movge	r5, #0
 801bfca:	2501      	movlt	r5, #1
 801bfcc:	f7ff fcf6 	bl	801b9bc <_Balloc>
 801bfd0:	b920      	cbnz	r0, 801bfdc <__mdiff+0x5c>
 801bfd2:	4b2e      	ldr	r3, [pc, #184]	; (801c08c <__mdiff+0x10c>)
 801bfd4:	4602      	mov	r2, r0
 801bfd6:	f240 2145 	movw	r1, #581	; 0x245
 801bfda:	e7e5      	b.n	801bfa8 <__mdiff+0x28>
 801bfdc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801bfe0:	6926      	ldr	r6, [r4, #16]
 801bfe2:	60c5      	str	r5, [r0, #12]
 801bfe4:	f104 0914 	add.w	r9, r4, #20
 801bfe8:	f108 0514 	add.w	r5, r8, #20
 801bfec:	f100 0e14 	add.w	lr, r0, #20
 801bff0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801bff4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801bff8:	f108 0210 	add.w	r2, r8, #16
 801bffc:	46f2      	mov	sl, lr
 801bffe:	2100      	movs	r1, #0
 801c000:	f859 3b04 	ldr.w	r3, [r9], #4
 801c004:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c008:	fa11 f88b 	uxtah	r8, r1, fp
 801c00c:	b299      	uxth	r1, r3
 801c00e:	0c1b      	lsrs	r3, r3, #16
 801c010:	eba8 0801 	sub.w	r8, r8, r1
 801c014:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c018:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c01c:	fa1f f888 	uxth.w	r8, r8
 801c020:	1419      	asrs	r1, r3, #16
 801c022:	454e      	cmp	r6, r9
 801c024:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c028:	f84a 3b04 	str.w	r3, [sl], #4
 801c02c:	d8e8      	bhi.n	801c000 <__mdiff+0x80>
 801c02e:	1b33      	subs	r3, r6, r4
 801c030:	3b15      	subs	r3, #21
 801c032:	f023 0303 	bic.w	r3, r3, #3
 801c036:	3304      	adds	r3, #4
 801c038:	3415      	adds	r4, #21
 801c03a:	42a6      	cmp	r6, r4
 801c03c:	bf38      	it	cc
 801c03e:	2304      	movcc	r3, #4
 801c040:	441d      	add	r5, r3
 801c042:	4473      	add	r3, lr
 801c044:	469e      	mov	lr, r3
 801c046:	462e      	mov	r6, r5
 801c048:	4566      	cmp	r6, ip
 801c04a:	d30e      	bcc.n	801c06a <__mdiff+0xea>
 801c04c:	f10c 0203 	add.w	r2, ip, #3
 801c050:	1b52      	subs	r2, r2, r5
 801c052:	f022 0203 	bic.w	r2, r2, #3
 801c056:	3d03      	subs	r5, #3
 801c058:	45ac      	cmp	ip, r5
 801c05a:	bf38      	it	cc
 801c05c:	2200      	movcc	r2, #0
 801c05e:	4413      	add	r3, r2
 801c060:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c064:	b17a      	cbz	r2, 801c086 <__mdiff+0x106>
 801c066:	6107      	str	r7, [r0, #16]
 801c068:	e7a4      	b.n	801bfb4 <__mdiff+0x34>
 801c06a:	f856 8b04 	ldr.w	r8, [r6], #4
 801c06e:	fa11 f288 	uxtah	r2, r1, r8
 801c072:	1414      	asrs	r4, r2, #16
 801c074:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801c078:	b292      	uxth	r2, r2
 801c07a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801c07e:	f84e 2b04 	str.w	r2, [lr], #4
 801c082:	1421      	asrs	r1, r4, #16
 801c084:	e7e0      	b.n	801c048 <__mdiff+0xc8>
 801c086:	3f01      	subs	r7, #1
 801c088:	e7ea      	b.n	801c060 <__mdiff+0xe0>
 801c08a:	bf00      	nop
 801c08c:	0801fd6d 	.word	0x0801fd6d
 801c090:	0801fdef 	.word	0x0801fdef

0801c094 <__ulp>:
 801c094:	b082      	sub	sp, #8
 801c096:	ed8d 0b00 	vstr	d0, [sp]
 801c09a:	9a01      	ldr	r2, [sp, #4]
 801c09c:	4b0f      	ldr	r3, [pc, #60]	; (801c0dc <__ulp+0x48>)
 801c09e:	4013      	ands	r3, r2
 801c0a0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	dc08      	bgt.n	801c0ba <__ulp+0x26>
 801c0a8:	425b      	negs	r3, r3
 801c0aa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801c0ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c0b2:	da04      	bge.n	801c0be <__ulp+0x2a>
 801c0b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801c0b8:	4113      	asrs	r3, r2
 801c0ba:	2200      	movs	r2, #0
 801c0bc:	e008      	b.n	801c0d0 <__ulp+0x3c>
 801c0be:	f1a2 0314 	sub.w	r3, r2, #20
 801c0c2:	2b1e      	cmp	r3, #30
 801c0c4:	bfda      	itte	le
 801c0c6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801c0ca:	40da      	lsrle	r2, r3
 801c0cc:	2201      	movgt	r2, #1
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	4619      	mov	r1, r3
 801c0d2:	4610      	mov	r0, r2
 801c0d4:	ec41 0b10 	vmov	d0, r0, r1
 801c0d8:	b002      	add	sp, #8
 801c0da:	4770      	bx	lr
 801c0dc:	7ff00000 	.word	0x7ff00000

0801c0e0 <__b2d>:
 801c0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0e4:	6906      	ldr	r6, [r0, #16]
 801c0e6:	f100 0814 	add.w	r8, r0, #20
 801c0ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801c0ee:	1f37      	subs	r7, r6, #4
 801c0f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c0f4:	4610      	mov	r0, r2
 801c0f6:	f7ff fd53 	bl	801bba0 <__hi0bits>
 801c0fa:	f1c0 0320 	rsb	r3, r0, #32
 801c0fe:	280a      	cmp	r0, #10
 801c100:	600b      	str	r3, [r1, #0]
 801c102:	491b      	ldr	r1, [pc, #108]	; (801c170 <__b2d+0x90>)
 801c104:	dc15      	bgt.n	801c132 <__b2d+0x52>
 801c106:	f1c0 0c0b 	rsb	ip, r0, #11
 801c10a:	fa22 f30c 	lsr.w	r3, r2, ip
 801c10e:	45b8      	cmp	r8, r7
 801c110:	ea43 0501 	orr.w	r5, r3, r1
 801c114:	bf34      	ite	cc
 801c116:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c11a:	2300      	movcs	r3, #0
 801c11c:	3015      	adds	r0, #21
 801c11e:	fa02 f000 	lsl.w	r0, r2, r0
 801c122:	fa23 f30c 	lsr.w	r3, r3, ip
 801c126:	4303      	orrs	r3, r0
 801c128:	461c      	mov	r4, r3
 801c12a:	ec45 4b10 	vmov	d0, r4, r5
 801c12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c132:	45b8      	cmp	r8, r7
 801c134:	bf3a      	itte	cc
 801c136:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c13a:	f1a6 0708 	subcc.w	r7, r6, #8
 801c13e:	2300      	movcs	r3, #0
 801c140:	380b      	subs	r0, #11
 801c142:	d012      	beq.n	801c16a <__b2d+0x8a>
 801c144:	f1c0 0120 	rsb	r1, r0, #32
 801c148:	fa23 f401 	lsr.w	r4, r3, r1
 801c14c:	4082      	lsls	r2, r0
 801c14e:	4322      	orrs	r2, r4
 801c150:	4547      	cmp	r7, r8
 801c152:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801c156:	bf8c      	ite	hi
 801c158:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801c15c:	2200      	movls	r2, #0
 801c15e:	4083      	lsls	r3, r0
 801c160:	40ca      	lsrs	r2, r1
 801c162:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801c166:	4313      	orrs	r3, r2
 801c168:	e7de      	b.n	801c128 <__b2d+0x48>
 801c16a:	ea42 0501 	orr.w	r5, r2, r1
 801c16e:	e7db      	b.n	801c128 <__b2d+0x48>
 801c170:	3ff00000 	.word	0x3ff00000

0801c174 <__d2b>:
 801c174:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c178:	460f      	mov	r7, r1
 801c17a:	2101      	movs	r1, #1
 801c17c:	ec59 8b10 	vmov	r8, r9, d0
 801c180:	4616      	mov	r6, r2
 801c182:	f7ff fc1b 	bl	801b9bc <_Balloc>
 801c186:	4604      	mov	r4, r0
 801c188:	b930      	cbnz	r0, 801c198 <__d2b+0x24>
 801c18a:	4602      	mov	r2, r0
 801c18c:	4b24      	ldr	r3, [pc, #144]	; (801c220 <__d2b+0xac>)
 801c18e:	4825      	ldr	r0, [pc, #148]	; (801c224 <__d2b+0xb0>)
 801c190:	f240 310f 	movw	r1, #783	; 0x30f
 801c194:	f000 f9ae 	bl	801c4f4 <__assert_func>
 801c198:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c19c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c1a0:	bb2d      	cbnz	r5, 801c1ee <__d2b+0x7a>
 801c1a2:	9301      	str	r3, [sp, #4]
 801c1a4:	f1b8 0300 	subs.w	r3, r8, #0
 801c1a8:	d026      	beq.n	801c1f8 <__d2b+0x84>
 801c1aa:	4668      	mov	r0, sp
 801c1ac:	9300      	str	r3, [sp, #0]
 801c1ae:	f7ff fd17 	bl	801bbe0 <__lo0bits>
 801c1b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c1b6:	b1e8      	cbz	r0, 801c1f4 <__d2b+0x80>
 801c1b8:	f1c0 0320 	rsb	r3, r0, #32
 801c1bc:	fa02 f303 	lsl.w	r3, r2, r3
 801c1c0:	430b      	orrs	r3, r1
 801c1c2:	40c2      	lsrs	r2, r0
 801c1c4:	6163      	str	r3, [r4, #20]
 801c1c6:	9201      	str	r2, [sp, #4]
 801c1c8:	9b01      	ldr	r3, [sp, #4]
 801c1ca:	61a3      	str	r3, [r4, #24]
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	bf14      	ite	ne
 801c1d0:	2202      	movne	r2, #2
 801c1d2:	2201      	moveq	r2, #1
 801c1d4:	6122      	str	r2, [r4, #16]
 801c1d6:	b1bd      	cbz	r5, 801c208 <__d2b+0x94>
 801c1d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c1dc:	4405      	add	r5, r0
 801c1de:	603d      	str	r5, [r7, #0]
 801c1e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c1e4:	6030      	str	r0, [r6, #0]
 801c1e6:	4620      	mov	r0, r4
 801c1e8:	b003      	add	sp, #12
 801c1ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c1ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c1f2:	e7d6      	b.n	801c1a2 <__d2b+0x2e>
 801c1f4:	6161      	str	r1, [r4, #20]
 801c1f6:	e7e7      	b.n	801c1c8 <__d2b+0x54>
 801c1f8:	a801      	add	r0, sp, #4
 801c1fa:	f7ff fcf1 	bl	801bbe0 <__lo0bits>
 801c1fe:	9b01      	ldr	r3, [sp, #4]
 801c200:	6163      	str	r3, [r4, #20]
 801c202:	3020      	adds	r0, #32
 801c204:	2201      	movs	r2, #1
 801c206:	e7e5      	b.n	801c1d4 <__d2b+0x60>
 801c208:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c20c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c210:	6038      	str	r0, [r7, #0]
 801c212:	6918      	ldr	r0, [r3, #16]
 801c214:	f7ff fcc4 	bl	801bba0 <__hi0bits>
 801c218:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c21c:	e7e2      	b.n	801c1e4 <__d2b+0x70>
 801c21e:	bf00      	nop
 801c220:	0801fd6d 	.word	0x0801fd6d
 801c224:	0801fdef 	.word	0x0801fdef

0801c228 <__ratio>:
 801c228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c22c:	4688      	mov	r8, r1
 801c22e:	4669      	mov	r1, sp
 801c230:	4681      	mov	r9, r0
 801c232:	f7ff ff55 	bl	801c0e0 <__b2d>
 801c236:	a901      	add	r1, sp, #4
 801c238:	4640      	mov	r0, r8
 801c23a:	ec55 4b10 	vmov	r4, r5, d0
 801c23e:	f7ff ff4f 	bl	801c0e0 <__b2d>
 801c242:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c246:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801c24a:	eba3 0c02 	sub.w	ip, r3, r2
 801c24e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c252:	1a9b      	subs	r3, r3, r2
 801c254:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801c258:	ec51 0b10 	vmov	r0, r1, d0
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	bfd6      	itet	le
 801c260:	460a      	movle	r2, r1
 801c262:	462a      	movgt	r2, r5
 801c264:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c268:	468b      	mov	fp, r1
 801c26a:	462f      	mov	r7, r5
 801c26c:	bfd4      	ite	le
 801c26e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801c272:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c276:	4620      	mov	r0, r4
 801c278:	ee10 2a10 	vmov	r2, s0
 801c27c:	465b      	mov	r3, fp
 801c27e:	4639      	mov	r1, r7
 801c280:	f7e4 faee 	bl	8000860 <__aeabi_ddiv>
 801c284:	ec41 0b10 	vmov	d0, r0, r1
 801c288:	b003      	add	sp, #12
 801c28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c28e <__copybits>:
 801c28e:	3901      	subs	r1, #1
 801c290:	b570      	push	{r4, r5, r6, lr}
 801c292:	1149      	asrs	r1, r1, #5
 801c294:	6914      	ldr	r4, [r2, #16]
 801c296:	3101      	adds	r1, #1
 801c298:	f102 0314 	add.w	r3, r2, #20
 801c29c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c2a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c2a4:	1f05      	subs	r5, r0, #4
 801c2a6:	42a3      	cmp	r3, r4
 801c2a8:	d30c      	bcc.n	801c2c4 <__copybits+0x36>
 801c2aa:	1aa3      	subs	r3, r4, r2
 801c2ac:	3b11      	subs	r3, #17
 801c2ae:	f023 0303 	bic.w	r3, r3, #3
 801c2b2:	3211      	adds	r2, #17
 801c2b4:	42a2      	cmp	r2, r4
 801c2b6:	bf88      	it	hi
 801c2b8:	2300      	movhi	r3, #0
 801c2ba:	4418      	add	r0, r3
 801c2bc:	2300      	movs	r3, #0
 801c2be:	4288      	cmp	r0, r1
 801c2c0:	d305      	bcc.n	801c2ce <__copybits+0x40>
 801c2c2:	bd70      	pop	{r4, r5, r6, pc}
 801c2c4:	f853 6b04 	ldr.w	r6, [r3], #4
 801c2c8:	f845 6f04 	str.w	r6, [r5, #4]!
 801c2cc:	e7eb      	b.n	801c2a6 <__copybits+0x18>
 801c2ce:	f840 3b04 	str.w	r3, [r0], #4
 801c2d2:	e7f4      	b.n	801c2be <__copybits+0x30>

0801c2d4 <__any_on>:
 801c2d4:	f100 0214 	add.w	r2, r0, #20
 801c2d8:	6900      	ldr	r0, [r0, #16]
 801c2da:	114b      	asrs	r3, r1, #5
 801c2dc:	4298      	cmp	r0, r3
 801c2de:	b510      	push	{r4, lr}
 801c2e0:	db11      	blt.n	801c306 <__any_on+0x32>
 801c2e2:	dd0a      	ble.n	801c2fa <__any_on+0x26>
 801c2e4:	f011 011f 	ands.w	r1, r1, #31
 801c2e8:	d007      	beq.n	801c2fa <__any_on+0x26>
 801c2ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c2ee:	fa24 f001 	lsr.w	r0, r4, r1
 801c2f2:	fa00 f101 	lsl.w	r1, r0, r1
 801c2f6:	428c      	cmp	r4, r1
 801c2f8:	d10b      	bne.n	801c312 <__any_on+0x3e>
 801c2fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c2fe:	4293      	cmp	r3, r2
 801c300:	d803      	bhi.n	801c30a <__any_on+0x36>
 801c302:	2000      	movs	r0, #0
 801c304:	bd10      	pop	{r4, pc}
 801c306:	4603      	mov	r3, r0
 801c308:	e7f7      	b.n	801c2fa <__any_on+0x26>
 801c30a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c30e:	2900      	cmp	r1, #0
 801c310:	d0f5      	beq.n	801c2fe <__any_on+0x2a>
 801c312:	2001      	movs	r0, #1
 801c314:	e7f6      	b.n	801c304 <__any_on+0x30>

0801c316 <__sread>:
 801c316:	b510      	push	{r4, lr}
 801c318:	460c      	mov	r4, r1
 801c31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c31e:	f000 f8b5 	bl	801c48c <_read_r>
 801c322:	2800      	cmp	r0, #0
 801c324:	bfab      	itete	ge
 801c326:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c328:	89a3      	ldrhlt	r3, [r4, #12]
 801c32a:	181b      	addge	r3, r3, r0
 801c32c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c330:	bfac      	ite	ge
 801c332:	6563      	strge	r3, [r4, #84]	; 0x54
 801c334:	81a3      	strhlt	r3, [r4, #12]
 801c336:	bd10      	pop	{r4, pc}

0801c338 <__swrite>:
 801c338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c33c:	461f      	mov	r7, r3
 801c33e:	898b      	ldrh	r3, [r1, #12]
 801c340:	05db      	lsls	r3, r3, #23
 801c342:	4605      	mov	r5, r0
 801c344:	460c      	mov	r4, r1
 801c346:	4616      	mov	r6, r2
 801c348:	d505      	bpl.n	801c356 <__swrite+0x1e>
 801c34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c34e:	2302      	movs	r3, #2
 801c350:	2200      	movs	r2, #0
 801c352:	f000 f889 	bl	801c468 <_lseek_r>
 801c356:	89a3      	ldrh	r3, [r4, #12]
 801c358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c35c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c360:	81a3      	strh	r3, [r4, #12]
 801c362:	4632      	mov	r2, r6
 801c364:	463b      	mov	r3, r7
 801c366:	4628      	mov	r0, r5
 801c368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c36c:	f000 b8b0 	b.w	801c4d0 <_write_r>

0801c370 <__sseek>:
 801c370:	b510      	push	{r4, lr}
 801c372:	460c      	mov	r4, r1
 801c374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c378:	f000 f876 	bl	801c468 <_lseek_r>
 801c37c:	1c43      	adds	r3, r0, #1
 801c37e:	89a3      	ldrh	r3, [r4, #12]
 801c380:	bf15      	itete	ne
 801c382:	6560      	strne	r0, [r4, #84]	; 0x54
 801c384:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c388:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c38c:	81a3      	strheq	r3, [r4, #12]
 801c38e:	bf18      	it	ne
 801c390:	81a3      	strhne	r3, [r4, #12]
 801c392:	bd10      	pop	{r4, pc}

0801c394 <__sclose>:
 801c394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c398:	f000 b856 	b.w	801c448 <_close_r>

0801c39c <_realloc_r>:
 801c39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3a0:	4680      	mov	r8, r0
 801c3a2:	4614      	mov	r4, r2
 801c3a4:	460e      	mov	r6, r1
 801c3a6:	b921      	cbnz	r1, 801c3b2 <_realloc_r+0x16>
 801c3a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c3ac:	4611      	mov	r1, r2
 801c3ae:	f7ff b9b9 	b.w	801b724 <_malloc_r>
 801c3b2:	b92a      	cbnz	r2, 801c3c0 <_realloc_r+0x24>
 801c3b4:	f7fe fc92 	bl	801acdc <_free_r>
 801c3b8:	4625      	mov	r5, r4
 801c3ba:	4628      	mov	r0, r5
 801c3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3c0:	f000 f8cc 	bl	801c55c <_malloc_usable_size_r>
 801c3c4:	4284      	cmp	r4, r0
 801c3c6:	4607      	mov	r7, r0
 801c3c8:	d802      	bhi.n	801c3d0 <_realloc_r+0x34>
 801c3ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c3ce:	d812      	bhi.n	801c3f6 <_realloc_r+0x5a>
 801c3d0:	4621      	mov	r1, r4
 801c3d2:	4640      	mov	r0, r8
 801c3d4:	f7ff f9a6 	bl	801b724 <_malloc_r>
 801c3d8:	4605      	mov	r5, r0
 801c3da:	2800      	cmp	r0, #0
 801c3dc:	d0ed      	beq.n	801c3ba <_realloc_r+0x1e>
 801c3de:	42bc      	cmp	r4, r7
 801c3e0:	4622      	mov	r2, r4
 801c3e2:	4631      	mov	r1, r6
 801c3e4:	bf28      	it	cs
 801c3e6:	463a      	movcs	r2, r7
 801c3e8:	f7fd fde0 	bl	8019fac <memcpy>
 801c3ec:	4631      	mov	r1, r6
 801c3ee:	4640      	mov	r0, r8
 801c3f0:	f7fe fc74 	bl	801acdc <_free_r>
 801c3f4:	e7e1      	b.n	801c3ba <_realloc_r+0x1e>
 801c3f6:	4635      	mov	r5, r6
 801c3f8:	e7df      	b.n	801c3ba <_realloc_r+0x1e>

0801c3fa <__ascii_wctomb>:
 801c3fa:	b149      	cbz	r1, 801c410 <__ascii_wctomb+0x16>
 801c3fc:	2aff      	cmp	r2, #255	; 0xff
 801c3fe:	bf85      	ittet	hi
 801c400:	238a      	movhi	r3, #138	; 0x8a
 801c402:	6003      	strhi	r3, [r0, #0]
 801c404:	700a      	strbls	r2, [r1, #0]
 801c406:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801c40a:	bf98      	it	ls
 801c40c:	2001      	movls	r0, #1
 801c40e:	4770      	bx	lr
 801c410:	4608      	mov	r0, r1
 801c412:	4770      	bx	lr

0801c414 <memmove>:
 801c414:	4288      	cmp	r0, r1
 801c416:	b510      	push	{r4, lr}
 801c418:	eb01 0402 	add.w	r4, r1, r2
 801c41c:	d902      	bls.n	801c424 <memmove+0x10>
 801c41e:	4284      	cmp	r4, r0
 801c420:	4623      	mov	r3, r4
 801c422:	d807      	bhi.n	801c434 <memmove+0x20>
 801c424:	1e43      	subs	r3, r0, #1
 801c426:	42a1      	cmp	r1, r4
 801c428:	d008      	beq.n	801c43c <memmove+0x28>
 801c42a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c42e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c432:	e7f8      	b.n	801c426 <memmove+0x12>
 801c434:	4402      	add	r2, r0
 801c436:	4601      	mov	r1, r0
 801c438:	428a      	cmp	r2, r1
 801c43a:	d100      	bne.n	801c43e <memmove+0x2a>
 801c43c:	bd10      	pop	{r4, pc}
 801c43e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c442:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c446:	e7f7      	b.n	801c438 <memmove+0x24>

0801c448 <_close_r>:
 801c448:	b538      	push	{r3, r4, r5, lr}
 801c44a:	4d06      	ldr	r5, [pc, #24]	; (801c464 <_close_r+0x1c>)
 801c44c:	2300      	movs	r3, #0
 801c44e:	4604      	mov	r4, r0
 801c450:	4608      	mov	r0, r1
 801c452:	602b      	str	r3, [r5, #0]
 801c454:	f7e9 f901 	bl	800565a <_close>
 801c458:	1c43      	adds	r3, r0, #1
 801c45a:	d102      	bne.n	801c462 <_close_r+0x1a>
 801c45c:	682b      	ldr	r3, [r5, #0]
 801c45e:	b103      	cbz	r3, 801c462 <_close_r+0x1a>
 801c460:	6023      	str	r3, [r4, #0]
 801c462:	bd38      	pop	{r3, r4, r5, pc}
 801c464:	20009504 	.word	0x20009504

0801c468 <_lseek_r>:
 801c468:	b538      	push	{r3, r4, r5, lr}
 801c46a:	4d07      	ldr	r5, [pc, #28]	; (801c488 <_lseek_r+0x20>)
 801c46c:	4604      	mov	r4, r0
 801c46e:	4608      	mov	r0, r1
 801c470:	4611      	mov	r1, r2
 801c472:	2200      	movs	r2, #0
 801c474:	602a      	str	r2, [r5, #0]
 801c476:	461a      	mov	r2, r3
 801c478:	f7e9 f916 	bl	80056a8 <_lseek>
 801c47c:	1c43      	adds	r3, r0, #1
 801c47e:	d102      	bne.n	801c486 <_lseek_r+0x1e>
 801c480:	682b      	ldr	r3, [r5, #0]
 801c482:	b103      	cbz	r3, 801c486 <_lseek_r+0x1e>
 801c484:	6023      	str	r3, [r4, #0]
 801c486:	bd38      	pop	{r3, r4, r5, pc}
 801c488:	20009504 	.word	0x20009504

0801c48c <_read_r>:
 801c48c:	b538      	push	{r3, r4, r5, lr}
 801c48e:	4d07      	ldr	r5, [pc, #28]	; (801c4ac <_read_r+0x20>)
 801c490:	4604      	mov	r4, r0
 801c492:	4608      	mov	r0, r1
 801c494:	4611      	mov	r1, r2
 801c496:	2200      	movs	r2, #0
 801c498:	602a      	str	r2, [r5, #0]
 801c49a:	461a      	mov	r2, r3
 801c49c:	f7e9 f8a4 	bl	80055e8 <_read>
 801c4a0:	1c43      	adds	r3, r0, #1
 801c4a2:	d102      	bne.n	801c4aa <_read_r+0x1e>
 801c4a4:	682b      	ldr	r3, [r5, #0]
 801c4a6:	b103      	cbz	r3, 801c4aa <_read_r+0x1e>
 801c4a8:	6023      	str	r3, [r4, #0]
 801c4aa:	bd38      	pop	{r3, r4, r5, pc}
 801c4ac:	20009504 	.word	0x20009504

0801c4b0 <_sbrk_r>:
 801c4b0:	b538      	push	{r3, r4, r5, lr}
 801c4b2:	4d06      	ldr	r5, [pc, #24]	; (801c4cc <_sbrk_r+0x1c>)
 801c4b4:	2300      	movs	r3, #0
 801c4b6:	4604      	mov	r4, r0
 801c4b8:	4608      	mov	r0, r1
 801c4ba:	602b      	str	r3, [r5, #0]
 801c4bc:	f7e9 f902 	bl	80056c4 <_sbrk>
 801c4c0:	1c43      	adds	r3, r0, #1
 801c4c2:	d102      	bne.n	801c4ca <_sbrk_r+0x1a>
 801c4c4:	682b      	ldr	r3, [r5, #0]
 801c4c6:	b103      	cbz	r3, 801c4ca <_sbrk_r+0x1a>
 801c4c8:	6023      	str	r3, [r4, #0]
 801c4ca:	bd38      	pop	{r3, r4, r5, pc}
 801c4cc:	20009504 	.word	0x20009504

0801c4d0 <_write_r>:
 801c4d0:	b538      	push	{r3, r4, r5, lr}
 801c4d2:	4d07      	ldr	r5, [pc, #28]	; (801c4f0 <_write_r+0x20>)
 801c4d4:	4604      	mov	r4, r0
 801c4d6:	4608      	mov	r0, r1
 801c4d8:	4611      	mov	r1, r2
 801c4da:	2200      	movs	r2, #0
 801c4dc:	602a      	str	r2, [r5, #0]
 801c4de:	461a      	mov	r2, r3
 801c4e0:	f7e9 f89f 	bl	8005622 <_write>
 801c4e4:	1c43      	adds	r3, r0, #1
 801c4e6:	d102      	bne.n	801c4ee <_write_r+0x1e>
 801c4e8:	682b      	ldr	r3, [r5, #0]
 801c4ea:	b103      	cbz	r3, 801c4ee <_write_r+0x1e>
 801c4ec:	6023      	str	r3, [r4, #0]
 801c4ee:	bd38      	pop	{r3, r4, r5, pc}
 801c4f0:	20009504 	.word	0x20009504

0801c4f4 <__assert_func>:
 801c4f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c4f6:	4614      	mov	r4, r2
 801c4f8:	461a      	mov	r2, r3
 801c4fa:	4b09      	ldr	r3, [pc, #36]	; (801c520 <__assert_func+0x2c>)
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	4605      	mov	r5, r0
 801c500:	68d8      	ldr	r0, [r3, #12]
 801c502:	b14c      	cbz	r4, 801c518 <__assert_func+0x24>
 801c504:	4b07      	ldr	r3, [pc, #28]	; (801c524 <__assert_func+0x30>)
 801c506:	9100      	str	r1, [sp, #0]
 801c508:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c50c:	4906      	ldr	r1, [pc, #24]	; (801c528 <__assert_func+0x34>)
 801c50e:	462b      	mov	r3, r5
 801c510:	f000 f82c 	bl	801c56c <fiprintf>
 801c514:	f000 f83c 	bl	801c590 <abort>
 801c518:	4b04      	ldr	r3, [pc, #16]	; (801c52c <__assert_func+0x38>)
 801c51a:	461c      	mov	r4, r3
 801c51c:	e7f3      	b.n	801c506 <__assert_func+0x12>
 801c51e:	bf00      	nop
 801c520:	200001f0 	.word	0x200001f0
 801c524:	0801ff44 	.word	0x0801ff44
 801c528:	0801ff51 	.word	0x0801ff51
 801c52c:	0801ff7f 	.word	0x0801ff7f

0801c530 <_calloc_r>:
 801c530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c532:	fba1 2402 	umull	r2, r4, r1, r2
 801c536:	b94c      	cbnz	r4, 801c54c <_calloc_r+0x1c>
 801c538:	4611      	mov	r1, r2
 801c53a:	9201      	str	r2, [sp, #4]
 801c53c:	f7ff f8f2 	bl	801b724 <_malloc_r>
 801c540:	9a01      	ldr	r2, [sp, #4]
 801c542:	4605      	mov	r5, r0
 801c544:	b930      	cbnz	r0, 801c554 <_calloc_r+0x24>
 801c546:	4628      	mov	r0, r5
 801c548:	b003      	add	sp, #12
 801c54a:	bd30      	pop	{r4, r5, pc}
 801c54c:	220c      	movs	r2, #12
 801c54e:	6002      	str	r2, [r0, #0]
 801c550:	2500      	movs	r5, #0
 801c552:	e7f8      	b.n	801c546 <_calloc_r+0x16>
 801c554:	4621      	mov	r1, r4
 801c556:	f7fd fc9b 	bl	8019e90 <memset>
 801c55a:	e7f4      	b.n	801c546 <_calloc_r+0x16>

0801c55c <_malloc_usable_size_r>:
 801c55c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c560:	1f18      	subs	r0, r3, #4
 801c562:	2b00      	cmp	r3, #0
 801c564:	bfbc      	itt	lt
 801c566:	580b      	ldrlt	r3, [r1, r0]
 801c568:	18c0      	addlt	r0, r0, r3
 801c56a:	4770      	bx	lr

0801c56c <fiprintf>:
 801c56c:	b40e      	push	{r1, r2, r3}
 801c56e:	b503      	push	{r0, r1, lr}
 801c570:	4601      	mov	r1, r0
 801c572:	ab03      	add	r3, sp, #12
 801c574:	4805      	ldr	r0, [pc, #20]	; (801c58c <fiprintf+0x20>)
 801c576:	f853 2b04 	ldr.w	r2, [r3], #4
 801c57a:	6800      	ldr	r0, [r0, #0]
 801c57c:	9301      	str	r3, [sp, #4]
 801c57e:	f000 f837 	bl	801c5f0 <_vfiprintf_r>
 801c582:	b002      	add	sp, #8
 801c584:	f85d eb04 	ldr.w	lr, [sp], #4
 801c588:	b003      	add	sp, #12
 801c58a:	4770      	bx	lr
 801c58c:	200001f0 	.word	0x200001f0

0801c590 <abort>:
 801c590:	b508      	push	{r3, lr}
 801c592:	2006      	movs	r0, #6
 801c594:	f000 fa88 	bl	801caa8 <raise>
 801c598:	2001      	movs	r0, #1
 801c59a:	f7e9 f81b 	bl	80055d4 <_exit>

0801c59e <__sfputc_r>:
 801c59e:	6893      	ldr	r3, [r2, #8]
 801c5a0:	3b01      	subs	r3, #1
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	b410      	push	{r4}
 801c5a6:	6093      	str	r3, [r2, #8]
 801c5a8:	da08      	bge.n	801c5bc <__sfputc_r+0x1e>
 801c5aa:	6994      	ldr	r4, [r2, #24]
 801c5ac:	42a3      	cmp	r3, r4
 801c5ae:	db01      	blt.n	801c5b4 <__sfputc_r+0x16>
 801c5b0:	290a      	cmp	r1, #10
 801c5b2:	d103      	bne.n	801c5bc <__sfputc_r+0x1e>
 801c5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c5b8:	f000 b934 	b.w	801c824 <__swbuf_r>
 801c5bc:	6813      	ldr	r3, [r2, #0]
 801c5be:	1c58      	adds	r0, r3, #1
 801c5c0:	6010      	str	r0, [r2, #0]
 801c5c2:	7019      	strb	r1, [r3, #0]
 801c5c4:	4608      	mov	r0, r1
 801c5c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c5ca:	4770      	bx	lr

0801c5cc <__sfputs_r>:
 801c5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5ce:	4606      	mov	r6, r0
 801c5d0:	460f      	mov	r7, r1
 801c5d2:	4614      	mov	r4, r2
 801c5d4:	18d5      	adds	r5, r2, r3
 801c5d6:	42ac      	cmp	r4, r5
 801c5d8:	d101      	bne.n	801c5de <__sfputs_r+0x12>
 801c5da:	2000      	movs	r0, #0
 801c5dc:	e007      	b.n	801c5ee <__sfputs_r+0x22>
 801c5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5e2:	463a      	mov	r2, r7
 801c5e4:	4630      	mov	r0, r6
 801c5e6:	f7ff ffda 	bl	801c59e <__sfputc_r>
 801c5ea:	1c43      	adds	r3, r0, #1
 801c5ec:	d1f3      	bne.n	801c5d6 <__sfputs_r+0xa>
 801c5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c5f0 <_vfiprintf_r>:
 801c5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5f4:	460d      	mov	r5, r1
 801c5f6:	b09d      	sub	sp, #116	; 0x74
 801c5f8:	4614      	mov	r4, r2
 801c5fa:	4698      	mov	r8, r3
 801c5fc:	4606      	mov	r6, r0
 801c5fe:	b118      	cbz	r0, 801c608 <_vfiprintf_r+0x18>
 801c600:	6a03      	ldr	r3, [r0, #32]
 801c602:	b90b      	cbnz	r3, 801c608 <_vfiprintf_r+0x18>
 801c604:	f7fc fd5c 	bl	80190c0 <__sinit>
 801c608:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c60a:	07d9      	lsls	r1, r3, #31
 801c60c:	d405      	bmi.n	801c61a <_vfiprintf_r+0x2a>
 801c60e:	89ab      	ldrh	r3, [r5, #12]
 801c610:	059a      	lsls	r2, r3, #22
 801c612:	d402      	bmi.n	801c61a <_vfiprintf_r+0x2a>
 801c614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c616:	f7fd fcc7 	bl	8019fa8 <__retarget_lock_acquire_recursive>
 801c61a:	89ab      	ldrh	r3, [r5, #12]
 801c61c:	071b      	lsls	r3, r3, #28
 801c61e:	d501      	bpl.n	801c624 <_vfiprintf_r+0x34>
 801c620:	692b      	ldr	r3, [r5, #16]
 801c622:	b99b      	cbnz	r3, 801c64c <_vfiprintf_r+0x5c>
 801c624:	4629      	mov	r1, r5
 801c626:	4630      	mov	r0, r6
 801c628:	f000 f93a 	bl	801c8a0 <__swsetup_r>
 801c62c:	b170      	cbz	r0, 801c64c <_vfiprintf_r+0x5c>
 801c62e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c630:	07dc      	lsls	r4, r3, #31
 801c632:	d504      	bpl.n	801c63e <_vfiprintf_r+0x4e>
 801c634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c638:	b01d      	add	sp, #116	; 0x74
 801c63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c63e:	89ab      	ldrh	r3, [r5, #12]
 801c640:	0598      	lsls	r0, r3, #22
 801c642:	d4f7      	bmi.n	801c634 <_vfiprintf_r+0x44>
 801c644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c646:	f7fd fcb0 	bl	8019faa <__retarget_lock_release_recursive>
 801c64a:	e7f3      	b.n	801c634 <_vfiprintf_r+0x44>
 801c64c:	2300      	movs	r3, #0
 801c64e:	9309      	str	r3, [sp, #36]	; 0x24
 801c650:	2320      	movs	r3, #32
 801c652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c656:	f8cd 800c 	str.w	r8, [sp, #12]
 801c65a:	2330      	movs	r3, #48	; 0x30
 801c65c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c810 <_vfiprintf_r+0x220>
 801c660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c664:	f04f 0901 	mov.w	r9, #1
 801c668:	4623      	mov	r3, r4
 801c66a:	469a      	mov	sl, r3
 801c66c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c670:	b10a      	cbz	r2, 801c676 <_vfiprintf_r+0x86>
 801c672:	2a25      	cmp	r2, #37	; 0x25
 801c674:	d1f9      	bne.n	801c66a <_vfiprintf_r+0x7a>
 801c676:	ebba 0b04 	subs.w	fp, sl, r4
 801c67a:	d00b      	beq.n	801c694 <_vfiprintf_r+0xa4>
 801c67c:	465b      	mov	r3, fp
 801c67e:	4622      	mov	r2, r4
 801c680:	4629      	mov	r1, r5
 801c682:	4630      	mov	r0, r6
 801c684:	f7ff ffa2 	bl	801c5cc <__sfputs_r>
 801c688:	3001      	adds	r0, #1
 801c68a:	f000 80a9 	beq.w	801c7e0 <_vfiprintf_r+0x1f0>
 801c68e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c690:	445a      	add	r2, fp
 801c692:	9209      	str	r2, [sp, #36]	; 0x24
 801c694:	f89a 3000 	ldrb.w	r3, [sl]
 801c698:	2b00      	cmp	r3, #0
 801c69a:	f000 80a1 	beq.w	801c7e0 <_vfiprintf_r+0x1f0>
 801c69e:	2300      	movs	r3, #0
 801c6a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c6a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c6a8:	f10a 0a01 	add.w	sl, sl, #1
 801c6ac:	9304      	str	r3, [sp, #16]
 801c6ae:	9307      	str	r3, [sp, #28]
 801c6b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c6b4:	931a      	str	r3, [sp, #104]	; 0x68
 801c6b6:	4654      	mov	r4, sl
 801c6b8:	2205      	movs	r2, #5
 801c6ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c6be:	4854      	ldr	r0, [pc, #336]	; (801c810 <_vfiprintf_r+0x220>)
 801c6c0:	f7e3 fd86 	bl	80001d0 <memchr>
 801c6c4:	9a04      	ldr	r2, [sp, #16]
 801c6c6:	b9d8      	cbnz	r0, 801c700 <_vfiprintf_r+0x110>
 801c6c8:	06d1      	lsls	r1, r2, #27
 801c6ca:	bf44      	itt	mi
 801c6cc:	2320      	movmi	r3, #32
 801c6ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c6d2:	0713      	lsls	r3, r2, #28
 801c6d4:	bf44      	itt	mi
 801c6d6:	232b      	movmi	r3, #43	; 0x2b
 801c6d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c6dc:	f89a 3000 	ldrb.w	r3, [sl]
 801c6e0:	2b2a      	cmp	r3, #42	; 0x2a
 801c6e2:	d015      	beq.n	801c710 <_vfiprintf_r+0x120>
 801c6e4:	9a07      	ldr	r2, [sp, #28]
 801c6e6:	4654      	mov	r4, sl
 801c6e8:	2000      	movs	r0, #0
 801c6ea:	f04f 0c0a 	mov.w	ip, #10
 801c6ee:	4621      	mov	r1, r4
 801c6f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c6f4:	3b30      	subs	r3, #48	; 0x30
 801c6f6:	2b09      	cmp	r3, #9
 801c6f8:	d94d      	bls.n	801c796 <_vfiprintf_r+0x1a6>
 801c6fa:	b1b0      	cbz	r0, 801c72a <_vfiprintf_r+0x13a>
 801c6fc:	9207      	str	r2, [sp, #28]
 801c6fe:	e014      	b.n	801c72a <_vfiprintf_r+0x13a>
 801c700:	eba0 0308 	sub.w	r3, r0, r8
 801c704:	fa09 f303 	lsl.w	r3, r9, r3
 801c708:	4313      	orrs	r3, r2
 801c70a:	9304      	str	r3, [sp, #16]
 801c70c:	46a2      	mov	sl, r4
 801c70e:	e7d2      	b.n	801c6b6 <_vfiprintf_r+0xc6>
 801c710:	9b03      	ldr	r3, [sp, #12]
 801c712:	1d19      	adds	r1, r3, #4
 801c714:	681b      	ldr	r3, [r3, #0]
 801c716:	9103      	str	r1, [sp, #12]
 801c718:	2b00      	cmp	r3, #0
 801c71a:	bfbb      	ittet	lt
 801c71c:	425b      	neglt	r3, r3
 801c71e:	f042 0202 	orrlt.w	r2, r2, #2
 801c722:	9307      	strge	r3, [sp, #28]
 801c724:	9307      	strlt	r3, [sp, #28]
 801c726:	bfb8      	it	lt
 801c728:	9204      	strlt	r2, [sp, #16]
 801c72a:	7823      	ldrb	r3, [r4, #0]
 801c72c:	2b2e      	cmp	r3, #46	; 0x2e
 801c72e:	d10c      	bne.n	801c74a <_vfiprintf_r+0x15a>
 801c730:	7863      	ldrb	r3, [r4, #1]
 801c732:	2b2a      	cmp	r3, #42	; 0x2a
 801c734:	d134      	bne.n	801c7a0 <_vfiprintf_r+0x1b0>
 801c736:	9b03      	ldr	r3, [sp, #12]
 801c738:	1d1a      	adds	r2, r3, #4
 801c73a:	681b      	ldr	r3, [r3, #0]
 801c73c:	9203      	str	r2, [sp, #12]
 801c73e:	2b00      	cmp	r3, #0
 801c740:	bfb8      	it	lt
 801c742:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c746:	3402      	adds	r4, #2
 801c748:	9305      	str	r3, [sp, #20]
 801c74a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c820 <_vfiprintf_r+0x230>
 801c74e:	7821      	ldrb	r1, [r4, #0]
 801c750:	2203      	movs	r2, #3
 801c752:	4650      	mov	r0, sl
 801c754:	f7e3 fd3c 	bl	80001d0 <memchr>
 801c758:	b138      	cbz	r0, 801c76a <_vfiprintf_r+0x17a>
 801c75a:	9b04      	ldr	r3, [sp, #16]
 801c75c:	eba0 000a 	sub.w	r0, r0, sl
 801c760:	2240      	movs	r2, #64	; 0x40
 801c762:	4082      	lsls	r2, r0
 801c764:	4313      	orrs	r3, r2
 801c766:	3401      	adds	r4, #1
 801c768:	9304      	str	r3, [sp, #16]
 801c76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c76e:	4829      	ldr	r0, [pc, #164]	; (801c814 <_vfiprintf_r+0x224>)
 801c770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c774:	2206      	movs	r2, #6
 801c776:	f7e3 fd2b 	bl	80001d0 <memchr>
 801c77a:	2800      	cmp	r0, #0
 801c77c:	d03f      	beq.n	801c7fe <_vfiprintf_r+0x20e>
 801c77e:	4b26      	ldr	r3, [pc, #152]	; (801c818 <_vfiprintf_r+0x228>)
 801c780:	bb1b      	cbnz	r3, 801c7ca <_vfiprintf_r+0x1da>
 801c782:	9b03      	ldr	r3, [sp, #12]
 801c784:	3307      	adds	r3, #7
 801c786:	f023 0307 	bic.w	r3, r3, #7
 801c78a:	3308      	adds	r3, #8
 801c78c:	9303      	str	r3, [sp, #12]
 801c78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c790:	443b      	add	r3, r7
 801c792:	9309      	str	r3, [sp, #36]	; 0x24
 801c794:	e768      	b.n	801c668 <_vfiprintf_r+0x78>
 801c796:	fb0c 3202 	mla	r2, ip, r2, r3
 801c79a:	460c      	mov	r4, r1
 801c79c:	2001      	movs	r0, #1
 801c79e:	e7a6      	b.n	801c6ee <_vfiprintf_r+0xfe>
 801c7a0:	2300      	movs	r3, #0
 801c7a2:	3401      	adds	r4, #1
 801c7a4:	9305      	str	r3, [sp, #20]
 801c7a6:	4619      	mov	r1, r3
 801c7a8:	f04f 0c0a 	mov.w	ip, #10
 801c7ac:	4620      	mov	r0, r4
 801c7ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c7b2:	3a30      	subs	r2, #48	; 0x30
 801c7b4:	2a09      	cmp	r2, #9
 801c7b6:	d903      	bls.n	801c7c0 <_vfiprintf_r+0x1d0>
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d0c6      	beq.n	801c74a <_vfiprintf_r+0x15a>
 801c7bc:	9105      	str	r1, [sp, #20]
 801c7be:	e7c4      	b.n	801c74a <_vfiprintf_r+0x15a>
 801c7c0:	fb0c 2101 	mla	r1, ip, r1, r2
 801c7c4:	4604      	mov	r4, r0
 801c7c6:	2301      	movs	r3, #1
 801c7c8:	e7f0      	b.n	801c7ac <_vfiprintf_r+0x1bc>
 801c7ca:	ab03      	add	r3, sp, #12
 801c7cc:	9300      	str	r3, [sp, #0]
 801c7ce:	462a      	mov	r2, r5
 801c7d0:	4b12      	ldr	r3, [pc, #72]	; (801c81c <_vfiprintf_r+0x22c>)
 801c7d2:	a904      	add	r1, sp, #16
 801c7d4:	4630      	mov	r0, r6
 801c7d6:	f7fb fe03 	bl	80183e0 <_printf_float>
 801c7da:	4607      	mov	r7, r0
 801c7dc:	1c78      	adds	r0, r7, #1
 801c7de:	d1d6      	bne.n	801c78e <_vfiprintf_r+0x19e>
 801c7e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c7e2:	07d9      	lsls	r1, r3, #31
 801c7e4:	d405      	bmi.n	801c7f2 <_vfiprintf_r+0x202>
 801c7e6:	89ab      	ldrh	r3, [r5, #12]
 801c7e8:	059a      	lsls	r2, r3, #22
 801c7ea:	d402      	bmi.n	801c7f2 <_vfiprintf_r+0x202>
 801c7ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c7ee:	f7fd fbdc 	bl	8019faa <__retarget_lock_release_recursive>
 801c7f2:	89ab      	ldrh	r3, [r5, #12]
 801c7f4:	065b      	lsls	r3, r3, #25
 801c7f6:	f53f af1d 	bmi.w	801c634 <_vfiprintf_r+0x44>
 801c7fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c7fc:	e71c      	b.n	801c638 <_vfiprintf_r+0x48>
 801c7fe:	ab03      	add	r3, sp, #12
 801c800:	9300      	str	r3, [sp, #0]
 801c802:	462a      	mov	r2, r5
 801c804:	4b05      	ldr	r3, [pc, #20]	; (801c81c <_vfiprintf_r+0x22c>)
 801c806:	a904      	add	r1, sp, #16
 801c808:	4630      	mov	r0, r6
 801c80a:	f7fc f88d 	bl	8018928 <_printf_i>
 801c80e:	e7e4      	b.n	801c7da <_vfiprintf_r+0x1ea>
 801c810:	0801fdde 	.word	0x0801fdde
 801c814:	0801fde8 	.word	0x0801fde8
 801c818:	080183e1 	.word	0x080183e1
 801c81c:	0801c5cd 	.word	0x0801c5cd
 801c820:	0801fde4 	.word	0x0801fde4

0801c824 <__swbuf_r>:
 801c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c826:	460e      	mov	r6, r1
 801c828:	4614      	mov	r4, r2
 801c82a:	4605      	mov	r5, r0
 801c82c:	b118      	cbz	r0, 801c836 <__swbuf_r+0x12>
 801c82e:	6a03      	ldr	r3, [r0, #32]
 801c830:	b90b      	cbnz	r3, 801c836 <__swbuf_r+0x12>
 801c832:	f7fc fc45 	bl	80190c0 <__sinit>
 801c836:	69a3      	ldr	r3, [r4, #24]
 801c838:	60a3      	str	r3, [r4, #8]
 801c83a:	89a3      	ldrh	r3, [r4, #12]
 801c83c:	071a      	lsls	r2, r3, #28
 801c83e:	d525      	bpl.n	801c88c <__swbuf_r+0x68>
 801c840:	6923      	ldr	r3, [r4, #16]
 801c842:	b31b      	cbz	r3, 801c88c <__swbuf_r+0x68>
 801c844:	6823      	ldr	r3, [r4, #0]
 801c846:	6922      	ldr	r2, [r4, #16]
 801c848:	1a98      	subs	r0, r3, r2
 801c84a:	6963      	ldr	r3, [r4, #20]
 801c84c:	b2f6      	uxtb	r6, r6
 801c84e:	4283      	cmp	r3, r0
 801c850:	4637      	mov	r7, r6
 801c852:	dc04      	bgt.n	801c85e <__swbuf_r+0x3a>
 801c854:	4621      	mov	r1, r4
 801c856:	4628      	mov	r0, r5
 801c858:	f7ff f87c 	bl	801b954 <_fflush_r>
 801c85c:	b9e0      	cbnz	r0, 801c898 <__swbuf_r+0x74>
 801c85e:	68a3      	ldr	r3, [r4, #8]
 801c860:	3b01      	subs	r3, #1
 801c862:	60a3      	str	r3, [r4, #8]
 801c864:	6823      	ldr	r3, [r4, #0]
 801c866:	1c5a      	adds	r2, r3, #1
 801c868:	6022      	str	r2, [r4, #0]
 801c86a:	701e      	strb	r6, [r3, #0]
 801c86c:	6962      	ldr	r2, [r4, #20]
 801c86e:	1c43      	adds	r3, r0, #1
 801c870:	429a      	cmp	r2, r3
 801c872:	d004      	beq.n	801c87e <__swbuf_r+0x5a>
 801c874:	89a3      	ldrh	r3, [r4, #12]
 801c876:	07db      	lsls	r3, r3, #31
 801c878:	d506      	bpl.n	801c888 <__swbuf_r+0x64>
 801c87a:	2e0a      	cmp	r6, #10
 801c87c:	d104      	bne.n	801c888 <__swbuf_r+0x64>
 801c87e:	4621      	mov	r1, r4
 801c880:	4628      	mov	r0, r5
 801c882:	f7ff f867 	bl	801b954 <_fflush_r>
 801c886:	b938      	cbnz	r0, 801c898 <__swbuf_r+0x74>
 801c888:	4638      	mov	r0, r7
 801c88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c88c:	4621      	mov	r1, r4
 801c88e:	4628      	mov	r0, r5
 801c890:	f000 f806 	bl	801c8a0 <__swsetup_r>
 801c894:	2800      	cmp	r0, #0
 801c896:	d0d5      	beq.n	801c844 <__swbuf_r+0x20>
 801c898:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c89c:	e7f4      	b.n	801c888 <__swbuf_r+0x64>
	...

0801c8a0 <__swsetup_r>:
 801c8a0:	b538      	push	{r3, r4, r5, lr}
 801c8a2:	4b2a      	ldr	r3, [pc, #168]	; (801c94c <__swsetup_r+0xac>)
 801c8a4:	4605      	mov	r5, r0
 801c8a6:	6818      	ldr	r0, [r3, #0]
 801c8a8:	460c      	mov	r4, r1
 801c8aa:	b118      	cbz	r0, 801c8b4 <__swsetup_r+0x14>
 801c8ac:	6a03      	ldr	r3, [r0, #32]
 801c8ae:	b90b      	cbnz	r3, 801c8b4 <__swsetup_r+0x14>
 801c8b0:	f7fc fc06 	bl	80190c0 <__sinit>
 801c8b4:	89a3      	ldrh	r3, [r4, #12]
 801c8b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c8ba:	0718      	lsls	r0, r3, #28
 801c8bc:	d422      	bmi.n	801c904 <__swsetup_r+0x64>
 801c8be:	06d9      	lsls	r1, r3, #27
 801c8c0:	d407      	bmi.n	801c8d2 <__swsetup_r+0x32>
 801c8c2:	2309      	movs	r3, #9
 801c8c4:	602b      	str	r3, [r5, #0]
 801c8c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c8ca:	81a3      	strh	r3, [r4, #12]
 801c8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c8d0:	e034      	b.n	801c93c <__swsetup_r+0x9c>
 801c8d2:	0758      	lsls	r0, r3, #29
 801c8d4:	d512      	bpl.n	801c8fc <__swsetup_r+0x5c>
 801c8d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c8d8:	b141      	cbz	r1, 801c8ec <__swsetup_r+0x4c>
 801c8da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c8de:	4299      	cmp	r1, r3
 801c8e0:	d002      	beq.n	801c8e8 <__swsetup_r+0x48>
 801c8e2:	4628      	mov	r0, r5
 801c8e4:	f7fe f9fa 	bl	801acdc <_free_r>
 801c8e8:	2300      	movs	r3, #0
 801c8ea:	6363      	str	r3, [r4, #52]	; 0x34
 801c8ec:	89a3      	ldrh	r3, [r4, #12]
 801c8ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c8f2:	81a3      	strh	r3, [r4, #12]
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	6063      	str	r3, [r4, #4]
 801c8f8:	6923      	ldr	r3, [r4, #16]
 801c8fa:	6023      	str	r3, [r4, #0]
 801c8fc:	89a3      	ldrh	r3, [r4, #12]
 801c8fe:	f043 0308 	orr.w	r3, r3, #8
 801c902:	81a3      	strh	r3, [r4, #12]
 801c904:	6923      	ldr	r3, [r4, #16]
 801c906:	b94b      	cbnz	r3, 801c91c <__swsetup_r+0x7c>
 801c908:	89a3      	ldrh	r3, [r4, #12]
 801c90a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c90e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c912:	d003      	beq.n	801c91c <__swsetup_r+0x7c>
 801c914:	4621      	mov	r1, r4
 801c916:	4628      	mov	r0, r5
 801c918:	f000 f840 	bl	801c99c <__smakebuf_r>
 801c91c:	89a0      	ldrh	r0, [r4, #12]
 801c91e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c922:	f010 0301 	ands.w	r3, r0, #1
 801c926:	d00a      	beq.n	801c93e <__swsetup_r+0x9e>
 801c928:	2300      	movs	r3, #0
 801c92a:	60a3      	str	r3, [r4, #8]
 801c92c:	6963      	ldr	r3, [r4, #20]
 801c92e:	425b      	negs	r3, r3
 801c930:	61a3      	str	r3, [r4, #24]
 801c932:	6923      	ldr	r3, [r4, #16]
 801c934:	b943      	cbnz	r3, 801c948 <__swsetup_r+0xa8>
 801c936:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c93a:	d1c4      	bne.n	801c8c6 <__swsetup_r+0x26>
 801c93c:	bd38      	pop	{r3, r4, r5, pc}
 801c93e:	0781      	lsls	r1, r0, #30
 801c940:	bf58      	it	pl
 801c942:	6963      	ldrpl	r3, [r4, #20]
 801c944:	60a3      	str	r3, [r4, #8]
 801c946:	e7f4      	b.n	801c932 <__swsetup_r+0x92>
 801c948:	2000      	movs	r0, #0
 801c94a:	e7f7      	b.n	801c93c <__swsetup_r+0x9c>
 801c94c:	200001f0 	.word	0x200001f0

0801c950 <__swhatbuf_r>:
 801c950:	b570      	push	{r4, r5, r6, lr}
 801c952:	460c      	mov	r4, r1
 801c954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c958:	2900      	cmp	r1, #0
 801c95a:	b096      	sub	sp, #88	; 0x58
 801c95c:	4615      	mov	r5, r2
 801c95e:	461e      	mov	r6, r3
 801c960:	da0d      	bge.n	801c97e <__swhatbuf_r+0x2e>
 801c962:	89a3      	ldrh	r3, [r4, #12]
 801c964:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c968:	f04f 0100 	mov.w	r1, #0
 801c96c:	bf0c      	ite	eq
 801c96e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c972:	2340      	movne	r3, #64	; 0x40
 801c974:	2000      	movs	r0, #0
 801c976:	6031      	str	r1, [r6, #0]
 801c978:	602b      	str	r3, [r5, #0]
 801c97a:	b016      	add	sp, #88	; 0x58
 801c97c:	bd70      	pop	{r4, r5, r6, pc}
 801c97e:	466a      	mov	r2, sp
 801c980:	f000 f848 	bl	801ca14 <_fstat_r>
 801c984:	2800      	cmp	r0, #0
 801c986:	dbec      	blt.n	801c962 <__swhatbuf_r+0x12>
 801c988:	9901      	ldr	r1, [sp, #4]
 801c98a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c98e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c992:	4259      	negs	r1, r3
 801c994:	4159      	adcs	r1, r3
 801c996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c99a:	e7eb      	b.n	801c974 <__swhatbuf_r+0x24>

0801c99c <__smakebuf_r>:
 801c99c:	898b      	ldrh	r3, [r1, #12]
 801c99e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c9a0:	079d      	lsls	r5, r3, #30
 801c9a2:	4606      	mov	r6, r0
 801c9a4:	460c      	mov	r4, r1
 801c9a6:	d507      	bpl.n	801c9b8 <__smakebuf_r+0x1c>
 801c9a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c9ac:	6023      	str	r3, [r4, #0]
 801c9ae:	6123      	str	r3, [r4, #16]
 801c9b0:	2301      	movs	r3, #1
 801c9b2:	6163      	str	r3, [r4, #20]
 801c9b4:	b002      	add	sp, #8
 801c9b6:	bd70      	pop	{r4, r5, r6, pc}
 801c9b8:	ab01      	add	r3, sp, #4
 801c9ba:	466a      	mov	r2, sp
 801c9bc:	f7ff ffc8 	bl	801c950 <__swhatbuf_r>
 801c9c0:	9900      	ldr	r1, [sp, #0]
 801c9c2:	4605      	mov	r5, r0
 801c9c4:	4630      	mov	r0, r6
 801c9c6:	f7fe fead 	bl	801b724 <_malloc_r>
 801c9ca:	b948      	cbnz	r0, 801c9e0 <__smakebuf_r+0x44>
 801c9cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c9d0:	059a      	lsls	r2, r3, #22
 801c9d2:	d4ef      	bmi.n	801c9b4 <__smakebuf_r+0x18>
 801c9d4:	f023 0303 	bic.w	r3, r3, #3
 801c9d8:	f043 0302 	orr.w	r3, r3, #2
 801c9dc:	81a3      	strh	r3, [r4, #12]
 801c9de:	e7e3      	b.n	801c9a8 <__smakebuf_r+0xc>
 801c9e0:	89a3      	ldrh	r3, [r4, #12]
 801c9e2:	6020      	str	r0, [r4, #0]
 801c9e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c9e8:	81a3      	strh	r3, [r4, #12]
 801c9ea:	9b00      	ldr	r3, [sp, #0]
 801c9ec:	6163      	str	r3, [r4, #20]
 801c9ee:	9b01      	ldr	r3, [sp, #4]
 801c9f0:	6120      	str	r0, [r4, #16]
 801c9f2:	b15b      	cbz	r3, 801ca0c <__smakebuf_r+0x70>
 801c9f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c9f8:	4630      	mov	r0, r6
 801c9fa:	f000 f81d 	bl	801ca38 <_isatty_r>
 801c9fe:	b128      	cbz	r0, 801ca0c <__smakebuf_r+0x70>
 801ca00:	89a3      	ldrh	r3, [r4, #12]
 801ca02:	f023 0303 	bic.w	r3, r3, #3
 801ca06:	f043 0301 	orr.w	r3, r3, #1
 801ca0a:	81a3      	strh	r3, [r4, #12]
 801ca0c:	89a3      	ldrh	r3, [r4, #12]
 801ca0e:	431d      	orrs	r5, r3
 801ca10:	81a5      	strh	r5, [r4, #12]
 801ca12:	e7cf      	b.n	801c9b4 <__smakebuf_r+0x18>

0801ca14 <_fstat_r>:
 801ca14:	b538      	push	{r3, r4, r5, lr}
 801ca16:	4d07      	ldr	r5, [pc, #28]	; (801ca34 <_fstat_r+0x20>)
 801ca18:	2300      	movs	r3, #0
 801ca1a:	4604      	mov	r4, r0
 801ca1c:	4608      	mov	r0, r1
 801ca1e:	4611      	mov	r1, r2
 801ca20:	602b      	str	r3, [r5, #0]
 801ca22:	f7e8 fe26 	bl	8005672 <_fstat>
 801ca26:	1c43      	adds	r3, r0, #1
 801ca28:	d102      	bne.n	801ca30 <_fstat_r+0x1c>
 801ca2a:	682b      	ldr	r3, [r5, #0]
 801ca2c:	b103      	cbz	r3, 801ca30 <_fstat_r+0x1c>
 801ca2e:	6023      	str	r3, [r4, #0]
 801ca30:	bd38      	pop	{r3, r4, r5, pc}
 801ca32:	bf00      	nop
 801ca34:	20009504 	.word	0x20009504

0801ca38 <_isatty_r>:
 801ca38:	b538      	push	{r3, r4, r5, lr}
 801ca3a:	4d06      	ldr	r5, [pc, #24]	; (801ca54 <_isatty_r+0x1c>)
 801ca3c:	2300      	movs	r3, #0
 801ca3e:	4604      	mov	r4, r0
 801ca40:	4608      	mov	r0, r1
 801ca42:	602b      	str	r3, [r5, #0]
 801ca44:	f7e8 fe25 	bl	8005692 <_isatty>
 801ca48:	1c43      	adds	r3, r0, #1
 801ca4a:	d102      	bne.n	801ca52 <_isatty_r+0x1a>
 801ca4c:	682b      	ldr	r3, [r5, #0]
 801ca4e:	b103      	cbz	r3, 801ca52 <_isatty_r+0x1a>
 801ca50:	6023      	str	r3, [r4, #0]
 801ca52:	bd38      	pop	{r3, r4, r5, pc}
 801ca54:	20009504 	.word	0x20009504

0801ca58 <_raise_r>:
 801ca58:	291f      	cmp	r1, #31
 801ca5a:	b538      	push	{r3, r4, r5, lr}
 801ca5c:	4604      	mov	r4, r0
 801ca5e:	460d      	mov	r5, r1
 801ca60:	d904      	bls.n	801ca6c <_raise_r+0x14>
 801ca62:	2316      	movs	r3, #22
 801ca64:	6003      	str	r3, [r0, #0]
 801ca66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ca6a:	bd38      	pop	{r3, r4, r5, pc}
 801ca6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801ca6e:	b112      	cbz	r2, 801ca76 <_raise_r+0x1e>
 801ca70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ca74:	b94b      	cbnz	r3, 801ca8a <_raise_r+0x32>
 801ca76:	4620      	mov	r0, r4
 801ca78:	f000 f830 	bl	801cadc <_getpid_r>
 801ca7c:	462a      	mov	r2, r5
 801ca7e:	4601      	mov	r1, r0
 801ca80:	4620      	mov	r0, r4
 801ca82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ca86:	f000 b817 	b.w	801cab8 <_kill_r>
 801ca8a:	2b01      	cmp	r3, #1
 801ca8c:	d00a      	beq.n	801caa4 <_raise_r+0x4c>
 801ca8e:	1c59      	adds	r1, r3, #1
 801ca90:	d103      	bne.n	801ca9a <_raise_r+0x42>
 801ca92:	2316      	movs	r3, #22
 801ca94:	6003      	str	r3, [r0, #0]
 801ca96:	2001      	movs	r0, #1
 801ca98:	e7e7      	b.n	801ca6a <_raise_r+0x12>
 801ca9a:	2400      	movs	r4, #0
 801ca9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801caa0:	4628      	mov	r0, r5
 801caa2:	4798      	blx	r3
 801caa4:	2000      	movs	r0, #0
 801caa6:	e7e0      	b.n	801ca6a <_raise_r+0x12>

0801caa8 <raise>:
 801caa8:	4b02      	ldr	r3, [pc, #8]	; (801cab4 <raise+0xc>)
 801caaa:	4601      	mov	r1, r0
 801caac:	6818      	ldr	r0, [r3, #0]
 801caae:	f7ff bfd3 	b.w	801ca58 <_raise_r>
 801cab2:	bf00      	nop
 801cab4:	200001f0 	.word	0x200001f0

0801cab8 <_kill_r>:
 801cab8:	b538      	push	{r3, r4, r5, lr}
 801caba:	4d07      	ldr	r5, [pc, #28]	; (801cad8 <_kill_r+0x20>)
 801cabc:	2300      	movs	r3, #0
 801cabe:	4604      	mov	r4, r0
 801cac0:	4608      	mov	r0, r1
 801cac2:	4611      	mov	r1, r2
 801cac4:	602b      	str	r3, [r5, #0]
 801cac6:	f7e8 fd75 	bl	80055b4 <_kill>
 801caca:	1c43      	adds	r3, r0, #1
 801cacc:	d102      	bne.n	801cad4 <_kill_r+0x1c>
 801cace:	682b      	ldr	r3, [r5, #0]
 801cad0:	b103      	cbz	r3, 801cad4 <_kill_r+0x1c>
 801cad2:	6023      	str	r3, [r4, #0]
 801cad4:	bd38      	pop	{r3, r4, r5, pc}
 801cad6:	bf00      	nop
 801cad8:	20009504 	.word	0x20009504

0801cadc <_getpid_r>:
 801cadc:	f7e8 bd62 	b.w	80055a4 <_getpid>

0801cae0 <asinf>:
 801cae0:	b508      	push	{r3, lr}
 801cae2:	ed2d 8b02 	vpush	{d8}
 801cae6:	eeb0 8a40 	vmov.f32	s16, s0
 801caea:	f000 fd0b 	bl	801d504 <__ieee754_asinf>
 801caee:	eeb4 8a48 	vcmp.f32	s16, s16
 801caf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801caf6:	eef0 8a40 	vmov.f32	s17, s0
 801cafa:	d615      	bvs.n	801cb28 <asinf+0x48>
 801cafc:	eeb0 0a48 	vmov.f32	s0, s16
 801cb00:	f000 f954 	bl	801cdac <fabsf>
 801cb04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801cb08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801cb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb10:	dd0a      	ble.n	801cb28 <asinf+0x48>
 801cb12:	f7fd fa1f 	bl	8019f54 <__errno>
 801cb16:	ecbd 8b02 	vpop	{d8}
 801cb1a:	2321      	movs	r3, #33	; 0x21
 801cb1c:	6003      	str	r3, [r0, #0]
 801cb1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801cb22:	4804      	ldr	r0, [pc, #16]	; (801cb34 <asinf+0x54>)
 801cb24:	f7fd ba58 	b.w	8019fd8 <nanf>
 801cb28:	eeb0 0a68 	vmov.f32	s0, s17
 801cb2c:	ecbd 8b02 	vpop	{d8}
 801cb30:	bd08      	pop	{r3, pc}
 801cb32:	bf00      	nop
 801cb34:	0801ff7f 	.word	0x0801ff7f

0801cb38 <atan2f>:
 801cb38:	f000 bdca 	b.w	801d6d0 <__ieee754_atan2f>

0801cb3c <atan2>:
 801cb3c:	f000 b800 	b.w	801cb40 <__ieee754_atan2>

0801cb40 <__ieee754_atan2>:
 801cb40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb44:	ec57 6b11 	vmov	r6, r7, d1
 801cb48:	4273      	negs	r3, r6
 801cb4a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 801ccc8 <__ieee754_atan2+0x188>
 801cb4e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801cb52:	4333      	orrs	r3, r6
 801cb54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801cb58:	4543      	cmp	r3, r8
 801cb5a:	ec51 0b10 	vmov	r0, r1, d0
 801cb5e:	ee11 5a10 	vmov	r5, s2
 801cb62:	d80a      	bhi.n	801cb7a <__ieee754_atan2+0x3a>
 801cb64:	4244      	negs	r4, r0
 801cb66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801cb6a:	4304      	orrs	r4, r0
 801cb6c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801cb70:	4544      	cmp	r4, r8
 801cb72:	ee10 9a10 	vmov	r9, s0
 801cb76:	468e      	mov	lr, r1
 801cb78:	d907      	bls.n	801cb8a <__ieee754_atan2+0x4a>
 801cb7a:	4632      	mov	r2, r6
 801cb7c:	463b      	mov	r3, r7
 801cb7e:	f7e3 fb8f 	bl	80002a0 <__adddf3>
 801cb82:	ec41 0b10 	vmov	d0, r0, r1
 801cb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb8a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801cb8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801cb92:	4334      	orrs	r4, r6
 801cb94:	d103      	bne.n	801cb9e <__ieee754_atan2+0x5e>
 801cb96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb9a:	f000 b911 	b.w	801cdc0 <atan>
 801cb9e:	17bc      	asrs	r4, r7, #30
 801cba0:	f004 0402 	and.w	r4, r4, #2
 801cba4:	ea53 0909 	orrs.w	r9, r3, r9
 801cba8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801cbac:	d107      	bne.n	801cbbe <__ieee754_atan2+0x7e>
 801cbae:	2c02      	cmp	r4, #2
 801cbb0:	d05f      	beq.n	801cc72 <__ieee754_atan2+0x132>
 801cbb2:	2c03      	cmp	r4, #3
 801cbb4:	d1e5      	bne.n	801cb82 <__ieee754_atan2+0x42>
 801cbb6:	a140      	add	r1, pc, #256	; (adr r1, 801ccb8 <__ieee754_atan2+0x178>)
 801cbb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbbc:	e7e1      	b.n	801cb82 <__ieee754_atan2+0x42>
 801cbbe:	4315      	orrs	r5, r2
 801cbc0:	d106      	bne.n	801cbd0 <__ieee754_atan2+0x90>
 801cbc2:	f1be 0f00 	cmp.w	lr, #0
 801cbc6:	da5f      	bge.n	801cc88 <__ieee754_atan2+0x148>
 801cbc8:	a13d      	add	r1, pc, #244	; (adr r1, 801ccc0 <__ieee754_atan2+0x180>)
 801cbca:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbce:	e7d8      	b.n	801cb82 <__ieee754_atan2+0x42>
 801cbd0:	4542      	cmp	r2, r8
 801cbd2:	d10f      	bne.n	801cbf4 <__ieee754_atan2+0xb4>
 801cbd4:	4293      	cmp	r3, r2
 801cbd6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801cbda:	d107      	bne.n	801cbec <__ieee754_atan2+0xac>
 801cbdc:	2c02      	cmp	r4, #2
 801cbde:	d84c      	bhi.n	801cc7a <__ieee754_atan2+0x13a>
 801cbe0:	4b33      	ldr	r3, [pc, #204]	; (801ccb0 <__ieee754_atan2+0x170>)
 801cbe2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cbe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cbea:	e7ca      	b.n	801cb82 <__ieee754_atan2+0x42>
 801cbec:	2c02      	cmp	r4, #2
 801cbee:	d848      	bhi.n	801cc82 <__ieee754_atan2+0x142>
 801cbf0:	4b30      	ldr	r3, [pc, #192]	; (801ccb4 <__ieee754_atan2+0x174>)
 801cbf2:	e7f6      	b.n	801cbe2 <__ieee754_atan2+0xa2>
 801cbf4:	4543      	cmp	r3, r8
 801cbf6:	d0e4      	beq.n	801cbc2 <__ieee754_atan2+0x82>
 801cbf8:	1a9b      	subs	r3, r3, r2
 801cbfa:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801cbfe:	ea4f 5223 	mov.w	r2, r3, asr #20
 801cc02:	da1e      	bge.n	801cc42 <__ieee754_atan2+0x102>
 801cc04:	2f00      	cmp	r7, #0
 801cc06:	da01      	bge.n	801cc0c <__ieee754_atan2+0xcc>
 801cc08:	323c      	adds	r2, #60	; 0x3c
 801cc0a:	db1e      	blt.n	801cc4a <__ieee754_atan2+0x10a>
 801cc0c:	4632      	mov	r2, r6
 801cc0e:	463b      	mov	r3, r7
 801cc10:	f7e3 fe26 	bl	8000860 <__aeabi_ddiv>
 801cc14:	ec41 0b10 	vmov	d0, r0, r1
 801cc18:	f000 fab8 	bl	801d18c <fabs>
 801cc1c:	f000 f8d0 	bl	801cdc0 <atan>
 801cc20:	ec51 0b10 	vmov	r0, r1, d0
 801cc24:	2c01      	cmp	r4, #1
 801cc26:	d013      	beq.n	801cc50 <__ieee754_atan2+0x110>
 801cc28:	2c02      	cmp	r4, #2
 801cc2a:	d015      	beq.n	801cc58 <__ieee754_atan2+0x118>
 801cc2c:	2c00      	cmp	r4, #0
 801cc2e:	d0a8      	beq.n	801cb82 <__ieee754_atan2+0x42>
 801cc30:	a317      	add	r3, pc, #92	; (adr r3, 801cc90 <__ieee754_atan2+0x150>)
 801cc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc36:	f7e3 fb31 	bl	800029c <__aeabi_dsub>
 801cc3a:	a317      	add	r3, pc, #92	; (adr r3, 801cc98 <__ieee754_atan2+0x158>)
 801cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc40:	e014      	b.n	801cc6c <__ieee754_atan2+0x12c>
 801cc42:	a117      	add	r1, pc, #92	; (adr r1, 801cca0 <__ieee754_atan2+0x160>)
 801cc44:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc48:	e7ec      	b.n	801cc24 <__ieee754_atan2+0xe4>
 801cc4a:	2000      	movs	r0, #0
 801cc4c:	2100      	movs	r1, #0
 801cc4e:	e7e9      	b.n	801cc24 <__ieee754_atan2+0xe4>
 801cc50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cc54:	4619      	mov	r1, r3
 801cc56:	e794      	b.n	801cb82 <__ieee754_atan2+0x42>
 801cc58:	a30d      	add	r3, pc, #52	; (adr r3, 801cc90 <__ieee754_atan2+0x150>)
 801cc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc5e:	f7e3 fb1d 	bl	800029c <__aeabi_dsub>
 801cc62:	4602      	mov	r2, r0
 801cc64:	460b      	mov	r3, r1
 801cc66:	a10c      	add	r1, pc, #48	; (adr r1, 801cc98 <__ieee754_atan2+0x158>)
 801cc68:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc6c:	f7e3 fb16 	bl	800029c <__aeabi_dsub>
 801cc70:	e787      	b.n	801cb82 <__ieee754_atan2+0x42>
 801cc72:	a109      	add	r1, pc, #36	; (adr r1, 801cc98 <__ieee754_atan2+0x158>)
 801cc74:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc78:	e783      	b.n	801cb82 <__ieee754_atan2+0x42>
 801cc7a:	a10b      	add	r1, pc, #44	; (adr r1, 801cca8 <__ieee754_atan2+0x168>)
 801cc7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc80:	e77f      	b.n	801cb82 <__ieee754_atan2+0x42>
 801cc82:	2000      	movs	r0, #0
 801cc84:	2100      	movs	r1, #0
 801cc86:	e77c      	b.n	801cb82 <__ieee754_atan2+0x42>
 801cc88:	a105      	add	r1, pc, #20	; (adr r1, 801cca0 <__ieee754_atan2+0x160>)
 801cc8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc8e:	e778      	b.n	801cb82 <__ieee754_atan2+0x42>
 801cc90:	33145c07 	.word	0x33145c07
 801cc94:	3ca1a626 	.word	0x3ca1a626
 801cc98:	54442d18 	.word	0x54442d18
 801cc9c:	400921fb 	.word	0x400921fb
 801cca0:	54442d18 	.word	0x54442d18
 801cca4:	3ff921fb 	.word	0x3ff921fb
 801cca8:	54442d18 	.word	0x54442d18
 801ccac:	3fe921fb 	.word	0x3fe921fb
 801ccb0:	0801ff80 	.word	0x0801ff80
 801ccb4:	0801ff98 	.word	0x0801ff98
 801ccb8:	54442d18 	.word	0x54442d18
 801ccbc:	c00921fb 	.word	0xc00921fb
 801ccc0:	54442d18 	.word	0x54442d18
 801ccc4:	bff921fb 	.word	0xbff921fb
 801ccc8:	7ff00000 	.word	0x7ff00000

0801cccc <cosf>:
 801cccc:	ee10 3a10 	vmov	r3, s0
 801ccd0:	b507      	push	{r0, r1, r2, lr}
 801ccd2:	4a1e      	ldr	r2, [pc, #120]	; (801cd4c <cosf+0x80>)
 801ccd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ccd8:	4293      	cmp	r3, r2
 801ccda:	dc06      	bgt.n	801ccea <cosf+0x1e>
 801ccdc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801cd50 <cosf+0x84>
 801cce0:	b003      	add	sp, #12
 801cce2:	f85d eb04 	ldr.w	lr, [sp], #4
 801cce6:	f000 ba87 	b.w	801d1f8 <__kernel_cosf>
 801ccea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ccee:	db04      	blt.n	801ccfa <cosf+0x2e>
 801ccf0:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ccf4:	b003      	add	sp, #12
 801ccf6:	f85d fb04 	ldr.w	pc, [sp], #4
 801ccfa:	4668      	mov	r0, sp
 801ccfc:	f000 ff68 	bl	801dbd0 <__ieee754_rem_pio2f>
 801cd00:	f000 0003 	and.w	r0, r0, #3
 801cd04:	2801      	cmp	r0, #1
 801cd06:	d009      	beq.n	801cd1c <cosf+0x50>
 801cd08:	2802      	cmp	r0, #2
 801cd0a:	d010      	beq.n	801cd2e <cosf+0x62>
 801cd0c:	b9b0      	cbnz	r0, 801cd3c <cosf+0x70>
 801cd0e:	eddd 0a01 	vldr	s1, [sp, #4]
 801cd12:	ed9d 0a00 	vldr	s0, [sp]
 801cd16:	f000 fa6f 	bl	801d1f8 <__kernel_cosf>
 801cd1a:	e7eb      	b.n	801ccf4 <cosf+0x28>
 801cd1c:	eddd 0a01 	vldr	s1, [sp, #4]
 801cd20:	ed9d 0a00 	vldr	s0, [sp]
 801cd24:	f000 fac6 	bl	801d2b4 <__kernel_sinf>
 801cd28:	eeb1 0a40 	vneg.f32	s0, s0
 801cd2c:	e7e2      	b.n	801ccf4 <cosf+0x28>
 801cd2e:	eddd 0a01 	vldr	s1, [sp, #4]
 801cd32:	ed9d 0a00 	vldr	s0, [sp]
 801cd36:	f000 fa5f 	bl	801d1f8 <__kernel_cosf>
 801cd3a:	e7f5      	b.n	801cd28 <cosf+0x5c>
 801cd3c:	eddd 0a01 	vldr	s1, [sp, #4]
 801cd40:	ed9d 0a00 	vldr	s0, [sp]
 801cd44:	2001      	movs	r0, #1
 801cd46:	f000 fab5 	bl	801d2b4 <__kernel_sinf>
 801cd4a:	e7d3      	b.n	801ccf4 <cosf+0x28>
 801cd4c:	3f490fd8 	.word	0x3f490fd8
 801cd50:	00000000 	.word	0x00000000

0801cd54 <sqrt>:
 801cd54:	b538      	push	{r3, r4, r5, lr}
 801cd56:	ed2d 8b02 	vpush	{d8}
 801cd5a:	ec55 4b10 	vmov	r4, r5, d0
 801cd5e:	f000 fd57 	bl	801d810 <__ieee754_sqrt>
 801cd62:	4622      	mov	r2, r4
 801cd64:	462b      	mov	r3, r5
 801cd66:	4620      	mov	r0, r4
 801cd68:	4629      	mov	r1, r5
 801cd6a:	eeb0 8a40 	vmov.f32	s16, s0
 801cd6e:	eef0 8a60 	vmov.f32	s17, s1
 801cd72:	f7e3 fee5 	bl	8000b40 <__aeabi_dcmpun>
 801cd76:	b990      	cbnz	r0, 801cd9e <sqrt+0x4a>
 801cd78:	2200      	movs	r2, #0
 801cd7a:	2300      	movs	r3, #0
 801cd7c:	4620      	mov	r0, r4
 801cd7e:	4629      	mov	r1, r5
 801cd80:	f7e3 feb6 	bl	8000af0 <__aeabi_dcmplt>
 801cd84:	b158      	cbz	r0, 801cd9e <sqrt+0x4a>
 801cd86:	f7fd f8e5 	bl	8019f54 <__errno>
 801cd8a:	2321      	movs	r3, #33	; 0x21
 801cd8c:	6003      	str	r3, [r0, #0]
 801cd8e:	2200      	movs	r2, #0
 801cd90:	2300      	movs	r3, #0
 801cd92:	4610      	mov	r0, r2
 801cd94:	4619      	mov	r1, r3
 801cd96:	f7e3 fd63 	bl	8000860 <__aeabi_ddiv>
 801cd9a:	ec41 0b18 	vmov	d8, r0, r1
 801cd9e:	eeb0 0a48 	vmov.f32	s0, s16
 801cda2:	eef0 0a68 	vmov.f32	s1, s17
 801cda6:	ecbd 8b02 	vpop	{d8}
 801cdaa:	bd38      	pop	{r3, r4, r5, pc}

0801cdac <fabsf>:
 801cdac:	ee10 3a10 	vmov	r3, s0
 801cdb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cdb4:	ee00 3a10 	vmov	s0, r3
 801cdb8:	4770      	bx	lr
 801cdba:	0000      	movs	r0, r0
 801cdbc:	0000      	movs	r0, r0
	...

0801cdc0 <atan>:
 801cdc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdc4:	ec55 4b10 	vmov	r4, r5, d0
 801cdc8:	4bc3      	ldr	r3, [pc, #780]	; (801d0d8 <atan+0x318>)
 801cdca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801cdce:	429e      	cmp	r6, r3
 801cdd0:	46ab      	mov	fp, r5
 801cdd2:	dd18      	ble.n	801ce06 <atan+0x46>
 801cdd4:	4bc1      	ldr	r3, [pc, #772]	; (801d0dc <atan+0x31c>)
 801cdd6:	429e      	cmp	r6, r3
 801cdd8:	dc01      	bgt.n	801cdde <atan+0x1e>
 801cdda:	d109      	bne.n	801cdf0 <atan+0x30>
 801cddc:	b144      	cbz	r4, 801cdf0 <atan+0x30>
 801cdde:	4622      	mov	r2, r4
 801cde0:	462b      	mov	r3, r5
 801cde2:	4620      	mov	r0, r4
 801cde4:	4629      	mov	r1, r5
 801cde6:	f7e3 fa5b 	bl	80002a0 <__adddf3>
 801cdea:	4604      	mov	r4, r0
 801cdec:	460d      	mov	r5, r1
 801cdee:	e006      	b.n	801cdfe <atan+0x3e>
 801cdf0:	f1bb 0f00 	cmp.w	fp, #0
 801cdf4:	f300 8131 	bgt.w	801d05a <atan+0x29a>
 801cdf8:	a59b      	add	r5, pc, #620	; (adr r5, 801d068 <atan+0x2a8>)
 801cdfa:	e9d5 4500 	ldrd	r4, r5, [r5]
 801cdfe:	ec45 4b10 	vmov	d0, r4, r5
 801ce02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce06:	4bb6      	ldr	r3, [pc, #728]	; (801d0e0 <atan+0x320>)
 801ce08:	429e      	cmp	r6, r3
 801ce0a:	dc14      	bgt.n	801ce36 <atan+0x76>
 801ce0c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801ce10:	429e      	cmp	r6, r3
 801ce12:	dc0d      	bgt.n	801ce30 <atan+0x70>
 801ce14:	a396      	add	r3, pc, #600	; (adr r3, 801d070 <atan+0x2b0>)
 801ce16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce1a:	ee10 0a10 	vmov	r0, s0
 801ce1e:	4629      	mov	r1, r5
 801ce20:	f7e3 fa3e 	bl	80002a0 <__adddf3>
 801ce24:	4baf      	ldr	r3, [pc, #700]	; (801d0e4 <atan+0x324>)
 801ce26:	2200      	movs	r2, #0
 801ce28:	f7e3 fe80 	bl	8000b2c <__aeabi_dcmpgt>
 801ce2c:	2800      	cmp	r0, #0
 801ce2e:	d1e6      	bne.n	801cdfe <atan+0x3e>
 801ce30:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801ce34:	e02b      	b.n	801ce8e <atan+0xce>
 801ce36:	f000 f9a9 	bl	801d18c <fabs>
 801ce3a:	4bab      	ldr	r3, [pc, #684]	; (801d0e8 <atan+0x328>)
 801ce3c:	429e      	cmp	r6, r3
 801ce3e:	ec55 4b10 	vmov	r4, r5, d0
 801ce42:	f300 80bf 	bgt.w	801cfc4 <atan+0x204>
 801ce46:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801ce4a:	429e      	cmp	r6, r3
 801ce4c:	f300 80a0 	bgt.w	801cf90 <atan+0x1d0>
 801ce50:	ee10 2a10 	vmov	r2, s0
 801ce54:	ee10 0a10 	vmov	r0, s0
 801ce58:	462b      	mov	r3, r5
 801ce5a:	4629      	mov	r1, r5
 801ce5c:	f7e3 fa20 	bl	80002a0 <__adddf3>
 801ce60:	4ba0      	ldr	r3, [pc, #640]	; (801d0e4 <atan+0x324>)
 801ce62:	2200      	movs	r2, #0
 801ce64:	f7e3 fa1a 	bl	800029c <__aeabi_dsub>
 801ce68:	2200      	movs	r2, #0
 801ce6a:	4606      	mov	r6, r0
 801ce6c:	460f      	mov	r7, r1
 801ce6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ce72:	4620      	mov	r0, r4
 801ce74:	4629      	mov	r1, r5
 801ce76:	f7e3 fa13 	bl	80002a0 <__adddf3>
 801ce7a:	4602      	mov	r2, r0
 801ce7c:	460b      	mov	r3, r1
 801ce7e:	4630      	mov	r0, r6
 801ce80:	4639      	mov	r1, r7
 801ce82:	f7e3 fced 	bl	8000860 <__aeabi_ddiv>
 801ce86:	f04f 0a00 	mov.w	sl, #0
 801ce8a:	4604      	mov	r4, r0
 801ce8c:	460d      	mov	r5, r1
 801ce8e:	4622      	mov	r2, r4
 801ce90:	462b      	mov	r3, r5
 801ce92:	4620      	mov	r0, r4
 801ce94:	4629      	mov	r1, r5
 801ce96:	f7e3 fbb9 	bl	800060c <__aeabi_dmul>
 801ce9a:	4602      	mov	r2, r0
 801ce9c:	460b      	mov	r3, r1
 801ce9e:	4680      	mov	r8, r0
 801cea0:	4689      	mov	r9, r1
 801cea2:	f7e3 fbb3 	bl	800060c <__aeabi_dmul>
 801cea6:	a374      	add	r3, pc, #464	; (adr r3, 801d078 <atan+0x2b8>)
 801cea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceac:	4606      	mov	r6, r0
 801ceae:	460f      	mov	r7, r1
 801ceb0:	f7e3 fbac 	bl	800060c <__aeabi_dmul>
 801ceb4:	a372      	add	r3, pc, #456	; (adr r3, 801d080 <atan+0x2c0>)
 801ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceba:	f7e3 f9f1 	bl	80002a0 <__adddf3>
 801cebe:	4632      	mov	r2, r6
 801cec0:	463b      	mov	r3, r7
 801cec2:	f7e3 fba3 	bl	800060c <__aeabi_dmul>
 801cec6:	a370      	add	r3, pc, #448	; (adr r3, 801d088 <atan+0x2c8>)
 801cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cecc:	f7e3 f9e8 	bl	80002a0 <__adddf3>
 801ced0:	4632      	mov	r2, r6
 801ced2:	463b      	mov	r3, r7
 801ced4:	f7e3 fb9a 	bl	800060c <__aeabi_dmul>
 801ced8:	a36d      	add	r3, pc, #436	; (adr r3, 801d090 <atan+0x2d0>)
 801ceda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cede:	f7e3 f9df 	bl	80002a0 <__adddf3>
 801cee2:	4632      	mov	r2, r6
 801cee4:	463b      	mov	r3, r7
 801cee6:	f7e3 fb91 	bl	800060c <__aeabi_dmul>
 801ceea:	a36b      	add	r3, pc, #428	; (adr r3, 801d098 <atan+0x2d8>)
 801ceec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cef0:	f7e3 f9d6 	bl	80002a0 <__adddf3>
 801cef4:	4632      	mov	r2, r6
 801cef6:	463b      	mov	r3, r7
 801cef8:	f7e3 fb88 	bl	800060c <__aeabi_dmul>
 801cefc:	a368      	add	r3, pc, #416	; (adr r3, 801d0a0 <atan+0x2e0>)
 801cefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf02:	f7e3 f9cd 	bl	80002a0 <__adddf3>
 801cf06:	4642      	mov	r2, r8
 801cf08:	464b      	mov	r3, r9
 801cf0a:	f7e3 fb7f 	bl	800060c <__aeabi_dmul>
 801cf0e:	a366      	add	r3, pc, #408	; (adr r3, 801d0a8 <atan+0x2e8>)
 801cf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf14:	4680      	mov	r8, r0
 801cf16:	4689      	mov	r9, r1
 801cf18:	4630      	mov	r0, r6
 801cf1a:	4639      	mov	r1, r7
 801cf1c:	f7e3 fb76 	bl	800060c <__aeabi_dmul>
 801cf20:	a363      	add	r3, pc, #396	; (adr r3, 801d0b0 <atan+0x2f0>)
 801cf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf26:	f7e3 f9b9 	bl	800029c <__aeabi_dsub>
 801cf2a:	4632      	mov	r2, r6
 801cf2c:	463b      	mov	r3, r7
 801cf2e:	f7e3 fb6d 	bl	800060c <__aeabi_dmul>
 801cf32:	a361      	add	r3, pc, #388	; (adr r3, 801d0b8 <atan+0x2f8>)
 801cf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf38:	f7e3 f9b0 	bl	800029c <__aeabi_dsub>
 801cf3c:	4632      	mov	r2, r6
 801cf3e:	463b      	mov	r3, r7
 801cf40:	f7e3 fb64 	bl	800060c <__aeabi_dmul>
 801cf44:	a35e      	add	r3, pc, #376	; (adr r3, 801d0c0 <atan+0x300>)
 801cf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf4a:	f7e3 f9a7 	bl	800029c <__aeabi_dsub>
 801cf4e:	4632      	mov	r2, r6
 801cf50:	463b      	mov	r3, r7
 801cf52:	f7e3 fb5b 	bl	800060c <__aeabi_dmul>
 801cf56:	a35c      	add	r3, pc, #368	; (adr r3, 801d0c8 <atan+0x308>)
 801cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf5c:	f7e3 f99e 	bl	800029c <__aeabi_dsub>
 801cf60:	4632      	mov	r2, r6
 801cf62:	463b      	mov	r3, r7
 801cf64:	f7e3 fb52 	bl	800060c <__aeabi_dmul>
 801cf68:	4602      	mov	r2, r0
 801cf6a:	460b      	mov	r3, r1
 801cf6c:	4640      	mov	r0, r8
 801cf6e:	4649      	mov	r1, r9
 801cf70:	f7e3 f996 	bl	80002a0 <__adddf3>
 801cf74:	4622      	mov	r2, r4
 801cf76:	462b      	mov	r3, r5
 801cf78:	f7e3 fb48 	bl	800060c <__aeabi_dmul>
 801cf7c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 801cf80:	4602      	mov	r2, r0
 801cf82:	460b      	mov	r3, r1
 801cf84:	d14b      	bne.n	801d01e <atan+0x25e>
 801cf86:	4620      	mov	r0, r4
 801cf88:	4629      	mov	r1, r5
 801cf8a:	f7e3 f987 	bl	800029c <__aeabi_dsub>
 801cf8e:	e72c      	b.n	801cdea <atan+0x2a>
 801cf90:	ee10 0a10 	vmov	r0, s0
 801cf94:	4b53      	ldr	r3, [pc, #332]	; (801d0e4 <atan+0x324>)
 801cf96:	2200      	movs	r2, #0
 801cf98:	4629      	mov	r1, r5
 801cf9a:	f7e3 f97f 	bl	800029c <__aeabi_dsub>
 801cf9e:	4b51      	ldr	r3, [pc, #324]	; (801d0e4 <atan+0x324>)
 801cfa0:	4606      	mov	r6, r0
 801cfa2:	460f      	mov	r7, r1
 801cfa4:	2200      	movs	r2, #0
 801cfa6:	4620      	mov	r0, r4
 801cfa8:	4629      	mov	r1, r5
 801cfaa:	f7e3 f979 	bl	80002a0 <__adddf3>
 801cfae:	4602      	mov	r2, r0
 801cfb0:	460b      	mov	r3, r1
 801cfb2:	4630      	mov	r0, r6
 801cfb4:	4639      	mov	r1, r7
 801cfb6:	f7e3 fc53 	bl	8000860 <__aeabi_ddiv>
 801cfba:	f04f 0a01 	mov.w	sl, #1
 801cfbe:	4604      	mov	r4, r0
 801cfc0:	460d      	mov	r5, r1
 801cfc2:	e764      	b.n	801ce8e <atan+0xce>
 801cfc4:	4b49      	ldr	r3, [pc, #292]	; (801d0ec <atan+0x32c>)
 801cfc6:	429e      	cmp	r6, r3
 801cfc8:	da1d      	bge.n	801d006 <atan+0x246>
 801cfca:	ee10 0a10 	vmov	r0, s0
 801cfce:	4b48      	ldr	r3, [pc, #288]	; (801d0f0 <atan+0x330>)
 801cfd0:	2200      	movs	r2, #0
 801cfd2:	4629      	mov	r1, r5
 801cfd4:	f7e3 f962 	bl	800029c <__aeabi_dsub>
 801cfd8:	4b45      	ldr	r3, [pc, #276]	; (801d0f0 <atan+0x330>)
 801cfda:	4606      	mov	r6, r0
 801cfdc:	460f      	mov	r7, r1
 801cfde:	2200      	movs	r2, #0
 801cfe0:	4620      	mov	r0, r4
 801cfe2:	4629      	mov	r1, r5
 801cfe4:	f7e3 fb12 	bl	800060c <__aeabi_dmul>
 801cfe8:	4b3e      	ldr	r3, [pc, #248]	; (801d0e4 <atan+0x324>)
 801cfea:	2200      	movs	r2, #0
 801cfec:	f7e3 f958 	bl	80002a0 <__adddf3>
 801cff0:	4602      	mov	r2, r0
 801cff2:	460b      	mov	r3, r1
 801cff4:	4630      	mov	r0, r6
 801cff6:	4639      	mov	r1, r7
 801cff8:	f7e3 fc32 	bl	8000860 <__aeabi_ddiv>
 801cffc:	f04f 0a02 	mov.w	sl, #2
 801d000:	4604      	mov	r4, r0
 801d002:	460d      	mov	r5, r1
 801d004:	e743      	b.n	801ce8e <atan+0xce>
 801d006:	462b      	mov	r3, r5
 801d008:	ee10 2a10 	vmov	r2, s0
 801d00c:	4939      	ldr	r1, [pc, #228]	; (801d0f4 <atan+0x334>)
 801d00e:	2000      	movs	r0, #0
 801d010:	f7e3 fc26 	bl	8000860 <__aeabi_ddiv>
 801d014:	f04f 0a03 	mov.w	sl, #3
 801d018:	4604      	mov	r4, r0
 801d01a:	460d      	mov	r5, r1
 801d01c:	e737      	b.n	801ce8e <atan+0xce>
 801d01e:	4b36      	ldr	r3, [pc, #216]	; (801d0f8 <atan+0x338>)
 801d020:	4e36      	ldr	r6, [pc, #216]	; (801d0fc <atan+0x33c>)
 801d022:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d02a:	f7e3 f937 	bl	800029c <__aeabi_dsub>
 801d02e:	4622      	mov	r2, r4
 801d030:	462b      	mov	r3, r5
 801d032:	f7e3 f933 	bl	800029c <__aeabi_dsub>
 801d036:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801d03a:	4602      	mov	r2, r0
 801d03c:	460b      	mov	r3, r1
 801d03e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d042:	f7e3 f92b 	bl	800029c <__aeabi_dsub>
 801d046:	f1bb 0f00 	cmp.w	fp, #0
 801d04a:	4604      	mov	r4, r0
 801d04c:	460d      	mov	r5, r1
 801d04e:	f6bf aed6 	bge.w	801cdfe <atan+0x3e>
 801d052:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d056:	461d      	mov	r5, r3
 801d058:	e6d1      	b.n	801cdfe <atan+0x3e>
 801d05a:	a51d      	add	r5, pc, #116	; (adr r5, 801d0d0 <atan+0x310>)
 801d05c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d060:	e6cd      	b.n	801cdfe <atan+0x3e>
 801d062:	bf00      	nop
 801d064:	f3af 8000 	nop.w
 801d068:	54442d18 	.word	0x54442d18
 801d06c:	bff921fb 	.word	0xbff921fb
 801d070:	8800759c 	.word	0x8800759c
 801d074:	7e37e43c 	.word	0x7e37e43c
 801d078:	e322da11 	.word	0xe322da11
 801d07c:	3f90ad3a 	.word	0x3f90ad3a
 801d080:	24760deb 	.word	0x24760deb
 801d084:	3fa97b4b 	.word	0x3fa97b4b
 801d088:	a0d03d51 	.word	0xa0d03d51
 801d08c:	3fb10d66 	.word	0x3fb10d66
 801d090:	c54c206e 	.word	0xc54c206e
 801d094:	3fb745cd 	.word	0x3fb745cd
 801d098:	920083ff 	.word	0x920083ff
 801d09c:	3fc24924 	.word	0x3fc24924
 801d0a0:	5555550d 	.word	0x5555550d
 801d0a4:	3fd55555 	.word	0x3fd55555
 801d0a8:	2c6a6c2f 	.word	0x2c6a6c2f
 801d0ac:	bfa2b444 	.word	0xbfa2b444
 801d0b0:	52defd9a 	.word	0x52defd9a
 801d0b4:	3fadde2d 	.word	0x3fadde2d
 801d0b8:	af749a6d 	.word	0xaf749a6d
 801d0bc:	3fb3b0f2 	.word	0x3fb3b0f2
 801d0c0:	fe231671 	.word	0xfe231671
 801d0c4:	3fbc71c6 	.word	0x3fbc71c6
 801d0c8:	9998ebc4 	.word	0x9998ebc4
 801d0cc:	3fc99999 	.word	0x3fc99999
 801d0d0:	54442d18 	.word	0x54442d18
 801d0d4:	3ff921fb 	.word	0x3ff921fb
 801d0d8:	440fffff 	.word	0x440fffff
 801d0dc:	7ff00000 	.word	0x7ff00000
 801d0e0:	3fdbffff 	.word	0x3fdbffff
 801d0e4:	3ff00000 	.word	0x3ff00000
 801d0e8:	3ff2ffff 	.word	0x3ff2ffff
 801d0ec:	40038000 	.word	0x40038000
 801d0f0:	3ff80000 	.word	0x3ff80000
 801d0f4:	bff00000 	.word	0xbff00000
 801d0f8:	0801ffd0 	.word	0x0801ffd0
 801d0fc:	0801ffb0 	.word	0x0801ffb0

0801d100 <sinf>:
 801d100:	ee10 3a10 	vmov	r3, s0
 801d104:	b507      	push	{r0, r1, r2, lr}
 801d106:	4a1f      	ldr	r2, [pc, #124]	; (801d184 <sinf+0x84>)
 801d108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d10c:	4293      	cmp	r3, r2
 801d10e:	dc07      	bgt.n	801d120 <sinf+0x20>
 801d110:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801d188 <sinf+0x88>
 801d114:	2000      	movs	r0, #0
 801d116:	b003      	add	sp, #12
 801d118:	f85d eb04 	ldr.w	lr, [sp], #4
 801d11c:	f000 b8ca 	b.w	801d2b4 <__kernel_sinf>
 801d120:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d124:	db04      	blt.n	801d130 <sinf+0x30>
 801d126:	ee30 0a40 	vsub.f32	s0, s0, s0
 801d12a:	b003      	add	sp, #12
 801d12c:	f85d fb04 	ldr.w	pc, [sp], #4
 801d130:	4668      	mov	r0, sp
 801d132:	f000 fd4d 	bl	801dbd0 <__ieee754_rem_pio2f>
 801d136:	f000 0003 	and.w	r0, r0, #3
 801d13a:	2801      	cmp	r0, #1
 801d13c:	d00a      	beq.n	801d154 <sinf+0x54>
 801d13e:	2802      	cmp	r0, #2
 801d140:	d00f      	beq.n	801d162 <sinf+0x62>
 801d142:	b9c0      	cbnz	r0, 801d176 <sinf+0x76>
 801d144:	eddd 0a01 	vldr	s1, [sp, #4]
 801d148:	ed9d 0a00 	vldr	s0, [sp]
 801d14c:	2001      	movs	r0, #1
 801d14e:	f000 f8b1 	bl	801d2b4 <__kernel_sinf>
 801d152:	e7ea      	b.n	801d12a <sinf+0x2a>
 801d154:	eddd 0a01 	vldr	s1, [sp, #4]
 801d158:	ed9d 0a00 	vldr	s0, [sp]
 801d15c:	f000 f84c 	bl	801d1f8 <__kernel_cosf>
 801d160:	e7e3      	b.n	801d12a <sinf+0x2a>
 801d162:	eddd 0a01 	vldr	s1, [sp, #4]
 801d166:	ed9d 0a00 	vldr	s0, [sp]
 801d16a:	2001      	movs	r0, #1
 801d16c:	f000 f8a2 	bl	801d2b4 <__kernel_sinf>
 801d170:	eeb1 0a40 	vneg.f32	s0, s0
 801d174:	e7d9      	b.n	801d12a <sinf+0x2a>
 801d176:	eddd 0a01 	vldr	s1, [sp, #4]
 801d17a:	ed9d 0a00 	vldr	s0, [sp]
 801d17e:	f000 f83b 	bl	801d1f8 <__kernel_cosf>
 801d182:	e7f5      	b.n	801d170 <sinf+0x70>
 801d184:	3f490fd8 	.word	0x3f490fd8
 801d188:	00000000 	.word	0x00000000

0801d18c <fabs>:
 801d18c:	ec51 0b10 	vmov	r0, r1, d0
 801d190:	ee10 2a10 	vmov	r2, s0
 801d194:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d198:	ec43 2b10 	vmov	d0, r2, r3
 801d19c:	4770      	bx	lr
	...

0801d1a0 <tanf>:
 801d1a0:	ee10 3a10 	vmov	r3, s0
 801d1a4:	b507      	push	{r0, r1, r2, lr}
 801d1a6:	4a12      	ldr	r2, [pc, #72]	; (801d1f0 <tanf+0x50>)
 801d1a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d1ac:	4293      	cmp	r3, r2
 801d1ae:	dc07      	bgt.n	801d1c0 <tanf+0x20>
 801d1b0:	eddf 0a10 	vldr	s1, [pc, #64]	; 801d1f4 <tanf+0x54>
 801d1b4:	2001      	movs	r0, #1
 801d1b6:	b003      	add	sp, #12
 801d1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1bc:	f000 b8c2 	b.w	801d344 <__kernel_tanf>
 801d1c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d1c4:	db04      	blt.n	801d1d0 <tanf+0x30>
 801d1c6:	ee30 0a40 	vsub.f32	s0, s0, s0
 801d1ca:	b003      	add	sp, #12
 801d1cc:	f85d fb04 	ldr.w	pc, [sp], #4
 801d1d0:	4668      	mov	r0, sp
 801d1d2:	f000 fcfd 	bl	801dbd0 <__ieee754_rem_pio2f>
 801d1d6:	0040      	lsls	r0, r0, #1
 801d1d8:	f000 0002 	and.w	r0, r0, #2
 801d1dc:	eddd 0a01 	vldr	s1, [sp, #4]
 801d1e0:	ed9d 0a00 	vldr	s0, [sp]
 801d1e4:	f1c0 0001 	rsb	r0, r0, #1
 801d1e8:	f000 f8ac 	bl	801d344 <__kernel_tanf>
 801d1ec:	e7ed      	b.n	801d1ca <tanf+0x2a>
 801d1ee:	bf00      	nop
 801d1f0:	3f490fda 	.word	0x3f490fda
 801d1f4:	00000000 	.word	0x00000000

0801d1f8 <__kernel_cosf>:
 801d1f8:	ee10 3a10 	vmov	r3, s0
 801d1fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d200:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801d204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d208:	da05      	bge.n	801d216 <__kernel_cosf+0x1e>
 801d20a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801d20e:	ee17 2a90 	vmov	r2, s15
 801d212:	2a00      	cmp	r2, #0
 801d214:	d03b      	beq.n	801d28e <__kernel_cosf+0x96>
 801d216:	ee20 7a00 	vmul.f32	s14, s0, s0
 801d21a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801d294 <__kernel_cosf+0x9c>
 801d21e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801d298 <__kernel_cosf+0xa0>
 801d222:	4a1e      	ldr	r2, [pc, #120]	; (801d29c <__kernel_cosf+0xa4>)
 801d224:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d228:	4293      	cmp	r3, r2
 801d22a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801d2a0 <__kernel_cosf+0xa8>
 801d22e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d232:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801d2a4 <__kernel_cosf+0xac>
 801d236:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d23a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801d2a8 <__kernel_cosf+0xb0>
 801d23e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d242:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801d2ac <__kernel_cosf+0xb4>
 801d246:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d24a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801d24e:	ee26 6a07 	vmul.f32	s12, s12, s14
 801d252:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d256:	eee7 0a06 	vfma.f32	s1, s14, s12
 801d25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d25e:	dc04      	bgt.n	801d26a <__kernel_cosf+0x72>
 801d260:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801d264:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801d268:	4770      	bx	lr
 801d26a:	4a11      	ldr	r2, [pc, #68]	; (801d2b0 <__kernel_cosf+0xb8>)
 801d26c:	4293      	cmp	r3, r2
 801d26e:	bfda      	itte	le
 801d270:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801d274:	ee07 3a10 	vmovle	s14, r3
 801d278:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801d27c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d280:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801d284:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801d288:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d28c:	4770      	bx	lr
 801d28e:	eeb0 0a66 	vmov.f32	s0, s13
 801d292:	4770      	bx	lr
 801d294:	ad47d74e 	.word	0xad47d74e
 801d298:	310f74f6 	.word	0x310f74f6
 801d29c:	3e999999 	.word	0x3e999999
 801d2a0:	b493f27c 	.word	0xb493f27c
 801d2a4:	37d00d01 	.word	0x37d00d01
 801d2a8:	bab60b61 	.word	0xbab60b61
 801d2ac:	3d2aaaab 	.word	0x3d2aaaab
 801d2b0:	3f480000 	.word	0x3f480000

0801d2b4 <__kernel_sinf>:
 801d2b4:	ee10 3a10 	vmov	r3, s0
 801d2b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d2bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801d2c0:	da04      	bge.n	801d2cc <__kernel_sinf+0x18>
 801d2c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801d2c6:	ee17 3a90 	vmov	r3, s15
 801d2ca:	b35b      	cbz	r3, 801d324 <__kernel_sinf+0x70>
 801d2cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 801d2d0:	eddf 7a15 	vldr	s15, [pc, #84]	; 801d328 <__kernel_sinf+0x74>
 801d2d4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801d32c <__kernel_sinf+0x78>
 801d2d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d2dc:	eddf 7a14 	vldr	s15, [pc, #80]	; 801d330 <__kernel_sinf+0x7c>
 801d2e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d2e4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801d334 <__kernel_sinf+0x80>
 801d2e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d2ec:	eddf 7a12 	vldr	s15, [pc, #72]	; 801d338 <__kernel_sinf+0x84>
 801d2f0:	ee60 6a07 	vmul.f32	s13, s0, s14
 801d2f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d2f8:	b930      	cbnz	r0, 801d308 <__kernel_sinf+0x54>
 801d2fa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801d33c <__kernel_sinf+0x88>
 801d2fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d302:	eea6 0a26 	vfma.f32	s0, s12, s13
 801d306:	4770      	bx	lr
 801d308:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801d30c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801d310:	eee0 7a86 	vfma.f32	s15, s1, s12
 801d314:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801d318:	eddf 7a09 	vldr	s15, [pc, #36]	; 801d340 <__kernel_sinf+0x8c>
 801d31c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801d320:	ee30 0a60 	vsub.f32	s0, s0, s1
 801d324:	4770      	bx	lr
 801d326:	bf00      	nop
 801d328:	2f2ec9d3 	.word	0x2f2ec9d3
 801d32c:	b2d72f34 	.word	0xb2d72f34
 801d330:	3638ef1b 	.word	0x3638ef1b
 801d334:	b9500d01 	.word	0xb9500d01
 801d338:	3c088889 	.word	0x3c088889
 801d33c:	be2aaaab 	.word	0xbe2aaaab
 801d340:	3e2aaaab 	.word	0x3e2aaaab

0801d344 <__kernel_tanf>:
 801d344:	b508      	push	{r3, lr}
 801d346:	ee10 3a10 	vmov	r3, s0
 801d34a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d34e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801d352:	eef0 7a40 	vmov.f32	s15, s0
 801d356:	da17      	bge.n	801d388 <__kernel_tanf+0x44>
 801d358:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801d35c:	ee17 1a10 	vmov	r1, s14
 801d360:	bb41      	cbnz	r1, 801d3b4 <__kernel_tanf+0x70>
 801d362:	1c43      	adds	r3, r0, #1
 801d364:	4313      	orrs	r3, r2
 801d366:	d108      	bne.n	801d37a <__kernel_tanf+0x36>
 801d368:	f7ff fd20 	bl	801cdac <fabsf>
 801d36c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d370:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d374:	eeb0 0a67 	vmov.f32	s0, s15
 801d378:	bd08      	pop	{r3, pc}
 801d37a:	2801      	cmp	r0, #1
 801d37c:	d0fa      	beq.n	801d374 <__kernel_tanf+0x30>
 801d37e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801d382:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d386:	e7f5      	b.n	801d374 <__kernel_tanf+0x30>
 801d388:	494c      	ldr	r1, [pc, #304]	; (801d4bc <__kernel_tanf+0x178>)
 801d38a:	428a      	cmp	r2, r1
 801d38c:	db12      	blt.n	801d3b4 <__kernel_tanf+0x70>
 801d38e:	2b00      	cmp	r3, #0
 801d390:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801d4c0 <__kernel_tanf+0x17c>
 801d394:	bfb8      	it	lt
 801d396:	eef1 7a40 	vneglt.f32	s15, s0
 801d39a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d39e:	eddf 7a49 	vldr	s15, [pc, #292]	; 801d4c4 <__kernel_tanf+0x180>
 801d3a2:	bfb8      	it	lt
 801d3a4:	eef1 0a60 	vneglt.f32	s1, s1
 801d3a8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801d3ac:	eddf 0a46 	vldr	s1, [pc, #280]	; 801d4c8 <__kernel_tanf+0x184>
 801d3b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d3b4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801d3b8:	eddf 5a44 	vldr	s11, [pc, #272]	; 801d4cc <__kernel_tanf+0x188>
 801d3bc:	ed9f 6a44 	vldr	s12, [pc, #272]	; 801d4d0 <__kernel_tanf+0x18c>
 801d3c0:	ed9f 5a44 	vldr	s10, [pc, #272]	; 801d4d4 <__kernel_tanf+0x190>
 801d3c4:	493d      	ldr	r1, [pc, #244]	; (801d4bc <__kernel_tanf+0x178>)
 801d3c6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801d3ca:	428a      	cmp	r2, r1
 801d3cc:	eea7 6a25 	vfma.f32	s12, s14, s11
 801d3d0:	eddf 5a41 	vldr	s11, [pc, #260]	; 801d4d8 <__kernel_tanf+0x194>
 801d3d4:	eee6 5a07 	vfma.f32	s11, s12, s14
 801d3d8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801d4dc <__kernel_tanf+0x198>
 801d3dc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d3e0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801d4e0 <__kernel_tanf+0x19c>
 801d3e4:	eee6 5a07 	vfma.f32	s11, s12, s14
 801d3e8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801d4e4 <__kernel_tanf+0x1a0>
 801d3ec:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d3f0:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801d4e8 <__kernel_tanf+0x1a4>
 801d3f4:	eee7 5a05 	vfma.f32	s11, s14, s10
 801d3f8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801d4ec <__kernel_tanf+0x1a8>
 801d3fc:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d400:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801d4f0 <__kernel_tanf+0x1ac>
 801d404:	eee5 5a07 	vfma.f32	s11, s10, s14
 801d408:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801d4f4 <__kernel_tanf+0x1b0>
 801d40c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d410:	eddf 5a39 	vldr	s11, [pc, #228]	; 801d4f8 <__kernel_tanf+0x1b4>
 801d414:	eee5 5a07 	vfma.f32	s11, s10, s14
 801d418:	eeb0 7a46 	vmov.f32	s14, s12
 801d41c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801d420:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801d424:	eeb0 6a60 	vmov.f32	s12, s1
 801d428:	eea7 6a05 	vfma.f32	s12, s14, s10
 801d42c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801d4fc <__kernel_tanf+0x1b8>
 801d430:	eee6 0a26 	vfma.f32	s1, s12, s13
 801d434:	eee5 0a07 	vfma.f32	s1, s10, s14
 801d438:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801d43c:	db1d      	blt.n	801d47a <__kernel_tanf+0x136>
 801d43e:	ee07 0a10 	vmov	s14, r0
 801d442:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d446:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801d44a:	ee76 6a87 	vadd.f32	s13, s13, s14
 801d44e:	179b      	asrs	r3, r3, #30
 801d450:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801d454:	f003 0302 	and.w	r3, r3, #2
 801d458:	f1c3 0301 	rsb	r3, r3, #1
 801d45c:	ee76 6a60 	vsub.f32	s13, s12, s1
 801d460:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801d464:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801d468:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801d46c:	ee07 3a90 	vmov	s15, r3
 801d470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d474:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d478:	e77c      	b.n	801d374 <__kernel_tanf+0x30>
 801d47a:	2801      	cmp	r0, #1
 801d47c:	d01b      	beq.n	801d4b6 <__kernel_tanf+0x172>
 801d47e:	4b20      	ldr	r3, [pc, #128]	; (801d500 <__kernel_tanf+0x1bc>)
 801d480:	ee16 2a90 	vmov	r2, s13
 801d484:	401a      	ands	r2, r3
 801d486:	ee05 2a90 	vmov	s11, r2
 801d48a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801d48e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d492:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801d496:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801d49a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801d49e:	ee16 2a10 	vmov	r2, s12
 801d4a2:	4013      	ands	r3, r2
 801d4a4:	ee07 3a90 	vmov	s15, r3
 801d4a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801d4ac:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801d4b0:	eee7 7a06 	vfma.f32	s15, s14, s12
 801d4b4:	e75e      	b.n	801d374 <__kernel_tanf+0x30>
 801d4b6:	eef0 7a66 	vmov.f32	s15, s13
 801d4ba:	e75b      	b.n	801d374 <__kernel_tanf+0x30>
 801d4bc:	3f2ca140 	.word	0x3f2ca140
 801d4c0:	3f490fda 	.word	0x3f490fda
 801d4c4:	33222168 	.word	0x33222168
 801d4c8:	00000000 	.word	0x00000000
 801d4cc:	b79bae5f 	.word	0xb79bae5f
 801d4d0:	38a3f445 	.word	0x38a3f445
 801d4d4:	37d95384 	.word	0x37d95384
 801d4d8:	3a1a26c8 	.word	0x3a1a26c8
 801d4dc:	3b6b6916 	.word	0x3b6b6916
 801d4e0:	3cb327a4 	.word	0x3cb327a4
 801d4e4:	3e088889 	.word	0x3e088889
 801d4e8:	3895c07a 	.word	0x3895c07a
 801d4ec:	398137b9 	.word	0x398137b9
 801d4f0:	3abede48 	.word	0x3abede48
 801d4f4:	3c11371f 	.word	0x3c11371f
 801d4f8:	3d5d0dd1 	.word	0x3d5d0dd1
 801d4fc:	3eaaaaab 	.word	0x3eaaaaab
 801d500:	fffff000 	.word	0xfffff000

0801d504 <__ieee754_asinf>:
 801d504:	b538      	push	{r3, r4, r5, lr}
 801d506:	ee10 5a10 	vmov	r5, s0
 801d50a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801d50e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801d512:	ed2d 8b04 	vpush	{d8-d9}
 801d516:	d10c      	bne.n	801d532 <__ieee754_asinf+0x2e>
 801d518:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801d690 <__ieee754_asinf+0x18c>
 801d51c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801d694 <__ieee754_asinf+0x190>
 801d520:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d524:	eee0 7a07 	vfma.f32	s15, s0, s14
 801d528:	eeb0 0a67 	vmov.f32	s0, s15
 801d52c:	ecbd 8b04 	vpop	{d8-d9}
 801d530:	bd38      	pop	{r3, r4, r5, pc}
 801d532:	dd04      	ble.n	801d53e <__ieee754_asinf+0x3a>
 801d534:	ee70 7a40 	vsub.f32	s15, s0, s0
 801d538:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801d53c:	e7f6      	b.n	801d52c <__ieee754_asinf+0x28>
 801d53e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801d542:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801d546:	da0b      	bge.n	801d560 <__ieee754_asinf+0x5c>
 801d548:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801d54c:	da52      	bge.n	801d5f4 <__ieee754_asinf+0xf0>
 801d54e:	eddf 7a52 	vldr	s15, [pc, #328]	; 801d698 <__ieee754_asinf+0x194>
 801d552:	ee70 7a27 	vadd.f32	s15, s0, s15
 801d556:	eef4 7ae8 	vcmpe.f32	s15, s17
 801d55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d55e:	dce5      	bgt.n	801d52c <__ieee754_asinf+0x28>
 801d560:	f7ff fc24 	bl	801cdac <fabsf>
 801d564:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801d568:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d56c:	ee20 8a27 	vmul.f32	s16, s0, s15
 801d570:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801d69c <__ieee754_asinf+0x198>
 801d574:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801d6a0 <__ieee754_asinf+0x19c>
 801d578:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801d6a4 <__ieee754_asinf+0x1a0>
 801d57c:	eea8 7a27 	vfma.f32	s14, s16, s15
 801d580:	eddf 7a49 	vldr	s15, [pc, #292]	; 801d6a8 <__ieee754_asinf+0x1a4>
 801d584:	eee7 7a08 	vfma.f32	s15, s14, s16
 801d588:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801d6ac <__ieee754_asinf+0x1a8>
 801d58c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801d590:	eddf 7a47 	vldr	s15, [pc, #284]	; 801d6b0 <__ieee754_asinf+0x1ac>
 801d594:	eee7 7a08 	vfma.f32	s15, s14, s16
 801d598:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801d6b4 <__ieee754_asinf+0x1b0>
 801d59c:	eea7 9a88 	vfma.f32	s18, s15, s16
 801d5a0:	eddf 7a45 	vldr	s15, [pc, #276]	; 801d6b8 <__ieee754_asinf+0x1b4>
 801d5a4:	eee8 7a07 	vfma.f32	s15, s16, s14
 801d5a8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801d6bc <__ieee754_asinf+0x1b8>
 801d5ac:	eea7 7a88 	vfma.f32	s14, s15, s16
 801d5b0:	eddf 7a43 	vldr	s15, [pc, #268]	; 801d6c0 <__ieee754_asinf+0x1bc>
 801d5b4:	eee7 7a08 	vfma.f32	s15, s14, s16
 801d5b8:	eeb0 0a48 	vmov.f32	s0, s16
 801d5bc:	eee7 8a88 	vfma.f32	s17, s15, s16
 801d5c0:	f000 fa00 	bl	801d9c4 <__ieee754_sqrtf>
 801d5c4:	4b3f      	ldr	r3, [pc, #252]	; (801d6c4 <__ieee754_asinf+0x1c0>)
 801d5c6:	ee29 9a08 	vmul.f32	s18, s18, s16
 801d5ca:	429c      	cmp	r4, r3
 801d5cc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801d5d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801d5d4:	dd3d      	ble.n	801d652 <__ieee754_asinf+0x14e>
 801d5d6:	eea0 0a06 	vfma.f32	s0, s0, s12
 801d5da:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801d6c8 <__ieee754_asinf+0x1c4>
 801d5de:	eee0 7a26 	vfma.f32	s15, s0, s13
 801d5e2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801d694 <__ieee754_asinf+0x190>
 801d5e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d5ea:	2d00      	cmp	r5, #0
 801d5ec:	bfd8      	it	le
 801d5ee:	eeb1 0a40 	vnegle.f32	s0, s0
 801d5f2:	e79b      	b.n	801d52c <__ieee754_asinf+0x28>
 801d5f4:	ee60 7a00 	vmul.f32	s15, s0, s0
 801d5f8:	eddf 6a29 	vldr	s13, [pc, #164]	; 801d6a0 <__ieee754_asinf+0x19c>
 801d5fc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 801d69c <__ieee754_asinf+0x198>
 801d600:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801d6b4 <__ieee754_asinf+0x1b0>
 801d604:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801d608:	eddf 6a27 	vldr	s13, [pc, #156]	; 801d6a8 <__ieee754_asinf+0x1a4>
 801d60c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801d610:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801d6ac <__ieee754_asinf+0x1a8>
 801d614:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801d618:	eddf 6a25 	vldr	s13, [pc, #148]	; 801d6b0 <__ieee754_asinf+0x1ac>
 801d61c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801d620:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801d6a4 <__ieee754_asinf+0x1a0>
 801d624:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801d628:	eddf 6a23 	vldr	s13, [pc, #140]	; 801d6b8 <__ieee754_asinf+0x1b4>
 801d62c:	eee7 6a86 	vfma.f32	s13, s15, s12
 801d630:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801d6bc <__ieee754_asinf+0x1b8>
 801d634:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801d638:	eddf 6a21 	vldr	s13, [pc, #132]	; 801d6c0 <__ieee754_asinf+0x1bc>
 801d63c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d640:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d644:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801d648:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801d64c:	eea0 0a27 	vfma.f32	s0, s0, s15
 801d650:	e76c      	b.n	801d52c <__ieee754_asinf+0x28>
 801d652:	ee10 3a10 	vmov	r3, s0
 801d656:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801d65a:	f023 030f 	bic.w	r3, r3, #15
 801d65e:	ee07 3a10 	vmov	s14, r3
 801d662:	eea7 8a47 	vfms.f32	s16, s14, s14
 801d666:	ee70 7a07 	vadd.f32	s15, s0, s14
 801d66a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d66e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801d672:	eddf 7a07 	vldr	s15, [pc, #28]	; 801d690 <__ieee754_asinf+0x18c>
 801d676:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801d67a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801d67e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801d6cc <__ieee754_asinf+0x1c8>
 801d682:	eeb0 6a40 	vmov.f32	s12, s0
 801d686:	eea7 6a66 	vfms.f32	s12, s14, s13
 801d68a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801d68e:	e7aa      	b.n	801d5e6 <__ieee754_asinf+0xe2>
 801d690:	b33bbd2e 	.word	0xb33bbd2e
 801d694:	3fc90fdb 	.word	0x3fc90fdb
 801d698:	7149f2ca 	.word	0x7149f2ca
 801d69c:	3a4f7f04 	.word	0x3a4f7f04
 801d6a0:	3811ef08 	.word	0x3811ef08
 801d6a4:	3e2aaaab 	.word	0x3e2aaaab
 801d6a8:	bd241146 	.word	0xbd241146
 801d6ac:	3e4e0aa8 	.word	0x3e4e0aa8
 801d6b0:	bea6b090 	.word	0xbea6b090
 801d6b4:	3d9dc62e 	.word	0x3d9dc62e
 801d6b8:	bf303361 	.word	0xbf303361
 801d6bc:	4001572d 	.word	0x4001572d
 801d6c0:	c019d139 	.word	0xc019d139
 801d6c4:	3f799999 	.word	0x3f799999
 801d6c8:	333bbd2e 	.word	0x333bbd2e
 801d6cc:	3f490fdb 	.word	0x3f490fdb

0801d6d0 <__ieee754_atan2f>:
 801d6d0:	ee10 2a90 	vmov	r2, s1
 801d6d4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801d6d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801d6dc:	b510      	push	{r4, lr}
 801d6de:	eef0 7a40 	vmov.f32	s15, s0
 801d6e2:	dc06      	bgt.n	801d6f2 <__ieee754_atan2f+0x22>
 801d6e4:	ee10 0a10 	vmov	r0, s0
 801d6e8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801d6ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d6f0:	dd04      	ble.n	801d6fc <__ieee754_atan2f+0x2c>
 801d6f2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801d6f6:	eeb0 0a67 	vmov.f32	s0, s15
 801d6fa:	bd10      	pop	{r4, pc}
 801d6fc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801d700:	d103      	bne.n	801d70a <__ieee754_atan2f+0x3a>
 801d702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d706:	f000 bb8f 	b.w	801de28 <atanf>
 801d70a:	1794      	asrs	r4, r2, #30
 801d70c:	f004 0402 	and.w	r4, r4, #2
 801d710:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801d714:	b943      	cbnz	r3, 801d728 <__ieee754_atan2f+0x58>
 801d716:	2c02      	cmp	r4, #2
 801d718:	d05e      	beq.n	801d7d8 <__ieee754_atan2f+0x108>
 801d71a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801d7ec <__ieee754_atan2f+0x11c>
 801d71e:	2c03      	cmp	r4, #3
 801d720:	bf08      	it	eq
 801d722:	eef0 7a47 	vmoveq.f32	s15, s14
 801d726:	e7e6      	b.n	801d6f6 <__ieee754_atan2f+0x26>
 801d728:	b941      	cbnz	r1, 801d73c <__ieee754_atan2f+0x6c>
 801d72a:	eddf 7a31 	vldr	s15, [pc, #196]	; 801d7f0 <__ieee754_atan2f+0x120>
 801d72e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801d7f4 <__ieee754_atan2f+0x124>
 801d732:	2800      	cmp	r0, #0
 801d734:	bfb8      	it	lt
 801d736:	eef0 7a47 	vmovlt.f32	s15, s14
 801d73a:	e7dc      	b.n	801d6f6 <__ieee754_atan2f+0x26>
 801d73c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801d740:	d110      	bne.n	801d764 <__ieee754_atan2f+0x94>
 801d742:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d746:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801d74a:	d107      	bne.n	801d75c <__ieee754_atan2f+0x8c>
 801d74c:	2c02      	cmp	r4, #2
 801d74e:	d846      	bhi.n	801d7de <__ieee754_atan2f+0x10e>
 801d750:	4b29      	ldr	r3, [pc, #164]	; (801d7f8 <__ieee754_atan2f+0x128>)
 801d752:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801d756:	edd3 7a00 	vldr	s15, [r3]
 801d75a:	e7cc      	b.n	801d6f6 <__ieee754_atan2f+0x26>
 801d75c:	2c02      	cmp	r4, #2
 801d75e:	d841      	bhi.n	801d7e4 <__ieee754_atan2f+0x114>
 801d760:	4b26      	ldr	r3, [pc, #152]	; (801d7fc <__ieee754_atan2f+0x12c>)
 801d762:	e7f6      	b.n	801d752 <__ieee754_atan2f+0x82>
 801d764:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d768:	d0df      	beq.n	801d72a <__ieee754_atan2f+0x5a>
 801d76a:	1a5b      	subs	r3, r3, r1
 801d76c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801d770:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801d774:	da1a      	bge.n	801d7ac <__ieee754_atan2f+0xdc>
 801d776:	2a00      	cmp	r2, #0
 801d778:	da01      	bge.n	801d77e <__ieee754_atan2f+0xae>
 801d77a:	313c      	adds	r1, #60	; 0x3c
 801d77c:	db19      	blt.n	801d7b2 <__ieee754_atan2f+0xe2>
 801d77e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801d782:	f7ff fb13 	bl	801cdac <fabsf>
 801d786:	f000 fb4f 	bl	801de28 <atanf>
 801d78a:	eef0 7a40 	vmov.f32	s15, s0
 801d78e:	2c01      	cmp	r4, #1
 801d790:	d012      	beq.n	801d7b8 <__ieee754_atan2f+0xe8>
 801d792:	2c02      	cmp	r4, #2
 801d794:	d017      	beq.n	801d7c6 <__ieee754_atan2f+0xf6>
 801d796:	2c00      	cmp	r4, #0
 801d798:	d0ad      	beq.n	801d6f6 <__ieee754_atan2f+0x26>
 801d79a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801d800 <__ieee754_atan2f+0x130>
 801d79e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d7a2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801d804 <__ieee754_atan2f+0x134>
 801d7a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d7aa:	e7a4      	b.n	801d6f6 <__ieee754_atan2f+0x26>
 801d7ac:	eddf 7a10 	vldr	s15, [pc, #64]	; 801d7f0 <__ieee754_atan2f+0x120>
 801d7b0:	e7ed      	b.n	801d78e <__ieee754_atan2f+0xbe>
 801d7b2:	eddf 7a15 	vldr	s15, [pc, #84]	; 801d808 <__ieee754_atan2f+0x138>
 801d7b6:	e7ea      	b.n	801d78e <__ieee754_atan2f+0xbe>
 801d7b8:	ee17 3a90 	vmov	r3, s15
 801d7bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d7c0:	ee07 3a90 	vmov	s15, r3
 801d7c4:	e797      	b.n	801d6f6 <__ieee754_atan2f+0x26>
 801d7c6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801d800 <__ieee754_atan2f+0x130>
 801d7ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d7ce:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801d804 <__ieee754_atan2f+0x134>
 801d7d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d7d6:	e78e      	b.n	801d6f6 <__ieee754_atan2f+0x26>
 801d7d8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801d804 <__ieee754_atan2f+0x134>
 801d7dc:	e78b      	b.n	801d6f6 <__ieee754_atan2f+0x26>
 801d7de:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801d80c <__ieee754_atan2f+0x13c>
 801d7e2:	e788      	b.n	801d6f6 <__ieee754_atan2f+0x26>
 801d7e4:	eddf 7a08 	vldr	s15, [pc, #32]	; 801d808 <__ieee754_atan2f+0x138>
 801d7e8:	e785      	b.n	801d6f6 <__ieee754_atan2f+0x26>
 801d7ea:	bf00      	nop
 801d7ec:	c0490fdb 	.word	0xc0490fdb
 801d7f0:	3fc90fdb 	.word	0x3fc90fdb
 801d7f4:	bfc90fdb 	.word	0xbfc90fdb
 801d7f8:	0801fff0 	.word	0x0801fff0
 801d7fc:	0801fffc 	.word	0x0801fffc
 801d800:	33bbbd2e 	.word	0x33bbbd2e
 801d804:	40490fdb 	.word	0x40490fdb
 801d808:	00000000 	.word	0x00000000
 801d80c:	3f490fdb 	.word	0x3f490fdb

0801d810 <__ieee754_sqrt>:
 801d810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d814:	ec55 4b10 	vmov	r4, r5, d0
 801d818:	4e67      	ldr	r6, [pc, #412]	; (801d9b8 <__ieee754_sqrt+0x1a8>)
 801d81a:	43ae      	bics	r6, r5
 801d81c:	ee10 0a10 	vmov	r0, s0
 801d820:	ee10 2a10 	vmov	r2, s0
 801d824:	4629      	mov	r1, r5
 801d826:	462b      	mov	r3, r5
 801d828:	d10d      	bne.n	801d846 <__ieee754_sqrt+0x36>
 801d82a:	f7e2 feef 	bl	800060c <__aeabi_dmul>
 801d82e:	4602      	mov	r2, r0
 801d830:	460b      	mov	r3, r1
 801d832:	4620      	mov	r0, r4
 801d834:	4629      	mov	r1, r5
 801d836:	f7e2 fd33 	bl	80002a0 <__adddf3>
 801d83a:	4604      	mov	r4, r0
 801d83c:	460d      	mov	r5, r1
 801d83e:	ec45 4b10 	vmov	d0, r4, r5
 801d842:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d846:	2d00      	cmp	r5, #0
 801d848:	dc0b      	bgt.n	801d862 <__ieee754_sqrt+0x52>
 801d84a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d84e:	4326      	orrs	r6, r4
 801d850:	d0f5      	beq.n	801d83e <__ieee754_sqrt+0x2e>
 801d852:	b135      	cbz	r5, 801d862 <__ieee754_sqrt+0x52>
 801d854:	f7e2 fd22 	bl	800029c <__aeabi_dsub>
 801d858:	4602      	mov	r2, r0
 801d85a:	460b      	mov	r3, r1
 801d85c:	f7e3 f800 	bl	8000860 <__aeabi_ddiv>
 801d860:	e7eb      	b.n	801d83a <__ieee754_sqrt+0x2a>
 801d862:	1509      	asrs	r1, r1, #20
 801d864:	f000 808d 	beq.w	801d982 <__ieee754_sqrt+0x172>
 801d868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d86c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801d870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d874:	07c9      	lsls	r1, r1, #31
 801d876:	bf5c      	itt	pl
 801d878:	005b      	lslpl	r3, r3, #1
 801d87a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801d87e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d882:	bf58      	it	pl
 801d884:	0052      	lslpl	r2, r2, #1
 801d886:	2500      	movs	r5, #0
 801d888:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801d88c:	1076      	asrs	r6, r6, #1
 801d88e:	0052      	lsls	r2, r2, #1
 801d890:	f04f 0e16 	mov.w	lr, #22
 801d894:	46ac      	mov	ip, r5
 801d896:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801d89a:	eb0c 0001 	add.w	r0, ip, r1
 801d89e:	4298      	cmp	r0, r3
 801d8a0:	bfde      	ittt	le
 801d8a2:	1a1b      	suble	r3, r3, r0
 801d8a4:	eb00 0c01 	addle.w	ip, r0, r1
 801d8a8:	186d      	addle	r5, r5, r1
 801d8aa:	005b      	lsls	r3, r3, #1
 801d8ac:	f1be 0e01 	subs.w	lr, lr, #1
 801d8b0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801d8b4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801d8b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d8bc:	d1ed      	bne.n	801d89a <__ieee754_sqrt+0x8a>
 801d8be:	4674      	mov	r4, lr
 801d8c0:	2720      	movs	r7, #32
 801d8c2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801d8c6:	4563      	cmp	r3, ip
 801d8c8:	eb01 000e 	add.w	r0, r1, lr
 801d8cc:	dc02      	bgt.n	801d8d4 <__ieee754_sqrt+0xc4>
 801d8ce:	d113      	bne.n	801d8f8 <__ieee754_sqrt+0xe8>
 801d8d0:	4290      	cmp	r0, r2
 801d8d2:	d811      	bhi.n	801d8f8 <__ieee754_sqrt+0xe8>
 801d8d4:	2800      	cmp	r0, #0
 801d8d6:	eb00 0e01 	add.w	lr, r0, r1
 801d8da:	da57      	bge.n	801d98c <__ieee754_sqrt+0x17c>
 801d8dc:	f1be 0f00 	cmp.w	lr, #0
 801d8e0:	db54      	blt.n	801d98c <__ieee754_sqrt+0x17c>
 801d8e2:	f10c 0801 	add.w	r8, ip, #1
 801d8e6:	eba3 030c 	sub.w	r3, r3, ip
 801d8ea:	4290      	cmp	r0, r2
 801d8ec:	bf88      	it	hi
 801d8ee:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 801d8f2:	1a12      	subs	r2, r2, r0
 801d8f4:	440c      	add	r4, r1
 801d8f6:	46c4      	mov	ip, r8
 801d8f8:	005b      	lsls	r3, r3, #1
 801d8fa:	3f01      	subs	r7, #1
 801d8fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801d900:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801d904:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d908:	d1dd      	bne.n	801d8c6 <__ieee754_sqrt+0xb6>
 801d90a:	4313      	orrs	r3, r2
 801d90c:	d01b      	beq.n	801d946 <__ieee754_sqrt+0x136>
 801d90e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801d9bc <__ieee754_sqrt+0x1ac>
 801d912:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801d9c0 <__ieee754_sqrt+0x1b0>
 801d916:	e9da 0100 	ldrd	r0, r1, [sl]
 801d91a:	e9db 2300 	ldrd	r2, r3, [fp]
 801d91e:	f7e2 fcbd 	bl	800029c <__aeabi_dsub>
 801d922:	e9da 8900 	ldrd	r8, r9, [sl]
 801d926:	4602      	mov	r2, r0
 801d928:	460b      	mov	r3, r1
 801d92a:	4640      	mov	r0, r8
 801d92c:	4649      	mov	r1, r9
 801d92e:	f7e3 f8e9 	bl	8000b04 <__aeabi_dcmple>
 801d932:	b140      	cbz	r0, 801d946 <__ieee754_sqrt+0x136>
 801d934:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 801d938:	e9da 0100 	ldrd	r0, r1, [sl]
 801d93c:	e9db 2300 	ldrd	r2, r3, [fp]
 801d940:	d126      	bne.n	801d990 <__ieee754_sqrt+0x180>
 801d942:	3501      	adds	r5, #1
 801d944:	463c      	mov	r4, r7
 801d946:	106a      	asrs	r2, r5, #1
 801d948:	0863      	lsrs	r3, r4, #1
 801d94a:	07e9      	lsls	r1, r5, #31
 801d94c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801d950:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801d954:	bf48      	it	mi
 801d956:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801d95a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801d95e:	461c      	mov	r4, r3
 801d960:	e76d      	b.n	801d83e <__ieee754_sqrt+0x2e>
 801d962:	0ad3      	lsrs	r3, r2, #11
 801d964:	3815      	subs	r0, #21
 801d966:	0552      	lsls	r2, r2, #21
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d0fa      	beq.n	801d962 <__ieee754_sqrt+0x152>
 801d96c:	02dc      	lsls	r4, r3, #11
 801d96e:	d50a      	bpl.n	801d986 <__ieee754_sqrt+0x176>
 801d970:	f1c1 0420 	rsb	r4, r1, #32
 801d974:	fa22 f404 	lsr.w	r4, r2, r4
 801d978:	1e4d      	subs	r5, r1, #1
 801d97a:	408a      	lsls	r2, r1
 801d97c:	4323      	orrs	r3, r4
 801d97e:	1b41      	subs	r1, r0, r5
 801d980:	e772      	b.n	801d868 <__ieee754_sqrt+0x58>
 801d982:	4608      	mov	r0, r1
 801d984:	e7f0      	b.n	801d968 <__ieee754_sqrt+0x158>
 801d986:	005b      	lsls	r3, r3, #1
 801d988:	3101      	adds	r1, #1
 801d98a:	e7ef      	b.n	801d96c <__ieee754_sqrt+0x15c>
 801d98c:	46e0      	mov	r8, ip
 801d98e:	e7aa      	b.n	801d8e6 <__ieee754_sqrt+0xd6>
 801d990:	f7e2 fc86 	bl	80002a0 <__adddf3>
 801d994:	e9da 8900 	ldrd	r8, r9, [sl]
 801d998:	4602      	mov	r2, r0
 801d99a:	460b      	mov	r3, r1
 801d99c:	4640      	mov	r0, r8
 801d99e:	4649      	mov	r1, r9
 801d9a0:	f7e3 f8a6 	bl	8000af0 <__aeabi_dcmplt>
 801d9a4:	b120      	cbz	r0, 801d9b0 <__ieee754_sqrt+0x1a0>
 801d9a6:	1ca0      	adds	r0, r4, #2
 801d9a8:	bf08      	it	eq
 801d9aa:	3501      	addeq	r5, #1
 801d9ac:	3402      	adds	r4, #2
 801d9ae:	e7ca      	b.n	801d946 <__ieee754_sqrt+0x136>
 801d9b0:	3401      	adds	r4, #1
 801d9b2:	f024 0401 	bic.w	r4, r4, #1
 801d9b6:	e7c6      	b.n	801d946 <__ieee754_sqrt+0x136>
 801d9b8:	7ff00000 	.word	0x7ff00000
 801d9bc:	200001f8 	.word	0x200001f8
 801d9c0:	20000200 	.word	0x20000200

0801d9c4 <__ieee754_sqrtf>:
 801d9c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801d9c8:	4770      	bx	lr
 801d9ca:	0000      	movs	r0, r0
 801d9cc:	0000      	movs	r0, r0
	...

0801d9d0 <ceil>:
 801d9d0:	ec51 0b10 	vmov	r0, r1, d0
 801d9d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9dc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801d9e0:	2e13      	cmp	r6, #19
 801d9e2:	ee10 5a10 	vmov	r5, s0
 801d9e6:	ee10 8a10 	vmov	r8, s0
 801d9ea:	460c      	mov	r4, r1
 801d9ec:	dc2f      	bgt.n	801da4e <ceil+0x7e>
 801d9ee:	2e00      	cmp	r6, #0
 801d9f0:	da12      	bge.n	801da18 <ceil+0x48>
 801d9f2:	a333      	add	r3, pc, #204	; (adr r3, 801dac0 <ceil+0xf0>)
 801d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9f8:	f7e2 fc52 	bl	80002a0 <__adddf3>
 801d9fc:	2200      	movs	r2, #0
 801d9fe:	2300      	movs	r3, #0
 801da00:	f7e3 f894 	bl	8000b2c <__aeabi_dcmpgt>
 801da04:	b128      	cbz	r0, 801da12 <ceil+0x42>
 801da06:	2c00      	cmp	r4, #0
 801da08:	db51      	blt.n	801daae <ceil+0xde>
 801da0a:	432c      	orrs	r4, r5
 801da0c:	d053      	beq.n	801dab6 <ceil+0xe6>
 801da0e:	4c2e      	ldr	r4, [pc, #184]	; (801dac8 <ceil+0xf8>)
 801da10:	2500      	movs	r5, #0
 801da12:	4621      	mov	r1, r4
 801da14:	4628      	mov	r0, r5
 801da16:	e024      	b.n	801da62 <ceil+0x92>
 801da18:	4f2c      	ldr	r7, [pc, #176]	; (801dacc <ceil+0xfc>)
 801da1a:	4137      	asrs	r7, r6
 801da1c:	ea01 0307 	and.w	r3, r1, r7
 801da20:	4303      	orrs	r3, r0
 801da22:	d01e      	beq.n	801da62 <ceil+0x92>
 801da24:	a326      	add	r3, pc, #152	; (adr r3, 801dac0 <ceil+0xf0>)
 801da26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da2a:	f7e2 fc39 	bl	80002a0 <__adddf3>
 801da2e:	2200      	movs	r2, #0
 801da30:	2300      	movs	r3, #0
 801da32:	f7e3 f87b 	bl	8000b2c <__aeabi_dcmpgt>
 801da36:	2800      	cmp	r0, #0
 801da38:	d0eb      	beq.n	801da12 <ceil+0x42>
 801da3a:	2c00      	cmp	r4, #0
 801da3c:	bfc2      	ittt	gt
 801da3e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801da42:	4133      	asrgt	r3, r6
 801da44:	18e4      	addgt	r4, r4, r3
 801da46:	ea24 0407 	bic.w	r4, r4, r7
 801da4a:	2500      	movs	r5, #0
 801da4c:	e7e1      	b.n	801da12 <ceil+0x42>
 801da4e:	2e33      	cmp	r6, #51	; 0x33
 801da50:	dd0b      	ble.n	801da6a <ceil+0x9a>
 801da52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801da56:	d104      	bne.n	801da62 <ceil+0x92>
 801da58:	ee10 2a10 	vmov	r2, s0
 801da5c:	460b      	mov	r3, r1
 801da5e:	f7e2 fc1f 	bl	80002a0 <__adddf3>
 801da62:	ec41 0b10 	vmov	d0, r0, r1
 801da66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da6a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801da6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801da72:	40df      	lsrs	r7, r3
 801da74:	4238      	tst	r0, r7
 801da76:	d0f4      	beq.n	801da62 <ceil+0x92>
 801da78:	a311      	add	r3, pc, #68	; (adr r3, 801dac0 <ceil+0xf0>)
 801da7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da7e:	f7e2 fc0f 	bl	80002a0 <__adddf3>
 801da82:	2200      	movs	r2, #0
 801da84:	2300      	movs	r3, #0
 801da86:	f7e3 f851 	bl	8000b2c <__aeabi_dcmpgt>
 801da8a:	2800      	cmp	r0, #0
 801da8c:	d0c1      	beq.n	801da12 <ceil+0x42>
 801da8e:	2c00      	cmp	r4, #0
 801da90:	dd0a      	ble.n	801daa8 <ceil+0xd8>
 801da92:	2e14      	cmp	r6, #20
 801da94:	d101      	bne.n	801da9a <ceil+0xca>
 801da96:	3401      	adds	r4, #1
 801da98:	e006      	b.n	801daa8 <ceil+0xd8>
 801da9a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801da9e:	2301      	movs	r3, #1
 801daa0:	40b3      	lsls	r3, r6
 801daa2:	441d      	add	r5, r3
 801daa4:	45a8      	cmp	r8, r5
 801daa6:	d8f6      	bhi.n	801da96 <ceil+0xc6>
 801daa8:	ea25 0507 	bic.w	r5, r5, r7
 801daac:	e7b1      	b.n	801da12 <ceil+0x42>
 801daae:	2500      	movs	r5, #0
 801dab0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801dab4:	e7ad      	b.n	801da12 <ceil+0x42>
 801dab6:	4625      	mov	r5, r4
 801dab8:	e7ab      	b.n	801da12 <ceil+0x42>
 801daba:	bf00      	nop
 801dabc:	f3af 8000 	nop.w
 801dac0:	8800759c 	.word	0x8800759c
 801dac4:	7e37e43c 	.word	0x7e37e43c
 801dac8:	3ff00000 	.word	0x3ff00000
 801dacc:	000fffff 	.word	0x000fffff

0801dad0 <floor>:
 801dad0:	ec51 0b10 	vmov	r0, r1, d0
 801dad4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801dad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dadc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801dae0:	2e13      	cmp	r6, #19
 801dae2:	ee10 5a10 	vmov	r5, s0
 801dae6:	ee10 8a10 	vmov	r8, s0
 801daea:	460c      	mov	r4, r1
 801daec:	dc31      	bgt.n	801db52 <floor+0x82>
 801daee:	2e00      	cmp	r6, #0
 801daf0:	da14      	bge.n	801db1c <floor+0x4c>
 801daf2:	a333      	add	r3, pc, #204	; (adr r3, 801dbc0 <floor+0xf0>)
 801daf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daf8:	f7e2 fbd2 	bl	80002a0 <__adddf3>
 801dafc:	2200      	movs	r2, #0
 801dafe:	2300      	movs	r3, #0
 801db00:	f7e3 f814 	bl	8000b2c <__aeabi_dcmpgt>
 801db04:	b138      	cbz	r0, 801db16 <floor+0x46>
 801db06:	2c00      	cmp	r4, #0
 801db08:	da53      	bge.n	801dbb2 <floor+0xe2>
 801db0a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801db0e:	4325      	orrs	r5, r4
 801db10:	d052      	beq.n	801dbb8 <floor+0xe8>
 801db12:	4c2d      	ldr	r4, [pc, #180]	; (801dbc8 <floor+0xf8>)
 801db14:	2500      	movs	r5, #0
 801db16:	4621      	mov	r1, r4
 801db18:	4628      	mov	r0, r5
 801db1a:	e024      	b.n	801db66 <floor+0x96>
 801db1c:	4f2b      	ldr	r7, [pc, #172]	; (801dbcc <floor+0xfc>)
 801db1e:	4137      	asrs	r7, r6
 801db20:	ea01 0307 	and.w	r3, r1, r7
 801db24:	4303      	orrs	r3, r0
 801db26:	d01e      	beq.n	801db66 <floor+0x96>
 801db28:	a325      	add	r3, pc, #148	; (adr r3, 801dbc0 <floor+0xf0>)
 801db2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db2e:	f7e2 fbb7 	bl	80002a0 <__adddf3>
 801db32:	2200      	movs	r2, #0
 801db34:	2300      	movs	r3, #0
 801db36:	f7e2 fff9 	bl	8000b2c <__aeabi_dcmpgt>
 801db3a:	2800      	cmp	r0, #0
 801db3c:	d0eb      	beq.n	801db16 <floor+0x46>
 801db3e:	2c00      	cmp	r4, #0
 801db40:	bfbe      	ittt	lt
 801db42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801db46:	4133      	asrlt	r3, r6
 801db48:	18e4      	addlt	r4, r4, r3
 801db4a:	ea24 0407 	bic.w	r4, r4, r7
 801db4e:	2500      	movs	r5, #0
 801db50:	e7e1      	b.n	801db16 <floor+0x46>
 801db52:	2e33      	cmp	r6, #51	; 0x33
 801db54:	dd0b      	ble.n	801db6e <floor+0x9e>
 801db56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801db5a:	d104      	bne.n	801db66 <floor+0x96>
 801db5c:	ee10 2a10 	vmov	r2, s0
 801db60:	460b      	mov	r3, r1
 801db62:	f7e2 fb9d 	bl	80002a0 <__adddf3>
 801db66:	ec41 0b10 	vmov	d0, r0, r1
 801db6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db6e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801db72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801db76:	40df      	lsrs	r7, r3
 801db78:	4238      	tst	r0, r7
 801db7a:	d0f4      	beq.n	801db66 <floor+0x96>
 801db7c:	a310      	add	r3, pc, #64	; (adr r3, 801dbc0 <floor+0xf0>)
 801db7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db82:	f7e2 fb8d 	bl	80002a0 <__adddf3>
 801db86:	2200      	movs	r2, #0
 801db88:	2300      	movs	r3, #0
 801db8a:	f7e2 ffcf 	bl	8000b2c <__aeabi_dcmpgt>
 801db8e:	2800      	cmp	r0, #0
 801db90:	d0c1      	beq.n	801db16 <floor+0x46>
 801db92:	2c00      	cmp	r4, #0
 801db94:	da0a      	bge.n	801dbac <floor+0xdc>
 801db96:	2e14      	cmp	r6, #20
 801db98:	d101      	bne.n	801db9e <floor+0xce>
 801db9a:	3401      	adds	r4, #1
 801db9c:	e006      	b.n	801dbac <floor+0xdc>
 801db9e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801dba2:	2301      	movs	r3, #1
 801dba4:	40b3      	lsls	r3, r6
 801dba6:	441d      	add	r5, r3
 801dba8:	45a8      	cmp	r8, r5
 801dbaa:	d8f6      	bhi.n	801db9a <floor+0xca>
 801dbac:	ea25 0507 	bic.w	r5, r5, r7
 801dbb0:	e7b1      	b.n	801db16 <floor+0x46>
 801dbb2:	2500      	movs	r5, #0
 801dbb4:	462c      	mov	r4, r5
 801dbb6:	e7ae      	b.n	801db16 <floor+0x46>
 801dbb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801dbbc:	e7ab      	b.n	801db16 <floor+0x46>
 801dbbe:	bf00      	nop
 801dbc0:	8800759c 	.word	0x8800759c
 801dbc4:	7e37e43c 	.word	0x7e37e43c
 801dbc8:	bff00000 	.word	0xbff00000
 801dbcc:	000fffff 	.word	0x000fffff

0801dbd0 <__ieee754_rem_pio2f>:
 801dbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbd2:	ee10 6a10 	vmov	r6, s0
 801dbd6:	4b86      	ldr	r3, [pc, #536]	; (801ddf0 <__ieee754_rem_pio2f+0x220>)
 801dbd8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801dbdc:	429d      	cmp	r5, r3
 801dbde:	b087      	sub	sp, #28
 801dbe0:	4604      	mov	r4, r0
 801dbe2:	dc05      	bgt.n	801dbf0 <__ieee754_rem_pio2f+0x20>
 801dbe4:	2300      	movs	r3, #0
 801dbe6:	ed80 0a00 	vstr	s0, [r0]
 801dbea:	6043      	str	r3, [r0, #4]
 801dbec:	2000      	movs	r0, #0
 801dbee:	e020      	b.n	801dc32 <__ieee754_rem_pio2f+0x62>
 801dbf0:	4b80      	ldr	r3, [pc, #512]	; (801ddf4 <__ieee754_rem_pio2f+0x224>)
 801dbf2:	429d      	cmp	r5, r3
 801dbf4:	dc38      	bgt.n	801dc68 <__ieee754_rem_pio2f+0x98>
 801dbf6:	2e00      	cmp	r6, #0
 801dbf8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801ddf8 <__ieee754_rem_pio2f+0x228>
 801dbfc:	4b7f      	ldr	r3, [pc, #508]	; (801ddfc <__ieee754_rem_pio2f+0x22c>)
 801dbfe:	f025 050f 	bic.w	r5, r5, #15
 801dc02:	dd18      	ble.n	801dc36 <__ieee754_rem_pio2f+0x66>
 801dc04:	429d      	cmp	r5, r3
 801dc06:	ee70 7a47 	vsub.f32	s15, s0, s14
 801dc0a:	bf09      	itett	eq
 801dc0c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801de00 <__ieee754_rem_pio2f+0x230>
 801dc10:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801de04 <__ieee754_rem_pio2f+0x234>
 801dc14:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801dc18:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801de08 <__ieee754_rem_pio2f+0x238>
 801dc1c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801dc20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801dc24:	edc0 6a00 	vstr	s13, [r0]
 801dc28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dc2c:	edc0 7a01 	vstr	s15, [r0, #4]
 801dc30:	2001      	movs	r0, #1
 801dc32:	b007      	add	sp, #28
 801dc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc36:	429d      	cmp	r5, r3
 801dc38:	ee70 7a07 	vadd.f32	s15, s0, s14
 801dc3c:	bf09      	itett	eq
 801dc3e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801de00 <__ieee754_rem_pio2f+0x230>
 801dc42:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801de04 <__ieee754_rem_pio2f+0x234>
 801dc46:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801dc4a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801de08 <__ieee754_rem_pio2f+0x238>
 801dc4e:	ee77 6a87 	vadd.f32	s13, s15, s14
 801dc52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801dc56:	edc0 6a00 	vstr	s13, [r0]
 801dc5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dc5e:	edc0 7a01 	vstr	s15, [r0, #4]
 801dc62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dc66:	e7e4      	b.n	801dc32 <__ieee754_rem_pio2f+0x62>
 801dc68:	4b68      	ldr	r3, [pc, #416]	; (801de0c <__ieee754_rem_pio2f+0x23c>)
 801dc6a:	429d      	cmp	r5, r3
 801dc6c:	dc71      	bgt.n	801dd52 <__ieee754_rem_pio2f+0x182>
 801dc6e:	f7ff f89d 	bl	801cdac <fabsf>
 801dc72:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801de10 <__ieee754_rem_pio2f+0x240>
 801dc76:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801dc7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801dc7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dc82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801dc86:	ee17 0a90 	vmov	r0, s15
 801dc8a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801ddf8 <__ieee754_rem_pio2f+0x228>
 801dc8e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801dc92:	281f      	cmp	r0, #31
 801dc94:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801de04 <__ieee754_rem_pio2f+0x234>
 801dc98:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc9c:	eeb1 6a47 	vneg.f32	s12, s14
 801dca0:	ee70 6a67 	vsub.f32	s13, s0, s15
 801dca4:	ee16 2a90 	vmov	r2, s13
 801dca8:	dc1c      	bgt.n	801dce4 <__ieee754_rem_pio2f+0x114>
 801dcaa:	495a      	ldr	r1, [pc, #360]	; (801de14 <__ieee754_rem_pio2f+0x244>)
 801dcac:	1e47      	subs	r7, r0, #1
 801dcae:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801dcb2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801dcb6:	428b      	cmp	r3, r1
 801dcb8:	d014      	beq.n	801dce4 <__ieee754_rem_pio2f+0x114>
 801dcba:	6022      	str	r2, [r4, #0]
 801dcbc:	ed94 7a00 	vldr	s14, [r4]
 801dcc0:	ee30 0a47 	vsub.f32	s0, s0, s14
 801dcc4:	2e00      	cmp	r6, #0
 801dcc6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801dcca:	ed84 0a01 	vstr	s0, [r4, #4]
 801dcce:	dab0      	bge.n	801dc32 <__ieee754_rem_pio2f+0x62>
 801dcd0:	eeb1 7a47 	vneg.f32	s14, s14
 801dcd4:	eeb1 0a40 	vneg.f32	s0, s0
 801dcd8:	ed84 7a00 	vstr	s14, [r4]
 801dcdc:	ed84 0a01 	vstr	s0, [r4, #4]
 801dce0:	4240      	negs	r0, r0
 801dce2:	e7a6      	b.n	801dc32 <__ieee754_rem_pio2f+0x62>
 801dce4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801dce8:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801dcec:	2908      	cmp	r1, #8
 801dcee:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801dcf2:	dde2      	ble.n	801dcba <__ieee754_rem_pio2f+0xea>
 801dcf4:	eddf 5a42 	vldr	s11, [pc, #264]	; 801de00 <__ieee754_rem_pio2f+0x230>
 801dcf8:	eef0 6a40 	vmov.f32	s13, s0
 801dcfc:	eee6 6a25 	vfma.f32	s13, s12, s11
 801dd00:	ee70 7a66 	vsub.f32	s15, s0, s13
 801dd04:	eee6 7a25 	vfma.f32	s15, s12, s11
 801dd08:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801de08 <__ieee754_rem_pio2f+0x238>
 801dd0c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801dd10:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801dd14:	ee15 2a90 	vmov	r2, s11
 801dd18:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801dd1c:	1a5b      	subs	r3, r3, r1
 801dd1e:	2b19      	cmp	r3, #25
 801dd20:	dc04      	bgt.n	801dd2c <__ieee754_rem_pio2f+0x15c>
 801dd22:	edc4 5a00 	vstr	s11, [r4]
 801dd26:	eeb0 0a66 	vmov.f32	s0, s13
 801dd2a:	e7c7      	b.n	801dcbc <__ieee754_rem_pio2f+0xec>
 801dd2c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801de18 <__ieee754_rem_pio2f+0x248>
 801dd30:	eeb0 0a66 	vmov.f32	s0, s13
 801dd34:	eea6 0a25 	vfma.f32	s0, s12, s11
 801dd38:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801dd3c:	eddf 6a37 	vldr	s13, [pc, #220]	; 801de1c <__ieee754_rem_pio2f+0x24c>
 801dd40:	eee6 7a25 	vfma.f32	s15, s12, s11
 801dd44:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801dd48:	ee30 7a67 	vsub.f32	s14, s0, s15
 801dd4c:	ed84 7a00 	vstr	s14, [r4]
 801dd50:	e7b4      	b.n	801dcbc <__ieee754_rem_pio2f+0xec>
 801dd52:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801dd56:	db06      	blt.n	801dd66 <__ieee754_rem_pio2f+0x196>
 801dd58:	ee70 7a40 	vsub.f32	s15, s0, s0
 801dd5c:	edc0 7a01 	vstr	s15, [r0, #4]
 801dd60:	edc0 7a00 	vstr	s15, [r0]
 801dd64:	e742      	b.n	801dbec <__ieee754_rem_pio2f+0x1c>
 801dd66:	15ea      	asrs	r2, r5, #23
 801dd68:	3a86      	subs	r2, #134	; 0x86
 801dd6a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801dd6e:	ee07 3a90 	vmov	s15, r3
 801dd72:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801dd76:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801de20 <__ieee754_rem_pio2f+0x250>
 801dd7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dd82:	ed8d 7a03 	vstr	s14, [sp, #12]
 801dd86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dd8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801dd8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dd96:	ed8d 7a04 	vstr	s14, [sp, #16]
 801dd9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dd9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801dda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dda6:	edcd 7a05 	vstr	s15, [sp, #20]
 801ddaa:	d11e      	bne.n	801ddea <__ieee754_rem_pio2f+0x21a>
 801ddac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801ddb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddb4:	bf14      	ite	ne
 801ddb6:	2302      	movne	r3, #2
 801ddb8:	2301      	moveq	r3, #1
 801ddba:	491a      	ldr	r1, [pc, #104]	; (801de24 <__ieee754_rem_pio2f+0x254>)
 801ddbc:	9101      	str	r1, [sp, #4]
 801ddbe:	2102      	movs	r1, #2
 801ddc0:	9100      	str	r1, [sp, #0]
 801ddc2:	a803      	add	r0, sp, #12
 801ddc4:	4621      	mov	r1, r4
 801ddc6:	f000 f903 	bl	801dfd0 <__kernel_rem_pio2f>
 801ddca:	2e00      	cmp	r6, #0
 801ddcc:	f6bf af31 	bge.w	801dc32 <__ieee754_rem_pio2f+0x62>
 801ddd0:	edd4 7a00 	vldr	s15, [r4]
 801ddd4:	eef1 7a67 	vneg.f32	s15, s15
 801ddd8:	edc4 7a00 	vstr	s15, [r4]
 801dddc:	edd4 7a01 	vldr	s15, [r4, #4]
 801dde0:	eef1 7a67 	vneg.f32	s15, s15
 801dde4:	edc4 7a01 	vstr	s15, [r4, #4]
 801dde8:	e77a      	b.n	801dce0 <__ieee754_rem_pio2f+0x110>
 801ddea:	2303      	movs	r3, #3
 801ddec:	e7e5      	b.n	801ddba <__ieee754_rem_pio2f+0x1ea>
 801ddee:	bf00      	nop
 801ddf0:	3f490fd8 	.word	0x3f490fd8
 801ddf4:	4016cbe3 	.word	0x4016cbe3
 801ddf8:	3fc90f80 	.word	0x3fc90f80
 801ddfc:	3fc90fd0 	.word	0x3fc90fd0
 801de00:	37354400 	.word	0x37354400
 801de04:	37354443 	.word	0x37354443
 801de08:	2e85a308 	.word	0x2e85a308
 801de0c:	43490f80 	.word	0x43490f80
 801de10:	3f22f984 	.word	0x3f22f984
 801de14:	08020008 	.word	0x08020008
 801de18:	2e85a300 	.word	0x2e85a300
 801de1c:	248d3132 	.word	0x248d3132
 801de20:	43800000 	.word	0x43800000
 801de24:	08020088 	.word	0x08020088

0801de28 <atanf>:
 801de28:	b538      	push	{r3, r4, r5, lr}
 801de2a:	ee10 5a10 	vmov	r5, s0
 801de2e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801de32:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801de36:	eef0 7a40 	vmov.f32	s15, s0
 801de3a:	db10      	blt.n	801de5e <atanf+0x36>
 801de3c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801de40:	dd04      	ble.n	801de4c <atanf+0x24>
 801de42:	ee70 7a00 	vadd.f32	s15, s0, s0
 801de46:	eeb0 0a67 	vmov.f32	s0, s15
 801de4a:	bd38      	pop	{r3, r4, r5, pc}
 801de4c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801df84 <atanf+0x15c>
 801de50:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801df88 <atanf+0x160>
 801de54:	2d00      	cmp	r5, #0
 801de56:	bfd8      	it	le
 801de58:	eef0 7a47 	vmovle.f32	s15, s14
 801de5c:	e7f3      	b.n	801de46 <atanf+0x1e>
 801de5e:	4b4b      	ldr	r3, [pc, #300]	; (801df8c <atanf+0x164>)
 801de60:	429c      	cmp	r4, r3
 801de62:	dc10      	bgt.n	801de86 <atanf+0x5e>
 801de64:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801de68:	da0a      	bge.n	801de80 <atanf+0x58>
 801de6a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801df90 <atanf+0x168>
 801de6e:	ee30 7a07 	vadd.f32	s14, s0, s14
 801de72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de76:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801de7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de7e:	dce2      	bgt.n	801de46 <atanf+0x1e>
 801de80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801de84:	e013      	b.n	801deae <atanf+0x86>
 801de86:	f7fe ff91 	bl	801cdac <fabsf>
 801de8a:	4b42      	ldr	r3, [pc, #264]	; (801df94 <atanf+0x16c>)
 801de8c:	429c      	cmp	r4, r3
 801de8e:	dc4f      	bgt.n	801df30 <atanf+0x108>
 801de90:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801de94:	429c      	cmp	r4, r3
 801de96:	dc41      	bgt.n	801df1c <atanf+0xf4>
 801de98:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801de9c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801dea0:	eea0 7a27 	vfma.f32	s14, s0, s15
 801dea4:	2300      	movs	r3, #0
 801dea6:	ee30 0a27 	vadd.f32	s0, s0, s15
 801deaa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801deae:	1c5a      	adds	r2, r3, #1
 801deb0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801deb4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801df98 <atanf+0x170>
 801deb8:	eddf 5a38 	vldr	s11, [pc, #224]	; 801df9c <atanf+0x174>
 801debc:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801dfa0 <atanf+0x178>
 801dec0:	ee66 6a06 	vmul.f32	s13, s12, s12
 801dec4:	eee6 5a87 	vfma.f32	s11, s13, s14
 801dec8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801dfa4 <atanf+0x17c>
 801decc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801ded0:	eddf 5a35 	vldr	s11, [pc, #212]	; 801dfa8 <atanf+0x180>
 801ded4:	eee7 5a26 	vfma.f32	s11, s14, s13
 801ded8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801dfac <atanf+0x184>
 801dedc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801dee0:	eddf 5a33 	vldr	s11, [pc, #204]	; 801dfb0 <atanf+0x188>
 801dee4:	eee7 5a26 	vfma.f32	s11, s14, s13
 801dee8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801dfb4 <atanf+0x18c>
 801deec:	eea6 5a87 	vfma.f32	s10, s13, s14
 801def0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801dfb8 <atanf+0x190>
 801def4:	eea5 7a26 	vfma.f32	s14, s10, s13
 801def8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801dfbc <atanf+0x194>
 801defc:	eea7 5a26 	vfma.f32	s10, s14, s13
 801df00:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801dfc0 <atanf+0x198>
 801df04:	eea5 7a26 	vfma.f32	s14, s10, s13
 801df08:	ee27 7a26 	vmul.f32	s14, s14, s13
 801df0c:	eea5 7a86 	vfma.f32	s14, s11, s12
 801df10:	ee27 7a87 	vmul.f32	s14, s15, s14
 801df14:	d121      	bne.n	801df5a <atanf+0x132>
 801df16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801df1a:	e794      	b.n	801de46 <atanf+0x1e>
 801df1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801df20:	ee30 7a67 	vsub.f32	s14, s0, s15
 801df24:	ee30 0a27 	vadd.f32	s0, s0, s15
 801df28:	2301      	movs	r3, #1
 801df2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801df2e:	e7be      	b.n	801deae <atanf+0x86>
 801df30:	4b24      	ldr	r3, [pc, #144]	; (801dfc4 <atanf+0x19c>)
 801df32:	429c      	cmp	r4, r3
 801df34:	dc0b      	bgt.n	801df4e <atanf+0x126>
 801df36:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801df3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801df3e:	eea0 7a27 	vfma.f32	s14, s0, s15
 801df42:	2302      	movs	r3, #2
 801df44:	ee70 6a67 	vsub.f32	s13, s0, s15
 801df48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801df4c:	e7af      	b.n	801deae <atanf+0x86>
 801df4e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801df52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801df56:	2303      	movs	r3, #3
 801df58:	e7a9      	b.n	801deae <atanf+0x86>
 801df5a:	4a1b      	ldr	r2, [pc, #108]	; (801dfc8 <atanf+0x1a0>)
 801df5c:	491b      	ldr	r1, [pc, #108]	; (801dfcc <atanf+0x1a4>)
 801df5e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801df62:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801df66:	edd3 6a00 	vldr	s13, [r3]
 801df6a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801df6e:	2d00      	cmp	r5, #0
 801df70:	ee37 7a67 	vsub.f32	s14, s14, s15
 801df74:	edd2 7a00 	vldr	s15, [r2]
 801df78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801df7c:	bfb8      	it	lt
 801df7e:	eef1 7a67 	vneglt.f32	s15, s15
 801df82:	e760      	b.n	801de46 <atanf+0x1e>
 801df84:	3fc90fdb 	.word	0x3fc90fdb
 801df88:	bfc90fdb 	.word	0xbfc90fdb
 801df8c:	3edfffff 	.word	0x3edfffff
 801df90:	7149f2ca 	.word	0x7149f2ca
 801df94:	3f97ffff 	.word	0x3f97ffff
 801df98:	3c8569d7 	.word	0x3c8569d7
 801df9c:	3d4bda59 	.word	0x3d4bda59
 801dfa0:	bd6ef16b 	.word	0xbd6ef16b
 801dfa4:	3d886b35 	.word	0x3d886b35
 801dfa8:	3dba2e6e 	.word	0x3dba2e6e
 801dfac:	3e124925 	.word	0x3e124925
 801dfb0:	3eaaaaab 	.word	0x3eaaaaab
 801dfb4:	bd15a221 	.word	0xbd15a221
 801dfb8:	bd9d8795 	.word	0xbd9d8795
 801dfbc:	bde38e38 	.word	0xbde38e38
 801dfc0:	be4ccccd 	.word	0xbe4ccccd
 801dfc4:	401bffff 	.word	0x401bffff
 801dfc8:	080203a0 	.word	0x080203a0
 801dfcc:	080203b0 	.word	0x080203b0

0801dfd0 <__kernel_rem_pio2f>:
 801dfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfd4:	ed2d 8b04 	vpush	{d8-d9}
 801dfd8:	b0d9      	sub	sp, #356	; 0x164
 801dfda:	4688      	mov	r8, r1
 801dfdc:	9002      	str	r0, [sp, #8]
 801dfde:	49b8      	ldr	r1, [pc, #736]	; (801e2c0 <__kernel_rem_pio2f+0x2f0>)
 801dfe0:	9866      	ldr	r0, [sp, #408]	; 0x198
 801dfe2:	9301      	str	r3, [sp, #4]
 801dfe4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801dfe8:	9901      	ldr	r1, [sp, #4]
 801dfea:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801dfec:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 801dff0:	1d11      	adds	r1, r2, #4
 801dff2:	db25      	blt.n	801e040 <__kernel_rem_pio2f+0x70>
 801dff4:	1ed0      	subs	r0, r2, #3
 801dff6:	bf48      	it	mi
 801dff8:	1d10      	addmi	r0, r2, #4
 801dffa:	10c0      	asrs	r0, r0, #3
 801dffc:	1c45      	adds	r5, r0, #1
 801dffe:	00e9      	lsls	r1, r5, #3
 801e000:	eba0 070b 	sub.w	r7, r0, fp
 801e004:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801e2d0 <__kernel_rem_pio2f+0x300>
 801e008:	9103      	str	r1, [sp, #12]
 801e00a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801e00e:	eb0a 0c0b 	add.w	ip, sl, fp
 801e012:	ae1c      	add	r6, sp, #112	; 0x70
 801e014:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801e018:	2400      	movs	r4, #0
 801e01a:	4564      	cmp	r4, ip
 801e01c:	dd12      	ble.n	801e044 <__kernel_rem_pio2f+0x74>
 801e01e:	9901      	ldr	r1, [sp, #4]
 801e020:	ac1c      	add	r4, sp, #112	; 0x70
 801e022:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e026:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801e02a:	f04f 0c00 	mov.w	ip, #0
 801e02e:	45d4      	cmp	ip, sl
 801e030:	dc27      	bgt.n	801e082 <__kernel_rem_pio2f+0xb2>
 801e032:	f8dd e008 	ldr.w	lr, [sp, #8]
 801e036:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801e2d0 <__kernel_rem_pio2f+0x300>
 801e03a:	4627      	mov	r7, r4
 801e03c:	2600      	movs	r6, #0
 801e03e:	e016      	b.n	801e06e <__kernel_rem_pio2f+0x9e>
 801e040:	2000      	movs	r0, #0
 801e042:	e7db      	b.n	801dffc <__kernel_rem_pio2f+0x2c>
 801e044:	42e7      	cmn	r7, r4
 801e046:	bf5d      	ittte	pl
 801e048:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801e04c:	ee07 1a90 	vmovpl	s15, r1
 801e050:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801e054:	eef0 7a47 	vmovmi.f32	s15, s14
 801e058:	ece6 7a01 	vstmia	r6!, {s15}
 801e05c:	3401      	adds	r4, #1
 801e05e:	e7dc      	b.n	801e01a <__kernel_rem_pio2f+0x4a>
 801e060:	ecfe 6a01 	vldmia	lr!, {s13}
 801e064:	ed97 7a00 	vldr	s14, [r7]
 801e068:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e06c:	3601      	adds	r6, #1
 801e06e:	455e      	cmp	r6, fp
 801e070:	f1a7 0704 	sub.w	r7, r7, #4
 801e074:	ddf4      	ble.n	801e060 <__kernel_rem_pio2f+0x90>
 801e076:	ece9 7a01 	vstmia	r9!, {s15}
 801e07a:	f10c 0c01 	add.w	ip, ip, #1
 801e07e:	3404      	adds	r4, #4
 801e080:	e7d5      	b.n	801e02e <__kernel_rem_pio2f+0x5e>
 801e082:	a908      	add	r1, sp, #32
 801e084:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e088:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801e08c:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801e2cc <__kernel_rem_pio2f+0x2fc>
 801e090:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801e2c8 <__kernel_rem_pio2f+0x2f8>
 801e094:	9105      	str	r1, [sp, #20]
 801e096:	9304      	str	r3, [sp, #16]
 801e098:	4656      	mov	r6, sl
 801e09a:	00b3      	lsls	r3, r6, #2
 801e09c:	9306      	str	r3, [sp, #24]
 801e09e:	ab58      	add	r3, sp, #352	; 0x160
 801e0a0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801e0a4:	ac08      	add	r4, sp, #32
 801e0a6:	ab44      	add	r3, sp, #272	; 0x110
 801e0a8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801e0ac:	46a4      	mov	ip, r4
 801e0ae:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801e0b2:	4637      	mov	r7, r6
 801e0b4:	2f00      	cmp	r7, #0
 801e0b6:	f1a0 0004 	sub.w	r0, r0, #4
 801e0ba:	dc4a      	bgt.n	801e152 <__kernel_rem_pio2f+0x182>
 801e0bc:	4628      	mov	r0, r5
 801e0be:	9207      	str	r2, [sp, #28]
 801e0c0:	f000 fa3a 	bl	801e538 <scalbnf>
 801e0c4:	eeb0 8a40 	vmov.f32	s16, s0
 801e0c8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801e0cc:	ee28 0a00 	vmul.f32	s0, s16, s0
 801e0d0:	f000 f9f0 	bl	801e4b4 <floorf>
 801e0d4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801e0d8:	eea0 8a67 	vfms.f32	s16, s0, s15
 801e0dc:	2d00      	cmp	r5, #0
 801e0de:	9a07      	ldr	r2, [sp, #28]
 801e0e0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801e0e4:	ee17 9a90 	vmov	r9, s15
 801e0e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e0ec:	ee38 8a67 	vsub.f32	s16, s16, s15
 801e0f0:	dd41      	ble.n	801e176 <__kernel_rem_pio2f+0x1a6>
 801e0f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801e0f6:	ab08      	add	r3, sp, #32
 801e0f8:	f1c5 0e08 	rsb	lr, r5, #8
 801e0fc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801e100:	fa47 f00e 	asr.w	r0, r7, lr
 801e104:	4481      	add	r9, r0
 801e106:	fa00 f00e 	lsl.w	r0, r0, lr
 801e10a:	1a3f      	subs	r7, r7, r0
 801e10c:	f1c5 0007 	rsb	r0, r5, #7
 801e110:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801e114:	4107      	asrs	r7, r0
 801e116:	2f00      	cmp	r7, #0
 801e118:	dd3c      	ble.n	801e194 <__kernel_rem_pio2f+0x1c4>
 801e11a:	f04f 0e00 	mov.w	lr, #0
 801e11e:	f109 0901 	add.w	r9, r9, #1
 801e122:	4671      	mov	r1, lr
 801e124:	4576      	cmp	r6, lr
 801e126:	dc67      	bgt.n	801e1f8 <__kernel_rem_pio2f+0x228>
 801e128:	2d00      	cmp	r5, #0
 801e12a:	dd03      	ble.n	801e134 <__kernel_rem_pio2f+0x164>
 801e12c:	2d01      	cmp	r5, #1
 801e12e:	d074      	beq.n	801e21a <__kernel_rem_pio2f+0x24a>
 801e130:	2d02      	cmp	r5, #2
 801e132:	d07b      	beq.n	801e22c <__kernel_rem_pio2f+0x25c>
 801e134:	2f02      	cmp	r7, #2
 801e136:	d12d      	bne.n	801e194 <__kernel_rem_pio2f+0x1c4>
 801e138:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e13c:	ee30 8a48 	vsub.f32	s16, s0, s16
 801e140:	b341      	cbz	r1, 801e194 <__kernel_rem_pio2f+0x1c4>
 801e142:	4628      	mov	r0, r5
 801e144:	9207      	str	r2, [sp, #28]
 801e146:	f000 f9f7 	bl	801e538 <scalbnf>
 801e14a:	9a07      	ldr	r2, [sp, #28]
 801e14c:	ee38 8a40 	vsub.f32	s16, s16, s0
 801e150:	e020      	b.n	801e194 <__kernel_rem_pio2f+0x1c4>
 801e152:	ee60 7a28 	vmul.f32	s15, s0, s17
 801e156:	3f01      	subs	r7, #1
 801e158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e15c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e160:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801e164:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e168:	ecac 0a01 	vstmia	ip!, {s0}
 801e16c:	ed90 0a00 	vldr	s0, [r0]
 801e170:	ee37 0a80 	vadd.f32	s0, s15, s0
 801e174:	e79e      	b.n	801e0b4 <__kernel_rem_pio2f+0xe4>
 801e176:	d105      	bne.n	801e184 <__kernel_rem_pio2f+0x1b4>
 801e178:	1e70      	subs	r0, r6, #1
 801e17a:	ab08      	add	r3, sp, #32
 801e17c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801e180:	11ff      	asrs	r7, r7, #7
 801e182:	e7c8      	b.n	801e116 <__kernel_rem_pio2f+0x146>
 801e184:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e188:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e190:	da30      	bge.n	801e1f4 <__kernel_rem_pio2f+0x224>
 801e192:	2700      	movs	r7, #0
 801e194:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e19c:	f040 809a 	bne.w	801e2d4 <__kernel_rem_pio2f+0x304>
 801e1a0:	1e74      	subs	r4, r6, #1
 801e1a2:	46a4      	mov	ip, r4
 801e1a4:	2100      	movs	r1, #0
 801e1a6:	45d4      	cmp	ip, sl
 801e1a8:	da47      	bge.n	801e23a <__kernel_rem_pio2f+0x26a>
 801e1aa:	2900      	cmp	r1, #0
 801e1ac:	d063      	beq.n	801e276 <__kernel_rem_pio2f+0x2a6>
 801e1ae:	ab08      	add	r3, sp, #32
 801e1b0:	3d08      	subs	r5, #8
 801e1b2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	d07f      	beq.n	801e2ba <__kernel_rem_pio2f+0x2ea>
 801e1ba:	4628      	mov	r0, r5
 801e1bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e1c0:	f000 f9ba 	bl	801e538 <scalbnf>
 801e1c4:	1c63      	adds	r3, r4, #1
 801e1c6:	aa44      	add	r2, sp, #272	; 0x110
 801e1c8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801e2cc <__kernel_rem_pio2f+0x2fc>
 801e1cc:	0099      	lsls	r1, r3, #2
 801e1ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e1d2:	4623      	mov	r3, r4
 801e1d4:	2b00      	cmp	r3, #0
 801e1d6:	f280 80ad 	bge.w	801e334 <__kernel_rem_pio2f+0x364>
 801e1da:	4623      	mov	r3, r4
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	f2c0 80cb 	blt.w	801e378 <__kernel_rem_pio2f+0x3a8>
 801e1e2:	aa44      	add	r2, sp, #272	; 0x110
 801e1e4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801e1e8:	4e36      	ldr	r6, [pc, #216]	; (801e2c4 <__kernel_rem_pio2f+0x2f4>)
 801e1ea:	eddf 7a39 	vldr	s15, [pc, #228]	; 801e2d0 <__kernel_rem_pio2f+0x300>
 801e1ee:	2000      	movs	r0, #0
 801e1f0:	1ae2      	subs	r2, r4, r3
 801e1f2:	e0b6      	b.n	801e362 <__kernel_rem_pio2f+0x392>
 801e1f4:	2702      	movs	r7, #2
 801e1f6:	e790      	b.n	801e11a <__kernel_rem_pio2f+0x14a>
 801e1f8:	6820      	ldr	r0, [r4, #0]
 801e1fa:	b949      	cbnz	r1, 801e210 <__kernel_rem_pio2f+0x240>
 801e1fc:	b118      	cbz	r0, 801e206 <__kernel_rem_pio2f+0x236>
 801e1fe:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801e202:	6020      	str	r0, [r4, #0]
 801e204:	2001      	movs	r0, #1
 801e206:	f10e 0e01 	add.w	lr, lr, #1
 801e20a:	3404      	adds	r4, #4
 801e20c:	4601      	mov	r1, r0
 801e20e:	e789      	b.n	801e124 <__kernel_rem_pio2f+0x154>
 801e210:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801e214:	6020      	str	r0, [r4, #0]
 801e216:	4608      	mov	r0, r1
 801e218:	e7f5      	b.n	801e206 <__kernel_rem_pio2f+0x236>
 801e21a:	1e74      	subs	r4, r6, #1
 801e21c:	ab08      	add	r3, sp, #32
 801e21e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e222:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801e226:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801e22a:	e783      	b.n	801e134 <__kernel_rem_pio2f+0x164>
 801e22c:	1e74      	subs	r4, r6, #1
 801e22e:	ab08      	add	r3, sp, #32
 801e230:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e234:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801e238:	e7f5      	b.n	801e226 <__kernel_rem_pio2f+0x256>
 801e23a:	ab08      	add	r3, sp, #32
 801e23c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801e240:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801e244:	4301      	orrs	r1, r0
 801e246:	e7ae      	b.n	801e1a6 <__kernel_rem_pio2f+0x1d6>
 801e248:	3001      	adds	r0, #1
 801e24a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801e24e:	2f00      	cmp	r7, #0
 801e250:	d0fa      	beq.n	801e248 <__kernel_rem_pio2f+0x278>
 801e252:	9b06      	ldr	r3, [sp, #24]
 801e254:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801e258:	eb0d 0403 	add.w	r4, sp, r3
 801e25c:	9b01      	ldr	r3, [sp, #4]
 801e25e:	18f7      	adds	r7, r6, r3
 801e260:	ab1c      	add	r3, sp, #112	; 0x70
 801e262:	f106 0c01 	add.w	ip, r6, #1
 801e266:	3c4c      	subs	r4, #76	; 0x4c
 801e268:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801e26c:	4430      	add	r0, r6
 801e26e:	4560      	cmp	r0, ip
 801e270:	da04      	bge.n	801e27c <__kernel_rem_pio2f+0x2ac>
 801e272:	4606      	mov	r6, r0
 801e274:	e711      	b.n	801e09a <__kernel_rem_pio2f+0xca>
 801e276:	9c05      	ldr	r4, [sp, #20]
 801e278:	2001      	movs	r0, #1
 801e27a:	e7e6      	b.n	801e24a <__kernel_rem_pio2f+0x27a>
 801e27c:	9b04      	ldr	r3, [sp, #16]
 801e27e:	f8dd e008 	ldr.w	lr, [sp, #8]
 801e282:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801e286:	9306      	str	r3, [sp, #24]
 801e288:	ee07 3a90 	vmov	s15, r3
 801e28c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e290:	2600      	movs	r6, #0
 801e292:	ece7 7a01 	vstmia	r7!, {s15}
 801e296:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801e2d0 <__kernel_rem_pio2f+0x300>
 801e29a:	46b9      	mov	r9, r7
 801e29c:	455e      	cmp	r6, fp
 801e29e:	dd04      	ble.n	801e2aa <__kernel_rem_pio2f+0x2da>
 801e2a0:	ece4 7a01 	vstmia	r4!, {s15}
 801e2a4:	f10c 0c01 	add.w	ip, ip, #1
 801e2a8:	e7e1      	b.n	801e26e <__kernel_rem_pio2f+0x29e>
 801e2aa:	ecfe 6a01 	vldmia	lr!, {s13}
 801e2ae:	ed39 7a01 	vldmdb	r9!, {s14}
 801e2b2:	3601      	adds	r6, #1
 801e2b4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e2b8:	e7f0      	b.n	801e29c <__kernel_rem_pio2f+0x2cc>
 801e2ba:	3c01      	subs	r4, #1
 801e2bc:	e777      	b.n	801e1ae <__kernel_rem_pio2f+0x1de>
 801e2be:	bf00      	nop
 801e2c0:	080203ec 	.word	0x080203ec
 801e2c4:	080203c0 	.word	0x080203c0
 801e2c8:	43800000 	.word	0x43800000
 801e2cc:	3b800000 	.word	0x3b800000
 801e2d0:	00000000 	.word	0x00000000
 801e2d4:	9b03      	ldr	r3, [sp, #12]
 801e2d6:	eeb0 0a48 	vmov.f32	s0, s16
 801e2da:	1a98      	subs	r0, r3, r2
 801e2dc:	f000 f92c 	bl	801e538 <scalbnf>
 801e2e0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801e2c8 <__kernel_rem_pio2f+0x2f8>
 801e2e4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801e2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2ec:	db19      	blt.n	801e322 <__kernel_rem_pio2f+0x352>
 801e2ee:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801e2cc <__kernel_rem_pio2f+0x2fc>
 801e2f2:	ee60 7a27 	vmul.f32	s15, s0, s15
 801e2f6:	aa08      	add	r2, sp, #32
 801e2f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e2fc:	1c74      	adds	r4, r6, #1
 801e2fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e302:	3508      	adds	r5, #8
 801e304:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801e308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e30c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e310:	ee10 3a10 	vmov	r3, s0
 801e314:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801e318:	ee17 3a90 	vmov	r3, s15
 801e31c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801e320:	e74b      	b.n	801e1ba <__kernel_rem_pio2f+0x1ea>
 801e322:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e326:	aa08      	add	r2, sp, #32
 801e328:	ee10 3a10 	vmov	r3, s0
 801e32c:	4634      	mov	r4, r6
 801e32e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801e332:	e742      	b.n	801e1ba <__kernel_rem_pio2f+0x1ea>
 801e334:	a808      	add	r0, sp, #32
 801e336:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801e33a:	9001      	str	r0, [sp, #4]
 801e33c:	ee07 0a90 	vmov	s15, r0
 801e340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e344:	3b01      	subs	r3, #1
 801e346:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e34a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801e34e:	ed62 7a01 	vstmdb	r2!, {s15}
 801e352:	e73f      	b.n	801e1d4 <__kernel_rem_pio2f+0x204>
 801e354:	ecf6 6a01 	vldmia	r6!, {s13}
 801e358:	ecb5 7a01 	vldmia	r5!, {s14}
 801e35c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e360:	3001      	adds	r0, #1
 801e362:	4550      	cmp	r0, sl
 801e364:	dc01      	bgt.n	801e36a <__kernel_rem_pio2f+0x39a>
 801e366:	4290      	cmp	r0, r2
 801e368:	ddf4      	ble.n	801e354 <__kernel_rem_pio2f+0x384>
 801e36a:	a858      	add	r0, sp, #352	; 0x160
 801e36c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801e370:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801e374:	3b01      	subs	r3, #1
 801e376:	e731      	b.n	801e1dc <__kernel_rem_pio2f+0x20c>
 801e378:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801e37a:	2b02      	cmp	r3, #2
 801e37c:	dc09      	bgt.n	801e392 <__kernel_rem_pio2f+0x3c2>
 801e37e:	2b00      	cmp	r3, #0
 801e380:	dc2b      	bgt.n	801e3da <__kernel_rem_pio2f+0x40a>
 801e382:	d044      	beq.n	801e40e <__kernel_rem_pio2f+0x43e>
 801e384:	f009 0007 	and.w	r0, r9, #7
 801e388:	b059      	add	sp, #356	; 0x164
 801e38a:	ecbd 8b04 	vpop	{d8-d9}
 801e38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e392:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801e394:	2b03      	cmp	r3, #3
 801e396:	d1f5      	bne.n	801e384 <__kernel_rem_pio2f+0x3b4>
 801e398:	aa30      	add	r2, sp, #192	; 0xc0
 801e39a:	1f0b      	subs	r3, r1, #4
 801e39c:	4413      	add	r3, r2
 801e39e:	461a      	mov	r2, r3
 801e3a0:	4620      	mov	r0, r4
 801e3a2:	2800      	cmp	r0, #0
 801e3a4:	f1a2 0204 	sub.w	r2, r2, #4
 801e3a8:	dc52      	bgt.n	801e450 <__kernel_rem_pio2f+0x480>
 801e3aa:	4622      	mov	r2, r4
 801e3ac:	2a01      	cmp	r2, #1
 801e3ae:	f1a3 0304 	sub.w	r3, r3, #4
 801e3b2:	dc5d      	bgt.n	801e470 <__kernel_rem_pio2f+0x4a0>
 801e3b4:	ab30      	add	r3, sp, #192	; 0xc0
 801e3b6:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801e2d0 <__kernel_rem_pio2f+0x300>
 801e3ba:	440b      	add	r3, r1
 801e3bc:	2c01      	cmp	r4, #1
 801e3be:	dc67      	bgt.n	801e490 <__kernel_rem_pio2f+0x4c0>
 801e3c0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801e3c4:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801e3c8:	2f00      	cmp	r7, #0
 801e3ca:	d167      	bne.n	801e49c <__kernel_rem_pio2f+0x4cc>
 801e3cc:	edc8 6a00 	vstr	s13, [r8]
 801e3d0:	ed88 7a01 	vstr	s14, [r8, #4]
 801e3d4:	edc8 7a02 	vstr	s15, [r8, #8]
 801e3d8:	e7d4      	b.n	801e384 <__kernel_rem_pio2f+0x3b4>
 801e3da:	ab30      	add	r3, sp, #192	; 0xc0
 801e3dc:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801e2d0 <__kernel_rem_pio2f+0x300>
 801e3e0:	440b      	add	r3, r1
 801e3e2:	4622      	mov	r2, r4
 801e3e4:	2a00      	cmp	r2, #0
 801e3e6:	da24      	bge.n	801e432 <__kernel_rem_pio2f+0x462>
 801e3e8:	b34f      	cbz	r7, 801e43e <__kernel_rem_pio2f+0x46e>
 801e3ea:	eef1 7a47 	vneg.f32	s15, s14
 801e3ee:	edc8 7a00 	vstr	s15, [r8]
 801e3f2:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801e3f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e3fa:	aa31      	add	r2, sp, #196	; 0xc4
 801e3fc:	2301      	movs	r3, #1
 801e3fe:	429c      	cmp	r4, r3
 801e400:	da20      	bge.n	801e444 <__kernel_rem_pio2f+0x474>
 801e402:	b10f      	cbz	r7, 801e408 <__kernel_rem_pio2f+0x438>
 801e404:	eef1 7a67 	vneg.f32	s15, s15
 801e408:	edc8 7a01 	vstr	s15, [r8, #4]
 801e40c:	e7ba      	b.n	801e384 <__kernel_rem_pio2f+0x3b4>
 801e40e:	ab30      	add	r3, sp, #192	; 0xc0
 801e410:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801e2d0 <__kernel_rem_pio2f+0x300>
 801e414:	440b      	add	r3, r1
 801e416:	2c00      	cmp	r4, #0
 801e418:	da05      	bge.n	801e426 <__kernel_rem_pio2f+0x456>
 801e41a:	b10f      	cbz	r7, 801e420 <__kernel_rem_pio2f+0x450>
 801e41c:	eef1 7a67 	vneg.f32	s15, s15
 801e420:	edc8 7a00 	vstr	s15, [r8]
 801e424:	e7ae      	b.n	801e384 <__kernel_rem_pio2f+0x3b4>
 801e426:	ed33 7a01 	vldmdb	r3!, {s14}
 801e42a:	3c01      	subs	r4, #1
 801e42c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e430:	e7f1      	b.n	801e416 <__kernel_rem_pio2f+0x446>
 801e432:	ed73 7a01 	vldmdb	r3!, {s15}
 801e436:	3a01      	subs	r2, #1
 801e438:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e43c:	e7d2      	b.n	801e3e4 <__kernel_rem_pio2f+0x414>
 801e43e:	eef0 7a47 	vmov.f32	s15, s14
 801e442:	e7d4      	b.n	801e3ee <__kernel_rem_pio2f+0x41e>
 801e444:	ecb2 7a01 	vldmia	r2!, {s14}
 801e448:	3301      	adds	r3, #1
 801e44a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e44e:	e7d6      	b.n	801e3fe <__kernel_rem_pio2f+0x42e>
 801e450:	edd2 7a00 	vldr	s15, [r2]
 801e454:	edd2 6a01 	vldr	s13, [r2, #4]
 801e458:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e45c:	3801      	subs	r0, #1
 801e45e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e462:	ed82 7a00 	vstr	s14, [r2]
 801e466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e46a:	edc2 7a01 	vstr	s15, [r2, #4]
 801e46e:	e798      	b.n	801e3a2 <__kernel_rem_pio2f+0x3d2>
 801e470:	edd3 7a00 	vldr	s15, [r3]
 801e474:	edd3 6a01 	vldr	s13, [r3, #4]
 801e478:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e47c:	3a01      	subs	r2, #1
 801e47e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e482:	ed83 7a00 	vstr	s14, [r3]
 801e486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e48a:	edc3 7a01 	vstr	s15, [r3, #4]
 801e48e:	e78d      	b.n	801e3ac <__kernel_rem_pio2f+0x3dc>
 801e490:	ed33 7a01 	vldmdb	r3!, {s14}
 801e494:	3c01      	subs	r4, #1
 801e496:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e49a:	e78f      	b.n	801e3bc <__kernel_rem_pio2f+0x3ec>
 801e49c:	eef1 6a66 	vneg.f32	s13, s13
 801e4a0:	eeb1 7a47 	vneg.f32	s14, s14
 801e4a4:	edc8 6a00 	vstr	s13, [r8]
 801e4a8:	ed88 7a01 	vstr	s14, [r8, #4]
 801e4ac:	eef1 7a67 	vneg.f32	s15, s15
 801e4b0:	e790      	b.n	801e3d4 <__kernel_rem_pio2f+0x404>
 801e4b2:	bf00      	nop

0801e4b4 <floorf>:
 801e4b4:	ee10 3a10 	vmov	r3, s0
 801e4b8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801e4bc:	3a7f      	subs	r2, #127	; 0x7f
 801e4be:	2a16      	cmp	r2, #22
 801e4c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801e4c4:	dc2a      	bgt.n	801e51c <floorf+0x68>
 801e4c6:	2a00      	cmp	r2, #0
 801e4c8:	da11      	bge.n	801e4ee <floorf+0x3a>
 801e4ca:	eddf 7a18 	vldr	s15, [pc, #96]	; 801e52c <floorf+0x78>
 801e4ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e4d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801e4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4da:	dd05      	ble.n	801e4e8 <floorf+0x34>
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	da23      	bge.n	801e528 <floorf+0x74>
 801e4e0:	4a13      	ldr	r2, [pc, #76]	; (801e530 <floorf+0x7c>)
 801e4e2:	2900      	cmp	r1, #0
 801e4e4:	bf18      	it	ne
 801e4e6:	4613      	movne	r3, r2
 801e4e8:	ee00 3a10 	vmov	s0, r3
 801e4ec:	4770      	bx	lr
 801e4ee:	4911      	ldr	r1, [pc, #68]	; (801e534 <floorf+0x80>)
 801e4f0:	4111      	asrs	r1, r2
 801e4f2:	420b      	tst	r3, r1
 801e4f4:	d0fa      	beq.n	801e4ec <floorf+0x38>
 801e4f6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801e52c <floorf+0x78>
 801e4fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e4fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801e502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e506:	ddef      	ble.n	801e4e8 <floorf+0x34>
 801e508:	2b00      	cmp	r3, #0
 801e50a:	bfbe      	ittt	lt
 801e50c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801e510:	fa40 f202 	asrlt.w	r2, r0, r2
 801e514:	189b      	addlt	r3, r3, r2
 801e516:	ea23 0301 	bic.w	r3, r3, r1
 801e51a:	e7e5      	b.n	801e4e8 <floorf+0x34>
 801e51c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e520:	d3e4      	bcc.n	801e4ec <floorf+0x38>
 801e522:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e526:	4770      	bx	lr
 801e528:	2300      	movs	r3, #0
 801e52a:	e7dd      	b.n	801e4e8 <floorf+0x34>
 801e52c:	7149f2ca 	.word	0x7149f2ca
 801e530:	bf800000 	.word	0xbf800000
 801e534:	007fffff 	.word	0x007fffff

0801e538 <scalbnf>:
 801e538:	ee10 3a10 	vmov	r3, s0
 801e53c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801e540:	d02b      	beq.n	801e59a <scalbnf+0x62>
 801e542:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801e546:	d302      	bcc.n	801e54e <scalbnf+0x16>
 801e548:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e54c:	4770      	bx	lr
 801e54e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801e552:	d123      	bne.n	801e59c <scalbnf+0x64>
 801e554:	4b24      	ldr	r3, [pc, #144]	; (801e5e8 <scalbnf+0xb0>)
 801e556:	eddf 7a25 	vldr	s15, [pc, #148]	; 801e5ec <scalbnf+0xb4>
 801e55a:	4298      	cmp	r0, r3
 801e55c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801e560:	db17      	blt.n	801e592 <scalbnf+0x5a>
 801e562:	ee10 3a10 	vmov	r3, s0
 801e566:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801e56a:	3a19      	subs	r2, #25
 801e56c:	f24c 3150 	movw	r1, #50000	; 0xc350
 801e570:	4288      	cmp	r0, r1
 801e572:	dd15      	ble.n	801e5a0 <scalbnf+0x68>
 801e574:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801e5f0 <scalbnf+0xb8>
 801e578:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801e5f4 <scalbnf+0xbc>
 801e57c:	ee10 3a10 	vmov	r3, s0
 801e580:	eeb0 7a67 	vmov.f32	s14, s15
 801e584:	2b00      	cmp	r3, #0
 801e586:	bfb8      	it	lt
 801e588:	eef0 7a66 	vmovlt.f32	s15, s13
 801e58c:	ee27 0a87 	vmul.f32	s0, s15, s14
 801e590:	4770      	bx	lr
 801e592:	eddf 7a19 	vldr	s15, [pc, #100]	; 801e5f8 <scalbnf+0xc0>
 801e596:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e59a:	4770      	bx	lr
 801e59c:	0dd2      	lsrs	r2, r2, #23
 801e59e:	e7e5      	b.n	801e56c <scalbnf+0x34>
 801e5a0:	4410      	add	r0, r2
 801e5a2:	28fe      	cmp	r0, #254	; 0xfe
 801e5a4:	dce6      	bgt.n	801e574 <scalbnf+0x3c>
 801e5a6:	2800      	cmp	r0, #0
 801e5a8:	dd06      	ble.n	801e5b8 <scalbnf+0x80>
 801e5aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e5ae:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801e5b2:	ee00 3a10 	vmov	s0, r3
 801e5b6:	4770      	bx	lr
 801e5b8:	f110 0f16 	cmn.w	r0, #22
 801e5bc:	da09      	bge.n	801e5d2 <scalbnf+0x9a>
 801e5be:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801e5f8 <scalbnf+0xc0>
 801e5c2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801e5fc <scalbnf+0xc4>
 801e5c6:	ee10 3a10 	vmov	r3, s0
 801e5ca:	eeb0 7a67 	vmov.f32	s14, s15
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	e7d9      	b.n	801e586 <scalbnf+0x4e>
 801e5d2:	3019      	adds	r0, #25
 801e5d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e5d8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801e5dc:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801e600 <scalbnf+0xc8>
 801e5e0:	ee07 3a90 	vmov	s15, r3
 801e5e4:	e7d7      	b.n	801e596 <scalbnf+0x5e>
 801e5e6:	bf00      	nop
 801e5e8:	ffff3cb0 	.word	0xffff3cb0
 801e5ec:	4c000000 	.word	0x4c000000
 801e5f0:	7149f2ca 	.word	0x7149f2ca
 801e5f4:	f149f2ca 	.word	0xf149f2ca
 801e5f8:	0da24260 	.word	0x0da24260
 801e5fc:	8da24260 	.word	0x8da24260
 801e600:	33000000 	.word	0x33000000

0801e604 <_init>:
 801e604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e606:	bf00      	nop
 801e608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e60a:	bc08      	pop	{r3}
 801e60c:	469e      	mov	lr, r3
 801e60e:	4770      	bx	lr

0801e610 <_fini>:
 801e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e612:	bf00      	nop
 801e614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e616:	bc08      	pop	{r3}
 801e618:	469e      	mov	lr, r3
 801e61a:	4770      	bx	lr
